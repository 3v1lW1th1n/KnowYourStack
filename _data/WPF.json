{"Data":{"GitHub":{"Issues":[{"Id":"435164413","IsPullRequest":true,"CreatedAt":"2019-04-20T12:46:07","Actor":"dotnet-maestro[bot]","Number":"609","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190418.16\r\n- **Date Produced**: 4/19/2019 7:04 AM\r\n- **Commit**: 490010c3451a44e45f782a019efd736aa490f79c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27618-16\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19218.10 (parent: Microsoft.NETCore.App)\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190420.01\r\n- **Date Produced**: 4/20/2019 10:12 AM\r\n- **Commit**: b9a720984fa4d6454d1c66ae765bc1e34cb1d206\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27620-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19219.11 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/609","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#609)"},{"Id":"435390912","IsPullRequest":true,"CreatedAt":"2019-04-20T12:12:49","Actor":"dotnet-maestro[bot]","Number":"610","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/610","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#610)"},{"Id":"435155241","IsPullRequest":true,"CreatedAt":"2019-04-19T12:15:41","Actor":"dotnet-maestro[bot]","Number":"608","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/608","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#608)"},{"Id":"433431340","IsPullRequest":false,"CreatedAt":"2019-04-18T21:46:38","Actor":"fadimounir","Number":"587","RawContent":null,"Title":"Add attribute to C++/CLI assemblies","State":"closed","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nAs discussed over email, we need to add some attribute to the IJW assemblies (DirectWriteForwarder.dll and System.Printing.dll to help with this bug: https://github.com/dotnet/coreclr/issues/23872\r\n\r\nFor Preview 5, the coreclr bug might not get fixed in time, so we'll use the assembly attribute as a way to exclude these 2 problematic assemblies from being compiled into ReadyToRun images.\r\n\r\nProposed attribute to add:\r\n`[assembly: AssemblyMetadata(\"Language\", \"C++\")]`","Url":"https://github.com/dotnet/wpf/issues/587","RelatedDescription":"Closed issue \"Add attribute to C++/CLI assemblies\" (#587)"},{"Id":"434965716","IsPullRequest":false,"CreatedAt":"2019-04-18T21:24:52","Actor":"grubioe","Number":"607","RawContent":null,"Title":"April Update for WPF on .NET Core 3.0","State":"open","Body":"# April Update for WPF on .NET Core 3.0\r\n\r\nLast December, Scott Guthrie and Kevin  Gallo [announced](https://blogs.windows.com/buildingapps/2018/12/04/announcing-open-source-of-wpf-windows-forms-and-winui-at-microsoft-connect-2018/) that Windows Presentation Foundation (WPF), Windows Forms and WinUI would be open sourced.  .NET Core 3.0 Preview 1 added support for building client apps using WPF, Windows Forms, and XAML Islands.  We apologize that the WPF repository has been a little quiet, but the WPF team here at Microsoft has been hard at work at the follow items:\r\n1.\tWe [onboarded](https://github.com/dotnet/wpf/pull/473) to the [Arcade SDK](https://github.com/dotnet/arcade) based Build infrastructure   \r\n2.\tThe [WPF project template](https://github.com/dotnet/wpf/pull/489) has been made available\r\n3.\tWe recently open sourced [PresentationBuildTasks](https://github.com/dotnet/wpf/pull/504) along with [Microsoft.NET.Sdk.WindowsDesktop](https://github.com/dotnet/wpf/tree/master/packaging/Microsoft.NET.Sdk.WindowsDesktop)! \r\n4.\tWe’re defining the overall test approach for WPF in a GitHub world \r\n\r\nThis  work was foundational and will help us as we continue with open sourcing remaining WPF components. If you’re interested in the nitty gritty details of what we’ve been doing, take a look **below**.\r\n\r\n### Going Forward\r\n\r\nAs we move towards the .NET Core 3.0 General Availability (GA) we will post more regular updates to this repository.  For the next few months, our plan is to:\r\n\r\n*\tContinue porting the WPF component list to this repo \r\n*\tPort regression tests so that validation against new Pull Requests can be automated\r\n\r\n### Community Contributions\r\nWe know that the community is eager to contribute and we thank you for your contributions and engagement to date!  \r\n\r\nOur primary focus for the initial .NET Core 3.0 release for WPF is to achieve parity with .NET Framework. Priority will be given to contributions that align with that goal.  The most help that we need right now is on bug fixes that specifically target parity between .NET Core and .NET Framework.\r\n\r\nYou can learn more from our [contributing guidelines](https://github.com/dotnet/wpf/blob/master/Documentation/contributing.md).   If you have questions, suggestions, or concerns, please let us know.  \r\n\r\n## Details about onboarding the Arcade SDK\r\n\r\nThe [Arcade SDK](https://github.com/dotnet/arcade/blob/master/Documentation/ArcadeSdk.md) offers several benefits for products that build as part of NET Core. When the WPF team adopted this SDK for our builds, we realized some work needed to be done. \r\n\r\nWPF was one of the first teams to onboard and build native C++ vcxproj based projects (as against CMake etc. projects) within the Arcade SDK ecosystem. This resulted in some focused work to ensure that C++ related properties and targets are appropriately tuned to ensure MSBuild just worked to build WPF with the same compiler, linker etc. settings that it has been historically built with. \r\n\r\nWe also realized that the [default infrastructure in place for NuGet packaging](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Packaging.md) – which is quite adequate for most projects - was insufficient for the needs of WPF given the fact that we produce native assemblies in the mix. \r\n\r\nIn addition to this, we also produce transport packages out of the WPF repository that contain the WPF .NET Core assemblies (like System.Xaml.dll, WindowsBase.dll), the native-RID specific assemblies (like wpfgfx_cor3.dll, PresentationNative_cor3.dll), reference assemblies (ref\\WindowsBase.dll, ref\\System.Xaml.dll), and satellite (resource) assemblies (like cs\\System.Xaml.resources.dll, de\\System.Xaml.resources.dll). \r\n\r\nThis fact is in itself not unique to WPF – all .NET Core repositories generate transport packages – but WPF’s unique composition involving RID-specific native assemblies necessitated us to customize the [packaging process](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/Packaging.targets) to suit our needs. \r\n\r\nCurrently, we publish the following transport packages to the https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json feed. These can be viewed using [NuGet Package Explorer](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer) (which, BTW, has been ported to WPF on .NET Core 3.0!): \r\n-\tMicrosoft.DotNet.Wpf.GitHub\r\no\truntime.win-x64.Microsoft.DotNet.Wpf.GitHub\r\no\truntime.win-x86.Microsoft.DotNet.Wpf.GitHub\r\n-\tMicrosoft.DotNet.Wpf.DncEng\r\no\truntime.win-x64.Microsoft.DotNet.Wpf.DncEng\r\no\truntime.win-x86.Microsoft.DotNet.Wpf.DncEng\r\n-\tMicrosoft.DotNet.Wpf.ProjectTemplates\r\n-\tMicrosoft.NET.Sdk.WindowsDesktop\r\n\r\nAnd since WPF has two repositories (one on [GitHub](https://github.com/dotnet/wpf) with the open-sourced projects, and another one internal within Microsoft), we realized that coherence in the way we build things was important. To achieve this, we have centralized all our build props/targets and published it as an MSBuild SDK onto the same NuGet feed - Microsoft.DotNet.Arcade.Wpf.Sdk.  \r\n\r\n_Note: All of these transport packages are intended for internal use by the .NET Core build systems and repos only and should not be consumed directly for any other purpose. \r\nIn addition to onboarding native C++ projects and building transport packages right, we also undertook some work to build C++/CLI assemblies. WPF has two notable C++/CLI based assemblies – PresentationCore.dll and System.Printing.dll._ \r\n\r\n_Note: In terms of build dependencies, PresentationBuildTasks and System.Xaml can be built independently, WindowsBase requires only System.Xaml as a dependency, PresentationCore requires WindowsBase & System.Xaml, and so on. Nearly all of the remaining WPF assemblies require System.Xaml, WindowsBase, and PresentationCore. In short, PresentationCore is far in front of our build dependency chain, and we had to ensure that a build system that we open-source can handle builds for PresentationCore.dll, as well as for other C++/CLI .NET Core DLL effectively._ \r\n\r\nMany of you are probably aware that there is currently no support for building C++/CLI in .NET Core. In Dev16.0 (aka Visual Studio 2019), the C++ team has added limited capability (note: I didn’t write “support”) for compiling C++/CLI assemblies targeting .NET Core. For more details on how this works in the WPF codebase, please dig into Wpf.Cpp.props/Wpf.Cpp.targets and search for /clr:netcore. (If you try to use this today, it will probably not work for you due to a bug – please wait until Visual Studio 2019 Preview 2 comes out). \r\n\r\nThis limited support for C++/CLI has no SDK support yet. In other words, we couldn’t just take a C++/CLI vcxproj project that targeted .NET Framework and retarget it to .NET Core – the underlying NuGet support for discovering .NET Core references and a myriad of other build targets just didn’t exist. We worked with several colleagues in the .NET and C++ teams to build our own limited support for discovering the right NuGet references during build (see CppCliHelper in Wpf.Cpp.targets)\r\n\r\nOver the years, WPF codebase had accumulated a number of cycles between some of the assemblies. The team never really noticed them because our builds depended on reference-assemblies from the previous builds (ref-assemblies that were checked in with sources in binary form). \r\n\r\nIn our .NET Core codebase, we do not check-in any binaries and require everything to be built from sources. In order to do this right, we spent some effort analyzing the dependencies between various assemblies and ensured that our build used project-references exclusively. Wherever we couldn’t break a cycle, we created small (and scoped) hand-crafted synthetic ref-assembly projects that could stand-in for the real one. \r\n\r\nThese “cycle-breakers” (there are 8 of these at last count) haven’t moved over to GitHub yet, but here is one illustrative example that is used to build PresentationUI.csproj. We found that PresentationFramework required PresentationUI to build, and PresentationUI required PresentationFramework (thus a cycle). We isolated just the small subset of types from PresentationFramework that were needed to build PresentationUI and put it into a special-purpose project that acts as a build-time cycle-breaker helper. This type of refactoring also helps prevents additional types from being added to these cycles, and will allow us to decide upon how to remove these cycles in the future. \r\n\r\ndotnet-wpf-int/src/Microsoft.DotNet.Wpf/cycle-breakers/PresentationUI/PresentationUI.internals.cs\r\n```\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// See the LICENSE file in the project root for more information.\r\n// ------------------------------------------------------------------------------\r\n// Changes to this file must follow the http://aka.ms/api-review process.\r\n// ------------------------------------------------------------------------------\r\n\r\nusing System.Runtime.CompilerServices;\r\nusing MS.Internal.PresentationCore;\r\n\r\n[assembly:InternalsVisibleTo(BuildInfo.PresentationFramework)]\r\n\r\n// This is the minimum set of surface area required to enable PresentationFramework to build.\r\n\r\nnamespace MS.Internal.Documents.Application\r\n{\r\n    internal sealed partial class DocumentStream\r\n    {\r\n        internal static readonly string XpsFileExtension;\r\n    }\r\n\r\n    internal partial struct DocumentApplicationState\r\n    {\r\n        private int _dummyPrimitive;\r\n        public DocumentApplicationState(double zoom, double horizontalOffset, double verticalOffset, int maxPagesAcross) { throw null; }\r\n        public double HorizontalOffset { get { throw null; } }\r\n        public int MaxPagesAcross { get { throw null; } }\r\n        public double VerticalOffset { get { throw null; } }\r\n        public double Zoom { get { throw null; } }\r\n    }\r\n}\r\n\r\nnamespace MS.Internal.Documents\r\n{\r\n    internal sealed partial class DocumentApplicationDocumentViewer : System.Windows.Controls.DocumentViewer\r\n    {\r\n        public static System.Windows.Input.RoutedUICommand RequestSigners { get { throw null; } }\r\n        public static System.Windows.Input.RoutedUICommand ShowRMCredentialManager { get { throw null; } }\r\n        public static System.Windows.Input.RoutedUICommand ShowRMPermissions { get { throw null; } }\r\n        public static System.Windows.Input.RoutedUICommand ShowRMPublishingUI { get { throw null; } }\r\n        public static System.Windows.Input.RoutedUICommand ShowSignatureSummary { get { throw null; } }\r\n        public static System.Windows.Input.RoutedUICommand Sign { get { throw null; } }\r\n        public MS.Internal.Documents.Application.DocumentApplicationState StoredDocumentApplicationState { get { throw null; } set { } }\r\n        public void SetUIToStoredState() { }\r\n    }\r\n    \r\n    internal partial class FindToolBar : System.Windows.Controls.ToolBar //, System.Windows.Markup.IComponentConnector\r\n    {\r\n        public FindToolBar() { }\r\n        public bool DocumentLoaded { set { } }\r\n        public bool FindEnabled { get { throw null; } }\r\n        public bool MatchAlefHamza { get { throw null; } }\r\n        public bool MatchCase { get { throw null; } }\r\n        public bool MatchDiacritic { get { throw null; } }\r\n        public bool MatchKashida { get { throw null; } }\r\n        public bool MatchWholeWord { get { throw null; } }\r\n        public string SearchText { get { throw null; } }\r\n        public bool SearchUp { get { throw null; } set { } }\r\n        public event System.EventHandler FindClicked { add { } remove { } }\r\n        public void GoToTextBox() { }\r\n    }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/607","RelatedDescription":"Open issue \"April Update for WPF on .NET Core 3.0\" (#607)"},{"Id":"434902426","IsPullRequest":true,"CreatedAt":"2019-04-18T21:00:07","Actor":"vatsan-madhavan","Number":"604","RawContent":null,"Title":"Set TargetingPackVersion intentionally","State":"closed","Body":"This is part-2 of setting `RuntimeFrameworkVersion` intentionally. \r\n\r\nFor now, tests are opted-out of `RuntimeFrameworkVersion` and `TargetingPackVersion`. Some tests continue to use `Sdk=Microsoft.NET.Sdk.WindowsDesktop `- we need to move them to use `Sdk=Microsoft.NET.Sdk` instead, and opt-them also into using `RuntimeFrameworkVersion`. We will do this after https://github.com/dotnet/arcade/pull/2343 is merged and becomes available generally. \r\n\r\nWe are not updating global.json tools.dotnet and sdk.version yet - we'll keep slightly older versions there as well until we make relevant changes to tests. ","Url":"https://github.com/dotnet/wpf/pull/604","RelatedDescription":"Closed or merged PR \"Set TargetingPackVersion intentionally\" (#604)"},{"Id":"434953761","IsPullRequest":false,"CreatedAt":"2019-04-18T20:49:20","Actor":"wedol","Number":"606","RawContent":null,"Title":"NullReferenceException","State":"open","Body":"* .NET Core Version: 3.0.100-preview3-010431\r\n* Windows version: N/A\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: N/A\r\n\r\n This is from telemetry and resulted in an app crash. But cannot obtain additional information from client.\r\n\r\n<pre>{\r\n  \"Exception\": {\r\n    \"ClassName\": \"System.NullReferenceException\",\r\n    \"Message\": \"Object reference not set to an instance of an object.\",\r\n    \"Data\": {\r\n      \"System.Object\": null\r\n    },\r\n    \"InnerException\": null,\r\n    \"HelpURL\": null,\r\n    \"StackTraceString\": \"   at System.Windows.Documents.SplayTreeNode.GetSiblingAtOffset(Int32 offset, Int32& nodeOffset)\r\n   at System.Windows.Documents.TextContainer.GetNodeAndEdgeAtOffset(Int32 offset, Boolean splitNode, SplayTreeNode& node, ElementEdge& edge)\r\n   at System.Windows.Documents.TextPointer..ctor(TextContainer textContainer, Int32 offset, LogicalDirection direction)\r\n   at System.Windows.Documents.TextContainer.CreatePointerAtOffset(Int32 offset, LogicalDirection direction)\r\n   at MS.Internal.PtsHost.TextParaClient.GetTextPositionFromDistance(Int32 dcpLine, Double distance)\r\n   at MS.Internal.Documents.TextParagraphView.GetTextPositionFromPoint(ReadOnlyCollection'1 lines, Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(ParagraphResult paragraph, Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(ReadOnlyCollection'1 paragraphs, ReadOnlyCollection'1 floatingElements, Point point, Boolean snapToText, Boolean snapToTextInFloatingElements)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(ParagraphResult paragraph, Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(ReadOnlyCollection'1 paragraphs, ReadOnlyCollection'1 floatingElements, Point point, Boolean snapToText, Boolean snapToTextInFloatingElements)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(ReadOnlyCollection'1 columns, ReadOnlyCollection'1 floatingElements, Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextDocumentView.GetTextPositionFromPoint(Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextViewBase.System.Windows.Documents.ITextView.GetTextPositionFromPoint(Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.DocumentPageTextView.GetTextPositionFromPoint(Point point, Boolean snapToText)\r\n   at MS.Internal.Documents.TextViewBase.System.Windows.Documents.ITextView.GetTextPositionFromPoint(Point point, Boolean snapToText)\r\n   at System.Windows.Documents.TextEditorMouse.GetUIElementWhenMouseOver(TextEditor This, Point mouseMovePoint)\r\n   at System.Windows.Documents.TextEditorMouse.UpdateCursor(TextEditor This, Point mouseMovePoint)\r\n   at System.Windows.Documents.TextEditorMouse.OnMouseMoveWithFocus(TextEditor This, MouseEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.ContentElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at StickyNotes.App.Main()\",\r\n    \"RemoteStackTraceString\": null,\r\n    \"RemoteStackIndex\": 0,\r\n    \"ExceptionMethod\": null,\r\n    \"HResult\": -2147467261,\r\n    \"Source\": \"PresentationFramework\"    \r\n  },\r\n  \"AdditionalData\": [\r\n    \"IsTerminating: True\"\r\n  ]\r\n}</pre>\r\n","Url":"https://github.com/dotnet/wpf/issues/606","RelatedDescription":"Open issue \"NullReferenceException\" (#606)"},{"Id":"434906301","IsPullRequest":false,"CreatedAt":"2019-04-18T18:43:18","Actor":"pavelovcharov","Number":"605","RawContent":null,"Title":"Application.LoadComponent throws unexpected XamlParseException ","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011248\r\n* Windows version: 1809 (17763.348)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n The following test throws the unexpected XamlParseException:\r\n```\r\n    public class TestControl : Control {\r\n    }\r\n\r\n    [TestFixture]\r\n    public class TestClass {\r\n        [Test]\r\n        public void Test00() {\r\n            ResourceDictionary rd = (ResourceDictionary)Application.LoadComponent(new Uri(\"/WpfApp1;component/TestResource.xaml\", UriKind.RelativeOrAbsolute));\r\n            Assert.IsNotNull(rd);\r\n        }\r\n    }\r\n```\r\nTestResource.xaml is a resource dictionary included into the project as Resource.\r\n```\r\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n                    xmlns:local=\"clr-namespace:WpfApp1\"\r\n                    >\r\n\r\n    <Style TargetType=\"{x:Type local:TestControl}\">\r\n\r\n    </Style>\r\n</ResourceDictionary>\r\n```\r\n\r\n **Actual behavior:** \r\nSystem.Xaml.XamlParseException\r\n  HResult=0x80131500\r\n  Message=Type reference cannot find type named '{clr-namespace:WpfApp1}TestControl'.\r\n  Source=System.Xaml\r\n  StackTrace:\r\n``` \tSystem.Xaml.dll!MS.Internal.Xaml.Context.ObjectWriterContext.ServiceProvider_Resolve(string qName)\tUnknown\r\n \tSystem.Xaml.dll!MS.Internal.Xaml.Runtime.ClrObjectRuntime.CreateObjectWithTypeConverter(MS.Internal.Xaml.ServiceProviderContext serviceContext, System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> ts, object value)\tUnknown\r\n \tSystem.Xaml.dll!System.Xaml.XamlObjectWriter.Logic_CreateFromValue(MS.Internal.Xaml.Context.ObjectWriterContext ctx, System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> typeConverter, object value, System.Xaml.XamlMember property, string targetName, MS.Internal.Xaml.Runtime.IAddLineInfo lineInfo)\tUnknown\r\n \tSystem.Xaml.dll!System.Xaml.XamlObjectWriter.Logic_ConvertPositionalParamsToArgs(MS.Internal.Xaml.Context.ObjectWriterContext ctx)\tUnknown\r\n \tSystem.Xaml.dll!System.Xaml.XamlObjectWriter.WriteEndMember()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.WpfXamlLoader.TransformNodes(System.Xaml.XamlReader xamlReader, System.Xaml.XamlObjectWriter xamlWriter, bool onlyLoadOneNode, bool skipJournaledProperties, bool shouldPassLineNumberInfo, System.Xaml.IXamlLineInfo xamlLineInfo, System.Xaml.IXamlLineInfoConsumer xamlLineInfoConsumer, MS.Internal.Xaml.Context.XamlContextStack<System.Windows.Markup.WpfXamlFrame> stack, System.Windows.Markup.IStyleConnector styleConnector)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.WpfXamlLoader.Load(System.Xaml.XamlReader xamlReader, System.Xaml.IXamlObjectWriterFactory writerFactory, bool skipJournaledProperties, object rootObject, System.Xaml.XamlObjectWriterSettings settings, System.Uri baseUri)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.WpfXamlLoader.Load(System.Xaml.XamlReader xamlReader, bool skipJournaledProperties, System.Uri baseUri)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader xamlReader, System.Windows.Markup.ParserContext parserContext)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader reader, System.Windows.Markup.ParserContext parserContext, System.Windows.Markup.XamlParseMode parseMode, bool useRestrictiveXamlReader)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Markup.XamlReader.Load(System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader)\tUnknown\r\n>\tWpfApp1.dll!WpfApp1.TestClass.Test00() Line 36\tC#\r\n```\r\n \r\n **Expected behavior:**\r\n No exceptions should be thrown\r\n **Minimal repro:**\r\ngit clone git@github.com:pavelovcharov/netcore3_resourceissue.git\r\ndotnet test netcore3_resourceissue/\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/605","RelatedDescription":"Open issue \"Application.LoadComponent throws unexpected XamlParseException \" (#605)"},{"Id":"434754702","IsPullRequest":true,"CreatedAt":"2019-04-18T12:57:23","Actor":"dotnet-maestro[bot]","Number":"603","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190418.02\r\n- **Date Produced**: 4/18/2019 10:37 AM\r\n- **Commit**: 25abcf43fe1da7a8bdad3d5053ebc01dc80ea450\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27618-02\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19217.12 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/603","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#603)"},{"Id":"434736215","IsPullRequest":true,"CreatedAt":"2019-04-18T12:16:09","Actor":"dotnet-maestro[bot]","Number":"602","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#602)"},{"Id":"433768652","IsPullRequest":false,"CreatedAt":"2019-04-18T11:09:13","Actor":"AHero11","Number":"594","RawContent":null,"Title":"WPF multiple ShowDialogs","State":"closed","Body":"# General\r\n\r\nwith DotNetCore 3 Preview 3:\r\nIn a console-application starting a simple modal \"Hello world\" WPF dialog with \"ShowDialog();\" works fine. But after it closes, starting the same view again with ShowDialog does absolutely nothing: no view, no runtimeerror, no nothing - the programm just ignores it,\r\n\r\nExample:\r\n        private void Application_Startup(object sender, StartupEventArgs e)\r\n        {\r\n            new TestWindow().ShowDialog();\r\n            new TestWindow().ShowDialog();\r\n        }\r\n","Url":"https://github.com/dotnet/wpf/issues/594","RelatedDescription":"Closed issue \"WPF multiple ShowDialogs\" (#594)"},{"Id":"434268319","IsPullRequest":true,"CreatedAt":"2019-04-17T13:02:17","Actor":"dotnet-maestro[bot]","Number":"601","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190417.01\r\n- **Date Produced**: 4/17/2019 8:48 AM\r\n- **Commit**: 3abca437fee294811fca2f81e9e5118a5b4c45fe\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27617-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19216.14 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/601","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#601)"},{"Id":"434246311","IsPullRequest":true,"CreatedAt":"2019-04-17T12:16:13","Actor":"dotnet-maestro[bot]","Number":"600","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/600","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#600)"},{"Id":"434116581","IsPullRequest":false,"CreatedAt":"2019-04-17T06:40:19","Actor":"rookie0jnr","Number":"599","RawContent":null,"Title":"Tests solution doesn't build in VisualStudio","State":"open","Body":"****.NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)****\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011322\r\n Commit:    3d3dd1648a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011322\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27616-01\r\n  Commit:  e32693473d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700-preview-009597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010046 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011322 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19215-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27616-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27616-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n****Windows version: (`winver`)****\r\nVersion 1803 (OS Build 17134.706)\r\n\r\n****Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No****\r\nI don't think that this happens in WPF for .NET Framework 4.8.\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n****Problem description:****\r\nI cloned this repository, performed build.cmd and open the Tests.sln in VisualStudio 2019 preview. And the solution does not build. It seems that the problem is in the BamlAvoidXmlTest project and in the references that it has.It seems that NuGet cannot find/resolve these dependencies. Please check the attached screen-shot. \r\nPlease note also, that the tests can be executed from the command line. But my main goal is to examine/execute/debug these tests from VisualStudio.\r\nAm I missing something? Are there some additional steps/conditions needed in order to build/execute this tests within TestStudio?  \r\n \r\n![NuGet errors](https://user-images.githubusercontent.com/48907761/56266132-27f27a80-60f4-11e9-94ba-5fbc71e2ffe1.JPG)\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/599","RelatedDescription":"Open issue \"Tests solution doesn't build in VisualStudio\" (#599)"},{"Id":"433512025","IsPullRequest":true,"CreatedAt":"2019-04-16T23:17:35","Actor":"vatsan-madhavan","Number":"588","RawContent":null,"Title":"Update targets to adapt to ref-pack based references","State":"closed","Body":"- Update related targets, esp. SdkReferences.targets and related mechanisms used to filter `NetCoreReference`\r\n- Update RuntimeFrameworkReference targets to exclude test projects because they currently depend on WindowsDesktop SDK.","Url":"https://github.com/dotnet/wpf/pull/588","RelatedDescription":"Closed or merged PR \"Update targets to adapt to ref-pack based references\" (#588)"},{"Id":"433904999","IsPullRequest":true,"CreatedAt":"2019-04-16T23:16:55","Actor":"vatsan-madhavan","Number":"596","RawContent":null,"Title":"Add AssemblyMetadata[Language] attribute","State":"closed","Body":"This PR addresses #587 \r\n\r\n/cc @fadimounir ","Url":"https://github.com/dotnet/wpf/pull/596","RelatedDescription":"Closed or merged PR \"Add AssemblyMetadata[Language] attribute\" (#596)"},{"Id":"434015789","IsPullRequest":true,"CreatedAt":"2019-04-16T22:39:49","Actor":"stevenbrix","Number":"598","RawContent":null,"Title":"convert gentracesources to tt","State":"open","Body":"This PR updates the WpfArcadeSdk to move our gentracesources.pl and gentracestrings.pl to using design time t4 generation. Instead of these files being generated into `$(IntermediateOutputPath)` they are now put under `$(WpfSourceDir)`, and are easily discoverable in the project files. \r\n\r\nThere are a few caveats in order to get this to work:\r\n1. We have to ensure BuildDependsOn variable that T4 targets update doesn't get overwritten. So with SDK style projects, we have to manually import the Sdk.targets and then include the T4 targets after.\r\n2. I wanted to decouple the GenTraceSources and GenAvMessages (similar to how we had 2 separate perl scripts before). In order to do this, those targets can't include the T4 targets, since then you get MSBuild authoring errors about the same target being imported twice.\r\n\r\nBelow is an example of how WindowsBase uses these targets. PresentationFramework and PresentationCore are similar, only without the `GenTraceSources.targets` import.\r\n\r\n```\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <Import Project=\"$(WpfCodeGenDir)AvTrace\\GenTraceSources.targets\" />\r\n  <Import Project=\"$(WpfCodeGenDir)AvTrace\\GenAvMessages.targets\" />\r\n  <Import Project=\"$(WpfCodeGenDir)DesignTimeTextTemplating.targets\" />\r\n```\r\n\r\nThere will be an internal PR that shows how these changes are consumed. The goal here is that we will continue to move more and more of our codegen scripts to T4 templates, where we should be able to use this as a starting point for completing that work.","Url":"https://github.com/dotnet/wpf/pull/598","RelatedDescription":"Open PR \"convert gentracesources to tt\" (#598)"},{"Id":"433895678","IsPullRequest":true,"CreatedAt":"2019-04-16T19:32:25","Actor":"vatsan-madhavan","Number":"595","RawContent":null,"Title":"Ensure that newer files are always updated under artifacts\\packaging","State":"closed","Body":"This fixes #564 ","Url":"https://github.com/dotnet/wpf/pull/595","RelatedDescription":"Closed or merged PR \"Ensure that newer files are always updated under artifacts\\packaging\" (#595)"},{"Id":"433947456","IsPullRequest":false,"CreatedAt":"2019-04-16T19:27:56","Actor":"miguep","Number":"597","RawContent":null,"Title":"Printing fails in WPF","State":"open","Body":"* .NET Core Version: 3.0.0-preview4-27613-07\r\n* Windows version: Win7, Win8.1, Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\n\r\nattempt to print using the following code snippet\r\n\r\n```csharp\r\nPrintQueue.CreateXpsDocumentWriter(LocalPrintServer.GetDefaultPrintQueue()).Write(visual);\r\n```\r\n \r\n **Actual behavior:** \r\nException Info: System.IO.IOException: Cannot retrieve parts of writeonly container\r\n   at System.IO.Packaging.Package.ThrowIfWriteOnly()\r\n   at System.IO.Packaging.Package.GetRelationshipsByType(String relationshipType)\r\n   at System.Windows.Xps.Packaging.XpsManager.GetXpsDocumentStartingPart(Package package)\r\n   at System.Windows.Xps.Packaging.XpsDocument.AddFixedDocumentSequence()\r\n   at System.Windows.Xps.Serialization.XpsPackagingPolicy.AcquireXmlWriterForFixedDocumentSequence()\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.AcquireXmlWriter(Type writerType)\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.SimulateBeginFixedDocumentSequence()\r\n   at System.Windows.Xps.Serialization.ReachHierarchySimulator.BeginConfirmToXPSStructure(Boolean mode)\r\n   at System.Windows.Xps.Serialization.XpsSerializationManager.SaveAsXaml(Object serializedObject)\r\n   at System.Windows.Xps.XpsDocumentWriter.SaveAsXaml(Object serializedObject, Boolean isSync)\r\n \r\n **Expected behavior:**\r\nPrinting succeds \r\n\r\nIn Win7 this may or may not be an issue depending on the printer capabilities (Xps capable printer). In RS2+ this is also not an issue\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/597","RelatedDescription":"Open issue \"Printing fails in WPF\" (#597)"},{"Id":"433633209","IsPullRequest":false,"CreatedAt":"2019-04-16T17:37:23","Actor":"weltkante","Number":"591","RawContent":null,"Title":"Thread safety issue in PresentationBuildTasks","State":"closed","Body":"During the bugfix for #350 and #378 in PR #570 the static initialization of `KnownAssemblyInfoRecord` on `BamlMapTable` was moved into the [constructor](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Markup/BamlMapTable.cs#L82) while keeping the initialized [field](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Markup/BamlMapTable.cs#L1806) static. This can lead to potential race conditions when the `BamlMapTable` is instantiated multiple times on separate threads.\r\n\r\nConsidering the post-merge [comments](https://github.com/dotnet/wpf/pull/570#issuecomment-482547850) in the PR its probably safe to make the field an instance field instead of a static field.","Url":"https://github.com/dotnet/wpf/issues/591","RelatedDescription":"Closed issue \"Thread safety issue in PresentationBuildTasks\" (#591)"},{"Id":"433523014","IsPullRequest":true,"CreatedAt":"2019-04-16T17:36:06","Actor":"ryalanms","Number":"589","RawContent":null,"Title":"BamlMapTable's KnownAssemblyInfoRecord should be an instance field","State":"closed","Body":"System.Reflection.Assembly.ReflectionOnlyLoad is not supported on .NET core and has been replaced with MetadataLoadContext.  MetadataLoadContext is cleared between markup compile passes, invalidating all System.Relection.Assembly instances loaded by MetadataLoadContext.  \r\n\r\nVarious markup compilation errors were occuring because of failed property lookups due to comparisons against an invalid System.Reflection.Assembly instance (PresentationFramework) in BamlMapTable.KnownAssemblyInfoRecord.  PresentationFramework is now loaded each time BamlMapTable is created by XamlTypeMapper, per markup compile pass.\r\n\r\nThis change includes the recommendation from @weltkante's review to update BamlAssemblyInfoRecord on BamlMapTable to be an instance field.  ","Url":"https://github.com/dotnet/wpf/pull/589","RelatedDescription":"Closed or merged PR \"BamlMapTable's KnownAssemblyInfoRecord should be an instance field\" (#589)"},{"Id":"433765456","IsPullRequest":true,"CreatedAt":"2019-04-16T13:02:19","Actor":"dotnet-maestro[bot]","Number":"593","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190416.01\r\n- **Date Produced**: 4/16/2019 8:46 AM\r\n- **Commit**: e32693473d394c9d019d81448e44d171cc9f7d04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27616-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19215.16 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#593)"},{"Id":"433743518","IsPullRequest":true,"CreatedAt":"2019-04-16T12:16:47","Actor":"dotnet-maestro[bot]","Number":"592","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#592)"},{"Id":"433554615","IsPullRequest":false,"CreatedAt":"2019-04-16T02:25:28","Actor":"vsfeedback","Number":"590","RawContent":null,"Title":"Vs2019 when using WPF Click event Clicks No response","State":"open","Body":"VSF_TYPE_MARKDOWNFor example, when I click the Click event in the right property when I use the button control in WPF, I can't jump to restart the vs2019 and then click on the specific question of producing the Click event to see how many times the picture in the attachment has happened.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/533400/vs2019-在使用wpf的时候click事件点击没有反应.html\nVSTS ticketId: 847720_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/590","RelatedDescription":"Open issue \"Vs2019 when using WPF Click event Clicks No response\" (#590)"},{"Id":"433405207","IsPullRequest":false,"CreatedAt":"2019-04-15T22:23:50","Actor":"Ebenezer94","Number":"586","RawContent":null,"Title":"Exception thrown 'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.' on WPF project with .NET Core 3.0","State":"closed","Body":"We have used the CopyMemory method in our project to copies memory from source to destination. While copying, exception thrown like \"'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.'\". This code works fine in WPF with .NET Framework. But, we are facing an issue in WPF with .NET Core. I have added the simple code snippet to reproduce the issue in WPF with .NETCore. The simple sample can be download from below link,\r\n\r\n.NET Core3.0\r\n\r\nhttp://www.syncfusion.com/downloads/support/directtrac/general/ze/NETCOR~1263359629.zip\r\n\r\n.NET Framework\r\n\r\nhttp://www.syncfusion.com/downloads/support/directtrac/general/ze/CopyMemory_NetFramework542091517.zip\r\n\r\nCode snippet :\r\n\r\n```\r\n[DllImport(\"kernel32.dll\", EntryPoint = \"CopyMemory\", SetLastError = false)]\r\npublic static extern void CopyMemory(IntPtr dest, IntPtr src, uint count);\r\npublic MainWindow()\r\n{\r\n    const int size = 200;\r\n    IntPtr memorySource = Marshal.AllocHGlobal(size);\r\n    Marshal.WriteInt32(memorySource, 35);\r\n    IntPtr memoryTarget = Marshal.AllocHGlobal(size);\r\n    CopyMemory(memoryTarget, memorySource, size);\r\n    bool val = Marshal.ReadInt32(memoryTarget) == 35;\r\n}\r\n```\r\n\r\n\r\nPlease find the required configuration below.\r\n\r\n.NET Framework                                 : 4.6\r\n.NET Core                                           : 3.0\r\nOperating System                              : Windows 10\r\nPreferred Programming Language    : C#\r\nVisual Studio                                      : Visual Studio 2017","Url":"https://github.com/dotnet/wpf/issues/586","RelatedDescription":"Closed issue \"Exception thrown 'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.' on WPF project with .NET Core 3.0\" (#586)"},{"Id":"433242571","IsPullRequest":true,"CreatedAt":"2019-04-15T17:50:33","Actor":"v-zbsail","Number":"582","RawContent":null,"Title":"LOC CHECKIN | dotnet/wpf master | 20190415","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/582","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/wpf master | 20190415\" (#582)"},{"Id":"433382640","IsPullRequest":false,"CreatedAt":"2019-04-15T16:51:37","Actor":"ojhad","Number":"585","RawContent":null,"Title":"Behavior change regarding seekability of streams returned for ZipArchive","State":"open","Body":"* .NET Core Version: 3.0.100-preview4\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nThere is a behavior change regarding the seekability of returned ZipArchiveEntry streams.\r\n\r\n **.NET Framework behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nThe WindowsBase implementation of Zip had the necessary functionality that operated on the returned deflate streams which provided support for seeking (However, in doing so, it incurred a lot of extra CPU and file system usage)\r\n\r\n **.NET Core behavior:**\r\nThe current implementation in CoreFX (System.IO.Packaging) no longer provides this functionality, resulting in [streams that are being returned](https://github.com/dotnet/corefx/blob/6322a406f88e854c5b827ab838f988f8992048f8/src/System.IO.Packaging/src/System/IO/Packaging/ZipStreamManager.cs#L86) to be non-seekable. \r\n\r\n**Related Issue:**\r\nhttps://github.com/dotnet/corefx/issues/34219\r\n","Url":"https://github.com/dotnet/wpf/issues/585","RelatedDescription":"Open issue \"Behavior change regarding seekability of streams returned for ZipArchive\" (#585)"},{"Id":"433266774","IsPullRequest":true,"CreatedAt":"2019-04-15T13:00:58","Actor":"dotnet-maestro[bot]","Number":"584","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190414.10\r\n- **Date Produced**: 4/15/2019 7:19 AM\r\n- **Commit**: f9decfe63aadb21139c048ce3ea43982982e5000\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27614-10\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19214.16 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#584)"},{"Id":"433245323","IsPullRequest":true,"CreatedAt":"2019-04-15T12:11:27","Actor":"dotnet-maestro[bot]","Number":"583","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#583)"},{"Id":"432971096","IsPullRequest":true,"CreatedAt":"2019-04-14T12:49:28","Actor":"dotnet-maestro[bot]","Number":"581","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190413.11\r\n- **Date Produced**: 4/14/2019 7:38 AM\r\n- **Commit**: 4a01e55806b0849a08b820518e8cdcbeaaf07476\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27613-11\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/581","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#581)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-21T05:30:44.6346973Z","RunDurationInMilliseconds":505}