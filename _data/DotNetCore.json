{"Data":{"Blog":{"FeedItems":[{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7974374127","Type":"PullRequestEvent","CreatedAt":"2018-07-17T05:08:24","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18611","RelatedDescription":"Closed pull request \"[WIP] Test with tiering\" (#18611) at dotnet/coreclr","RelatedBody":"For https://github.com/dotnet/coreclr/pull/18610"},{"Id":"7974363523","Type":"PullRequestEvent","CreatedAt":"2018-07-17T05:04:08","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18610","RelatedDescription":"Merged pull request \"Apply tiering's call counting delay more broadly\" (#18610) at dotnet/coreclr","RelatedBody":"Issues\r\n- When some time passes between process startup and first significant use of the app, startup perf with tiering can be slower because the call counting delay is no longer in effect\r\n- This is especially true when the process is affinitized to one cpu\r\n\r\nFixes\r\n- Initiate and prolong the call counting delay upon tier 0 activity (jitting or r2r code lookup for a new method)\r\n- Stop call counting for a called method when the delay is in effect\r\n- Stop (and don't start) tier 1 jitting when the delay is in effect\r\n- After the delay resume call counting and tier 1 jitting\r\n- If the process is affinitized to one cpu at process startup, multiply the delay by 10\r\n\r\nNo change in benchmarks."},{"Id":"7974310224","Type":"PullRequestEvent","CreatedAt":"2018-07-17T04:41:49","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18956","RelatedDescription":"Opened pull request \"Update EventPipe StackWalker usage to specify ALLOW_INVALID_OBJECTS\" (#18956) at dotnet/coreclr","RelatedBody":"Fix for Windows x86 test failure uncovered by https://github.com/dotnet/coreclr/pull/18927.\r\n\r\nValid objects are not required for stack walking performed by EventPipe."},{"Id":"7974184251","Type":"PullRequestEvent","CreatedAt":"2018-07-17T03:49:09","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18650","RelatedDescription":"Closed pull request \"[NO MERGE] Dummy PR for testing\" (#18650) at dotnet/coreclr","RelatedBody":"**NO MERGE**"},{"Id":"7974180880","Type":"PullRequestEvent","CreatedAt":"2018-07-17T03:47:50","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18650","RelatedDescription":null,"RelatedBody":"**NO MERGE**"},{"Id":"7974157419","Type":"PullRequestEvent","CreatedAt":"2018-07-17T03:38:33","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18955","RelatedDescription":"Opened pull request \"Update PgoData to release-20180716-2021 (release/2.1)\" (#18955) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7974111883","Type":"IssuesEvent","CreatedAt":"2018-07-17T03:20:39","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18954","RelatedDescription":"Opened issue \"JIT_HardwareIntrinsics._X86_Fma_Vector256_Fma_ro_Fma_ro_._X86_Fma_Vector256_Fma_ro_Fma_ro_cmd failed in CI\" (#18954) at dotnet/coreclr","RelatedBody":"https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_windows_nt_innerloop_prtest/5378/testReport/junit/JIT_HardwareIntrinsics/_X86_Fma_Vector256_Fma_ro_Fma_ro_/_X86_Fma_Vector256_Fma_ro_Fma_ro_cmd/\r\n\r\n```\r\nD:\\j\\workspace\\x64_checked_w---eac6a79c\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(6897): error : JIT_HardwareIntrinsics._X86_Fma_Vector256_Fma_ro_Fma_ro_._X86_Fma_Vector256_Fma_ro_Fma_ro_cmd [FAIL] [D:\\j\\workspace\\x64_checked_w---eac6a79c\\tests\\runtest.proj]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_checked_w---eac6a79c\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\JIT.HardwareIntrinsics\\X86\\Fma_Vector256\\Fma_ro\\Fma_ro.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n         \"D:\\j\\workspace\\x64_checked_w---eac6a79c\\tests\\..\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Fma_ro.exe \r\n        Running MultiplyAdd.Double test...\r\n        Running MultiplyAdd.Single test...\r\n        Running MultiplyAddNegated.Double test...\r\n        Running MultiplyAddNegated.Single test...\r\n        Fma.MultiplyAddNegated<Single>(Vector256<Single>, Vector256<Single>, Vector256<Single>): RunClassLclFldScenario failed:\r\n           firstOp: (0.3387688, 0.7541751, 0.1889452, 0.09102716, 0.1363858, 0.8275251, 0.7144608, 0.7341816)\r\n          secondOp: (0.43843, 0.5449545, 0.3192569, 0.2633604, 0.7463435, 0.008091266, 0.637231, 0.9591448)\r\n           thirdOp: (0.5547708, 0.1004912, 0.7262294, 0.6956708, 0.2914341, 0.9212023, 0.06049293, 0.9301516)\r\n            result: (0.4062444, -0.3105, 0.6659073, 0.6716979, 0.1896435, 0.9145066, -0.3947836, 0.2259651)\r\n        \r\n        Fma.MultiplyAddNegated<Single>(Vector256<Single>, Vector256<Single>, Vector256<Single>): RunClassFldScenario failed:\r\n           firstOp: (0.1395415, 0.9789039, 0.007728469, 0.3251792, 0.3037494, 0.5281599, 0.6235822, 0.2792156)\r\n          secondOp: (0.2185916, 0.2522628, 0.3966395, 0.3929749, 0.2312834, 0.6482151, 0.1617419, 0.971812)\r\n           thirdOp: (0.303359, 0.201334, 0.8878055, 0.9336315, 0.1426196, 0.4053599, 0.5404739, 0.4627739)\r\n            result: (0.2728564, -0.04560708, 0.8847401, 0.8058442, 0.07236744, 0.06299869, 0.4396146, 0.1914289)\r\n        \r\n        Fma.MultiplyAddNegated<Single>(Vector256<Single>, Vector256<Single>, Vector256<Single>): RunStructLclFldScenario failed:\r\n           firstOp: (0.03832117, 0.5454659, 0.98753, 0.9248295, 0.3387572, 0.3087349, 0.7509309, 0.4175664)\r\n          secondOp: (0.6936822, 0.2587936, 0.9639966, 0.5431297, 0.9327784, 0.2473933, 0.8334324, 0.4402568)\r\n           thirdOp: (0, 0, 0, 0, 0, 0, 0, 0)\r\n            result: (-0.02658271, -0.1411631, -0.9519756, -0.5023024, -0.3159854, -0.07637896, -0.6258502, -0.1838365)\r\n        \r\n        Fma.MultiplyAddNegated<Single>(Vector256<Single>, Vector256<Single>, Vector256<Single>): RunStructFldScenario failed:\r\n           firstOp: (0.9407285, 0.8870088, 0.8745189, 0.6688347, 0.1190927, 0.6941285, 0.8762012, 0.3160874)\r\n          secondOp: (0.04505012, 0.8639531, 0.4287463, 0.3552833, 0.01064325, 0.5126237, 0.6021786, 0.7272484)\r\n           thirdOp: (0, 0, 0, 0, 0, 0, 0, 0)\r\n            result: (-0.04237993, -0.766334, -0.3749467, -0.2376258, -0.001267534, -0.3558267, -0.5276296, -0.2298741)\r\n        \r\n        Error: One or more scenarios did not complete as expected.\r\n        Running MultiplyAddSubtract.Double test...\r\n        Running MultiplyAddSubtract.Single test...\r\n        Running MultiplySubtract.Double test...\r\n        Running MultiplySubtract.Single test...\r\n        Running MultiplySubtractAdd.Double test...\r\n        Running MultiplySubtractAdd.Single test...\r\n        Running MultiplySubtractNegated.Double test...\r\n        Running MultiplySubtractNegated.Single test...\r\n        Expected: 100\r\n        Actual: 0\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---eac6a79c\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---eac6a79c\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\HardwareIntrinsics\\X86\\Fma_Vector256\\Fma_ro\\Fma_ro.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n          D:\\j\\workspace\\x64_checked_w---eac6a79c\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(6897,0): at JIT_HardwareIntrinsics._X86_Fma_Vector256_Fma_ro_Fma_ro_._X86_Fma_Vector256_Fma_ro_Fma_ro_cmd()\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7973881556","Type":"PullRequestEvent","CreatedAt":"2018-07-17T01:55:17","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9575","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to release/2.2.1xx\" (#9575) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7973609103","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:07:34","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9676","RelatedDescription":"Closed pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#9676) at dotnet/cli","RelatedBody":"Some commits were left out of the most recent merge-up for some reason (https://github.com/dotnet/cli/pull/9641)."},{"Id":"7973605378","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:06:11","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9676","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#9676) at dotnet/cli","RelatedBody":"Some commits were left out of the most recent merge-up for some reason (https://github.com/dotnet/cli/pull/9641)."},{"Id":"7973592570","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:01:34","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9675","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9675) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7973592426","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:01:31","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9674","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#9674) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into release/2.1.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-release/2.1.4xx\ngit reset --hard upstream/release/2.1.4xx\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-release/2.1.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7973504566","Type":"IssuesEvent","CreatedAt":"2018-07-16T23:29:36","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9623","RelatedDescription":"Closed issue \"Feature Request: Add dotnet nuget list cli\" (#9623) at dotnet/cli","RelatedBody":"This is a feature request to add the listing capability from the nuget cli. Currently there is no way to use the dotnet cli to query a nuget server for a list of available packages with their versions. It would be nice to be able to do this so CI tools can check to make sure a push won't overwrite existing packages.\r\n\r\n\r\n\r\n\r\n"},{"Id":"7973477416","Type":"PullRequestEvent","CreatedAt":"2018-07-16T23:20:04","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9673","RelatedDescription":"Opened pull request \"Perform test platform insertion for 15.8\" (#9673) at dotnet/cli","RelatedBody":"@singhsarab @abhishkk "},{"Id":"7973377107","Type":"IssuesEvent","CreatedAt":"2018-07-16T22:48:21","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9672","RelatedDescription":"Opened issue \"Change dotnet-sdk debian package file dependency name back to packagename-major-minor\" (#9672) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7973653020","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:24:18","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/805","RelatedDescription":"Closed pull request \"Add runtime API to get ECMA335 metadata\" (#805) at dotnet/standard","RelatedBody":"This adds an API that the runtime needs to implement to allow metadata readers to read the ECMA335 metadata without having to load the assembly again into memory. However, a valid implementation is `return false;` as it's primarily a perf optimization.\r\n\r\n@dotnet/nsboard "},{"Id":"7973356493","Type":"IssuesEvent","CreatedAt":"2018-07-16T22:42:21","Actor":"JamesNK","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/834","RelatedDescription":"Opened issue \"Newtonsoft.Json in .NET Standard: good idea or no?\" (#834) at dotnet/standard","RelatedBody":"Newtonsoft.Json is the most downloaded and referenced NuGet library. It is also pretty stable. There isn't major development going on at the moment, changes are mostly bug fixes.\r\n\r\nPutting the idea out there to weigh up the pros and the cons: should Newtonsoft.Json be in .NET Standard?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7974408377","Type":"PullRequestEvent","CreatedAt":"2018-07-17T05:21:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31115","RelatedDescription":"Opened pull request \"Add some hex parsing perf tests\" (#31115) at dotnet/corefx","RelatedBody":"cc: @danmosemsft "},{"Id":"7974378545","Type":"PullRequestEvent","CreatedAt":"2018-07-17T05:10:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31113","RelatedDescription":"Merged pull request \"Temporarily comment out dictionary remove modification tests\" (#31113) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/31112\r\ncc: @danmosemsft "},{"Id":"7974342898","Type":"PullRequestEvent","CreatedAt":"2018-07-17T04:55:50","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31114","RelatedDescription":"Opened pull request \"Remove char[] allocation from GetDrives\" (#31114) at dotnet/corefx","RelatedBody":"cc: @JeremyKuhne "},{"Id":"7974309162","Type":"PullRequestEvent","CreatedAt":"2018-07-17T04:41:18","Actor":"ww898","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/31106","RelatedDescription":"Closed pull request \"Support ulong as enum underlying type in EnumConverter (#31095)\" (#31106) at dotnet/corefx","RelatedBody":"Made fixes in `ConvertTo` / `ConvertFrom` in `EnumConverter`. Update `EnumConverterTests`."},{"Id":"7974235626","Type":"PullRequestEvent","CreatedAt":"2018-07-17T04:09:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31113","RelatedDescription":"Opened pull request \"Temporarily comment out dictionary remove modification tests\" (#31113) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/31112\r\ncc: @danmosemsft "},{"Id":"7974203061","Type":"IssuesEvent","CreatedAt":"2018-07-17T03:56:37","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31112","RelatedDescription":"Opened issue \"Re-enable dictionary remove tests\" (#31112) at dotnet/corefx","RelatedBody":"I've commented them out temporarily to make it easier to update to a newer coreclr."},{"Id":"7974144377","Type":"IssuesEvent","CreatedAt":"2018-07-17T03:33:11","Actor":"AaronRobinsonMSFT","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30936","RelatedDescription":"Closed issue \"Test failure: System.Runtime.InteropServices.Tests.GetNativeVariantForObjectTests/CharType\" (#30936) at dotnet/corefx","RelatedBody":"Opened on behalf of @Sunny-pu\n\nThe test `System.Runtime.InteropServices.Tests.GetNativeVariantForObjectTests/CharType` has failed.\n\nSystem.PlatformNotSupportedException : Marshalling between VARIANT and System.Object is not supported\n\n        Stack Trace:\n\n           at System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(Object obj, IntPtr pDstNativeVariant)\n       at System.Runtime.InteropServices.Tests.GetNativeVariantForObjectTests.CharType() in E:\\A\\_work\\6\\s\\corefx\\src\\System.Runtime.InteropServices\\tests\\System\\Runtime\\InteropServices\\Marshal\\GetNativeVariantForObjectTests.cs:line 79\nBuild : Master - 20180710.01 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n\nDetails: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180710.01/workItem/System.Runtime.InteropServices.Tests/analysis/xunit/System.Runtime.InteropServices.Tests.GetNativeVariantForObjectTests~2FCharType"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7974292724","Type":"PullRequestEvent","CreatedAt":"2018-07-17T04:34:00","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28295","RelatedDescription":"Merged pull request \"Set VSSDKTargetPlatformRegRootSuffix for Roslyn.csproj\" (#28295) at dotnet/roslyn","RelatedBody":"Fixes broken <kbd>F5</kbd> experience with **Roslyn.csproj** set as the startup project.\r\n\r\nThe issue became especially apparent after #28016.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7973951854","Type":"PullRequestEvent","CreatedAt":"2018-07-17T02:21:46","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28599","RelatedDescription":"Opened pull request \"Put completion in 'suggestion' mode when typing a lambda to a method that could be an extension or instance method.\" (#28599) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/28586"},{"Id":"7973697956","Type":"PullRequestEvent","CreatedAt":"2018-07-17T00:42:50","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28598","RelatedDescription":"Opened pull request \"Update null-coalesce-assignment semantic rewrite form.\" (#28598) at dotnet/roslyn","RelatedBody":"Changes our semantic rewrite from `(a != null) ? a : (a = b)` to `a ?? (a = b)`. This ends up changing the produced IL a bit, using `dup`s in a few places where the previous rewrite captured.\r\n\r\n@dotnet/roslyn-compiler @cston for review."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7972283284","Type":"PullRequestEvent","CreatedAt":"2018-07-16T18:47:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6099","RelatedDescription":"Merged pull request \"Optimize {Try}FormatDecimal\" (#6099) at dotnet/corert","RelatedBody":"This improves decimal formatting performance by 1.09x and removes an unused `nMinDigits` parameter from many functions."},{"Id":"7972277978","Type":"PullRequestEvent","CreatedAt":"2018-07-16T18:46:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6095","RelatedDescription":"Merged pull request \"Added System.Runtime.ProfileOptimization\" (#6095) at dotnet/corert","RelatedBody":"contributes to https://github.com/dotnet/corefx/issues/30185\r\n\r\n/cc @jkotas "},{"Id":"7971324266","Type":"PullRequestEvent","CreatedAt":"2018-07-16T15:13:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6102","RelatedDescription":"Merged pull request \"Fix decimal parsing for \"-1e-400\"\" (#6102) at dotnet/corert","RelatedBody":"This fixes an edge case parsing difference between +0/-0 from #6091 (discussion in https://github.com/dotnet/coreclr/pull/18868 and https://github.com/dotnet/corefx/pull/31085)"},{"Id":"7971258795","Type":"PullRequestEvent","CreatedAt":"2018-07-16T15:03:15","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6101","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6101) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7971068718","Type":"PullRequestEvent","CreatedAt":"2018-07-16T14:34:01","Actor":"pentp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6102","RelatedDescription":"Opened pull request \"Fix decimal parsing for \"-1e-400\"\" (#6102) at dotnet/corert","RelatedBody":"This fixes an edge case parsing difference between +0/-0 from #6091 (discussion in https://github.com/dotnet/coreclr/pull/18868 and https://github.com/dotnet/corefx/pull/31085)"},{"Id":"7970856074","Type":"PullRequestEvent","CreatedAt":"2018-07-16T14:00:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6101","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6101) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7970852093","Type":"IssuesEvent","CreatedAt":"2018-07-16T14:00:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6100","RelatedDescription":"Opened issue \"Make switching to server GC easier\" (#6100) at dotnet/corert","RelatedBody":"After #5565 we can control whether server GC support is compiled into the executable using a property specified in the CSPROJ (`<ServerGarbageCollection>true</ServerGarbageCollection>`). But this doesn't actually enable server GC; only allows it to be enabled.\r\n\r\nTo actually enable server GC, `RH_UseServerGC=1` environment variable needs to be set before launching the compiled executable. This is rather awkward. Maybe compiling with `ServerGarbageCollection` should also make server GC the default (with a `RH_UseServerGC=0` to opt out)."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7973886745","Type":"PullRequestEvent","CreatedAt":"2018-07-17T01:57:15","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2370","RelatedDescription":"Closed pull request \"[WIP] Adding Web Large performance test\" (#2370) at dotnet/sdk","RelatedBody":"Most of the change is adding the WebLarge test asset; the functional change is in: 'src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs'\r\n\r\nThe 'WebLarge' test asset is small but has a lot of files: 5 MB - 13,384 files"},{"Id":"7973298215","Type":"PullRequestEvent","CreatedAt":"2018-07-16T22:25:43","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2403","RelatedDescription":"Opened pull request \"Adding WebLarge performance test; SDK:master\" (#2403) at dotnet/sdk","RelatedBody":"Adding Web Large performance test; GitHub stores the \"Web Large\" performance test asset.\r\n\r\nReplaces PR: https://github.com/dotnet/sdk/pull/2371"},{"Id":"7972920838","Type":"IssuesEvent","CreatedAt":"2018-07-16T20:57:09","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2374","RelatedDescription":"Closed issue \"XUnit build failures in 'prodcon/sdk/release/2.1.3xx/' - '20180629.01'\" (#2374) at dotnet/sdk","RelatedBody":"There were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1819422\r\n  - **Agent:** DDMBLDW130\r\n  - **Error log:** XUnit : error : E:\\A\\_work\\0\\s\\artifacts\\platform\\TestResults\\Microsoft.NET.Build.Tests_netcoreapp2.1_x64.log [netcoreapp2.1|x64] [E:\\A\\_work\\0\\s\\src\\Tests\\Microsoft.NET.Build.Tests\\Microsoft.NET.Build.Tests.csproj]...\r\n\r\n@mmitche, @livarcocc\r\n"},{"Id":"7972891086","Type":"PullRequestEvent","CreatedAt":"2018-07-16T20:51:06","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2402","RelatedDescription":"Merged pull request \"Conditionally pack tests as tools based on source-build\" (#2402) at dotnet/sdk","RelatedBody":"PackAsTool should only be set if building outside of source-build. When building source-build, these test projects are skipped because ExcludeFromSourceBuild=true. Exclusion fails when PackAsTool is set."},{"Id":"7972879627","Type":"IssuesEvent","CreatedAt":"2018-07-16T20:48:41","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2396","RelatedDescription":"Closed issue \"IIS Virtual directory app hosting\" (#2396) at dotnet/sdk","RelatedBody":"I have been trying to make the .net core 2.1 work with  virtual directories.\r\n\r\nI have the default site from iis and I want to add a virtual directory lets say \"vd\"\r\nI have set the clr to no managed, I have add the same project published files into the C:\\inetpub\\wwwroot so the project will start.\r\n\r\nThe app that I want to deploy is a simple generated webapi solution. \r\n\r\nThe link localhost/api/values returns values\r\nThe link localhost/vd/api/values returns 404.\r\n\r\nmy config file for the sub-app is \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <system.webServer>\r\n    <aspNetCore processPath=\"dotnet\" arguments=\".\\test.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" />\r\n  </system.webServer>\r\n</configuration>\r\n```\r\n\r\nand my config file for the main directory is\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <system.webServer>\r\n    <handlers>\r\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" />\r\n    </handlers>\r\n    <aspNetCore processPath=\"dotnet\" arguments=\".\\stash.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" />\r\n  </system.webServer>\r\n</configuration>\r\n```\r\n\r\n\r\nI am sure it hits the virtual directory somehow  because if I do not set correctly the sub-app config it yell duplicate aspnetCore module.\r\n\r\nHow can I make the virtual directory work?\r\n\r\nPs. I only use  the same ddls on the root of the website because I need to provide something on the no manged app clr."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1018952801953681411","CreatedAt":"2018-07-16T20:17:33+00:00","UserScreenname":"dotnet","Text":"Rocky's got great insight into building Enterprise applications.  Be sure to tune in tomorrow when he pair-programs… https://t.co/cdQT99n8kk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":4,"RawContent":null},{"Id":"1018877434584817664","CreatedAt":"2018-07-16T15:18:04+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz will be hosting another one of his FREE workshops this Friday.  This week, tune in and learn about s… https://t.co/06laByebWA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":14,"RawContent":null},{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":21,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":95,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":88,"FavoriteCount":78,"RawContent":null},{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":354,"FavoriteCount":168,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":92,"RawContent":null}]}},"RunOn":"2018-07-17T05:30:35.8364853Z","RunDurationInMilliseconds":9141}