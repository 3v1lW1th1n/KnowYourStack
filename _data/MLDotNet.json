{"Data":{"GitHub":{"Issues":[{"Id":"380061597","IsPullRequest":true,"CreatedAt":"2018-11-13T05:04:05","Actor":"sfilipi","Number":"1606","RawContent":null,"Title":"renaming transforms -> transformers","State":"open","Body":"Addresses part of #1318 renaming transforms to transformers. \r\nSome addl cleanup. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1606","RelatedDescription":"Open PR \"renaming transforms -> transformers\" (#1606)"},{"Id":"380014070","IsPullRequest":true,"CreatedAt":"2018-11-13T01:04:47","Actor":"najeeb-kazmi","Number":"1605","RawContent":null,"Title":"Adding features arg to clustering CV, removing test","State":"open","Body":"Addressing comments in #1584, which was merged before comments could be addressed.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1605","RelatedDescription":"Open PR \"Adding features arg to clustering CV, removing test\" (#1605)"},{"Id":"379995458","IsPullRequest":false,"CreatedAt":"2018-11-12T23:35:31","Actor":"Zruty0","Number":"1604","RawContent":null,"Title":"Clean up our auto-caching","State":"open","Body":"Currently, some of our trainers cache the data prior to training, without a possibility to disable that. \r\n\r\nI believe the good incremental step would be to disable all auto-caching, and rely on user to call `AppendCacheCheckpoint` prior to multi-pass training. \r\n\r\nThis is not really ideal, since the default setup for multi-pass trainers will train slower. I still think it is better to have a consistent story about our 'smarts' (that is, we have no auto-normalization, no auto-caching and no auto-calibration), and use extensive documentation (and tooling, in the future) to cover these pitfalls.\r\n\r\ncc @GalOshri @TomFinley @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1604","RelatedDescription":"Open issue \"Clean up our auto-caching\" (#1604)"},{"Id":"379979626","IsPullRequest":false,"CreatedAt":"2018-11-12T22:35:14","Actor":"jsboige","Number":"1603","RawContent":null,"Title":"Confusion between ColumnAttribute and ColumnNameAttribute should be prevented","State":"open","Body":"I just spent nearly a whole hour in front of a class full of students trying to figure out what was wrong with my code. I was demonstrating the SentimentAnalysis classifier and had the working code in split-screen to compare. My faulty code had a Column Attribute instead of ColumnName Attribute in the prediction class.\r\nFirst, not a single pair of eyes noticed the error. For some reason, one does not seem to register the difference, however obvious it should be.\r\nThen, although the subsequent exception did mention something was wrong with columns it was virtually impossible to debug:\r\nColumnAttribute actually has the corresponding \"name\" member, it's just that the constructor with the same signature sets the \"ordinal\" member instead, and that without failing unfortunately.\r\nAccordingly, trying to compare the code execution step by step with complete source code, the only visible difference appears pretty late in SchemaDefinition.Create(..), when both attributes are tested for existence and the corresponding \"name\" value, with one of the two missing.\r\nThen the resulting exception is triggered again much later in the TypedCursorable's private constructor, where the faulty column is considered missing.\r\nThis is deadly. \r\nIf you don't notice the spelling difference visually right away, and again a whole class didn't for some reason, there is very little chance even debugging the whole engine will get you anywhere.\r\n\r\nIn short, it should be made impossible or near to impossible to use [Column(\"name\")] instead of [ColumnName(\"name\")] by mistake, and at least easier to diagnose.","Url":"https://github.com/dotnet/machinelearning/issues/1603","RelatedDescription":"Open issue \"Confusion between ColumnAttribute and ColumnNameAttribute should be prevented\" (#1603)"},{"Id":"378983763","IsPullRequest":true,"CreatedAt":"2018-11-12T21:56:55","Actor":"najeeb-kazmi","Number":"1584","RawContent":null,"Title":"Adding CrossValidate to ClusteringContext","State":"closed","Body":"Fixes #1575 ","Url":"https://github.com/dotnet/machinelearning/pull/1584","RelatedDescription":"Closed or merged PR \"Adding CrossValidate to ClusteringContext\" (#1584)"},{"Id":"379945906","IsPullRequest":false,"CreatedAt":"2018-11-12T20:46:43","Actor":"Zruty0","Number":"1602","RawContent":null,"Title":"Make members of Core assembly internal","State":"open","Body":"#1519 made it possible to have members that are not public, but still accessible to other ML.NET assemblies. We now plan to use it to reduce the public surface of ML.NET assemblies substantially.\r\n\r\nNamely, let's 'hide' the non-user-facing public members of `Microsoft.ML.Core` assembly","Url":"https://github.com/dotnet/machinelearning/issues/1602","RelatedDescription":"Open issue \"Make members of Core assembly internal\" (#1602)"},{"Id":"379310526","IsPullRequest":false,"CreatedAt":"2018-11-12T19:26:26","Actor":"ganik","Number":"1589","RawContent":null,"Title":"class AssemblyRegistration should be public","State":"closed","Body":"Currently AssemblyRegistration.RegisterAssemblies(...) is not accessible outside of ML.Legacy assembly. This method is needed for NimbusML to register/load assemblies","Url":"https://github.com/dotnet/machinelearning/issues/1589","RelatedDescription":"Closed issue \"class AssemblyRegistration should be public\" (#1589)"},{"Id":"379322402","IsPullRequest":true,"CreatedAt":"2018-11-12T18:41:17","Actor":"sfilipi","Number":"1590","RawContent":null,"Title":"more transform => transformer renaming","State":"closed","Body":"Fixes part of #1318 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1590","RelatedDescription":"Closed or merged PR \"more transform => transformer renaming\" (#1590)"},{"Id":"379892336","IsPullRequest":true,"CreatedAt":"2018-11-12T18:04:14","Actor":"Zruty0","Number":"1601","RawContent":null,"Title":"Schema propagation for custom estimator","State":"open","Body":"Fixes #1600 \r\nAdds schema propagation for custom mapping estimator","Url":"https://github.com/dotnet/machinelearning/pull/1601","RelatedDescription":"Open PR \"Schema propagation for custom estimator\" (#1601)"},{"Id":"379889738","IsPullRequest":false,"CreatedAt":"2018-11-12T17:56:47","Actor":"Zruty0","Number":"1600","RawContent":null,"Title":"Custom mapping estimator doesn't check input schema","State":"open","Body":"The `CustomMappingEstimator` doesn't correctly check input schema for presence and validity of the columns.","Url":"https://github.com/dotnet/machinelearning/issues/1600","RelatedDescription":"Open issue \"Custom mapping estimator doesn't check input schema\" (#1600)"},{"Id":"379507628","IsPullRequest":true,"CreatedAt":"2018-11-11T10:01:14","Actor":"adamsitnik","Number":"1599","RawContent":null,"Title":"Remove parsing perf  bottleneck in WordEmbeddingsTransform","State":"open","Body":"This PR improves the performance of reading large text files and affects two of our most time-consuming benchmarks.\r\n\r\nInfo:\r\n\r\n```ini\r\nBenchmarkDotNet=v0.11.2, OS=Windows 10.0.17134.345 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\nFrequency=3507503 Hz, Resolution=285.1031 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-alpha1-009697\r\n  [Host]     : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n  Job-OXDQNP : .NET Core 2.1.5 (CoreCLR 4.6.26919.02, CoreFX 4.6.26919.02), 64bit RyuJIT\r\n```\r\n\r\nBefore:\r\n\r\n|                                         Method |    Mean |\r\n|----------------------------------------------- |--------:|\r\n| WikiDetox_WordEmbeddings_OVAAveragedPerceptron | 286.7 s |\r\n|                WikiDetox_WordEmbeddings_SDCAMC | 184.1 s |\r\n\r\nAfter:\r\n\r\n|                                         Method |     Mean |\r\n|----------------------------------------------- |---------:|\r\n| WikiDetox_WordEmbeddings_OVAAveragedPerceptron | 174.24 s |\r\n|                WikiDetox_WordEmbeddings_SDCAMC |  67.82 s |\r\n\r\nWhich is two minutes less to read the huge file for both benchmarks which results in a **x3** boost for `WikiDetox_WordEmbeddings_SDCAMC`  and **40%** improvement for `WikiDetox_WordEmbeddings_OVAAveragedPerceptron`\r\n\r\nReading the file was a bottleneck:\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/48314555-83f82680-e5cb-11e8-8948-cc5a22a07c95.png)\r\n\r\nI have applied all possible optimizations and parallelized this operation.\r\n\r\nI am going to post a detailed description on Monday.","Url":"https://github.com/dotnet/machinelearning/pull/1599","RelatedDescription":"Open PR \"Remove parsing perf  bottleneck in WordEmbeddingsTransform\" (#1599)"},{"Id":"379454991","IsPullRequest":true,"CreatedAt":"2018-11-11T02:16:28","Actor":"shauheen","Number":"1598","RawContent":null,"Title":"Increase time out on build to 45","State":"closed","Body":"I'm seeing builds getting cancelled at 40 minutes which might have completed otherwise. Increasing timeout to 45 minutes, in #1561 it was suggested we should bump this as well.","Url":"https://github.com/dotnet/machinelearning/pull/1598","RelatedDescription":"Closed or merged PR \"Increase time out on build to 45\" (#1598)"},{"Id":"379056001","IsPullRequest":true,"CreatedAt":"2018-11-10T16:05:25","Actor":"TomFinley","Number":"1587","RawContent":null,"Title":"Movement and Internalization Phase 1","State":"closed","Body":"Internalization and sometimes movement of many types. Ongoing work related to #1519 as we try to limit user exposure to internal infrastructure types.\r\n\r\n* Move Sweeper types into Sweeper assembly, out of Core.\r\n* Internalize all command line related infrastructure, including ArgumentAttribute. Move different types into different files.\r\n* Internalize all types in Core's Utils folder.\r\n* Considerable cleanup of TimeSeries abstractions to hide them since they made public some things in Core's Utils.\r\n* Internalize PFA export support.\r\n* Internalize ONNX export support.\r\n* Internalize all the base cursor classes.\r\n* Internalize all ITreeEnsemble and related types.\r\n* Clean up some pointless code.\r\n* Make ModelSave/Load contexts uninstantiable.\r\n\r\nThe commits are mostly structured where I'm removing one sort of thing at a time, so if you want to break it up, just compare adjacent commits. It works pretty well, except sometimes I found I hadn't quite completed the job of a prior commit at a later point and didn't feel like rewriting history, so there is a small amount of pollution.\r\n\r\nThere's no particular reason why I started where I started or stopped where I stopped, except that it's the end of the day.","Url":"https://github.com/dotnet/machinelearning/pull/1587","RelatedDescription":"Closed or merged PR \"Movement and Internalization Phase 1\" (#1587)"},{"Id":"379431139","IsPullRequest":true,"CreatedAt":"2018-11-10T15:27:38","Actor":"jwood803","Number":"1597","RawContent":null,"Title":"Add README to baseline output folder","State":"open","Body":"Fix for #100.\r\n\r\nTook an initial guess at what the README file would contain, but if there's more that needs to be included, I'll gladly add it. 😄 \t","Url":"https://github.com/dotnet/machinelearning/pull/1597","RelatedDescription":"Open PR \"Add README to baseline output folder\" (#1597)"},{"Id":"379430856","IsPullRequest":true,"CreatedAt":"2018-11-10T15:23:26","Actor":"jwood803","Number":"1596","RawContent":null,"Title":"[WIP] Add doc comments","State":"open","Body":"Fix for #1265\r\n\r\nCurrently marked as WIP since I'm sure the doc comment summaries may need to be updated to provide more information. Also, the `netstandard` version of the `CpuMathUtils` will also need to be updated with doc comments.","Url":"https://github.com/dotnet/machinelearning/pull/1596","RelatedDescription":"Open PR \"[WIP] Add doc comments\" (#1596)"},{"Id":"379397351","IsPullRequest":false,"CreatedAt":"2018-11-10T06:52:08","Actor":"neven10","Number":"1595","RawContent":null,"Title":"Sentiment Analysis on Uwp - MissingMethodException","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 UWP app,   ML 0.7.0\r\n- **.NET Version (eg., dotnet --info)**:  Net standard / Targeting min Fall Creator Update\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nWas trying to run  binary classification example on Uwp.\r\n\r\n- **What happened?**\r\n\r\nSystem.MissingMethodException: Method not found: 'System.ComponentModel.Composition.Hosting.CompositionContainer Microsoft.ML.Runtime.IHostEnvironment.GetCompositionContainer()'.\r\n\r\nIt works fine with  .Net Core Console .\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1595","RelatedDescription":"Open issue \"Sentiment Analysis on Uwp - MissingMethodException\" (#1595)"},{"Id":"379329615","IsPullRequest":false,"CreatedAt":"2018-11-10T03:48:13","Actor":"ReidAnderson","Number":"1591","RawContent":null,"Title":"Error When Building Anomaly Detection Example Using 0.7.0","State":"closed","Body":"Hello, I'm a .NET developer but new to the .NET core world. I was able to verify this on two different machines. I didn't see any existing issues open on this. Hopefully I'm not missing something obvious here, and apologies if I am. Let me know if there's any further information I can provide or questions I can answer\r\n\r\n### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10.0.16299\r\n- **.NET Version (eg., dotnet --info)**: \r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nPulled latest version of ML.NET to play around with the new anomaly detection algorithms. Added using statements from the [example](https://github.com/dotnet/machinelearning/blob/7fb76b026d0035d6da4d0b46bd3f2a6e3c0ce3f1/test/Microsoft.ML.TimeSeries.Tests/TimeSeriesDirectApi.cs) linked to from the [release notes](https://github.com/dotnet/machinelearning/blob/master/docs/release-notes/0.7/release-0.7.md). An example of some step by step command line instructions are below (and the file contents are in source code section):\r\n\r\n`dotnet new console `\r\n`dotnet add package Microsoft.ML --version 0.7.0`\r\n\r\n- **What happened?**\r\nFailed to build, received a missing type or name space `error CS0234: The type or namespace name 'TimeSeriesProcessing' does not exist in the namespace 'Microsoft.ML.Runtime' (are you missing an assembly reference?)`\r\nLooking through the object browser in VS I don't see any TimeSeriesProcessing namespace present in the 0.7.0 nuget package at all.\r\n\r\n- **What did you expect?**\r\nSuccessful build, finding the indicated namespace.\r\n\r\n### Source code / logs\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic; \r\nusing Microsoft.ML.Runtime.Api; \r\nusing Microsoft.ML.Runtime.Data; \r\nusing Microsoft.ML.Runtime.TimeSeriesProcessing;\r\n\r\nnamespace console_dotnetcore\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1591","RelatedDescription":"Closed issue \"Error When Building Anomaly Detection Example Using 0.7.0\" (#1591)"},{"Id":"379367550","IsPullRequest":true,"CreatedAt":"2018-11-10T00:29:43","Actor":"sfilipi","Number":"1594","RawContent":null,"Title":"[WIP] Exposing normalizer parameters ","State":"open","Body":"Exposing the weights of the normalizers. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1594","RelatedDescription":"Open PR \"[WIP] Exposing normalizer parameters \" (#1594)"},{"Id":"379342440","IsPullRequest":true,"CreatedAt":"2018-11-09T23:41:33","Actor":"shauheen","Number":"1593","RawContent":null,"Title":"Update Readme.md","State":"closed","Body":"Update the code snippet","Url":"https://github.com/dotnet/machinelearning/pull/1593","RelatedDescription":"Closed or merged PR \"Update Readme.md\" (#1593)"},{"Id":"379061169","IsPullRequest":true,"CreatedAt":"2018-11-09T22:31:05","Actor":"sfilipi","Number":"1588","RawContent":null,"Title":"Renaming transforms to transformers Part 1","State":"closed","Body":"Addresses part of the third section of #1318 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1588","RelatedDescription":"Closed or merged PR \"Renaming transforms to transformers Part 1\" (#1588)"},{"Id":"379337947","IsPullRequest":true,"CreatedAt":"2018-11-09T22:04:31","Actor":"Ivanidzo4ka","Number":"1592","RawContent":null,"Title":"WIP Convert Ngram transform to estimator/transformer","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/1592","RelatedDescription":"Open PR \"WIP Convert Ngram transform to estimator/transformer\" (#1592)"},{"Id":"379047168","IsPullRequest":true,"CreatedAt":"2018-11-09T07:07:44","Actor":"jignparm","Number":"1586","RawContent":null,"Title":"Multiple inputs output support for OnnxTransform.","State":"open","Body":"Fixes issue #1585.\r\n\r\nThis PR is to add support for Onnx models that have multiple input/outputs. The current version of the transform allows for only single input and single output.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1586","RelatedDescription":"Open PR \"Multiple inputs output support for OnnxTransform.\" (#1586)"},{"Id":"379046800","IsPullRequest":false,"CreatedAt":"2018-11-09T07:05:47","Actor":"jignparm","Number":"1585","RawContent":null,"Title":"Add multiple input/output support for OnnxTransform","State":"open","Body":"Allow multiple IDV columns to be mapped to multiple input nodes of an Onnx model, and also accomodate models that have multiple outputs.","Url":"https://github.com/dotnet/machinelearning/issues/1585","RelatedDescription":"Open issue \"Add multiple input/output support for OnnxTransform\" (#1585)"},{"Id":"378959354","IsPullRequest":true,"CreatedAt":"2018-11-08T23:22:37","Actor":"artidoro","Number":"1583","RawContent":null,"Title":"Moved WhiteningTransform to HalLearners","State":"open","Body":"Fixes #721.\r\n\r\nMoved the whitening transform file to HalLearners. Also had to move the corresponding mlcontext extensions.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1583","RelatedDescription":"Open PR \"Moved WhiteningTransform to HalLearners\" (#1583)"},{"Id":"378921485","IsPullRequest":true,"CreatedAt":"2018-11-08T21:20:27","Actor":"Ivanidzo4ka","Number":"1582","RawContent":null,"Title":"Convert Gcn and LpNorm to estimators","State":"open","Body":"Convert gcn and lp norn to estimators","Url":"https://github.com/dotnet/machinelearning/pull/1582","RelatedDescription":"Open PR \"Convert Gcn and LpNorm to estimators\" (#1582)"},{"Id":"378883906","IsPullRequest":false,"CreatedAt":"2018-11-08T19:32:51","Actor":"Zruty0","Number":"1581","RawContent":null,"Title":"Organize the folder structure","State":"open","Body":"We should make sure that the namespaces and folders are matching each other, especially for public components.\r\n\r\n- All our assemblies should have DefaultNamespace be equal to `Microsoft.ML`\r\n- All other public types should be located in files that match their namespace.\r\n\r\n@TomFinley do you want to comment?","Url":"https://github.com/dotnet/machinelearning/issues/1581","RelatedDescription":"Open issue \"Organize the folder structure\" (#1581)"},{"Id":"378869367","IsPullRequest":true,"CreatedAt":"2018-11-08T18:52:30","Actor":"eerhardt","Number":"1580","RawContent":null,"Title":"Introduce VBufferMutationContext and hide VBuffer.Count","State":"open","Body":"This PR executes on proposed changes (1) and (5) in https://github.com/dotnet/machinelearning/issues/608#issuecomment-433185895.\r\n\r\n> 1. Keep Length, but hide/private Count\r\n\r\n> 5. The most drastic proposed change is how to actually mutate a VBuffer.\r\n\r\nThis introduces `VBufferMutationContext`, and uses it in almost all the places where VBuffers are mutated. There are a few stragglers that I will fix in a subsequent PR, but I thought this change was large enough, so I cut it off once I could make `.Count` private.\r\n\r\nWorking towards #608.","Url":"https://github.com/dotnet/machinelearning/pull/1580","RelatedDescription":"Open PR \"Introduce VBufferMutationContext and hide VBuffer.Count\" (#1580)"},{"Id":"378845774","IsPullRequest":false,"CreatedAt":"2018-11-08T17:45:14","Actor":"abgoswam","Number":"1579","RawContent":null,"Title":"Exception when trying to Evaluate AveragedPerceptronTrainer, LinearSvm","State":"open","Body":"For a couple of Learners, we get an exception during `Evaluate`\r\n- AveragedPerceptronTrainer\r\n- LinearSvm\r\n\r\nException : \r\n\r\nMessage: System.ArgumentOutOfRangeException : Probability column 'Probability' not found\r\nParameter name: name\r\n\r\nSample : \r\n\r\n        [Fact]\r\n        public void OVA_BC_AP()\r\n        {\r\n            string dataPath = GetDataPath(\"breast-cancer.txt\");\r\n\r\n            // Create a new context for ML.NET operations. It can be used for exception tracking and logging, \r\n            // as a catalog of available operations and as the source of randomness.\r\n            var mlContext = new MLContext(seed: 1);\r\n            var reader = new TextLoader(mlContext, new TextLoader.Arguments()\r\n            {\r\n                Column = new[]\r\n                        {\r\n                            new TextLoader.Column(\"Label\", DataKind.R4, 0),\r\n                            new TextLoader.Column(\"Features\", DataKind.R4, new [] { new TextLoader.Range(1, 9) }),\r\n                        }\r\n            });\r\n\r\n            // Data\r\n            var data = reader.Read(GetDataPath(dataPath));\r\n\r\n            // Pipeline\r\n            var pipeline = new AveragedPerceptronTrainer(mlContext, \"Label\", \"Features\");\r\n\r\n            var model = pipeline.Fit(data);\r\n            var predictions = model.Transform(data);\r\n\r\n            // Metrics\r\n            var metrics = mlContext.BinaryClassification.Evaluate(predictions);\r\n        }\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1579","RelatedDescription":"Open issue \"Exception when trying to Evaluate AveragedPerceptronTrainer, LinearSvm\" (#1579)"},{"Id":"378753325","IsPullRequest":true,"CreatedAt":"2018-11-08T14:24:00","Actor":"feiyun0112","Number":"1578","RawContent":null,"Title":"Split timeseries samples","State":"open","Body":"Fix #1577","Url":"https://github.com/dotnet/machinelearning/pull/1578","RelatedDescription":"Open PR \"Split timeseries samples\" (#1578)"},{"Id":"378602425","IsPullRequest":false,"CreatedAt":"2018-11-08T06:59:06","Actor":"sfilipi","Number":"1577","RawContent":null,"Title":"The Timeseries samples need to be each one on its own file","State":"open","Body":"There are 4 samples in the [Timeseries.cs samples](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Timeseries.cs)\r\n\r\nSplit each sample, together with the helper classes in its own file, as it is easier to maintain, and change the references of those samples in the code to reference the new files. \r\n\r\nAlso, move the references from the constructor, to the actual class. \r\nExample reference [here](https://github.com/dotnet/machinelearning/blob/e63669b3228fe932e062983759321a021a660f51/src/Microsoft.ML.TimeSeries/IidSpikeDetector.cs#L185)\r\n\r\n` /// [!code-csharp[MF](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Timeseries.cs \"Timeseries examples for spike detection.\")]`\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1577","RelatedDescription":"Open issue \"The Timeseries samples need to be each one on its own file\" (#1577)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-13T05:30:33.6520497Z","RunDurationInMilliseconds":1210}