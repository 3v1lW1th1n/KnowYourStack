{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7307862336","Type":"IssuesEvent","CreatedAt":"2018-02-28T05:23:57","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16653","RelatedDescription":"Opened issue \"Implement AVX2 Intrinsics\" (#16653) at dotnet/coreclr","RelatedBody":"Pending:\r\n- [ ] AlignRight\r\n- [ ] Blend\r\n- [ ] BroadcastScalarToVector128\r\n- [ ] BroadcastScalarToVector256\r\n- [ ] BroadcastVector128ToVector256\r\n- [ ] ConvertToDouble\r\n- [ ] ConvertToInt32\r\n- [ ] ConvertToUInt32\r\n- [ ] ConvertToVector256Int16\r\n- [ ] ConvertToVector256Int32\r\n- [ ] ConvertToVector256Int64\r\n- [ ] ConvertToVector256UInt16\r\n- [ ] ConvertToVector256UInt32\r\n- [ ] ConvertToVector256UInt64\r\n- [ ] ExtractVector128\r\n- [ ] GatherVector128\r\n- [ ] GatherVector256\r\n- [ ] GatherMaskVector128\r\n- [ ] GatherMaskVector256\r\n- [ ] Insert\r\n- [ ] MaskLoad\r\n- [ ] MaskStore\r\n- [ ] Max\r\n- [ ] Min\r\n- [ ] MoveMask\r\n- [ ] MultipleSumAbsoluteDifferences\r\n- [ ] MultiplyAddAdjacent\r\n- [ ] MultiplyHigh\r\n- [ ] MultiplyHighRoundScale\r\n- [ ] MultiplyLow\r\n- [ ] PackSignedSaturate\r\n- [ ] PackUnsignedSaturate\r\n- [ ] Permute2x128\r\n- [ ] Permute4x64\r\n- [ ] PermuteVar8x32\r\n- [ ] ShiftRightArithmeticVariable\r\n- [ ] Shuffle\r\n- [ ] ShuffleHigh\r\n- [ ] ShuffleLow\r\n- [ ] Sign\r\n- [ ] SumAbsoluteDifferences"},{"Id":"7307840462","Type":"IssuesEvent","CreatedAt":"2018-02-28T05:15:45","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16652","RelatedDescription":"Opened issue \"Implement AVX Intrinsics\" (#16652) at dotnet/coreclr","RelatedBody":"Pending:\r\n- [ ] Blend\r\n- [ ] BroadcastScalarToVector128\r\n- [ ] BroadcastScalarToVector256\r\n- [ ] BroadcastVector128ToVector256\r\n- [ ] Ceiling\r\n- [ ] ConvertToVector128Int32\r\n- [ ] ConvertToVector128Single\r\n- [ ] ConvertToVector256Int32\r\n- [ ] ConvertToVector256Single\r\n- [ ] ConvertToVector256Double\r\n- [ ] ConvertToVector128Int32WithTruncation\r\n- [ ] ConvertToVector256Int32WithTruncation\r\n- [ ] DotProduct\r\n- [ ] Extract\r\n- [ ] ExtractVector128\r\n- [ ] ExtendToVector256\r\n- [ ] Floor\r\n- [ ] GetLowerHalf\r\n- [ ] Insert\r\n- [ ] MaskLoad\r\n- [ ] MaskStore\r\n- [ ] MoveMask\r\n- [ ] Permute\r\n- [ ] Permute2x128\r\n- [ ] PermuteVar\r\n- [ ] RoundCurrentDirection\r\n- [ ] RoundToNearestInteger\r\n- [ ] RoundToNegativeInfinity\r\n- [ ] RoundToPositiveInfinity\r\n- [ ] RoundToZero\r\n- [ ] SetAllVector256\r\n- [ ] SetHIghLow\r\n- [ ] Shuffle\r\n- [ ] StaticCast\r\n- [ ] TestC\r\n- [ ] TestNotZAndNotC\r\n- [ ] TestZ\r\n- [ ] ZeroAll\r\n- [ ] ZeroUpper\r\n- [ ] ZeroExtendToVector256"},{"Id":"7307789499","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:55:56","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16651","RelatedDescription":"Opened pull request \"Updating the CompareEqual{Ordered|Unordered}Scalar intrinsics to have slightly better codegen\" (#16651) at dotnet/coreclr","RelatedBody":"Removes an unneeded `setne` as per the discussion here: https://github.com/dotnet/coreclr/pull/16558#issuecomment-368960297\r\n\r\nCC. @mikedn, @CarolEidt, @fiigii "},{"Id":"7307763291","Type":"IssuesEvent","CreatedAt":"2018-02-28T04:45:18","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/1845","RelatedDescription":"Closed issue \"Consider using a buffer cache with P/Invoke\" (#1845) at dotnet/coreclr","RelatedBody":"When allocating native buffers for P/Invoke we should consider pulling from a cache.\n\nIn the scenario of calling I/O related methods many thousands of calls can be made in quick succession which currently can cause a ton of native alloc/free calls.\n"},{"Id":"7307761181","Type":"IssuesEvent","CreatedAt":"2018-02-28T04:44:27","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/1846","RelatedDescription":"Closed issue \"Use HeapAlloc instead of LocalAlloc on Windows\" (#1846) at dotnet/coreclr","RelatedBody":"LocalAlloc is depreciated\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa366723(v=vs.85).aspx\n\nIf we're not using the LMEM_MOVEABLE flag it appears that the overhead isn't too great, but it still does have some. We should consider flipping to Heap\\* from Local*.\n"},{"Id":"7307757926","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:43:04","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16650","RelatedDescription":"Opened pull request \"Add Thread.GetCurrentProcessorId() API\" (#16650) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/16767"},{"Id":"7307757384","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:42:50","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16649","RelatedDescription":"Opened pull request \"Set isInternalRegDelayFree for several of the x86 hwintrinsics\" (#16649) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @mikedn, @fiigii. As per the discussion here: https://github.com/dotnet/coreclr/pull/16558#issuecomment-368923707"},{"Id":"7307694433","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:17:19","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16648","RelatedDescription":"Opened pull request \"Delete unnecesary StackCrawlMarks\" (#16648) at dotnet/coreclr","RelatedBody":"CAS leftovers"},{"Id":"7307600123","Type":"PullRequestEvent","CreatedAt":"2018-02-28T03:40:52","Actor":"dagood","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16635","RelatedDescription":"Closed pull request \"Remove xunit.console.netcore StaticDependency\" (#16635) at dotnet/coreclr","RelatedBody":"It depends on `XunitConsoleNetcorePackageVersion` which was removed in https://github.com/dotnet/coreclr/pull/16378. This is currently breaking CoreCLR auto-update builds: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1423564\r\n\r\nFYI @AndyAyersMS "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7307466986","Type":"PullRequestEvent","CreatedAt":"2018-02-28T02:55:37","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8688","RelatedDescription":"Merged pull request \"Log Windows product type and installation type, and Linux libc version\" (#8688) at dotnet/cli","RelatedBody":"Datapoints and rationale are described in the previous PR https://github.com/dotnet/cli/pull/8579\r\n\r\n"},{"Id":"7307273600","Type":"PullRequestEvent","CreatedAt":"2018-02-28T01:53:55","Actor":"jeffkl","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8696","RelatedDescription":"Merged pull request \"MSBuild 15.7.63\" (#8696) at dotnet/cli","RelatedBody":"* Update package version to 15.7.0-preview-000063\r\n* Add dotnet.myget.org msbuild feed\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7298903116","Type":"PullRequestEvent","CreatedAt":"2018-02-26T18:24:07","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Merged pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""},{"Id":"7298225710","Type":"PullRequestEvent","CreatedAt":"2018-02-26T16:22:39","Actor":"elbro","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/659","RelatedDescription":"Opened pull request \"Fix typo\" (#659) at dotnet/standard","RelatedBody":""},{"Id":"7289990134","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:54:43","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289897216","Type":"PullRequestEvent","CreatedAt":"2018-02-23T22:28:21","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/658","RelatedDescription":"Opened pull request \"Update BuildTools to 2.1.0-preview2-02522-03\" (#658) at dotnet/standard","RelatedBody":"This version includes a fix to start unblocking dependency auto-update flow after GitHub stopped allowing weak cryptographic standards yesterday. dotnet/core-eng#2734"},{"Id":"7289502975","Type":"PullRequestEvent","CreatedAt":"2018-02-23T20:50:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/656","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02522-02 (master)\" (#656) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7307834440","Type":"IssuesEvent","CreatedAt":"2018-02-28T05:13:29","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27542","RelatedDescription":"Opened issue \"Socket_CreateUnixDomainSocket_Throws_OnWindows fails locally on Windows\" (#27542) at dotnet/corefx","RelatedBody":"This test fails locally for me:\r\n```C#\r\n[OuterLoop] // TODO: Issue #11345\r\n[Fact]\r\n[PlatformSpecific(TestPlatforms.Windows)]  // CreateUnixDomainSocket should throw on Windows\r\npublic void Socket_CreateUnixDomainSocket_Throws_OnWindows()\r\n{\r\n    SocketException e = Assert.Throws<SocketException>(() => new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified));\r\n    Assert.Equal(SocketError.AddressFamilyNotSupported, e.SocketErrorCode);\r\n}\r\n```\r\nas `new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified)` doesn't throw, on both core and netfx.  Presumably the AF_UNIX address family is now supported on my Windows OS, maybe due to my having installed Windows Subsystem for Linux."},{"Id":"7307797758","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:59:14","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27193","RelatedDescription":"Merged pull request \"Add ROSpan ToLower and ToUpper string-like APIs with CultureInfo\" (#27193) at dotnet/corefx","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138\r\n\r\n- ToLower\r\n- ToLowerInvariant\r\n- ToUpper\r\n- ToUpperInvariant\r\n\r\nDepends on: https://github.com/dotnet/coreclr/pull/16379 and https://github.com/dotnet/coreclr/pull/16496\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne, @joshfree "},{"Id":"7307760173","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:43:59","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27541","RelatedDescription":"Opened pull request \"Expose Thread.GetCurrentProcessorId()\" (#27541) at dotnet/corefx","RelatedBody":"Fixes #16767"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7307759668","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:43:48","Actor":"Shyam-Gupta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25092","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#25092) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7307683713","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:12:55","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/20913","RelatedDescription":"Closed pull request \"Emit error types when EmitMetadataOnly and TolerateErrors\" (#20913) at dotnet/roslyn","RelatedBody":"I've only prototyped it for C#.\r\nThere is an issue with nested types, since they need to come from a different assembly when emitted to metadata. So when they are loaded from metadata, they are top-level.\r\nI have fixed the arity of the metadata symbol. Also the client no long produces diagnostics on such symbols.\r\n\r\nThe main thing to do at this point is test all the possible diagnostic scenarios.\r\n\r\nA few things to do:\r\n- How do we handle various errors that don't involve error types?\r\n    - illegal overloads/overrides\r\n    - duplicate method\r\n    - un-implemented interface\r\n- Add test with missing ValueTuple.\r\n- I need to investigate what diagnostics should be produced in client (there should only be use-site diagnostics, if any. I'll look for ExtendedErrorTypes with unreported = true. Maybe this requires a different type than MissingMetadataSymbol.TopLevel on the receiving end)\r\n- Implement VB counterpart and tests.\r\n- Talk with IDE team.\r\n- Fail compilation when syntax errors (or at least mismatching braces).\r\n- Fail compilation if tolerate errors is not set, but an dependency is the error assembly.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/7482 and https://github.com/dotnet/roslyn/issues/20914"},{"Id":"7307667178","Type":"PullRequestEvent","CreatedAt":"2018-02-28T04:06:18","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22798","RelatedDescription":"Closed pull request \"Copy actual result from test into clipboard\" (#22798) at dotnet/roslyn","RelatedBody":"This is a little experiment that I'd like to get your feedback on.\r\n\r\nI've had to do a lot of copy/paste to update some diagnostics in tests recently. I think we could design a codefix that would fix the expectation in a test with a single click (running the tests would collect the actual results into some store and associate them to the proper location in test code).\r\nBut I figured a really cheap approximation using the clipboard as a way to store the actual result for one test.\r\n\r\nSo far, I only instrumented `VerifyDiagnostics`, but we could do the same with other `Assert` methods.\r\nGiven that we don't have access to proper clipboard API in our target frameworks, I had to resort to a process, which blinks a popup very briefly...\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7307819957","Type":"PullRequestEvent","CreatedAt":"2018-02-28T05:07:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5463","RelatedDescription":"Opened pull request \"Add workaround for LNK4221 warning\" (#5463) at dotnet/corert","RelatedBody":""},{"Id":"7307571792","Type":"IssuesEvent","CreatedAt":"2018-02-28T03:30:56","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5345","RelatedDescription":"Closed issue \"Generated WASM code for creating specific array causes infinite recursion at runtime\" (#5345) at dotnet/corert","RelatedBody":"With `new long[]{1, 2, 3}`, generated code by wasm backend will cause infinite recursion at runtime. The reported stack trace by Firefox is as below:\r\n\r\n```\r\ntoo much recursion[Learn More]\r\nHelloWasm.js:153731:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__GetFieldOffset\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:153731:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_OptionalFieldsPtr\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:151826:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_RareFlags\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:150469:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_IsByRefLike\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:107801:1\r\n_S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:100911:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:344883:1\r\n_S_P_CoreLib_System_Threading_Monitor__Enter_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:191838:1\r\n_S_P_CoreLib_System_SR__InternalGetResourceString\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:321325:1\r\n_S_P_CoreLib_System_SR__GetResourceString_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:199831:1\r\n_S_P_CoreLib_System_SR__get_ArgumentNull_Generic\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:337049:1\r\n_S_P_CoreLib_System_ArgumentNullException___ctor_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:193115:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:344932:1\r\n_S_P_CoreLib_System_Threading_Monitor__Enter_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:191838:1\r\n_S_P_CoreLib_System_SR__InternalGetResourceString\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:321325:1\r\n_S_P_CoreLib_System_SR__GetResourceString_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:199831:1\r\n_S_P_CoreLib_System_SR__get_ArgumentNull_Generic\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:337049:1\r\n_S_P_CoreLib_System_ArgumentNullException___ctor_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:193115:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\n(omitting tens to hundreds lines here)\r\n```\r\n\r\nHowever for `new long[] {1, 2}` or `new long[] { Int16.MaxValue, 0, Int16.MinValue, 0 }`, they all work fine."},{"Id":"7307571713","Type":"PullRequestEvent","CreatedAt":"2018-02-28T03:30:55","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5377","RelatedDescription":"Merged pull request \"Implement intrinsic call to RuntimeHelpers.InitializeArray for WASM\" (#5377) at dotnet/corert","RelatedBody":"`RuntimeHelpers.InitializeArray` is now implemented as a call to LLVM intrinsic `llvm.memcpy.p0i8.p0i8.i32`, which copies from generated global constant to provided target array.\r\n\r\nCurrently the base size of the array object is hard-coded to 8, since no EEType is provided in the intrinsic call. Is there anyway to get the EEType of the object on stack? I don't think the current working around is doing any good, except it's working."},{"Id":"7307452132","Type":"PullRequestEvent","CreatedAt":"2018-02-28T02:50:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5462","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5462) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7306940653","Type":"PullRequestEvent","CreatedAt":"2018-02-28T00:10:19","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5462","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5462) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7306920929","Type":"PullRequestEvent","CreatedAt":"2018-02-28T00:04:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5460","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5460) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7306919980","Type":"PullRequestEvent","CreatedAt":"2018-02-28T00:04:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5459","RelatedDescription":"Merged pull request \"Fix MCG ProjectN build break\" (#5459) at dotnet/corert","RelatedBody":""},{"Id":"7306534130","Type":"IssuesEvent","CreatedAt":"2018-02-27T22:25:31","Actor":"Sergio0694","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5461","RelatedDescription":"Opened issue \"Repeated crashes from rmrcorer.dll on UWP, can't figure out why\" (#5461) at dotnet/corert","RelatedBody":"Hello, I'm sorry if this is not the exact place to ask for help about this (although I suspect this is related to the .NET Native compiler and maybe the additional processing made by the Store, as I can't reproduce the issue locally), but I've been struggling with this issue for months and I have no clue on what's going on.\r\n\r\nI have [this app](https://www.microsoft.com/store/apps/9NBLGGH3T7G3) in the Store, and I'm constantly getting a ton of crashes, with the following info:\r\n\r\n`application_fault_1007_mrmcorer.dll!\r\nwindows::applicationmodel::resources::core::cqualifierevent::registerscaleevent`\r\n\r\nThese usually make up more than 80% of my total crashes (according from the Dev Dashboard), and my usual situation looks like this because of this issue:\r\n![image](https://user-images.githubusercontent.com/10199417/36758264-398b5b02-1c14-11e8-9670-509f81e5a96a.png)\r\nNow, this number is just ridiculously big in proportion to the number of users I have for my app.\r\n\r\nHere's a typical stack trace for these crashes: [crash_stacktrace.zip](https://github.com/dotnet/corert/files/1764904/crash_stacktrace.zip)\r\n\r\nApparently these crashes come from different places in my app, but they all have this line in common:\r\n\r\n`MrmCoreR.dll | Windows::ApplicationModel::Resources::CResourceLoaderFactory::GetForCurrentView`\r\n\r\nWhich I guess corresponds to this call:\r\n\r\n`Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()`\r\n\r\n\r\nThe problem is that **the only place** where I use that line in my app is inside a `try/catch` block:\r\n\r\n```C#\r\nprivate static ResourceLoader _Loader;\r\n\r\npublic static string GetResource(string resource)\r\n{\r\n    try\r\n    {\r\n        if (_Loader == null) _Loader = ResourceLoader.GetForCurrentView();\r\n        return _Loader.GetString(resource);\r\n    }\r\n    catch\r\n    {\r\n        return string.Empty;\r\n    }\r\n}\r\n```\r\n\r\nSo, I have these questions:\r\n\r\n- How's it possible that that `try/catch` block has no effect whatsoever, as I still see all those crashes from the dashboard?\r\n- I'm using HockeyApp to collect crash reports, and these crashes don't show up over there, why are they only displayed in the Dashboard? Is that some particular/special kind of application crash?\r\n- The number don't seem right. I published a new version of my app yesterday and I can already see over 200 crashes like this one, but I usually only have around 400 weekly users. If the app had really crashes that often I'd already received at least some emails complaining about the app crashing on its own. I honestly have no idea about what's happening here.\r\n\r\nI think this might be related to the .NET Native as the stack trace has the typical \"clutter\" that usually comes from the additional optimization passes of .NET Native, and also because I can't seem to be able to reproduce the issue locally in Debug mode (and in Release, so I wonder if the Store has something to do with this too).\r\n\r\nAny help would really be appreciated here.\r\nThanks! 😄\r\nSergio\r\n"},{"Id":"7306329716","Type":"PullRequestEvent","CreatedAt":"2018-02-27T21:43:22","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5449","RelatedDescription":"Merged pull request \"Change new ThreadPool.QueueUserWorkItem method to be generic\" (#5449) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/27464\r\nPort of https://github.com/dotnet/coreclr/pull/16570\r\ncc: @kouvel, @jkotas, @benaadams "},{"Id":"7306205134","Type":"PullRequestEvent","CreatedAt":"2018-02-27T21:18:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5460","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5460) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7306186822","Type":"PullRequestEvent","CreatedAt":"2018-02-27T21:15:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5459","RelatedDescription":"Opened pull request \"Fix MCG ProjectN build break\" (#5459) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7306516731","Type":"PullRequestEvent","CreatedAt":"2018-02-27T22:21:46","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1991","RelatedDescription":"Merged pull request \"Do not pack platform\" (#1991) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8617 step 2"},{"Id":"7306274633","Type":"PullRequestEvent","CreatedAt":"2018-02-27T21:32:22","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1983","RelatedDescription":"Merged pull request \"Revert #699\" (#1983) at dotnet/sdk","RelatedBody":"In #699, we tried to work around assembly loading issues by avoiding running any of our tasks before NuGet restore. Since we've addressed the underlying assembly loading issue, we can simplify our code by going back to a single target that checks for implicit package overrides\r\n\r\nResolves #783 \r\n"},{"Id":"7306274615","Type":"IssuesEvent","CreatedAt":"2018-02-27T21:32:22","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/783","RelatedDescription":"Closed issue \"Clean up from multi-targeting SDK tasks\" (#783) at dotnet/sdk","RelatedBody":"#762 switched to multi-targeting our SDK tasks for .NET Standard and .NET Framework.  There are some cleanup items we should do that we didn't do at the time in order to reduce churn and risk:\r\n\r\n- Remove System.Security.Claims.dll, System.Security.Principal.Windows.dll, and System.Xml.ReaderWriter.dll [from tools\\net46 in the SDK layout](https://github.com/dotnet/sdk/blob/a4b62ccc2e41893ae7804b97c500dee56d5458fc/build/Nuget/Microsoft.NET.Sdk.Nuget.targets#L53-L67).  These were dependencies for the .NET Standard version of the tasks that should not be needed anymore, but were left in at the time just to be safe.\r\n- We are excluding the Roslyn assemblies and their dependencies [from the SDK layout](https://github.com/dotnet/sdk/blob/a4b62ccc2e41893ae7804b97c500dee56d5458fc/build/Nuget/Microsoft.NET.Sdk.Nuget.targets#L118-L127).  We no longer reference Roslyn at all in our tasks, so we can delete this.\r\n- In #699, we tried to work around assembly loading issues by avoiding running any of our tasks before NuGet restore.  Since we've addressed the underlying assembly loading issue, we can simplify our code by going back to a single target that checks for implicit package overrides\r\n"},{"Id":"7306127734","Type":"PullRequestEvent","CreatedAt":"2018-02-27T21:03:07","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1993","RelatedDescription":"Closed pull request \"Merge release/2.1 to release/2.1.1xx\" (#1993) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into release/2.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-release/2.1.1xx\ngit reset --hard upstream/release/2.1.1xx\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-release/2.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7306107486","Type":"PullRequestEvent","CreatedAt":"2018-02-27T20:59:13","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1999","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1999) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7306105387","Type":"PullRequestEvent","CreatedAt":"2018-02-27T20:58:48","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2000","RelatedDescription":"Merged pull request \"Updating the build scripts to support TLS 1.2 and paths with spaces in the name\" (#2000) at dotnet/sdk","RelatedBody":"FYI. @livarcocc, @dotnet/dotnet-cli"},{"Id":"7305986092","Type":"PullRequestEvent","CreatedAt":"2018-02-27T20:34:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1989","RelatedDescription":"Merged pull request \"Update implicit NETStandard.Library package version, and re-enable test\" (#1989) at dotnet/sdk","RelatedBody":"- Re-enable test for error targeting .NET Standard 2.1 (Fixes #1632)\r\n- Update to version 2.0.2 of NETStandard.Library package (Resolves #1608)"},{"Id":"7305986068","Type":"IssuesEvent","CreatedAt":"2018-02-27T20:34:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1608","RelatedDescription":"Closed issue \"NETStandard.Library 2.0.2 should be picked up in SDK servicing\" (#1608) at dotnet/sdk","RelatedBody":"/cc @livarcocc @dsplaisted "},{"Id":"7305986060","Type":"IssuesEvent","CreatedAt":"2018-02-27T20:34:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1632","RelatedDescription":"Closed issue \"The SDK should not succeed in building netstandard2.1\" (#1632) at dotnet/sdk","RelatedBody":"See PR https://github.com/dotnet/sdk/pull/1603"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"968549530395336704","CreatedAt":"2018-02-27T18:12:57+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview1 now available https://t.co/jAZAQmZq7Q","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":78,"RawContent":null},{"Id":"968549278879592449","CreatedAt":"2018-02-27T18:11:57+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 1 https://t.co/myZTqqSPuJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":47,"RawContent":null},{"Id":"968549057403604992","CreatedAt":"2018-02-27T18:11:04+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 1 https://t.co/YMrTQJHDhU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":337,"FavoriteCount":265,"RawContent":null},{"Id":"968171532038975489","CreatedAt":"2018-02-26T17:10:55+00:00","UserScreenname":"dotnet","Text":"Learn about async/await best practices from @BrandonXamarin - https://t.co/JMIkq5iZti show https://t.co/lHr6F9jmEI /cc @ch9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":120,"FavoriteCount":44,"RawContent":null},{"Id":"967455752855027712","CreatedAt":"2018-02-24T17:46:40+00:00","UserScreenname":"dotnet","Text":"Please take a moment and think of all the office chairs that were destroyed in the office olympics.\n\n@gotheap’s tea… https://t.co/8RvGxAQI5o","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-02-28T05:30:20.4970859Z","RunDurationInMilliseconds":8010}