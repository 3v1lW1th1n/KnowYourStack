{"Data":{"Blog":{"FeedItems":[{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":67,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3694","PublishedOn":"2018-11-29T00:21:07+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We are happy to let you know that .NET Framework 4.8 is now feature complete and we have an early access build to share with you all! We will continue to stabilize this release and take more fixes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/28/announcing-net-framework-4-8-early-access-build-3694/","RawContent":null},{"Title":".NET Framework November 2018 Preview of Quality Rollup","PublishedOn":"2018-11-28T01:04:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Addressed an issue with...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/27/net-framework-november-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8721665759","Type":"PullRequestEvent","CreatedAt":"2018-12-09T02:15:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21452","RelatedDescription":"Opened pull request \"Update CoreClr to preview-27209-01 (master)\" (#21452) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8721580835","Type":"PullRequestEvent","CreatedAt":"2018-12-09T01:02:10","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21374","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup, PgoData to preview-27208-01, preview.18606.1, preview-27206-02, master-20181208-0038, respectively (master)\" (#21374) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8721491817","Type":"PullRequestEvent","CreatedAt":"2018-12-08T23:48:09","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21451","RelatedDescription":"Opened pull request \"Moving the remaining Vector128/256 helper intrinsics to be implemented using other intrinsics\" (#21451) at dotnet/coreclr","RelatedBody":"This updates the remaining `Vector128` and `Vector256` `Create` methods to be implemented using other intrinsics on x86"},{"Id":"8721321218","Type":"PullRequestEvent","CreatedAt":"2018-12-08T21:48:07","Actor":"MichalStrehovsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21446","RelatedDescription":"Merged pull request \"Fix regression in fat calls\" (#21446) at dotnet/coreclr","RelatedBody":"This seems to fix an AV in RyuJIT on the subsequent line."},{"Id":"8721215065","Type":"PullRequestEvent","CreatedAt":"2018-12-08T20:40:13","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21420","RelatedDescription":"Merged pull request \"Leap Seconds Support\" (#21420) at dotnet/coreclr","RelatedBody":"Port the leap seconds changes done in the full framework to net core."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8721380238","Type":"IssuesEvent","CreatedAt":"2018-12-08T22:26:46","Actor":"taori","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10454","RelatedDescription":"Opened issue \"CS0118 if folder name ends with \"Application\"\" (#10454) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8720883966","Type":"IssuesEvent","CreatedAt":"2018-12-08T17:16:06","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10450","RelatedDescription":"Closed issue \"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview\" (#10450) at dotnet/cli","RelatedBody":"@pgolebiowski commented on [Mon Nov 26 2018](https://github.com/dotnet/core/issues/2075)\n\n## Steps to reproduce\r\n\r\n1. Go to the page with [daily builds of .NET Core 3.0](https://github.com/dotnet/core-sdk/blob/master/README.md#installers-and-binaries).\r\n2. Download the macOS installer for *Master (3.0.x Runtime)*.\r\n3. Install.\r\n4. Check `dotnet` version and info:\r\n\r\n```bash\r\n↪ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009784\r\n Commit:    d86a1816c4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009784/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [/usr/local/share/dotnet/sdk]\r\n  2.1.402 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009784 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18572-0018 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n5. Create a new console application:\r\n\r\n```bash\r\ndotnet new console -o Test\r\n```\r\n\r\nwhich by default contains:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n6. Hit `dotnet run`.\r\n\r\n## Error\r\n\r\n```\r\n↪ dotnet run\r\n/usr/local/share/dotnet/sdk/2.1.402/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [/Users/pgolebio/patryk/home/apps/hyperflow/src/Test/Test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Question\r\n\r\nHow to successfully run this console application? Why does it use 2.1.402 even though when asked for `dotnet --version`, it says `3.0.100-preview-009784`?\n\n---\n\n@karelz commented on [Tue Nov 27 2018](https://github.com/dotnet/core/issues/2075#issuecomment-442176157)\n\n@nguerrera @dsplaisted can you please help route this issue?\n\n---\n\n@pgolebiowski commented on [Fri Dec 07 2018](https://github.com/dotnet/core/issues/2075#issuecomment-445191533)\n\nHey guys, do you have an idea for how to proceed? @karelz @nguerrera @dsplaisted \n\n"},{"Id":"8720477030","Type":"PullRequestEvent","CreatedAt":"2018-12-08T13:02:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10453","RelatedDescription":"Opened pull request \"Update dependency files\" (#10453) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8720489985","Type":"PullRequestEvent","CreatedAt":"2018-12-08T13:10:59","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Merged pull request \"Update dependency files\" (#1005) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n"},{"Id":"8720474563","Type":"PullRequestEvent","CreatedAt":"2018-12-08T13:00:55","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Opened pull request \"Update dependency files\" (#1005) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n"},{"Id":"8717944342","Type":"IssuesEvent","CreatedAt":"2018-12-07T18:48:13","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/960","RelatedDescription":"Closed issue \"Strong name validation failed\" (#960) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nI installed Microsoft.Packaging.Tools.Trimming, making sure to use the \"-pre\" cli parameter as recommended in #518 .\r\n\r\nVersion of the trimming tool is 1.1.0-preview1-27107-01\r\n\r\nProject is targeting .NET Framework 4.6.1\r\n\r\nAdded the following to the .csproj file:\r\n\r\n```\r\n  <PropertyGroup>\r\n    <TrimUnusedDependencies>true</TrimUnusedDependencies>\r\n  </PropertyGroup>\r\n\r\n```\r\nI added it as the very first PropertyGroup if that matters.\r\n\r\nWhen building the project from within VS2017, the following error happens:\r\n\r\n> Could not load file or assembly 'Microsoft.Packaging.Tools.Trimming.Tasks, Version=999.999.999.999, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. \r\n> \r\n> Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, \r\n> that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\t\r\n> \r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.8.9\r\nVisualStudio.15.Release/15.8.9+28010.2050\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nAny suggestion?\r\n\r\nThanks"},{"Id":"8716059816","Type":"PullRequestEvent","CreatedAt":"2018-12-07T13:16:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Merged pull request \"Update dependency files\" (#1004) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n"},{"Id":"8715984197","Type":"PullRequestEvent","CreatedAt":"2018-12-07T13:01:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Opened pull request \"Update dependency files\" (#1004) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8721853910","Type":"PullRequestEvent","CreatedAt":"2018-12-09T05:01:59","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33920","RelatedDescription":"Merged pull request \"Update CoreFxTesting arcade package\" (#33920) at dotnet/corefx","RelatedBody":"Fixes reportgenerator crashes"},{"Id":"8721842461","Type":"IssuesEvent","CreatedAt":"2018-12-09T04:51:11","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33931","RelatedDescription":"Closed issue \"Resources (.resx) give null instead of a string\" (#33931) at dotnet/corefx","RelatedBody":"I'm trying to use Resources (.resx) in my .Net Core **console** app, but for some reason I'm not able to get string from a resource, instead, I'm always getting null. Here is example code that reproduce the issue:\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(Resources.Message);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd here is the content of the Resources.resx file:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<root>\r\n    <xsd:schema id=\"root\" xmlns=\"\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">\r\n        <xsd:element name=\"root\" msdata:IsDataSet=\"true\">\r\n            <data name=\"Message\">\r\n                <value>Hello world!</value>\r\n            </data>\r\n        </xsd:element>\r\n    </xsd:schema>\r\n    <resheader name=\"resmimetype\">\r\n        <value>text/microsoft-resx</value>\r\n    </resheader>\r\n    <resheader name=\"version\">\r\n        <value>1.3</value>\r\n    </resheader>\r\n    <resheader name=\"reader\">\r\n        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n    </resheader>\r\n    <resheader name=\"writer\">\r\n        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n    </resheader>\r\n</root>\r\n```\r\n\r\nI'm using Mac and dotnet core 2.2.100 (seems to be the latest version). Adding Microsoft.Extensions.Localization didn't help.\r\n"},{"Id":"8721569485","Type":"PullRequestEvent","CreatedAt":"2018-12-09T00:52:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33932","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#33932) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"},{"Id":"8721410675","Type":"IssuesEvent","CreatedAt":"2018-12-08T22:48:21","Actor":"AraHaan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33236","RelatedDescription":"Closed issue \"Fix xml documentation issues.\" (#33236) at dotnet/corefx","RelatedBody":"On my hacktoberfest PR to try to fix a up for grabs issue at \r\nhttps://github.com/dotnet/corefx/pull/32934 the build kept failing because of the XML documentation being malformed, or just flat out wrong. In that case I have opened this issue as a prerequisite issue to be fixed before that pull request can be merged and the issue it fixes closed as well. And now that I think of it temporarily removing all xml documentation suppressed warnings for now to investigate all of the documentations would probably be best as I am going to fix them anyway (why not fix them all at this rate and simplify the amount of suppressions in the project)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8721869895","Type":"PullRequestEvent","CreatedAt":"2018-12-09T05:16:34","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31633","RelatedDescription":"Merged pull request \"Move package reference to RoslynTools.ModifyVsixManifest from Tools to VSIX project\" (#31633) at dotnet/roslyn","RelatedBody":"RoslynTools.ModifyVsixManifest and RoslynTools.BuildTasks are used by targets that execute on Build and thus must be restored when the project is restored, not when the CI tools are restored.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/31630"},{"Id":"8721869890","Type":"IssuesEvent","CreatedAt":"2018-12-09T05:16:34","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31630","RelatedDescription":"Closed issue \"Deterministic build fails to find ModifyVsixManifest tool\" (#31630) at dotnet/roslyn","RelatedBody":"```\r\nbuild\\Targets\\RepoToolset\\VisualStudio.targets(153,5): error MSB3073: The command \"\"C:\\Users\\vsagent\\.nuget\\packages\\roslyntools.modifyvsixmanifest\\1.0.0-beta2-63222-01\\tools\\ModifyVsixManifest.exe\" --vsix=\"F:\\vsagent\\2\\s\\Binaries\\VSSetup\\Debug\\Insertion\\Roslyn.VisualStudio.Setup.vsix\" --remove=//x:PackageManifest/x:Installation/@Experimental --add-attribute=//x:PackageManifest/x:Installation;SystemComponent;true\" exited with code 3.\r\n```"},{"Id":"8721822544","Type":"PullRequestEvent","CreatedAt":"2018-12-09T04:32:36","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31644","RelatedDescription":"Opened pull request \"Enable OOP features by default.\" (#31644) at dotnet/roslyn","RelatedBody":"This code to make it possible to run features OOP was added around 18 months ago.  Since then there has been no issue with it.  It has also been A/B tested with no isues arising, and positive numbers for all latency-oriented scenarios.\r\n\r\nThis PR simply removes teh options for controlling this and makes it so that OOP is on all the time.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/26076"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8719327872","Type":"PullRequestEvent","CreatedAt":"2018-12-08T00:06:44","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6653","RelatedDescription":"Merged pull request \"Improvements to R2R Test Harness\" (#6653) at dotnet/corert","RelatedBody":"To support multi-core testing, associate the test process's PID with the ETW filter so that only assemblies loaded by the runtime the harness started are considered.\r\n\r\nEmit the assembly name for methods that are jitted to allow grouping of methods by their assembly.\r\n\r\nAdd a new parameter, `--include` which configures the ETW filter to include all assemblies in a given folder, instead of having to specify a large number of assemblies individually.\r\n\r\nBug fixes around path casing causing events to be dropped."},{"Id":"8719287227","Type":"PullRequestEvent","CreatedAt":"2018-12-07T23:52:26","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6664","RelatedDescription":"Opened pull request \"Additional fixes for field placement in CPAOT\" (#6664) at dotnet/corert","RelatedBody":"After making improvements to R2RDump to let me smoothly diff CPAOT\r\nand Crossgen code I managed to identify tests crashing to obvious\r\ninconsistencies in access to class / struct fields. There were\r\nmultiple reasons for these inconsistencies and, while I cannot claim\r\nthis change fixes all of them, it fixes quite a few.\r\n\r\nWhile our longer-term plan is to start embedding field placement\r\ninformation in the R2R executables, I believe this change is useful\r\nto both provide immediate fixes for some of the previously failing\r\nCoreCLR tests and to seed the CPAOT field placement algorithm with\r\na closer match to what CoreCLR uses - even if we decide to deviate\r\nfrom that at some point, it's still probably a reasonable starting\r\npoint.\r\n\r\n1) My original implementation of the static field layout placement\r\nwas based on the method Module::BuildStaticsOffsets but that's\r\nincorrect - this method is only used to calculate the required space\r\nfor statics of each type in the module and use this information to\r\ncalculate offsets within a big array that subsequently gets allocated\r\nas part of the DomainLocalModule / ThreadLocalModule structures.\r\nFor the actual field placement, MethodTableBuilder uses the same\r\nalgorithm as the dynamic layout placement so I unified these two\r\nand I refactored the code to cater for the two-level field resolution.\r\n\r\n2) Reverse token lookup for fields was incomplete so I fixed that.\r\n\r\n3) For static struct fields, we must set a special flag in CPAOT,\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP, this triggers\r\nthe proper double indirection code in JIT that caters for implicitly\r\nboxed struct statics in CoreCLR.\r\n\r\n4) For extra-bubble statics, we instead use a special helper\r\nREADYTORUN_HELPER_FieldAddress in accordance with the postprocessing\r\nin ZapInfo::getFieldInfo around lines 2940-2990.\r\n\r\n5) For instance fields, it turns out there's a slight difference in\r\nhow CoreRT vs. CoreCLR decides field layout for structs. In CoreRT,\r\nstructs use sequential layout by default. In CoreCLR, structs use\r\nsequential layout only when they are blittable, otherwise they use\r\nauto layout.\r\n\r\n6) As part of this change I have forked out the method\r\n\"MarshalHelpers.IsBlittableType\" into a separate static class\r\nIsBlittable because the MarshalHelpers carry around a ton of\r\ndependencies that wreak havoc when propagating to all places where\r\nthe blittable check is newly used as part of the field placement\r\nlogic. With this surgical separation I managed to make this change\r\nrequire very few changes to other projects.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8719141735","Type":"PullRequestEvent","CreatedAt":"2018-12-07T23:06:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6663","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6663) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8718870051","Type":"PullRequestEvent","CreatedAt":"2018-12-07T21:58:06","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6655","RelatedDescription":"Merged pull request \"Fix CancellationTokenRegistration.Token after CTS.Dispose\" (#6655) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/21394 to corert"},{"Id":"8718422963","Type":"PullRequestEvent","CreatedAt":"2018-12-07T20:23:03","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6662","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6662) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8718011455","Type":"PullRequestEvent","CreatedAt":"2018-12-07T19:01:08","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6662","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6662) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8716403160","Type":"PullRequestEvent","CreatedAt":"2018-12-07T14:18:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6661","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6661) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8716101804","Type":"PullRequestEvent","CreatedAt":"2018-12-07T13:24:13","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6661","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6661) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8720475152","Type":"PullRequestEvent","CreatedAt":"2018-12-08T13:01:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2736","RelatedDescription":"Opened pull request \"Update dependency files\" (#2736) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"279475345","IsPullRequest":true,"CreatedAt":"2018-05-18T19:10:06","Actor":"heiligerdankgesang","Number":"92","RawContent":null,"Title":"Remove contact email from system.drawing.md","State":"closed","Body":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information.","Url":"https://github.com/dotnet/foundation/pull/92","RelatedDescription":"Closed or merged PR \"Remove contact email from system.drawing.md\" (#92)"},{"Id":"285274998","IsPullRequest":true,"CreatedAt":"2018-05-18T19:09:35","Actor":"onovotny","Number":"93","RawContent":null,"Title":"Add Humanizer","State":"closed","Body":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682","Url":"https://github.com/dotnet/foundation/pull/93","RelatedDescription":"Closed or merged PR \"Add Humanizer\" (#93)"},{"Id":"286511421","IsPullRequest":true,"CreatedAt":"2018-05-18T19:07:08","Actor":"ctaggart","Number":"94","RawContent":null,"Title":"add SourceLink","State":"closed","Body":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138","Url":"https://github.com/dotnet/foundation/pull/94","RelatedDescription":"Closed or merged PR \"add SourceLink\" (#94)"},{"Id":"288415599","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:48","Actor":"bfistein","Number":"95","RawContent":null,"Title":"Fix broken logo URL","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/95","RelatedDescription":"Closed or merged PR \"Fix broken logo URL\" (#95)"},{"Id":"288749196","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:24","Actor":"galatrash","Number":"96","RawContent":null,"Title":"Adding DNN Platform.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/96","RelatedDescription":"Closed or merged PR \"Adding DNN Platform.\" (#96)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"388978897","IsPullRequest":true,"CreatedAt":"2018-12-09T02:15:53","Actor":"dotnet-maestro-bot","Number":"21452","RawContent":null,"Title":"Update CoreClr to preview-27209-01 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21452","RelatedDescription":"Open PR \"Update CoreClr to preview-27209-01 (master)\" (#21452)"},{"Id":"388970684","IsPullRequest":true,"CreatedAt":"2018-12-08T23:48:08","Actor":"tannergooding","Number":"21451","RawContent":null,"Title":"Moving the remaining Vector128/256 helper intrinsics to be implemented using other intrinsics","State":"open","Body":"This updates the remaining `Vector128` and `Vector256` `Create` methods to be implemented using other intrinsics on x86","Url":"https://github.com/dotnet/coreclr/pull/21451","RelatedDescription":"Open PR \"Moving the remaining Vector128/256 helper intrinsics to be implemented using other intrinsics\" (#21451)"},{"Id":"388849568","IsPullRequest":true,"CreatedAt":"2018-12-08T21:48:06","Actor":"MichalStrehovsky","Number":"21446","RawContent":null,"Title":"Fix regression in fat calls","State":"closed","Body":"This seems to fix an AV in RyuJIT on the subsequent line.","Url":"https://github.com/dotnet/coreclr/pull/21446","RelatedDescription":"Closed or merged PR \"Fix regression in fat calls\" (#21446)"},{"Id":"388924998","IsPullRequest":true,"CreatedAt":"2018-12-08T18:45:35","Actor":"batzen","Number":"21449","RawContent":null,"Title":"Invalid setting csharp_new_line_within_query_expression_clauses in .editorconfig","State":"closed","Body":"Same as in https://github.com/dotnet/corefx/issues/25991.\r\n\r\nRoslyn doesn't support csharp_new_line_within_query_expression_clauses.\r\nBut Roslyn does support csharp_new_line_between_query_expression_clauses and it's missing from .editorconfig.\r\n\r\nI also removed the comment \"# Trim trailing whitespace\" because that option is not set.","Url":"https://github.com/dotnet/coreclr/pull/21449","RelatedDescription":"Closed or merged PR \"Invalid setting csharp_new_line_within_query_expression_clauses in .editorconfig\" (#21449)"},{"Id":"388886598","IsPullRequest":true,"CreatedAt":"2018-12-08T18:41:30","Actor":"AaronRobinsonMSFT","Number":"21447","RawContent":null,"Title":"Remove `TryGetGuid()` and `GetDefaultInterfaceForCoclass()` from the","State":"closed","Body":"stdinterfaces API surface.","Url":"https://github.com/dotnet/coreclr/pull/21447","RelatedDescription":"Closed or merged PR \"Remove `TryGetGuid()` and `GetDefaultInterfaceForCoclass()` from the\" (#21447)"},{"Id":"388936408","IsPullRequest":false,"CreatedAt":"2018-12-08T16:28:42","Actor":"pakrym","Number":"21450","RawContent":null,"Title":" Enable overriding default stack size on Windows","State":"open","Body":"When hosting CoreCLR inside IIS using AspNetCoreModule it inherits stack sizes from `w3wp.exe` that are smaller then default (512K in 64 bit version and 256K in 32bit one.). \r\n\r\nCustomers started hitting stack overflow exceptions in apps that used to work because of that: https://github.com/aspnet/AspNetCore/issues/4531 https://github.com/aspnet/EntityFrameworkCore/issues/14116\r\n\r\nWould be nice if we can give them a way to increase managed stack size similar to https://github.com/dotnet/coreclr/pull/13517\r\n\r\n@janvorli @jkotas ","Url":"https://github.com/dotnet/coreclr/issues/21450","RelatedDescription":"Open issue \" Enable overriding default stack size on Windows\" (#21450)"},{"Id":"388920309","IsPullRequest":true,"CreatedAt":"2018-12-08T13:02:11","Actor":"dotnet-maestro[bot]","Number":"21448","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21448","RelatedDescription":"Open PR \"Update dependency files\" (#21448)"},{"Id":"388769716","IsPullRequest":true,"CreatedAt":"2018-12-08T05:36:02","Actor":"jkoritzinsky","Number":"21438","RawContent":null,"Title":"Add PNSE CustomMarshaler tests (for Tlbimp compat)","State":"closed","Body":"Add tests for the custom marshaler PNSE stubs added in #21429.","Url":"https://github.com/dotnet/coreclr/pull/21438","RelatedDescription":"Closed or merged PR \"Add PNSE CustomMarshaler tests (for Tlbimp compat)\" (#21438)"},{"Id":"388730664","IsPullRequest":true,"CreatedAt":"2018-12-08T02:14:45","Actor":"stephentoub","Number":"21437","RawContent":null,"Title":"Remove some unnecessary spinning","State":"closed","Body":"Most of the use of SpinWait in CoreLib involves waiting for some short-lived operation to complete on another thread, in which case the spinning thread should backoff as it's unable to make forward progress until the other operation completes.  In a few cases, however, SpinWait is being used just around CompareExchange operations, such that at least one thread running this code path is guaranteed to make forward progress, and the backoff in the spinning doesn't actually help (in theory it could help to reduce contention if lots of threads were all trying to CompareExchange concurrently, but in such cases you'd actually want more randomized backoff, as otherwise it's likely all the threads would re-attempt at around the same time and similarly re-encounter contention).\r\n\r\ncc: @kouvel, @jkotas","Url":"https://github.com/dotnet/coreclr/pull/21437","RelatedDescription":"Closed or merged PR \"Remove some unnecessary spinning\" (#21437)"},{"Id":"388499320","IsPullRequest":true,"CreatedAt":"2018-12-07T23:01:23","Actor":"tannergooding","Number":"21432","RawContent":null,"Title":"Moving various Vector128/256 helper method to be implemented using other intrinsics","State":"closed","Body":"As per the title, this updates various helper method for `Vector128` and `Vector256` to be implemented using other intrinsics","Url":"https://github.com/dotnet/coreclr/pull/21432","RelatedDescription":"Closed or merged PR \"Moving various Vector128/256 helper method to be implemented using other intrinsics\" (#21432)"},{"Id":"388837544","IsPullRequest":false,"CreatedAt":"2018-12-07T22:32:53","Actor":"sandreenko","Number":"21445","RawContent":null,"Title":"thousand test failures in corefx.","State":"open","Body":"Examples in baseline jobs: [x64](https://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_baseline/710/), [x86](https://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/682/testReport/).\r\n\r\nI have not found an exisiting issue, please close this as dup if there is one.\r\nMost of tests fail with:\r\n`System.PlatformNotSupportedException : This platform does not support distributed transactions.` or CoreFX asserts.\r\nAre these tests new?\r\n","Url":"https://github.com/dotnet/coreclr/issues/21445","RelatedDescription":"Open issue \"thousand test failures in corefx.\" (#21445)"},{"Id":"388464325","IsPullRequest":true,"CreatedAt":"2018-12-07T22:31:25","Actor":"AaronRobinsonMSFT","Number":"21430","RawContent":null,"Title":"Add support for loading registered TLBs","State":"closed","Body":"See #20531\r\n\r\ncc @jeffschwMSFT @richlander ","Url":"https://github.com/dotnet/coreclr/pull/21430","RelatedDescription":"Closed or merged PR \"Add support for loading registered TLBs\" (#21430)"},{"Id":"388441661","IsPullRequest":true,"CreatedAt":"2018-12-07T22:15:44","Actor":"dagood","Number":"21423","RawContent":null,"Title":"Build Microsoft.NET.Sdk.IL package during source-build","State":"closed","Body":"Allowing `Microsoft.NET.Sdk.IL` to build during source-build means CoreFX can use the source-built version rather than a prebuilt.\r\n\r\n@RussKeldorph can you make sure this (or some better approach) gets merged in to reduce maintenance burden as CoreCLR moves along?","Url":"https://github.com/dotnet/coreclr/pull/21423","RelatedDescription":"Closed or merged PR \"Build Microsoft.NET.Sdk.IL package during source-build\" (#21423)"},{"Id":"388833184","IsPullRequest":false,"CreatedAt":"2018-12-07T22:15:23","Actor":"RussKeldorph","Number":"21444","RawContent":null,"Title":"Reconsider Microsoft.NET.Sdk.IL build and publish","State":"open","Body":"See discussion in #21423.  Consider always building the IL SDK package but only selectively publishing it.","Url":"https://github.com/dotnet/coreclr/issues/21444","RelatedDescription":"Open issue \"Reconsider Microsoft.NET.Sdk.IL build and publish\" (#21444)"},{"Id":"388830228","IsPullRequest":true,"CreatedAt":"2018-12-07T22:03:29","Actor":"echesakovMSFT","Number":"21443","RawContent":null,"Title":"Specify HelixTargetQueues in yaml","State":"open","Body":"Update Helix Queues used for public vs internal project and specify them in yaml instead of MSBuild.\r\n\r\nUse comma-separated strings (semicolon-separated one won't work on non-Windows)\r\n\r\n[Arcade already supports](https://github.com/dotnet/arcade/blob/3178bd93cbc3b781b1144643e35137cca630a78b/src/Microsoft.DotNet.Helix/Sdk/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets#L51) parsing comma-separated strings for HelixTargetQueues property so no need to do this on our side.","Url":"https://github.com/dotnet/coreclr/pull/21443","RelatedDescription":"Open PR \"Specify HelixTargetQueues in yaml\" (#21443)"},{"Id":"388817632","IsPullRequest":true,"CreatedAt":"2018-12-07T21:19:19","Actor":"OlegAxenow","Number":"21442","RawContent":null,"Title":"Improve parsing performance for System.Guid","State":"open","Body":"This is WIP PR to check compatibility with different platforms.\r\nDiscussed with @jkotas in \r\n[CoreFx #33684](https://github.com/dotnet/corefx/issues/33684)\r\nI did not try to speed up hex parsing in ```System.Number```\r\nand ```Guid.ToString()```, because PR would be too big.\r\nChanges and benchmarks are below\r\n\r\n```System.Number``` changed to make Guid parsing faster.\r\n\r\n1. ```Number.s_charToHexLookup```  changed to array of 128 bytes\r\n instead of 256 integers (128 bytes vs. 1024 bytes). \r\n Reducing array size is safe, because\r\n every usage contains s_charToHexLookup.Length checking.\r\n2. ```IsHexPrefix``` moved from the ```System.Guid``` to the\r\n ```System.Number``` (and marked by \r\n ```MethodImplOptions.AggressiveInlining```).\r\n Also two new methods added (see below).\r\n I'm not sure about this solution, but it will allow transferring all\r\n parsing logic to the System.Number in the future.\r\n3. ```Number.TryParseHexStrict``` tries to parse two characters as valid\r\n hex digits (0-9, a-f, A-F). ```TryParseHexStrict``` uses\r\n ```s_charToHexLookup```\r\n to construct single byte from two characters.\r\n5. ```Number.TryParseHexForTwoBytes``` method helps to deal with\r\n\"+\" and \"0x\" after TryParseHexStrict call.\r\n\r\nParsing logic of ```System.Guid``` tuned with new Number methods\r\n for all formats except \"X\" (\"X\" accepts too weird strings).\r\n\r\n1. All preparing logic (like format processing and span trimming)\r\n stayed the same.\r\n2. ```TryParseExactD``` and ```TryParseExactN``` logic changed to call\r\n ```Number.TryParseHexStrict```.\r\n This allows to parse equivalents of ```Guid.ToString()``` faster.\r\n3. When ```Number.TryParseHexStrict``` returns false,\r\n ```Number.TryParseHexForTwoBytes``` method called\r\n to deal with \"+\" and \"0x\".\r\n\r\nBelow are the worst results from 4 benchmarks.\r\n\r\nFor the \"D\", \"B\" and \"P\" formats, performance is 45% higher.\r\nFor the \"N\" format, performance is 65% higher.\r\n\r\nOriginal .NET CoreCLR (built from today's sources):\r\n\r\n|Method |      Mean |     Error |    StdDev |\r\n|------ |----------:|----------:|----------:|\r\n|ExactD | 146.52 ns | 0.6300 ns | 0.5893 ns |\r\n|ExactB | 150.87 ns | 0.3965 ns | 0.3709 ns |\r\n|ExactN | 222.14 ns | 0.7898 ns | 0.7388 ns |\r\n|ExactX | 449.62 ns | 1.5096 ns | 1.3382 ns |\r\n\r\nModified .NET CoreCLR:\r\n\r\n|Method |      Mean |     Error |    StdDev |\r\n|------ |----------:|----------:|----------:|\r\n|ExactD |  80.94 ns | 0.2783 ns | 0.2603 ns |\r\n|ExactB |  83.29 ns | 0.3888 ns | 0.3637 ns |\r\n|ExactN |  75.83 ns | 0.5447 ns | 0.4829 ns |\r\n|ExactX | 440.82 ns | 1.2060 ns | 1.1281 ns |\r\n\r\nEnvironment:\r\n```BenchmarkDotNet=v0.11.2,\r\n\r\nOS=Windows 10.0.17134.407 (1803/April2018Update/Redstone4)\r\n\r\nIntel Core i7-2600 CPU 3.40GHz (Sandy Bridge),\r\n1 CPU, 8 logical and 4 physical cores\r\nFrequency=3312785 Hz, Resolution=301.8608 ns, Timer=TSC```","Url":"https://github.com/dotnet/coreclr/pull/21442","RelatedDescription":"Open PR \"Improve parsing performance for System.Guid\" (#21442)"},{"Id":"388773276","IsPullRequest":true,"CreatedAt":"2018-12-07T21:00:36","Actor":"tannergooding","Number":"21439","RawContent":null,"Title":"Adding a note to the genBaseIntrinsic function header about operand assumptions","State":"closed","Body":"Adding the comment @CarolEidt requested in https://github.com/dotnet/coreclr/pull/21351#discussion_r239643723","Url":"https://github.com/dotnet/coreclr/pull/21439","RelatedDescription":"Closed or merged PR \"Adding a note to the genBaseIntrinsic function header about operand assumptions\" (#21439)"},{"Id":"388805276","IsPullRequest":false,"CreatedAt":"2018-12-07T20:36:51","Actor":"tannergooding","Number":"21441","RawContent":null,"Title":"The `emitDispIns` logic in `emitxarch.h` could use some cleanup","State":"open","Body":"As discussed in https://github.com/dotnet/coreclr/pull/21432 (and mentioned in various other issues), there are several cases where `emitDispIns` prints the wrong information.\r\n\r\nSome examples of this are:\r\n* It prints `movd` instead of `movq` when the integer operand is an `EA_8BYTE`\r\n* It prints `xrax` instead of `rax` or `eax` for certain instructions that take both a floating-point and integer-register\r\n* It prints exclusively `ymm` or `xmm` for certain instructions that take both `TYP_SIMD16` and `TYP_SIMD32` (or a mix of both)\r\n\r\nThere are also some other issues scattered about given that the handling is often done on a \"per instruction format\" case.\r\n\r\nWe should investigate cleaning up this function to improve the logic and to ensure that it accurately prints the disassembly","Url":"https://github.com/dotnet/coreclr/issues/21441","RelatedDescription":"Open issue \"The `emitDispIns` logic in `emitxarch.h` could use some cleanup\" (#21441)"},{"Id":"388803991","IsPullRequest":false,"CreatedAt":"2018-12-07T20:31:57","Actor":"tannergooding","Number":"21440","RawContent":null,"Title":"Investigate which HWIntrinsics would benefit from additional support in lowering","State":"open","Body":"As discussed in https://github.com/dotnet/coreclr/pull/21432#discussion_r239903857, there may be certain HWIntrinsics (such as the widening or narrowing operations: `CreateScalarUnsafe`, `ToVector256Unsafe`, `GetLower`, and `ToScalar`) which would benefit from additional handling in lowering.\r\n\r\nWe should investigate which intrinsics would benefit from this and implement the appropriate logic where necessary.","Url":"https://github.com/dotnet/coreclr/issues/21440","RelatedDescription":"Open issue \"Investigate which HWIntrinsics would benefit from additional support in lowering\" (#21440)"},{"Id":"388462063","IsPullRequest":true,"CreatedAt":"2018-12-07T17:55:38","Actor":"jkoritzinsky","Number":"21429","RawContent":null,"Title":"Add PNSE implementations of other custom marshalers","State":"closed","Body":"Add PNSE implementations of unsupported built-in custom marshalers to enable good error messages on PIAs that could possibly directly use them.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21429","RelatedDescription":"Closed or merged PR \"Add PNSE implementations of other custom marshalers\" (#21429)"},{"Id":"388653422","IsPullRequest":true,"CreatedAt":"2018-12-07T16:09:44","Actor":"Dotnet-GitSync-Bot","Number":"21436","RawContent":null,"Title":"Mirror changes from dotnet/corefx,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/21436","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,corert\" (#21436)"},{"Id":"388471351","IsPullRequest":true,"CreatedAt":"2018-12-07T14:20:50","Actor":"fiigii","Number":"21431","RawContent":null,"Title":"Fix a bug that disabled Bmi1/2.X64","State":"closed","Body":"Fix a bug from https://github.com/dotnet/coreclr/pull/21264","Url":"https://github.com/dotnet/coreclr/pull/21431","RelatedDescription":"Closed or merged PR \"Fix a bug that disabled Bmi1/2.X64\" (#21431)"},{"Id":"388602431","IsPullRequest":true,"CreatedAt":"2018-12-07T13:19:42","Actor":"Dotnet-GitSync-Bot","Number":"21435","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/21435","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21435)"},{"Id":"388573886","IsPullRequest":false,"CreatedAt":"2018-12-07T09:36:51","Actor":"jeremyVignelles","Number":"21434","RawContent":null,"Title":"proc.StandardOutput.ReadAsync doesn't cancel properly if no output is sent from the process","State":"open","Body":"I went several times into this, in .net framework as well as in .net core on windows:\r\n\r\nI have a process, and I read its output asynchronously using `ReadAsync()`. I want to be able to abort the process, so I'm passing in a `CancellationToken`.\r\n\r\nHowever, if the child process is not emitting any output at that moment, the `ReadAsync` method will wait indefinitely.\r\n\r\nHere is a sample repro: https://github.com/jeremyVignelles/TestProcessDeadlock\r\n\r\nThe deadlock occurs at \r\nhttps://github.com/jeremyVignelles/TestProcessDeadlock/blob/2ceb2f79bb4298c0b25e12638b4c2a66c45a06c3/TestProcessDeadlock/Program.cs#L30\r\n\r\nWhen trying to dig into the code of CoreFX/CoreCLR, I believe that this synchronous call could be the culprit:\r\nhttps://github.com/dotnet/coreclr/blob/baa4f19a7158e31b7012ff2dafebfb5f1b1edee4/src/System.Private.CoreLib/shared/System/IO/FileStream.Windows.cs#L865\r\n\r\n\r\nMy question is : is that an expected behavior? Is there any good fix for that?\r\n\r\nIf nothing can be done in the CoreCLR, what's the proper fix in my code? I read somewhere (can't find it anymore) something like \"yeah, there is a bug, so let's just wrap synchronous `Read()` calls in a Thread() and Abort it when the cancellation token is canceled. This method throws on .net core, because `Thread.Abort()` is not valid anymore.\r\n\r\nAnother thing I found is this https://stackoverflow.com/a/34226000/2663813 : \r\n\r\n```\r\ncancellationToken.Register(() => process.Kill());\r\n```\r\nWhich indeed unlocks the `ReadAsync()` method, but is there a better way?","Url":"https://github.com/dotnet/coreclr/issues/21434","RelatedDescription":"Open issue \"proc.StandardOutput.ReadAsync doesn't cancel properly if no output is sent from the process\" (#21434)"},{"Id":"388453956","IsPullRequest":true,"CreatedAt":"2018-12-07T09:33:00","Actor":"janvorli","Number":"21426","RawContent":null,"Title":"Fix SOS thread statics display","State":"closed","Body":"I've noticed that when dumping an object with thread locals using SOS\r\ndumpobj command, I never get the thread locals. I've stepped through the\r\ncode in SOS that displays thread statics and found that for some strange\r\nreason, it dismisses threads where DomainLocalModule doesn't have\r\n\"initialized\" flag set for the given class. However, when runtime\r\naccesses thread statics, it just checks \"allocated\" flag set for the\r\ngiven class in the ThreadLocalModule. Removing the extra check for\r\nDomainLocalModule fixed the problem and now thread statics are displayed\r\nproperly.","Url":"https://github.com/dotnet/coreclr/pull/21426","RelatedDescription":"Closed or merged PR \"Fix SOS thread statics display\" (#21426)"},{"Id":"388460336","IsPullRequest":true,"CreatedAt":"2018-12-07T09:20:50","Actor":"janvorli","Number":"21428","RawContent":null,"Title":"Disable obsolete collectible corefx tests","State":"closed","Body":"Now that the COM interop support for collectible classes is in, we need\r\nto disable couple of corefx tests that were checking that it fails.\r\n\r\nClose #21398","Url":"https://github.com/dotnet/coreclr/pull/21428","RelatedDescription":"Closed or merged PR \"Disable obsolete collectible corefx tests\" (#21428)"},{"Id":"388532072","IsPullRequest":false,"CreatedAt":"2018-12-07T07:09:38","Actor":"AriNuer","Number":"21433","RawContent":null,"Title":"[arm64/windows] SyntaxError in arm64_cross_checked_windows_nt_corefx_baseline_bld","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_baseline_bld/22/\r\n**Failed log:**\r\n```\r\nD:\\j\\workspace\\arm64_cross_c---efb15e6d>python -u D:\\j\\workspace\\arm64_cross_c---efb15e6d\\tests\\scripts\\run-corefx-tests.py -arch arm64 -ci_arch arm64 -build_type Checked -fx_root D:\\j\\workspace\\arm64_cross_c---efb15e6d\\_\\fx -fx_branch master -env_script D:\\j\\workspace\\arm64_cross_c---efb15e6d\\SetStressModes.bat -no_run_tests \r\n  File \"D:\\j\\workspace\\arm64_cross_c---efb15e6d\\tests\\scripts\\run-corefx-tests.py\", line 53\r\n    os.chmod(name, 0651)\r\n                      ^\r\nSyntaxError: invalid token\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21433","RelatedDescription":"Open issue \"[arm64/windows] SyntaxError in arm64_cross_checked_windows_nt_corefx_baseline_bld\" (#21433)"},{"Id":"388457890","IsPullRequest":false,"CreatedAt":"2018-12-07T00:39:44","Actor":"BruceForstall","Number":"21427","RawContent":null,"Title":"[Linux/arm64] System.Net.Http.Functional.Tests failure","State":"open","Body":"https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/59/consoleFull\r\n\r\nIncluding VM assert:\r\n```\r\nAssert failure(PID 33063 [0x00008127], Thread: 37956 [0x9444]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n```\r\n\r\nPartial log:\r\n```\r\n04:29:37 >>>>> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Net.Http.Functional.Tests\r\n04:29:37 \r\n04:29:37 Running tests in /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Net.Http.Functional.Tests/netcoreapp-Linux-Release-arm64\r\n04:29:37 timeout --kill-after=30s 20m ./RunTests.sh /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64\r\n04:29:37 \r\n04:29:37 ./RunTests.sh: line 110: ulimit: core file size: cannot modify limit: Operation not permitted\r\n04:29:37 ----- start 04:28:33 =============== To repro directly: =====================================================\r\n04:29:37 pushd .\r\n04:29:37 #!/usr/bin/env bash export COMPlus_TieredCompilation=0\r\n04:29:37 chmod +x /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet xunit.console.dll System.Net.Http.Functional.Tests.dll  -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing\r\n04:29:37 popd\r\n04:29:37 ===========================================================================================================\r\n04:29:37 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Net.Http.Functional.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Net.Http.Functional.Tests/netcoreapp-Linux-Release-arm64\r\n04:29:37 xUnit.net Console Runner v2.4.1-pre.build.4059 (64-bit .NET Core 4.6.27204.0)\r\n04:29:37 [37m  Discovering: System.Net.Http.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n04:29:37 [m[37m  Discovered:  System.Net.Http.Functional.Tests (found 629 of 920 test cases)\r\n04:29:37 [m[37m  Starting:    System.Net.Http.Functional.Tests (parallel test collections = on, max threads = 46)\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClient_SelectedSites_Test.RetrieveSite_Succeeds [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_ClientEKUServerAuth_Fails [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClient_SelectedSites_Test.RetrieveSite_Succeeds [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.MakeAndFaultManyRequests [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.MakeAndFaultManyRequests [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClient_SelectedSites_Test.RetrieveSite_Debug_Helper [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClient_SelectedSites_Test.RetrieveSite_Debug_Helper [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.UnreadResponseMessage_Collectible [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.SingleClient_ManyGets_Async [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.CreateAndDestroyManyClients [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.ManyClients_ManyPosts_Async [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.ManyClients_ManyGets [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.SingleClient_ManyGets_Sync [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.ManyClients_ManyPosts_Async [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.SingleClient_ManyGets_Sync [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.UnreadResponseMessage_Collectible [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.ManyClients_ManyGets [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.SingleClient_ManyGets_Async [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress.CreateAndDestroyManyClients [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_NoEKUServerAuth_Ok [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_NoEKUClientAuth_Ok [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestClientCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_ServerEKUClientAuth_Fails [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestClientCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_ServerEKUClientAuth_Fails [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestClientCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_NoEKUClientAuth_Ok [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestClientCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_NoEKUServerAuth_Ok [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestCertificates\"\r\n04:29:37 [m[33;1m    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_ClientEKUServerAuth_Fails [SKIP]\r\n04:29:37 [m[37m      Condition(s) not met: \"CanTestCertificates\"\r\n04:29:37 [mCLR: Managed code called FailFast, saying \"[This assert catches satellite assembly build/deployment problems - report this message to your build lab & loc engineer]\r\n04:29:37 GetSatelliteAssembly failed for culture en-US and version 4.1.1.0 of assembly System.Net.Security with error code 0x80131509\r\n04:29:37 Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Net.Security.resources, Version=4.1.1.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a'. An operation is not legal in the current state. (Exception from HRESULT: 0x80131509 (COR_E_INVALIDOPERATION))\r\n04:29:37 File name: 'System.Net.Security.resources, Version=4.1.1.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a'\r\n04:29:37    at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n04:29:37    at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 \r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n04:29:37    at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n04:29:37    at System.Resources.ResourceManager.GetString(String name)\r\n04:29:37    at System.SR.GetResourceString(String resourceKey, String defaultString) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Common/src/System/SR.cs:line 29\r\n04:29:37    at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.OpenSsl.cs:line 250\r\n04:29:37    at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Unix.cs:line 158\r\n04:29:37    at System.Net.Security.SecureChannel.GenerateToken(Byte[] input, Int32 offset, Int32 count, Byte[]& output) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SecureChannel.cs:line 841\r\n04:29:37    at System.Net.Security.SecureChannel.NextMessage(Byte[] incoming, Int32 offset, Int32 count) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SecureChannel.cs:line 729\r\n04:29:37    at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 749\r\n04:29:37    at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 965\r\n04:29:37    at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 1111\r\n04:29:37    at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/FixedSizeReader.cs:line 72\r\n04:29:37    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n04:29:37    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n04:29:37    at System.Threading.ThreadPoolGlobals.<>c.<.cctor>b__6_0(Object state)\r\n04:29:37    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs:line 1040\r\n04:29:37    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n04:29:37    at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\"\r\n04:29:37 Assertion Failed\r\n04:29:37 [This assert catches satellite assembly build/deployment problems - report this message to your build lab & loc engineer]\r\n04:29:37 GetSatelliteAssembly failed for culture en-US and version 4.1.1.0 of assembly System.Net.Security with error code 0x80131509\r\n04:29:37 Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Net.Security.resources, Version=4.1.1.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a'. An operation is not legal in the current state. (Exception from HRESULT: 0x80131509 (COR_E_INVALIDOPERATION))\r\n04:29:37 File name: 'System.Net.Security.resources, Version=4.1.1.0, Culture=en-US, PublicKeyToken=b03f5f7f11d50a3a'\r\n04:29:37    at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n04:29:37    at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 \r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n04:29:37    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n04:29:37    at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)\r\n04:29:37    at System.Resources.ResourceManager.GetString(String name)\r\n04:29:37    at System.SR.GetResourceString(String resourceKey, String defaultString) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Common/src/System/SR.cs:line 29\r\n04:29:37    at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.OpenSsl.cs:line 250\r\n04:29:37    at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Unix.cs:line 158\r\n04:29:37    at System.Net.Security.SecureChannel.GenerateToken(Byte[] input, Int32 offset, Int32 count, Byte[]& output) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SecureChannel.cs:line 841\r\n04:29:37    at System.Net.Security.SecureChannel.NextMessage(Byte[] incoming, Int32 offset, Int32 count) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SecureChannel.cs:line 729\r\n04:29:37    at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 749\r\n04:29:37    at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 965\r\n04:29:37    at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 1111\r\n04:29:37    at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Security/src/System/Net/FixedSizeReader.cs:line 72\r\n04:29:37    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n04:29:37    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n04:29:37    at System.Threading.ThreadPoolGlobals.<>c.<.cctor>b__6_0(Object state)\r\n04:29:37    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(Action`1 continuation, Object state, Boolean forceAsync) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs:line 1040\r\n04:29:37    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n04:29:37    at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n04:29:37 \r\n04:29:37 \r\nAssert failure(PID 33063 [0x00008127], Thread: 37956 [0x9444]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 \r\nAssert failure(PID 33063 [0x00008127], Thread: 37956 [0x9444]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 Assert failure(PID 33063 [0x00008127], Thread: 37389 [0x920d]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 Assert failure(PID 33063 [0x00008127], Thread: 37389 [0x920d]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 Assert failure(PID 33063 [0x00008127], Thread: 38054 [0x94a6]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 \r\n04:29:37 Assert failure(PID 33063 [0x00008127], Thread: 38054 [0x94a6]): g_fEEShutDown >= ShutDown_Finalize2 || !\"This should not be called unless we are in the last phase of shutdown!\"\r\n04:29:37     File: /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/src/vm/excep.cpp Line: 165\r\n04:29:37     Image: /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/testhost/netcoreapp-Linux-Release-arm64/dotnet\r\n04:29:37 \r\n04:29:37 ./RunTests.sh: line 127: 33063 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.dll System.Net.Http.Functional.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing\r\n04:29:37 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Net.Http.Functional.Tests/netcoreapp-Linux-Release-arm64\r\n04:29:37 ----- end 04:29:15 ----- exit code 134 ----------------------------------------------------------\r\n04:29:37 exit code 134 means SIGABRT Abort. Managed or native assert, or runtime check such as heap corruption, caused call to abort(). Core dumped.\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21427","RelatedDescription":"Open issue \"[Linux/arm64] System.Net.Http.Functional.Tests failure\" (#21427)"},{"Id":"388449429","IsPullRequest":true,"CreatedAt":"2018-12-07T00:00:27","Actor":"BruceForstall","Number":"21425","RawContent":null,"Title":"[WIP] test re-enable all Windows arm corefx testing","State":"open","Body":"See if any failures have gone away","Url":"https://github.com/dotnet/coreclr/pull/21425","RelatedDescription":"Open PR \"[WIP] test re-enable all Windows arm corefx testing\" (#21425)"},{"Id":"388444948","IsPullRequest":false,"CreatedAt":"2018-12-06T23:41:11","Actor":"tannergooding","Number":"21424","RawContent":null,"Title":"Investigate emitting `movq` for the `CreateScalarUnsafe` helper intrinsics that take a `long/ulong` on x86","State":"open","Body":"For the `CreateScalarUnsafe` helper intrinsics that take a `long/ulong`, it may be beneficial to emit the `movq xmm, [mem]` instruction on x86, rather than falling back to emulating the behavior in software.\r\n\r\nGiven that the input is a regular `long/ulong`, but on x86 the instruction requires the second operand come from memory, this may require some additional work to make happen or we may find it not worthwhile to do at all.","Url":"https://github.com/dotnet/coreclr/issues/21424","RelatedDescription":"Open issue \"Investigate emitting `movq` for the `CreateScalarUnsafe` helper intrinsics that take a `long/ulong` on x86\" (#21424)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"388965434","IsPullRequest":false,"CreatedAt":"2018-12-08T22:26:46","Actor":"taori","Number":"10454","RawContent":null,"Title":"CS0118 if folder name ends with \"Application\"","State":"open","Body":"## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10454","RelatedDescription":"Open issue \"CS0118 if folder name ends with \"Application\"\" (#10454)"},{"Id":"388823399","IsPullRequest":false,"CreatedAt":"2018-12-08T17:16:05","Actor":"dsplaisted","Number":"10450","RawContent":null,"Title":"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview","State":"closed","Body":"@pgolebiowski commented on [Mon Nov 26 2018](https://github.com/dotnet/core/issues/2075)\n\n## Steps to reproduce\r\n\r\n1. Go to the page with [daily builds of .NET Core 3.0](https://github.com/dotnet/core-sdk/blob/master/README.md#installers-and-binaries).\r\n2. Download the macOS installer for *Master (3.0.x Runtime)*.\r\n3. Install.\r\n4. Check `dotnet` version and info:\r\n\r\n```bash\r\n↪ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009784\r\n Commit:    d86a1816c4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009784/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [/usr/local/share/dotnet/sdk]\r\n  2.1.402 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009784 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18572-0018 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n5. Create a new console application:\r\n\r\n```bash\r\ndotnet new console -o Test\r\n```\r\n\r\nwhich by default contains:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n6. Hit `dotnet run`.\r\n\r\n## Error\r\n\r\n```\r\n↪ dotnet run\r\n/usr/local/share/dotnet/sdk/2.1.402/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [/Users/pgolebio/patryk/home/apps/hyperflow/src/Test/Test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Question\r\n\r\nHow to successfully run this console application? Why does it use 2.1.402 even though when asked for `dotnet --version`, it says `3.0.100-preview-009784`?\n\n---\n\n@karelz commented on [Tue Nov 27 2018](https://github.com/dotnet/core/issues/2075#issuecomment-442176157)\n\n@nguerrera @dsplaisted can you please help route this issue?\n\n---\n\n@pgolebiowski commented on [Fri Dec 07 2018](https://github.com/dotnet/core/issues/2075#issuecomment-445191533)\n\nHey guys, do you have an idea for how to proceed? @karelz @nguerrera @dsplaisted \n\n","Url":"https://github.com/dotnet/cli/issues/10450","RelatedDescription":"Closed issue \"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview\" (#10450)"},{"Id":"388920339","IsPullRequest":true,"CreatedAt":"2018-12-08T13:02:34","Actor":"dotnet-maestro[bot]","Number":"10453","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10453","RelatedDescription":"Open PR \"Update dependency files\" (#10453)"},{"Id":"388884055","IsPullRequest":false,"CreatedAt":"2018-12-08T04:26:44","Actor":"igormcoelho","Number":"10452","RawContent":null,"Title":"error MSB4018: System.InvalidOperationException: PE image does not have metadata.","State":"open","Body":"## Steps to reproduce\r\nFailure is happening when I try to `dotnet restore` a `.csproj` with the following packages (inside a docker container):\r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FluentAssertions\" Version=\"4.19.4\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\r\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Moq\" Version=\"4.7.63\" />\r\n    <PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit.Xunit2\" Version=\"1.3.10\" />\r\n  </ItemGroup>\r\n```\r\nIf I remove package `<PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />` the process goes correctly, so it must be something related to it.\r\n\r\n## Expected  behavior\r\n\r\nSome packages download normally, and it finishes with this error:\r\n`error MSB4018: System.InvalidOperationException: PE image does not have metadata.` (followed by many other errors.\r\nAnother error happens just before this one: `/usr/share/dotnet/sdk/2.1.200/Microsoft.Common.CurrentVersion.targets(2106,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly.`\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n(I tried with dotnet core 2.2, but the same happens)\r\n","Url":"https://github.com/dotnet/cli/issues/10452","RelatedDescription":"Open issue \"error MSB4018: System.InvalidOperationException: PE image does not have metadata.\" (#10452)"},{"Id":"388865869","IsPullRequest":false,"CreatedAt":"2018-12-08T00:55:20","Actor":"KirillOsenkov","Number":"10451","RawContent":null,"Title":"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder","State":"open","Body":"When running outside MSBuild folder there's a first-chance COMException in VSSettings.cs: Element not found (HRESULT 0x80070490).\r\n\r\nIt was introduced here:\r\nhttps://github.com/dotnet/cli/pull/9547\r\n\r\nwith the comment:\r\n```\r\nNeed try/catch around the interop here. Getting COMException when running an msbuild.exe outside of VS folder.\r\n```\r\n\r\nThis is certainly very low pri, but I'd still be curious if there's any way to work around this. Is this because Windows is looking to find the native .dll in the current directory or PATH, and doesn't find it? Wasn't there a trick to add the directory with the .dll to the PATH environment variable to solve this kind of issues?\r\n\r\nWould be nice to fix, but not very blocking or urgent.\r\n\r\nThanks.\r\n\r\nStack:\r\n```\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 41\tC#\r\n>\tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 25\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.DotNetMSBuildSdkResolver.DotNetMSBuildSdkResolver Line 38\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tmscorlib.dll!System.RuntimeType.CreateInstanceSlow Line 5430\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 193\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 134\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.SdkResolution.SdkResolverLoader.LoadResolvers Line 164\tC#\r\n```","Url":"https://github.com/dotnet/cli/issues/10451","RelatedDescription":"Open issue \"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder\" (#10451)"},{"Id":"388801696","IsPullRequest":true,"CreatedAt":"2018-12-07T21:25:41","Actor":"nguerrera","Number":"10449","RawContent":null,"Title":"Update roslyn","State":"closed","Body":"Matching dotnet/toolset#53 for 2.1.6xx\r\n","Url":"https://github.com/dotnet/cli/pull/10449","RelatedDescription":"Closed or merged PR \"Update roslyn\" (#10449)"},{"Id":"388646327","IsPullRequest":true,"CreatedAt":"2018-12-07T18:14:36","Actor":"dotnet-maestro[bot]","Number":"10447","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10447","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10447)"},{"Id":"388716372","IsPullRequest":false,"CreatedAt":"2018-12-07T17:30:45","Actor":"DoCode","Number":"10448","RawContent":null,"Title":"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100","State":"closed","Body":"## Steps to reproduce\r\n`dotnet restore project.proj`\r\n\r\n## Expected  behavior\r\nNuGet restore is successful.\r\n\r\n## Actual behavior\r\n```\r\nRetrying 'FindPackagesByIdAsyncCore' for source 'https://xxx.xxx.xxx/f/core-dev/api/v2/FindPackagesById()?id='xxx'&semVerLevel=2.0.0'.\r\nResponse status code does not indicate success: 401 (Unauthorized).\r\n```\r\n\r\nIt works with all version before 2.2.100!  \r\nAll other versions, also 3.x failed.","Url":"https://github.com/dotnet/cli/issues/10448","RelatedDescription":"Closed issue \"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100\" (#10448)"},{"Id":"388204756","IsPullRequest":true,"CreatedAt":"2018-12-07T00:44:03","Actor":"dotnet-maestro[bot]","Number":"10444","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10444","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10444)"},{"Id":"388418998","IsPullRequest":false,"CreatedAt":"2018-12-06T22:07:58","Actor":"wli3","Number":"10446","RawContent":null,"Title":"dotnet new tool-manifest will put dotnet-tools.json under .config folder","State":"open","Body":"Open this issue for feedback. We hope to use the convention of `.config` folder to avoid the clutter of config file under the repo root. Start from local tools manifest","Url":"https://github.com/dotnet/cli/issues/10446","RelatedDescription":"Open issue \"dotnet new tool-manifest will put dotnet-tools.json under .config folder\" (#10446)"},{"Id":"387533618","IsPullRequest":true,"CreatedAt":"2018-12-06T20:51:59","Actor":"dotnet-bot","Number":"10435","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10435","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10435)"},{"Id":"388384314","IsPullRequest":false,"CreatedAt":"2018-12-06T20:26:59","Actor":"aL3891","Number":"10445","RawContent":null,"Title":"Incorrect binding redirect in net471 project with .net core 3 sdk","State":"open","Body":"Hello friends,\r\n\r\nI'm having an odd issue with our existing projects that are targeting net 471. After installing the .net core 3 preview, binding redirects are generated differently, causing runtime exceptions. What's more, setting the sdk version in global.json does not seem to fix the issue, only uninstalling the v3 sdk does the trick. (this seems very strange to me btw, almost to the point that i think i've done something wrong)\r\n\r\nOne webapp that is using signalR on full framework produces this .config snippet without .net core 3 sdk\r\n\r\n```\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Owin.Security\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-11.0.0.0\" newVersion=\"11.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n```\r\n\r\nand with the .net 3 sdk installed (exact same source):\r\n\r\n```\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-10.0.0.0\" newVersion=\"10.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Owin\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-2.1.0.0\" newVersion=\"2.1.0.0\" />\r\n      </dependentAssembly>\r\n```\r\n\r\ni can supply binlog files if it would be helpful but our solution is fairly large so i might have to send them directly to someone\r\n\r\nI was just wondering if anyone else has seen something like this. if i set the binding redirects manually to the correct versions everything works, it's just the auto generated ones that seem fail. These project uses the new format.","Url":"https://github.com/dotnet/cli/issues/10445","RelatedDescription":"Open issue \"Incorrect binding redirect in net471 project with .net core 3 sdk\" (#10445)"},{"Id":"387275861","IsPullRequest":true,"CreatedAt":"2018-12-06T00:42:57","Actor":"dotnet-maestro[bot]","Number":"10429","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18603.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18603.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10429","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10429)"},{"Id":"387078012","IsPullRequest":true,"CreatedAt":"2018-12-05T23:34:07","Actor":"wli3","Number":"10426","RawContent":null,"Title":"dotnet tool list --local","State":"closed","Body":"There are several renames, please review by commit.\r\n\r\n```\r\n17:21 $ dotnet tool list\r\nPackage Id            Version      Commands             Manifest\r\n----------------------------------------------------------------------------------------------------------------------\r\ndotnet-dbinfo         1.3.1        dotnet-dbinfo        /Users/williamli/Documents/temp/temp/sub/dotnet-tools.json\r\ndotnet-depends        0.2.0        dotnet-depends       /Users/williamli/Documents/temp/temp/sub/dotnet-tools.json\r\namazon.ecs.tools      3.0.0        dotnet-ecs           /Users/williamli/Documents/temp/temp/sub/dotnet-tools.json\r\ndotnet-encrypto       1.0.5        dotnet-encrypto      /Users/williamli/Documents/temp/temp/sub/dotnet-tools.json\r\nt-rex                 1.0.53       t-rex                /Users/williamli/Documents/temp/temp/.config/dotnet-tools.json\r\n```","Url":"https://github.com/dotnet/cli/pull/10426","RelatedDescription":"Closed or merged PR \"dotnet tool list --local\" (#10426)"},{"Id":"387878638","IsPullRequest":true,"CreatedAt":"2018-12-05T23:02:07","Actor":"livarcocc","Number":"10441","RawContent":null,"Title":"Update SDK to 2.2.101-preview3-63605-02","State":"closed","Body":"Contains a matching nuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10441","RelatedDescription":"Closed or merged PR \"Update SDK to 2.2.101-preview3-63605-02\" (#10441)"},{"Id":"387968555","IsPullRequest":true,"CreatedAt":"2018-12-05T22:11:17","Actor":"rainersigwald","Number":"10443","RawContent":null,"Title":"MSBuild 16.0.256-preview","State":"open","Body":"This version of MSBuild is in VS `lab/d16.0stg` at the moment.","Url":"https://github.com/dotnet/cli/pull/10443","RelatedDescription":"Open PR \"MSBuild 16.0.256-preview\" (#10443)"},{"Id":"387752546","IsPullRequest":true,"CreatedAt":"2018-12-05T21:47:26","Actor":"singhsarab","Number":"10439","RawContent":null,"Title":"TestPlatform insertion 16.0.0-preview-20181205-02","State":"closed","Body":"Release : https://github.com/Microsoft/vstest/releases/tag/v16.0.0-preview-20181205-02\r\n","Url":"https://github.com/dotnet/cli/pull/10439","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.0.0-preview-20181205-02\" (#10439)"},{"Id":"387611038","IsPullRequest":true,"CreatedAt":"2018-12-05T18:56:34","Actor":"livarcocc","Number":"10437","RawContent":null,"Title":"Update SDK to 2.1.501-preview-63605-01","State":"closed","Body":"This SDK version contains a matching NuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10437","RelatedDescription":"Closed or merged PR \"Update SDK to 2.1.501-preview-63605-01\" (#10437)"},{"Id":"387879538","IsPullRequest":false,"CreatedAt":"2018-12-05T18:06:51","Actor":"livarcocc","Number":"10442","RawContent":null,"Title":"Use flattened runtime packs","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10442","RelatedDescription":"Open issue \"Use flattened runtime packs\" (#10442)"},{"Id":"387877676","IsPullRequest":false,"CreatedAt":"2018-12-05T18:01:32","Actor":"livarcocc","Number":"10440","RawContent":null,"Title":"Switching to using Download only packages to acquire runtime packs","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10440","RelatedDescription":"Open issue \"Switching to using Download only packages to acquire runtime packs\" (#10440)"},{"Id":"387725033","IsPullRequest":true,"CreatedAt":"2018-12-05T12:01:18","Actor":"dotnet-bot","Number":"10438","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10438","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10438)"},{"Id":"387537734","IsPullRequest":true,"CreatedAt":"2018-12-05T05:09:24","Actor":"dsplaisted","Number":"10436","RawContent":null,"Title":"Remove test for scenario which is better covered elsewhere","State":"closed","Body":"The GivenFrameworkDependentApps and GivenSelfContainedAppsRollForward tests do a better job of covering this scenario","Url":"https://github.com/dotnet/cli/pull/10436","RelatedDescription":"Closed or merged PR \"Remove test for scenario which is better covered elsewhere\" (#10436)"},{"Id":"387434122","IsPullRequest":true,"CreatedAt":"2018-12-05T00:19:09","Actor":"nugetlurker","Number":"10434","RawContent":null,"Title":"Insert NuGet Build 4.9.2-rtm.5706 into cli","State":"closed","Body":"Insert NuGet Build 4.9.2-rtm.5706 into cli release/2.1.502 branch","Url":"https://github.com/dotnet/cli/pull/10434","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.2-rtm.5706 into cli\" (#10434)"},{"Id":"387405736","IsPullRequest":true,"CreatedAt":"2018-12-05T00:18:27","Actor":"livarcocc","Number":"10430","RawContent":null,"Title":"Updating branding to 2.1.502.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10430","RelatedDescription":"Closed or merged PR \"Updating branding to 2.1.502.\" (#10430)"},{"Id":"387434019","IsPullRequest":true,"CreatedAt":"2018-12-05T00:18:14","Actor":"nugetlurker","Number":"10433","RawContent":null,"Title":"Insert NuGet Build 4.9.2-rtm.5706 into cli","State":"closed","Body":"Insert NuGet Build 4.9.2-rtm.5706 into cli release/2.2.1xx branch","Url":"https://github.com/dotnet/cli/pull/10433","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.2-rtm.5706 into cli\" (#10433)"},{"Id":"387406206","IsPullRequest":true,"CreatedAt":"2018-12-04T22:46:34","Actor":"livarcocc","Number":"10431","RawContent":null,"Title":"Updating branding to 2.1.503","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10431","RelatedDescription":"Closed or merged PR \"Updating branding to 2.1.503\" (#10431)"},{"Id":"387424012","IsPullRequest":false,"CreatedAt":"2018-12-04T18:35:30","Actor":"svick","Number":"10432","RawContent":null,"Title":"dotnet tool run is too verbose","State":"open","Body":"One of the most common operations with tools is to run them from the command line, so I think it's important that the experience of doing that is good. Global tools are run as either `mytool` or `dotnet mytool` and I think both are fine. But the new local tools require `dotnet tool run mytool` and I think that's way too verbose, since it's about twice as many words than necessary.\r\n\r\nIt's also inconsistent with global tools. And even if full consistency by supporting `mytool` for local tools is not possible, I think at least `dotnet mytool` should work.\r\n\r\nAlso, I think it would be nice if running `dotnet tool restore` before running the tool was not necessary. I don't have to run `dotnet restore` or `dotnet build` before `dotnet run`, and this should be no different.","Url":"https://github.com/dotnet/cli/issues/10432","RelatedDescription":"Open issue \"dotnet tool run is too verbose\" (#10432)"},{"Id":"387149072","IsPullRequest":false,"CreatedAt":"2018-12-04T07:10:09","Actor":"mairaw","Number":"10428","RawContent":null,"Title":"dotnet list reference help text and output","State":"open","Body":"## Steps to reproduce\r\n1. `dotnet list reference --help`\r\n2. `dotnet list reference solution-name.sln`\r\n3. `dotnet list reference` on a folder that contains a project with no P2P references\r\n\r\n## Expected  behavior\r\n1. It seems that dotnet list reference doesn't accept solution files as a parameter but its description was changed in 2.2 SDK to say it supports solution files. I'd expect that `dotnet list reference --help` wouldn't say that is either a project or solution if solution files aren't supported.\r\n2. I'm assuming this shouldn't work by design. So, fixing the help text would avoid confusions. Or if it's supposed to be supported, then it should list the P2P references from the solution.\r\n3. For a project that has no P2P references, I'd expect a cleaner output, such as:\r\n`There are no project-to-project references in project C:\\Users\\mairaw\\Documents\\GitHub\\samples\\core\\getting-started\\unit-testing-using-nunit\\PrimeService\\.`\r\n\r\n## Actual behavior\r\n1. `dotnet list reference --help` tells me I can provide a project or solution in .NET Core 2.2 SDK\r\n2. `dotnet list reference solution-name.sln` doesn't work\r\n3. For a project that has no P2P references, the output is a bit garbled. For example:\r\n`There are no Project to Project references in project C:\\Users\\mairaw\\Documents\\GitHub\\samples\\core\\getting-started\\unit-testing-using-nunit\\PrimeService\\. ;; Project to Project is the type of the item being requested (project, package, p2p) and C:\\Users\\mairaw\\Documents\\GitHub\\samples\\core\\getting-started\\unit-testing-using-nunit\\PrimeService\\ is the object operated on (a project file or a solution file).`\r\n\r\n## Environment data\r\n`dotnet --info` output\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10428","RelatedDescription":"Open issue \"dotnet list reference help text and output\" (#10428)"},{"Id":"387098127","IsPullRequest":false,"CreatedAt":"2018-12-04T02:59:38","Actor":"MiYanni","Number":"10427","RawContent":null,"Title":"dotnet sln add: Support flag to disable solution folder creation","State":"open","Body":"## Steps to reproduce\r\nUse `dotnet sln add` to add a project to an existing solution file.\r\n\r\n## Expected  behavior\r\nUsing `dotnet sln add` and providing an additional flag, such as `--no-solution-folders`, you'd add a project to the solution at the root of the solution. This action would not create any solution folders.\r\n\r\n## Actual behavior\r\nThere is no `--no-solution-folders` flag. You cannot suppress the creation of solution folders when using `dotnet sln add`.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10427","RelatedDescription":"Open issue \"dotnet sln add: Support flag to disable solution folder creation\" (#10427)"},{"Id":"386995125","IsPullRequest":false,"CreatedAt":"2018-12-03T21:21:29","Actor":"mairaw","Number":"10425","RawContent":null,"Title":"dotnet new nunit in 2.2 creates a template with a 2.1 project","State":"closed","Body":"## Steps to reproduce\r\ndotnet new nunit\r\n\r\n## Expected  behavior\r\nThe template would contain a netcore2.2 project with Microsoft.NET.Test.Sdk version 15.9 similar to the one created when you do dotnet new xunit.\r\n\r\n## Actual behavior\r\n2.1 project is created\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"nunit\" Version=\"3.10.1\" />\r\n    <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.10.0\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.8.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview3-008443 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26404-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10425","RelatedDescription":"Closed issue \"dotnet new nunit in 2.2 creates a template with a 2.1 project\" (#10425)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"388920215","IsPullRequest":true,"CreatedAt":"2018-12-08T13:10:58","Actor":"dotnet-maestro[bot]","Number":"1005","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1005)"},{"Id":"388645771","IsPullRequest":true,"CreatedAt":"2018-12-07T13:16:15","Actor":"dotnet-maestro[bot]","Number":"1004","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1004)"},{"Id":"388551526","IsPullRequest":false,"CreatedAt":"2018-12-07T08:26:51","Actor":"he-dev","Number":"1003","RawContent":null,"Title":"Documentation still not up-to-date","State":"open","Body":"I'd be great if you could keep the documentation up-to-date. Currently the only place where you can find anything about these two _super-secret_ elements:\r\n\r\n- `AppendTargetFrameworkToOutputPath`\r\n- `AppendRuntimeIdentifierToOutputPath `\r\n\r\nis this [comment](https://github.com/dotnet/standard/issues/512#issuecomment-332291043). Are there any more _hidden_ settings? \r\n\r\nDo you think you could improve this and maybe also add other _unofficial_ yet fully supported settings (if there are any)?","Url":"https://github.com/dotnet/standard/issues/1003","RelatedDescription":"Open issue \"Documentation still not up-to-date\" (#1003)"},{"Id":"388402668","IsPullRequest":true,"CreatedAt":"2018-12-06T22:17:23","Actor":"wtgodbe","Number":"1002","RawContent":null,"Title":"Move build output from `bin` to `artifacts`","State":"closed","Body":"This allows Arcade to take over in deciding where we output our build artifacts, so we no longer have everything going into the `bin` dir. I don't believe there's anywhere else that explicitly depends on Standard's `bin` dir, but please let me know if you think I'm missing anything.\r\n\r\n@ericstj @ViktorHofer @weshaggard PTAL\r\n\r\n@danmosemsft CC","Url":"https://github.com/dotnet/standard/pull/1002","RelatedDescription":"Closed or merged PR \"Move build output from `bin` to `artifacts`\" (#1002)"},{"Id":"388373169","IsPullRequest":true,"CreatedAt":"2018-12-06T20:04:55","Actor":"ericstj","Number":"1001","RawContent":null,"Title":"Remove Trimming package from dotnet/standard","State":"closed","Body":"Fixes: https://github.com/dotnet/standard/issues/788\r\n\r\nThose looking for an officially supported trimming tool should try:\r\nhttps://github.com/dotnet/core/blob/master/samples/linker-instructions.md\r\n\r\nThe assembly level linker has moved to:\r\nhttps://github.com/ericstj/Microsoft.Packaging.Tools.Trimming","Url":"https://github.com/dotnet/standard/pull/1001","RelatedDescription":"Closed or merged PR \"Remove Trimming package from dotnet/standard\" (#1001)"},{"Id":"386996248","IsPullRequest":true,"CreatedAt":"2018-12-06T18:57:40","Actor":"wtgodbe","Number":"991","RawContent":null,"Title":"Dummy commit to trigger CI - don't merge","State":"closed","Body":"Attempting to trigger CI again, please don't merge","Url":"https://github.com/dotnet/standard/pull/991","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI - don't merge\" (#991)"},{"Id":"388204009","IsPullRequest":true,"CreatedAt":"2018-12-06T13:11:37","Actor":"dotnet-maestro[bot]","Number":"1000","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1000","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1000)"},{"Id":"388028724","IsPullRequest":true,"CreatedAt":"2018-12-06T02:23:11","Actor":"terrajobst","Number":"999","RawContent":null,"Title":"Sync .NET Standard's RefEmit with .NET Framework","State":"open","Body":"Fixes #987\r\n\r\nThe point of the sync is to get increase parity with .NET Framework and thus making it easier to port more existing code to .NET Standard 2.1 (or any platform implementing it).","Url":"https://github.com/dotnet/standard/pull/999","RelatedDescription":"Open PR \"Sync .NET Standard's RefEmit with .NET Framework\" (#999)"},{"Id":"387555933","IsPullRequest":true,"CreatedAt":"2018-12-06T02:14:39","Actor":"terrajobst","Number":"996","RawContent":null,"Title":"List excluded reflection emit APIs","State":"closed","Body":"I did a diff between `System.Reflection.Emit` in .NET Framework and .NET Standard to make sure the APIs we explicitly didn't bring to .NET Standard are listed here. This adds no APIs to .NET Standard, just comments to the source code of the reference assembly.\r\n\r\nI assume the @dotnet/nsboard has no problems with that as it's just book keeping for folks like me. Unless there is push back, I'm going to merge this tomorrow.\r\n\r\n**Update:** I forgot to mention that I plan to add another PR with the APIs we plan to add .NET Standard.","Url":"https://github.com/dotnet/standard/pull/996","RelatedDescription":"Closed or merged PR \"List excluded reflection emit APIs\" (#996)"},{"Id":"387902379","IsPullRequest":true,"CreatedAt":"2018-12-05T20:00:00","Actor":"wtgodbe","Number":"998","RawContent":null,"Title":"Change yml name to azure-pipelines.yml","State":"closed","Body":"In response to https://github.com/dotnet/arcade/issues/690#issuecomment-444562580\r\n\r\nChanges name of our pipeline file to the standard `azure-pipelines.yml`. I'll also update the build defs to reflect this change.\r\n\r\nCC @chcosta ","Url":"https://github.com/dotnet/standard/pull/998","RelatedDescription":"Closed or merged PR \"Change yml name to azure-pipelines.yml\" (#998)"},{"Id":"387746721","IsPullRequest":true,"CreatedAt":"2018-12-05T18:59:29","Actor":"dotnet-maestro[bot]","Number":"997","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18604.15\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/997","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#997)"},{"Id":"387484691","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:23","Actor":"wtgodbe","Number":"995","RawContent":null,"Title":"Output packages into Artifacts dir","State":"closed","Body":"This outputs packages into `ArtifactsPackagesDir`, so that Arcade can easily find them for signing & publishing (with this, we no longer need a custom `Signing.props` to specify where our packages live).\r\n\r\n@chcosta @ericstj PTAL\r\n\r\nShould fix the build error in https://dnceng.visualstudio.com/internal/_build/results?buildId=52052","Url":"https://github.com/dotnet/standard/pull/995","RelatedDescription":"Closed or merged PR \"Output packages into Artifacts dir\" (#995)"},{"Id":"387041262","IsPullRequest":true,"CreatedAt":"2018-12-04T18:10:15","Actor":"wtgodbe","Number":"993","RawContent":null,"Title":"Don't reference FeedTasksPackage","State":"closed","Body":"Arcade already restores this package when trying to publish: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Tools.proj#L49\r\n\r\nSince the default version in arcade is currently `2.2-xxx` (https://github.com/dotnet/arcade/blob/069237d9a7e83bed62c9f664228125b95ddf91f6/src/Microsoft.DotNet.Arcade.Sdk/tools/DefaultVersions.props#L71), the build would fail when trying to import files from that package, since only the 3.0.0 version was getting restored: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L30\r\n\r\nCC @safern you'll want to make a similar change in CoreFx if you plan on doing Arcade publishing\r\n\r\n@chcosta PTAL","Url":"https://github.com/dotnet/standard/pull/993","RelatedDescription":"Closed or merged PR \"Don't reference FeedTasksPackage\" (#993)"},{"Id":"387274996","IsPullRequest":true,"CreatedAt":"2018-12-04T13:16:29","Actor":"dotnet-maestro[bot]","Number":"994","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18603.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/994","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#994)"},{"Id":"387011624","IsPullRequest":true,"CreatedAt":"2018-12-03T21:47:39","Actor":"wtgodbe","Number":"992","RawContent":null,"Title":"Fix _SignType, Variable Groups in pipebuild","State":"closed","Body":"This PR makes it so that we only access secrets in internal builds, and passes _SignType to the Windows builds.\r\n\r\n@chcosta PTAL","Url":"https://github.com/dotnet/standard/pull/992","RelatedDescription":"Closed or merged PR \"Fix _SignType, Variable Groups in pipebuild\" (#992)"},{"Id":"386963305","IsPullRequest":true,"CreatedAt":"2018-12-03T20:38:05","Actor":"wtgodbe","Number":"990","RawContent":null,"Title":"Dummy commit to test new CI - DO NOT MERGE","State":"closed","Body":"Testing to see if the new dnceng CI will trigger on this PR, and if it works. Please don't merge this.","Url":"https://github.com/dotnet/standard/pull/990","RelatedDescription":"Closed or merged PR \"Dummy commit to test new CI - DO NOT MERGE\" (#990)"},{"Id":"385881132","IsPullRequest":true,"CreatedAt":"2018-12-03T19:07:06","Actor":"wtgodbe","Number":"986","RawContent":null,"Title":"Convert Standard's CI/Pipebuild to YAML","State":"closed","Body":"This will allow us to move Standard's CI & pipebuild into DNCENG. I already have https://dnceng.visualstudio.com/internal/_build?definitionId=246&_a=summary & https://dnceng.visualstudio.com/public/_build?definitionId=235&_a=summary for the internal & public builds, respectively, which I'll have to point at `master` instead of my testing branch once this is merged. I'll also have to remove the triggers (and maybe delete?) the VSTS Standard pipebuild.\r\n\r\n@chcosta @riarenas @safern PTAL\r\n\r\nCC @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/986","RelatedDescription":"Closed or merged PR \"Convert Standard's CI/Pipebuild to YAML\" (#986)"},{"Id":"386456347","IsPullRequest":true,"CreatedAt":"2018-12-01T13:11:15","Actor":"dotnet-maestro[bot]","Number":"989","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18580.13\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18580.13\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18580.13\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18580.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/989","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#989)"},{"Id":"386178352","IsPullRequest":true,"CreatedAt":"2018-11-30T13:16:26","Actor":"dotnet-maestro[bot]","Number":"988","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18579.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18579.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18579.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18579.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/988","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#988)"},{"Id":"386016375","IsPullRequest":false,"CreatedAt":"2018-11-30T02:55:16","Actor":"terrajobst","Number":"987","RawContent":null,"Title":"System.Reflection.*: we should review differences with .NET Framework","State":"open","Body":"Reflection and Reflection.Emit were heavily subset; we should make sure that we're adding all the APIs back, unless they cause bad dependencies (such as CAS) or not supported on any platform (such as Reflection.Emit persistence).","Url":"https://github.com/dotnet/standard/issues/987","RelatedDescription":"Open issue \"System.Reflection.*: we should review differences with .NET Framework\" (#987)"},{"Id":"385725689","IsPullRequest":true,"CreatedAt":"2018-11-29T13:16:34","Actor":"dotnet-maestro[bot]","Number":"985","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18578.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18578.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18578.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18578.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/985","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#985)"},{"Id":"385257703","IsPullRequest":true,"CreatedAt":"2018-11-28T13:11:41","Actor":"dotnet-maestro[bot]","Number":"984","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18577.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/984","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#984)"},{"Id":"384784248","IsPullRequest":true,"CreatedAt":"2018-11-28T13:01:05","Actor":"dotnet-maestro[bot]","Number":"983","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18576.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/983","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#983)"},{"Id":"384320442","IsPullRequest":true,"CreatedAt":"2018-11-26T13:16:39","Actor":"dotnet-maestro[bot]","Number":"982","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18575.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/982","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#982)"},{"Id":"382463251","IsPullRequest":false,"CreatedAt":"2018-11-24T23:17:50","Actor":"verb0se","Number":"976","RawContent":null,"Title":"Could not load file or assembly System.Configuration.ConfigurationManager","State":"closed","Body":"Upgrading some .NET Framework projects to Standard 2.0, I've installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet on all projects.  Getting the following error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n  \r\nJust to see if the issue might have been due to something with the current solution, I created a new Standard 2.0 console app, installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet as the only dependency, and got the same error.\r\n\r\nFrom the deps.json file:\r\n\r\n\"System.Configuration.ConfigurationManager/4.5.0\": {\r\n        \"dependencies\": {\r\n          \"System.Security.Cryptography.ProtectedData\": \"4.5.0\",\r\n          \"System.Security.Permissions\": \"4.5.0\"\r\n        },\r\n        \"runtime\": {\r\n          \"lib/netstandard2.0/System.Configuration.ConfigurationManager.dll\": {\r\n            \"assemblyVersion\": \"4.0.1.0\",\r\n            \"fileVersion\": \"4.6.26515.6\"\r\n          }\r\n        }\r\n      }\r\n\r\nWe would like to use System.Configuration.ConfigurationManager with our upgrade but I can't seem to load it from a project \r\n","Url":"https://github.com/dotnet/standard/issues/976","RelatedDescription":"Closed issue \"Could not load file or assembly System.Configuration.ConfigurationManager\" (#976)"},{"Id":"383526186","IsPullRequest":true,"CreatedAt":"2018-11-22T13:11:28","Actor":"dotnet-maestro[bot]","Number":"980","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18571.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/980","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#980)"},{"Id":"382877179","IsPullRequest":true,"CreatedAt":"2018-11-21T17:57:15","Actor":"wtgodbe","Number":"978","RawContent":null,"Title":"Make sure Signing target finds packages to sign","State":"closed","Body":"This will fix a build error where we can't find any packages to sign. The problem was caused by me moving the `PackageOutputPath` property from `Directory.Build.props` to `Directory.Build.targets`, which was a workaround to allow us to continue outputting packages to the bin dir while using Arcade's packaging tasks. Once we're outputting packages to `artifacts`, we can revert this PR.\r\n\r\nCC @danmosemsft @JohnTortugo","Url":"https://github.com/dotnet/standard/pull/978","RelatedDescription":"Closed or merged PR \"Make sure Signing target finds packages to sign\" (#978)"},{"Id":"383107897","IsPullRequest":true,"CreatedAt":"2018-11-21T13:11:28","Actor":"dotnet-maestro[bot]","Number":"979","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18570.17\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/979","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#979)"},{"Id":"382653062","IsPullRequest":true,"CreatedAt":"2018-11-20T13:11:36","Actor":"dotnet-maestro[bot]","Number":"977","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18569.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/977","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#977)"},{"Id":"382204388","IsPullRequest":true,"CreatedAt":"2018-11-19T13:11:31","Actor":"dotnet-maestro[bot]","Number":"975","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18568.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/975","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#975)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"388857225","IsPullRequest":true,"CreatedAt":"2018-12-09T05:01:58","Actor":"ViktorHofer","Number":"33920","RawContent":null,"Title":"Update CoreFxTesting arcade package","State":"closed","Body":"Fixes reportgenerator crashes","Url":"https://github.com/dotnet/corefx/pull/33920","RelatedDescription":"Closed or merged PR \"Update CoreFxTesting arcade package\" (#33920)"},{"Id":"388957109","IsPullRequest":false,"CreatedAt":"2018-12-09T04:51:11","Actor":"IvaYan","Number":"33931","RawContent":null,"Title":"Resources (.resx) give null instead of a string","State":"closed","Body":"I'm trying to use Resources (.resx) in my .Net Core **console** app, but for some reason I'm not able to get string from a resource, instead, I'm always getting null. Here is example code that reproduce the issue:\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(Resources.Message);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd here is the content of the Resources.resx file:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<root>\r\n    <xsd:schema id=\"root\" xmlns=\"\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">\r\n        <xsd:element name=\"root\" msdata:IsDataSet=\"true\">\r\n            <data name=\"Message\">\r\n                <value>Hello world!</value>\r\n            </data>\r\n        </xsd:element>\r\n    </xsd:schema>\r\n    <resheader name=\"resmimetype\">\r\n        <value>text/microsoft-resx</value>\r\n    </resheader>\r\n    <resheader name=\"version\">\r\n        <value>1.3</value>\r\n    </resheader>\r\n    <resheader name=\"reader\">\r\n        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n    </resheader>\r\n    <resheader name=\"writer\">\r\n        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n    </resheader>\r\n</root>\r\n```\r\n\r\nI'm using Mac and dotnet core 2.2.100 (seems to be the latest version). Adding Microsoft.Extensions.Localization didn't help.\r\n","Url":"https://github.com/dotnet/corefx/issues/33931","RelatedDescription":"Closed issue \"Resources (.resx) give null instead of a string\" (#33931)"},{"Id":"388957548","IsPullRequest":true,"CreatedAt":"2018-12-09T00:52:58","Actor":"Dotnet-GitSync-Bot","Number":"33932","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corefx/pull/33932","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#33932)"},{"Id":"388966413","IsPullRequest":true,"CreatedAt":"2018-12-08T22:40:43","Actor":"NattyNarwhal","Number":"33935","RawContent":null,"Title":"Fix readdir_r on AIX","State":"open","Body":"The return values are.... very weird, and not like any other\r\nplatform; see the manpage. (I hope you like the number 9.)","Url":"https://github.com/dotnet/corefx/pull/33935","RelatedDescription":"Open PR \"Fix readdir_r on AIX\" (#33935)"},{"Id":"388966399","IsPullRequest":false,"CreatedAt":"2018-12-08T22:40:37","Actor":"AraHaan","Number":"33934","RawContent":null,"Title":"Fix suppressed documentation errors.","State":"open","Body":"On my Pull request \r\nhttps://github.com/dotnet/corefx/pull/32934 I suppressed a lot of xml documentation errors including errors for paramiters in the documentations that is not in the method, missing xml documentations for other methods, etc.\r\n\r\nAlso in Microsoft.VisualBaisic I disabled it because for some reason it wants to write it to \"$(OutputPath)$(OutputPath)$(ProjectName)\" which makes Windows builds fail.\r\n\r\nOn System.Diagnostics.Process It seems to make the all build config job and the OSX one fail so those errors need fixed as well before reenabling documentation for that too. ","Url":"https://github.com/dotnet/corefx/issues/33934","RelatedDescription":"Open issue \"Fix suppressed documentation errors.\" (#33934)"},{"Id":"388963646","IsPullRequest":true,"CreatedAt":"2018-12-08T22:02:23","Actor":"Marusyk","Number":"33933","RawContent":null,"Title":"Refactoring interop-related constants and shared files to follow the coding conventions","State":"open","Body":"Made changes base on this [comment](https://github.com/dotnet/corefx/pull/33835#issuecomment-445430688)\r\n\r\nThank you @jkotas\r\n\r\nPlease review","Url":"https://github.com/dotnet/corefx/pull/33933","RelatedDescription":"Open PR \"Refactoring interop-related constants and shared files to follow the coding conventions\" (#33933)"},{"Id":"388922845","IsPullRequest":true,"CreatedAt":"2018-12-08T18:49:41","Actor":"jkotas","Number":"33928","RawContent":null,"Title":"Expose RuntimeFeature.IsDynamicCodeSupported/Compiled","State":"closed","Body":"Fixes #29258","Url":"https://github.com/dotnet/corefx/pull/33928","RelatedDescription":"Closed or merged PR \"Expose RuntimeFeature.IsDynamicCodeSupported/Compiled\" (#33928)"},{"Id":"388923843","IsPullRequest":true,"CreatedAt":"2018-12-08T18:48:52","Actor":"jkotas","Number":"33929","RawContent":null,"Title":"Delete TargetFrameworkMonikers.NetcoreCoreRT","State":"closed","Body":"CoreRT was never meant to be a target framework","Url":"https://github.com/dotnet/corefx/pull/33929","RelatedDescription":"Closed or merged PR \"Delete TargetFrameworkMonikers.NetcoreCoreRT\" (#33929)"},{"Id":"388946113","IsPullRequest":false,"CreatedAt":"2018-12-08T18:21:03","Actor":"Wraith2","Number":"33930","RawContent":null,"Title":"SqlClient ManualTest MARSSyncTimeoutTest fails in managed mode","State":"open","Body":"When using the managed sni implementation in SqlClient the MARS related test MARSSyncTimeoutTest fails with an assertion in debug mode. This may not cause a problem in release builds because there are sufficient checks in the method body to prevent errors occurring or bubbling up to the user. I suspect that the assertion is incorrect but it needs scrutiny from someone more familiar with the library.\r\n\r\nTo reproduce on windows. Checkout master, change [UseManagedSNI](https://github.com/dotnet/corefx/blob/d4b014c7483789d3832d3c15fb3741e2cc5306b1/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObjectFactory.Windows.cs#L22) to true. Build and run manual tests, or run the specific named test If you know the commandline incantation required.\r\n\r\n```\r\n  Assertion Failed\r\n  AsyncResult null on callback\r\n\r\n     at System.Data.SqlClient.TdsParserStateObject.ReadAsyncCallback[T](IntPtr key, T packet, UInt32 error) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 2736\r\n     at System.Data.SqlClient.TdsParserStateObject.ReadAsyncCallback[T](T packet, UInt32 error) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 2688\r\n     at System.Data.SqlClient.SNI.SNIMarsHandle.HandleReceiveError(SNIPacket packet) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SNI\\SNIMarsHandle.cs:line 321\r\n     at System.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveError(SNIPacket packet) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SNI\\SNIMarsConnection.cs:line 136\r\n     at System.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveComplete(SNIPacket packet, UInt32 sniErrorCode) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SNI\\SNIMarsConnection.cs:line 165\r\n     at System.Data.SqlClient.SNI.SNIPacket.<>c__DisplayClass32_0.<ReadFromStreamAsync>b__0(Task`1 t) in E:\\Programming\\csharp7\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SNI\\SNIPacket.cs:line 276\r\n     at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in E:\\A\\_work\\104\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 321\r\n     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in E:\\A\\_work\\104\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\Tasks\\Task.cs:line 2448\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\\A\\_work\\104\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\ThreadPool.cs:line 621\r\n    Finished:    System.Data.SqlClient.ManualTesting.Tests\r\n```\r\n\r\nIt is happens when the socket for the connection is closed by the timeout in the test, in this case there is no data array in the `SNIPacket` and that means that the [assertion](https://github.com/dotnet/corefx/blob/d4b014c7483789d3832d3c15fb3741e2cc5306b1/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs#L2722) on [managed CheckPacket](https://github.com/dotnet/corefx/blob/d4b014c7483789d3832d3c15fb3741e2cc5306b1/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObjectManaged.cs#L38)  returns false indicating the packet is invalid by asking the packet if it's invalid, which checks the data. The [native CheckPacket](https://github.com/dotnet/corefx/blob/d4b014c7483789d3832d3c15fb3741e2cc5306b1/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObjectNative.cs#L102) doesn't check the contents of the packet, only that it is a pointer to a valid packet structure which is a slightly different check to the managed version, the managed version requires that the packet be non-null and that it contain a valid array which is the cause of the problem.\r\n\r\n/cc @AfsanehR @saurabh500 @keeratsingh ","Url":"https://github.com/dotnet/corefx/issues/33930","RelatedDescription":"Open issue \"SqlClient ManualTest MARSSyncTimeoutTest fails in managed mode\" (#33930)"},{"Id":"388885668","IsPullRequest":true,"CreatedAt":"2018-12-08T14:44:04","Actor":"Dotnet-GitSync-Bot","Number":"33926","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/33926","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#33926)"},{"Id":"388894879","IsPullRequest":false,"CreatedAt":"2018-12-08T07:04:57","Actor":"kg","Number":"33927","RawContent":null,"Title":"Proposal: ref-argument version of IComparer and/or Comparison","State":"open","Body":"For scenarios where you want to sort an array or list of structs, the overhead of pass-by-value for IComparer/Comparison can become quite significant, especially if the structs are large. In my experience it's difficult to ensure all the comparisons get inlined by the runtime (though I'm sure there's always room for improvement there) - the ideal solution (and one I've implemented by hand) is to define an alternative IRefComparer<T> interface that takes (ref T lhs, ref T rhs) instead of (T lhs, T rhs). It's very easy to define an adapter to go between IComparer and IRefComparer when necessary (in my case my sorter uses IRefComparer with an adapter that passes the ref'd arguments directly to an IComparer, when needed).\r\n\r\nFor my main test scenario (sorting a large number of draw calls / batches before sending them to the GPU), switching from IComparer to IRefComparer (using my customized version of the BCL sort routine) drops total CPU usage for the render prepare in my profiles from 10% to 7% - so I saved 3% off of my total CPU usage just by going from by-value (which generates lots of pushes and pops for the draw call structs) to by-ref.\r\n\r\nThe existing overloads that take a keys+values pair of arrays and sort the keys are a partial solution here, because the sorting operation doesn't have to swap the (huge) values around when sorting - but the values are still passed to the comparator by-value, so you get at least two copies per comparison. It adds up.\r\n\r\nMy basic proposal here is that a new optional interface is introduced - IRefComparer<T> or IComparerRef<T> - and a basic implementation of it is provided for all the BCL types that have an IComparer available. This might mean IComparableRef would also need to be introduced, I'm not quite sure how all the default types fit together in the BCL? From my perspective only IComparer needs it since that is the type used by most list/array sort primitives. Then with the interface introduced, I'd probably just suggest adding overloads to Array.Sort and List.Sort, with those being the two main APIs people would need to sort through (other than LINQ, I suppose?)\r\n\r\nOne problem with this proposal I don't know how to solve is that you could end up with overload ambiguity between IComparer and IRefComparer (or between IComparable and IRefComparable, if those exist). I think the only solution there would be to require the Ref version of the interface to inherit the non-Ref version, so that it's possible to use the ref version as the preferred type and just pass it to APIs that don't support ref comparisons.","Url":"https://github.com/dotnet/corefx/issues/33927","RelatedDescription":"Open issue \"Proposal: ref-argument version of IComparer and/or Comparison\" (#33927)"},{"Id":"388767069","IsPullRequest":true,"CreatedAt":"2018-12-08T06:53:54","Actor":"krwq","Number":"33911","RawContent":null,"Title":"Fix SslStream_StreamToStream_Alpn_NonMatchingProtocols","State":"closed","Body":"Fixes: #33514\r\nFixes: #32946\r\n\r\nI thought I broke it when working on other changes but the issue happened when I updated OpenSsl to latest and the issue was unrelated. The problem is that we used wrong error code to say \"no application protocols match\"","Url":"https://github.com/dotnet/corefx/pull/33911","RelatedDescription":"Closed or merged PR \"Fix SslStream_StreamToStream_Alpn_NonMatchingProtocols\" (#33911)"},{"Id":"388875319","IsPullRequest":true,"CreatedAt":"2018-12-08T04:52:54","Actor":"Dotnet-GitSync-Bot","Number":"33923","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/33923","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#33923)"},{"Id":"388876331","IsPullRequest":true,"CreatedAt":"2018-12-08T02:37:22","Actor":"quole","Number":"33925","RawContent":null,"Title":"Remove broken test in TimeSpanTests.cs","State":"open","Body":"These two tests are expecting buggy behavior and should be removed. \r\n\r\nWhen TimeSpan.Parse() is given one more _fractional digit_ than is expected, it sometimes multiplies the result by 10. This shouldn't be expected behavior. I've detailed this bug here:\r\n\r\n* https://github.com/dotnet/coreclr/pull/21077\r\n\r\nYou can see there's something off just eyeballing the source code and how the pattern breaks in the last line:\r\n\r\n```C#\r\nyield return new object[] { \"1:1:.01\", CultureInfo.InvariantCulture, new TimeSpan(36600100000) };\r\nyield return new object[] { \"1:1:.001\", CultureInfo.InvariantCulture, new TimeSpan(36600010000) };\r\nyield return new object[] { \"1:1:.0001\", CultureInfo.InvariantCulture, new TimeSpan(36600001000) };\r\nyield return new object[] { \"1:1:.00001\", CultureInfo.InvariantCulture, new TimeSpan(36600000100) };\r\nyield return new object[] { \"1:1:.000001\", CultureInfo.InvariantCulture, new TimeSpan(36600000010) };\r\nyield return new object[] { \"1:1:.0000001\", CultureInfo.InvariantCulture, new TimeSpan(36600000001) };\r\nyield return new object[] { \"1:1:.00000001\", CultureInfo.InvariantCulture, new TimeSpan(36600000001) };\r\n```\r\n\r\nPerhaps, it might, in some bizarre way, seem reasonable for \"0.1 ticks\" to round up to 1 tick (that's what the final test is effectively checking for). But with a little investigation, it's clearly a bug. If you replace 1 with 2 could also be checking that 0.2 ticks \"rounds up\" to 2 ticks, and this would \"pass\" also:\r\n```C#\r\nyield return new object[] { \"1:1:.0000002\", CultureInfo.InvariantCulture, new TimeSpan(36600000002) };\r\nyield return new object[] { \"1:1:.00000002\", CultureInfo.InvariantCulture, new TimeSpan(36600000002) };\r\n```\r\nThis is not how numbers work.\r\n\r\nOr you could check that 100000 ticks (0.01s) == 1000000 ticks (0.1s), and you'd find this to also pass. [Here you can see this behavior in action](https://dotnetfiddle.net/YtgiHS)\r\n\r\nEventually the test should be replaced with something checking for sane behavior. It should really be rounding the fractional digits in the same way that `decimal.Parse()` works. Failing that, it should at least throw a \"Format\" or even an \"Overflow\" exception (though extra decimal places isn't really an overflow). However it's fixed, these two tests are checking for incorrect behavior and should be removed.\r\n\r\nThere's more discussion of the bug, a patch for the immediate problem, and discussion of better possible ways to fix it at https://github.com/dotnet/coreclr/pull/21077","Url":"https://github.com/dotnet/corefx/pull/33925","RelatedDescription":"Open PR \"Remove broken test in TimeSpanTests.cs\" (#33925)"},{"Id":"388875524","IsPullRequest":true,"CreatedAt":"2018-12-08T02:28:09","Actor":"dotnet-maestro-bot","Number":"33924","RawContent":null,"Title":"Update CoreClr to preview-27209-01 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/33924","RelatedDescription":"Open PR \"Update CoreClr to preview-27209-01 (master)\" (#33924)"},{"Id":"388845344","IsPullRequest":true,"CreatedAt":"2018-12-08T02:21:53","Actor":"Dotnet-GitSync-Bot","Number":"33918","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corefx/pull/33918","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#33918)"},{"Id":"388856944","IsPullRequest":false,"CreatedAt":"2018-12-08T01:15:28","Actor":"Anipik","Number":"33919","RawContent":null,"Title":"Add back StandardOleMarshalObject and IMarshal","State":"closed","Body":"These are used by Winforms to ensure that COM calls are marshalled to UI thread. It's used by the webrowser control and in the base type for accessible controls (to permit external automation). See https://referencesource.microsoft.com/#System/compmod/System/Runtime/InteropServices/StandardOleMarshalObject.cs,9cc1693e68a2dac7,references I've temporarily implemented this as a copy where I need it, but it probably belongs in CoreFx since it is part of System.","Url":"https://github.com/dotnet/corefx/issues/33919","RelatedDescription":"Closed issue \"Add back StandardOleMarshalObject and IMarshal\" (#33919)"},{"Id":"388863252","IsPullRequest":false,"CreatedAt":"2018-12-08T00:37:56","Actor":"nguerrera","Number":"33922","RawContent":null,"Title":"System.IO.Pipes.AccessControl missing from shared framework on non-Windows","State":"open","Body":"System.IO.Pipes.AccessControl is in the shared framework on Windows, in the Microsoft.NETCore.App package platform manifest, but missing from the shared framework on non-Windows. It was there in 2.x, but now gone in 3.0\r\n\r\n## Repro steps\r\n0. Install .NET Core 3.0 Preview 1 on a Linux box\r\n1. mkdir repro && cd repro\r\n2. dotnet new console\r\n3. Edit Program.cs \r\n\r\n``` C#\r\nusing System;\r\nusing System.IO.Pipes;\r\nusing System.Security.AccessControl;\r\n\r\nnamespace repro\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var x = new PipeAccessRule(\"foo\", PipeAccessRights.FullControl, AccessControlType.Allow);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Edit repro.csproj\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipes.AccessControl\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n5. dotnet run\r\n\r\n## Expected \r\n```\r\nUnhandled Exception: System.PlatformNotSupportedException: Access Control List (ACL) APIs are part of resource management on Windows and are not supported on this platform.\r\n   at System.Security.AccessControl.AuthorizationRule..ctor(IdentityReference identity, Int32 accessMask, Boolean isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)\r\n   at System.Security.AccessControl.AccessRule..ctor(IdentityReference identity, Int32 accessMask, Boolean isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\r\n   at System.IO.Pipes.PipeAccessRule..ctor(String identity, PipeAccessRights rights, AccessControlType type)\r\n   at repro.Program.Main(String[] args) in /home/nicholg/repro/Program.cs:line 11\r\n```\r\n\r\nYou can see this working by targeting netcoreapp2.1 and running on netcoreapp2.1\r\n\r\n## Actual\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.IO.Pipes.AccessControl, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified\r\n```\r\n\r\ncc @jaredpar @tmat @ericstj @livarcocc \r\n\r\nThis is blocking an insertion with latest roslyn into the SDK.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/33922","RelatedDescription":"Open issue \"System.IO.Pipes.AccessControl missing from shared framework on non-Windows\" (#33922)"},{"Id":"388860184","IsPullRequest":true,"CreatedAt":"2018-12-08T00:28:15","Actor":"ViktorHofer","Number":"33921","RawContent":null,"Title":"Fix helix test runs in official builds","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/33910\r\n\r\nTested in the internal repo.","Url":"https://github.com/dotnet/corefx/pull/33921","RelatedDescription":"Closed or merged PR \"Fix helix test runs in official builds\" (#33921)"},{"Id":"388813980","IsPullRequest":true,"CreatedAt":"2018-12-07T23:37:41","Actor":"ViktorHofer","Number":"33916","RawContent":null,"Title":"Reenable some disabled enum tests","State":"closed","Body":"Fixes https://github.com/dotnet/buildtools/issues/1091\r\n\r\nStumbled upon it while grepping for `buildtools` in corefx 😂","Url":"https://github.com/dotnet/corefx/pull/33916","RelatedDescription":"Closed or merged PR \"Reenable some disabled enum tests\" (#33916)"},{"Id":"388836977","IsPullRequest":true,"CreatedAt":"2018-12-07T22:30:34","Actor":"benaadams","Number":"33917","RawContent":null,"Title":"Pipelines perf tweaks","State":"open","Body":"Added separate commits for each one (from https://github.com/dotnet/corefx/pull/33851)\r\n\r\n- Reset segments out of lock in CompletePipe (lock not needed at this point) https://github.com/dotnet/corefx/pull/33917/commits/8084ec96c379132ac01529a338a2f944b7d6fb92\r\n- Elide bounds check in CreateSegmentUnsynchronized https://github.com/dotnet/corefx/pull/33917/commits/97c6f7a0451ec652846eff7bd73fb11dd01e518b\r\n- Elide bounds checks for ReturnSegmentsUnsynchronized https://github.com/dotnet/corefx/pull/33917/commits/25460c4fb67ed330c11c6ecf97d7a5efc93f5d84\r\n- Tailcall Dispose (call it last) https://github.com/dotnet/corefx/pull/33917/commits/8ab296c9fd63db4a203b64d50a0dd42393403ec3\r\n- Drop trailing segments in ResetMemory (otherwise chain of segments if larger than pool held until reuse disconnects them) https://github.com/dotnet/corefx/pull/33917/commits/f8ba932479bc9fae026b8639d6e5a0f02e908cff\r\n- Reset and pool BufferSegment outside lock https://github.com/dotnet/corefx/pull/33917/commits/56b89b0e1acbd70f63422627f8938209206adddd\r\n\r\n/cc @ahsonkhan @pakrym @davidfowl ","Url":"https://github.com/dotnet/corefx/pull/33917","RelatedDescription":"Open PR \"Pipelines perf tweaks\" (#33917)"},{"Id":"388806913","IsPullRequest":true,"CreatedAt":"2018-12-07T22:14:59","Actor":"ViktorHofer","Number":"33915","RawContent":null,"Title":"Update arcade CoreFxTesting package manually","State":"closed","Body":"Manually updating as I'm not sure if Darc is working.","Url":"https://github.com/dotnet/corefx/pull/33915","RelatedDescription":"Closed or merged PR \"Update arcade CoreFxTesting package manually\" (#33915)"},{"Id":"388804792","IsPullRequest":true,"CreatedAt":"2018-12-07T22:14:37","Actor":"ViktorHofer","Number":"33914","RawContent":null,"Title":"Fix msbuild xml errors","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/33882\r\n\r\nFunny that didn't cause any noticeable errors in the last months / the last year.\r\n\r\n@davidkaya thanks for reporting.","Url":"https://github.com/dotnet/corefx/pull/33914","RelatedDescription":"Closed or merged PR \"Fix msbuild xml errors\" (#33914)"},{"Id":"388775524","IsPullRequest":true,"CreatedAt":"2018-12-07T21:58:30","Actor":"Dotnet-GitSync-Bot","Number":"33912","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/33912","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#33912)"},{"Id":"388741352","IsPullRequest":true,"CreatedAt":"2018-12-07T20:07:12","Actor":"ViktorHofer","Number":"33908","RawContent":null,"Title":"Condition Test SDK right, ci fixes and code cleanup","State":"closed","Body":"- Condition Test SDK target in xunit depproj correct and code cleanup\r\n- Remove microsoft/vstest myget feed and update Microsoft.Net.Test.Sdk version\r\n- Add ci argument to perf legs\r\n- Update Microsoft.DotNet.CoreFxTesting package manually","Url":"https://github.com/dotnet/corefx/pull/33908","RelatedDescription":"Closed or merged PR \"Condition Test SDK right, ci fixes and code cleanup\" (#33908)"},{"Id":"388716733","IsPullRequest":true,"CreatedAt":"2018-12-07T18:14:47","Actor":"stephentoub","Number":"33907","RawContent":null,"Title":"Disable CurrentInfo_CustomCulture tests failing on UWP","State":"closed","Body":"#33904\r\n\r\ncc: @tarekgh, @krwq ","Url":"https://github.com/dotnet/corefx/pull/33907","RelatedDescription":"Closed or merged PR \"Disable CurrentInfo_CustomCulture tests failing on UWP\" (#33907)"},{"Id":"388748354","IsPullRequest":false,"CreatedAt":"2018-12-07T17:35:16","Actor":"dotnet-mc-bot","Number":"33910","RawContent":null,"Title":"Build failure: 20181207.02 & 20181207.01","State":"open","Body":"Opened on behalf of @v-asdhin\n\nWarnings: 3\nStatus Message: failed\n\nBuild : 3.0 - 20181207.02 (Product Build)\nFailing configurations:\n- Windows\n  - netfx-x86\n  - netfx-x64\n  - AllConfigurations-x64\n  - uapaot-x86\n  - uapaot-x64\n  - uapaot-arm\n  - uap-x86\n  - uap-x64\n  - uap-arm\n  - netcoreapp-x86\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/30/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20181207.02/workItem/Orchestration/analysis/external/Link)\n","Url":"https://github.com/dotnet/corefx/issues/33910","RelatedDescription":"Open issue \"Build failure: 20181207.02 & 20181207.01\" (#33910)"},{"Id":"388745076","IsPullRequest":false,"CreatedAt":"2018-12-07T17:25:10","Actor":"stephentoub","Number":"33909","RawContent":null,"Title":"Proposal: IAsyncEnumerable<T>.WithCancellation extension method","State":"open","Body":"## Background\r\n\r\nPer recent design revisions, `IAsyncEnumerable<T>.GetAsyncEnumerator` will now accept a `CancellationToken`.  To get a cancellation token into the `GetAsyncEnumerator` call, code can use `GetAsyncEnumerator` explicitly, e.g.\r\n```C#\r\nIAsyncEnumerator<T> enumerator = enumerable.GetAsyncEnumerator(cancellationToken);\r\ntry\r\n{\r\n     while (await enumerator.MoveNextAsync())\r\n     {\r\n         T current = enumerator.Current;\r\n         …\r\n     }\r\n}\r\nfinally\r\n{\r\n    await enumerator.DisposeAsync();\r\n}\r\n```\r\n\r\nTo use `await foreach`, as there’s no language-provided facility for passing a `CancellationToken` into the compiler-generated `GetAsyncEnumerator` call, to get a `CancellationToken` in we need to take advantage of the pattern-matching support `await foreach` supplies.  By returning a struct that exposes the right pattern, we can smuggle a `CancellationToken` in, stored in that struct, such that when the compiler-generated code invokes that struct’s `GetAsyncEnumerator()`, it in turn calls `GetAsyncEnumerator(_cancellationToken)` on the underlying enumerable.\r\n\r\nTo make that simple, we should add a `WithCancellation` extension method on `IAsyncEnumerable<T>` that accepts the `CancellationToken`, allowing you to write:\r\n```C#\r\nawait foreach (T item in enumerable.WithCancellation(cancellationToken))\r\n{\r\n    …\r\n}\r\n```\r\nwith that generating the equivalent of:\r\n```C# \r\nvar enumerator = enumerable.WithCancellation(cancellationToken).GetAsyncEnumerator();\r\ntry\r\n{\r\n     while (await enumerator.MoveNextAsync())\r\n     {\r\n         T current = enumerator.Current;\r\n         …\r\n     }\r\n}\r\nfinally\r\n{\r\n    await enumerator.DisposeAsync();\r\n}\r\n```\r\n\r\nHowever, we also need to deal with the ability to `ConfigureAwait(false)` an enumerable.  We’ve already added the `ConfigureAwait(bool)` extension method for `IAsyncEnumerable<T>`, and we need to be able to allow developers to use both it and `WithCancellation`.  Since both of these would return structs that by design do not implement `IAsyncEnumerable<T>`, we need another mechanism to allow chaining them, e.g.\r\n```C#\r\nawait foreach (T item in enumerable.WithCancellation(cancellationToken).ConfigureAwait(false))\r\n{\r\n    …\r\n}\r\n```\r\n\r\n## Proposal\r\n\r\nAs part of adding the async-related interfaces, we also added a `ConfigureAwait` extension method and a new `ConfiguredAsyncEnumerable` struct type.  We replace those with a slightly updated version:\r\n```diff\r\n-namespace System.Threading.Tasks\r\n-{\r\n-    public static class TaskExtensions // previously existing class\r\n-    {\r\n-        public static ConfiguredAsyncEnumerable<T> ConfigureAwait<T>(this IAsyncEnumerable<T> source, bool continueOnCapturedContext);\r\n-    }\r\n-}\r\n-\r\n-namespace System.Runtime.CompilerServices\r\n-{\r\n-    [StructLayout(LayoutKind.Auto)]\r\n-    public readonly struct ConfiguredAsyncEnumerable<T>\r\n-    {\r\n-        public Enumerator GetAsyncEnumerator(CancellationToken cancellationToken = default);\r\n-        public readonly struct Enumerator\r\n-        {\r\n-            public ConfiguredValueTaskAwaitable<bool> MoveNextAsync();\r\n-            public T Current { get; }\r\n-            public ConfiguredValueTaskAwaitable DisposeAsync();\r\n-        }\r\n-    }\r\n-}\r\n+namespace System.Threading.Tasks\r\n+{\r\n+  public static class TaskExtensions // previously existing class\r\n+    {\r\n+        public static ConfiguredCancelableAsyncEnumerable<T> WithCancellation<T>(this IAsyncEnumerable<T> source, CancellationToken cancellationToken);\r\n+        public static ConfiguredCancelableAsyncEnumerable<T> ConfigureAwait<T>(this IAsyncEnumerable<T> source, bool continueOnCapturedContext);\r\n+    }\r\n+}\r\n+\r\n+namespace System.Runtime.CompilerServices\r\n+{\r\n+   [StructLayout(LayoutKind.Auto)]\r\n+   public readonly struct ConfiguredCancelableAsyncEnumerable<T>\r\n+    {\r\n+        public ConfiguredCancelableAsyncEnumerable<T> WithCancellation(CancellationToken cancellationToken);\r\n+        public ConfiguredCancelableAsyncEnumerable<T> ConfigureAwait(bool continueOnCapturedContext);\r\n+\r\n+        public Enumerator GetAsyncEnumerator();\r\n+        public readonly struct Enumerator\r\n+        {\r\n+            public ConfiguredValueTaskAwaitable<bool> MoveNextAsync();\r\n+            public T Current { get; }\r\n+            public ConfiguredValueTaskAwaitable DisposeAsync();\r\n+        }\r\n+    }\r\n+}\r\n```\r\n\r\nThis let’s you write:\r\n```C#\r\nawait foreach (T item in source) { … }\r\nawait foreach (T item in source.ConfigureAwait(false)) { … }\r\nawait foreach (T item in source.WithCancellation(token)) { … }\r\nawait foreach (T item in source.ConfigureAwait(false).WithCancellation(token)) { … }\r\nawait foreach (T item in source.WithCancellation(token).ConfigureAwait(false)) { … }\r\n```\r\nIt of course also lets you write something a bit non-sensical, like:\r\n```C#\r\nawait foreach (T item in source.ConfigureAwait(false).ConfigureAwait(true).WithCancellation(token1).WithCancellation(token2)) { … }\r\n```\r\nand in such a case we would just use the last value specified, e.g. this would end up being equivalent to:\r\n```C#\r\nawait foreach (T item in source.ConfigureAwait(true).WithCancellation(token2)) { … }\r\n```\r\n\r\nNote that the `GetAsyncEnumerator()` on the struct is defined to be parameterless (this assumes the compiler's pattern-matching support allows that... if not, it'll be defined to take a token as well).  Since this struct is only ever meant to be used via the provided extension methods with the `await foreach` construct, there’s little use for also accepting a `CancellationToken` into `GetAsyncEnumerator()`, and allowing that would just be confusing, as that argument will be ignored by the implementation.\r\n\r\ncc: @jcouv, @MadsTorgersen, @terrajobst, @bartonjs ","Url":"https://github.com/dotnet/corefx/issues/33909","RelatedDescription":"Open issue \"Proposal: IAsyncEnumerable<T>.WithCancellation extension method\" (#33909)"},{"Id":"388651497","IsPullRequest":true,"CreatedAt":"2018-12-07T16:09:28","Actor":"Dotnet-GitSync-Bot","Number":"33905","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @MichalStrehovsky","Url":"https://github.com/dotnet/corefx/pull/33905","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#33905)"},{"Id":"388670861","IsPullRequest":true,"CreatedAt":"2018-12-07T15:55:19","Actor":"dotnet-maestro-bot","Number":"33906","RawContent":null,"Title":"Update CoreClr to preview-27207-02 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/33906","RelatedDescription":"Closed or merged PR \"Update CoreClr to preview-27207-02 (master)\" (#33906)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"388874950","IsPullRequest":true,"CreatedAt":"2018-12-09T05:16:34","Actor":"tmat","Number":"31633","RawContent":null,"Title":"Move package reference to RoslynTools.ModifyVsixManifest from Tools to VSIX project","State":"closed","Body":"RoslynTools.ModifyVsixManifest and RoslynTools.BuildTasks are used by targets that execute on Build and thus must be restored when the project is restored, not when the CI tools are restored.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/31630","Url":"https://github.com/dotnet/roslyn/pull/31633","RelatedDescription":"Closed or merged PR \"Move package reference to RoslynTools.ModifyVsixManifest from Tools to VSIX project\" (#31633)"},{"Id":"388872751","IsPullRequest":false,"CreatedAt":"2018-12-09T05:16:34","Actor":"tmat","Number":"31630","RawContent":null,"Title":"Deterministic build fails to find ModifyVsixManifest tool","State":"closed","Body":"```\r\nbuild\\Targets\\RepoToolset\\VisualStudio.targets(153,5): error MSB3073: The command \"\"C:\\Users\\vsagent\\.nuget\\packages\\roslyntools.modifyvsixmanifest\\1.0.0-beta2-63222-01\\tools\\ModifyVsixManifest.exe\" --vsix=\"F:\\vsagent\\2\\s\\Binaries\\VSSetup\\Debug\\Insertion\\Roslyn.VisualStudio.Setup.vsix\" --remove=//x:PackageManifest/x:Installation/@Experimental --add-attribute=//x:PackageManifest/x:Installation;SystemComponent;true\" exited with code 3.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31630","RelatedDescription":"Closed issue \"Deterministic build fails to find ModifyVsixManifest tool\" (#31630)"},{"Id":"388986322","IsPullRequest":true,"CreatedAt":"2018-12-09T04:32:36","Actor":"CyrusNajmabadi","Number":"31644","RawContent":null,"Title":"Enable OOP features by default.","State":"open","Body":"This code to make it possible to run features OOP was added around 18 months ago.  Since then there has been no issue with it.  It has also been A/B tested with no stability issues arising, and positive numbers for all latency-oriented scenarios.\r\n\r\nThis PR simply removes the options for controlling this and makes it so that OOP is on all the time.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/26076","Url":"https://github.com/dotnet/roslyn/pull/31644","RelatedDescription":"Open PR \"Enable OOP features by default.\" (#31644)"},{"Id":"388964076","IsPullRequest":false,"CreatedAt":"2018-12-08T22:08:02","Actor":"jeromelaban","Number":"31643","RawContent":null,"Title":"[Nullable ref Types] default(T) behavior in the context of generic types","State":"open","Body":"**Version Used**: VS2019 16.0 Pre1\r\n\r\n**Steps to Reproduce**:\r\n\r\nGiven the following code:\r\n\r\n```csharp\r\npublic static void TestMethod()\r\n{\r\n    new string[0].AllEquals();\r\n    new int[0].AllEquals();\r\n}\r\n\r\n/// <summary>\r\n/// Check if all items of an enumerable are equals, using an optional comparer\r\n/// </summary>\r\npublic static bool AllEquals<T>(this IEnumerable<T> items, IEqualityComparer<T> comparer = null)\r\n{\r\n    comparer = comparer ?? EqualityComparer<T>.Default;\r\n\r\n    T first = default(T);   // Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n    bool isFirst = true;\r\n    foreach (var item in items)\r\n    {\r\n        if (isFirst)\r\n        {\r\n            first = item;\r\n            isFirst = false;\r\n            continue;\r\n        }\r\n        if (!comparer.Equals(first, item))\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNot sure what to expect here, I do not how to resolve this aside from disabling nullables... if it's unconstrained, should there be a way to tell that T can be nullable for references, and cannot be for value types? Should an explicit `where T:object?` change this behavior [if it were valid](https://github.com/dotnet/csharplang/blob/98043cdc889303d956d540d7ab3bc4f5044a9d3b/meetings/2018/LDM-2018-04-25.md#allow-object-explicitly) ?\r\n\r\n**Actual Behavior**:\r\n`Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.` on assignation from `default`.","Url":"https://github.com/dotnet/roslyn/issues/31643","RelatedDescription":"Open issue \"[Nullable ref Types] default(T) behavior in the context of generic types\" (#31643)"},{"Id":"388961048","IsPullRequest":false,"CreatedAt":"2018-12-08T21:28:03","Actor":"garuma","Number":"31642","RawContent":null,"Title":"[Nullable ref Types] Infer throw statements from extension methods","State":"open","Body":"**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg\r\nC# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb\r\n\r\n**Steps to Reproduce**:\r\n\r\nSimplified definition:\r\n\r\n``` csharp\r\nstruct TwoEnumeratorListStack\r\n{\r\n    private readonly ArrayBuilder<Which>? _discriminatorStack;\r\n\r\n    public Which PeekNext()\r\n    {\r\n        // Possible dereference of a null reference\r\n        return _discriminatorStack[_discriminatorStack.Count - 1];\r\n    }\r\n}\r\n```\r\n\r\nTo prevent the warning you can do:\r\n\r\n``` csharp\r\npublic Which PeekNext()\r\n{\r\n    if (_discriminatorStack == null)\r\n        throw new InvalidOperationException();\r\n    return _discriminatorStack[_discriminatorStack.Count - 1];\r\n}\r\n```\r\n\r\nWhich removes the warning. However trying to capture the check in a general-purpose extension method:\r\n\r\n``` csharp\r\ninternal static void ThrowInvalidIfNull<T>(this T? argument) where T : class\r\n{\r\n    if (argument == null)\r\n        throw new InvalidOperationException();\r\n}\r\n\r\npublic Which PeekNext()\r\n{\r\n    _discriminatorStack.ThrowInvalidIfNull();\r\n    return _discriminatorStack[_discriminatorStack.Count - 1];\r\n}\r\n```\r\nDoesn't remove the warning anymore and requires additional `!` to both array indexer and `.Count`\r\n","Url":"https://github.com/dotnet/roslyn/issues/31642","RelatedDescription":"Open issue \"[Nullable ref Types] Infer throw statements from extension methods\" (#31642)"},{"Id":"388959704","IsPullRequest":false,"CreatedAt":"2018-12-08T21:10:05","Actor":"garuma","Number":"31641","RawContent":null,"Title":"[Nullable ref types] Potentially understand Try* pattern flow better","State":"open","Body":"**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg\r\nC# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb\r\n\r\nWhen doing a Try pattern like this:\r\n\r\n``` csharp\r\npublic bool TryGetSomething (out ReferenceType result)\r\n{\r\n    if (someCondition)\r\n    {\r\n        result = /* non-null value */;\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        result = default;\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nWith nullable types because `default` is used you will end up converting the out parameter to `ReferenceType?`.\r\n\r\nIt would be nice on the caller side if subsequently this would be supported:\r\n\r\n```\r\nif (TryGetSomething (out var result))\r\n     // result is not null and thus doesn't trigger \"Possible deference of a null reference\" warning\r\n     result.DoSomething ();\r\n```\r\n\r\nToday this doesn't seem to be the case with the following (real) code sample\r\n\r\n``` csharp\r\n// Caller site\r\npublic bool TryGetNextInSpan(in TextSpan span, out SyntaxNode? value)\r\n{\r\n    if (_stack == null) {\r\n        value = default;\r\n        return false;\r\n    }\r\n    while (_stack[_stackPtr].TryMoveNextAndGetCurrent(out value))\r\n    {\r\n        if (IsInSpan(in span, /* `value` shows the dereference warning --> */ value.FullSpan))\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _stackPtr--;\r\n    return false;\r\n}\r\n\r\n// Defined in class used by `_stack`\r\ninternal bool TryMoveNextAndGetCurrent(out SyntaxNode? current)\r\n{\r\n    if (!MoveNext())\r\n    {\r\n        current = default;\r\n        return false;\r\n    }\r\n\r\n    // ItemInternal returns a non-nullable type\r\n    current = ItemInternal(_node, _childIndex);\r\n    return true;\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31641","RelatedDescription":"Open issue \"[Nullable ref types] Potentially understand Try* pattern flow better\" (#31641)"},{"Id":"388955774","IsPullRequest":false,"CreatedAt":"2018-12-08T20:19:14","Actor":"jcouv","Number":"31640","RawContent":null,"Title":"Unclear whether EmbeddedText with empty filePath is allowed","State":"open","Body":"The documentation on `EmbeddedText` says that empty file path is allowed. But there is no way to create an `EmbeddedText` with an empty file path.\r\n\r\nIn EmbeddedText:\r\n```C#\r\n        /// <summary>\r\n        /// The path to the file to embed.\r\n        /// </summary>\r\n        /// <remarks>See remarks of <see cref=\"SyntaxTree.FilePath\"/></remarks>\r\n        public string FilePath { get; }\r\n```\r\nwhich refers to:\r\n```C#\r\n        /// <summary>\r\n        /// The path of the source document file.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// If this syntax tree is not associated with a file, this value can be empty.\r\n        /// The path shall not be null.\r\n...\r\n        /// </remarks>\r\n        public abstract string FilePath { get; }\r\n```\r\n\r\nBut all the factory methods for `EmbeddedText` throw if the file path is empty:\r\n```C#\r\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"filePath\"/> is null.</exception>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"filePath\"/> is empty.</exception>\r\n        private static void ValidateFilePath(string filePath)\r\n ...\r\n```\r\n\r\nAnd the private constructor for `EmbeddedText` asserts that the file path is not empty:\r\n```C#\r\n        private EmbeddedText(string filePath, ImmutableArray<byte> checksum, SourceHashAlgorithm checksumAlgorithm, ImmutableArray<byte> blob)\r\n        {\r\n            Debug.Assert(filePath?.Length > 0);\r\n ```\r\n\r\n\r\nTagging @tmat \r\n\r\nFor context, I am trying to modify our test helper `CompileAndVerify` to embed symbols and source into the produced assembly.","Url":"https://github.com/dotnet/roslyn/issues/31640","RelatedDescription":"Open issue \"Unclear whether EmbeddedText with empty filePath is allowed\" (#31640)"},{"Id":"388946749","IsPullRequest":false,"CreatedAt":"2018-12-08T18:28:53","Actor":"garuma","Number":"31639","RawContent":null,"Title":"[Nullable ref types] Infer non-nullablity with array `?.Length` check","State":"open","Body":"**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg\r\nC# Tools   2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb\r\n\r\n**Steps to Reproduce**:\r\n\r\nTake following code block:\r\n\r\n``` csharp\r\nprotected GreenNode(SyntaxKind kind, int fullWidth, DiagnosticInfo[]? diagnostics, SyntaxAnnotation[]? annotations)\r\n    : this(kind, fullWidth)\r\n{\r\n    if (diagnostics?.Length > 0)\r\n    {\r\n        this.flags |= NodeFlags.ContainsDiagnostics;\r\n        diagnosticsTable.Add(this, diagnostics);\r\n    }\r\n    if (annotations?.Length > 0)\r\n    {\r\n        this.flags |= NodeFlags.ContainsAnnotations;\r\n        annotationsTable.Add(this, annotations);\r\n    }\r\n}\r\n```\r\nCurrently the parameters to `Add` (both `diagnostics` and `annotations`) are flagged as \"Possible null reference argument for parameter\" however because of the form of the if check it should be possible to infer that those arguments are non-null at that stage.","Url":"https://github.com/dotnet/roslyn/issues/31639","RelatedDescription":"Open issue \"[Nullable ref types] Infer non-nullablity with array `?.Length` check\" (#31639)"},{"Id":"388932399","IsPullRequest":false,"CreatedAt":"2018-12-08T15:39:27","Actor":"Neme12","Number":"31638","RawContent":null,"Title":"Semantic classification doesn't always refresh","State":"open","Body":"Version used: 16.0 preview 1\r\n\r\nIt just happened to me that after opening the Roslyn solution, I was waiting for all types to get colorized to be sure that everything is loaded, but it seemed to take a little longer than usual. When I tried hovering over an uncolored type, I actually got quick info, which means everything was fully bound after all. I just had to close and reopen the document to see the colorization.\r\nScreenshot:\r\n![image](https://user-images.githubusercontent.com/11444821/49687744-b718d180-fb07-11e8-8429-ae5d77fc5ec3.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/31638","RelatedDescription":"Open issue \"Semantic classification doesn't always refresh\" (#31638)"},{"Id":"388882929","IsPullRequest":true,"CreatedAt":"2018-12-08T05:00:09","Actor":"dotnet-bot","Number":"31635","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31635","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31635)"},{"Id":"388882932","IsPullRequest":true,"CreatedAt":"2018-12-08T05:00:05","Actor":"dotnet-bot","Number":"31636","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31636","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31636)"},{"Id":"388884498","IsPullRequest":false,"CreatedAt":"2018-12-08T04:34:44","Actor":"jmarolf","Number":"31637","RawContent":null,"Title":"Turning on Nullable references crashes VS with analyzers installed","State":"open","Body":"**Version Used**: 16.0.0 Preview 2.0 [28407.111.d16.0stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\nInstall Roslyn.Diagnostics.Analyzers on a project with Nullable references turned on.\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nNo Crash\r\n\r\n**Actual Behavior**:\r\n\r\nVisual Studio Crashes with the following fail fast exception:\r\n\r\n  | Name | Value | Type\r\n-- | -- | -- | --\r\n◢ | $exception | {\"Sequence contains no elements\"} | System.InvalidOperationException\r\n\r\n\r\n\r\n[Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)](https://github.com/dotnet/roslyn-analyzers/blob/3a9597c623019cc68af10a3478188906ce4a2170/src/Roslyn.Diagnostics.Analyzers/Core/SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs#L77)\r\n\r\n```ini\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source) in f:\\dd\\ndp\\fx\\src\\Core\\System\\Linq\\Enumerable.cs:line 1174\r\n   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType) in E:\\A\\_work\\59\\s\\src\\Roslyn.Diagnostics.Analyzers\\Core\\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 77\r\n   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType) in E:\\A\\_work\\59\\s\\src\\Roslyn.Diagnostics.Analyzers\\CSharp\\CSharpSymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 26\r\n   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.<Initialize>b__7_0(CompilationStartAnalysisContext compilationContext) in E:\\A\\_work\\59\\s\\src\\Roslyn.Diagnostics.Analyzers\\Core\\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 46\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 351\r\n   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context) in E:\\A\\_work\\59\\s\\src\\Roslyn.Diagnostics.Analyzers\\Core\\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 43\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 311\r\n   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateSet.cs:line 269\r\n   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.<AnalyzeProjectAsync>d__88.MoveNext() in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs:line 112\r\n```\r\n\r\n\r\nDump available at `\\mlangfs1\\public\\jmarolf\\Dumps\\crash.dmp`","Url":"https://github.com/dotnet/roslyn/issues/31637","RelatedDescription":"Open issue \"Turning on Nullable references crashes VS with analyzers installed\" (#31637)"},{"Id":"388856690","IsPullRequest":true,"CreatedAt":"2018-12-08T04:00:06","Actor":"dotnet-bot","Number":"31627","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31627","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31627)"},{"Id":"388856705","IsPullRequest":true,"CreatedAt":"2018-12-08T04:00:03","Actor":"dotnet-bot","Number":"31628","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31628","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31628)"},{"Id":"388820935","IsPullRequest":true,"CreatedAt":"2018-12-08T03:40:42","Actor":"tmat","Number":"31623","RawContent":null,"Title":"Add MicrosoftDotNetIBCMergeVersion back","State":"closed","Body":"Previous PR accidentally removed this version.","Url":"https://github.com/dotnet/roslyn/pull/31623","RelatedDescription":"Closed or merged PR \"Add MicrosoftDotNetIBCMergeVersion back\" (#31623)"},{"Id":"388880032","IsPullRequest":true,"CreatedAt":"2018-12-08T03:27:37","Actor":"heejaechang","Number":"31634","RawContent":null,"Title":"fixed re-enterance bug in async operation listener.","State":"open","Body":"basically we are calling SetResult inside of a lock and since we used regular lock which allows re-enterance, we sometimes ran arbitary code under lock which re-entered async operation listener and mess everything up.\r\n\r\nchanged to non re-enterance lock so that it explicitly throws if re-enterance happens.\r\n\r\nand make sure call SetResult from other thread (out side of the lock).","Url":"https://github.com/dotnet/roslyn/pull/31634","RelatedDescription":"Open PR \"fixed re-enterance bug in async operation listener.\" (#31634)"},{"Id":"388873232","IsPullRequest":false,"CreatedAt":"2018-12-08T02:03:40","Actor":"gafter","Number":"31632","RawContent":null,"Title":"Proposed \"Nullability Side Car Representation\"","State":"open","Body":"We're considering supporting an additional input file to the C# compiler that would inform the compiler about nullability annotations that should be considered to apply to external program entities.  These annotations replace what the programmer considers to be either missing or incorrect annotations from an imported library.\r\n\r\n## Nullability \"Side Car\" Representation\r\n\r\nThis document proposes a particular representation for the signature information that augments a program that may lack signature information in its program elements or referenced assemblies.  We call this the \"C# nullability signature\" file, or CSNS.  When one is present as part of a compilation, the signatures of program entities are augmented with nullability annotations appearing in it.\r\n\r\nThe CSNS file format is a subset of the C# programming language, and is intended to support only enough of the C# language to express the program element signatures and the nullability annotations that apply to them.  We borrow from C# so that we can assume C# syntax and semantics unless described otherwise.\r\n\r\nThe CSNS file format is the same as a C# program except as follows:\r\n- No modifiers are permitted (not even `public`, `private`, `override`, `new`, `params`, `this`, `partial`, etc).\r\n- *variance_annotations* (`in` and `out`) on type parameters are not permitted.\r\n- Method bodies (and ctor-initializers) are forbidden. Each method declaration should end in a semicolon.\r\n- Similarly, constructor, operator, property, and other function member bodies are omitted.\r\n- Default parameter values are forbidden in method declarations.\r\n- Attributes are permitted, but each attribute argument must be\r\n  - a literal,\r\n  - an enumeration constant,\r\n  - or an array of one of these permitted values.\r\n- tuple element names are forbidden in tuple types\r\n- `dynamic` is forbidden.  `object` is used instead.\r\n- Static constructors and constants may not be declared.\r\n- Explicit interface implementations are forbidden.\r\n- Enum declarations are forbidden.\r\n\r\nTo be clear, the following are permitted:\r\n- comments, including documentation comments (which are ignored)\r\n- preprocessing directives and preprocessing expressions\r\n- `extern alias` directives\r\n- `using` directives\r\n- `using` alias directives\r\n- `namespace` declarations\r\n- type declarations, including `class`, `struct`, `interface`, and `delegate` declarations.\r\n- field, property, method, operator, indexer, constructor, destructor, and event declarations, as well as member declarations of properties and events, but without bodies.\r\n\r\nSemantically, there are some differences from C#:\r\n- Type names appearing in a CSNS file bind to a type by that name from the program excluding the CSNS file.\r\n- A type name of the form `A.B` (where `A` is a possibly qualified name) is considered meaningful only if `B` is a declared member of `A`. In any other case (e.g. `B` is an inherited member of `A`), it is the same as if the type `B` is not found.\r\n- It is not an error for a type not to be found; in that case the declaration containing the type name is not considered to annotate any program entity (i.e. it is ignored). Two exceptions to this are a type names appearing in a base clause or a constraints clause.\r\n  - If a type is not found in an element of a base clause, then any annotations appearing in it are ignored.\r\n  - If a type is not found in an element of a constraints clause, then any annotations appearing in it are ignored.\r\n- A type declaration in CSNS is not considered to declare a type, so it does not have the same constraints as ordinary C#\r\n  - The requirements that a concrete type implements its interfaces or its base type's abstract members does not apply to a type declared in CSNS\r\n- Pointer types are permitted even without the `unsafe` modifier.\r\n\r\n\r\n## Alternatives\r\n- We could aim to make the file format suitable for generation of a reference assembly, but that would require that type names bind. We want to use a single CSNS for more than one platform, so we prefer looser semantics.\r\n- We could permit modifiers (and variance annotations, default parameters, `object`, and tuple names) to make it easier to copy-and-paste into a CSNS file. In that case we need to decide what to do with them\r\n  - [x] Forbid them (proposed above)\r\n  - [ ] Ignore them\r\n  - [ ] Require them to match the annotated entity; if they do not match\r\n    - [ ] Produce a diagnostic; or\r\n    - [ ] Consider the CSNS declaration not to annotate that entity\r\n\r\n\r\n## Open Questions\r\n- How, precisely, do the annotations in a CSNS file affect the compilation?\r\n  - How do we \"match\" CSNS declarations with program symbols?\r\n  - Do they affect declared symbols seen through the public API, or do they only affect nullable flow analysis?\r\n  - Do attributes in CSNS get emitted if they apply to symbols in the compilation?\r\n- Should CSNS declarations be considered to apply to symbols in the compilation, or only imported symbols?\r\n","Url":"https://github.com/dotnet/roslyn/issues/31632","RelatedDescription":"Open issue \"Proposed \"Nullability Side Car Representation\"\" (#31632)"},{"Id":"388873168","IsPullRequest":true,"CreatedAt":"2018-12-08T02:03:01","Actor":"heejaechang","Number":"31631","RawContent":null,"Title":"made \"build\" to update build only error list per project rather than …","State":"open","Body":"…after whole solution is built\r\n\r\nthis is old behavior\r\n![oldbuild](https://user-images.githubusercontent.com/1333179/49680547-7c049880-fa4a-11e8-982e-b11177eebfc4.gif)\r\n\r\nand this is new behavior\r\n![newbuild](https://user-images.githubusercontent.com/1333179/49680549-81fa7980-fa4a-11e8-8e3e-ab0001bccdeb.gif)\r\n\r\nold behavior, actual error from compiler comes in as 1 shot after whole build is done.\r\nnew behavior, build only error list get updated per project\r\n\r\nthis is only for \"Build Only\" error list, live error list had per document update from the beginning.","Url":"https://github.com/dotnet/roslyn/pull/31631","RelatedDescription":"Open PR \"made \"build\" to update build only error list per project rather than …\" (#31631)"},{"Id":"388857924","IsPullRequest":true,"CreatedAt":"2018-12-08T00:05:58","Actor":"tmat","Number":"31629","RawContent":null,"Title":"Update Roslyn version to 3.0.0","State":"open","Body":"Copy `RepoToolset\\Versions.props` from Arcade and bump the version.","Url":"https://github.com/dotnet/roslyn/pull/31629","RelatedDescription":"Open PR \"Update Roslyn version to 3.0.0\" (#31629)"},{"Id":"388853051","IsPullRequest":true,"CreatedAt":"2018-12-07T23:44:03","Actor":"heejaechang","Number":"31626","RawContent":null,"Title":"added Telemetry dumper to roslyn diagnostic tool window","State":"open","Body":"people are asking how to get telemetry ID we record on code fix.\r\n\r\nso added a tool to dump that info on roslyn diagnostic tool window\r\n\r\nyou can get it from View -> Other Windows -> Roslyn Diagnostics\r\n![image](https://user-images.githubusercontent.com/1333179/49678015-bbc18500-fa36-11e8-9bb9-17d8f8d17d00.png)\r\n\r\nwhich will give you this\r\n![image](https://user-images.githubusercontent.com/1333179/49678036-d85dbd00-fa36-11e8-978c-609cc04d6aee.png)\r\n\r\nclick dump to get all telemetry guid\r\n","Url":"https://github.com/dotnet/roslyn/pull/31626","RelatedDescription":"Open PR \"added Telemetry dumper to roslyn diagnostic tool window\" (#31626)"},{"Id":"388849710","IsPullRequest":false,"CreatedAt":"2018-12-07T23:28:11","Actor":"ryzngard","Number":"31625","RawContent":null,"Title":"Dotnet-Format Found project reference without a matching metadata reference","State":"open","Body":"**Version Used**: dotnet: 2.2.200-preview-009648 ; dotnet-format: 2.11.0-beta2-63603-03+b2ae9bbaa55e93f255b111c68e65d9c538351095\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone https://github.com/ryzngard/MixedRealityToolkit-Unity.git\r\n2. checkout `feature/mrtk_packageManager`\r\n3. dotnet-format -w .\\build\\Build.sln\r\n\r\n**Expected Behavior**:\r\n\r\nFormats all code/projects without error\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nFound project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit\\MixedReality.Toolkit.csproj\r\n  Unable to load workspace.\r\n  Found project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit\\MixedReality.Toolkit.csproj\r\n  Unable to load workspace.\r\n  Found project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit\\MixedReality.Toolkit.csproj\r\n  Unable to load workspace.\r\n  Found project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit.SDK\\MixedReality.Toolkit.SDK.csproj\r\n  Unable to load workspace.\r\n  Found project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit\\MixedReality.Toolkit.csproj\r\n  Unable to load workspace.\r\n  Found project reference without a matching metadata reference: C:\\Users\\andrha\\source\\repos\\ryzn_mrtk\\build\\MixedReality.Toolkit.SDK\\MixedReality.Toolkit.SDK.csproj\r\n  Unable to load workspace.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31625","RelatedDescription":"Open issue \"Dotnet-Format Found project reference without a matching metadata reference\" (#31625)"},{"Id":"388823899","IsPullRequest":true,"CreatedAt":"2018-12-07T21:40:50","Actor":"jcouv","Number":"31624","RawContent":null,"Title":" Add CancellationToken to GetAsyncEnumerator","State":"open","Body":"- the well-known `GetAsyncEnumerator` method now takes a `CancellationToken` parameter.\r\n- an `await foreach` passes a `default` token\r\n- a pattern-based `await foreach` rejects a `GetAsyncEnumerator()` method without the token\r\n\r\nNote: I'm not generating any token checks at the moment (in either `GetAsyncEnumerator` or `MoveNextAsync` generated from an async-iterator method). This needs further discussion in LDM.","Url":"https://github.com/dotnet/roslyn/pull/31624","RelatedDescription":"Open PR \" Add CancellationToken to GetAsyncEnumerator\" (#31624)"},{"Id":"388814329","IsPullRequest":true,"CreatedAt":"2018-12-07T21:08:29","Actor":"JoeRobich","Number":"31622","RawContent":null,"Title":"[dotnet-format] Decreased the logged severity of workspace diagnostic warnings","State":"open","Body":"Set a limit on the number that are logged","Url":"https://github.com/dotnet/roslyn/pull/31622","RelatedDescription":"Open PR \"[dotnet-format] Decreased the logged severity of workspace diagnostic warnings\" (#31622)"},{"Id":"388811668","IsPullRequest":false,"CreatedAt":"2018-12-07T20:59:28","Actor":"jnm2","Number":"31621","RawContent":null,"Title":"‘Convert to foreach’ overzealously removes the foreach iteration variable","State":"open","Body":"Visual Studio 2019 Preview 1\r\n\r\nIf you invoke ‘Convert to 'foreach'’ on:\r\n```cs\r\nforeach (var item in list)\r\n{\r\n}\r\n```\r\n\r\nYou get:\r\n\r\n```cs\r\nfor (var i = 0; i < list.Length; i++)\r\n{\r\n}\r\n```\r\n\r\nBut now I have to write this myself (the actual expression is quite a bit longer than `list`):\r\n\r\n```cs\r\n    var item = list[i];\r\n```\r\n\r\nI'm not happy about this. Just because I haven't typed the statement yet that will use `item` does not mean `item` should be discarded. It just so happens that I want `i` in scope before I start typing the first statement that uses `item`.","Url":"https://github.com/dotnet/roslyn/issues/31621","RelatedDescription":"Open issue \"‘Convert to foreach’ overzealously removes the foreach iteration variable\" (#31621)"},{"Id":"388804896","IsPullRequest":false,"CreatedAt":"2018-12-07T20:35:31","Actor":"cston","Number":"31620","RawContent":null,"Title":"Field nullability incorrect in lambda","State":"open","Body":"The following should compile without warnings:\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    private object? _field;\r\n    private static void Execute(System.Func<object> f)\r\n    {\r\n    }\r\n    private void F()\r\n    {\r\n        Execute(() =>\r\n        {\r\n            _field = new object();\r\n            return _field; // warning\r\n        });\r\n    }\r\n}\r\n```\r\n```\r\n(13,20): warning CS8603: Possible null reference return.\r\n```\r\ncc @pilchie\r\n","Url":"https://github.com/dotnet/roslyn/issues/31620","RelatedDescription":"Open issue \"Field nullability incorrect in lambda\" (#31620)"},{"Id":"388804577","IsPullRequest":false,"CreatedAt":"2018-12-07T20:34:20","Actor":"jnm2","Number":"31619","RawContent":null,"Title":"CS8627 for missing generic constraint should offer a fix besides 'Upgrade to C# 8.0 *beta*'","State":"open","Body":"Visual Studio 2019 Preview 1\r\n\r\n```cs\r\npublic static class Foo\r\n{\r\n    public static T? Bar<T>(T bar)\r\n}\r\n```\r\n\r\nAt the end of the line and on `T?`, two fixes are offered that prompt to upgrade the current project or all projects to C# 8.0 due to CS8370 which is also reported now. But when I pressed Ctrl+., what I really had in mind was not having to type `↵⇥where TResult : struct` myself. A fix to add missing generic constraints would be handy.\r\n\r\nThis is just while typing the signature.  I could also imagine refactoring an existing method and wanting a fix to add a class constraint, a new constraint, or a type constraint.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31619","RelatedDescription":"Open issue \"CS8627 for missing generic constraint should offer a fix besides 'Upgrade to C# 8.0 *beta*'\" (#31619)"},{"Id":"388800129","IsPullRequest":false,"CreatedAt":"2018-12-07T20:18:56","Actor":"vsfeedback","Number":"31618","RawContent":null,"Title":"Intellisense Return Value Documentation","State":"open","Body":"<p>I can't believe this still hasn't been done in VS...can someone PLEASE make it possible to display the &lt;return&gt; xml doc content in Intellisense? The return value documentation is usually only a single line and it is extremely important to properly using methods and properties. I really don't understand why it's expected that I go to the online docs everytime I want to figure out what a method is returning.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/402037/intellisense-return-value-documentation.html\nVSTS ticketId: 743723_\n_These are the original issue comments:_\n(no comments)","Url":"https://github.com/dotnet/roslyn/issues/31618","RelatedDescription":"Open issue \"Intellisense Return Value Documentation\" (#31618)"},{"Id":"388795028","IsPullRequest":false,"CreatedAt":"2018-12-07T20:02:44","Actor":"cston","Number":"31617","RawContent":null,"Title":"EE: Avoid expanding certain nodes when NoSideEffects is set","State":"open","Body":"Check `InspectionContext.EvaluationFlags` and avoid expanding certain nodes when `DkmEvaluationFlags.NoSideEffects` is set.\r\n\r\nIn particular, avoid expanding \"Results View\" and \"Native View\".","Url":"https://github.com/dotnet/roslyn/issues/31617","RelatedDescription":"Open issue \"EE: Avoid expanding certain nodes when NoSideEffects is set\" (#31617)"},{"Id":"388783489","IsPullRequest":false,"CreatedAt":"2018-12-07T19:26:43","Actor":"jkvoch","Number":"31616","RawContent":null,"Title":"Live Unit Testing With C# 8","State":"open","Body":"**Version Used**: \r\nNot sure, using Visual Studio 2018 Preview 1.0 and C# 8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Create a project with C# 8 enabled and use nullable reference types\r\n2.  Create NUnit test project and test a class using the nullable reference types\r\n3.  Include the test project in Live Unit Testing\r\n\r\n**Expected Behavior**:\r\nVS shows the normal tested/untested passing/failing icons based on the unit test results.\r\n\r\n**Actual Behavior**:\r\nIt fails to build during the Live Unit Testing with error: \"error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context\".\r\nWhen the classes using nullable references have the \"#nullable enabled\" declaration it fails with this error:\r\n```\r\n[20:03:02.349 Error] - FatalError - System.ArgumentException: Inconsistent language versions\r\nParameter name: syntaxTrees\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference& differences)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.<EmitAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.<EmitSingleProjectAsync>d__51.MoveNext()\r\n```\r\n\r\n---\r\n\r\nMoved from dotnet/csharplang:\r\nWhen using C# 8 nullable references with Visual Studio 2019, the Live Unit Testing feature doesn't work. The build always fails with error messages like \"error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.\". I realize this is probably because I have the \"Treat warnings as error\" turned on but the solution builds fine as I have the nullable references turned on for all projects in the .csproj file.\r\n\r\nAdding \"#nullable enable\" to the files with nullable references changes this error to:\r\n```\r\n[20:03:16.156 Error] - FatalError - System.ArgumentException: Inconsistent language versions\r\nParameter name: syntaxTrees\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference& differences)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.<EmitAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.<EmitSingleProjectAsync>d__51.MoveNext()\r\n```\r\n\r\nI have C# 8 set as the language for all projects.\r\n\r\nI've been asked to tag @ManishJayaswal \r\n","Url":"https://github.com/dotnet/roslyn/issues/31616","RelatedDescription":"Open issue \"Live Unit Testing With C# 8\" (#31616)"},{"Id":"388775340","IsPullRequest":false,"CreatedAt":"2018-12-07T19:00:22","Actor":"jnm2","Number":"31615","RawContent":null,"Title":"CS1717 'Assignment made to same variable' should offer 'this.' fix","State":"open","Body":"VS 2019 Preview 1\r\n\r\n```cs\r\nclass Foo\r\n{\r\n    private object bar;\r\n\r\n    public Foo(object bar)\r\n    {\r\n        // CS1717 Assignment made to same variable; did you mean to assign something else?     \r\n        bar = bar;\r\n    }\r\n}\r\n```\r\n\r\nThis happens during refactoring enough that it would be nice to detect the field in scope with the unqualified name 'bar' and offer a fix to qualify the left-hand side. (Qualifying the right hand side would not be offered because it's a safe assumption that the parameter `bar` should have its value observed, and even if observed earlier, not overwritten.)\r\n\r\nSomething similar could be done for a field named `_bar`, if that's your cup of tea.\r\n\r\nIf the statement is in constructor and the field is readonly or the constructor is initializing a struct, that's another strong hint (CS0171 in the latter case) that this fix should be offered. ","Url":"https://github.com/dotnet/roslyn/issues/31615","RelatedDescription":"Open issue \"CS1717 'Assignment made to same variable' should offer 'this.' fix\" (#31615)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"388342926","IsPullRequest":true,"CreatedAt":"2018-12-08T00:06:44","Actor":"nattress","Number":"6653","RawContent":null,"Title":"Improvements to R2R Test Harness","State":"closed","Body":"To support multi-core testing, associate the test process's PID with the ETW filter so that only assemblies loaded by the runtime the harness started are considered.\r\n\r\nEmit the assembly name for methods that are jitted to allow grouping of methods by their assembly.\r\n\r\nAdd a new parameter, `--include` which configures the ETW filter to include all assemblies in a given folder, instead of having to specify a large number of assemblies individually.\r\n\r\nBug fixes around path casing causing events to be dropped.","Url":"https://github.com/dotnet/corert/pull/6653","RelatedDescription":"Closed or merged PR \"Improvements to R2R Test Harness\" (#6653)"},{"Id":"388854973","IsPullRequest":true,"CreatedAt":"2018-12-07T23:52:26","Actor":"trylek","Number":"6664","RawContent":null,"Title":"Additional fixes for field placement in CPAOT","State":"open","Body":"After making improvements to R2RDump to let me smoothly diff CPAOT\r\nand Crossgen code I managed to identify tests crashing to obvious\r\ninconsistencies in access to class / struct fields. There were\r\nmultiple reasons for these inconsistencies and, while I cannot claim\r\nthis change fixes all of them, it fixes quite a few.\r\n\r\nWhile our longer-term plan is to start embedding field placement\r\ninformation in the R2R executables, I believe this change is useful\r\nto both provide immediate fixes for some of the previously failing\r\nCoreCLR tests and to seed the CPAOT field placement algorithm with\r\na closer match to what CoreCLR uses - even if we decide to deviate\r\nfrom that at some point, it's still probably a reasonable starting\r\npoint.\r\n\r\n1) My original implementation of the static field layout placement\r\nwas based on the method Module::BuildStaticsOffsets but that's\r\nincorrect - this method is only used to calculate the required space\r\nfor statics of each type in the module and use this information to\r\ncalculate offsets within a big array that subsequently gets allocated\r\nas part of the DomainLocalModule / ThreadLocalModule structures.\r\nFor the actual field placement, MethodTableBuilder uses the same\r\nalgorithm as the dynamic layout placement so I unified these two\r\nand I refactored the code to cater for the two-level field resolution.\r\n\r\n2) Reverse token lookup for fields was incomplete so I fixed that.\r\n\r\n3) For static struct fields, we must set a special flag in CPAOT,\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP, this triggers\r\nthe proper double indirection code in JIT that caters for implicitly\r\nboxed struct statics in CoreCLR.\r\n\r\n4) For extra-bubble statics, we instead use a special helper\r\nREADYTORUN_HELPER_FieldAddress in accordance with the postprocessing\r\nin ZapInfo::getFieldInfo around lines 2940-2990.\r\n\r\n5) For instance fields, it turns out there's a slight difference in\r\nhow CoreRT vs. CoreCLR decides field layout for structs. In CoreRT,\r\nstructs use sequential layout by default. In CoreCLR, structs use\r\nsequential layout only when they are blittable, otherwise they use\r\nauto layout.\r\n\r\n6) As part of this change I have forked out the method\r\n\"MarshalHelpers.IsBlittableType\" into a separate static class\r\nIsBlittable because the MarshalHelpers carry around a ton of\r\ndependencies that wreak havoc when propagating to all places where\r\nthe blittable check is newly used as part of the field placement\r\nlogic. With this surgical separation I managed to make this change\r\nrequire very few changes to other projects.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6664","RelatedDescription":"Open PR \"Additional fixes for field placement in CPAOT\" (#6664)"},{"Id":"388845374","IsPullRequest":true,"CreatedAt":"2018-12-07T23:06:21","Actor":"Dotnet-GitSync-Bot","Number":"6663","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6663","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6663)"},{"Id":"388347383","IsPullRequest":true,"CreatedAt":"2018-12-07T21:58:05","Actor":"stephentoub","Number":"6655","RawContent":null,"Title":"Fix CancellationTokenRegistration.Token after CTS.Dispose","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/21394 to corert","Url":"https://github.com/dotnet/corert/pull/6655","RelatedDescription":"Closed or merged PR \"Fix CancellationTokenRegistration.Token after CTS.Dispose\" (#6655)"},{"Id":"388775575","IsPullRequest":true,"CreatedAt":"2018-12-07T20:23:02","Actor":"Dotnet-GitSync-Bot","Number":"6662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6662)"},{"Id":"388653472","IsPullRequest":true,"CreatedAt":"2018-12-07T14:18:54","Actor":"Dotnet-GitSync-Bot","Number":"6661","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6661)"},{"Id":"388602491","IsPullRequest":true,"CreatedAt":"2018-12-07T13:20:15","Actor":"Dotnet-GitSync-Bot","Number":"6660","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6660","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6660)"},{"Id":"388400207","IsPullRequest":true,"CreatedAt":"2018-12-07T10:47:49","Actor":"Dotnet-GitSync-Bot","Number":"6657","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6657","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6657)"},{"Id":"388601063","IsPullRequest":true,"CreatedAt":"2018-12-07T10:47:02","Actor":"MichalStrehovsky","Number":"6659","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6659","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6659)"},{"Id":"388588514","IsPullRequest":true,"CreatedAt":"2018-12-07T10:46:28","Actor":"MichalStrehovsky","Number":"6658","RawContent":null,"Title":"Work around an MCG bug","State":"closed","Body":"This is blocking TFS integrations.","Url":"https://github.com/dotnet/corert/pull/6658","RelatedDescription":"Closed or merged PR \"Work around an MCG bug\" (#6658)"},{"Id":"388343215","IsPullRequest":true,"CreatedAt":"2018-12-07T03:23:30","Actor":"nattress","Number":"6654","RawContent":null,"Title":"R2R all methods in entrypoint assemblies","State":"closed","Body":"Our early work retained the split that the classic RyuJit-based CoreRT compiler uses where for assemblies with a `Main` method only the set of methods statically reachable from `Main` were compiled. This was fine for a single-file AOT compiler, because we built the entire call graph across assemblies. For ready-to-run, this can cause methods needed at runtime to not get compiled if they're called in a round-about way (via dependency injection for example).","Url":"https://github.com/dotnet/corert/pull/6654","RelatedDescription":"Closed or merged PR \"R2R all methods in entrypoint assemblies\" (#6654)"},{"Id":"388365422","IsPullRequest":true,"CreatedAt":"2018-12-06T20:56:58","Actor":"Dotnet-GitSync-Bot","Number":"6656","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6656","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6656)"},{"Id":"388329912","IsPullRequest":true,"CreatedAt":"2018-12-06T19:31:58","Actor":"Dotnet-GitSync-Bot","Number":"6652","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkoritzinsky","Url":"https://github.com/dotnet/corert/pull/6652","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6652)"},{"Id":"388164134","IsPullRequest":true,"CreatedAt":"2018-12-06T13:42:11","Actor":"MichalStrehovsky","Number":"6651","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6651","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6651)"},{"Id":"387989880","IsPullRequest":true,"CreatedAt":"2018-12-06T00:52:47","Actor":"dotnet-bot","Number":"6650","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/6650","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#6650)"},{"Id":"387791081","IsPullRequest":true,"CreatedAt":"2018-12-05T16:23:29","Actor":"MichalStrehovsky","Number":"6649","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"We started getting `warning : Method [System.Memory]System.Buffers.Text.FormattingHelpers.CountHexDigits(uint64) will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: UInt64 System.Runtime.Intrinsics.X86.Lzcnt.LeadingZeroCount(UInt64)` and `warning : Method [System.Numerics.Vectors]System.Numerics.Matrix4x4.op_Multiply(Matrix4x4,float32) will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: System.Runtime.Intrinsics.Vector128_1<Single> System.Runtime.Intrinsics.X86.Sse.SetAllVector128(Single)`.\r\n\r\nMy guess is stale CoreFX.","Url":"https://github.com/dotnet/corert/pull/6649","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#6649)"},{"Id":"387572368","IsPullRequest":true,"CreatedAt":"2018-12-05T06:11:18","Actor":"Dotnet-GitSync-Bot","Number":"6648","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea","Url":"https://github.com/dotnet/corert/pull/6648","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6648)"},{"Id":"387541663","IsPullRequest":true,"CreatedAt":"2018-12-05T01:33:49","Actor":"Dotnet-GitSync-Bot","Number":"6647","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub @fiigii","Url":"https://github.com/dotnet/corert/pull/6647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6647)"},{"Id":"387355033","IsPullRequest":false,"CreatedAt":"2018-12-04T20:43:17","Actor":"deinok","Number":"6644","RawContent":null,"Title":"[Question] Build Static Libraries","State":"closed","Body":"The README.md states the following:\r\n> It can also produce standalone dynamic or static libraries that can be consumed by applications written in other programming languages. \r\n\r\nBut I can't find information about how to do it. Can sombody give me more information?","Url":"https://github.com/dotnet/corert/issues/6644","RelatedDescription":"Closed issue \"[Question] Build Static Libraries\" (#6644)"},{"Id":"387400056","IsPullRequest":true,"CreatedAt":"2018-12-04T20:43:02","Actor":"jkotas","Number":"6645","RawContent":null,"Title":"Add native library sample","State":"closed","Body":"Fixes #4987 and #6644","Url":"https://github.com/dotnet/corert/pull/6645","RelatedDescription":"Closed or merged PR \"Add native library sample\" (#6645)"},{"Id":"387437647","IsPullRequest":true,"CreatedAt":"2018-12-04T20:18:08","Actor":"Anipik","Number":"6646","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6646","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6646)"},{"Id":"387304048","IsPullRequest":true,"CreatedAt":"2018-12-04T19:08:38","Actor":"Anipik","Number":"6643","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @tannergooding","Url":"https://github.com/dotnet/corert/pull/6643","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6643)"},{"Id":"387108441","IsPullRequest":true,"CreatedAt":"2018-12-04T14:09:58","Actor":"Anipik","Number":"6642","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6642","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6642)"},{"Id":"387069035","IsPullRequest":true,"CreatedAt":"2018-12-04T03:51:07","Actor":"Anipik","Number":"6641","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6641","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6641)"},{"Id":"386937961","IsPullRequest":true,"CreatedAt":"2018-12-04T01:25:52","Actor":"MichalStrehovsky","Number":"6637","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6637","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6637)"},{"Id":"387053739","IsPullRequest":true,"CreatedAt":"2018-12-04T00:39:57","Actor":"Anipik","Number":"6640","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/6640","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6640)"},{"Id":"387000759","IsPullRequest":true,"CreatedAt":"2018-12-03T23:34:56","Actor":"Anipik","Number":"6639","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii @fiigii","Url":"https://github.com/dotnet/corert/pull/6639","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6639)"},{"Id":"386971780","IsPullRequest":true,"CreatedAt":"2018-12-03T19:39:39","Actor":"dotnet-bot","Number":"6638","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/6638","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#6638)"},{"Id":"386922274","IsPullRequest":true,"CreatedAt":"2018-12-03T18:28:19","Actor":"Anipik","Number":"6636","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @lillo42","Url":"https://github.com/dotnet/corert/pull/6636","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6636)"},{"Id":"386855555","IsPullRequest":true,"CreatedAt":"2018-12-03T14:57:17","Actor":"kbaladurin","Number":"6635","RawContent":null,"Title":"[CppCodeGen] Use ClassConstructorRunner to run cctor","State":"open","Body":"This patch makes static class initialization thread-safe: https://github.com/dotnet/corert/issues/6404","Url":"https://github.com/dotnet/corert/pull/6635","RelatedDescription":"Open PR \"[CppCodeGen] Use ClassConstructorRunner to run cctor\" (#6635)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"388920248","IsPullRequest":true,"CreatedAt":"2018-12-08T13:01:19","Actor":"dotnet-maestro[bot]","Number":"2736","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2736","RelatedDescription":"Open PR \"Update dependency files\" (#2736)"},{"Id":"388893591","IsPullRequest":false,"CreatedAt":"2018-12-08T06:49:25","Actor":"yyjdelete","Number":"2735","RawContent":null,"Title":"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview","State":"open","Body":"Move from aspnet/AspNetCore#4490\r\n\r\n### Step\r\ndotnet sdk 3.0.0-preview-27122-01 is needed.\r\n1. `dotnet new webapi`\r\n2. change the csproj to add an FrameworkReference   `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />`\r\n3. `dotnet run`\r\n\r\nIt can also be reproduce with `dotnet new console` by add more than one same FrameworkReference\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n***NOTE:***\r\nWhen the number of duplicated FrameworkReference is changed, the `xxx.runtimeconfig.json` only change after an `dotnet clean` and build, seems the cache and build have different rule in this special case? Not sure if it's another issue, or just an part of this.\r\n\r\n### Expected\r\nBuild error, or run successful.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.0.0-preview-18579-0056\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Actual\r\nBuild successful, but run failed with `Invalid runtimeconfig.json`. See the duplicate `Microsoft.AspNetCore.App` in `frameworks` here.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Details\r\ndotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n<details>\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18290\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview3-009430 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>","Url":"https://github.com/dotnet/sdk/issues/2735","RelatedDescription":"Open issue \"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview\" (#2735)"},{"Id":"388822770","IsPullRequest":false,"CreatedAt":"2018-12-08T00:32:25","Actor":"dagood","Number":"2733","RawContent":null,"Title":"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec","State":"closed","Body":"In this nupkg from a recent build:\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.sdk/3.0.100-preview.18603.1/microsoft.net.sdk.3.0.100-preview.18603.1.nupkg\r\n\r\nThe nuspec contains this line:\r\n\r\n```\r\n<repository type=\"git\" url=\"https://github.com//\" commit=\"7bb277dbfdfe52a71b9decc88897510cc8d6be42\" />\r\n```\r\n\r\n`https://github.com//` should be `https://github.com/dotnet/sdk`\r\n\r\nThis might be an Arcade issue, failure to detect the source? I'm not familiar enough with how packaging works now to quickly find where this is happening.\r\n\r\n(I was only looking for the commit, but figured I should file this issue for the wrong url anyway.)","Url":"https://github.com/dotnet/sdk/issues/2733","RelatedDescription":"Closed issue \"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec\" (#2733)"},{"Id":"388856924","IsPullRequest":true,"CreatedAt":"2018-12-08T00:01:21","Actor":"dotnet-bot","Number":"2734","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2734","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2734)"},{"Id":"388114295","IsPullRequest":false,"CreatedAt":"2018-12-07T18:53:58","Actor":"Szer","Number":"2724","RawContent":null,"Title":"FSharp.Core explicit dependency downgraded to implicit one","State":"closed","Body":"**Problem:**\r\n\r\nIf I put explicit dependency on FSharp.Core higher than implicit one (which for 2.1.500 is 4.5.2) it will downgrade it to implicit one no matter what.\r\n\r\n**Steps to reproduce**\r\n* Net SDK 2.1.500\r\n* FSproj:\r\n```fsproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup> \r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"FSharp.Core\" Version=\"4.5.4\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n* useless Program.fs\r\n```fsharp\r\nmodule A\r\nlet a = 1\r\n```\r\n* `dotnet restore` or `dotnet build`\r\n* check `FSharp.Core` version in `obj\\project.assets.json`\r\n\r\n**Expected**\r\n\r\n`FSharp.Core` should restore to explicit version, to `4.5.4`\r\n\r\n**Actual**\r\n\r\n`FSharp.Core` is being restored to implicit version, to `4.5.2`\r\n\r\n**Known workarounds**\r\n\r\n* Add `<DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>` to fsproj\r\n* Use VisualStudio 15.9.3 `ctrl-shift-B` (strangely it restores OK)\r\n* Use `Paket`\r\n\r\n**Notes**\r\n\r\nThis behavior is the reason for package degradation warnings in case any other packages require something like `>=4.5.4` or `=4.5.4`","Url":"https://github.com/dotnet/sdk/issues/2724","RelatedDescription":"Closed issue \"FSharp.Core explicit dependency downgraded to implicit one\" (#2724)"},{"Id":"388771076","IsPullRequest":false,"CreatedAt":"2018-12-07T18:47:17","Actor":"jainaashish","Number":"2732","RawContent":null,"Title":"Consume NuGet /embed assets group for interop type assemblies from NuGet package","State":"open","Body":"This is the tracking issue to update dotnet build tasks to consume new `/embed` assets group from NuGet packages for interop type assemblies so that Project System passes it as `link` instead of `ref` to compiler.\r\n\r\nCorresponding NuGet issue# https://github.com/NuGet/Home/issues/2365\r\n\r\n@livarcocc @nguerrera @dsplaisted @rrelyea ","Url":"https://github.com/dotnet/sdk/issues/2732","RelatedDescription":"Open issue \"Consume NuGet /embed assets group for interop type assemblies from NuGet package\" (#2732)"},{"Id":"388449684","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:32","Actor":"dotnet-bot","Number":"2727","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2727","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2727)"},{"Id":"388645904","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:10","Actor":"dotnet-maestro[bot]","Number":"2730","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2730","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2730)"},{"Id":"388718371","IsPullRequest":false,"CreatedAt":"2018-12-07T16:17:33","Actor":"AArnott","Number":"2731","RawContent":null,"Title":"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file","State":"closed","Body":"Building [a trivially simple VB console app](https://github.com/AArnott/SPSS.NET/blob/5ac57c55aa10611f0f4290fbd3187375ab95c468/src/SimpleDemo/SimpleDemo.vbproj#L1-L10) fails with:\r\n\r\n>vbc : error BC2001: file 'C:\\Users\\andarno\\AppData\\Local\\Temp\\.NETFramework' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\nvbc : error BC2001: file 'D:\\git\\SPSS.NET\\src\\SimpleDemo\\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\n\r\nThe VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:\r\n\r\n![image](https://user-images.githubusercontent.com/3548/49659001-1e476080-f9f8-11e8-9237-834827fd6794.png)\r\n\r\nThis repros on 15.8, 15.9, and 16.0 Preview 1.","Url":"https://github.com/dotnet/sdk/issues/2731","RelatedDescription":"Closed issue \"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file\" (#2731)"},{"Id":"388449696","IsPullRequest":true,"CreatedAt":"2018-12-07T01:30:08","Actor":"dotnet-bot","Number":"2728","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2728","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2728)"},{"Id":"388461573","IsPullRequest":false,"CreatedAt":"2018-12-07T00:57:37","Actor":"NTaylorMullen","Number":"2729","RawContent":null,"Title":"Represent FrameworkReference of transitive projects and packages in the deps.json file.","State":"open","Body":"Today transitive project/package references aren't properly represented in a deps.json. For instance given this project (Bug4332 is a web app, Bug4332RCL is a Razor class library, both targeting netcoreapp3.0):\r\n![image](https://user-images.githubusercontent.com/2008729/49620733-0f6c9980-f977-11e8-8da3-e2d28605a2e1.png)\r\n\r\nToday you get the following `Bug4332.deps.json` entry for `Bug4332RCL`:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThe min-bar expectation would be for the deps.json to look something like:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"dependencies\": {\r\n          \"Microsoft.AspNetCore.App\": \"3.0.0-preview-18579-0056\"\r\n        },\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThis is blocking [a core scenario](https://github.com/aspnet/AspNetCore/issues/4332) in ASP.NET Core MVC 3.0 of having Razor views in a class library.\r\n\r\nLastly, I imagine this issue depends on the completion of the following (please correct me if i'm wrong):\r\n- **Referencing a shared framework does not flow across ProjectReference** https://github.com/dotnet/sdk/issues/2420 \r\n- **Represent FrameworkReferences in NuGet packages and assets files** https://github.com/NuGet/Home/issues/7342 \r\n\r\n\r\n@livarcocc @dsplaisted @natemcmaster @mkArtakMSFT @rynowak","Url":"https://github.com/dotnet/sdk/issues/2729","RelatedDescription":"Open issue \"Represent FrameworkReference of transitive projects and packages in the deps.json file.\" (#2729)"},{"Id":"387725123","IsPullRequest":true,"CreatedAt":"2018-12-06T19:54:40","Actor":"dotnet-bot","Number":"2718","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2718","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2718)"},{"Id":"387725148","IsPullRequest":true,"CreatedAt":"2018-12-06T19:54:33","Actor":"dotnet-bot","Number":"2719","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2719","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2719)"},{"Id":"388363069","IsPullRequest":false,"CreatedAt":"2018-12-06T19:38:29","Actor":"sarbjithanjra","Number":"2726","RawContent":null,"Title":"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648","State":"closed","Body":"Hi on 5 Dec 2018, I downloaded the .NET Core SDK with version 2.2.100 and after install on my sytem, i checked that there is an existing 2.2.200-preview-009648 version is installed. Please let me know which one latest? it seem 2.2.100 is latest as per download page but from version number it seem 2.2.200 is latest.","Url":"https://github.com/dotnet/sdk/issues/2726","RelatedDescription":"Closed issue \"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648\" (#2726)"},{"Id":"388344039","IsPullRequest":false,"CreatedAt":"2018-12-06T18:38:39","Actor":"zawor","Number":"2725","RawContent":null,"Title":"Uninstalling may be not enough","State":"open","Body":"@KathleenDollard asked me to post dotnet/docs#9412 here so here we go:\r\n\r\nHad a lot of runtimes and sdks accumulated over time on my dev machine. At some point i decided to do the cleanup and uninstalled quite a few from under appwiz.cpl (or add/remove programs). Unfortunately after running `dotnet --list-sdks` or `dotnet --list-runtimes` i still saw those which were uninstalled... Interestingly enough i discovered that installers have left a lot of empty dirs under `C:\\Program Files\\dotnet\\sdk`, `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All` and `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App`. Removing those made `--list-sdks` and `--list-runtimes` to no longer list uninstalled runtimes/sdks.","Url":"https://github.com/dotnet/sdk/issues/2725","RelatedDescription":"Open issue \"Uninstalling may be not enough\" (#2725)"},{"Id":"387757437","IsPullRequest":false,"CreatedAt":"2018-12-05T19:45:55","Actor":"AArnott","Number":"2720","RawContent":null,"Title":" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'","State":"closed","Body":"Very similar to #1321, except that it works fine on my own machine, but [consistently fails when run in Azure Pipelines](https://dev.azure.com/azure-public/vside/_build/results?buildId=816). \r\n\r\n> C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1005: Assets file 'D:\\a\\1\\s\\obj\\Microsoft.VisualStudio.Composition.LocalizationShell\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'. Ensure that restore has run and that you have included 'netstandard1.5' in the TargetFrameworks for your project. [D:\\a\\1\\s\\src\\Microsoft.VisualStudio.Composition.LocalizationShell\\Microsoft.VisualStudio.Composition.LocalizationShell.csproj]\r\n\r\nThe [LocalizationShell project targets netstandard1.0](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition.LocalizationShell/Microsoft.VisualStudio.Composition.LocalizationShell.csproj#L7), and is referenced by [a multitargeting project that targets several frameworks including netstandard1.5](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition/Microsoft.VisualStudio.Composition.csproj#L3).\r\n\r\nThe odd thing is this works on my machine, on AppVeyor, and even on Azure Pipelines in the past. But now it's consistently failing.\r\n\r\nThis *may* be a dupe of #2563","Url":"https://github.com/dotnet/sdk/issues/2720","RelatedDescription":"Closed issue \" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'\" (#2720)"},{"Id":"387825674","IsPullRequest":false,"CreatedAt":"2018-12-05T16:44:33","Actor":"xoofx","Number":"2723","RawContent":null,"Title":"How to debug msbuild?","State":"closed","Body":"Hey,\r\n\r\nSo I would like to investigate a problem related to [slow RAR in msbuild](https://github.com/Microsoft/msbuild/issues/2015) and while I have been able to initially hack something to debug msbuild, that was very convoluted, copying files around from regular Sdk...etc.\r\n\r\nSo I would like to do this more cleanly and follow a more deterministic procedure to debug directly MsBuild project from MsBuild.sln solution  (so it is issuing a dotnet msbuild.dll or msbuild.exe)  for \r\n1.  new csproj with .NET Sdk\r\n2.  regular old csproj \r\n\r\nWhich repository should I build, variable that I should set...etc.? (Or I could avoid building by reusing maybe an installed dotnet folder?)\r\n\r\n## For new csproj\r\n\r\nLet's try just on the new csproj format for now, starting with a plain `dotnet new --name Helloworld`\r\n\r\nAssuming that I built this repository, and I'm setting the MSBuildSDKsPath to point to the `artifacts\\Debug\\bin\\Sdks`\r\n\r\nI'm getting the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/715038/49525579-5a6eaa00-f8ae-11e8-9220-1c9166120934.png)\r\n\r\n```\r\nProject \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" on node 1 (default targets).\r\nC:\\Code\\dotnet\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(33,11): error MSB4226: The imported project\r\n \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props\" was not found. Also, tried to find\r\n \"Current\\Microsoft.Common.props\" in the fallback search path(s) for $(MSBuildExtensionsPath) - \"C:\\Program Files (x86)\r\n\\MSBuild\" . These search paths are defined in \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\MSBuild.exe.Config\".\r\nConfirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search pat\r\nhs. [C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj]\r\nDone Building Project \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" (default targets) -- FAILED.\r\n```\r\n\r\nIt is trying to resolve `artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props` which is not in this folder.\r\nNot sure why it is trying `Current` by default, while the solution seems to build in this file in `artifacts\\Debug\\bin\\15.0\\Microsoft.Common.props` , so assume that the tooling version should be 15.0... but still, can I setup a MsBuild special variable path for pointing to this folder?\r\n\r\nSo likely after that, it will complain about missing NuGet resolver or similar. How do I pass them through?\r\n\r\ncc: @davkean @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2723","RelatedDescription":"Closed issue \"How to debug msbuild?\" (#2723)"},{"Id":"387824002","IsPullRequest":false,"CreatedAt":"2018-12-05T15:57:16","Actor":"vitek-karas","Number":"2722","RawContent":null,"Title":"RID publish as framework dependent app produces broken app on Linux","State":"open","Body":"The simplest repro:\r\n\r\nOn Linux (I used Ubuntu 18)\r\ninstall .NET Core SDK 2.2.100\r\nrun:\r\n`mkdir webapp`\r\n`cd webapp`\r\n`dotnet new web`\r\n`dotnet publish -c release -r linux-x64 --self-contained false`\r\n`./bin/release/netcoreapp2.2/linux-x64/publish/webapp`\r\n\r\nThis will fail to find a usable framework to run on.\r\n\r\nThe root cause is that when we publish a RID specific (so with apphost) app as framework dependent, for some reason the SDK includes `hostfxr` and `hostpolicy` libraries in the published folder. The `apphost` searches for `hostfxr` first in the local folder, then in global locations. Since it finds it in the local folder it uses that. Then it tries to resolve a framework, but on Linux where there is no global location for frameworks, it looks only in the local folder... and fails.\r\n\r\nOn Windows to works \"by luck\", we still load the `hostfxr` from the app, but then since we do have global location for frameworks, we end up loading the framework from the global location.\r\n\r\nDeleting the `hostfxr` and `hostpolicy` from the publish folder doesn't help, because for some reason they are listed as native runtime assets in the `.deps.json`. In fact there are native assets for `hostpolicy`, `hostfxr` and `apphost` which won't resolve at runtime either.\r\n\r\nThe SDK should not include `hostfxr`, `hostpolixy` in the publish folder and it should not include dependencies to the `Microsoft.NETCore.DotNetHostPolicy`, `Microsoft.NETCore.DotNetHostResolver` and `Microsoft.NETCore.DotNetAppHost` in the `.deps.json` since those bring wrong native assets.","Url":"https://github.com/dotnet/sdk/issues/2722","RelatedDescription":"Open issue \"RID publish as framework dependent app produces broken app on Linux\" (#2722)"},{"Id":"387804807","IsPullRequest":false,"CreatedAt":"2018-12-05T15:18:16","Actor":"NinoFloris","Number":"2721","RawContent":null,"Title":"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings","State":"open","Body":"Could not upgrade all projects to new 2.2.100 sdk, as we got conflict warnings for among others \r\n\r\n```\r\n1:7>/usr/local/share/dotnet/sdk/2.2.100/Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Authentication.Abstractions\" that couldnot be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/projpath]\r\n```\r\n\r\n- Microsoft.Extensions.Options\r\n- Microsoft.Extensions.DependencyInjection.Abstractions\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.Extensions.Configuration.Abstractions\r\n- Microsoft.AspNetCore.Hosting\r\n- Microsoft.AspNetCore.Hosting.Abstractions\r\n- Microsoft.EntityFrameworkCore\r\n- Microsoft.AspNetCore.WebUtilities\r\n- Microsoft.AspNetCore.Authentication.Abstractions\r\n\r\nWhat all of these packages have in common is that they list a 2.2.0 release on nuget.org\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Options/2.2.0 and if you look carefully they are all at Downloads: 0. \r\n\r\nWhich is why msbuild detailed logs gives errors like these \r\n\r\n```\r\n         Dependency \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n[...]\r\nThere was a conflict between \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was chosen because it was primary and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was not.\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll].\r\n                 /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n                   Project file item includes which caused reference \"/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\".\r\n                     /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [].\r\n                 myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n                   Project file item includes which caused reference \"myproj/bin/Debug/netcoreapp2.2/myproj.dll\".\r\n                     myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n```\r\n\r\n**Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".**\r\n\r\nNow that seems like a problem","Url":"https://github.com/dotnet/sdk/issues/2721","RelatedDescription":"Open issue \"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings\" (#2721)"},{"Id":"387707214","IsPullRequest":false,"CreatedAt":"2018-12-05T11:16:12","Actor":"mcm-ham","Number":"2717","RawContent":null,"Title":"2.2.100 causes 2.1.500 build failure: The \"CheckForImplicitPackageReferenceOverrides\" task could not be loaded from the assembly","State":"closed","Body":"If I install 2.2.100, and then add global.json to a project to use 2.1.500 I then get the following build failure:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(212,5): error MSB4062: The \"CheckForImplicitPackageReferenceOverrides\" task could not be loaded from the assembly C:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\netcoreapp2.0/Microsoft.NET.Build.Tasks.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\repo\\netstandard-lib.csproj] [C:\\repo\\netcoreapp-site.csproj]\r\n```\r\nIf I uninstall 2.2.100 then the project builds fine.","Url":"https://github.com/dotnet/sdk/issues/2717","RelatedDescription":"Closed issue \"2.2.100 causes 2.1.500 build failure: The \"CheckForImplicitPackageReferenceOverrides\" task could not be loaded from the assembly\" (#2717)"},{"Id":"387433997","IsPullRequest":true,"CreatedAt":"2018-12-05T06:27:18","Actor":"nugetlurker","Number":"2713","RawContent":null,"Title":"Insert NuGet Build 4.9.2-rtm.5706 into sdk","State":"closed","Body":"Insert NuGet Build 4.9.2-rtm.5706 into sdk release/2.2.1xx branch","Url":"https://github.com/dotnet/sdk/pull/2713","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.2-rtm.5706 into sdk\" (#2713)"},{"Id":"387434108","IsPullRequest":true,"CreatedAt":"2018-12-05T06:06:52","Actor":"nugetlurker","Number":"2714","RawContent":null,"Title":"Insert NuGet Build 4.9.2-rtm.5706 into sdk","State":"closed","Body":"Insert NuGet Build 4.9.2-rtm.5706 into sdk release/2.1.5xx branch","Url":"https://github.com/dotnet/sdk/pull/2714","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.2-rtm.5706 into sdk\" (#2714)"},{"Id":"387070085","IsPullRequest":false,"CreatedAt":"2018-12-05T00:17:21","Actor":"ryanbrandenburg","Number":"2710","RawContent":null,"Title":"SNK is not considered when determining if a re-build is required","State":"closed","Body":"1. Build a project which has InternalsVisibleTo into another project using any given StrongNameKey.\r\n2. Build the project again, with a different StrongNameKey.\r\n3. See an error like:\r\n```\r\nFriend access was granted by 'Microsoft.Extensions.Configuration.UserSecrets, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35', but the public key of the output assembly ('0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9') does not match that specified by the InternalsVisibleTo attribute in the granting assembly.\r\n```\r\nThe base project wasn't rebuilt with the new key.","Url":"https://github.com/dotnet/sdk/issues/2710","RelatedDescription":"Closed issue \"SNK is not considered when determining if a re-build is required\" (#2710)"},{"Id":"387482485","IsPullRequest":false,"CreatedAt":"2018-12-04T21:14:50","Actor":"tmat","Number":"2716","RawContent":null,"Title":"NRE from GenerateDepsFile during Roslyn build","State":"open","Body":"This is a non-standard build with my local changes. Not sure how to repro this exactly.\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009426\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.NET.Build.Tasks.ReferenceInfo.GetVersion(ITaskItem referencePath)\r\n   at Microsoft.NET.Build.Tasks.ReferenceInfo.CreateReferenceInfo(ITaskItem referencePath)\r\n   at Microsoft.NET.Build.Tasks.ReferenceInfo.CreateReferenceInfos(IEnumerable`1 referencePaths)\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [D:\\R3\\src\\Workspaces\\CSharp\\Portable\\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]\r\n```\r\n\r\nbinlog:\r\n[Binlog.zip](https://github.com/dotnet/sdk/files/2646153/Binlog.zip)\r\n\r\n`Binaries\\Obj\\Microsoft.CodeAnalysis.CSharp.Workspaces\\project.assets.json`\r\n[project.assets.zip](https://github.com/dotnet/sdk/files/2646158/project.assets.zip)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2716","RelatedDescription":"Open issue \"NRE from GenerateDepsFile during Roslyn build\" (#2716)"},{"Id":"387443610","IsPullRequest":true,"CreatedAt":"2018-12-04T19:27:34","Actor":"Gwindalmir","Number":"2715","RawContent":null,"Title":"Spaces in the configuration name create invalid preprocessor defines","State":"open","Body":"If you have a custom configuration, such as \"Release Obfuscated\", the implicit defines created contain spaces, but they don't throw any compiler errors. Though they are still unusable.\r\nReplace spaces if they exist in the configuration name.\r\n\r\nFor example, as shown in Visual Studio IDE:\r\n\r\n`NETSTANDARD2_0;RELEASE OBFUSCATED;MYDEFINE`","Url":"https://github.com/dotnet/sdk/pull/2715","RelatedDescription":"Open PR \"Spaces in the configuration name create invalid preprocessor defines\" (#2715)"},{"Id":"387423413","IsPullRequest":false,"CreatedAt":"2018-12-04T18:33:54","Actor":"livarcocc","Number":"2712","RawContent":null,"Title":"Use TestRunnerAdditionalArguments with arcade","State":"open","Body":"There has been a change in arcade that changed `XUnitRunnerAdditionalArguments` to `TestRunnerAddtionalArguments`.\r\n\r\nWe will have to re-act to it here once that build becomes available.","Url":"https://github.com/dotnet/sdk/issues/2712","RelatedDescription":"Open issue \"Use TestRunnerAdditionalArguments with arcade\" (#2712)"},{"Id":"387376531","IsPullRequest":false,"CreatedAt":"2018-12-04T16:40:00","Actor":"poke","Number":"2711","RawContent":null,"Title":"2.2.100 final release can be installed side-by-side with the 2.2.100 from 2.2.1xx latest feed","State":"open","Body":"I downloaded the 2.2.100 SDK earlier today from [dotnet/core-sdk](https://github.com/dotnet/core-sdk#installers-and-binaries) which gave me a `dotnet-sdk-latest-win-x64.exe`. That SDK has been versioned as 2.2.100 for a while already and when installing it, it _is_ a 2.2.100 SDK that is being installed.\r\n\r\nNow, on [dotnet.microsoft.com](https://dotnet.microsoft.com/download), the 2.2 release is now official and a final release for 2.2.100 is available.\r\n\r\nUpon comparing the `dotnet-sdk-2.2.100-win-x64.exe` with the installer downloaded earlier showed that it is actually a different file, although both are expected to contain 2.2.100. What’s worse, I can install both versions side-by-side so I actually get two entries in Windows:\r\n\r\n![Two identical SDKs in programs & settings](https://user-images.githubusercontent.com/132240/49457558-5594f200-f7eb-11e8-9231-1629d6bb7b65.png)\r\n\r\nOf course, since both SDKs have the same version, they both installed into the same folder, so the `dotnet` CLI will only see one SDK. But ideally, the previously released 2.2.100 SDK should have either be the identical version as the now-released final 2.2.100, or it should have been a different version.","Url":"https://github.com/dotnet/sdk/issues/2711","RelatedDescription":"Open issue \"2.2.100 final release can be installed side-by-side with the 2.2.100 from 2.2.1xx latest feed\" (#2711)"},{"Id":"387059568","IsPullRequest":true,"CreatedAt":"2018-12-04T01:00:09","Actor":"dotnet-bot","Number":"2709","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2709","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2709)"},{"Id":"386316667","IsPullRequest":true,"CreatedAt":"2018-12-03T19:55:22","Actor":"dotnet-bot","Number":"2708","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2708","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2708)"},{"Id":"386310438","IsPullRequest":false,"CreatedAt":"2018-11-30T19:00:58","Actor":"chabiss","Number":"2707","RawContent":null,"Title":"Need \"Designer.RuntimeConfig.Json\" at design-time compilation for the designers (WPF and Winforms) to work ","State":"open","Body":"The surface processes for WPF and Winforms will be shipped as part of VS, but they will not include the generated runtimeconfig.Json in the setup. \r\n\r\nWhen a new project is created, we need the designer process to know which framework the surface process needs to bind to. For this, a design-time build needs to provide the runtime config for the process to use in order to launch the surface process. \r\n\r\nThe flow is as follow: \r\n\r\n1.\tGenerating Designer.RuntimeConfig.Json (Designer.Deps.Json) and at design-time. \r\n\r\n- Those design file should be generated under the obj directory\r\n- \"Microsoft.NETCore.DotNetHostPolicy.SetAppPaths\": true” needs to be included in the config file.\r\n\r\n2.\tNew OutputGroups \"DesignerOutput\"?  that gives us all the files that need to be copied into ShadowCache. This would include the generated Designer.RuntimeConfig.Json \r\n\r\n- Project.ConfigurationManager.Configurations.Item.OutputGroups(\"DesignerOutput\")\r\n","Url":"https://github.com/dotnet/sdk/issues/2707","RelatedDescription":"Open issue \"Need \"Designer.RuntimeConfig.Json\" at design-time compilation for the designers (WPF and Winforms) to work \" (#2707)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":".NET Core November Update - 2.1.6 and SDK 2.1.500","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console apps. ASP.NET Core is not yet functional.\r\n\r\nSee following known issues:\r\n\r\n* [dotnet/core-sdk #75](https://github.com/dotnet/core-sdk/issues/75)\r\n* [dotnet/core-sdk #76](https://github.com/dotnet/core-sdk/issues/76)\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"},{"Id":"304852590","IsPullRequest":false,"CreatedAt":"2018-03-13T17:01:52","Actor":"blowdart","Number":"62","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/28010 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be updated to target the updated .NET Core runtime, recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, update your application to target the updated .NET Core runtime, recompile and redeploy. To update your runtime version edit the `RuntimeFrameworkVersion` property in the project's .csproj file to indicate the desired target version. For example:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <RuntimeFrameworkVersion>2.0.6</RuntimeFrameworkVersion>\r\n</PropertyGroup>\r\n```\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `{applicationName}.runtimeconfig.json` file for that application., where `{applicationName}` is the name of the executable, for example `example.exe` would have a runtime configuration file titled `example.runtimeconfig.json`. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `{applicationName}.runtimeconfig.json` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.2 (Mar 26, 2018): Corrected instructions for runtimeconfig.json\r\nV1.1 (Mar 14, 2018): Added instructions for self contained application retargetting.\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.2_\r\n_Last Updated 2018-03-26_","Url":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service\" (#62)"},{"Id":"300505281","IsPullRequest":false,"CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Number":"61","RawContent":null,"Title":"New offline books released for Visual Studio 2017","State":"open","Body":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Help Viewer installation\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Add and Remove Content\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)","Url":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Open issue \"New offline books released for Visual Studio 2017\" (#61)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1070731847620050944","CreatedAt":"2018-12-06T17:29:00+00:00","UserScreenname":"dotnet","Text":"Learn about the latest F# Tooling Updates for Visual Studio 2017 from @_cartermp in this episode of the #OnDotNet s… https://t.co/wSjVH0qlRz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":15,"RawContent":null},{"Id":"1070171866193571840","CreatedAt":"2018-12-05T04:23:50+00:00","UserScreenname":"dotnet","Text":"Imagine you could draw an architecture and have it converted to an Azure environment. Silly? You bet.  But also ins… https://t.co/A13GJJ7iEw","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":61,"FavoriteCount":19,"RawContent":null},{"Id":"1070077811283632130","CreatedAt":"2018-12-04T22:10:05+00:00","UserScreenname":"dotnet","Text":"Happening now @ #MSFTConnect - Join @CoolCSH &amp; Mike Harsh as they explore the latest #dotNET Core release. PLUS, yo… https://t.co/0yWWIL76wp","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":19,"FavoriteCount":2,"RawContent":null},{"Id":"1070033626551721989","CreatedAt":"2018-12-04T19:14:31+00:00","UserScreenname":"dotnet","Text":"#MSFTConnect announcement: #dotNET Core 2.2 is now available for download. \n\n...now w/ improvements to #ASPNET Core… https://t.co/lkrvCr12Oc","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":196,"FavoriteCount":126,"RawContent":null},{"Id":"1070007006088425472","CreatedAt":"2018-12-04T17:28:44+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.8 – Machine Learning for .NET https://t.co/8tFKK3l4H8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":80,"FavoriteCount":45,"RawContent":null},{"Id":"1070005066231373824","CreatedAt":"2018-12-04T17:21:02+00:00","UserScreenname":"dotnet","Text":"Heard @ #MSFTConnect, #dotNET Core 3 is now in public preview - complete w/ support for WPF, Windows Forms, &amp; EF6.… https://t.co/wCMXNwi4tQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":227,"FavoriteCount":129,"RawContent":null}]}},"RunOn":"2018-12-09T05:30:46.8615448Z","RunDurationInMilliseconds":18974}