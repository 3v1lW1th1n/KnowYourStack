{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6975177775","Type":"PullRequestEvent","CreatedAt":"2017-12-12T05:26:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15470","RelatedDescription":"Merged pull request \"Make EventCacheKey IEquatable\" (#15470) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/coreclr/issues/15415"},{"Id":"6975177773","Type":"IssuesEvent","CreatedAt":"2017-12-12T05:26:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15415","RelatedDescription":"Closed issue \"WindowsRuntimeMarshal.EventCacheKey should implement GetHashCode, Equals\" (#15415) at dotnet/coreclr","RelatedBody":"The struct [`EventCacheKey`](https://github.com/dotnet/coreclr/blob/5304962d18bccdfe84f08c7ffb1230c3c4d1763a/src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/WindowsRuntimeMarshal.cs#L354-L363) is used as a dictionary key so should implement `IEquatable<T>` and `GetHashCode`, `Equals`"},{"Id":"6975011008","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:14:16","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15478","RelatedDescription":"Merged pull request \"Fix arm/arm64 localloc\" (#15478) at dotnet/coreclr","RelatedBody":"In the loop, non-initialized memory case, the stack probing code\r\nhad silent bad codegen, as follows:\r\n```\r\nmov     r4, 0x4000\r\nsubs    r4, sp, r4\r\nbvc     SHORT G_M3294_IG03\r\nmovs    r4, 0\r\n\r\nG_M3294_IG03:\r\n\r\nldr     r0, [sp]\r\nsub     r0, sp, 0x1000\r\ncmp     r0, r4\r\nblo     SHORT G_M3294_IG04\r\nmov     sp, r0              // Before fix, this was \"mov sp, r4\"\r\nb       SHORT G_M3294_IG03\r\n\r\nG_M3294_IG04:\r\n```"},{"Id":"6975008182","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:13:05","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15481","RelatedDescription":"Merged pull request \"Up pri-1 timeouts again\" (#15481) at dotnet/coreclr","RelatedBody":"180 minutes was still not enough; we were still getting timeouts.\r\nUp it to 240 minutes."},{"Id":"6974837871","Type":"IssuesEvent","CreatedAt":"2017-12-12T03:05:33","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15197","RelatedDescription":"Closed issue \"Coreclr build fails with error :  __declspec attribute 'selectany' is not supported \" (#15197) at dotnet/coreclr","RelatedBody":"I am trying to build coreclr using yocto for Raspberry pi platform. I am using the bitbake layer from https://github.com/Tragetaschen/meta-aspnet.\r\nI am getting compilation issue as below:\r\n\r\n1.\r\n> /coreclr/2.0.0-r0/git/src/inc/cor.h:2210:1: error: __declspec attribute 'selectany' is not supported [-Werror,-Wignored-attributes]\r\nSELECTANY const mdToken g_tkCorEncodeToken[4] ={mdtTypeDef, mdtTypeRef, mdtTypeSpec, mdtBaseType};\r\n^\r\n/build/tmp/work/xxx-linux-gnueabi/coreclr/2.0.0-r0/git/src/inc/cor.h:2207:41: note: expanded from macro 'SELECTANY'\r\n    #define SELECTANY extern __declspec(selectany)\r\n\r\nalso below error\r\n2. \r\n>/build/tmp/work/xxx-linux-gnueabi/coreclr/2.0.0-r0/git/src/pal/src/loader/module.cpp:1176:5: error: lambda capture '__param' is not used [-Werror,-Wunused-lambda-capture]\r\n    PAL_EXCEPT(EXCEPTION_EXECUTE_HANDLER)\r\n    ^\r\n/build/tmp/work/xxx-linux-gnueabi/coreclr/2.0.0-r0/git/src/pal/inc/pal.h:6091:44: note: expanded from macro 'PAL_EXCEPT'\r\n    auto exceptionFilter = [&disposition, &__param](PAL_SEHException& ex)       \\\r\n\r\nPlease suggest what could be the issue"},{"Id":"6974837119","Type":"PullRequestEvent","CreatedAt":"2017-12-12T03:05:18","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15477","RelatedDescription":"Merged pull request \"fix CoreCLR build errors with clang5.0.\" (#15477) at dotnet/coreclr","RelatedBody":"The PR combines fix for the wrong spmi methodContext  explicit constructor and @janvorli's fix for an unused lambda parameter.\r\n\r\nWith this fixes I was able to build CoreCLR with clang 5.0 on Ubuntu 14.04.\r\nFix #14757  and #15197."},{"Id":"6974707560","Type":"PullRequestEvent","CreatedAt":"2017-12-12T02:19:15","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15482","RelatedDescription":"Opened pull request \"Remove undefined and unused getPersonalityValue function\" (#15482) at dotnet/coreclr","RelatedBody":"Remove undefined and unused `getPersonalityValue` function from `CEECompileInfo`"},{"Id":"6974635940","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:54:22","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15481","RelatedDescription":"Opened pull request \"Up pri-1 timeouts again\" (#15481) at dotnet/coreclr","RelatedBody":"180 minutes was still not enough; we were still getting timeouts.\r\nUp it to 240 minutes."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6975027886","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:21:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8199","RelatedDescription":"Merged pull request \"Write UTF-8 BOM for solution files.\" (#8199) at dotnet/cli","RelatedBody":"Currently the solution file written out by the `sln` command uses a\r\nUTF-8 encoding without a BOM.  This causes problems when the solution\r\nfile contains non-ASCII code points because Visual Studio and MSBuild\r\nwill not use a UTF-8 encoding when reading the solution file if the\r\nBOM is omitted.\r\n\r\nThis commit causes the BOM to always be written when writing the\r\nsolution files.\r\n\r\nFixes #8184.\r\n"},{"Id":"6975027882","Type":"IssuesEvent","CreatedAt":"2017-12-12T04:21:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8184","RelatedDescription":"Closed issue \"dotnet sln needs to encode UTF8 w/ BOM\" (#8184) at dotnet/cli","RelatedBody":"VS and MSBuild seem to treat the sln file with a default ANSI encoding if there is no BOM, but we're writing it as UTF-8 without BOM.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n> mkdir é\r\n> cd é\r\n> dotnet new console\r\n> dotnet new sln\r\n> dotnet sln add é.csproj\r\n> dotnet build\r\n```\r\n## Expected  behavior\r\n Build succeeds\r\nOpens fine in VS\r\n\r\n## Actual behavior\r\nBuild fails\r\nProjects are not found when opened in VS\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\NuGet.targets(227,5): warning MSB3202: The project file \"D:\\Temp\\é\\Ã©.csproj\" was not found. [D:\\Temp\\é\\é.sln]\r\nD:\\Temp\\é\\Ã©.csproj : warning NU1503: Skipping restore for project 'D:\\Temp\\é\\Ã©.csproj'. The project file may be invalid or missing targets required for restore. [D:\\Temp\\é\\é.sln]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\NuGet.targets(103,5): warning : Unable to find a project to restore! [D:\\Temp\\é\\é.sln]\r\nD:\\Temp\\é\\é.sln.metaproj : error MSB3202: The project file \"D:\\Temp\\é\\Ã©.csproj\" was not found. [D:\\Temp\\é\\é.sln]\r\n```\r\n\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6975027351","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:21:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8198","RelatedDescription":"Merged pull request \"Merge dev/release/2.0 into dev/repo-refactoring\" (#8198) at dotnet/cli","RelatedBody":"cc @johnbeisner @nguerrera "},{"Id":"6975015915","Type":"PullRequestEvent","CreatedAt":"2017-12-12T04:16:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8214","RelatedDescription":"Opened pull request \"Updating roslyn to a version with the vbcscompiler.\" (#8214) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6974422242","Type":"PullRequestEvent","CreatedAt":"2017-12-12T00:40:50","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8212","RelatedDescription":"Merged pull request \"Fixing \"update-dependencies\" script\" (#8212) at dotnet/cli","RelatedBody":"NuGet.Config is no longer present - therefore, explicitly state where to get this script's dependencies.\r\n\r\n\r\nTesting:\r\nRun on local box: \"build_projects\\update-dependencies\\update-dependencies.ps1 -Update\"\r\nYielded version changes to:\r\nMicrosoftNETCoreAppPackageVersion\r\nMicrosoftDotNetPlatformAbstractionsPackageVersion\r\nMicrosoftExtensionsDependencyModelPackageVersion"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6964037348","Type":"IssuesEvent","CreatedAt":"2017-12-08T19:53:15","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/601","RelatedDescription":"Opened issue \"Understanding NETStandard.Library as a dependancy in my nuspec\" (#601) at dotnet/standard","RelatedBody":"Should a NETStandard.Library dependency appear in a nuspec?\r\n\r\nWhat does it do to projects that reference the nupkg versus not having it in the nuspec? If my netstandard1.6 library chooses to depend on 1.6.1, doesn't that force any dependent library to also depend on 1.6.1+? Is that a good thing and is that why you'd put it in a nuspec?\r\n\r\nOut of 1.6.0, 1.6.1, 2.0.0, and 2.0.1, the SDK picks 1.6.1 and 2.0.0 to reference for netstandard1.6 and netstandard2.0. Why not 2.0.1 for both?\r\n\r\nIs there a changelog that summarizes the differences in 1.6.1, 2.0.0 and 2.0.1?\r\n\r\nAre there docs that answer these questions? This is the only information I've been able to glean so far which hints that keeping it in the nuspec is correct, but it doesn't answer any of my other questions: \r\n![image](https://user-images.githubusercontent.com/8040367/33782541-21670bc0-dc27-11e7-9071-ac023a71c840.png)\r\n(https://docs.microsoft.com/en-us/nuget/guides/create-net-standard-packages-vs2017#package-the-component)\r\n"},{"Id":"6963685770","Type":"PullRequestEvent","CreatedAt":"2017-12-08T18:25:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/600","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02308-01 (master)\" (#600) at dotnet/standard","RelatedBody":""},{"Id":"6962871705","Type":"IssuesEvent","CreatedAt":"2017-12-08T15:22:13","Actor":"ignatandrei","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/599","RelatedDescription":"Opened issue \".NET Standard compatibility with .NET Framework 4.7.1\" (#599) at dotnet/standard","RelatedBody":"Hello\r\nThe page https://docs.microsoft.com/en-us/dotnet/standard/net-standard  list compatibility of .NET Standard 1.6 with .NET Framework 4.6.2 . Latest .NET Framework is 4.7.1 \r\nWhat is the compatibility between 4.7.1 and .NET Standard  ?"},{"Id":"6960147160","Type":"IssuesEvent","CreatedAt":"2017-12-08T01:36:30","Actor":"taoyouh","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/598","RelatedDescription":"Opened issue \"SslStream.ShutdownAsync available?\" (#598) at dotnet/standard","RelatedBody":"In .NET Core, we can use SslStream.ShutdownAsync to properly shut down an SSL stream. But this API is not present in .NET Standard. Will this API be added to .NET Standard? Or how can we correctly shutdown an SSL stream?"},{"Id":"6960090807","Type":"PullRequestEvent","CreatedAt":"2017-12-08T01:15:32","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/597","RelatedDescription":"Merged pull request \"Remove an 's'\" (#597) at dotnet/standard","RelatedBody":"\"for a savings of\" -> \"for a saving of\" in the console output"},{"Id":"6958563281","Type":"PullRequestEvent","CreatedAt":"2017-12-07T18:42:57","Actor":"markrendle","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/597","RelatedDescription":"Opened pull request \"Remove an 's'\" (#597) at dotnet/standard","RelatedBody":"\"for a savings of\" -> \"for a saving of\" in the console output"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6975146890","Type":"IssuesEvent","CreatedAt":"2017-12-12T05:13:19","Actor":"RussellHaley","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25811","RelatedDescription":"Closed issue \"My build is failing  on Windows 10 \" (#25811) at dotnet/corefx","RelatedBody":"I have been getting build errors for a couple of days. I  just updated to ec6014e and it's the same error so I don't suspect the code. The following is an example:\r\n\r\nC:\\Users\\russh\\Git\\dotnet\\corefx\\src\\shims\\ApiCompat.proj(76,5): error : TypesMustExist : Type 'System.ComponentModel.Composition.AttributedModelServices' does not exi\r\nst in the implementation but it does exist in the contract.\r\n\r\nThe complete output is here: https://pastebin.com/4pjSMYnp\r\n\r\nThe errors seem to start after the following warning:\r\n\r\nEXEC : ApiCompat warning : 0 : Found 'System.ComponentModel.Composition' with PublicKeyToken 'b77a5c561934e089' instead of 'b03f5f7f11d50a3a'. [C:\\Users\\russh\\Git\\dotn\r\net\\corefx\\src\\shims\\ApiCompat.proj]\r\n\r\nCan anyone tell me what I've done wrong?"},{"Id":"6974836611","Type":"IssuesEvent","CreatedAt":"2017-12-12T03:05:05","Actor":"tb-mtg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25852","RelatedDescription":"Opened issue \"ASP.NET Core Web Application Visual Basic (VB)\" (#25852) at dotnet/corefx","RelatedBody":"Any idea on when we will be able to create new projects for ASP.NET Core Web Application using Visual Basic?"},{"Id":"6974719279","Type":"PullRequestEvent","CreatedAt":"2017-12-12T02:23:28","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25851","RelatedDescription":"Opened pull request \"Update comment in S.D.SqlClient about why GC.KeepAlive isn't needed.\" (#25851) at dotnet/corefx","RelatedBody":"The comment says it isn't needed because of `OnStateChange`, but this appears outdated. It's still not needed though because the `ReRegisterForFinalize` below it will keep it rooted.\r\n\r\nCloses #6116"},{"Id":"6974624689","Type":"IssuesEvent","CreatedAt":"2017-12-12T01:50:26","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/10090","RelatedDescription":"Closed issue \"Enable coverage for test code (required for Unit and PAL testing)\" (#10090) at dotnet/corefx","RelatedBody":"Currently `/p:Coverage=true` excludes Test code. This leaves production code within all Unit and PAL tests without code coverage.\n\nA workaround is to to manually write a script to remove the `-filter:\" -[*.Tests]*\"` portion from OpenCover:\n\n``` batchfile\ncall S:\\c2\\packages/OpenCover\\4.6.519\\tools\\OpenCover.Console.exe -oldStyle -filter:\"+[*]* -[xunit.*]*\" -excludebyfile:\"*\\Common\\src\\System\\SR.*\" -nodefaultfilters -excludebyattribute:*.ExcludeFromCodeCoverage* -skipautoprops -hideskipped:All -threshold:1 -returntargetcode -register:user -target:CoreRun.exe -output:S:\\c2\\bin/tests/coverage\\System.Net.NameResolution.Pal.Tests.coverage.xml -targetargs:\"xunit.console.netcore.exe System.Net.NameResolution.Pal.Tests.dll  -xml testResults.xml -notrait Benchmark=true  -notrait category=failing -notrait category=nonwindowstests \"\n\nS:\\c2\\packages/ReportGenerator\\2.4.3\\tools\\ReportGenerator.exe -targetdir:S:\\c2\\bin/tests/coverage\\ -reporttypes:Html;Badges -reports:S:\\c2\\bin/tests/coverage\\System.Net.NameResolution.Pal.Tests.coverage.xml\n```\n\nIt would be great if we could have /p:CoverageAll to remove the Test code filter which in these cases is actually the production code directly referenced by the test project.\n"},{"Id":"6974602594","Type":"IssuesEvent","CreatedAt":"2017-12-12T01:42:34","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25850","RelatedDescription":"Opened issue \"Add MemoryExtension APIs to get parity with array APIs\" (#25850) at dotnet/corefx","RelatedBody":"As part of completing the  MemoryExtensions feature - https://github.com/dotnet/corefx/issues/24880 - here are the proposed Span extension APIs that should get added to get parity with the available APIs on array.\r\n\r\n## Proposed API Additions\r\n```C#\r\npublic static class MemoryExtensions\r\n{\r\n    // Slice + CopyTo APIs can be used instead, hence we don't need the overloads\r\n    //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, Span<T> destinationSpan, int length);\r\n    //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);\r\n    \r\n    // Span CopyTo API is already \"constrained\" in that if it throws an exception, the destination remains unchanged. Hence, we don't need this API\r\n    //public static void ConstrainedCopy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);\r\n    \r\n   public static bool Exists<T>(this ReadOnlySpan span, Predicate<T> match);\r\n\r\n   public static T Find<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    public static int FindIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    // Slice the span before calling the method above, hence we don't need the overloads\r\n    //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);\r\n    //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);\r\n    \r\n    public static T FindLast<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    public static int FindLastIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    // Slice the span before calling the method above, hence we don't need the overloads\r\n    //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);\r\n    //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);\r\n    \r\n    public static T[] FindAll<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n\r\n    public static void Reverse<T>(this Span<T>);\r\n    // Slice the span before calling the method above, hence we don't need the overload\r\n    //public static void Reverse<T>(this Span<T>, int index, int length); \r\n\r\n    public static bool TrueForAll<T>(this ReadOnlySpan span, Predicate<T> match);\r\n\r\n}\r\n```\r\n\r\n\r\n## Sample Usage and Rationale\r\nThe API usage should be almost identical to the Array API usage. Getting API parity with array makes it easier for customers to port their array-based code to Span wherever possible.\r\n\r\ncc @KrzysztofCwalina, @dotnet/corefxlab-contrib, @stephentoub "},{"Id":"6974593943","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:39:28","Actor":"joshfree","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25807","RelatedDescription":"Merged pull request \"Re-enable additional tests on WSL\" (#25807) at dotnet/corefx","RelatedBody":"Related https://github.com/Microsoft/BashOnWindows/issues/1011 and https://github.com/Microsoft/BashOnWindows/issues/308"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6975147802","Type":"PullRequestEvent","CreatedAt":"2017-12-12T05:13:42","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23726","RelatedDescription":"Merged pull request \"Doc feature branch management in jenkins\" (#23726) at dotnet/roslyn","RelatedBody":"Document to describe how feature branches are managed in Jenkins. In particular\r\nhow to get the changes to netci.groovy to reflect in PRs made to the branch.\r\n"},{"Id":"6975068802","Type":"IssuesEvent","CreatedAt":"2017-12-12T04:39:15","Actor":"yaakov-h","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23735","RelatedDescription":"Opened issue \"\"Use auto properties\" code fix produces invalid code for explicitly implemented interface properties\" (#23735) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2017 Preview\r\nVersion 15.6.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Load the following code in the editor:\r\n\r\n```cs\r\nnamespace RoslynSandbox\r\n{\r\n\tpublic interface IFoo\r\n\t{\r\n\t\tobject Bar { get; }\r\n\t}\r\n\r\n\tclass Foo : IFoo\r\n\t{\r\n\t\tpublic Foo(object bar)\r\n\t\t{\r\n\t\t\tthis.bar = bar;\r\n\t\t}\r\n\r\n\t\treadonly object bar;\r\n\r\n\t\tobject IFoo.Bar\r\n\t\t{\r\n\t\t\tget { return bar; }\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n2. Note that line 15 (`readonly object bar;`) is greyed out.\r\n3. Click on line 15\r\n4. Select the lightbulb\r\n5. Select \"Use auto properties\"\r\n\r\n**Expected Behavior**:\r\n\r\nThe resulting code is valid C# and compiles.\r\n\r\n**Actual Behavior**:\r\n\r\nThe resulting code is invalid and does not compile:\r\n\r\n```cs\r\nnamespace RoslynSandbox\r\n{\r\n\tpublic interface IFoo\r\n\t{\r\n\t\tobject Bar { get; }\r\n\t}\r\n\r\n\tclass Foo : IFoo\r\n\t{\r\n\t\tpublic Foo(object bar)\r\n\t\t{\r\n\t\t\tthis.RoslynSandbox.IFoo.Bar = bar;\r\n\t\t}\r\n\r\n\t\tobject IFoo.Bar { get; }\r\n\t}\r\n}\r\n```\r\n"},{"Id":"6975023874","Type":"IssuesEvent","CreatedAt":"2017-12-12T04:20:01","Actor":"livarcocc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23734","RelatedDescription":"Opened issue \"VBCSCompiler hangs in CLI build\" (#23734) at dotnet/roslyn","RelatedBody":"PR is here: https://github.com/dotnet/cli/pull/8214.\r\n\r\nWhen I tried this branch locally on OSX, the first time we build something using the VBCSCompiler, it actually hangs. If I kill that process, then the build progresses until the next compilation, compiles but then hangs again.\r\n\r\nYou should be able to repro it by simply checking out that branch and running build.sh. I haven't tried on Windows yet.\r\n\r\n"},{"Id":"6975002599","Type":"IssuesEvent","CreatedAt":"2017-12-12T04:10:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23729","RelatedDescription":"Closed issue \"IDE0037 codefix introduces extra space, breaks indentation alignment\" (#23729) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.6.0.62329 (5429b35d) (Visual Studio 15.5.1 Community)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Write an expression which triggers IDE0037. For example:\r\n   ```csharp\r\n   public class Class1\r\n   {\r\n       public void M()\r\n       {\r\n           var x = 23;\r\n           Equals(null, new\r\n           {\r\n               x = x,\r\n               y = 23,\r\n           });\r\n       }\r\n   }\r\n   ```\r\n2. Execute the code fix\r\n\r\n**Expected Behavior**:\r\n\r\nThe string of whitespace characters between the opening `{` and the first non-whitespace character (i.e., the identifier itself) remains the same as before. This would preserve the “normal” indent that existed prior to executing the code fix and avoids changing the alignment of the variable wrt neighbors.\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n    public void M()\r\n    {\r\n        var x = 23;\r\n        Equals(null, new\r\n        {\r\n            x,\r\n            y = 23,\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThere is an additional ` ` (space, I haven’t verified, it looks like space) character between the opening `{` and the first non-whitespace character after the `{`. The identifier is now out of alignment with neighbors.\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n    public void M()\r\n    {\r\n        var x = 23;\r\n        Equals(null, new\r\n        {\r\n             x,\r\n            y = 23,\r\n        });\r\n    }\r\n}\r\n```"},{"Id":"6974996230","Type":"IssuesEvent","CreatedAt":"2017-12-12T04:07:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23730","RelatedDescription":"Closed issue \"Deduplicate Find All References results in multi-targeting projects\" (#23730) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nthe version shipped in 15.4.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have an SDK-style project that multitargets, e.g. `<TargetFrameworks>net461;netstandard1.5</TargetFrameworks>`\r\n2. FAR on any symbol from that project\r\n\r\n**Expected Behavior**:\r\nFully identical occurrences should be unified (deduplicated).\r\n\r\n**Actual Behavior**:\r\nI'm seeing every definition and reference twice and they're exactly the same location and everything.\r\n\r\n![image](https://user-images.githubusercontent.com/679326/33859101-4ea3d17e-de87-11e7-854b-ea9ad9ad8606.png)\r\n\r\nThis is a problem with cognitive load. You have double the information. FAR is a very commonly used tool and it needs to get out of the way as much as possible. Having every reference showing twice or more is just not helpful. When looking through the list I often build a mental map of all usages, classifying them and bucketizing by some criteria (aha, it can't be here, can't be here, this one is suspicious, this one we can ignore, etc. etc.)\r\n\r\nThe current structure makes that really complicated (I have to do twice the work).\r\n\r\nSame problem in Navigate To:\r\n![image](https://user-images.githubusercontent.com/679326/33859134-6c9ec684-de87-11e7-85bb-6f9a697cb511.png)\r\n"},{"Id":"6974626978","Type":"PullRequestEvent","CreatedAt":"2017-12-12T01:51:17","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23733","RelatedDescription":"Opened pull request \"Merge master into features/vs-for-mac-refactorings\" (#23733) at dotnet/roslyn","RelatedBody":"Just bringing the branch up to date."},{"Id":"6974282574","Type":"PullRequestEvent","CreatedAt":"2017-12-11T23:55:02","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23732","RelatedDescription":"Opened pull request \"Merge features/vs-for-mac-packages into master-vs-deps\" (#23732) at dotnet/roslyn","RelatedBody":"This merges the entirety of features/vs-for-mac-packages (which includes the contents of #23731) into vs-for-mac-packages.\r\n\r\nThe individual changes in here were largely reviewed, this is just to have the PR ready when we've completed validation."},{"Id":"6974276829","Type":"PullRequestEvent","CreatedAt":"2017-12-11T23:53:14","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23731","RelatedDescription":"Opened pull request \"Merge features/vs-for-mac-refactorings into master\" (#23731) at dotnet/roslyn","RelatedBody":"This merges the entirety of features/vs-for-mac-refactorings into master.\r\n\r\nThe individual changes in here were largely reviewed, this is just to have the PR ready when we've completed validation."},{"Id":"6974183548","Type":"IssuesEvent","CreatedAt":"2017-12-11T23:24:50","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23730","RelatedDescription":"Opened issue \"Deduplicate Find All References results in multi-targeting projects\" (#23730) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nthe version shipped in 15.4.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have an SDK-style project that multitargets, e.g. `<TargetFrameworks>net461;netstandard1.5</TargetFrameworks>`\r\n2. FAR on any symbol from that project\r\n\r\n**Expected Behavior**:\r\nFully identical occurrences should be unified (deduplicated).\r\n\r\n**Actual Behavior**:\r\nI'm seeing every definition and reference twice and they're exactly the same location and everything.\r\n\r\n![image](https://user-images.githubusercontent.com/679326/33859101-4ea3d17e-de87-11e7-854b-ea9ad9ad8606.png)\r\n\r\nThis is a problem with cognitive load. You have double the information. FAR is a very commonly used tool and it needs to get out of the way as much as possible. Having every reference showing twice or more is just not helpful. When looking through the list I often build a mental map of all usages, classifying them and bucketizing by some criteria (aha, it can't be here, can't be here, this one is suspicious, this one we can ignore, etc. etc.)\r\n\r\nThe current structure makes that really complicated (I have to do twice the work).\r\n\r\nSame problem in Navigate To:\r\n![image](https://user-images.githubusercontent.com/679326/33859134-6c9ec684-de87-11e7-85bb-6f9a697cb511.png)\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6975177765","Type":"IssuesEvent","CreatedAt":"2017-12-12T05:26:23","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5093","RelatedDescription":"Opened issue \"[Cross] CMake Toolchain compile flags loop\" (#5093) at dotnet/corert","RelatedBody":"Just not to forget [discussion](https://github.com/dotnet/corert/pull/5091#discussion_r156154156)"},{"Id":"6971783882","Type":"PullRequestEvent","CreatedAt":"2017-12-11T15:06:02","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5092","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5092) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6970186357","Type":"PullRequestEvent","CreatedAt":"2017-12-11T09:24:38","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5091","RelatedDescription":"Opened pull request \"[ObjWriter/Linux] Integration into build process\" (#5091) at dotnet/corert","RelatedBody":"\t- now it downloads llvm 5 release and uses it in the building objwriter\r\n\t- add [objwriter] option into build.sh\r\n\t- only Linux platform support\r\n\t- cross building support(x86/x64 -> ARM32)\r\n\r\nLater I'm going to add the following:\r\n- [ ] Documentation with the work's logic.\r\n- [ ] Additional trick related to the fact that the cross building for arm32 is x86, not the x64 host.\r\n- [ ] Integration ObjWriter build and general build to use the locally built ObjWriter.\r\n\r\n@dotnet/arm32-contrib please review"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6974169677","Type":"IssuesEvent","CreatedAt":"2017-12-11T23:20:42","Actor":"yaakov-h","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1813","RelatedDescription":"Opened issue \"Improve compilation symbols when multi-targeting\" (#1813) at dotnet/sdk","RelatedBody":"The SDK defines a bunch of compilation symbols when multi-targeting.\r\n\r\nFor example, when targeting .NET Standard 1.3, developers can use `#if NETSTANDARD1_3` to conditionally use APIs that are available with that target framework.\r\n\r\nHowever, when multi-targeting across different versions, developers have to use multiple of these. For example:\r\n\r\n```\r\n#if NETSTANDARD1_3 || NETSTANDARD1_6 || NETSTANDARD2_0\r\n```\r\n\r\nIt would be nice to have more inclusive compilation symbols, so that a developer could, for example, use:\r\n\r\n```\r\n#if NETSTANDARD1_3_OR_GREATER\r\n```\r\n\r\nThis would be defined when targeting .NET Standard 1.3, 1.4, 1.5, 1.6. 2.0, 2.1, etc., but not when targeting .NET Standard 1.0, 1.1, 1.2, or .NET Framework, Xamarin, .NET Core etc.\r\n\r\nDoing so would decrease the friction when introducing a newer platform (e.g. .NET Standard 3.0 one day) to a multi-targeting library that aims to keep backwards compatibility for older runtimes, but also taking advantage of newer APIs where they are available.\r\n\r\nInspired by https://github.com/dotnet/csharplang/issues/1182"},{"Id":"6972428641","Type":"IssuesEvent","CreatedAt":"2017-12-11T16:59:01","Actor":"darrensteadman","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1679","RelatedDescription":"Closed issue \"Workflow designer fails to load when referencing netstandard 2.0\" (#1679) at dotnet/sdk","RelatedBody":"I previously reported issue #1522 when I was having problems getting workflows to compile when referencing netstandard 2.0. The work around documented solved that problem for me however I've now gone to modify some of the workflows in my project and when I try to load the designer I get the following.\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()\r\n   at System.Reflection.RuntimeMethodInfo.GetParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParameters()\r\n   at System.Xaml.Schema.TypeReflector.GetNonIndexerProperty(String name)\r\n   at System.Xaml.Schema.TypeReflector.LookupProperty(String name)\r\n   at System.Xaml.XamlType.LookupMember(String name, Boolean skipReadOnlyCheck)\r\n   at System.Xaml.XamlType.GetMember(String name)\r\n   at MS.Internal.Xaml.XamlContext.GetDottedProperty(XamlType tagType, String tagNamespace, XamlPropertyName propName, Boolean tagIsRoot)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadPropertyElement(XamlPropertyName name, XamlType tagType, String tagNamespace, Boolean isEmptyTag)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadElement()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ProcessCurrentXmlNode()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.DoXmlRead()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<Parse>d__4.MoveNext()\r\n   at MS.Internal.Xaml.NodeStreamSorter.MoveNext()\r\n   at System.Xaml.XamlXmlReader.Read()\r\n   at System.Activities.Debugger.XamlDebuggerXmlReader.Read()\r\n   at System.Activities.XamlIntegration.DynamicActivityXamlReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.StripViewStateElement(XamlReader inputReader, Dictionary`2& viewStateInfo, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.ConvertViewStateToAttachedProperties(XamlReader inputReader, ViewStateIdManager idManager, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, DeserializationMode mode, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at System.Activities.Presentation.WorkflowDesigner.Load()\r\n\r\nWRN: Assembly binding logging is turned OFF.\r\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\nNote: There is some performance penalty associated with assembly bind failure logging.\r\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n\r\nHas this been fixed with the PRs to fix my original bug? Does anyone have a work around I could use for the moment to get myself going again?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":30,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2017-12-12T05:30:24.4497145Z","RunDurationInMilliseconds":8480}