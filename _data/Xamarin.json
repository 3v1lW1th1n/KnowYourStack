{"Data":{"Blog":{"FeedItems":[{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null},{"Title":"Add Languages to Your Xamarin Apps with Multilingual App Toolkit","PublishedOn":"2018-02-08T20:10:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With Xamarin, you can extend your cross-platform apps with support for native speakers, reaching markets that might otherwise be overlooked. However, managing multiple languages and keeping everything...","Href":"https://blog.xamarin.com/add-languages-to-your-apps-with-xamarin-and-multilingual-app-toolkit/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Building Your First Intelligent App with Xamarin and Microsoft Cognitive Services","PublishedOn":"2018-02-07T19:39:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today&#8217;s apps must be “intelligent” to win app users’ loyalty, whether for a consumer app or a business app. With Xamarin.Forms and Microsoft Cognitive Services, you can easily create your first...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-building-first-intelligent-app-xamarin-microsoft-cognitive-services/","RawContent":null},{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7228021889","Type":"PullRequestEvent","CreatedAt":"2018-02-11T03:49:52","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1291","RelatedDescription":"Opened pull request \"[build] fix api-xml-adjuster.targets on Windows\" (#1291) at xamarin/xamarin-android","RelatedBody":"Since 7d705bf, the Windows builds on VSTS have seemed to be failing. I\r\ntested this locally, and noticed the use of command line arguments such\r\nas:\r\n\r\n    -parameter-names='%(SomeVariable)'\r\n\r\nUnfortunately, this isn't working on Windows due to the single quote. It\r\nis more appropriately expressed as:\r\n\r\n    -parameter-names=&quot;%(SomeVariable)&quot;\r\n\r\nThis isn't very pretty, but it should work on all platforms.\r\n\r\nI also fixed all the tabs I saw in this file--in favor of spaces, and\r\nfixed other XML code conventions.\r\n\r\nI will now return to my regularly scheduled baby duty."},{"Id":"7226946179","Type":"PullRequestEvent","CreatedAt":"2018-02-10T15:43:57","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1290","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add GetAndroidDependencies Target\" (#1290) at xamarin/xamarin-android","RelatedBody":"Fixes #1269\r\n\r\nThis commit adds the `GetAndroidDependencies` target to the\r\n`Xamarin.Android.Common.targets`. Its purpose is to examine\r\nthe various settings in the project and report which android\r\nsdk build-tools, platform-tools etc are required.\r\n\r\n`GetAndroidDependencies` will output an @(AndroidDependency)\r\nwith Version metadata Valid component names are platform,\r\nbuild-tool, platform-tool and tool."},{"Id":"7223746496","Type":"PullRequestEvent","CreatedAt":"2018-02-09T16:29:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1238","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Support for CodeBehind for layout files\" (#1238) at xamarin/xamarin-android","RelatedBody":"This commit is based on work done by @grendello. It adds support\r\nfor the generation of code behind for layout files. This will\r\nmake it easier for users to write code since they will no longer\r\nneed to use `FindViewbyId` manually. The generated code will\r\nautomatically provide properties for the various UI elements\r\nin the layout file.\r\n\r\nFor example if you have a Button with an id of `@id/myButton` you\r\nwill see a property is available on your activity `myButton`. You\r\ncan then replace code like\r\n\r\n\tvar button = FindViewById<Button> (Resource.Id.myButton);\r\n\tbutton.Click += delegate {\r\n\t};\r\n\r\nwith\r\n\r\n\tmyButton.Click += delegate {\r\n\t};\r\n\r\nmuch nicer eh :).\r\n\r\nThere are a couple of caviats. The main one is your layout class\r\nMUST be a `partial` class. So\r\n\r\n\tpublic class MainActivity : Activity {\r\n\t}\r\n\r\nbecomes\r\n\r\n\tpublic partial class MainActivity : Activity {\r\n\t}\r\n\r\nNext is you need to add two items to your root layout of your\r\naxml/xml files.\r\n\r\n\txmlns:tools=\"http://schemas.android.com/tools\"\r\n\ttools:class=\"$(Namespace).$(ClassName)\"\r\n\r\nwhere `$(Namespace)` and `$(ClassName)` are replaced with the\r\napproprite values. Note these MUST match the full namespace/classname\r\nof the layout class.\r\n\r\nThe following is a sample of the kind of code which will be\r\ngenerated by this new system.\r\n\r\n\t//------------------------------------------------------------------------------\r\n\t// <auto-generated>\r\n\t//     This code was generated by a tool.\r\n\t//     Runtime Version:4.0.30319.42000\r\n\t//\r\n\t//     Changes to this file may cause incorrect behavior and will be lost if\r\n\t//     the code is regenerated.\r\n\t// </auto-generated>\r\n\t//------------------------------------------------------------------------------\r\n\r\n\tnamespace UnnamedProject {\r\n\t\tusing System;\r\n\t\tusing Android.App;\r\n\t\tusing Android.Widget;\r\n\t\tusing Android.Views;\r\n\t\tusing Android.OS;\r\n\r\n\t\t// Generated from layout file 'Resources/layout/Main.axml'\r\n\t\tpublic partial class MainActivity {\r\n\r\n\t\t\tprivate Func<Button> @__myButtonFunc;\r\n\r\n\t\t\t#line 1 \"/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/CheckCodeBehindIsGenerated/Resources/layout/Main.axml\"\r\n\t\t\tprivate Button @__myButton;\r\n\r\n\t\t\t#line default\r\n\t\t\t#line hidden\r\n\r\n\t\t\tpartial void OnLayoutViewNotFound<T> (int resourceId, ref T type) where T : global::Android.Views.View;\r\n\r\n\t\t\t#line 1 \"/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/CheckCodeBehindIsGenerated/Resources/layout/Main.axml\"\r\n\t\t\tpublic Button myButton {\r\n\t\t\t\tget {\r\n\t\t\t\t\tif (@__myButtonFunc == null) {\r\n\t\t\t\t\t\t@__myButtonFunc = this.@__Create_myButton;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this.@__EnsureView<Button>(this.@__myButtonFunc, ref this.@__myButton);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t#line default\r\n\t\t\t#line hidden\r\n\r\n\t\t\tprivate void InitializeContentView() {\r\n\t\t\t\tthis.SetContentView(Resource.Layout.Main);\r\n\t\t\t}\r\n\r\n\t\t\tprivate T @__FindView<T>(global::Android.Views.View parentView, int resourceId) where T : global::Android.Views.View {\r\n\t\t\t\tT view = parentView.FindViewById<T>(resourceId);\r\n\t\t\t\tif ((view == null)) {\r\n\t\t\t\t\tthis.OnLayoutViewNotFound(resourceId, ref view);\r\n\t\t\t\t}\r\n\t\t\t\tif ((view != null)) {\r\n\t\t\t\t\treturn view;\r\n\t\t\t\t}\r\n\t\t\t\tthrow new System.InvalidOperationException($\"View not found (ID: {resourceId})\");\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprivate T @__FindView<T>(global::Android.App.Activity parentView, int resourceId) where T : global::Android.Views.View {\r\n\t\t\t\tT view = parentView.FindViewById<T>(resourceId);\r\n\t\t\t\tif ((view == null)) {\r\n\t\t\t\t\tthis.OnLayoutViewNotFound(resourceId, ref view);\r\n\t\t\t\t}\r\n\t\t\t\tif ((view != null)) {\r\n\t\t\t\t\treturn view;\r\n\t\t\t\t}\r\n\t\t\t\tthrow new System.InvalidOperationException($\"View not found (ID: {resourceId})\");\r\n\t\t\t}\r\n\r\n\t\t\tprivate T @__FindView<T>(global::Android.App.Fragment parentView, int resourceId) where T : global::Android.Views.View {\r\n\t\t\t\treturn this.@__FindView<T>(parentView.Activity, resourceId);\r\n\t\t\t}\r\n\r\n\t\t\tprivate T @__EnsureView<T>(System.Func<T> creator, ref T field) where T :  class {\r\n\t\t\t\tif ((field != null)) {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t\tif ((creator == null)) {\r\n\t\t\t\t\tthrow new System.ArgumentNullException(nameof (creator));\r\n\t\t\t\t}\r\n\t\t\t\tfield = creator();\r\n\t\t\t\treturn field;\r\n\t\t\t}\r\n\r\n\t\t\tprivate Button @__Create_myButton() {\r\n\t\t\t\treturn this.@__FindView<Button>(this, Resource.Id.myButton);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},{"Id":"7223581198","Type":"IssuesEvent","CreatedAt":"2018-02-09T16:00:07","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1288","RelatedDescription":"Closed issue \"How to Exclude default material icons from Xamarin.Android Apk?\" (#1288) at xamarin/xamarin-android","RelatedBody":"I unzipped my apk and in res folder there many sub folders as shown below and each folder has icons which are not part of my project as shown in the 2nd image. At least they arent in my source code. I dont know where they are coming from. Probably Xamarin.Android includes them as default material icons. But I am using my own svg icons as embedded resources in my PCL project and I dont need those pngs to be part of my apk. They just bloat and increase size of my apk (even though probably 1-2mb max.)\r\n\r\nHow can I exclude or remove those? I am already using full linking and proguard in my xamarin.android project.\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/36021825-535fbf8c-0d87-11e8-81a7-151d4399740c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/36021837-57d134f6-0d87-11e8-9716-bde7faf0cfdb.png)\r\n"},{"Id":"7221872298","Type":"IssuesEvent","CreatedAt":"2018-02-09T09:52:52","Actor":"EmilAlipiev","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1288","RelatedDescription":"Opened issue \"How to Exclude default material icons from Xamarin.Android Apk?\" (#1288) at xamarin/xamarin-android","RelatedBody":"I unzipped my apk and in res folder there many sub folders as shown below and each folder has icons which are not part of my project as shown in the 2nd image. At least they arent in my source code. I dont know where they are coming from. Probably Xamarin.Android includes them as default material icons. But I am using my own svg icons as embedded resources in my PCL project and I dont need those pngs to be part of my apk. They just bloat and increase size of my apk (even though probably 1-2mb max.)\r\n\r\nHow can I exclude or remove those? I am already using full linking and proguard in my xamarin.android project.\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/36021825-535fbf8c-0d87-11e8-81a7-151d4399740c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10422347/36021837-57d134f6-0d87-11e8-9716-bde7faf0cfdb.png)\r\n"},{"Id":"7220467184","Type":"PullRequestEvent","CreatedAt":"2018-02-09T02:07:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1285","RelatedDescription":"Merged pull request \"Bump to Java.Interop/master/80b3c104\" (#1285) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1138"},{"Id":"7219299753","Type":"IssuesEvent","CreatedAt":"2018-02-08T20:54:46","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1093","RelatedDescription":"Closed issue \"Add the linker analyzer tool to XA\" (#1093) at xamarin/xamarin-android","RelatedBody":"### Expected Behavior\r\n\r\nMake the linkeranalyzer.exe and a helper script available in the XA installation.\r\n\r\n### Actual Behavior\r\n\r\nlinkeranalyzer.exe is not installed.\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7227922879","Type":"PullRequestEvent","CreatedAt":"2018-02-11T02:32:28","Actor":"adamped","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1859","RelatedDescription":"Closed pull request \"[WIP] Feature/1701 commandable span\" (#1859) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nDescribe your changes here.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Provide links to bugs here\r\n\r\n### API Changes ###\r\n\r\nList all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n\r\n### Behavioral Changes ###\r\n\r\nDescribe any non-bug related behavioral changes that may change how users app behaves when upgrading to this version of the codebase.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7227922594","Type":"PullRequestEvent","CreatedAt":"2018-02-11T02:32:15","Actor":"adamped","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1859","RelatedDescription":"Opened pull request \"[WIP] Feature/1701 commandable span\" (#1859) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nDescribe your changes here.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Provide links to bugs here\r\n\r\n### API Changes ###\r\n\r\nList all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n\r\n### Behavioral Changes ###\r\n\r\nDescribe any non-bug related behavioral changes that may change how users app behaves when upgrading to this version of the codebase.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7227270681","Type":"IssuesEvent","CreatedAt":"2018-02-10T19:01:38","Actor":"jt-github","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1858","RelatedDescription":"Opened issue \"Vertical slider takes horizontal space as length\" (#1858) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIn short, 90 degree rotated Slider elements are limited in height to their available horizontal space (and perhaps this is true for other objects, too).\r\n\r\nThe issue I have encountered is the same as the one in this forum post:\r\nhttps://forums.xamarin.com/discussion/69180/vertical-slider-takes-horizontal-space-as-lenght\r\nWhile the forum post provides some example code, I've created my own below for even easier reproduction.\r\n\r\n### Code to Reproduce\r\n\r\n```\r\n<Grid>\r\n    <Grid.ColumnDefinitions>\r\n        <ColumnDefinition Width=\"30*\" />\r\n        <ColumnDefinition Width=\"70*\" />\r\n    </Grid.ColumnDefinitions>\r\n    <Grid.RowDefinitions>\r\n        <RowDefinition Height=\"50*\"/>\r\n        <RowDefinition Height=\"50*\"/>\r\n    </Grid.RowDefinitions>\r\n    <BoxView Color=\"DarkBlue\"/>\r\n    <BoxView Color=\"DarkCyan\" Grid.Column=\"1\"/>\r\n    <BoxView Color=\"Yellow\" Grid.Row=\"1\"/>\r\n    <BoxView Color=\"DarkGreen\" Grid.Column=\"1\" Grid.Row=\"1\"/>\r\n    <Slider Grid.Row=\"1\" Maximum=\"100\" Minimum=\"0\" Value=\"100\" Rotation=\"-90\"\r\n          VerticalOptions=\"Center\" />\r\n</Grid>\r\n```\r\n![xamarinverticalslider](https://user-images.githubusercontent.com/1504620/36065553-30737f50-0e62-11e8-84c2-1d57de12c759.png)\r\n\r\nRelated Bug: If **VerticalOptions=\"Center\"** is removed (defaulting to **Fill**), the handle of the slider detaches from the body of the slider.\r\n![xamarinverticalsliderdetached](https://user-images.githubusercontent.com/1504620/36065566-4ca340b6-0e62-11e8-85e5-dd15afe8903b.png)\r\n\r\nRelated Bug: Adding any left or right **Margin** (such as \"50,0,0,0\") also has a non-intuitive effect where the _height_ of the rotated slider is reduced by the margin _and_ the slider moves left or right as expected.\r\n![xamarinverticalsliderwithleftmargin](https://user-images.githubusercontent.com/1504620/36065568-516ee172-0e62-11e8-9256-5a2d1e2ebd3e.png)\r\n\r\n### Expected Behavior\r\nAvailable space and Slider dimensions should be calculated _after_ the rotation is applied so that a vertically rotated Slider can expand to the Height of its container, Margins are sanely handled, etc.\r\n\r\n### Actual Behavior\r\nAvailable space is calculated before rotation, imposing non-intuitive limitations on element position and size after rotation, only allowing a Height which is at maximum only as large as the Width of its container.\r\n\r\n### Basic Information\r\n- Version with issue: Xamarin.Forms 2.5\r\n- Last known good version: N/A\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Not yet testing\r\n  - Android: 4.4 (API 19) running on Visual Studio Emulator for Android\r\n  - UWP:  Not yet testing \r\n- Android Support Library Version: N/A\r\n- Nuget Packages: None (besides standard Xamarin.Forms)\r\n- Affected Devices: Virtual and Physical\r\n\r\n### Screenshots\r\nSee above for screen shots in context."},{"Id":"7225450846","Type":"IssuesEvent","CreatedAt":"2018-02-09T22:55:17","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1851","RelatedDescription":"Closed issue \"System.ComponentModel.DataAnnotations throws exception on IOS Actual Device\" (#1851) at xamarin/Xamarin.Forms","RelatedBody":"I have use System.ComponentModel.DataAnnotations in portable class project. This work great in Android Actual Device but failed on IOS actual device. In IOS emulator it work great but not on Actual iPhone. It thows deployment error as \r\n\r\nCould not AOT the assembly '/Users/rnr_mac/Library/Caches/Xamarin/mtbs/builds/RujulERP_Mobile.iOS/43d2ca3e2c725a70d6f4c6086aa946e8/obj/iPhone/Debug/mtouch-cache/64/Build/System.ComponentModel.DataAnnotations.dll'\tRujulERP_Mobile.iOS\t\t\t\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7227695541","Type":"IssuesEvent","CreatedAt":"2018-02-10T23:36:03","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3452","RelatedDescription":"Opened issue \"[rfc] ExternizerAttribute: Teach generator how to do P/Invokes from interface definitions.\" (#3452) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nCurrently there is no way for the generator to produce [P/Invoke](http://www.mono-project.com/docs/advanced/pinvoke/) signatures.\r\n\r\n### Expected Behavior\r\n\r\nGenerator must be able to produce P/Invoke definitions to avoid manual code. I must note that this is not intended to 100% remove manual code of P/Invokes but to be an additional tool to avoid it whenever possible.\r\n\r\n### Potential Solution\r\n\r\nCreate a new attribute called `ExternizerAttribute` with the following definition:\r\n\r\n```csharp\r\n[AttributeUsage (AttributeTargets.Method, AllowMultiple = false)]\r\npublic class ExternizerAttribute : Attribute {\r\n\r\n\tpublic string LibName { get; set; }\r\n\tpublic string EntryPoint { get; set; }\r\n\tpublic bool ExternMethodOnly { get; set; }\r\n\tpublic Visibility ExternVisibility { get; set; } = Visibility.Disabled;\r\n\tpublic string CustomExternMethodName { get; set; }\r\n\r\n\tpublic ExternizerAttribute (string libName) => LibName = libName;\r\n\tpublic ExternizerAttribute (string libName, string entryPoint) : this (libName) => EntryPoint = entryPoint;\r\n}\r\n```\r\n\r\nProperty definitions:\r\n* **LibName**: Native library to be opened, this will be mapped to `DllImport`'s `dllName` constructor parameter.\r\n* **EntryPoint**: Native's library entry point to be called, this will be mapped to `DllImport`'s `EntryPoint` field.\r\n* **ExternMethodOnly**: Instructs the generator to only create the extern signature and no wrapper method around it.\r\n* **ExternVisibility**: Provides a way to customize extern's signature visibility, the default value is `Visibility.Disabled` which means that default visibility `private` will be used unless `ExternMethodOnly` is set to `true` this will turn visibility into `public`.\r\n* **CustomExternMethodName**: Provides a way to customize extern method's name. By default extern method names will be suffixed with `Extern` unless `ExternMethodOnly` is set to `true` and `EntryPoint` is omitted.\r\n\r\nA simple scenario of `ExternizerAttribute` would be as follows:\r\n\r\n```csharp\r\n[Externizer (Constants.MetalPerformanceShadersLibrary, \"DoSomethingNative\")]\r\nNSSet DoSomething (MPSImage[] objs, [NullAllowed] MPSImage img, nint ratio);\r\n```\r\n\r\nAnd the output would be a wrapper method of the extern member that does casting and null checks:\r\n\r\n```csharp\r\n[DllImport (\"/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders\", EntryPoint = \"DoSomethingNative\")]\r\nstatic extern IntPtr DoSomethingExtern (IntPtr objs, IntPtr img, nint ratio);\r\n\r\npublic NSSet DoSomething (MPSImage[] objs, MPSImage img, nint ratio)\r\n{\r\n\tif (objs == null)\r\n\t\tthrow new ArgumentNullException (\"objs\");\r\n\tvar nsa_objs = NSArray.FromNSObjects (objs);\r\n\t\r\n\tNSSet ret;\r\n\tret =  Runtime.GetNSObject<NSSet> (DoSomethingExtern (nsa_objs.Handle, img == null ? IntPtr.Zero : img.Handle, ratio));\r\n\tnsa_objs.Dispose ();\r\n\t\r\n\treturn ret;\r\n}\r\n```\r\n\r\nUnfortunately `DllImport` cannot be reused because it cannot be applied to methods inside an interface definition like we do in our API definitions because the `extern` keyword is expected and some additional compiler checks. Also having our own attribute gives us the flexibility to add additional information needed to better drive the generator.\r\n\r\nThe following attributes would also be needed to be taken into account:\r\n\r\n* [MarshalAs (UnmanagedType)] in return and parameters.\r\n* [NullAllowed] for parameter checks.\r\n* [return: Release] to allow to call `release` in the returned object if needed.\r\n* [Advice]\r\n* [iOS, Mac] and friends to write availability information.\r\n\r\n### Notes\r\n\r\nAgain the scope of this attribute is not to get rid of manual code 100% but to help where possible for example it would enable the following scenarios:\r\n\r\n* The default behaviour is meant for simple scenarios where null checks are needed before calling the unmanaged function.\r\n* Generate the P/Invoke signature and use `[Wrap]` to do your thing.\r\n* Expose the P/Invoke signature directly to the public API without manual code.\r\n* C Arrays or variadic functions support is not in the scope of this attribute.\r\n\r\nA small example where this attribute would be useful:\r\n\r\n```c\r\ntypedef NSArray<MPSImage*>  MPSImageBatch;\r\nNSUInteger MPSImageBatchIncrementReadCount( MPSImageBatch * __nonnull batch, NSInteger amount );\r\n```\r\n\r\nWould only require:\r\n```csharp\r\n[Externizer (Constants.MetalPerformanceShadersLibrary, \"MPSImageBatchIncrementReadCount\")]\r\nnuint IncrementReadCount (MPSImage [] batch, nint amount);\r\n```\r\n\r\n💣💥🚀"},{"Id":"7227164343","Type":"PullRequestEvent","CreatedAt":"2018-02-10T17:56:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3451","RelatedDescription":"Opened pull request \"[generator] Add support for [DesignatedInitializer]. Fix #3247\" (#3451) at xamarin/xamarin-macios","RelatedBody":"Add an easier syntax for automatically generated default .ctor/init\nwhat needs to be decorated with `[DesignatedInitializer]`.\n\nThe current way of doing this requires a bit too much work.\nMore details in:\nhttps://github.com/xamarin/xamarin-macios/issues/3247\n\nGenerator diff: https://gist.github.com/spouliot/2675be8ce15ab473ed7c573403d7eb47\n\nNote that this includes the Foundation and UIKit fixes (reported\nby xtro). Those will be committed separately once this is merged."},{"Id":"7227074018","Type":"PullRequestEvent","CreatedAt":"2018-02-10T17:02:08","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3450","RelatedDescription":"Merged pull request \"[generator] Fix .csproj files targets so we can debug from VS\" (#3450) at xamarin/xamarin-macios","RelatedBody":"This was broken when removing pmcs support and will need to be\nupdated once we switch to csc (roslyn)."},{"Id":"7226892826","Type":"PullRequestEvent","CreatedAt":"2018-02-10T15:10:10","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3450","RelatedDescription":"Opened pull request \"[generator] Fix .csproj files targets so we can debug from VS\" (#3450) at xamarin/xamarin-macios","RelatedBody":"This was broken when removing pmcs support and will need to be\nupdated once we switch to csc (roslyn)."},{"Id":"7225450785","Type":"IssuesEvent","CreatedAt":"2018-02-09T22:55:16","Actor":"jassmith","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3449","RelatedDescription":"Opened issue \"System.ComponentModel.DataAnnotations throws exception on IOS Actual Device\" (#3449) at xamarin/xamarin-macios","RelatedBody":"_From @kishorupare on February 9, 2018 9:44_\n\nI have use System.ComponentModel.DataAnnotations in portable class project. This work great in Android Actual Device but failed on IOS actual device. In IOS emulator it work great but not on Actual iPhone. It thows deployment error as \r\n\r\nCould not AOT the assembly '/Users/rnr_mac/Library/Caches/Xamarin/mtbs/builds/RujulERP_Mobile.iOS/43d2ca3e2c725a70d6f4c6086aa946e8/obj/iPhone/Debug/mtouch-cache/64/Build/System.ComponentModel.DataAnnotations.dll'\tRujulERP_Mobile.iOS\t\t\t\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#1851_"},{"Id":"7224851700","Type":"PullRequestEvent","CreatedAt":"2018-02-09T20:24:57","Actor":"baulig","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3439","RelatedDescription":"Closed pull request \"[DONT-MERGE]: Test possible fix.\" (#3439) at xamarin/xamarin-macios","RelatedBody":"Mono repo points to work branch."},{"Id":"7224809415","Type":"PullRequestEvent","CreatedAt":"2018-02-09T20:14:58","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3448","RelatedDescription":"Merged pull request \"[Tests] Ensure that tests do not fail due to the locale. Fixes #3445\" (#3448) at xamarin/xamarin-macios","RelatedBody":"Previous tests would fail if the simulator or device was using a diff locale."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"962480803748999168","CreatedAt":"2018-02-11T00:18:00+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/eJkPovjm0G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":15,"FavoriteCount":5,"RawContent":null},{"Id":"962049464084062208","CreatedAt":"2018-02-09T19:44:00+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast, @JamesMontemagno and @pierceboggan talk rapid UI prototyping with Ink to Code, me… https://t.co/FTH39xKI1K","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":15,"RawContent":null},{"Id":"962005422142967809","CreatedAt":"2018-02-09T16:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0Fi4MU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":85,"FavoriteCount":32,"RawContent":null},{"Id":"961696657250443269","CreatedAt":"2018-02-08T20:22:05+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/pUb6M2pQLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":76,"FavoriteCount":30,"RawContent":null},{"Id":"961642559880749056","CreatedAt":"2018-02-08T16:47:07+00:00","UserScreenname":"xamarinhq","Text":"Expand your app horizons by building your first #tvOS app with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/utcp887bgL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":10,"RawContent":null},{"Id":"961326059965870080","CreatedAt":"2018-02-07T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar with @XamarinU on building your first intelligent app with #Xamarin and Micro… https://t.co/lEsIH9mU1Q","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":56,"FavoriteCount":38,"RawContent":null},{"Id":"961281908750635008","CreatedAt":"2018-02-07T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/48PO2bI3Mt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":17,"RawContent":null},{"Id":"960921785641455616","CreatedAt":"2018-02-06T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/OXIdlOPZyn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":12,"RawContent":null},{"Id":"960588991375511552","CreatedAt":"2018-02-05T19:00:37+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/sIDGF4Kcp0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":253,"FavoriteCount":128,"RawContent":null},{"Id":"960557379606794248","CreatedAt":"2018-02-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":14,"RawContent":null},{"Id":"960308752409923584","CreatedAt":"2018-02-05T00:27:02+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/ChPi6XDAGH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":18,"RawContent":null},{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":97,"FavoriteCount":29,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":18,"RawContent":null},{"Id":"959109618067738624","CreatedAt":"2018-02-01T17:02:06+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/xYx6fUVhML","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":10,"RawContent":null},{"Id":"958788443647152136","CreatedAt":"2018-01-31T19:45:53+00:00","UserScreenname":"xamarinhq","Text":"Help ensure a productive 2018 with #Xamarin developer events near you this February: https://t.co/9aPslPGW2O https://t.co/zRGM0lEoZe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":8,"RawContent":null},{"Id":"958747709963415552","CreatedAt":"2018-01-31T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Supercharge your Xamarin.Mac app startup time: https://t.co/JzwELyF3Tm https://t.co/xLDqS3Z9sI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":21,"RawContent":null},{"Id":"958386328797884416","CreatedAt":"2018-01-30T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:… https://t.co/JOLj1szAol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":16,"RawContent":null},{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":225,"FavoriteCount":123,"RawContent":null}]}},"RunOn":"2018-02-11T05:30:35.5748776Z","RunDurationInMilliseconds":3580}