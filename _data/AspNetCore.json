{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7460657949","Type":"IssuesEvent","CreatedAt":"2018-03-30T20:45:10","Actor":"fiksen99","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3011","RelatedDescription":"Opened issue \"Preventing a scoped dependency from being disposed\" (#3011) at aspnet/Home","RelatedBody":"We have a scenario where we:\r\nHave an `IMyClientFactory` singleton, whose implementation is to output an `IMyClient`. It maintains an `IMemoryCache` of client's that is has used, and will return the cached `IMyClient` if present (the cache key is based around `HttpContext.Items` values) otherwise it will create a new `IMyClient` and return it. `IMyClient` is expensive to create. `IMyClient` implements `IDisposable`\r\n\r\nThe `IMyClientFactory` is registered as a singleton via `services.AddSingleton<IMyClientFactory, MyClientFactory>()`\r\nThe `IMyClient` is registered as a Scoped like so:\r\n```\r\nservices.AddSingleton<IMyClient>(sp =>\r\n            {\r\n                var factory = sp.GetRequiredService<MyClientFactory>();\r\n                return factory.GetClientAsync().Result;\r\n            });\r\n```\r\n\r\nunfortunately, due to default scoping behaviour, myClient.Dispose() is called at the end of every request scope, this means that the cached client is now disposed and unusable.\r\n\r\nWe should provide a mechanism such the the dispose behaviour is not necessarily called at scope end time, perhaps a flag to the `AddScoped`/`AddTransient` methods such that dispose isn't automatically called.\r\n\r\nAlternatively, we could provide a mechanism such that calling `AddSingleton` with a factory method will always call into the factory method?"},{"Id":"7459677251","Type":"IssuesEvent","CreatedAt":"2018-03-30T16:20:34","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2985","RelatedDescription":"Closed issue \"IE浏览器无法保存身份验证信息\" (#2985) at aspnet/Home","RelatedBody":"asp.net core 2.0.6存储身份验证信息时无效，但是谷歌或火狐是正常的，如下是我的代码\r\nIN IE，“HttpContext.SignInAsync” can't save cookie,bug,chrome or firefox is normal,please me,thanks，code:\r\n![image](https://user-images.githubusercontent.com/10111222/37713246-3d2abd5e-2d51-11e8-864d-4f746427ac96.png)\r\n"},{"Id":"7456533244","Type":"IssuesEvent","CreatedAt":"2018-03-29T22:11:26","Actor":"blowdart","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2997","RelatedDescription":"Closed issue \"DataProtection - encryption with high-protected capi certificate\" (#2997) at aspnet/Home","RelatedBody":"I have a problem with DataProtection when is used together with `ProtectKeysWithCertificate` to protect the data at rest. If I create highProtected certificate with CryptoAPI, e.g. using `New-SelfSignedCertificate` powershell cmdlet\r\n\r\n```\r\nNew-SelfSignedCertificate `\r\n         -Subject localhost `\r\n         -DnsName localhost `\r\n         -FriendlyName \"ASP.NET Data Protection`\r\n         -NotBefore (Get-Date) `\r\n         -NotAfter (Get-Date).AddYears(10) `\r\n         -CertStoreLocation \"cert:CurrentUser\\My\" `\r\n         -KeyAlgorithm RSA `\r\n         -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" `\r\n         -KeyLength 2048 `\r\n         -KeyUsage KeyEncipherment, DataEncipherment `\r\n         -KeyProtection ProtectHigh\r\n```\r\n\r\nthen the certificate is protected with additional password. Windows will ask for it every time the application is started. It shows modal window like that (in Slovak lang):\r\n\r\n![image](https://user-images.githubusercontent.com/6164767/37865531-1f27fa18-2f7e-11e8-8fc1-ef794bfd3d60.png)\r\n\r\nIf I type correct password, everything is good. However, when I type wrong password for the first time, and then correct one, DataProtection generates new master key, whereas the old one is still active (not expired or revoked). The application don't start until the correct password to the cert is given, but it nevertheless uses newly-generated key. Is there any way how to suppress this behavior? If I use method `DisableAutomaticKeyGeneration`, it also disables the key rotation.\r\n\r\nBtw, the log printed to console every time the incorrect password is given:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[24]\r\n      An exception occurred while processing the key element '<key id=\"bc5319fd-63a4-45f2-b75e-1ef181f6ec19\" version=\"1\" />'.\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access denied\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.Decrypt(Byte[] data, RSAEncryptionPadding padding)\r\n   at System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(Byte[] rgbIn)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(Byte[] keyData, RSA rsa, Boolean useOAEP)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor.Decrypt(XElement encryptedElement)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.XmlEncryptionExtensions.DecryptElement(XElement element, IActivator activator)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager.Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager.DeserializeDescriptorFromKeyElement(XElement keyElement)\r\nwarn: Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver[12]\r\n      Key {bc5319fd-63a4-45f2-b75e-1ef181f6ec19} is ineligible to be the default key because its CreateEncryptor method failed.\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access denied\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.Decrypt(Byte[] data, RSAEncryptionPadding padding)\r\n   at System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(Byte[] rgbIn)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(Byte[] keyData, RSA rsa, Boolean useOAEP)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor.Decrypt(XElement encryptedElement)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.XmlEncryptionExtensions.DecryptElement(XElement element, IActivator activator)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager.Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager.DeserializeDescriptorFromKeyElement(XElement keyElement)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.DeferredKey.<>c__DisplayClass1_0.<GetLazyDescriptorDelegate>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyBase.get_Descriptor()\r\n   at Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptorFactory.CreateEncryptorInstance(IKey key)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyBase.CreateEncryptor()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver.CanCreateAuthenticatedEncryptor(IKey key)\r\n```\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7461243960","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:30:30","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1798","RelatedDescription":"Merged pull request \"Use IBufferWriter in IHubProtocol (#1791)\" (#1798) at aspnet/SignalR","RelatedBody":""},{"Id":"7461243662","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:30:21","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1798","RelatedDescription":"Opened pull request \"Use IBufferWriter in IHubProtocol (#1791)\" (#1798) at aspnet/SignalR","RelatedBody":""},{"Id":"7461243161","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:30:09","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1791","RelatedDescription":"Merged pull request \"Use IBufferWriter in IHubProtocol\" (#1791) at aspnet/SignalR","RelatedBody":""},{"Id":"7461236535","Type":"IssuesEvent","CreatedAt":"2018-03-31T00:26:30","Actor":"alexxie","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1797","RelatedDescription":"Opened issue \"Hub.Clients.User() and Hub.Clients.Group() compare string case-sensitivly\" (#1797) at aspnet/SignalR","RelatedBody":"### Please consider the following before filing an issue\r\n\r\n* If you are using NuGet Packages that start with `Microsoft.AspNet.SignalR`, use the issue tracker at https://github.com/SignalR/SignalR to report the issue. This \r\nrepository is for packages that start with `Microsoft.AspNetCore.SignalR` (and NPM packages that start with `@aspnet/signalr`)\r\n\r\n### Please include as much of the following as you can in your bug report\r\n\r\nHub.Clients.User() and Hub.Clients.Group() function search connection case sensitively, e.g.\r\n\r\nHub.Clients.Group(\"abc\") does not find connections via Hub.Groups.AddAsync(Groups.AddAsync(Context.ConnectionId, \"ABC\")\r\n\r\n* Versions of Server-Side NuGet Packages: 1.0.0-preview1-final\r\n"},{"Id":"7461233134","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:24:36","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1795","RelatedDescription":"Merged pull request \"update kestrel package version to fix build\" (#1795) at aspnet/SignalR","RelatedBody":""},{"Id":"7461232801","Type":"IssuesEvent","CreatedAt":"2018-03-31T00:24:23","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1796","RelatedDescription":"Opened issue \"Consider caching connection list for hublifetimemanager operations\" (#1796) at aspnet/SignalR","RelatedBody":"![capture](https://user-images.githubusercontent.com/7574801/38157793-1a896a76-343f-11e8-9b81-27b2d1b6055e.JPG)\r\n\r\nWe can cache the connectionlist on access and update it whenever a connection is added or removed"},{"Id":"7461068011","Type":"PullRequestEvent","CreatedAt":"2018-03-30T23:02:59","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1795","RelatedDescription":"Opened pull request \"update kestrel package version to fix build\" (#1795) at aspnet/SignalR","RelatedBody":""}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7461211023","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:12:11","Actor":"NTaylorMullen","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7584","RelatedDescription":"Merged pull request \"Fix MVC being able to build in VisualStudio.\" (#7584) at aspnet/Mvc","RelatedBody":""},{"Id":"7461209457","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:11:19","Actor":"NTaylorMullen","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7584","RelatedDescription":"Opened pull request \"Fix MVC being able to build in VisualStudio.\" (#7584) at aspnet/Mvc","RelatedBody":""},{"Id":"7461182627","Type":"IssuesEvent","CreatedAt":"2018-03-30T23:57:19","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7583","RelatedDescription":"Opened issue \"Cleanup BindingInfo \\ ModelMetadata coalescing in ModelBinderFactory\" (#7583) at aspnet/Mvc","RelatedBody":"We made some changes to BindingInfo in preview2 so that `ParameterDescriptor` \\ `PropertyDescriptor` create the right types as part of application model creation. To avoid a bunch of last minute test churn, we left the coalescing unchanged in the `ModelBinderFactory`. We should clean this up and rely on the input `BindingInfo` to be accurate."},{"Id":"7460900043","Type":"IssuesEvent","CreatedAt":"2018-03-30T21:59:03","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7560","RelatedDescription":"Closed issue \"Flaky test: HeaderBinder_BindsHeaders_ToSimpleTypes\" (#7560) at aspnet/Mvc","RelatedBody":"This test fails occasionally:\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.HeaderValueProvider.ContainsPrefix(String prefix) in C:\\b\\w\\f9da89f9a35bf700\\src\\Microsoft.AspNetCore.Mvc.Core\\ModelBinding\\Binders\\HeaderModelBinder.cs:line 226\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.BindModelAsync(ModelBindingContext bindingContext) in C:\\b\\w\\f9da89f9a35bf700\\src\\Microsoft.AspNetCore.Mvc.Core\\ModelBinding\\Binders\\CollectionModelBinder.cs:line 84\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.BindModelAsync(ModelBindingContext bindingContext) in C:\\b\\w\\f9da89f9a35bf700\\src\\Microsoft.AspNetCore.Mvc.Core\\ModelBinding\\Binders\\HeaderModelBinder.cs:line 117\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderTests.HeaderBinder_BindsHeaders_ToSimpleTypes(String headerValue, Type modelType, Object expectedModel) in C:\\b\\w\\f9da89f9a35bf700\\test\\Microsoft.AspNetCore.Mvc.Core.Test\\ModelBinding\\Binders\\HeaderModelBinderTests.cs:line 174\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nFuture instances of this failure will appear [here](http://aspnetci/httpAuth/app/rest/builds?locator=tag:ModelBingingNullRef,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."},{"Id":"7460862619","Type":"PullRequestEvent","CreatedAt":"2018-03-30T21:46:08","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7582","RelatedDescription":"Merged pull request \"Target a lower TFM\" (#7582) at aspnet/Mvc","RelatedBody":""},{"Id":"7460862349","Type":"PullRequestEvent","CreatedAt":"2018-03-30T21:46:01","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7582","RelatedDescription":"Opened pull request \"Target a lower TFM\" (#7582) at aspnet/Mvc","RelatedBody":""},{"Id":"7460861404","Type":"PullRequestEvent","CreatedAt":"2018-03-30T21:45:43","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7580","RelatedDescription":"Merged pull request \"Target a lower TFM\" (#7580) at aspnet/Mvc","RelatedBody":""}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7461135015","Type":"IssuesEvent","CreatedAt":"2018-03-30T23:32:50","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1643","RelatedDescription":"Closed issue \"Add third party notice to identity UI package\" (#1643) at aspnet/Identity","RelatedBody":""},{"Id":"7461058708","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:59:12","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Merged pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""},{"Id":"7461042048","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:52:27","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1728","RelatedDescription":"Opened pull request \"Reacting to templating repo's script changes\" (#1728) at aspnet/Identity","RelatedBody":""},{"Id":"7461013313","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:40:40","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1727","RelatedDescription":"Opened pull request \"[Fixes #1643] Add third party notice to identity UI package\" (#1727) at aspnet/Identity","RelatedBody":""},{"Id":"7459413828","Type":"IssuesEvent","CreatedAt":"2018-03-30T15:13:03","Actor":"weedkiller","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1726","RelatedDescription":"Opened issue \"Add sample views for Managing Roles, Users in Roles etc.\" (#1726) at aspnet/Identity","RelatedBody":"Please add some additional sample views for roles, users in roles, roles containing user.\r\nNumber of failed login attempts in one hour. with lock out option.\r\n\r\nhttps://github.com/aspnet/Identity/tree/dev/samples/IdentitySample.Mvc/Views/Account"},{"Id":"7459280221","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:40:11","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1618","RelatedDescription":"Closed issue \"[IdentityUI] Consider returning a 404 in the DownloadPersonalData.OnGet\" (#1618) at aspnet/Identity","RelatedBody":"We render the DownloadPersonalData page, but it has no content. The page is meant to only have an OnPost handler which is reached via the Personal Data page. Here's what you see if you visit /Identity/Account/Manage/DownloadPersonalData from the browser:\r\n\r\n![image](https://user-images.githubusercontent.com/174281/35944193-70e478a4-0c10-11e8-9d1d-c3dc39642f6a.png)\r\n"},{"Id":"7459280205","Type":"PullRequestEvent","CreatedAt":"2018-03-30T14:40:11","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1720","RelatedDescription":"Merged pull request \"[Fixes #1618] Consider returning a 404 in the DownloadPersonalData.OnGet\" (#1720) at aspnet/Identity","RelatedBody":""},{"Id":"7459220769","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:24:51","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1679","RelatedDescription":"Closed issue \"Consider allowing using entities that don't derive from IdentityUser with the default UI\" (#1679) at aspnet/Identity","RelatedBody":"> The decision was made for 2.0 templates to start using the properties on IdentityUser directly instead going thru the user manager for things like user.Id for some of the exception messages. That binds the views to IdentityUser. I did bring this up at the time the change was made so it was intentional, You can ask @DamianEdwards / @danroth27 to consider revisit that decision\r\n\r\nSo... @DamianEdwards @danroth27 please reconsider this decision :sweat_smile: "},{"Id":"7459213290","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:22:51","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1690","RelatedDescription":"Closed issue \"AddDefaultUI() throws when using IdentityUser<T>\" (#1690) at aspnet/Identity","RelatedBody":"If your user and role inherit from IdentityUser\\<T\\> / IdentityRole\\<T\\> instead of IdentityUser / IdentityRole, then AddDefaultUI() throws.\r\n\r\nProject to reproduce here: https://github.com/jeffhube/aspnet-identity-test\r\n\r\n```csharp\r\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>\r\n{\r\n}\r\n\r\npublic class ApplicationUser : IdentityUser<Guid>\r\n{\r\n}\r\n\r\npublic class ApplicationRole : IdentityRole<Guid>\r\n{\r\n}\r\n\r\nservices.AddIdentity<ApplicationUser, ApplicationRole>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders()\r\n    .AddDefaultUI();\r\n```\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: GenericArguments[0], 'IdentityTest.ApplicationUser', on 'Microsoft.AspNetCore.Identity.UI.IdentityDefaultUIConfigureOptions`1[TUser]' violates the constraint of type 'TUser'. ---> System.TypeLoadException: GenericArguments[0], 'IdentityTest.ApplicationUser', on 'Microsoft.AspNetCore.Identity.UI.IdentityDefaultUIConfigureOptions`1[TUser]' violates the constraint of type parameter 'TUser'.\r\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\r\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.AddDefaultUI(IdentityBuilder builder)\r\n   at IdentityTest.Startup.ConfigureServices(IServiceCollection services) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Startup.cs:line 32\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.ConfigureServices(IServiceCollection services)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Initialize()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\n   at IdentityTest.Program.BuildWebHost(String[] args) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Program.cs:line 21\r\n   at IdentityTest.Program.Main(String[] args) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Program.cs:line 17\r\n```"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7461139415","Type":"PullRequestEvent","CreatedAt":"2018-03-30T23:34:53","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2446","RelatedDescription":"Opened pull request \"Reaction to *Memory changes\" (#2446) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7460963944","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:21:49","Actor":"anurse","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2445","RelatedDescription":"Merged pull request \"Add IConnection to Connections.Abstractions (#2444)\" (#2445) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7460963381","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:21:36","Actor":"anurse","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2445","RelatedDescription":"Opened pull request \"Add IConnection to Connections.Abstractions (#2444)\" (#2445) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7460960472","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:20:32","Actor":"anurse","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2444","RelatedDescription":"Merged pull request \"Add IConnection to Connections.Abstractions\" (#2444) at aspnet/KestrelHttpServer","RelatedBody":"The end goal for 2.1 will be to merge `IConnection` and `ConnectionContext`, in the short term, we want to move this to a shipping assembly so that we can delete sockets.abstractions."},{"Id":"7457351751","Type":"IssuesEvent","CreatedAt":"2018-03-30T03:41:08","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2440","RelatedDescription":"Closed issue \"Make Kestrel TryAdd when adding it's IServer implementation\" (#2440) at aspnet/KestrelHttpServer","RelatedBody":"For ANCM in-proc to work with scenarios like:\r\n```c#\r\nWebHostBuilder.CreateDefaultWebHostBuilder() // which calls UseKestrel() and UseIISIntegration();\r\n    .UseKestrel();\r\n```\r\nwe need the call to UseIISIntegration to always add it's IServer implementation rather than Kestrel overriding it. \r\n\r\nAs we want out-of-proc and in-proc to work without code changes, we will need [Kestrel to TryAdd it's server implementation](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel/WebHostBuilderKestrelExtensions.cs#L35).\r\n\r\ncc/ @davidfowl @pakrym @Tratcher "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7456810989","Type":"IssuesEvent","CreatedAt":"2018-03-29T23:45:26","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2230","RelatedDescription":"Closed issue \"Shutdown command needs to compute the correct default pipe name\" (#2230) at aspnet/Razor","RelatedBody":"We recently changed the server to be created using the pipe name computed from the path to `rzc.dll` https://github.com/aspnet/Razor/issues/2216. But when the shutdown command is directly invoked, we don't pass in the tool assembly path [here](https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Razor.Tools/ShutdownCommand.cs#L30). It should instead pass in the tool assembly path to `ComputeDefault()`.\r\n\r\ncc @rynowak "},{"Id":"7456398269","Type":"PullRequestEvent","CreatedAt":"2018-03-29T21:44:52","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Merged pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455835879","Type":"PullRequestEvent","CreatedAt":"2018-03-29T19:44:58","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2232","RelatedDescription":"Opened pull request \"Normalize the tool assembly path before using it as the base for pipe…\" (#2232) at aspnet/Razor","RelatedBody":"… name\r\n\r\n#2230 \r\n\r\nThe actual reason for this bug was the tool assembly path that MsBuild passes in looks like\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\..\\..\\tools\\rzc.dll`\r\n\r\nbut the shutdown command uses the path\r\n`C:\\Users\\ajbaaska\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0-preview2-t000\\build\\netstandard2.0\\tools\\rzc.dll`\r\n\r\nNotice the lack of `\\build\\netstandard2.0\\..\\..\\`\r\n\r\nSo calling `Path.GetFullPath` before using this to compute pipe name fixes the problem.\r\n\r\nAdded a test"},{"Id":"7455342054","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:49:46","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2231","RelatedDescription":"Closed issue \"Abstract DocumentTracker lifecycle from directly depending on ITextViews\" (#2231) at aspnet/Razor","RelatedBody":"Today our document trackers live and die based off of having an ITextView associated with them.  We need to be able to work in an invisible editor world (live share) which does not have any associated text views."},{"Id":"7455198982","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:20:28","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2231","RelatedDescription":"Opened issue \"Abstract DocumentTracker lifecycle from directly depending on ITextViews\" (#2231) at aspnet/Razor","RelatedBody":"Today our document trackers live and die based off of having an ITextView associated with them.  We need to be able to work in an invisible editor world (live share) which does not have any associated text views."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":158,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2018-03-31T05:30:09.8823938Z","RunDurationInMilliseconds":8401}