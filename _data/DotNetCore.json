{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7363510129","Type":"IssuesEvent","CreatedAt":"2018-03-12T04:14:50","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16892","RelatedDescription":"Opened issue \"LinkedList_Generic_Tests_int.RemoveLast_Tests failed on Windows in CI\" (#16892) at dotnet/coreclr","RelatedBody":"_From @stephentoub on March 7, 2018 14:54_\n\nhttps://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/35efdbdc1e25f83f216064482479e555425ce3a0/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_int~2FRemoveLast_Tests\r\n```\r\nWindows.81.Amd64.Open-Debug-x64\r\nUnhandled Exception of Type Xunit.Sdk.EqualException\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }\r\nActual:   LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }\r\nStack Trace :\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyLinkedListNode(LinkedListNode`1 node, T expectedValue, LinkedList`1 expectedList, LinkedListNode`1 expectedPrevious, LinkedListNode`1 expectedNext) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 141\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyState(LinkedList`1 linkedList, T[] expectedItems) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 83\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.InitialItems_Tests(LinkedList`1 collection, T[] expectedItems) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 38\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.RemoveLast_Tests() in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.RemoveLast.cs:line 89\r\n```\n\n_Copied from original issue: dotnet/corefx#27817_"},{"Id":"7362949565","Type":"IssuesEvent","CreatedAt":"2018-03-11T23:38:06","Actor":"juliuslouw","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16891","RelatedDescription":"Opened issue \"Compiler intrinsic '__m128' error when building clr-samples (Ubuntu/Clang 3.9) \" (#16891) at dotnet/coreclr","RelatedBody":"While porting a .NET Core profiler to Linux (specifically Ubuntu), the build fails with the following errors below. I'm able to reproduce the issue in the example hosted at [Microsoft/clr-samples](https://github.com/Microsoft/clr-samples). The sample there works out-of-the-box but starts failing immediately when a simple `#include <algorithm>` directive is added. \r\n\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/algorithm:62:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h:66:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random:50:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h:33:\r\nIn file included from /usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/x86intrin.h:29:\r\nIn file included from /usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/immintrin.h:40:\r\n/usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/pmmintrin.h:45:19: error: unknown type name '__m128i'; did you mean '__m128'?\r\nstatic __inline__ __m128i __DEFAULT_FN_ATTRS\r\n                  ^\r\n/home/developer/Projects/cryptonomicon/profiler/../modules/coreclr/v2.0.5/src/pal/inc/rt/xmmintrin.h:32:15: note: '__m128' declared here\r\ntypedef float __m128 __attribute__((__vector_size__(16)));\r\n\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/algorithm:62:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h:66:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random:50:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h:33:\r\nIn file included from /usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/x86intrin.h:29:\r\nIn file included from /usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/immintrin.h:40:\r\n/usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/pmmintrin.h:45:27: error: '__target__' attribute only applies to functions\r\nstatic __inline__ __m128i __DEFAULT_FN_ATTRS\r\n                          ^\r\n/usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/pmmintrin.h:31:50: note: expanded from macro '__DEFAULT_FN_ATTRS'\r\n  __attribute__((__always_inline__, __nodebug__, __target__(\"sse3\")))\r\n                                                 ^\r\n/usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/pmmintrin.h:46:17: error: use of undeclared identifier '__m128i'\r\n_mm_lddqu_si128(__m128i const *__p)\r\n                ^\r\n/usr/lib/llvm-3.9/bin/../lib/clang/3.9.1/include/pmmintrin.h:46:36: error: expected ';' after top level declarator\r\n_mm_lddqu_si128(__m128i const *__p)\r\n\r\nI'm able to resolve the error by using Clang 3.5, but the coreclr instructions appears to prefer Clang 3.9 going forward. Any advice or suggestions would be very much appreciated!\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7363044869","Type":"IssuesEvent","CreatedAt":"2018-03-12T00:38:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8767","RelatedDescription":"Closed issue \"Preview2 packages missing?\" (#8767) at dotnet/cli","RelatedBody":"In Alpine 3.7, i tried 3.6 tarball:\r\n\r\n```sh\r\ndocker run -it alpine:latest\r\napk update\r\napk add curl libstdc++ libunwind libintl icu openssl\r\n\r\ncurl -O https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\nmkdir -p /usr/bin/dotnet\r\ntar -xzvf dotnet-sdk-latest-alpine.3.6-x64.tar.gz  -C /usr/bin/dotnet\r\nexport PATH=$PATH:/usr/bin/dotnet\r\nrm dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\n```\r\n\r\nAfter that when i run `dotnet new console -n testconsole`, i get\r\n\r\n```sh\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on testconsole/testconsole.csproj...\r\n  Restoring packages for /testconsole/testconsole.csproj...\r\n/testconsole/testconsole.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview2-26309-01)\r\n/testconsole/testconsole.csproj : error NU1102:   - Found 24 version(s) in nuget.org [ Nearest version: 2.1.0-preview1-26216-03 ]\r\n  Generating MSBuild file /testconsole/obj/testconsole.csproj.nuget.g.props.\r\n  Generating MSBuild file /testconsole/obj/testconsole.csproj.nuget.g.targets.\r\n  Restore failed in 206.09 ms for /testconsole/testconsole.csproj.\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n> Unable to find package Microsoft.NETCore.App with version (**>= 2.1.0-preview2-26309-01**)\r\n> Nearest version: **2.1.0-preview1-26216-03**"},{"Id":"7363037516","Type":"PullRequestEvent","CreatedAt":"2018-03-12T00:34:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8761","RelatedDescription":"Merged pull request \"Update CoreSetup, CoreSetup, CoreSetup, Roslyn to preview2-26311-02, preview2-26311-02, preview2-26311-02, beta2-62711-03, respectively (master)\" (#8761) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7362967519","Type":"IssuesEvent","CreatedAt":"2018-03-11T23:49:59","Actor":"kasper3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8767","RelatedDescription":"Opened issue \"Preview2 packages missing?\" (#8767) at dotnet/cli","RelatedBody":"In Alpine 3.7, i tried that tarball:\r\n\r\n```sh\r\ndocker run -it alpine:latest\r\napk update\r\napk add curl libstdc++ libunwind libintl icu openssl\r\n\r\ncurl -O https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\nmkdir -p /usr/bin/dotnet\r\ntar -xzvf dotnet-sdk-latest-alpine.3.6-x64.tar.gz  -C /usr/bin/dotnet\r\nexport PATH=$PATH:/usr/bin/dotnet\r\nrm dotnet-sdk-latest-alpine.3.6-x64.tar.gz\r\n```\r\n\r\nAfter that when i run `dotnet new console -n testconsole`, i get\r\n\r\n```sh\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on testconsole/testconsole.csproj...\r\n  Restoring packages for /testconsole/testconsole.csproj...\r\n/testconsole/testconsole.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview2-26309-01)\r\n/testconsole/testconsole.csproj : error NU1102:   - Found 24 version(s) in nuget.org [ Nearest version: 2.1.0-preview1-26216-03 ]\r\n  Generating MSBuild file /testconsole/obj/testconsole.csproj.nuget.g.props.\r\n  Generating MSBuild file /testconsole/obj/testconsole.csproj.nuget.g.targets.\r\n  Restore failed in 206.09 ms for /testconsole/testconsole.csproj.\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n> Unable to find package Microsoft.NETCore.App with version (**>= 2.1.0-preview2-26309-01**)\r\n> Nearest version: **2.1.0-preview1-26216-03**"},{"Id":"7362434082","Type":"IssuesEvent","CreatedAt":"2018-03-11T18:32:31","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8766","RelatedDescription":"Closed issue \"dotnet publish in Development Server - not Local Machine\" (#8766) at dotnet/cli","RelatedBody":"Hi, \r\n\r\nWith dotnet core and it's CLI tools, is there any significance or difference in doing dotnet publish in local machine when compared to dotnet publish in a development server? \r\n\r\nI tend to prefer dotnet publish in the dev server - this understanding is in accordance with practices in my previous projects that you do your builds in server as opposed to your local machine. \r\n\r\nKindly advise. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7361963188","Type":"IssuesEvent","CreatedAt":"2018-03-11T13:54:58","Actor":"gitfortee","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8766","RelatedDescription":"Opened issue \"dotnet publish in Development Server - not Local Machine\" (#8766) at dotnet/cli","RelatedBody":"Hi, \r\n\r\nWith dotnet core and it's CLI tools, is there any significance or difference in doing dotnet publish in local machine when compared to dotnet publish in a development server? \r\n\r\nI tend to prefer dotnet publish in the dev server - this understanding is in accordance with practices in my previous projects that you do your builds in server as opposed to your local machine. \r\n\r\nKindly advise. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7361938544","Type":"IssuesEvent","CreatedAt":"2018-03-11T13:38:50","Actor":"gitfortee","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8765","RelatedDescription":"Opened issue \"dotnet publish manual process & impact on npm package dependencies - need review\" (#8765) at dotnet/cli","RelatedBody":"Folks, \r\n\r\nI need some guidance. This is not an issue actually but please help. \r\n\r\nI am doing manual build/publish of a dotnet core & angular 4 web application in my development server(not the local machine). I use dotnet CLI tools to do the build & publish process. These are the steps I perform at this moment.\r\n\r\n1. Download the source code from source control - I use TFS web interface to download source code to the Development server.\r\n\r\n2. The node_modules folder is not checked in to the source control so it is not available when the source code is downloaded.\r\n\r\n3. Run the dotnet publish command for the Client/Angular project from the respective folder within the source code downloaded.\r\n\r\n4. Every time i do this process, in the command output i see 'x number of packages added' which i believe is the result of npm packages being installed.\r\n\r\n5. At this stage, I am afraid if step #4 will install a different version of dependencies than what i have in my local machine since the package.json uses semver notation for dependencies.\r\n\r\n6. I am also uncertain of what version of the dependencies mentioned in packages.json gets installed during #4 in the Development server because i do not see the 'x number of packages added' message when i run dotnet publish from the local machine - which i understand because i already have the node_modules folder in the local machine.\r\n\r\n7. The issues mentioned in steps #4 & #5 persists each time i perform the manual build process @ the server. Thus leaves me uncertain of what happens to my npm package dependencies as explained in #6.\r\n8. Is there a workaround for the issues mentioned above..?\r\n\r\n9. Does anyone have the practice of upgrading npm package dependencies for their web projects periodically?\r\n\r\n10. Or do you set the dependencies once and never upgrade the dependencies..?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7359014110","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:15:12","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/672","RelatedDescription":"Opened pull request \"Update Xamarin platform APIs to latest Dev 15.7\" (#672) at dotnet/standard","RelatedBody":"Fixes https://github.com/mono/mono/issues/7496"},{"Id":"7358857084","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:06:28","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/671","RelatedDescription":"Opened pull request \"Trimming fixes\" (#671) at dotnet/standard","RelatedBody":"Fixes #670, #667, #626 \r\n\r\nThis honors MSBuild's related files (eg: .pdb) that are added to ReferenceCopyLocalPaths.  I added a switch to turn off this behavior if it is undesired.\r\n\r\nI've also fixed the package-graph issues by bringing back the assets file reading that I previously removed in a723e6ca6c49d6947803d2952517e46f1465c0ce, but as a fallback.\r\n\r\n/cc @jnm2 @weshaggard "},{"Id":"7356295921","Type":"IssuesEvent","CreatedAt":"2018-03-09T14:26:39","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/670","RelatedDescription":"Opened issue \"Trimming is not preserving non-assembly ReferenceCopyLocalPaths\" (#670) at dotnet/standard","RelatedBody":"Our trimmer only removed ReferenceCopyLocalPaths that had OriginalItemSpecs of removed assemblies, but your trimmer removes all non-assembly `ReferenceCopyLocalPaths`. Namely, 50 PDBs from NuGet packages. We want those PDBs in build output for two reasons: stepping into embedded or linked source while debugging, and snapshotting them easily with each CI build for use in future debugging.\r\n\r\nIs there a workaround I could apply? It [looks](https://github.com/dotnet/standard/blob/master/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L99) like the MSBuild task is missing the facility to keep related reference items together.\r\n\r\n/cc @ericstj "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7363510269","Type":"IssuesEvent","CreatedAt":"2018-03-12T04:14:54","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27817","RelatedDescription":"Closed issue \"LinkedList_Generic_Tests_int.RemoveLast_Tests failed on Windows in CI\" (#27817) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/35efdbdc1e25f83f216064482479e555425ce3a0/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_int~2FRemoveLast_Tests\r\n```\r\nWindows.81.Amd64.Open-Debug-x64\r\nUnhandled Exception of Type Xunit.Sdk.EqualException\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }\r\nActual:   LinkedListNode`1 { List = [718949278, 815265269, 911581260, 1007897251, 1104213242, ...], Next = LinkedListNode`1 { List = [...], Next = null, Previous = LinkedListNode`1 { ... }, Value = 1296845224 }, Previous = LinkedListNode`1 { List = [...], Next = LinkedListNode`1 { ... }, Previous = LinkedListNode`1 { ... }, Value = 1104213242 }, Value = 1200529233 }\r\nStack Trace :\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyLinkedListNode(LinkedListNode`1 node, T expectedValue, LinkedList`1 expectedList, LinkedListNode`1 expectedPrevious, LinkedListNode`1 expectedNext) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 141\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.VerifyState(LinkedList`1 linkedList, T[] expectedItems) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 83\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.InitialItems_Tests(LinkedList`1 collection, T[] expectedItems) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.cs:line 38\r\n   at System.Collections.Tests.LinkedList_Generic_Tests`1.RemoveLast_Tests() in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Collections\\tests\\Generic\\LinkedList\\LinkedList.Generic.Tests.RemoveLast.cs:line 89\r\n```"},{"Id":"7363362211","Type":"PullRequestEvent","CreatedAt":"2018-03-12T03:08:51","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27959","RelatedDescription":"Opened pull request \"Add a test to validate sensitivity on OSX\" (#27959) at dotnet/corefx","RelatedBody":"See #26797\r\n\r\ncc: @danmosemsft, @pjanotti "},{"Id":"7363328543","Type":"IssuesEvent","CreatedAt":"2018-03-12T02:54:31","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25863","RelatedDescription":"Closed issue \"Investigate improving GetFiles array perf.\" (#25863) at dotnet/corefx","RelatedBody":"The APIs that return arrays currently use an enumerable internally. We could potentially write optimized solutions for these that take into account the result will be a flat array (i.e. forgo some of the enumerable overhead).\r\n\r\n``` C#\r\nnamespace System.IO\r\n{\r\n    public static class Directory\r\n    {\r\n        public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption);\r\n        public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption);\r\n        public static string[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);\r\n    }\r\n\r\n    public sealed class DirectoryInfo : FileSystemInfo\r\n    {\r\n        public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);\r\n        public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption);\r\n        public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption); \r\n    }\r\n}\r\n```\r\n\r\nMono had some optimizations along these lines. https://github.com/dotnet/designs/pull/24#issuecomment-351102126"},{"Id":"7363321056","Type":"PullRequestEvent","CreatedAt":"2018-03-12T02:51:20","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27956","RelatedDescription":"Merged pull request \"Re-enable OSX in CI\" (#27956) at dotnet/corefx","RelatedBody":"This reverts commit f4e9dabc6eafd0c568151fa15bb724376282404b."},{"Id":"7363299997","Type":"PullRequestEvent","CreatedAt":"2018-03-12T02:42:14","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27958","RelatedDescription":"Opened pull request \"fix NTLM auth and add some manually enabled tests\" (#27958) at dotnet/corefx","RelatedBody":"Fixes #27922\r\n\r\nHandling of authContext.IsCompleted was wrong, which would screw up the NTLM handling (but not Negotiate).\r\n\r\nAdd some manual HttpListener-based tests.  These can be enabled by changing the LocalHttpListenerTestsEnabled static to true.  For now at least, the HttpListeners keep running until tests complete, since it's not easy to determine when all the HttpListener-based tests have run.  This is rather hacky, so I'm open to other suggestions on how to enable this...\r\n\r\n@stephentoub @davidsh @wfurt @Tratcher "},{"Id":"7363220099","Type":"PullRequestEvent","CreatedAt":"2018-03-12T02:08:11","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27957","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview2-26312-01, preview2-26311-02, respectively (master)\" (#27957) at dotnet/corefx","RelatedBody":""},{"Id":"7363201064","Type":"PullRequestEvent","CreatedAt":"2018-03-12T01:59:24","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27955","RelatedDescription":"Merged pull request \"More FileSystem tests\" (#27955) at dotnet/corefx","RelatedBody":"- Fix #27244 validation\r\n- Add more enumerable tests\r\n\r\nFixes #27244\r\n\r\ncc: @danmosemsft, @Anipik, @pjanotti "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7363648870","Type":"PullRequestEvent","CreatedAt":"2018-03-12T05:23:36","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25415","RelatedDescription":"Opened pull request \"WIP: Validate native implementation of Portable PDB reader\" (#25415) at dotnet/roslyn","RelatedBody":"**Test only change.**\r\n\r\nAdds validation of native Portable PDB reader to PDB tests.\r\n"},{"Id":"7363600587","Type":"IssuesEvent","CreatedAt":"2018-03-12T05:00:34","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25414","RelatedDescription":"Opened issue \"VB: Pretty listing and Intellisense break when below line that uses XML axis properties.\" (#25414) at dotnet/roslyn","RelatedBody":"**Version Used**:\r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis is a bit tricky to explain but I will try:\r\n\r\n```vb\r\n    Dim xml = <blank/>\r\n\r\n    '<-- pretty listing WORKS here. If you type 'dim' and press space it becomes 'Dim'.\r\n    Dim blah = xml...<blah>\r\n    '<-- pretty listing BREAKS here. If you type 'dim' and press space it STAYS 'dim'.\r\n    '<-- pretty listing WORKS here. If you type 'dim' and press space it becomes 'Dim'.\r\n```\r\n\r\nAs the comments describe, if you type on the line immediately above `Dim blah = xml...<blah>` the code is **reformatted as you type.** Same thing if you are one extra line below `Dim blah = xml...<blah>`. However if you are on the **line immediately below** `Dim blah = xml...<blah>` the **reformatting only happens when you press enter** after you are done typing (not when you  press space bar).\r\n\r\nI suspect the problem is caused by using XML axis properties as seen in the expression `xml...<blah>`. If instead of axis properties you use method calls, everything works as expected:\r\n\r\n```vb\r\n    '<-- pretty listing WORKS here like before.\r\n    Dim blah = xml.Descendants(\"blah\") '<-- note use of method call instead of axis property.\r\n    '<-- pretty listing NOW WORKS HERE TOO. If you type 'dim' and press space it becomes 'Dim'.\r\n    '<-- pretty listing WORKS here like before.\r\n```\r\n\r\nFor Intellisense/autocomplete, the breakage occurs when you try to invoke autocomplete after the expression containing axis properties:\r\n\r\n```vb\r\n    Dim qry1 = From e In xml...<blah> sele\r\n```\r\n\r\n...in the above code after the letters `sele` **if you try to invoke autocomplete so they can be completed and reformatted to read `Select`, nothing happens**. However if you use method calls instead, Intellisense kicks in and suggests the `Select` keyword as expected:\r\n\r\n![vs_axis_properties_break_intellisense](https://user-images.githubusercontent.com/20465797/37266119-40508750-25c9-11e8-81ca-c0a5a538d8f4.png)\r\n\r\n**Expected Behavior**:\r\n\r\nSomething about those xml axis properties is tripping up the pretty listing and Intellisense functionality. And this happens only to code that appears **immediately after** axis property expressions whether on the same line (as in the case of the LINQ queries) or on the line immediately below.\r\n\r\nPretty listing and Intellisense/autocomplete should work everywhere: below, above and within the line containing an xml axis expression."},{"Id":"7363367798","Type":"PullRequestEvent","CreatedAt":"2018-03-12T03:11:06","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25413","RelatedDescription":"Opened pull request \"Merge ref reassignment into 15.7\" (#25413) at dotnet/roslyn","RelatedBody":"The test plan for ref-reassignment is at https://github.com/dotnet/roslyn/issues/22466 and has already been reviewed. The blocking issues were\r\n\r\n- Language version checks for ref in for & foreach\r\n- Additional tests around unary plus and ref assignment expressions\r\n- Tests for ?., IDisposable, and ref assignment expressions\r\n- Additional semantic model tests\r\n- Additional IOperation tests\r\n\r\nas well as the IDE checklist. These have all been completed, therefore this should be ready to merge."},{"Id":"7362917120","Type":"IssuesEvent","CreatedAt":"2018-03-11T23:16:25","Actor":"thauk-copperleaf","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25412","RelatedDescription":"Opened issue \"Compilation errors after updating targeted version of Roslyn\" (#25412) at dotnet/roslyn","RelatedBody":"Last year, I used Roslyn 2.4.0 to create a library that would compile an existing (on-disk) solution containing C# projects, load the resulting assembly for one of the projects, then use reflection to do some analysis on the assembly. This was all working fine. My library targeted .NET Standard.\r\n\r\nSince coming back to this project 4 months later, changing the library to target .NET Framework 4.7.1, eliminating a dependency on an external assembly, and updating to Roslyn 2.7.0, it seems that my compilation step now fails with a multitude of errors, and I'm trying to figure out why. Keep in mind that the solution passed to my library will compile with no warnings or errors if I were to open it up in an IDE (either Visual Studio or Rider).\r\n\r\nThe first error is:\r\n\r\n```warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.```\r\n\r\nThe fix most people suggest is to add a metadata reference to either typeof(object) or mscorlib, e.g.:\r\n\r\n```compilation.AddReferences(MetadataReference.CreateFromFile(typeof(object).GetTypeInfo().Assembly.Location));```\r\n\r\nThe next group of errors I get is:\r\n    \r\n```error CS0234: The type or namespace name 'Linq' does not exist in the namespace 'System' (are you missing an assembly reference?)```\r\n\r\nSimilarly, I can fix that with:\r\n\r\n```compilation.AddReferences(MetadataReference.CreateFromFile(typeof(System.Linq.Enumerable).GetTypeInfo().Assembly.Location));```\r\n\r\nFinally, I get several thousand errors related to the root namespace my company uses, `CL`:\r\n\r\n```error CS0246: The type or namespace name 'CL' could not be found (are you missing a using directive or an assembly reference?)```\r\n\r\n\r\nQuestions:\r\n\r\n1. Why do I need to add these references when I didn't have to before?\r\n\r\n2. Why does compiling the solution with Visual Studio or Rider work, but with Roslyn fail? What are these IDEs doing differently?\r\n\r\n3. Related: I do not control the solution I'm compiling, so it's possible that anything could get imported. How can I avoid hardcoding any metadata references at all, which makes my library brittle?\r\n"},{"Id":"7362855931","Type":"PullRequestEvent","CreatedAt":"2018-03-11T22:37:47","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25411","RelatedDescription":"Opened pull request \"Track nullability of non-nullable locals, parameters, members\" (#25411) at dotnet/roslyn","RelatedBody":"Track nullability of nullable _and non-nullable_ locals, parameters, and members."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7363376793","Type":"PullRequestEvent","CreatedAt":"2018-03-12T03:14:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5528","RelatedDescription":"Merged pull request \"Update dependencies\" (#5528) at dotnet/corert","RelatedBody":"Includes changes necessiated by the move of Vectors to CoreLib."},{"Id":"7363373749","Type":"PullRequestEvent","CreatedAt":"2018-03-12T03:13:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5529","RelatedDescription":"Merged pull request \"Typos\" (#5529) at dotnet/corert","RelatedBody":""},{"Id":"7362858824","Type":"PullRequestEvent","CreatedAt":"2018-03-11T22:39:43","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5529","RelatedDescription":"Opened pull request \"Typos\" (#5529) at dotnet/corert","RelatedBody":""},{"Id":"7362588942","Type":"PullRequestEvent","CreatedAt":"2018-03-11T20:03:23","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5528","RelatedDescription":"Opened pull request \"Update dependencies\" (#5528) at dotnet/corert","RelatedBody":"Includes changes necessiated by the move of Vectors to CoreLib."},{"Id":"7359237870","Type":"PullRequestEvent","CreatedAt":"2018-03-10T03:43:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7359083309","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:54:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7358862091","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:08:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358838837","Type":"PullRequestEvent","CreatedAt":"2018-03-09T23:59:24","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358332918","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:31:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5525","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5525) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7362349657","Type":"IssuesEvent","CreatedAt":"2018-03-11T17:42:46","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2036","RelatedDescription":"Closed issue \"Consider update the Microsoft.TestPlatform bundled in sdk?\" (#2036) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\n`dotnet test`\r\n\r\n## Expected  behavior\r\nThe version of vstest include in dotnet sdk should follow an more recent version in it's channel when released(preview or stable)\r\n\r\n## Actual behavior\r\nThe verion of dotnet sdk include MSBuild `15.7` and NuGet `15.7` but\r\n`Microsoft (R) Test Execution Command Line Tool Version 15.6.0-preview-20180109-01`\r\nWhile there is 3 preview and 2 stable version after that.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008321\r\n Commit:    4c2b07023a\r\n...\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7361969854","Type":"IssuesEvent","CreatedAt":"2018-03-11T13:59:10","Actor":"yyjdelete","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2036","RelatedDescription":"Opened issue \"Consider update the Microsoft.TestPlatform bundled in sdk?\" (#2036) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\n`dotnet test`\r\n\r\n## Expected  behavior\r\nThe version of vstest include in dotnet sdk should follow an more recent version in it's channel when released(preview or stable)\r\n\r\n## Actual behavior\r\nThe verion of dotnet sdk include MSBuild `15.7` and NuGet `15.7` but\r\n`Microsoft (R) Test Execution Command Line Tool Version 15.6.0-preview-20180109-01`\r\nWhile there is 3 preview and 2 stable version after that.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008321\r\n Commit:    4c2b07023a\r\n...\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7358848460","Type":"IssuesEvent","CreatedAt":"2018-03-10T00:02:59","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2035","RelatedDescription":"Opened issue \"S.R.TypeExtensions not deployed for net461 application\" (#2035) at dotnet/sdk","RelatedBody":"Have a situation where System.Reflection.TypeExtensions is not being deployed. Here is the project setup that we have:\r\n\r\n- CSharpCompilerTestUtilites: targets netstandard1.3 and uses System.Reflection.TypeExtensions\r\n- CSharpCompilerEmitTests: targets net461 + netcoreapp2.0, references CSharpCompilerTestUtilities\r\n\r\nThe net461 output of CSharpCompilerEmitTests does not contain System.Reflection.TypeExtensions. That is necessary to run and hence some of our unit tests fail. \r\n\r\nTo repro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Switch to branch repro/deploy-type-extensions\r\n- `powershell build/scripts/build.ps1 -build -restore` \r\n- Check the contents of `Binaries\\Debug\\UnitTests\\CSharpCompilerEmitTests\\net461` \r\n\r\nNote: In our build `DisableImplicitFrameworkReferences` is `false` by default and we have a tendancy to use explicit package references (hold over from the project.json days). It's possible this is contributing here but I'm unable to track this down. \r\n\r\n"},{"Id":"7358645501","Type":"IssuesEvent","CreatedAt":"2018-03-09T22:52:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2034","RelatedDescription":"Opened issue \"Move import of bundled versions earlier\" (#2034) at dotnet/sdk","RelatedBody":"Currently they're imported here: \r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L18\r\n\r\nBut that would be after common props, and importantly after package reference props and Directory.Build.props. \r\n\r\nWe should move it here for the same reason as noted for UsingMicrosoftNETSdk:\r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L17-L26\r\n\r\nThe reason is that we now have the NETCoreSdkVersion set in these props and we want that to be consumable everywhere like UsingMicrosoftNETSdk.\r\n"},{"Id":"7358441976","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:57:43","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2031","RelatedDescription":"Closed pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#2031) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358437808","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:56:42","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2030","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#2030) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358142047","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:45:55","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2033","RelatedDescription":"Opened issue \"How to disable \"preview version\" warning message?\" (#2033) at dotnet/sdk","RelatedBody":"Currently, the SDK issues this high importance message when I build\r\n\r\n> You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. \r\n\r\nI already have a global.json version and I explicitly set it a preview version, so the warning seems unnecessary. How can I disable this message altogether?"},{"Id":"7358131756","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:43:21","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2032","RelatedDescription":"Closed issue \"Build issues hundreds of spam messages about \"You are working with a preview version of the .NET Core SDK.\"\" (#2032) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\nclone https://github.com/aspnet/Mvc\r\nInstall latest CLI (2.1.300-preview2-008322)\r\ndotnet build Mvc.sln\r\n\r\n**Result**\r\n\r\n🤢 \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/37227919-a72d42a2-2393-11e8-8bf0-e83799995ab9.png)\r\n\r\n\r\n@livarcocc @nguerrera "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-03-12T05:30:23.3860951Z","RunDurationInMilliseconds":8423}