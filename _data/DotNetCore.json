{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6840049093","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:55","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Reopened issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6840048672","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:48","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/24","RelatedDescription":"Reopened issue \" .NET Standard 2.0 is final\" (#24) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n[.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md) is final. \r\n\r\nYou can now start producing .NET Standard 2.0 libraries and NuGet packages. Please use the latest [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview) as it contains many improvements that were necessary to provide a good experience.\r\n      \r\n## Details\r\n\r\n* **Bigger API Surface**: We have more than doubled the set of available APIs from **13k** in [.NET Standard 1.6](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md) to **32k** in [.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md). Most of the added APIs are .NET Framework APIs. These additions make it much easier to port existing code to .NET Standard, and, by extension, to any .NET implementation of .NET Standard, such as .NET Core 2.0 and the upcoming version of UWP.\r\n\r\n* **.NET Framework compatibility mode**: The vast majority of NuGet packages are currently still targeting .NET Framework. Many projects are currently blocked from moving to .NET Standard because not all their dependencies are targeting .NET Standard yet. That's why we added a compatibility mode that allows .NET Standard projects to depend on .NET Framework libraries as if they were compiled for .NET Standard. Of course, this may not work in all cases (for instance, if the .NET Framework binaries uses WPF), but we found that [70% of all NuGet packages on nuget.org are API compatible][video] with .NET Standard 2.0, so in practice it unblocks many projects.\r\n\r\n[video]: https://www.youtube.com/watch?v=iIlQer4LEac\r\n\r\n* **Broad platform support**. .NET Standard 2.0 is [supported on the following platforms](https://github.com/dotnet/standard/blob/master/docs/versions.md):\r\n    - .NET Framework 4.6.1\r\n    - .NET Core 2.0\r\n    - Mono 5.4\r\n    - Xamarin.iOS 10.14\r\n    - Xamarin.Mac 3.8\r\n    - Xamarin.Android 7.5\r\n    - UWP is work in progress and will ship later this year.\r\n\r\n## Tooling Prerequisites\r\n\r\nIn general, make sure you run the latest version of the tooling:\r\n\r\n* **.NET Core SDK**. You always need to install [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview). This also includes the CLI (`dotnet`) for building packages, so if you only want to use the CLI, you can stop here.\r\n* **Visual Studio**. If you want to use Visual Studio for authoring .NET Standard 2.0 libraries, you also need to install [Visual Studio 2017 15.3](https://www.visualstudio.com/vs/preview/). Make sure to use 15.3 and not an earlier version, as this release addressed a couple of key issues to provide a good experience. If you only need to consume .NET Standard 2.0 libraries, you can do that even in Visual Studio 2015 but you'll need NuGet client 3.6 or higher ([download from Nuget.org/downloads](https://www.nuget.org/downloads))\r\n* **Visual Studio for Mac**. The latest version of [Visual Studio for Mac](https://www.visualstudio.com/vs/visual-studio-mac/) supports building .NET Standard 2.0 libraries. \r\n* **Rider**. The [latest version](https://www.jetbrains.com/rider/download) also has support for .NET Standard 2.0.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nFor discussion, see https://github.com/dotnet/standard/issues/439."},{"Id":"6840048225","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:40","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/22","RelatedDescription":"Reopened issue \".NET Core Support for macOS High Sierra\" (#22) at dotnet/announcements","RelatedBody":"# .NET Core Support for macOS High Sierra\r\n\r\n## Summary\r\n\r\n.NET Core 1.x and 2.0 do not currently support macOS High Sierra (version 10.13, currently in beta) due to changes in macOS. The .NET Core team has been testing macOS High Sierra builds and has filed bugs with Apple so that the two products can work better together.\r\n\r\nWe intend to have both .NET Core 1.x and 2.0 supporting macOS High Sierra by the time Apple ships the final production release. We are hoping to ship .NET Core 2.0 RTW with High Sierra support.\r\n\r\nAs .NET Core support for macOS High Sierra is improved, this announcement will be updated with the new status.\r\n\r\n## Impact\r\n\r\n.NET Core does not work on macOS High Sierra.\r\n\r\n## Details\r\n\r\n* [dotnet/core #677](https://github.com/dotnet/core/issues/677) -- tracking bug\r\n* [dotnet/corefx #22243](https://github.com/dotnet/corefx/pull/22243) -- workaround for issue 33294006, listed below.\r\n\r\nWe have reported the following issues to Apple as part of supporting .NET Core on macOS High Sierra.\r\n\r\n> Note: The issue links can only be accessed by Apple employees.\r\n\r\n* [33275095](https://bugreport.apple.com/web/?problemID=33275095) SSL Failure: macOS 10.13 (17A291j) SecureTransport in server mode can select ciphersuites not applicable to the TLS version.\r\n\r\n    **.NET Core Note:** When hosting an [SslStream](https://docs.microsoft.com/dotnet/api/system.net.security.sslstream?view=netcore-2.0) limited to TLS 1.0 or TLS 1.1 clients other than Apple SecureTransport may fail to connect.\r\n\r\n* [33143630](https://bugreport.apple.com/web/?problemID=33143630) macOS 10.13 (17A291j) SecTrustExecute fails with no error building revocation-enabled chain against a self-issued certificate.\r\n    \r\n    **.NET Core Note:** In this situation an Apple-specific derived type of CryptographicException will be thrown with a message of “No error”.\r\n\r\n* [33294006](https://bugreport.apple.com/web/?problemID=33294006) macOS 10.13 (17A291j) libcurl changing to LibreSSL changes thread-safety model from safe to unsafe \r\n    \r\n    **.NET Core Note:** A functioning workaround is in place, but it may regress performance for parallel HTTP requests (to avoid crashes caused by the loss of thread safety).\r\n\r\n* [32948209](https://bugreport.apple.com/web/?problemID=32948209) CCCryptorReset returns kCCUnimplemented for ECB on 10.13.\r\n\r\n    **.NET Core Note:** .NET Core has worked around this regression, so it should not be user-impacting."},{"Id":"6840047669","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/17","RelatedDescription":"Reopened issue \".NET Core Preview 2\" (#17) at dotnet/announcements","RelatedBody":"Today we announce the availability of .NET Core 2.0.0 Preview .\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview2-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview2.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/)\r\n\r\nPlease use [dotnet/core #711](https://github.com/dotnet/core/issues/711) for discussion and questions."},{"Id":"6840047172","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/15","RelatedDescription":"Reopened issue \".NET Framework 4.7 Docker Image Now Available\" (#15) at dotnet/announcements","RelatedBody":"## 4.7 image is now available on [Docker Hub](https://hub.docker.com/r/microsoft/dotnet-framework/).\r\n\r\n### Summary\r\n- The latest tag of the .NET Framework image now points to the 4.7 image.\r\n- The way our images layer is now different (although this shouldn’t affect anyone). Read more on the [design and discussion](https://github.com/dotnet/designs/issues/7).\r\n- Check it out with the [4.7 Docker Image Sample](https://github.com/Microsoft/dotnet-framework-docker-samples/tree/master/dotnetapp-4.7)\r\n\r\n### Feedback\r\nPlease try it out! General feedback can be logged in the [.NET Framework Docker issues](https://github.com/Microsoft/dotnet-framework-docker/issues).\r\n[Microsoft/dotnet-framework-docker #22 ](https://github.com/Microsoft/dotnet-framework-docker/issues/22) is open for discussion.\r\n"},{"Id":"6840046541","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:15","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/13","RelatedDescription":"Reopened issue \".NET Core 2.0.0 Preview 1 \" (#13) at dotnet/announcements","RelatedBody":"Today at [Build 2017](https://channel9.msdn.com/?wt.mc_id=build_hp#programGuide) we announced the availability of .NET Core 2.0.0 Preview 1.\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview1-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview1.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/05/10/announcing-net-core-2-0-preview-1/)\r\n\r\nPlease use [dotnet/core #640](https://github.com/dotnet/core/issues/640) for discussion and questions."},{"Id":"6840045806","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:03","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/11","RelatedDescription":"Reopened issue \".NET Designs Repository Created\" (#11) at dotnet/announcements","RelatedBody":"# .NET Designs Repository Created\r\n\r\n## Summary\r\n\r\n.NET designs now have a home on GitHub at [dotnet/designs](https://github.com/dotnet/designs). This repository and the process it uses is intended to be very similar to [dotnet/csharplang](https://github.com/dotnet/csharplang). We want to share .NET design documents and get much earlier feedback on plans.\r\n\r\n## Details\r\n\r\nThe repository was just created. You can see two designs that you can participate on. More designs will show up over time. These two designs were selected as the initial set since the current behavior for both has received significant feedback.\r\n\r\n- [.NET Core 2+ Naming and Versioning](https://github.com/dotnet/designs/issues/2)\r\n- [.NET Core 2+ Version Binding](https://github.com/dotnet/designs/issues/3)\r\n\r\nA separate repository was created for a few reasons:\r\n\r\n- .NET designs may need to be implemented in multiple repos, including runtime, framework and language repos.\r\n- .NET designs may or may not be specific to .NET Core.\r\n\r\nThanks in advance for your participation in this repository."},{"Id":"6840045368","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:57","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/10","RelatedDescription":"Reopened issue \"RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\" (#10) at dotnet/announcements","RelatedBody":"# RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\r\n\r\n## Summary\r\n\r\nThe RyuJIT JIT compiler will be used for all platform combinations for .NET Core 2.0 and beyond. JIT32 will be removed from the product. For .NET Core 1.x, RyuJIT is used for x64 and JIT32 is used for x86 chip support.\r\n\r\nWe intend for RyuJIT to be a 100% functionally compatible replacement for JIT32. RyuJIT has gone through extensive stress testing. This brings the .NET Core 32-bit product behavior much closer to the 64-bit product behavior.\r\n\r\nWe will publish more information on this change later. For now, this is just the announcement.\r\n\r\nNote: Windows is the only supported 32-bit platform for .NET Core 1.x and 2.x.\r\n\r\n### Details:\r\n\r\n- [Make RyuJIT/x86 the default x86 JIT (dotnet/coreclr #8260)](https://github.com/dotnet/coreclr/pull/8260)\r\n\r\n## Impact\r\n\r\n**Open Source** - RyuJIT is open source. JIT32 is not open source.\r\n\r\n**Single JIT Codebase** - There is now a single codebase for the CoreCLR JIT. This helps everyone who is working on platform expansion and who is investing in JIT improvements. An example is Samsung, who is investing in Linux x86 with RyuJIT x86.\r\n\r\n**Performance** - RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.\r\n\r\n**Features!** - RyuJIT has more features than JIT32. The feature gap with JIT32 will grow over time. The following features are now available to x86 workloads (due to this change): \r\n- SIMD\r\n- Fast Span&lt;T&gt; support\r\n- Inlining improvements\r\n- Devirtualization\r\n- Significantly better floating point performance\r\n- Better performance with value types (structs)\r\n\r\n**Possible compatibility concerns:** \r\n- floating-point precision\r\n- undefined behaviors (programs that happened to work that had bugs in them) especially around interop, inlining differences (GetCallerAssembly intrinsic).\r\n\r\nPlease test! If an x86 program was working in 1.x, and failing in 2.x, please report it on GitHub or at ryujit@microsoft.com. \r\n\r\nPlease see some of our past [blog posts on RyuJIT](https://blogs.msdn.microsoft.com/dotnet/tag/ryujit/) to learn more about it.\r\n\r\n## Rationale\r\n\r\nRyuJIT is the current and future platform of JIT compilation for .NET. We will use it for all platform combinations going forward. We're  more efficient as a developer community if we have a single codebase to learn, work on and improve."},{"Id":"6840041975","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/6","RelatedDescription":"Reopened issue \"Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\" (#6) at dotnet/announcements","RelatedBody":"# Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'\r\n\r\n## Summary\r\n\r\nUsing System.Net.Http 4.1.0-4.3.0 results in an exception when starting a web app that's .NET 4.6.1:\r\n* Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\r\n\r\nDetails in https://github.com/dotnet/corefx/issues/11100\r\nUpdated [System.Net.Http 4.3.1 package](https://www.nuget.org/packages/System.Net.Http/4.3.1) contains a fix and is available on nuget.\r\n\r\n## Impact\r\n\r\nHere's list of technical breaking changes caused by the solution withworkarounds for each.\r\nNote that these new behaviors are specific when running on net46 / Desktop. When you run on .NET Core, the behavior is intact.\r\n\r\n1. `HttpClientHandler.CheckCertificateRevocationList` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.CheckCertificateRevocationList` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n2. `HttpClientHandler.SslProtocols` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.SecurityProtocol` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n3. `HttpClientHandler.ServerCertificateCustomValidationCallback` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Works fine, except that the first parameter of type `HttpRequestMessage` is always `null`\r\n    * Workaround: Use `ServicePointManager.ServerCertificateValidationCallback`\r\n4. HTTP/2.0 support (introduced in System.Net.Http 4.1)\r\n    * New behavior: System.Net.Http (for net46 = Desktop) no longer supports HTTP/2.0 protocol on Windows 10.\r\n    * Workaround: Target System.Net.Http.WinHttpHandler NuGet package instead.\r\n    * Details:\r\n      * HTTP/2.0 support is part of the new CoreFx HTTP stack which on Windows is based on WinHTTP.  The original HTTP stack in .NET Framework 4.6 did not support HTTP/2.0 protocol.  If HTTP/2.0 protocol is needed, there is a separate NuGet package, System.Net.Http.WinHttpHandler which provides a new HttpClient handler. This handler is similar in features to `HttpClientHandler` (the normal default handler for HttpClient) but will support HTTP/2.0 protocol.  When using HttpClient on .NET Core runtime, the WinHttpHandler is actually built-in to HttpClientHandler.  But on .NET Framework, you need to explicitly use WinHttpHandler.\r\n      * Regardless of whether you are running using .NET Framework runtime (with WinHttpHandler) or .NET Core runtime using HttpClientHandler (or WinHttpHandler), there are additional requirements in order to get HTTP/2.0 protocol working on Windows:\r\n        * The client must be running on Windows 10 Anniversary Build (build 14393 or later).\r\n        * The `HttpRequestMessage.Version` must be explicitly set to 2.0 (the default is normally 1.1). Sample code:\r\n\r\n```c#\r\n            var handler = new WinHttpHandler();\r\n            var client = new HttpClient(handler);\r\n            var request = new HttpRequestMessage(HttpMethod.Get, \"http://www.example.com\");\r\n            request.Version = new Version(2, 0);\r\n\r\n            HttpResponseMessage response = await client.SendAsync(request);\r\n```\r\n\r\n## Rationale\r\n\r\nAfter much discussion it was decided the best way forward would be to revert the HttpClientHandler implementation in net46 build of CoreFX back to using original .NET Framework HTTP stack instead of WinHTTP (WinHttpHandler) based stack.\r\n\r\nAdditionally, we will revise the implementation of the new APIs on HttpClientHandler we introduced in 4.1.0.0 OOB package so that it works accordingly for the net46 build. [Details and tracking progress](https://github.com/dotnet/corefx/issues/11100#issuecomment-276293185).\r\n\r\n---\r\n\r\n*As a reminder, announcement threads are locked. Please use the [original issue](https://github.com/dotnet/corefx/issues/11100) for feedback and questions. Thanks!*"},{"Id":"6840041673","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:01","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/14","RelatedDescription":"Reopened issue \".NET Core Docker images will move to multi-arch based tags\" (#14) at dotnet/announcements","RelatedBody":"## Summary\r\nDocker has a [multi-arch feature]( https://github.com/moby/moby/issues/15866) that [microsoft/dotnet-nightly]( https://hub.docker.com/r/microsoft/dotnet-nightly/) recently started utilizing.  The plan is to port this to the [official microsoft/dotnet repo]( https://hub.docker.com/r/microsoft/dotnet/) shortly.  The multi-arch feature allows a single tag to be used across multiple machine configurations.  Without this feature each architecture/OS/platform requires a unique tag.  For example, the microsoft/dotnet:1.0-runtime tag is based on Debian and microsoft/dotnet:1.0-runtime-nanoserver if based on Nano Server.  With multi-arch there will be one common microsoft/dotnet:1.0-runtime tag.  If you pull that tag from a Linux container environment you will get the Debian based image whereas if you pull that tag from a Windows container environment you will get the Nano Server based image.  This helps provide tag uniformity across Docker environments thus eliminating confusion.\r\n\r\nCurrent microsoft/dotnet tags:\r\n- [`1.0.5-runtime`, `1.0-runtime` (*1.0/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/runtime/Dockerfile)\r\n- [`1.0.5-runtime-nanoserver`, `1.0-runtime-nanoserver` (*1.0/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/nanoserver/runtime/Dockerfile)\r\n- [`1.0.5-runtime-deps`, `1.0-runtime-deps` (*1.0/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/runtime-deps/Dockerfile)\r\n- [`1.0.5-sdk`, `1.0-sdk` (*1.0/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/sdk/Dockerfile)\r\n- [`1.0.5-sdk-nanoserver`, `1.0-sdk-nanoserver` (*1.0/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/nanoserver/sdk/Dockerfile)\r\n- [`1.1.2-runtime`, `1.1-runtime`, `1-runtime`, `runtime` (*1.1/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/runtime/Dockerfile)\r\n- [`1.1.2-runtime-nanoserver`, `1.1-runtime-nanoserver`, `1-runtime-nanoserver`, `runtime-nanoserver` (*1.1/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/nanoserver/runtime/Dockerfile)\r\n- [`1.1.2-runtime-deps`, `1.1-runtime-deps`, `1-runtime-deps`, `runtime-deps` (*1.1/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/runtime-deps/Dockerfile)\r\n- [`1.1.2-sdk`, `1.1-sdk`, `1-sdk`, `sdk`, `latest` (*1.1/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/sdk/Dockerfile)\r\n- [`1.1.2-sdk-nanoserver`, `1.1-sdk-nanoserver`, `1-sdk-nanoserver`, `sdk-nanoserver`, `nanoserver` (*1.1/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/nanoserver/sdk/Dockerfile)\r\n- [`2.0.0-preview1-runtime`, `2.0-runtime`, `2-runtime` (*2.0/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/runtime/Dockerfile)\r\n- [`2.0.0-preview1-runtime-nanoserver`, `2.0-runtime-nanoserver`, `2-runtime-nanoserver` (*2.0/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/nanoserver/runtime/Dockerfile)\r\n- [`2.0.0-preview1-runtime-deps`, `2.0-runtime-deps`, `2-runtime-deps` (*2.0/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/runtime-deps/Dockerfile)\r\n- [`2.0.0-preview1-sdk`, `2.0-sdk`, `2-sdk` (*2.0/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/sdk/Dockerfile)\r\n- [`2.0.0-preview1-sdk-nanoserver`, `2.0-sdk-nanoserver`, `2-sdk-nanoserver` (*2.0/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/nanoserver/sdk/Dockerfile)\r\n\r\nNew multi-arch microsoft/dotnet-nightly tags:\r\n- `1.0.5-runtime`, `1.0-runtime`:\r\n    - [`1.0.5-runtime-jessie` (*1.0/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime/jessie/Dockerfile)\r\n    - [`1.0.5-runtime-nanoserver` (*1.0/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime/nanoserver/Dockerfile)\r\n- `1.0.5-runtime-deps`, `1.0-runtime-deps`:\r\n    - [`1.0.5-runtime-deps-jessie` (*1.0/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime-deps/jessie/Dockerfile)\r\n- `1.0.5-sdk`, `1.0-sdk`:\r\n    - [`1.0.5-sdk-jessie` (*1.0/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/sdk/jessie/Dockerfile)\r\n    - [`1.0.5-sdk-nanoserver` (*1.0/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/sdk/nanoserver/Dockerfile)\r\n- `1.1.2-runtime`, `1.1-runtime`, `1-runtime`, `runtime`:\r\n   - [`1.1.2-runtime-jessie` (*1.1/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime/jessie/Dockerfile)\r\n    - [`1.1.2-runtime-nanoserver` (*1.1/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime/nanoserver/Dockerfile)\r\n- `1.1.2-runtime-deps`, `1.1-runtime-deps`, `1-runtime-deps`, `runtime-deps`:\r\n    - [`1.1.2-runtime-deps-jessie` (*1.1/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime-deps/jessie/Dockerfile)\r\n- `1.1.2-sdk`, `1.1-sdk`, `1-sdk`, `sdk`, `latest`:\r\n    - [`1.1.2-sdk-jessie` (*1.1/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/sdk/jessie/Dockerfile)\r\n    - [`1.1.2-sdk-nanoserver` (*1.1/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/sdk/nanoserver/Dockerfile)\r\n- `2.0.0-preview1-runtime`, `2.0-runtime`, `2-runtime`:\r\n    - [`2.0.0-preview1-runtime-jessie` (*2.0/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime/jessie/Dockerfile)\r\n    - [`2.0.0-preview1-runtime-nanoserver` (*2.0/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime/nanoserver/Dockerfile)\r\n- `2.0.0-preview1-runtime-deps`, `2.0-runtime-deps`, `2-runtime-deps`:\r\n    - [`2.0.0-preview1-runtime-deps-jessie` (*2.0/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime-deps/jessie/Dockerfile)\r\n- `2.0.0-preview1-sdk`, `2.0-sdk`, `2-sdk`:\r\n    - [`2.0.0-preview1-sdk-jessie` (*2.0/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/sdk/jessie/Dockerfile)\r\n    - [`2.0.0-preview1-sdk-nanoserver` (*2.0/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/sdk/nanoserver/Dockerfile)\r\n\r\n\r\nThis change has been in [microsoft/dotnet-nightly]( https://hub.docker.com/r/microsoft/dotnet-nightly/) for a little over a week. If you have feedback please file an issue on the [.NET Core Docker GitHub repo](https://github.com/dotnet/dotnet-docker).\r\n\r\n## .NET Core Docker Tools\r\nThe tooling to produce multi-arch tags is still evolving.  As a result we found it necessary to create some tooling to build the images and produce the manifest that enables multi-arch.  This [tooling](https://github.com/dotnet/docker-tools) is open sourced as well.\r\n"},{"Id":"6840041017","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:58:50","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/18","RelatedDescription":"Reopened issue \".NET Core Docker Samples now use Multi-Stage Build\" (#18) at dotnet/announcements","RelatedBody":"# .NET Core Docker Samples now use Multi-Stage Build\r\n\r\n## Summary\r\n.NET Core Docker images can now use multi-stage build using a new feature from Docker that allows multiple `FROM` lines to be used in one Dockerfile. The multi-stage build feature was recently introduced into the Docker client Stable channel. Using this feature, you can build a .NET Core app in an SDK image (AKA 'build image') and then copy the published app into a runtime image all in the same Dockerfile. To see an example of this in practice, check out the [.NET Docker Samples Repo](https://github.com/dotnet/dotnet-docker-samples).\r\n\r\n## Details\r\n- [Update samples to utilize multi-step build feature - dotnet/dotnet-docker-samples #44](https://github.com/dotnet/dotnet-docker-samples/pull/44)\r\n- [Dockerfile of .NET app production sample](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod/Dockerfile)\r\n- [Docker Documentation on Multi-Stage Build](https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds)\r\n\r\n## Impact\r\nBefore the multi-stage build feature was added, a script was required to copy the published output of your build container onto your disk and then the runtime container would read in that output. This was tedious to implement and not super efficient. Now, containers can share build artifacts from different stages within a single Dockerfile."},{"Id":"6840040800","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:58:45","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/20","RelatedDescription":"Reopened issue \".NET Core 2.0 Globalization Invariant Mode\" (#20) at dotnet/announcements","RelatedBody":"# .NET Core 2.0 Globalization Invariant Mode\r\n\r\n## Summary\r\n\r\n.NET Core 2.0 includes a new opt-in globalization mode that provides basic globalization-related functionality that is uniform across operating systems and languages. The benefit of this new mode is its uniformity, distribution size, and the absence of any globalization dependencies. The downside is that it doesn't actually provide globalization functionality.\r\n\r\nThis mode is not the default mode in .NET Core, so applications have to opt in. There are no plans to make this mode the default one.\r\n\r\nSee [.NET Core Globalization Invariant Mode](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md) to learn more about this feature, and decide whether the new mode is a good choice for your app or if it breaks its functionality. \r\n\r\n## Details\r\n\r\n* [dotnet/coreclr #10264](https://github.com/dotnet/coreclr/pull/10264)\r\n* [dotnet/coreclr #10470](https://github.com/dotnet/coreclr/pull/10470)\r\n* [dotnet/corefx #17798](https://github.com/dotnet/corefx/pull/17798)\r\n* [Invariant mode tests](https://github.com/dotnet/corefx/tree/master/src/System.Globalization/tests/Invariant)\r\n\r\n## Impact\r\n\r\nThe globalization areas affected by enabling the globalization invariant mode are:\r\n\r\n* Cultures and culture data\r\n* String casing\r\n* String sorting and searching\r\n* Sort keys\r\n* String Normalization\r\n* International Domain Names (IDN) support\r\n* Time Zone display name on Linux"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6840587683","Type":"PullRequestEvent","CreatedAt":"2017-11-11T01:41:09","Actor":"dagood","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14990","RelatedDescription":"Merged pull request \"Move '-all' from filename to args in Mac build\" (#14990) at dotnet/coreclr","RelatedBody":"skip ci please\r\n\r\nFixes https://github.com/dotnet/coreclr/pull/14978#pullrequestreview-75916716\r\n\r\nAdding ` -all` to the filename caused this error in the [official build](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1131260):\r\n\r\n```\r\nFailed which: Not found /Users/buildagent/agent/_work/249/s/clean.sh -all: null\r\nundefined failed with error: Failed which: Not found /Users/buildagent/agent/_work/249/s/clean.sh -all: null\r\n```"},{"Id":"6840578300","Type":"PullRequestEvent","CreatedAt":"2017-11-11T01:35:15","Actor":"dagood","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14990","RelatedDescription":"Opened pull request \"Move '-all' from filename to args in Mac build\" (#14990) at dotnet/coreclr","RelatedBody":"skip ci please\r\n\r\nFixes https://github.com/dotnet/coreclr/pull/14978#pullrequestreview-75916716\r\n\r\nAdding ` -all` to the filename caused this error in the [official build](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1131260):\r\n\r\n```\r\nFailed which: Not found /Users/buildagent/agent/_work/249/s/clean.sh -all: null\r\nundefined failed with error: Failed which: Not found /Users/buildagent/agent/_work/249/s/clean.sh -all: null\r\n```"},{"Id":"6840525457","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:04:46","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13604","RelatedDescription":"Closed issue \"[RyuJIT][ARM] Tests with runtime failures\" (#13604) at dotnet/coreclr","RelatedBody":"These may (or may not) be due to PR #13198:\r\n\r\nExceptions.ForeignThread.ForeignThreadExceptions.ForeignThreadExceptions\r\nGC.Scenarios.ServerModel.servermodel.servermodel\r\nJIT.jit64.opt.cse.hugeexpr1.hugeexpr1\r\nJIT.jit64.opt.cse.HugeField1.HugeField1\r\nJIT.Methodical.doublearray.dblarray3_cs_d.dblarray3_cs_d\r\nJIT.Methodical.doublearray.dblarray3_cs_do.dblarray3_cs_do\r\nJIT.Methodical.doublearray.dblarray3_cs_r.dblarray3_cs_r\r\nJIT.Methodical.doublearray.dblarray3_cs_ro.dblarray3_cs_ro"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6840822257","Type":"PullRequestEvent","CreatedAt":"2017-11-11T04:38:38","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7994","RelatedDescription":null,"RelatedBody":""},{"Id":"6840822224","Type":"PullRequestEvent","CreatedAt":"2017-11-11T04:38:36","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7994","RelatedDescription":"Closed pull request \"Update SDK\" (#7994) at dotnet/cli","RelatedBody":""},{"Id":"6840313324","Type":"PullRequestEvent","CreatedAt":"2017-11-10T23:27:42","Actor":"jonsequitur","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7997","RelatedDescription":"Opened pull request \"Update tab-completion.md\" (#7997) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"6840200609","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:46:58","Actor":"cbranch-bhg","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7996","RelatedDescription":"Opened issue \"Installation from Daily servicing builds do not load dlls correctly\" (#7996) at dotnet/cli","RelatedBody":"This is an issue appeared when trying to resolve an issue in 2.0.0 related to C# finalizers causing issues with Test Coverage software. https://github.com/dotnet/coreclr/issues/14763\r\nThe problem was apparently fixed in 2.0.4-servicing-25831-01 release\r\nHowever after installing the servicing release found here:\r\nhttps://github.com/dotnet/core-setup/blob/release/2.0.0/README.md#officially-released-builds\r\n\r\nRunning dotnet would still be using version 2.0.0\r\nThere was a work around by renaming or copying the directory:\r\n\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.4-servicing-25831-01\r\nto\r\n\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.4\r\n\r\nUnfortunately this issue was very difficult to track down as the dotnet --info output did indicate that it was using 2.0.4. I have not tried to examine the behavior on non-Windows platforms.\r\n\r\n## Steps to reproduce\r\nClean system.\r\nInstall SDK 2.0.0\r\nInstall 2.0.4-servicing...\r\nRun dotnet program.\r\nAttach debugger or other tool and look at what dlls are loaded\r\n\r\n## Expected  behavior\r\nExpected to see dlls loaded from \\dotnet\\shared\\Microsoft.NETCore.App\\2.0.4-servicing-25831-01 directory\r\n\r\n## Actual behavior\r\nSee dlls loaded from  \\dotnet\\shared\\Microsoft.NETCore.App\\2.0.0\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4-servicing-25831-01\r\n  Build    : 92cbf99da7b056cbf5145f6c91a0c7800ae7f834\r\n\r\n\r\n"},{"Id":"6840185295","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:41:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7885","RelatedDescription":"Closed issue \"[Question] 2.1 preview SDK on Ubuntu 16.04?\" (#7885) at dotnet/cli","RelatedBody":"Is it possible to put together a full 2.1.0-preview on linux-x64? I am trying to install daily builds from https://github.com/dotnet/core/blob/master/daily-builds.md. I have successfully installed the .deb packages for the daily build of the Core Runtime, but the daily build of the SDK has unmet dependencies. Is there a way I can resolve this?\r\n\r\n\r\n\r\n\r\n"},{"Id":"6839947543","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:33:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7761","RelatedDescription":"Closed issue \"Merge latest F# bits in 15.5 branch\" (#7761) at dotnet/cli","RelatedBody":"This is a tracking bug.  @KevinRansom recently fixed a bug in assembly resolution which was resulting in a StackOverflow exception: https://github.com/Microsoft/visualfsharp/pull/3658\r\n\r\n\r\n\r\n\r\n"},{"Id":"6839592294","Type":"IssuesEvent","CreatedAt":"2017-11-10T19:59:50","Actor":"dmorrison42","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7995","RelatedDescription":"Opened issue \"Error when case does not match between dependencies\" (#7995) at dotnet/cli","RelatedBody":"Let me preface this by saying. I understand this may be a *wontfix*, because most operating systems use a case sensitive file system. However, it would be nice to have a custom error message for this, or at least this issue as a reference for anyone else who has this problem.\r\n\r\n## Steps to reproduce\r\n\r\nAttempt to `Rebuild` the solution.\r\n\r\n## Expected  behavior\r\n\r\nThe solution builds.\r\n\r\n## Actual behavior\r\n\r\nError Cannot find project info for 'PROJECT2.csproj'. This can indicate a missing project reference.\t\r\n\r\n## Solution\r\n\r\nI had a dependency tree that looked like this:\r\n\r\nUI => Project 1 => Project 2\r\n\r\nProject 1 had a reference to `project2.csproj`.\r\n\r\nProject 2's csproj file was named `PROJECT2.csproj` on the disk.\r\n\r\nI just renamed `PROJECT2.csproj` to `~PROJECT2.csproj` then to `project2.csproj` and did a `git mv PROJECT2.csproj project2.csproj`.\r\n\r\nI think the ideal solution would be to make the error message match the *expected* casing. This would allow the developer to identify the problem faster, while still meeting the cross platform requirements.\r\n\r\n`Error Cannot find project info for 'project2.csproj'. This can indicate a missing project reference.`\r\n\r\n## Environment data\r\n\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6839334653","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:57:04","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7994","RelatedDescription":"Opened pull request \"Update SDK\" (#7994) at dotnet/cli","RelatedBody":""},{"Id":"6839189270","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:20:38","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7987","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7987) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171109-080038\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171109-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6839763148","Type":"IssuesEvent","CreatedAt":"2017-11-10T20:44:21","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/547","RelatedDescription":"Closed issue \".NET Framework 4.7.1 with .NET Standard 2.0 library - missing/invalid dll\" (#547) at dotnet/standard","RelatedBody":"Hello,\r\nI'm working on a .NET Standard 2.0 library that references a .NET Framework library, specifically the [**Accord.Math**](https://www.nuget.org/packages/Accord.Math/) library, which is a .NET Framework library that is correctly loaded into the .NET Standard 2.0 library (I guess through that new compatibility layer).\r\n\r\nThe whole thing works fine and I have no problems whatsoever as long as I reference the .NET Standard 2.0 library from a .NET Core 2.0 program.\r\n\r\nThe problem is that I need to use the library from a .NET Framework program too, so I've installed the .NET Framework 4.7.1 preview to test it out, since it should support .NET Standard 2.0 libraries now.\r\n\r\nIf I just reference the .NET Standard 2.0 library like I did from the .NET Core 2.0 program though, I get the following exception as soon as the library uses the Accord.Math library:\r\n\r\n> Unhandled exception 'System.IO.FileNotFoundException' in mscorlib.dll\r\nCould not load the file or assembly 'Accord.Math, Version=3.8.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Could not find the target file.\r\n\r\nThis wasn't expected, since the same exact code is working fine from the .NET Core 2.0 program, and a .NET Framework 4.7.1 program should behave the same when using a .NET Standard 2.0 library.\r\nJust to make a test, I've tried referencing the same Accord.Math library from the program too, and I got this other exception:\r\n\r\n> Unhandled exception 'System.IO.FileLoadException' in mscorlib.dll\r\nCould not load file or assembly 'Accord.Math, Version=3.8.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI'm not sure on how to proceed here, shouldn't the .NET Standard 2.0 library I'm referencing just works, without the need to manually tweak anything else, since I'm targeting .NET Framework 4.7.1?\r\n\r\nThank you for your help!\r\nSergio\r\n\r\nP.S.\r\nJust in case, if that helps, here's a [link to the library](https://github.com/Sergio0694/NeuralNetwork.NET/tree/feature_net-framework4.7.1).\r\n\r\n"},{"Id":"6839745897","Type":"IssuesEvent","CreatedAt":"2017-11-10T20:39:40","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/552","RelatedDescription":"Closed issue \".NET Framework 4.7.1 class library with .NET Standard 2.0 nuget package.\" (#552) at dotnet/standard","RelatedBody":"Hi, \r\n\r\nI have a problem with a 4.7.1 Class Library (.Net Framework) referencing Microsoft.AspNetCore (Or any other .net standard nuget package.) using PackageReference.\r\n\r\nTo reproduce the problem : \r\n\r\n- Create a new Class Library (.Net Framework) that target framework 4.7.1\r\n- Add Microsoft.AspNetCore nuget package using PackageReference.\r\n- Call any method from the nuget package.\r\n- You can try using simple equals \r\n\r\n`namespace ClassLibrary1\r\n{\r\n    public class Class1\r\n    {\r\n        public Class1()\r\n        {\r\n            WebHost.Equals(0);\r\n        }\r\n    }\r\n}`\r\n\r\nYou will get error :\r\n\r\nError CS0012 The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nSeems like 4.7.1 is not resolved as a .net standard 2.0 compatible version of the .net framework.\r\n\r\nThanks\r\n"},{"Id":"6839697482","Type":"IssuesEvent","CreatedAt":"2017-11-10T20:26:44","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/578","RelatedDescription":"Closed issue \"SqlConnection in .net standard 2.0 can't access SQL Server\" (#578) at dotnet/standard","RelatedBody":"I'm using \"System.Data.SqlClient\" namespace relevant APIs in .net standard 2.0 to access data from my remote sql server. I'm using these APIs in UWP app.\r\n\r\nThis is my sql connection string:\r\n`String connsql = @\"Data Source=10.1xx.xxx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";`\r\n\r\nI used this connection string to connect to my sql server, but I got the following exception:\r\n\r\n`System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught) ---> System.AggregateException: One or more errors occurred. (An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433) ---> System.Net.Internals.SocketExceptionFactory+ExtendedSocketException: An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait(TimeSpan timeout)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle..ctor(String serverName, Int32 port, Int64 timerExpire, Object callbackObject, Boolean parallel)\r\n---> (Inner Exception #0) System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (0x80004005): An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()<---\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at SQLServerSample.MainPage.OnNavigatedTo(NavigationEventArgs e)\r\nClientConnectionId:00000000-0000-0000-0000-000000000000`\r\n\r\nBut, the same code worked well in windows console application:\r\n\r\n` String connsql = @\"Data Source=10.1xx.xx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";\r\n\r\n            try\r\n            {\r\n                using (SqlConnection conn = new SqlConnection())\r\n                {\r\n                    conn.ConnectionString = connsql;\r\n                    conn.Open(); \r\n                    String sql = \"select * from dbo.Table_1\";\r\n                    SqlCommand cmd = new SqlCommand(sql, conn);\r\n                    SqlDataReader dr = cmd.ExecuteReader();\r\n                    while (dr.Read())\r\n                    {\r\n                        Debug.WriteLine(dr[\"ID\"] + \": \" + dr[\"Name\"]);\r\n                    }\r\n                    conn.Close();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Debug.WriteLine(ex);\r\n            }`\r\n\r\nSo, I do not know where  the issue is. \r\nAre there any different things between UWP and classic win32 application in .net standard 2.0?\r\nHow to solve this issue?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6840804046","Type":"PullRequestEvent","CreatedAt":"2017-11-11T04:21:53","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25192","RelatedDescription":"Opened pull request \"Adding Memory CopyTo APIs and rename SpanExtensions to MemoryExtensions\" (#25192) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/23862\r\n\r\nWill depend on the corresponding PR in coreclr (which will be identical to this one and I will submit it after I address the feedback here).\r\n\r\ncc @stephentoub, @KrzysztofCwalina \r\n"},{"Id":"6840633016","Type":"PullRequestEvent","CreatedAt":"2017-11-11T02:11:44","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25191","RelatedDescription":"Opened pull request \"Allow dynamic use objects of different, identically-named, types.\" (#25191) at dotnet/corefx","RelatedBody":"Fixes #23021\r\n\r\n* Remove `ResetBindException`\r\n\r\nNo longer used.\r\n\r\n* Cache types' arity for `FindSymWithMatchingArity` instead of on each loop\r\n\r\n* Move byref handling out of `LoadSymbolsFromType()`\r\n\r\nOnly one caller can possibly pass byref types, so handle it there.\r\n\r\n"},{"Id":"6840573500","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:32:22","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25190","RelatedDescription":"Opened issue \"Microsoft.CSharp should allow operations on identically-named types\" (#25190) at dotnet/corefx","RelatedBody":"In the rare case that two types have exactly the same type name, dynamic operations will fail:\r\n\r\n```C#\r\ndynamic x = Activator.CreateInstance(\r\n\tAssemblyBuilder\r\n\t\t.DefineDynamicAssembly(new AssemblyName(\"TestAssembly\"), AssemblyBuilderAccess.Run)\r\n\t\t.DefineDynamicModule(\"TestModule\")\r\n\t\t.DefineType(\"TestType\", TypeAttributes.Public)\r\n\t\t.CreateType());\r\ndynamic y = Activator.CreateInstance(\r\n\tAssemblyBuilder\r\n\t\t.DefineDynamicAssembly(new AssemblyName(\"TestAssembly\"), AssemblyBuilderAccess.Run)\r\n\t\t.DefineDynamicModule(\"TestModule\")\r\n\t\t.DefineType(\"TestType\", TypeAttributes.Public)\r\n\t\t.CreateType());\r\nx.Equals(y); // This or any other operation with both objects fails.\r\n```\r\n\r\n#23021 changed the exception thrown in this case from `RuntimeBinderInternalCompilerException` to `RuntimeBinderException`; pretty much a change from \"sorry, we got this wrong\" to \"sorry, you can't do that\".\r\n\r\nIdeally such cases should succeed. While the case is extremely rare:\r\n\r\n1. It's always better to allow users to do something that prohibit.\r\n2. By the very nature of dynamic binding, there's no theoretical justification for disallowing it.\r\n3. Handling the exception requires resetting a lot of state. Allowing this means a lot of objects being passed around so that the type manager, symbol manager, etc. can be accessed by those objects that need them, tying those objects to each other, in order to deal with this rare case.\r\n\r\nWhile the first two points relate to what is an obscure, the third is a greater motivation for allowing this IMO.\r\n\r\nCC: @VSadov @OmarTawfik "},{"Id":"6840536024","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:10:47","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25189","RelatedDescription":"Opened issue \"PROPSAL:  \"ItemAt\" - Ref element accessor for collections that already have an indexer.\" (#25189) at dotnet/corefx","RelatedBody":"We have a number of  **existing** indexable types that could benefit from a ref-returning element accessor. For example ImmutableArray.\r\n\r\nA typical problem is that such types typically already have a get/set indexer, so the only way to add an indexed byref access to elements is to add a ref returning method.\r\nI believe this will happen one way or another, since there is a motivation. So, I think we should standardize on the name of such method.\r\n\r\nHere I want to propose the following convention:\r\n\r\n```C#\r\n        // when container is readonly - I.E. ImmutableArray<T>\r\n        public ref readonly T ItemAt(int index);\r\n\r\n        // when container is writeable - I.E. List<T>\r\n        public ref T ItemAt(int index);\r\n```\r\n\r\nThe alternatives could be \r\n\r\n-\t“ElementAt” – often already taken\r\n-\t“Item”          –  clashes with the underlying name of the indexer\r\n-\t “Address”     - could work too, but I think “ItemAt” reads a lot better.\r\n\r\n\r\n\r\nExamples of uses:\r\n\r\n```C#\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var o = new MyCollection<int>();\r\n\r\n            // use for assignment\r\n            o.ItemAt(1) = 42;\r\n\r\n            // bind to a ref local\r\n            ref var first = ref o.ItemAt(1);\r\n            first = 42;\r\n\r\n            // read indirectly. (assume the API takes \"in\" parameter)\r\n            Print(o.ItemAt(1));\r\n        }\r\n    }\r\n\r\n    class MyCollection<T>\r\n    {\r\n        public ref T ItemAt(int index) => throw null;\r\n    }\r\n\r\n```\r\n\r\nOnce we agree on the name/pattern we can enter separate bugs for particular APIs.\r\n\r\n"},{"Id":"6840531443","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:08:15","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25188","RelatedDescription":"Opened issue \"Synch the sources of {ReadOnly}Memory and friends between corefx and corelib\" (#25188) at dotnet/corefx","RelatedBody":"> I'd suggest someone compares the files in the two repos and gets them to be as close as possible. I noticed there are various discrepancies between them that make diff'ing harder, like differences in XML comments, differences in the ordering of members, etc.\r\n\r\nUse ifdefs for small differences\r\n\r\nFrom https://github.com/dotnet/coreclr/pull/14906#discussion_r149799699 (for context)\r\n\r\nAlso figure out and setup a source mirroring strategy between the two repos.\r\n\r\ncc @stephentoub, @KrzysztofCwalina, @jkotas, @brianrob, @safern"},{"Id":"6840503498","Type":"PullRequestEvent","CreatedAt":"2017-11-11T00:53:05","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25187","RelatedDescription":"Opened pull request \"[WIP] SslStream Throttle\" (#25187) at dotnet/corefx","RelatedBody":"This would satisfy the throttling.\r\n\r\nI will test the perf on windows and linux and see if it makes any difference on windows. If it does then I will need to push the semaphore down into the PAL. \r\n\r\nI am submitting the PR to check the outerloop."},{"Id":"6840457621","Type":"PullRequestEvent","CreatedAt":"2017-11-11T00:29:32","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25186","RelatedDescription":"Opened pull request \"Run code formatter on System.Linq.Expressions\" (#25186) at dotnet/corefx","RelatedBody":"Undo a few cases where it doesn't handle C#7 well."},{"Id":"6840405252","Type":"PullRequestEvent","CreatedAt":"2017-11-11T00:05:15","Actor":"qmfrederik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25185","RelatedDescription":"Opened pull request \"Fix casing in Interop.UnsafeCreateFile.[U|u]ap.cs filename\" (#25185) at dotnet/corefx","RelatedBody":"The U in `Interop.UnsafeCreateFile.uap.cs` was upper-case, this would break the `./build.sh -allconfigurations` command on my Linux box."},{"Id":"6840295959","Type":"IssuesEvent","CreatedAt":"2017-11-10T23:21:11","Actor":"jamesloh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25184","RelatedDescription":"Opened issue \"PowerShell v6.0.0-beta.7 xml save on Linux and MacOS X has an additional [] in DOCTYPE\" (#25184) at dotnet/corefx","RelatedBody":"[xml]$XmlDoc = get-content 'Info.plist'\r\n\r\n$XmlDoc.Save('def.plist')\r\n\r\nThe two lines above work correctly in PowerShell 5.1 on Windows 10 but incorrectly with PowerShell v6 on Linux and MacOSX.\r\n\r\nNotice the [] just before the end in DOCTYPE.\r\n\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"[]>"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6840777231","Type":"IssuesEvent","CreatedAt":"2017-11-11T03:57:26","Actor":"xt0rted","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23119","RelatedDescription":"Closed issue \"Intermittent build failure after upgrading to latest version\" (#23119) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft.Net.Compilers 2.4.0\r\nMicrosoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.8\r\n\r\nThe two different messages I'm getting in my build log are\r\n```\r\nC:\\projects\\eei\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.8\\build\\net45\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props(17,5): warning MSB3021: Unable to copy file \"C:\\projects\\eei\\packages\\Microsoft.Net.Compilers.2.4.0\\build\\..\\tools\\Microsoft.CodeAnalysis.VisualBasic.dll\" to \"\\bin\\roslyn\\Microsoft.CodeAnalysis.VisualBasic.dll\". The process cannot access the file '\\bin\\roslyn\\Microsoft.CodeAnalysis.VisualBasic.dll' because it is being used by another process. [C:\\projects\\eei\\src\\Domain\\Domain.csproj]\r\n       CopyRoslynCompilerFilesToOutputDirectory:\r\n         Copying file from \"C:\\projects\\eei\\packages\\Microsoft.Net.Compilers.2.4.0\\build\\..\\tools\\VBCSCompiler.exe.config\" to \"\\bin\\roslyn\\VBCSCompiler.exe.config\".\r\n     CopyRoslynCompilerFilesToOutputDirectory:\r\n         The previous error was converted to a warning because the task was called with ContinueOnError=true.\r\n```\r\n```\r\nC:\\projects\\eei\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.8\\build\\net45\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props(23,5):\r\nerror MSB4044: The \"KillProcess\" task was not given a value for the required parameter \"ImagePath\". [C:\\projects\\eei\\src\\EquineExchange.HelloSign\\EquineExchange.HelloSign.csproj]\r\n```\r\n\r\nI had this happen on Azure/in Kudu a few months ago but was unable to get the build to succeed so I rolled back my NuGet packages to their original versions and builds started working again. At the same time I did get this error on AppVeyor too, but after I switched my build image from VS2015 to VS2017 it went away, but on Azure I wasn't able to fix it. Now I'm seeing it intermittently on AppVeyor after I updated these two packages.\r\n\r\nIf I rerun the build it usually passes the second time, but my builds on Azure never built so I'm worried that once I go to deploy I'll start getting failures their again too.\r\n\r\n**Steps to Reproduce**:\r\n\r\nUnable to consistently repro\r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n"},{"Id":"6840704625","Type":"IssuesEvent","CreatedAt":"2017-11-11T03:03:09","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23132","RelatedDescription":"Opened issue \"Tighten PE verification in CompileAndVerify\" (#23132) at dotnet/roslyn","RelatedBody":"Currently, we either run the verification or we don't.\r\nInstead, we should always run the verification and either expect that it succeeds or expect that it fails.\r\n\r\nFYI @VSadov "},{"Id":"6840630186","Type":"IssuesEvent","CreatedAt":"2017-11-11T02:09:41","Actor":"taori","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23131","RelatedDescription":"Opened issue \"Unexpected behavior for is operator\" (#23131) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 15.4.2 Project set to current minor version of C#.\r\n**Steps to Reproduce**:\r\n\r\n\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tTestWithConcreteOption();\r\n\t\t\tTestWithInterfaceOption();\r\n\t\t\tTestWithDerivedOption();\r\n\r\n\t\t\tConsole.ReadKey();\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithConcreteOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithInterfaceOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateInterfaceOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithDerivedOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateInterfaceOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static IOption CreateInterfaceOption()\r\n\t\t{\r\n\t\t\treturn CreateOption();\r\n\t\t}\r\n\r\n\t\tprivate static DefaultOption CreateDerivedOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static GeneratorOption CreateOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static IToolContext<T> CreateContext<T>(T option) where T : class, IOption\r\n\t\t{\r\n\t\t\treturn new DefaultContext<T>(option);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class GeneratorOption : DefaultOption, IGeneratorOption\r\n\t{\r\n\t}\r\n\r\n\tpublic class DefaultOption : IOption\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\tpublic class DefaultContext<T> : IToolContext<T> where T : class, IOption\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tpublic DefaultContext(IOption option)\r\n\t\t{\r\n\t\t\tOption = option;\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tpublic IOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IToolContext\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IToolContext<out T> where T : class, IOption\r\n\t{\r\n\t\tIOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IGeneratorOption : IOption\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IOption\r\n\t{\r\n\t}\r\n\r\n**Expected Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Expected behavior.\"\r\nTestWithDerivedOption -> \"Expected behavior.\"\r\n\r\n**Actual Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Unexpected behavior.\"\r\nTestWithDerivedOption -> \"Unexpected behavior.\"\r\n\r\nI would expect this to work the way i pointed out. Am i wrong in thinking that? \r\n\r\nIf pattern matching is merely a feature which works with compile time information this issue would make sense i suppose - however in that case i would expect an analyzer to point out this potential issue if that is possible.\r\n"},{"Id":"6840550065","Type":"IssuesEvent","CreatedAt":"2017-11-11T01:19:01","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/16356","RelatedDescription":"Reopened issue \"Insertion tool should clean up old pull request branches\" (#16356) at dotnet/roslyn","RelatedBody":"It's not uncommon we forget to delete merged insertion branches, or forget to merge them entirely. The insertion tool should probably clean up old branches after a few weeks."},{"Id":"6840534606","Type":"PullRequestEvent","CreatedAt":"2017-11-11T01:10:02","Actor":"benaadams","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23102","RelatedDescription":"Closed pull request \"Reduce TypeSymbolExtensions.VisitType's promiscuity\" (#23102) at dotnet/roslyn","RelatedBody":"`TypeSymbolExtensions.VisitType` uses backtracking; iteration and recursion - and ends up over visiting types.\r\n\r\nIdeally the algorithm would be revisted; however this takes the other approach; and uses a little duct tape.\r\n\r\n**Customer scenario**\r\n\r\nWrites this code\r\n```csharp\r\nclass Class<A, B, C, D, E, F>\r\n{\r\n    class Inner : Class<Inner, Inner, Inner, Inner, Inner, Inner>\r\n    {\r\n        Inner.Inner.Inner.Inner.Inner.Inner.Inner.Inner.Inner inner;\r\n    }\r\n}\r\n```\r\n\r\n**Performance impact**\r\nBefore top call counts (using `WriteCompressedMarker` as watermark - for comparison)\r\n![](https://aoa.blob.core.windows.net/aspnet/rosyln-calls-1.png)\r\n\r\nAfter top call counts (using `WriteCompressedMarker` as watermark - for comparison)\r\n![](https://aoa.blob.core.windows.net/aspnet/rosyln-calls-2.png)\r\n\r\nAlso `TypeParameterSymbol.get_TypeKind` (non-inlinable virtual call) is top of list at 786M calls in before and at bottom of selection in after, at 60M calls"},{"Id":"6840515518","Type":"IssuesEvent","CreatedAt":"2017-11-11T00:59:35","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/16356","RelatedDescription":"Closed issue \"Insertion tool should clean up old pull request branches\" (#16356) at dotnet/roslyn","RelatedBody":"It's not uncommon we forget to delete merged insertion branches, or forget to merge them entirely. The insertion tool should probably clean up old branches after a few weeks."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6840551646","Type":"PullRequestEvent","CreatedAt":"2017-11-11T01:19:56","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4913","RelatedDescription":"Opened pull request \"Clashing assemblies bug fix\" (#4913) at dotnet/corert","RelatedBody":"Fixes an issue, which occurs when trying to load CoreRT-specific assemblies. If clashing with a CoreCLR assembly, the one passed first would be taken as input to the ILCompiler, causing type loading errors, e.g. looking for an ILGenerator in System.Reflection.Emit if the incorrect version of  System.Linq.Expressions.LambaCompiler.dll is loaded."},{"Id":"6840365405","Type":"PullRequestEvent","CreatedAt":"2017-11-10T23:48:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4912","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4912) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6840352757","Type":"PullRequestEvent","CreatedAt":"2017-11-10T23:43:27","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4912","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4912) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6840299363","Type":"IssuesEvent","CreatedAt":"2017-11-10T23:22:27","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4911","RelatedDescription":"Opened issue \"Expect ILVerify error on initonly field outside its constructor\" (#4911) at dotnet/corert","RelatedBody":"Found this while testing ILVerify on Roslyn tests.\r\n\r\nCompile the program below with C# compiler that ships with Visual Studio 15.5 with `csc /t:library /langversion:7.2 test.cs`. \r\nHere's also a zipped copy of `test.dll`: [test.zip](https://github.com/dotnet/corert/files/1463011/test.zip)\r\n\r\nPEVerify fails (as expected):\r\n```\r\n>peverify test.dll\r\nMicrosoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0\r\n[IL]: Error: [F:\\repos\\corert\\src\\ILVerify\\src\\bin\\Debug\\net46\\test.dll : Program::Main][offset 0x00000008] Cannot change initonly field outside its .ctor.\r\n1 Error(s) Verifying test.dll\r\n```\r\n\r\nBut ILVerify passes:\r\n```\r\nbin\\Debug\\net46>ilverify test.dll -r C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_32\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll\r\nAll Classes and Methods in F:\\repos\\corert\\src\\ILVerify\\src\\bin\\Debug\\net46\\test.dll Verified.\r\n```\r\n\r\n------ \r\n\r\n```c#\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var obj = new C1();\r\n        System.Console.WriteLine(obj.field.ToString());\r\n    }\r\n}\r\nclass C1\r\n{\r\n    public readonly S1 field;\r\n}\r\nstruct S1\r\n{\r\n}\r\n```\r\n\r\nTagging @ArztSamuel @VSadov "},{"Id":"6840043154","Type":"PullRequestEvent","CreatedAt":"2017-11-10T21:59:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4910","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4910) at dotnet/corert","RelatedBody":""},{"Id":"6840042755","Type":"PullRequestEvent","CreatedAt":"2017-11-10T21:59:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4910","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4910) at dotnet/corert","RelatedBody":""},{"Id":"6839847206","Type":"PullRequestEvent","CreatedAt":"2017-11-10T21:06:55","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4907","RelatedDescription":"Merged pull request \"Fix implementation of GCToOSInterface::VirtualCommit to ditch the pages\" (#4907) at dotnet/corert","RelatedBody":"The GC depends on the pages to be zeroed out when they are mapped in again"},{"Id":"6839791056","Type":"PullRequestEvent","CreatedAt":"2017-11-10T20:52:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4909","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4909) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6839784279","Type":"PullRequestEvent","CreatedAt":"2017-11-10T20:50:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4909","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4909) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6839713046","Type":"PullRequestEvent","CreatedAt":"2017-11-10T20:30:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4908","RelatedDescription":"Opened pull request \"Manually port change that was missed by the CoreLib mirror\" (#4908) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6840860448","Type":"PullRequestEvent","CreatedAt":"2017-11-11T05:13:22","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1725","RelatedDescription":"Opened pull request \"WIP Add reference metadata to indicate that RAR can skip dependency searching\" (#1725) at dotnet/sdk","RelatedBody":""},{"Id":"6840212822","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:51:15","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1724","RelatedDescription":"Opened issue \"dotnet run with a TFM prints restore output to the command line\" (#1724) at dotnet/sdk","RelatedBody":"1. Create a new console application `dotnet new console`\r\n2. Do `dotnet run`. The first and only line in the output is from the app's execution (`Hello world!`)\r\n3. Do `dotnet run -f netcoreapp2.1`. \r\n\r\n**Expected:**\r\n`Hello world!`\r\n\r\n**Actual**\r\n```\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 12.52 ms for D:\\temp\\run-test\\run-test.csproj.\r\nHello World!\r\n```\r\n\r\n```dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007522)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007522\r\n Commit SHA-1 hash:  d58fc6120d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   \\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25907-02\r\n  Build    : 5e5b627d019c82b11a718a90008ce4f737c7e401\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6840007396","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:49:30","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1647","RelatedDescription":"Closed issue \"System.Net.Http and System.IO.Compression .NET Standard facades need to be included when targeting .NET 4.7.1\" (#1647) at dotnet/sdk","RelatedBody":".NET 4.7.1 ships with support for the .NET Standard 2.0 APIs, as well as the necessary facades.  So it's not supposed to need any facades injected by the `ImplicitlyExpandNETStandardFacades` target.\r\n\r\nHowever, the in-box assembly versions of System.Net.Http and System.IO.Compression are less than the OOB and facade versions of those libraries.  This will be fixed in .NET 4.7.2, however for 4.7.1, we still need to inject just those two facades as necessary."},{"Id":"6839413218","Type":"IssuesEvent","CreatedAt":"2017-11-10T19:16:17","Actor":"bruno-garcia","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1722","RelatedDescription":"Closed issue \"Fails to compile on MacOS - works on Windows and Linux: error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0' and 'This can indicate a missing project reference'\" (#1722) at dotnet/sdk","RelatedBody":"Solution with tests 'netcoreapp2.0' and 'netstandard' libraries of different versions fails to compile on MacOS - works on Windows and Linux.\r\n\r\nTested with SDK versions: 2.0.0 and 2.0.2\r\n\r\nBesides working on Appveyor and Travis-CI (Ubuntu), I've also tested on Windows 10 and CentOS which builds without issues.\r\n\r\n- It fails on MacOS 10.12.6 and Travis-CI 'OSX' build:\r\n\r\nThe repo has badges for the [Travis](https://travis-ci.org/bruno-garcia/messaging/jobs/300089706) and [Appveyor](https://ci.appveyor.com/project/bruno-garcia/messaging) builds: \r\n\r\nRepro at: [https://github.com/bruno-garcia/messaging](https://github.com/bruno-garcia/messaging)\r\n\r\n### Note:\r\nOnly a single project is failing to build. It's a test project targeting 'netcoreapp2.0' and referencing projects: 'netstandard1.3' and 'netstandard2.0'\r\n\r\n### Steps to reproduce:\r\n\r\nEnvironment: MacOS with SDK 2.0.0 or 2.0.2\r\n1 - Checkout [this repo](https://github.com/bruno-garcia/messaging)\r\n2 - run `dotnet build`\r\n\r\n#### Error:\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Serialization.Protobuf/Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Serialization.ProtoBuf.Tests/Serialization.ProtoBuf.Tests.csproj]\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests.csproj]\r\n\r\nBuilding directly the test project fails with a different error:\r\n`cd test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests && dotnet build`\r\n...\r\n```\r\nProtoBufMessagingBuilderExtensions.cs(12,21): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(12,13): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(13,30): error CS0012: The type 'IList<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\n```\r\n...\r\n\r\nFails also building with JetBrains Rider:\r\n\r\n`Microsoft.NET.Sdk.targets(114, 5): [null] Cannot find project info for '/Users/bgarc/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference.`"},{"Id":"6839286502","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:45:03","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1723","RelatedDescription":"Merged pull request \"Fix signing after retargeting to netcoreapp2.0\" (#1723) at dotnet/sdk","RelatedBody":""},{"Id":"6839282953","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:44:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1723","RelatedDescription":"Opened pull request \"Fix signing after retargeting to netcoreapp2.0\" (#1723) at dotnet/sdk","RelatedBody":""},{"Id":"6839178391","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:18:01","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1721","RelatedDescription":"Merged pull request \"[Perf] Retarget to .NET Core 2.0 and remove unnecessary assemblies\" (#1721) at dotnet/sdk","RelatedBody":"This removes 2 MB of files that were being copied unnecessarily to the netcoreapp folder of the sdk. They were:\r\n\r\n1. duplicates of shared framework assemblies (because dependencies pulled in 4.3.x/1.1 assemblies, but we targeted 1.0)\r\n\r\n2. nuget assemblies that are loaded from CLI directory\r\n\r\n3. core-setup dependencies that are loaded from CLI directory\r\n\r\nI'm doing this as step 1 to crossgen'ing the netcoreapp variant of the SDK. I didn't want to have to crossgen and sign the extra unnecessary files, which would slow down the build and make the bloat even bigger.\r\n"},{"Id":"6838354993","Type":"IssuesEvent","CreatedAt":"2017-11-10T15:22:02","Actor":"bruno-garcia","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1722","RelatedDescription":"Opened issue \"Fails to compile on MacOS - works on Windows and Linux: error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0' and 'This can indicate a missing project reference'\" (#1722) at dotnet/sdk","RelatedBody":"Solution with tests 'netcoreapp2.0' and 'netstandard' libraries of different versions fails to compile on MacOS - works on Windows and Linux.\r\n\r\nTested with SDK versions: 2.0.0 and 2.0.2\r\n\r\nBesides working on Appveyor and Travis-CI (Ubuntu), I've also tested on Windows 10 and CentOS which builds without issues.\r\n\r\n- It fails on MacOS 10.12.6 and Travis-CI 'OSX' build:\r\n\r\nThe repo has badges for the [Travis](https://travis-ci.org/bruno-garcia/messaging/jobs/300089706) and [Appveyor](https://ci.appveyor.com/project/bruno-garcia/messaging) builds: \r\n\r\nRepro at: [https://github.com/bruno-garcia/messaging](https://github.com/bruno-garcia/messaging)\r\n\r\n### Note:\r\nOnly a single project is failing to build. It's a test project targeting 'netcoreapp2.0' and referencing projects: 'netstandard1.3' and 'netstandard2.0'\r\n\r\n### Steps to reproduce:\r\n\r\nEnvironment: MacOS with SDK 2.0.0 or 2.0.2\r\n1 - Checkout [this repo](https://github.com/bruno-garcia/messaging)\r\n2 - run `dotnet build`\r\n\r\n#### Error:\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Serialization.Protobuf/Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Serialization.ProtoBuf.Tests/Serialization.ProtoBuf.Tests.csproj]\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests.csproj]\r\n\r\nBuilding directly the test project fails with a different error:\r\n`cd test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests && dotnet build`\r\n...\r\n```\r\nProtoBufMessagingBuilderExtensions.cs(12,21): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(12,13): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(13,30): error CS0012: The type 'IList<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\n```\r\n...\r\n\r\nFails also building with JetBrains Rider:\r\n\r\n`Microsoft.NET.Sdk.targets(114, 5): [null] Cannot find project info for '/Users/bgarc/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference.`"},{"Id":"6835528679","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:42:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1721","RelatedDescription":"Opened pull request \"[Perf] Retarget to .NET Core 2.0 and remove unnecessary assemblies\" (#1721) at dotnet/sdk","RelatedBody":"This removes 2 MB of files that were being copied unnecessarily to the netcoreapp folder of the sdk. They were:\r\n\r\n1. duplicates of shared framework assemblies (because dependencies pulled in 4.3.x/1.1 assemblies, but we targeted 1.0)\r\n\r\n2. nuget assemblies that are loaded from CLI directory\r\n\r\n3. core-setup dependencies that are loaded from CLI directory\r\n\r\nI'm doing this as step 1 to crossgen'ing the netcoreapp variant of the SDK. I didn't want to have to crossgen and sign the extra unnecessary files, which would slow down the build and make the bloat even bigger.\r\n"},{"Id":"6835388788","Type":"IssuesEvent","CreatedAt":"2017-11-10T00:53:11","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1720","RelatedDescription":"Opened issue \"ServerGarbageCollection is not honored in SDK project and TargetFramework net47\" (#1720) at dotnet/sdk","RelatedBody":"_From @Tornhoof on October 17, 2017 7:58_\n\nThe setting server garbage collection in the new SDK project format is not honored for TargetFramework net47, it works for netcoreapp 2.0\r\n```xml\r\n<ServerGarbageCollection>true</ServerGarbageCollection>\r\n```\r\n# Steps to repreoduce\r\n1. Create Console project\r\n2. TargetFramework net47\r\n3. Change project format to new format\r\n4. Add setting from above to property group\r\n5. Put in the main method:\r\n```csharp\r\nvar latencyMode = System.Runtime.GCSettings.LatencyMode;\r\nvar isServerGC = System.Runtime.GCSettings.IsServerGC;\r\nConsole.WriteLine($\"Server: {isServerGC}, Mode: {latencyMode}\");\r\n```\r\n## Expected result\r\n1. Output: ``Server: True, Mode: Interactive``\r\n## Actual result\r\n1. Output is: ``Server: False, Mode: Interactive`` \r\n\r\nNote: if you multi target the project with ``<TargetFrameworks>net47;netcoreapp2.0</TargetFrameworks``\r\nyou can see that the setting is properly used in .net core 2.0\r\n\r\nThis bug is kinda annoying since it means my Web App for ASP.NET Core 2.0 on .NET 4.7 is running on workstation GC and not on server background gc as it's usually done.\r\n\r\nAll my attempts to ``set complus_gcServer=true`` didn't make any difference.\r\n\r\nRepro:\r\n[ServerGcRepro.zip](https://github.com/dotnet/project-system/files/1390201/ServerGcRepro.zip)\r\n\r\nFor reference:\r\n```\r\n.NET-Befehlszeilentools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\nVS version is VS 2017 15.4.0\n\n_Copied from original issue: dotnet/project-system#2896_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":45,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null}]}},"RunOn":"2017-11-11T05:30:21.1347392Z","RunDurationInMilliseconds":7917}