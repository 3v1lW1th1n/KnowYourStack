{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":62,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":226,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6943121201","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:53:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15363","RelatedDescription":"Merged pull request \"Remove old TryFormat methods using \"string format\"\" (#15363) at dotnet/coreclr","RelatedBody":""},{"Id":"6943118574","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:52:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15365","RelatedDescription":"Merged pull request \"Have a Type.IsCollectible property.\" (#15365) at dotnet/coreclr","RelatedBody":"dotnet/corefx#25671 asks for this as a public API, but this just seeks to make it available to corefx.\r\n\r\nMotivation discussed at dotnet/corefx#25663 and dotnet/corefx#25670\r\n\r\nMirror PR to corert will need an overload making runtime types return false there.\r\n\r\ncc @jkotas "},{"Id":"6942151498","Type":"PullRequestEvent","CreatedAt":"2017-12-04T22:40:56","Actor":"adiaaida","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15366","RelatedDescription":"Opened pull request \"Move perf configurations to slice json file\" (#15366) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6942773559","Type":"PullRequestEvent","CreatedAt":"2017-12-05T01:49:21","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8166","RelatedDescription":"Opened pull request \"Skipping GenerateResxSource task when building in design time build.\" (#8166) at dotnet/cli","RelatedBody":"Skipping GenerateResxSource task when building in design time build. This unblocks requiring a full build of the CLI before using VS.\r\n"},{"Id":"6942526565","Type":"PullRequestEvent","CreatedAt":"2017-12-05T00:27:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8163","RelatedDescription":"Merged pull request \"Update to latest dotnet/sdk\" (#8163) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6942462728","Type":"PullRequestEvent","CreatedAt":"2017-12-05T00:06:24","Actor":"vijayrkn","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8165","RelatedDescription":"Opened pull request \"Updating the websdk version to 2.0.0-rel-20171110-671\" (#8165) at dotnet/cli","RelatedBody":"MyGet feed with version: \r\nhttps://dotnet.myget.org/feed/dotnet-web/package/nuget/Microsoft.NET.Sdk.Web/2.0.0-rel-20171110-671 \r\n\r\n@livarcocc "},{"Id":"6942033601","Type":"PullRequestEvent","CreatedAt":"2017-12-04T22:13:26","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8132","RelatedDescription":"Merged pull request \"Add install tool command\" (#8132) at dotnet/cli","RelatedBody":"Continue of https://github.com/dotnet/cli/pull/8113 I tested end to end manually(env path and shell behavior cannot be automated). It looks good now.\r\nissue: https://github.com/dotnet/cli/issues/8066\r\n\r\n- compose all the parts\r\nCommit 3cad925\r\n\r\n- Also fixed several bugs from testing(in separate commits). If you find the fixes are noisy. I can create a separate PR\r\n"},{"Id":"6941836914","Type":"IssuesEvent","CreatedAt":"2017-12-04T21:30:54","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8160","RelatedDescription":"Closed issue \"Running `dotnet restore --verbosity` (verbosity w/o value) throws an exception\" (#8160) at dotnet/cli","RelatedBody":"Originally from https://github.com/NuGet/Home/issues/6248\r\n\r\nRunning dotnet restore --verbosity crashes with ArgumentOutOfRangeException.\r\nYes, --verbosity should have a value, but nuget should not throw.\r\nI'd expect something like 'verbosity value missing (q,m,d)' message.\r\n\r\n ---> Running in c970969c266e\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult parseResult, String topLevelCommandName)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nThe command '/bin/sh -c dotnet restore --verbosity' returned a non-zero code: 1"},{"Id":"6941823813","Type":"PullRequestEvent","CreatedAt":"2017-12-04T21:28:09","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8119","RelatedDescription":"Merged pull request \"Add parameter to dotnet-install to support pulling from private blob feeds\" (#8119) at dotnet/cli","RelatedBody":"Typically this will only be used for internal customers when publishing dotnet-cli assets to private Azure blob feeds.\r\n\r\nskip ci please\r\n"},{"Id":"6941822570","Type":"PullRequestEvent","CreatedAt":"2017-12-04T21:27:53","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8120","RelatedDescription":"Merged pull request \"Pipe ldconfig stderr to /dev/null\" (#8120) at dotnet/cli","RelatedBody":"The addition of --verbose to ldconfig causes dotnet-install.sh to produce additional output like this:\r\n\r\n```\r\n$ ./dotnet-install.sh --install-dir ~/.dotnet --shared-runtime --version 2.0.0   \r\n/sbin/ldconfig.real: Path `/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: Path `/usr/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: /lib/x86_64-linux-gnu/ld-2.23.so is the dynamic linker, ignoring\r\n\r\n/sbin/ldconfig.real: Path `/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: Path `/usr/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: /lib/x86_64-linux-gnu/ld-2.23.so is the dynamic linker, ignoring\r\n\r\n/sbin/ldconfig.real: Path `/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: Path `/usr/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: /lib/x86_64-linux-gnu/ld-2.23.so is the dynamic linker, ignoring\r\n\r\n/sbin/ldconfig.real: Path `/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: Path `/usr/lib/x86_64-linux-gnu' given more than once\r\n/sbin/ldconfig.real: /lib/x86_64-linux-gnu/ld-2.23.so is the dynamic linker, ignoring\r\n\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-x64.tar.gz\r\n```"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6941976997","Type":"PullRequestEvent","CreatedAt":"2017-12-04T22:00:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/596","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02304-01 (master)\" (#596) at dotnet/standard","RelatedBody":""},{"Id":"6934208277","Type":"IssuesEvent","CreatedAt":"2017-12-02T16:58:57","Actor":"jeremyVignelles","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/595","RelatedDescription":"Opened issue \"Add UnmanagedType.LPUTF8Str marshalling in .net standard\" (#595) at dotnet/standard","RelatedBody":"Hi,\r\nI'm currently writing a .net standard wrapper around libvlc, and I need to marshall strings from/to UTF-8.\r\n\r\nFor that, It would be really helpful to have the `UnmanagedType.LPUTF8Str` enumeration available.\r\n\r\nFrom https://apisof.net/catalog/System.Runtime.InteropServices.UnmanagedType.LPUTF8Str, it looks like everything is there in .net core and .net framework.\r\n\r\nWould it be possible to add that UTF8 support in the upcoming releases of .net standard?"},{"Id":"6932629749","Type":"PullRequestEvent","CreatedAt":"2017-12-01T22:41:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02301-01 (master)\" (#593) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6943263137","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:51:29","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25711","RelatedDescription":"Opened pull request \"Remove dead code from MS.CSharp's BadOperatorTypesError and related methods\" (#25711) at dotnet/corefx","RelatedBody":"* Remove dead paths in `BadOperatorTypesError`\r\n\r\n`pOperand1` is never null, and neither operand can ever have a null or `ErrorType` type, so remove path for those possibilities.\r\n\r\nIt's worth noting the possible call paths here, and what types they can possibly give to the operands\r\n\r\n```\r\nBadOperatorTypesError\r\n    BindLiftedStandardUnop\r\n        BindStandardUnaryOperator\r\n            Recurse (predef)\r\n            RB.BindUnaryOperation (creates the operands, never with ErrorType)\r\n    bindNullEqualityComparison\r\n        BindStandardBinop\r\n            BindBinaryOperation (creates the operands, never with ErrorType)\r\n    BadOperatorTypesError (overload)\r\n        BindIntegerNeg\r\n            BindIntOp\r\n                BindEnumUnaOp (predef)\r\n                BindEnumBinOp (predef)\r\n                BindIntUnaOp (predef-always binding)\r\n                BindIntBinOp (predef-always binding)\r\n        BindStandardUnaryOperator (see above)\r\n        BindStandardBinop (see above)\r\n        BindStandardBinopCore\r\n            BindStandardBinop (see above)\r\n```\r\n\r\n* Remove unused parameters from `BadOperatorTypesError`\r\n\r\n`ek` and `pTypeErr` are never used, so remove them. Merges the overloads.\r\n\r\n* Change `BadOperatorTypesError` to return rather than throwing exceptions\r\n\r\nSince it throws in every path, have the error thrown at the call site, making it more clearly an error path.\r\n\r\n* Remove `UnwrapExpression`\r\n\r\nThe only place `ExprWraps` are produced outside of the `ExpressionTreeRewriter` is in `BindUserBoolOp` which passes them to `bindUDUnop`. There's no path that can bring them to `BadOperatorTypesError` which calls `UnwrapExpression`.\r\n\r\n* Have `CalculateExprAndUnaryOpKinds` return a value tuple and throw ICE on failure.\r\n\r\nRather than have an impossible condition checked for outside of it.\r\n(ICE is more appropriate, too).\r\n\r\n* Have GetBinopKindAndFlags return value tuple and throw ICE on failure.\r\n\r\nRather than have an impossible condition checked for outside of it.\r\n"},{"Id":"6943212234","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:30:39","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25710","RelatedDescription":"Opened pull request \"Fix tests for path validation changes on Unix\" (#25710) at dotnet/corefx","RelatedBody":"Rebase on PR  #25688\r\nFixes #25665"},{"Id":"6943185251","Type":"IssuesEvent","CreatedAt":"2017-12-05T04:19:10","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/20903","RelatedDescription":"Closed issue \"Additional API for DbProviderFactories in .NET Core\" (#20903) at dotnet/corefx","RelatedBody":"# Latest Proposal\r\n\r\nCopied from latest API approval: https://github.com/dotnet/corefx/issues/20903#issuecomment-342605350\r\n\r\n```C#\r\npublic static class DbProviderFactories\r\n{\r\n    // exiting members\r\n    \r\n    public static DbProviderFactory GetFactory(string providerInvariantName); \r\n    public static DbProviderFactory GetFactory(DataRow providerRow); \r\n    public static DbProviderFactory GetFactory(DbConnection connection); \r\n    public static DataTable GetFactoryClasses(); \r\n\r\n    // new members\r\n\r\n    /// <summary>\r\n    /// Registers a provider factory using the assembly qualified name of the factory and an \r\n    /// invariant name\r\n    /// </summary>\r\n    public static void RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName);\r\n\r\n    /// <summary>\r\n    /// Registers a provider factory using the provider factory type and an invariant name\r\n    /// </summary>\r\n    public static void RegisterFactory(string providerInvariantName, Type factoryType);\r\n\r\n    /// <summary>\r\n    /// Extension method to register a provider factory using the provider factory instance and \r\n    /// an invariant name\r\n    /// </summary>\r\n    public static void RegisterFactory(string providerInvariantName, DbProviderFactory factory);\r\n\r\n    /// <summary>\r\n    /// Returns the provider factory instance if one is registered for the given invariant name\r\n    /// </summary>\r\n    public static bool TryGetFactory(string providerInvariantName, out DbProviderFactory factory);\r\n\r\n    /// <summary>\r\n    /// Removes the provider factory registration for the given invariant name  \r\n    /// </summary>\r\n    public static bool UnregisterFactory(string providerInvariantName);\r\n\r\n    /// <summary>\r\n    /// Returns the invariant names for all the factories registered\r\n    /// </summary>\r\n    public static IEnumerable<string> GetProviderInvariantNames();\r\n}\r\n```\r\n\r\n# Original proposal\r\n\r\nIssue #4571 is about porting the existing surface of `DbProviderFactories` into .NET Core. This new issue is specifically about new API that needs to be added in .NET Core that does not (yet) exist in .NET Framework. `DbProviderFactories` on .NET Framework can only be initialized from .config files, and in order to make the API usable without .config files the new API is needed. \r\n\r\nThe proposal by @FransBouma can be found in https://github.com/dotnet/standard/issues/356#issuecomment-307552750 and is repeated below:\r\n\r\nI've refactored the code a bit, the new API now looks like: \r\n```cs\r\npublic static void ConfigureFactory(Type providerFactoryClass);\r\npublic static void ConfigureFactory(Type providerFactoryClass, string providerInvariantName);\r\npublic static void ConfigureFactory(Type providerFactoryClass, string providerInvariantName, string name, string description);\r\npublic static void ConfigureFactory(DbConnection connection);\r\npublic static void ConfigureFactory(DbConnection connection, string providerInvariantName);\r\npublic static void ConfigureFactory(DbConnection connection, string providerInvariantName, string name, string description);\r\n```\r\nTwo new overloads are added. They'll use the fallback code for the providerInvariantName, as it is also present in netfx' auto-init code: it will use the namespace of the type. I've added this to avoid people making a typo in the name as for most factories I know (I don't really know of a dbproviderfactory where this isn't the case) the invariant name is equal to the namespace.\r\n\r\n### Method usage / purpose\r\n\r\n\r\n```cs\r\npublic static void ConfigureFactory(Type providerFactoryClass)\r\n```\r\n**Description**: This method will register the factory instance contained in the specified type, under invariant name equal to the namespace of the specified type. It will leave name and description empty.  \r\n**Purpose:** This method is meant to be the easiest way to register a factory. Most (if not all) ADO.NET providers use as invariant name the namespace of the factory type.\r\n\r\n```cs\r\npublic static void ConfigureFactory(Type providerFactoryClass, string providerInvariantName)\r\n```\r\n**Description**: This method will register the factory instance contained in the specified type, under invariant name specified in providerInvariantName. It will leave name and description empty.  \r\n**Purpose:**: This method can be used to register a factory for the ADO.NET providers which don't use the namespace as the invariant name, and it can also be used to register a different factory type under a well-known invariant name, e.g. in the case of a wrapping factory for ADO.NET profiling.  \r\n\r\n```cs\r\npublic static void ConfigureFactory(Type providerFactoryClass, string providerInvariantName, string name, string description)\r\n```\r\n**Description**: This method will register the factory instance contained in the specified type, under invariant name specified in providerInvariantName and will fill in the name and description values for the factory. \r\n**Purpose:**: This method is equal to `ConfigureFactory(type, string)` and can be used to fill in the additional two columns in the factory table if a user requires that.  \r\n\r\n```cs\r\npublic static void ConfigureFactory(DbConnection connection)\r\n```\r\n**Description**: This method will register the factory instance obtained from the specified connection, under invariant name equal to the namespace of the factory instance's type. It will leave name and description empty.  \r\n**Purpose:** This method is meant to be the easiest way to register a factory if the user doesn't know the factory type but does know the connection type. As DbProviderFactory registration was mainly hidden for most users it can very well be they're not familiar with the factory types, so this method and its overloads make it easier for them to register a factory. Most (if not all) ADO.NET providers use as invariant name the namespace of the factory type.\r\n\r\n```cs\r\npublic static void ConfigureFactory(DbConnection connection, string providerInvariantName)\r\n```\r\n**Description**: This method will register the factory instance obtained from the specified connection, under invariant name specified. It will leave name and description empty.  \r\n**Purpose:**: This method can be used to register a factory for the ADO.NET providers which don't use the namespace as the invariant name, and it can also be used to register a different factory type under a well-known invariant name, e.g. in the case of a wrapping factory for ADO.NET profiling.  \r\n\r\n```cs\r\npublic static void ConfigureFactory(DbConnection connection, string providerInvariantName, string name, string description)\r\n```\r\n**Description**: This method will register the factory instance obtained from the specified connection, under invariant name specified in providerInvariantName and will fill in the name and description values for the factory. \r\n**Purpose:**: This method is equal to `ConfigureFactory(DbConnection, string)` and can be used to fill in the additional two columns in the factory table if a user requires that.  \r\n"},{"Id":"6943181800","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:17:42","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25410","RelatedDescription":"Merged pull request \"Implementation of DbProviderFactories. \" (#25410) at dotnet/corefx","RelatedBody":"This PR implements API reviewed here: #20903 \"Additional API for DbProviderFactories in .NET Core\".\r\nFixes #4571\r\n\r\nDesign decisions:\r\n\r\n- `GetFactory(DataRow)` follows the same behavior as on NetFX: it will return the factory which type is present in the DataRow present. This can lead to undefined behavior when a different factory is registered in the DbProviderFactories for a given invariant name than the one specified in the DataRow. As this is a catch-22 situation with no true answer, the decision for now was made to make it behave the same as on NetFX\r\n- `RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName)` registers the type name but doesn't check the type as that would require the load of the assembly and this method is meant to be used to pre-register factories which might not be present on the system (yet) (e.g. by an ORM). The type registration is deferred till the factory is requested through a `GetFactory` method. This might cause a false sense of correctness: the type registered might not be valid. This is a situation following from the nature of the method. \r\n- `TryGetFactory(string providerInvariantName, out DbProviderFactory factory)` will still throw an exception when the factory type associated with the providerInvariantName was registered with `RegisterFactory(string, string)` and the type is invalid, as the type checking was deferred when the registration took place. In the API review thread it was undecided what to do, so I decided to stick with the exception in this case: the alternative, swallow the exception and returning false could suggest the registration earlier was successful, or that the factory isn't there/not registered, which isn't the case: a factory is registered, the type specified just couldn't be loaded. \r\n- Internal implementation is using a ConcurrentDictionary instead of a DataTable, which is used in NetFx. This is done to avoid locks as the `IEnumerable<string> GetProviderInvariantNames()` method would lead to upscaling a ReaderWriterLockSlim lock to write level in the case of an internal Datatable\r\n- The method `DataTable GetFactoryClasses()` builds the datatable every time. Initially I had a cached version to avoid re-allocating columns again, but maintaining that construct was rather tedious and this method isn't expected to be on a hot path at all (it's likely called once in an application's life) so I've chosen for a lock-free rebuild of the datatable every time. NetFx creates a copy of the internal table, for comparison. \r\n- The method `IEnumerable<string> GetProviderInvariantNames()` returns a `List<T>` as that was the most simplest of implementations. If an array is preferred I could change that. As the internal structure is a concurrentdictionary and to keep things threadsafe, yield-ing over the keys set of the concurrent dictionary didn't feel correct, but please correct me if this should be updated. :) \r\n\r\n// cc @karelz @divega @terrajobst "},{"Id":"6943125389","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:54:39","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25708","RelatedDescription":"Merged pull request \"Update CoreClr to preview1-26004-04 (master)\" (#25708) at dotnet/corefx","RelatedBody":""},{"Id":"6943016656","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:13:48","Actor":"lmolkova","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25709","RelatedDescription":"Opened pull request \"Send notification about HTTP response without content (netfx)\" (#25709) at dotnet/corefx","RelatedBody":"On netfx, HttpClient (WebRequests) is not instrumented with DiagnosticSource events.\r\nInstead, DiagnosticSource implements the reflection-based hook that injects instrumentation at runtime if the user enabled it.\r\n\r\nThe hook does not properly notify about async responses that have 0-length content.\r\nThis case is treated specially here: http://referencesource.microsoft.com/#System/net/System/Net/HttpWebResponse.cs,525\r\n\r\nIt happens because at the hook is called moment, HttpWebRequest does not yet have `_HttpResponse` property assigned (that is used by the hook).\r\n\r\nHowever, it has `_CoreResponse` data holding status code and response headers (that is what we expect listeners to be interested in).\r\n\r\nThis changes fires a 'Stop' event (with a new name) and new payload (status and headers).\r\n\r\nThe fix is needed for ApplicationInsights (https://github.com/Microsoft/ApplicationInsights-dotnet-server/issues/739) as it cannot track 0-length responses done with HttpClient on .net fx.\r\n\r\nRequest to document internal API is submitted - TFS 533155.\r\n\r\n@brahmnes @vancem @zakimaksyutov"},{"Id":"6942992007","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:04:45","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25694","RelatedDescription":"Merged pull request \"Add missing Shutdown calls in HTTP loopback servers\" (#25694) at dotnet/corefx","RelatedBody":"General goodness, but potentially the cause of https://github.com/dotnet/corefx/issues/25640 and maybe some other issues.\r\n\r\ncc: @davidsh, @wfurt, @Priya91 "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6943299751","Type":"IssuesEvent","CreatedAt":"2017-12-05T05:06:39","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23520","RelatedDescription":"Closed issue \"Can't serialize a ProjectId with a null DebugName\" (#23520) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nhttps://dotnet.myget.org/feed/roslyn-for-vs-for-mac/package/nuget/Microsoft.CodeAnalysis.Workspaces.Common/2.7.0-vs-for-mac-62330-03\r\n\r\n**Steps to Reproduce**:\r\n\r\nMonoDevelop has a unit-test that crashes because the ProjectId has a null DebugName:\r\nhttp://source.monodevelop.com/#MonoDevelop.CSharpBinding.Tests/MonoDevelop.CSharpBinding.Refactoring/CSharpFindReferencesProviderTests.cs,ced55906c09ac9c1\r\n\r\n**Expected Behavior**:\r\nShould be able to serialize a null string here:\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Workspace/Solution/ProjectId.cs#L90\r\n\r\n**Actual Behavior**:\r\nCrash:\r\n\r\n```\r\n  at <unknown> <0xffffffff>\r\n  at Roslyn.Utilities.ObjectWriter.WriteString (string) [0x00000] in /_/src/Compilers/Core/Portable/Serialization/ObjectWriter.cs:120\r\n  at Microsoft.CodeAnalysis.ProjectId.Roslyn.Utilities.IObjectWritable.WriteTo (Roslyn.Utilities.ObjectWriter) [0x0000c] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectId.cs:90\r\n  at Microsoft.CodeAnalysis.Shared.Extensions.SolutionExtensions.WriteTo (Roslyn.Utilities.IObjectWritable,Roslyn.Utilities.ObjectWriter) [0x00000] in /_/src/Workspaces/Core/Portable/Shared/Extensions/SolutionExtensions.cs:11\r\n  at Microsoft.CodeAnalysis.ProjectInfo/ProjectAttributes.WriteTo (Roslyn.Utilities.ObjectWriter) [0x00000] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectInfo.cs:438\r\n  at Microsoft.CodeAnalysis.Checksum.Create (Microsoft.CodeAnalysis.Serialization.WellKnownSynchronizationKind,Roslyn.Utilities.IObjectWritable) [0x0001d] in /_/src/Workspaces/Core/Portable/Workspace/Solution/Checksum_Factory.cs:55\r\n  at Microsoft.CodeAnalysis.ProjectInfo/ProjectAttributes.Microsoft.CodeAnalysis.IChecksummedObject.get_Checksum () [0x0000e] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectInfo.cs:478\r\n  at Microsoft.CodeAnalysis.Serialization.Serializer.CreateChecksum (object,System.Threading.CancellationToken) [0x00028] in /_/src/Workspaces/Core/Portable/Execution/Serializer.cs:61\r\n  at Microsoft.CodeAnalysis.ProjectState/<ComputeChecksumsAsync>d__111.MoveNext () [0x000c0] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectState_Checksum.cs:41\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Serialization.ProjectStateChecksums>.Start<Microsoft.CodeAnalysis.ProjectState/<ComputeChecksumsAsync>d__111> (Microsoft.CodeAnalysis.ProjectState/<ComputeChecksumsAsync>d__111&) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.ProjectState.ComputeChecksumsAsync (System.Threading.CancellationToken) [0x0002f] in <04e532e269994a46ad655a7ff113b901>:0\r\n  at Roslyn.Utilities.AsyncLazy`1<T_REF>.StartAsynchronousComputation (Roslyn.Utilities.AsyncLazy`1/AsynchronousComputationToStart<T_REF>,Roslyn.Utilities.AsyncLazy`1/Request<T_REF>,System.Threading.CancellationToken) [0x00013] in /_/src/Workspaces/Core/Portable/Utilities/AsyncLazy`1.cs:388\r\n  at Roslyn.Utilities.AsyncLazy`1<T_REF>.GetValueAsync (System.Threading.CancellationToken) [0x00085] in /_/src/Workspaces/Core/Portable/Utilities/AsyncLazy`1.cs:344\r\n  at Microsoft.CodeAnalysis.ProjectState.GetStateChecksumsAsync (System.Threading.CancellationToken) [0x00000] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectState_Checksum.cs:21\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetChecksumAsync>d__55.MoveNext () [0x00011] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex_Persistence.cs:83\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Checksum>.Start<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetChecksumAsync>d__55> (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetChecksumAsync>d__55&) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetChecksumAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in <04e532e269994a46ad655a7ff113b901>:0\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexWorkerAsync>d__10.MoveNext () [0x0001d] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex.cs:75\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.Start<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexWorkerAsync>d__10> (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexWorkerAsync>d__10&) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in <04e532e269994a46ad655a7ff113b901>:0\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexAsync>d__9.MoveNext () [0x00035] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex.cs:61\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.Start<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexAsync>d__9> (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/<GetIndexAsync>d__9&) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in <04e532e269994a46ad655a7ff113b901>:0```"},{"Id":"6943220501","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:33:55","Actor":"dabutvin","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23576","RelatedDescription":"Opened pull request \"trim extra lines between copyright and namespace (#23568)\" (#23576) at dotnet/roslyn","RelatedBody":"<details>\r\n\r\n### Customer scenario\r\n\r\nThis addresses the case where you remove unused usings and there are none left afterwards.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/23568\r\n\r\n### Root cause analysis\r\n\r\nadded `TestNoReferencesWithCopyright` to specifically check this scenario\r\nfixed `TestRemoveAllWithSurroundingPreprocessor` that was accounting for 2 blanks\r\n\r\n</details>\r\n"},{"Id":"6943209818","Type":"IssuesEvent","CreatedAt":"2017-12-05T04:29:49","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23575","RelatedDescription":"Opened issue \"Build a new dynamic binder based on Roslyn\" (#23575) at dotnet/roslyn","RelatedBody":"The current dynamic binder is based on the old native compiler. As a consequence, features that have been added to the language in Roslyn are supported poorly or not at all in the dynamic binder. This could, in theory, be fixed by rewriting the dynamic binder based on Roslyn.\r\n\r\n(By \"dynamic binder\", I mean the runtime code that comes into play for an expression operating on operands of static type `dynamic`)\r\n"},{"Id":"6942851501","Type":"PullRequestEvent","CreatedAt":"2017-12-05T02:15:45","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23574","RelatedDescription":"Opened pull request \"Update Microsoft.DiaSymReader.Native to 1.7.0 stable\" (#23574) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nUpdate Microsoft.DiaSymReader.Native to a stable version.\r\n\r\n### Bugs this fixes\r\n\r\n### Workarounds, if any\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\n### How was the bug found?\r\n\r\n### Test documentation updated?\r\n"},{"Id":"6942650437","Type":"IssuesEvent","CreatedAt":"2017-12-05T01:08:25","Actor":"scegg","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23573","RelatedDescription":"Opened issue \"Issue with Workaround: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'\" (#23573) at dotnet/roslyn","RelatedBody":"Hi all.\r\n\r\nToday, while I'm using Roslyn to compile some code under netcoreapp 2, I got such an error due to using keyword \"dynamic\":\r\nMissing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'\r\n\r\nIf you google this, it will point you to add Microsoft.CSharp as reference while calling Roslyn method. But sadly, it's done in my project.\r\n\r\nAfter several hour digging and testing, I found the problem and solution:\r\nIt seems that some methods related to Linq are used in my code. Adding **System.Linq.Expressions** as reference to Roslyn fixes the problem.\r\n\r\nNote: Images of these references should be loaded only from TRUSTED_PLATFORM_ASSEMBLIES."},{"Id":"6942624029","Type":"PullRequestEvent","CreatedAt":"2017-12-05T00:59:54","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23569","RelatedDescription":"Merged pull request \"Merge pull request #23529 from agocke/fix-signing\" (#23569) at dotnet/roslyn","RelatedBody":"Quick fix for signing failures\r\n\r\n(cherry picked from commit 0fb61ed4e2817fa373e51e726bfb9838609eddf2)\r\n\r\n### Customer scenario\r\n\r\nThe full scope is unknown, but signing is almost entirely broken for the C# and VB compilers. This change reverts the compiler to always use the old signing system until the bug in the new signing system can be understood and fixed.\r\n\r\n### Bugs this fixes\r\n\r\nFix for https://github.com/dotnet/roslyn/issues/23521\r\n\r\n### Workarounds, if any\r\n\r\nThe user could use an internal feature flag to manually fall-back to the old signing. This change forces that feature flag to always be enabled.\r\n\r\n### Risk\r\n\r\nVery small. The revert continues to use the old signing code that Roslyn has always relied upon. The change itself is simply hardcoding the use of the flag requiring the old signing mechanism, instead of leaving it optional.\r\n\r\n### Performance impact\r\n\r\nNone. This is a revert to the original code.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThe Roslyn unit tests check to see if a binary has the signed bit set, but do not actually verify that the signed assembly is cryptographically valid. These tests would have caught the failure.\r\n\r\n### How was the bug found?\r\n\r\nDogfooding by VS and partner teams.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6943197668","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:24:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5069","RelatedDescription":"Merged pull request \"Override of IsCollectible for runtime types (always false in corert)\" (#5069) at dotnet/corert","RelatedBody":""},{"Id":"6943174154","Type":"PullRequestEvent","CreatedAt":"2017-12-05T04:14:29","Actor":"JonHanna","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5069","RelatedDescription":"Opened pull request \"Override of IsCollectible for runtime types (always false in corert)\" (#5069) at dotnet/corert","RelatedBody":""},{"Id":"6943130608","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:56:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5068","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5068) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6943058353","Type":"PullRequestEvent","CreatedAt":"2017-12-05T03:29:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4983","RelatedDescription":"Merged pull request \"ILCompiler nuget package support\" (#4983) at dotnet/corert","RelatedBody":"Below is a working implementation - CoreRT can be consumed by adding a \r\n```xml\r\n <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"X\" /> \r\n```\r\nwhere X is the version of the ILCompiler package produced by build-packages.cmd or once its published with \r\n\r\n```bat \r\ndotnet add package Microsoft.DotNet.ILCompiler\r\n```\r\n\r\nIdeally, I'd like to add the assemblies produced by the project references in `Microsoft.DotNet.ILCompiler.pkgproj` to have their `TargetPath` property overriden when creating this package specifically, but the paths seem to be dynamically generated somewhere in the compiler. Can anyone more familiar with the NuGet package publishing pipeline take a look?\r\nAdditionally, the implementation below doesn't include symbols for the framework, sdk and tools assemblies to the final package."},{"Id":"6942919911","Type":"PullRequestEvent","CreatedAt":"2017-12-05T02:39:43","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5067","RelatedDescription":"Merged pull request \"Remove old TryFormat methods using \"string format\"\" (#5067) at dotnet/corert","RelatedBody":""},{"Id":"6941858275","Type":"PullRequestEvent","CreatedAt":"2017-12-04T21:35:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5066","RelatedDescription":"Merged pull request \"Rewrite method bodies for `catch (T)`\" (#5066) at dotnet/corert","RelatedBody":"Do something more diagnosable until #3460 is fixed."},{"Id":"6941783009","Type":"PullRequestEvent","CreatedAt":"2017-12-04T21:19:25","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5067","RelatedDescription":"Opened pull request \"Remove old TryFormat methods using \"string format\"\" (#5067) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6940388335","Type":"IssuesEvent","CreatedAt":"2017-12-04T16:34:07","Actor":"Pilchie","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1787","RelatedDescription":"Closed issue \"FastUpToDate always complains not up to date\" (#1787) at dotnet/sdk","RelatedBody":"`MyProject.runtimeconfig.json` won't change if not modifying the target framework, and `FastUpToDate` says it's an output and wrote earlier than input.\r\nBy the way, the build log uses UTC time. Consider to print local time please."},{"Id":"6939535022","Type":"IssuesEvent","CreatedAt":"2017-12-04T14:04:22","Actor":"ogreenz","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1792","RelatedDescription":"Opened issue \"Restore FAILS with <RuntimeIdentifiers> set and <PackageReference> to BOTH NS 1.x + 2.0\" (#1792) at dotnet/sdk","RelatedBody":"Repro repo:\r\nhttps://github.com/ogreenz/rid-netstandard2-repro\r\n\r\n`dotnet --info`:\r\n\r\n```\r\ndotnet --info\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\nProject references both NodaTime (NS 1.x) and Dapper (NS 2.0).\r\n\r\nWhen built WITHOUT `<RuntimeIdentifiers>` in the .csproj `dotnet restore` runs to completion and restore is successfull.\r\n\r\nWhen `<RuntimeIdentifiers>` is set to any valid value AND both packages are referenced/used restore fails with these cryptic messages:\r\n\r\n```\r\n$ dotnet restore\r\n  Restoring packages for C:\\projects\\repro-netstandard\\repro-netstandard.csproj...\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605: Detected package downgrade: System.IO.FileSystem.Primitives from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.IO.FileSystem.Primitives (>= 4.3.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem.Primitives (>= 4.0.1)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605: Detected package downgrade: System.Resources.ResourceManager from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Resources.ResourceManager (>= 4.3.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.Resources.ResourceManager (>= 4.0.1)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605: Detected package downgrade: System.Runtime.Handles from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Runtime.Handles (>= 4.3.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> System.Runtime.Handles (>= 4.0.1)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605: Detected package downgrade: System.Runtime.InteropServices from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version.\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Runtime.InteropServices (>= 4.3.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.Runtime.InteropServices (>= 4.1.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605: Detected package downgrade: System.Text.Encoding.Extensions from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version.\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Text.Encoding.Extensions (>= 4.3.0)\r\nC:\\projects\\repro-netstandard\\repro-netstandard.csproj : error NU1605:  repro-netstandard -> NodaTime 2.2.3 -> System.Runtime.Serialization.Xml 4.1.1 -> System.Xml.ReaderWriter 4.0.11 -> System.Text.Encoding.Extensions (>= 4.0.11)\r\n  Generating MSBuild file C:\\projects\\repro-netstandard\\obj\\repro-netstandard.csproj.nuget.g.props.\r\n  Restore failed in 378 ms for C:\\projects\\repro-netstandard\\repro-netstandard.csproj.\r\n```\r\n\r\nNote that if Dapper / NodaTime are used exclusively dotnet restore while using `<RuntimeIdentifiers>` runs successfully again...."},{"Id":"6938061689","Type":"IssuesEvent","CreatedAt":"2017-12-04T08:36:19","Actor":"John0King","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1791","RelatedDescription":"Opened issue \"How do I force myProject Choose .NetStandard assembly instead of TargetFramework\" (#1791) at dotnet/sdk","RelatedBody":"Today , There are Asp.Net (`System.Web.HttpContext`) and Asp.Net Core (`Microsoft.AspNetCore.Http.HttpContext`) in .net Framework , and there are a few packages  use .net Framwork with `System.Web.HttpContext` and .net Core (.net standard) with `Microsoft.AspNetCore.Http.HttpContext`   for sharing source , so when I use Asp.Net Core on .Net Framework , I just can not use that package because that package fouce me to use `System.Web.HttpContext` , but there is an available assembly in that package, How do I choose that ?"},{"Id":"6937936657","Type":"PullRequestEvent","CreatedAt":"2017-12-04T08:00:39","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1790","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1790) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171204-080038\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171204-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6937936584","Type":"PullRequestEvent","CreatedAt":"2017-12-04T08:00:38","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1789","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/15.5\" (#1789) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171204-080036\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171204-080036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6933814056","Type":"IssuesEvent","CreatedAt":"2017-12-02T12:21:22","Actor":"dustinmoris","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1788","RelatedDescription":"Opened issue \"Error FS1108: The type 'Object' is required here and is unavailable\" (#1788) at dotnet/sdk","RelatedBody":"If I pull the latest [Giraffe source code](https://github.com/dustinmoris/Giraffe) on Windows it builds totally fine, but when I pull the same code on macOS I am getting the following error:\r\n\r\n```\r\nerror FS1108: The type 'Object' is required here and is unavailable. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n```\r\n\r\nReproduction steps:\r\n\r\n1. Pull repo\r\n2. Run `./build.sh`\r\n\r\nI can fix this error by adding the following to the `Giraffe.fsproj` file:\r\n\r\n```\r\n<ItemGroup>\r\n    <Reference Include=\"netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" />\r\n</ItemGroup>\r\n```\r\n\r\n... but I don't understand why I have to do this on macOS. Shouldn't it work the same on both environments?"},{"Id":"6933471923","Type":"IssuesEvent","CreatedAt":"2017-12-02T07:27:19","Actor":"huoyaoyuan","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1787","RelatedDescription":"Opened issue \"FastUpToDate always complains not up to date\" (#1787) at dotnet/sdk","RelatedBody":"`MyProject.runtimeconfig.json` won't change if not modifying the target framework, and `FastUpToDate` says it's an output and wrote earlier than input.\r\nBy the way, the build log uses UTC time. Consider to print local time please."},{"Id":"6932225099","Type":"PullRequestEvent","CreatedAt":"2017-12-01T20:52:44","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1785","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/sdk-master | 20171201\" (#1785) at dotnet/sdk","RelatedBody":null},{"Id":"6932036836","Type":"PullRequestEvent","CreatedAt":"2017-12-01T20:05:16","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1786","RelatedDescription":"Merged pull request \"Updating a test helper method to use GetFullPath\" (#1786) at dotnet/sdk","RelatedBody":""},{"Id":"6931747550","Type":"PullRequestEvent","CreatedAt":"2017-12-01T18:58:15","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1786","RelatedDescription":"Opened pull request \"Updating a test helper method to use GetFullPath\" (#1786) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":212,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-12-05T05:30:21.4756318Z","RunDurationInMilliseconds":8325}