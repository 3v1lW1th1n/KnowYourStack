{"Data":{"Sdk":{"Events":[{"Id":"10629630840","Type":"IssuesEvent","CreatedAt":"2019-10-15T02:24:28","Actor":"nbulusanjr","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/635","RelatedDescription":"Opened issue \"Support for encrypted workbook\" (#635) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [ X] Question on library usage\r\n\r\nIf you have answered that this is a question, please ask it on StackOverflow instead of here.\r\nThis issue tracker is meant to track product issues while StackOverflow excels at answering questions\r\n\r\n---------------- Remove this line and above before posting ----------------\r\n\r\n**Description**\r\n\r\nPlease provide a simple description of the issue encountered.\r\n\r\n**Information**\r\n\r\n- .NET Target: (ie .NET Framework, .NET Core, UWP, Xamarin, etc)\r\n- DocumentFormat.OpenXml Version: (ie 2.7.2)\r\n\r\n**Repro**\r\n\r\n```csharp\r\n// Please add a self-contained, minimum viable repro of the issue.\r\n// If you require external resources, please provide a gist or GitHub repro\r\n// An Xunit style test is preferred, but a console application would work too.\r\n``` \r\n\r\n**Observed**\r\n\r\nPlease add your observed behavior here\r\n\r\n**Expected**\r\n\r\nPlease add your expected behavior here.\r\n"},{"Id":"10605944024","Type":"IssuesEvent","CreatedAt":"2019-10-10T21:42:28","Actor":"ThomasBarnekow","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/634","RelatedDescription":"Opened issue \"Increase flexibility of constructors, e.g., for pure functional transformations\" (#634) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nIn the context of pure functional transformations, it would be beneficial to construct `OpenXmlElement` instances very flexibly. For example, one might want to construct a new element in the following way:\r\n```csharp\r\nreturn new Paragraph(\r\n    new ParagraphProperties(new ParagraphStyleId { Val = \"MyStyleId\" }),\r\n    FunctionReturningIEnumerableOfRun(someParams));\r\n```\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: Latest\r\n\r\nSee discussion in #627.\r\n\r\n**Observed**\r\n\r\nUsing the `Paragraph` class as an example, the subclasses of `OpenXmlElement` define the following constructors:\r\n```csharp\r\npublic Paragraph()\r\n{\r\n}\r\n\r\npublic Paragraph(IEnumerable<OpenXmlElement> childElements)\r\n    : base(childElements)\r\n{\r\n}\r\n\r\npublic Paragraph(params OpenXmlElement[] childElements)\r\n    : base(childElements)\r\n{\r\n}\r\n\r\npublic Paragraph(string outerXml)\r\n    : base(outerXml)\r\n{\r\n}\r\n```\r\nWith those constructors, the example instance can't be created, because we can't combine an `OpenXmlElement`  and an `IEnumerable<OpenXmlElement>`.\r\n\r\n**Expected**\r\n\r\nWe should be able to create instances in the way shown in the description.\r\n\r\n**Design Idea**\r\n\r\nWe could borrow the design from the `System.Xml.Linq.XElement` class, which, owing to how you can construct instances, is instrumental in pure functional transformations.\r\n\r\nThe two key `XElement` constructors for pure functional transformations are:\r\n```csharp\r\npublic XElement(XName name, object content)\r\n    : this(name)\r\n{\r\n    this.AddContentSkipNotify(content);\r\n}\r\n\r\npublic XElement(XName name, params object[] content)\r\n    : this(name, (object) content)\r\n{\r\n}\r\n```\r\nNote how the second constructor delegates to the first one. Thus, the magic happens in the `AddContentSkipNotify(object)` method, which works with pretty much any meaningful actual parameter you throw at it.\r\n\r\nThus, using the `Paragraph` example, we could replace:\r\n- `Paragraph(IEnumerable<OpenXmlElement>)` with `Paragraph(object)` and\r\n- `Paragraph(params OpenXmlElement[])` with `Paragraph(params object[])`."},{"Id":"10575892889","Type":"IssuesEvent","CreatedAt":"2019-10-07T16:39:08","Actor":"typhon88","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/633","RelatedDescription":"Opened issue \"Adding NumberingFormats breaks spreadsheet file\" (#633) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [x ] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\nIf you have answered that this is a question, please ask it on StackOverflow instead of here.\r\nThis issue tracker is meant to track product issues while StackOverflow excels at answering questions\r\n\r\n---------------- Remove this line and above before posting ----------------\r\n\r\nI am generating a spreadsheet file with some styles like fonts, borders and fills and they all seem to work but as soon as I add NumberingFormats after the file is generated and I try to open it, it doesn't work it says the file is corrupted.\r\nI tried different format codes, none of them worked, any ideas? Thanks.\r\n\r\nThis is the code:\r\n\r\n        private Stylesheet GenerateStylesheet()\r\n        {\r\n            NumberingFormats numberFormats = new NumberingFormats(\r\n                 new NumberingFormat(),\r\n                 new NumberingFormat() { NumberFormatId = 1U, FormatCode = StringValue.FromString(\"0.00\") }\r\n                 );\r\n\r\n            Stylesheet styleSheet = null;\r\n            Fonts fonts = new Fonts(\r\n                new Font( // Index 0 - default\r\n                    new FontSize() { Val = 10 }\r\n                ),\r\n                new Font( // Index 1 - header\r\n                    new FontSize() { Val = 10 },\r\n                    new Bold(),\r\n                    new Color() { Rgb = \"FFFFFF\" }\r\n                ));\r\n\r\n            Fills fills = new Fills(\r\n                    new Fill(new PatternFill() { PatternType = PatternValues.None }), // Index 0 - default\r\n                    new Fill(new PatternFill() { PatternType = PatternValues.Gray125 }), // Index 1 - default\r\n                    new Fill(new PatternFill(new ForegroundColor { Rgb = new HexBinaryValue() { Value = \"66666666\" } })\r\n                    { PatternType = PatternValues.Solid }) // Index 2 - header\r\n                );\r\n\r\n            Borders borders = new Borders(\r\n                    new Border(), // index 0 default\r\n                    new Border( // index 1 black border\r\n                        new LeftBorder(new Color() { Auto = true }) { Style = BorderStyleValues.Thin },\r\n                        new RightBorder(new Color() { Auto = true }) { Style = BorderStyleValues.Thin },\r\n                        new TopBorder(new Color() { Auto = true }) { Style = BorderStyleValues.Thin },\r\n                        new BottomBorder(new Color() { Auto = true }) { Style = BorderStyleValues.Thin },\r\n                        new DiagonalBorder())\r\n                );\r\n\r\n            CellFormats cellFormats = new CellFormats(\r\n                    new CellFormat(), // default\r\n                    new CellFormat {\r\n                        FontId = 0,\r\n                        FillId = 0,\r\n                        BorderId = 1,\r\n                        NumberFormatId = 0,\r\n                        ApplyBorder = true }, // body\r\n                    new CellFormat {\r\n                        FontId = 1,\r\n                        FillId = 2,\r\n                        BorderId = 1,\r\n                        NumberFormatId = 0,\r\n                        ApplyFill = true }, // header\r\n                    new CellFormat {\r\n                        FontId = 0,\r\n                        FillId = 0,\r\n                        BorderId = 0,\r\n                        FormatId = 1U,\r\n                        NumberFormatId = 1U,\r\n                        ApplyNumberFormat = true\r\n                    }\r\n                );\r\n\r\n            styleSheet = new Stylesheet(fonts, fills, borders, numberFormats, cellFormats);\r\n            return styleSheet;\r\n        }\r\n\r\n"},{"Id":"10538210043","Type":"PullRequestEvent","CreatedAt":"2019-10-01T23:36:10","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/632","RelatedDescription":"Opened pull request \"Use in-params on large readonly structs\" (#632) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"10537972787","Type":"PullRequestEvent","CreatedAt":"2019-10-01T22:42:26","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/607","RelatedDescription":"Merged pull request \"Update FxCopAnalyzer to 2.9.5-beta1.final and resolve warnings\" (#607) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"10537799782","Type":"PullRequestEvent","CreatedAt":"2019-10-01T22:07:42","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/631","RelatedDescription":"Opened pull request \"Remove attributes for part constraints\" (#631) at OfficeDev/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2019-10-17T05:30:50.9121698Z","RunDurationInMilliseconds":1302}