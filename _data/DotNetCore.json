{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T13:03:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://devblogs.microsoft.com/dotnet/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Microsoft’s Developer Blogs are Getting an Update","PublishedOn":"2019-02-13T18:49:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming days, we’ll be moving our developer blogs to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. This...","Href":"https://devblogs.microsoft.com/dotnet/microsofts-developer-blogs-are-getting-an-update/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://devblogs.microsoft.com/dotnet/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T13:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 15, 2019\n\nA new Advisory on February 2019 Security update for Windows 10 update 1809 has been released today for issues customers have reported with .NET 4.8 Preview and this...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T15:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft.\nF# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://devblogs.microsoft.com/dotnet/submit-to-the-applied-f-challenge/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9089021734","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Merged pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9089021716","Type":"IssuesEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"9089015890","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:44:39","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Merged pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9127131081","Type":"IssuesEvent","CreatedAt":"2019-02-25T02:31:47","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22827","RelatedDescription":"Opened issue \"[arm64] System.TypeLoadException\" (#22827) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x10_tst/23/\r\n\r\n**Log:**\r\n```\r\nDiscovering: System.Diagnostics.EventLog.Tests (method display = ClassAndMethod, method display options = None)\r\nSystem.TypeLoadException: Could not load type 'System.Diagnostics.Tests.Helpers' from assembly 'System.Diagnostics.EventLog.Tests, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```"},{"Id":"9127057535","Type":"IssuesEvent","CreatedAt":"2019-02-25T02:07:42","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22826","RelatedDescription":"Opened issue \"[arm64] Test failed: tracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd\" (#22826) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0xc_minopts_heapverify1_tst/53/\r\n\r\n**Failed tests:**\r\ntracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd\r\n\r\n**Log:**\r\n```\r\ntracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd [FAIL]\r\n        \r\n  Unhandled Exception: System.InvalidOperationException: Bad PE Header.\r\n           at PEFile.PEHeader..ctor(Void* startOfPEFile)\r\n           at PEFile.PEFile..ctor(String filePath)\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventProviderOptions.get_FilteringSupported()\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(Guid providerGuid, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n           at Tracing.Tests.EventPipeAndEtw.EnableETW(EventSource eventSource, EventKeywords keywords, String outputFile) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 116\r\n           at Tracing.Tests.EventPipeAndEtw.RoundOne(String[] args) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 148\r\n           at Tracing.Tests.EventPipeAndEtw.Main(String[] args) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 290\r\n  \r\n  Return code:      1\r\n```"},{"Id":"9127046212","Type":"PullRequestEvent","CreatedAt":"2019-02-25T02:03:43","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22825","RelatedDescription":"Opened pull request \"Special-case 1 module per assembly in Assembly.GetTypes/DefinedTypes\" (#22825) at dotnet/coreclr","RelatedBody":"It's very common for an assembly to have only one module, in which case we can avoid unnecessary allocations and copies in Assembly.GetTypes() and Assembly.DefinedTypes.\r\n\r\nBefore\r\n```\r\n       Method |      Mean |     Error |    StdDev | Gen 0/1k Op | Allocated Memory/Op |\r\n------------- |----------:|----------:|----------:|------------:|--------------------:|\r\n     GetTypes |  93.62 us | 0.6061 us | 0.5373 us |     14.4043 |            59.03 KB |\r\n DefinedTypes | 114.03 us | 1.1998 us | 1.0019 us |     21.6064 |            88.55 KB |\r\n```\r\n\r\nAfter\r\n```\r\n       Method |      Mean |     Error |    StdDev | Gen 0/1k Op | Allocated Memory/Op |\r\n------------- |----------:|----------:|----------:|------------:|--------------------:|\r\n     GetTypes |  90.07 us | 1.7718 us | 1.8958 us |      7.2021 |            29.55 KB |\r\n DefinedTypes | 106.83 us | 0.8118 us | 0.6779 us |      7.2021 |            29.73 KB |\r\n```\r\n\r\nBenchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.Collections;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Reflection;\r\n\r\n[InProcess]\r\n[MemoryDiagnoser]\r\npublic class Test\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Test>();\r\n\r\n    private static readonly Assembly[] s_assemblies = new[]\r\n    {\r\n        typeof(object).Assembly,\r\n        typeof(HttpClient).Assembly,\r\n        typeof(Socket).Assembly,\r\n        typeof(BitArray).Assembly,\r\n        typeof(File).Assembly,\r\n        typeof(InProcessAttribute).Assembly\r\n    };\r\n\r\n    [Benchmark]\r\n    public int GetTypes()\r\n    {\r\n        int count = 0;\r\n        foreach (Assembly asm in s_assemblies) count += asm.GetTypes().Length;\r\n        return count;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int DefinedTypes()\r\n    {\r\n        int count = 0;\r\n        foreach (Assembly asm in s_assemblies)\r\n            foreach (TypeInfo ti in asm.DefinedTypes)\r\n                count++;\r\n        return count;\r\n    }\r\n}\r\n```"},{"Id":"9127044201","Type":"IssuesEvent","CreatedAt":"2019-02-25T02:03:02","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22824","RelatedDescription":"Opened issue \"Assertion failed 'featureSIMD' \" (#22824) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_jitnosimd_tst/59/\r\n\r\n**Failed tests:**\r\nbaseservices_compilerservices._modulector_runmoduleconstructor_runmoduleconstructor_._modulector_runmoduleconstructor_runmoduleconstructor_cmd\r\n"},{"Id":"9127034076","Type":"IssuesEvent","CreatedAt":"2019-02-25T01:59:38","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22823","RelatedDescription":"Opened issue \"[arm64\\linux] error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\" (#22823) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline/151/\r\n\r\n**Failed log:**\r\n```\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/tempHome/.nuget/packages/microsoft.dotnet.arcade.sdk/1.0.0-beta.19121.4/tools/Tools.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\n/bin/bash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\n    0 Warning(s)\r\n    5 Error(s)\r\n\r\nTime Elapsed 00:09:11.12\r\nBuild failed (exit code '1').\r\n[/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/tests/scripts/run-corefx-tests.py]: Error: exit code 256\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9126737309","Type":"PullRequestEvent","CreatedAt":"2019-02-24T23:55:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10876","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10876) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19124.1\r\n\r\n"},{"Id":"9126667854","Type":"PullRequestEvent","CreatedAt":"2019-02-24T23:20:03","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10876","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10876) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19124.1\r\n\r\n"},{"Id":"9126148637","Type":"IssuesEvent","CreatedAt":"2019-02-24T19:21:24","Actor":"aateeque","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10865","RelatedDescription":"Closed issue \"Incorrect sdk selected\" (#10865) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a new dotnet app from CLI\r\n\r\n```\r\nD:\\>mkdir a & cd a\r\n\r\nD:\\a>dotnet new webapp\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on D:\\a\\a.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK d\r\noes not support targeting .NET Core 2.2.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [D:\\a\\a.\r\ncsproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n## Expected  behavior\r\nShould work just fine; there is __no__ _global.json_ in D:\\\r\n\r\n\r\n## Actual behavior\r\nReports missing SDK\r\n\r\n\r\n## Environment data\r\n```\r\n`dotnet --info` output:\r\nD:\\>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9125365594","Type":"PullRequestEvent","CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1085) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n"},{"Id":"9125346135","Type":"PullRequestEvent","CreatedAt":"2019-02-24T13:00:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1085) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n"},{"Id":"9122937974","Type":"PullRequestEvent","CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1084) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n"},{"Id":"9122920355","Type":"PullRequestEvent","CreatedAt":"2019-02-23T13:00:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1084) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n"},{"Id":"9121709732","Type":"PullRequestEvent","CreatedAt":"2019-02-23T00:53:44","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Merged pull request \"Add \"generated by a tool\"-header\" (#1083) at dotnet/standard","RelatedBody":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053."},{"Id":"9121709723","Type":"IssuesEvent","CreatedAt":"2019-02-23T00:53:44","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Closed issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053) at dotnet/standard","RelatedBody":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n"},{"Id":"9121619940","Type":"PullRequestEvent","CreatedAt":"2019-02-23T00:20:58","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Opened pull request \"Add \"generated by a tool\"-header\" (#1083) at dotnet/standard","RelatedBody":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053."},{"Id":"9121557046","Type":"IssuesEvent","CreatedAt":"2019-02-23T00:00:15","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Closed issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066) at dotnet/standard","RelatedBody":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9127427172","Type":"PullRequestEvent","CreatedAt":"2019-02-25T04:06:19","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35554","RelatedDescription":"Opened pull request \"Update the IBufferWriter contract definition documentation to be clearer\" (#35554) at dotnet/corefx","RelatedBody":"Based on recent discussions:\r\n- https://github.com/dotnet/corefx/issues/34259\r\n- https://github.com/dotnet/corefx/pull/35186\r\n\r\ncc @pakrym, @stephentoub, @davidfowl, @AArnott, @benaadams, @KrzysztofCwalina, @terrajobst "},{"Id":"9126566283","Type":"PullRequestEvent","CreatedAt":"2019-02-24T22:31:53","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35532","RelatedDescription":"Merged pull request \"Removing restriction of first 8 character being different from lognames\" (#35532) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/31119\r\n\r\nI removed the first 8 same characters check. Same log Name check is not required because opensubkey will already be looking at all the subkeys, when it tries to open the subkey.\r\n\r\ni retained the restriction of not being able to use system names such as \"appevent secvent Sysevent\". However i allowed them to be present as a substring."},{"Id":"9126566276","Type":"IssuesEvent","CreatedAt":"2019-02-24T22:31:53","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31119","RelatedDescription":"Closed issue \"EventLog.CreateEventSource limits  log name similarity to first 8 chars\" (#31119) at dotnet/corefx","RelatedBody":"CreateEventSource  verifies that there is no existing log name that starts with the same 8 chars.\r\nFrom test we did, it does not seem to be a windows limitation, (maybe it was long time ago).\r\n\r\nI think it would be a good idea to simply remove this check and allow the flexibility of longer names.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9127272729","Type":"PullRequestEvent","CreatedAt":"2019-02-25T03:16:03","Actor":"davidwengier","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33653","RelatedDescription":"Opened pull request \"TempPE compiler fixes\" (#33653) at dotnet/roslyn","RelatedBody":"A couple of minor fixes to the TempPE compiler that will be used by CPS projects.\r\n\r\n* Start with the current project compilation options, mainly due to the VB compiler requirements and the desire to have a single compiler that can do both languages\r\n* Set the assembly of the output DLL properly, to allow for multiple TempPE outputs from the same project\r\n\r\nThis is part of https://github.com/dotnet/project-system/issues/4163"},{"Id":"9127225931","Type":"IssuesEvent","CreatedAt":"2019-02-25T03:01:29","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33652","RelatedDescription":"Opened issue \"FailFast in SolutionState.CheckContainsDocument\" (#33652) at dotnet/roslyn","RelatedBody":"**Version Used**: #33646\r\n\r\n**Steps to Reproduce**:\r\n\r\nFound in integration tests.\r\n\r\n```\r\nEvent Time (UTC): 2/25/2019 1:26:22 AM\r\nEvent ID: 1025\r\nData: Application: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.Exception\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)\r\n   at System.Diagnostics.TraceListener.Fail(System.String)\r\n   at System.Diagnostics.TraceInternal.Fail(System.String)\r\n   at System.Diagnostics.Debug.Assert(Boolean)\r\n   at Microsoft.CodeAnalysis.SolutionState.CheckContainsDocument(Microsoft.CodeAnalysis.DocumentId)\r\n   at Microsoft.CodeAnalysis.SolutionState.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)\r\n   at Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)\r\n   at Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)\r\n   at Microsoft.CodeAnalysis.Text.Extensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+<UpdateAsync>d__7.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+<UpdateAsync>d__7, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<UpdateAsync>d__7 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree.UpdateAsync(Microsoft.VisualStudio.Text.ITextSnapshot, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+<RebuildAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+<RebuildAsync>d__9, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<RebuildAsync>d__9 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache.RebuildAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+<UpdateSnapshotAsync>d__15.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+<UpdateSnapshotAsync>d__15, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<UpdateSnapshotAsync>d__15 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger.UpdateSnapshotAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1+<<UpdateSnapshotAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1+<<UpdateSnapshotAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.VisualStudio.CodeSense, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<<UpdateSnapshotAsync>b__0>d<System.__Canon> ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<UpdateSnapshotAsync>b__0(System.Threading.Tasks.Task`1<Int32>)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```"},{"Id":"9126952752","Type":"PullRequestEvent","CreatedAt":"2019-02-25T01:30:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33649","RelatedDescription":"Merged pull request \"Merge dev16.0-vs-deps to master-vs-deps\" (#33649) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9126952581","Type":"PullRequestEvent","CreatedAt":"2019-02-25T01:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33650","RelatedDescription":"Merged pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33650) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9126751120","Type":"PullRequestEvent","CreatedAt":"2019-02-25T00:01:49","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33651","RelatedDescription":"Opened pull request \"Add 'use var when explicit' as a new option for when 'var' is allowed.\" (#33651) at dotnet/roslyn","RelatedBody":"This PR stems from several pieces of feedback we've gotten over time about how \"use var when type is apparent\" is a bit too broad for some people's tastes.\r\n\r\nSpecifically, \"when apparent\" has a couple of cases that are a little too broad for people.  For example, 'when apparent' supports this case:\r\n\r\n```c#\r\nvar v = x.ToString();\r\n```\r\n\r\nThe feeling here was that a `ToXXX` method made it apparent-enough that the type on the left would be `XXX`.  However, this was unpleasant for some as it's a very tenuous connection, with `XXX` not actually appearing on the RHS as an actual type.\r\n\r\nIn a similar vein, \"when apparent\" was not strict about generics.  if you had, for example:\r\n\r\n```c#\r\nvar arr = ImmutableArray.Create(1, 2, 3);\r\n```\r\n\r\nIt would consider this an apparent enough match since the type on the left and the right are both `ImmutableArray` in terms of their name.  However, the type on the left is `ImmutableArray<int>` and the lack of `int` on the RHS made this unpalatable for people.\r\n\r\nFinally, there were common method invocation patterns not detected.  For example:\r\n\r\n```c#\r\nvar logger = component.GetService<ILogger>();\r\n```\r\n\r\nIn this case, people felt that this was an apparent use of ILogger and should fall under that category.\r\n\r\nin this PR we now add a new editorconfig option `csharp_style_var_when_type_is_explicit`.  The meaning is similar to `csharp_style_var_when_type_is_apparent` except that it's now a requirement that the actual type show up in an appropriate location in syntax on the RHS.  The allowed syntax locations are:\r\n\r\n1. `= default(SomeType)`\r\n2. `= new SomeType(...)`\r\n3. `= new SomeType[...] { ... }`\r\n4. `= ... as SomeType`\r\n5. `= (SomeType)...`\r\n6. `= Foo<SomeType>(...)` (Foo has to return `SomeType`).\r\n7. `= SomeType.FactoryMethod(...)` (FactoryMethod has to return `SomeType`).\r\n\r\nNote: there is an open design question around tuples.  i.e. if you have:\r\n\r\n```c#\r\nvar v = (default(SomeType), default(SomeOtherType);\r\n```\r\n\r\nIs the type of 'v' considered 'explicit'?  I personally think so.  It's clearly `(SomeType, SomeOtherType)` from very obvious syntax.  However, i could see some debate here, so i bring this up in case we want to consider that non-explicit.\r\n\r\nTo help make the concept understandable, here's the UI:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/53307441-76e70680-384d-11e9-9539-5545cf93cf4f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/53307443-7cdce780-384d-11e9-83a5-1fe62927008e.png)\r\n\r\n"},{"Id":"9126747901","Type":"PullRequestEvent","CreatedAt":"2019-02-25T00:00:25","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33650","RelatedDescription":"Opened pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33650) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9126747526","Type":"PullRequestEvent","CreatedAt":"2019-02-25T00:00:16","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33649","RelatedDescription":"Opened pull request \"Merge dev16.0-vs-deps to master-vs-deps\" (#33649) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9126568918","Type":"PullRequestEvent","CreatedAt":"2019-02-24T22:33:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7078","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#7078) at dotnet/corert","RelatedBody":"git merge 617d11b313ebdf83cd4e697dd0b04c290472d4ad\r\n\r\nNot picking up the header change that messed up Redhawk."},{"Id":"9126568588","Type":"PullRequestEvent","CreatedAt":"2019-02-24T22:32:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7078","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#7078) at dotnet/corert","RelatedBody":"git merge 617d11b313ebdf83cd4e697dd0b04c290472d4ad\r\n\r\nNot picking up the header change that messed up Redhawk."},{"Id":"9125733598","Type":"PullRequestEvent","CreatedAt":"2019-02-24T16:08:13","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7076","RelatedDescription":"Merged pull request \"Fix generation of type forwarder metadata\" (#7076) at dotnet/corert","RelatedBody":"We were not setting the public key/token for the reference."},{"Id":"9123357851","Type":"IssuesEvent","CreatedAt":"2019-02-23T16:48:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7048","RelatedDescription":"Closed issue \" Complie error code -536852669\" (#7048) at dotnet/corert","RelatedBody":"I try to build a chat project. The error occuried. \r\n\r\nC:\\Users\\hqfy\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27416-01\\build\\Microsoft.NETCore.Native.targets(235,5): error MSB3073: 命令“\"C:\\Users\\hqfy\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27416-01\\tools\\ilc\" @\"obj\\debug\\netcoreapp2.0\\win-x64\\native\\ChatServer.ilc.rsp\"”已退出，代码为 -536852669。 [D:\\guiltydomain\\guiltydomain_netcore\\Server\\Chat\\Chat_dotnet.csproj]"},{"Id":"9123304068","Type":"PullRequestEvent","CreatedAt":"2019-02-23T16:23:05","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7077","RelatedDescription":"Opened pull request \"wasm: fix for incorrect use of VirtualMethodUseNode for generic method\" (#7077) at dotnet/corert","RelatedBody":"fixes #7073 .  Generic virtual methods were creating a `VirtualMethodUseNode` which I understand to be incorrect.  This PR adds a test for this type of call and calls `NodeFactory.MethodEntrypoint` instead.  I'd welcome feedback on how correct that is, it passes the simple test here, but possibly I'm not understanding the full implication.  Also I've not changed the processing for the `Ldvirtftn` opcode, would that suffer the same problem and if so, how would that be exercised?"},{"Id":"9122950244","Type":"PullRequestEvent","CreatedAt":"2019-02-23T13:17:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7076","RelatedDescription":"Opened pull request \"Fix generation of type forwarder metadata\" (#7076) at dotnet/corert","RelatedBody":"We were not setting the public key/token for the reference."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9127126653","Type":"IssuesEvent","CreatedAt":"2019-02-25T02:30:23","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2976","RelatedDescription":"Closed issue \"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec\" (#2976) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/0690b28e426f5b7e6dfe7ab4200b83ce3c96bc95/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L81-L87\r\n\r\nThis should probably have been 'PrivateAssets=All'. \r\n\r\nAll aspnet 3.0 Preview 3 packages which target netcoreapp3.0 have this dependency in their nuspec. cc @Eilon @livarcocc \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/53213059-4e1c0280-35fc-11e9-9591-32f81f33502c.png)\r\n"},{"Id":"9127126545","Type":"PullRequestEvent","CreatedAt":"2019-02-25T02:30:21","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Merged pull request \"Merge release/3.0.1xx to master\" (#2987) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9126750096","Type":"PullRequestEvent","CreatedAt":"2019-02-25T00:01:20","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to master\" (#2987) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9126483027","Type":"PullRequestEvent","CreatedAt":"2019-02-24T21:53:25","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Merged pull request \"Mark implicit platforms package reference as PrivateAssets\" (#2986) at dotnet/sdk","RelatedBody":"Fixes #2976"},{"Id":"9126038848","Type":"IssuesEvent","CreatedAt":"2019-02-24T18:29:59","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2982","RelatedDescription":"Closed issue \"donet publish always publishes web.Release.config\" (#2982) at dotnet/sdk","RelatedBody":"When you run dotnet publish command for a Microsoft.NET.Sdk.Web project targeting **net462**, the tool always publishes web.*.config files (web.debug.config and web.release.config in addition to the transformed web.config).\r\n\r\nProject file (.csproj):\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <ProductVersion>8.0.30703</ProductVersion>\r\n    <ProjectGuid>{842f247f-8658-4b47-b9cf-5582f7c1e26e}</ProjectGuid>\r\n    <RootNamespace>Service</RootNamespace>\r\n    <AssemblyName>Service</AssemblyName>\r\n    <TargetFramework>net462</TargetFramework>\r\n    <AssemblyTitle>Service</AssemblyTitle>\r\n    <OutputPath>bin\\$(Configuration)\\</OutputPath>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.configuration\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n    <Reference Include=\"System\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n## Steps to reproduce\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `dotnet publish /p:Configuration=Release`\r\n\r\nor\r\n\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `msbuild Service.csproj /p:DeployOnBuild=true /p:Configuration=Release /p:PublishProfile=FolderProfile`\r\n\r\n## Expected behavior\r\nThere is only transformed web.config file in the publish folder.\r\n\r\n## Actual behavior\r\nweb.config, web.release.config, web.debug.config files are in the publish folder.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]"},{"Id":"9126037220","Type":"IssuesEvent","CreatedAt":"2019-02-24T18:29:13","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2981","RelatedDescription":"Closed issue \"Error on implementing custom FileProvider - Cannot find compilation library location for package 'projectCLB'\" (#2981) at dotnet/sdk","RelatedBody":"So, I am designing a very customized solution from scratch wherein I have asp.net mvc core app as the main web app. Then I create separate class libraries and update the SDK to Microsoft.NET.Sdk.Razor and use:\r\n    `<PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />`\r\nThis allows me to create MVC type class library, lets say \"projectCLB\" and then at startup I scan the folder that is located outside of the project main directory and load the assemblies for my project:\r\nprojectCLB.dll\r\nprojectCLB.Views.dll\r\n\r\nThis was working fine by the following code:\r\n`\r\n```\r\nAssembly assembly;\r\n                try\r\n                {\r\n                    assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(file.FullName);\r\n                }\r\n                catch (FileLoadException ex)\r\n                {\r\n                    // If assembly is already loaded, we'll just catch it and continue to the next one, plugins can have same dependencies:\r\n                    if (ex.Message == \"Assembly with same name is already loaded\")\r\n                    {\r\n                        continue;\r\n                    }\r\n                    throw;\r\n                }\r\n\r\n// Check if the assembly has already been loaded:\r\n                if (!(mvcBuilder.PartManager.ApplicationParts.Any(x => x.Name == assembly.GetName().Name)))\r\n                {\r\n                    //Load the pre-compiled Views:\r\n                    if (assembly.ManifestModule.Name.Contains(\".Views.dll\"))\r\n                    {\r\n                        mvcBuilder.ConfigureApplicationPartManager(mgr =>\r\n                        {\r\n                            foreach (var b in CompiledRazorAssemblyApplicationPartFactory.GetDefaultApplicationParts(assembly))\r\n                            {\r\n                                mvcBuilder.ConfigureApplicationPartManager(apm => apm.ApplicationParts.Add(b));\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n                    // Load the plug in assemblies:\r\n                    else\r\n                    {\r\n                        \r\n                        mvcBuilder.AddApplicationPart(assembly);\r\n                     \r\n                       \r\n\r\n                    }\r\n\r\n                }\r\n```\r\n`\r\n\r\n\r\nThis is how my class library project file looks:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\r\n\r\n\r\n  <PropertyGroup Label=\"Globals\">\r\n    <SccProjectName>SAK</SccProjectName>\r\n    <SccProvider>SAK</SccProvider>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccLocalPath>SAK</SccLocalPath>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    \r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    \r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"Content\\\" />\r\n    <Folder Include=\"Infrastructure\\Data\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n\r\n    <ProjectReference Include=\"..\\..\\<baseapp project>.Common\\baseapp project.Common.csproj\" />\r\n\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Data\\baseapp project.Data.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Repositories\\baseapp project.Repositories.csproj\" />\r\n  </ItemGroup>\r\n  <Target Name=\"UpdateTargetPath\" BeforeTargets=\"AssignRazorGenerateTargetPaths\">\r\n    <ItemGroup>\r\n      <RazorGenerate Include=\"@(RazorGenerate)\" Link=\"$(TargetName)\\plugin\\%(RazorGenerate.RelativeDir)%(RazorGenerate.FileName)%(RazorGenerate.Extension)\" />\r\n\r\n    </ItemGroup>\r\n  </Target>\r\n \r\n\r\n</Project>\r\n\r\n```\r\n\r\nIt was working all fine until I implemented a File Provider so that we can use cshtml files at development time instead of precompiled views since I was having to copy the dlls/ rebuild after a cshtml change. \r\nReason being that PhysicalFileProvider doesn't look outside of the webroot. Now I get this error and there are other posts that I saw but none of the workarounds actually work for me.\r\n\r\n\r\n`System.InvalidOperationException: Cannot find compilation library location for package 'projectCLB'\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n   at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.LazyMetadataReferenceFeature.get_References()\r\n   at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)`"},{"Id":"9125849129","Type":"PullRequestEvent","CreatedAt":"2019-02-24T17:01:38","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Opened pull request \"Mark implicit platforms package reference as PrivateAssets\" (#2986) at dotnet/sdk","RelatedBody":"Fixes #2976"},{"Id":"9125346830","Type":"PullRequestEvent","CreatedAt":"2019-02-24T13:01:02","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2985","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#2985) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19123.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"413907333","IsPullRequest":false,"CreatedAt":"2019-02-25T02:31:47","Actor":"VincentBu","Number":"22827","RawContent":null,"Title":"[arm64] System.TypeLoadException","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x10_tst/23/\r\n\r\n**Log:**\r\n```\r\nDiscovering: System.Diagnostics.EventLog.Tests (method display = ClassAndMethod, method display options = None)\r\nSystem.TypeLoadException: Could not load type 'System.Diagnostics.Tests.Helpers' from assembly 'System.Diagnostics.EventLog.Tests, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22827","RelatedDescription":"Open issue \"[arm64] System.TypeLoadException\" (#22827)"},{"Id":"413903116","IsPullRequest":false,"CreatedAt":"2019-02-25T02:07:42","Actor":"VincentBu","Number":"22826","RawContent":null,"Title":"[arm64] Test failed: tracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0xc_minopts_heapverify1_tst/53/\r\n\r\n**Failed tests:**\r\ntracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd\r\n\r\n**Log:**\r\n```\r\ntracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd [FAIL]\r\n        \r\n  Unhandled Exception: System.InvalidOperationException: Bad PE Header.\r\n           at PEFile.PEHeader..ctor(Void* startOfPEFile)\r\n           at PEFile.PEFile..ctor(String filePath)\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventProviderOptions.get_FilteringSupported()\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(Guid providerGuid, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n           at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n           at Tracing.Tests.EventPipeAndEtw.EnableETW(EventSource eventSource, EventKeywords keywords, String outputFile) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 116\r\n           at Tracing.Tests.EventPipeAndEtw.RoundOne(String[] args) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 148\r\n           at Tracing.Tests.EventPipeAndEtw.Main(String[] args) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\tracing\\eventsource\\eventpipeandetw\\EventPipeAndEtw.cs:line 290\r\n  \r\n  Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22826","RelatedDescription":"Open issue \"[arm64] Test failed: tracing_eventsource._eventpipeandetw_eventpipeandetw_eventpipeandetw_._eventpipeandetw_eventpipeandetw_eventpipeandetw_cmd\" (#22826)"},{"Id":"413902582","IsPullRequest":true,"CreatedAt":"2019-02-25T02:03:43","Actor":"stephentoub","Number":"22825","RawContent":null,"Title":"Special-case 1 module per assembly in Assembly.GetTypes/DefinedTypes","State":"open","Body":"It's very common for an assembly to have only one module, in which case we can avoid unnecessary allocations and copies in Assembly.GetTypes() and Assembly.DefinedTypes.\r\n\r\nBefore\r\n```\r\n       Method |      Mean |     Error |    StdDev | Gen 0/1k Op | Allocated Memory/Op |\r\n------------- |----------:|----------:|----------:|------------:|--------------------:|\r\n     GetTypes |  93.62 us | 0.6061 us | 0.5373 us |     14.4043 |            59.03 KB |\r\n DefinedTypes | 114.03 us | 1.1998 us | 1.0019 us |     21.6064 |            88.55 KB |\r\n```\r\n\r\nAfter\r\n```\r\n       Method |      Mean |     Error |    StdDev | Gen 0/1k Op | Allocated Memory/Op |\r\n------------- |----------:|----------:|----------:|------------:|--------------------:|\r\n     GetTypes |  90.07 us | 1.7718 us | 1.8958 us |      7.2021 |            29.55 KB |\r\n DefinedTypes | 106.83 us | 0.8118 us | 0.6779 us |      7.2021 |            29.73 KB |\r\n```\r\n\r\nBenchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.Collections;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Reflection;\r\n\r\n[InProcess]\r\n[MemoryDiagnoser]\r\npublic class Test\r\n{\r\n    public static void Main() => BenchmarkRunner.Run<Test>();\r\n\r\n    private static readonly Assembly[] s_assemblies = new[]\r\n    {\r\n        typeof(object).Assembly,\r\n        typeof(HttpClient).Assembly,\r\n        typeof(Socket).Assembly,\r\n        typeof(BitArray).Assembly,\r\n        typeof(File).Assembly,\r\n        typeof(InProcessAttribute).Assembly\r\n    };\r\n\r\n    [Benchmark]\r\n    public int GetTypes()\r\n    {\r\n        int count = 0;\r\n        foreach (Assembly asm in s_assemblies) count += asm.GetTypes().Length;\r\n        return count;\r\n    }\r\n\r\n    [Benchmark]\r\n    public int DefinedTypes()\r\n    {\r\n        int count = 0;\r\n        foreach (Assembly asm in s_assemblies)\r\n            foreach (TypeInfo ti in asm.DefinedTypes)\r\n                count++;\r\n        return count;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/pull/22825","RelatedDescription":"Open PR \"Special-case 1 module per assembly in Assembly.GetTypes/DefinedTypes\" (#22825)"},{"Id":"413902477","IsPullRequest":false,"CreatedAt":"2019-02-25T02:03:02","Actor":"VincentBu","Number":"22824","RawContent":null,"Title":"Assertion failed 'featureSIMD' ","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_jitnosimd_tst/59/\r\n\r\n**Failed tests:**\r\nbaseservices_compilerservices._modulector_runmoduleconstructor_runmoduleconstructor_._modulector_runmoduleconstructor_runmoduleconstructor_cmd\r\n\r\n**Log:**\r\n```\r\nbaseservices_compilerservices._modulector_runmoduleconstructor_runmoduleconstructor_._modulector_runmoduleconstructor_runmoduleconstructor_cmd [FAIL]\r\n        \r\n        Assert failure(PID 12496 [0x000030d0], Thread: 7956 [0x1f14]): Assertion failed 'featureSIMD' in 'System.SpanHelpers:IndexOf(byref,ubyte,int):int' (IL size 1166)\r\n        \r\n            File: d:\\j\\workspace\\arm64_cross_c---0aaef436\\src\\jit\\simd.cpp Line: 124\r\n            Image: C:\\j\\workspace\\arm64_cross_c---5ab754b1\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n  Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22824","RelatedDescription":"Open issue \"Assertion failed 'featureSIMD' \" (#22824)"},{"Id":"413901930","IsPullRequest":false,"CreatedAt":"2019-02-25T01:59:38","Actor":"AriNuer","Number":"22823","RawContent":null,"Title":"[arm64\\linux] error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8)","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline/151/\r\n\r\n**Failed log:**\r\n```\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/tempHome/.nuget/packages/microsoft.dotnet.arcade.sdk/1.0.0-beta.19121.4/tools/Tools.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\nbash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\n/bin/bash : error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Native/build-native.proj]\r\n    0 Warning(s)\r\n    5 Error(s)\r\n\r\nTime Elapsed 00:09:11.12\r\nBuild failed (exit code '1').\r\n[/mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/tests/scripts/run-corefx-tests.py]: Error: exit code 256\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22823","RelatedDescription":"Open issue \"[arm64\\linux] error : setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\" (#22823)"},{"Id":"413882672","IsPullRequest":true,"CreatedAt":"2019-02-24T23:26:04","Actor":"marek-safar","Number":"22822","RawContent":null,"Title":"Yield Assembly::DefinedTypes without additional array cache","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22822","RelatedDescription":"Open PR \"Yield Assembly::DefinedTypes without additional array cache\" (#22822)"},{"Id":"413867059","IsPullRequest":true,"CreatedAt":"2019-02-24T20:56:10","Actor":"am11","Number":"22821","RawContent":null,"Title":"Fix comparison and narrowing errors reported by GCC","State":"open","Body":"Contributes to: #22684","Url":"https://github.com/dotnet/coreclr/pull/22821","RelatedDescription":"Open PR \"Fix comparison and narrowing errors reported by GCC\" (#22821)"},{"Id":"413836649","IsPullRequest":false,"CreatedAt":"2019-02-24T16:00:07","Actor":"ayende","Number":"22820","RawContent":null,"Title":"Access Violation on x86","State":"open","Body":"We have a scenario in which we are getting an access violation exception during a particular load in our system.\r\nI have a full dump of the process when the crash happened, available here:\r\nhttps://drive.google.com/file/d/11oqZaegxKcoNT8Xj1u9YDIcH7LcmMBsW/view?usp=sharing\r\n\r\nThe scenario we have is a few servers running and communicating with one another on the same process.\r\nThis is part of our test setup. We recently started seeing hard failures, such as this one: `(d2c.3390): Access violation - code c0000005 (first chance)`\r\n\r\nThe event log reports:\r\n\r\n```\r\nApplication: dotnet.exe\r\nCoreCLR Version: 4.6.27317.3\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 5A29AA9B (5A230000) with exit code 80131506.\r\n\r\n\r\nFaulting application name: dotnet.exe, version: 2.1.27130.1, time stamp: 0x5c007ea0\r\nFaulting module name: coreclr.dll, version: 4.6.27317.3, time stamp: 0x5c40c18e\r\nException code: 0xc0000005\r\nFault offset: 0x0006aa9b\r\nFaulting process id: 0x52d4\r\nFaulting application start time: 0x01d4cc3f7d83fa59\r\nFaulting application path: C:\\Program Files (x86)\\dotnet\\dotnet.exe\r\nFaulting module path: C:\\Users\\ayende\\.nuget\\packages\\runtime.win-x86.microsoft.netcore.app\\2.1.8\\runtimes\\win-x86\\native\\coreclr.dll\r\nReport Id: ff99edfe-baf1-431a-9ce3-06e987219e6c\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\nThis machine has the following hot fixes applies:\r\n\r\n```\r\nPS C:\\Windows\\SysWOW64> Get-HotFix\r\n\r\nSource        Description      HotFixID      InstalledBy          InstalledOn\r\n------        -----------      --------      -----------          -----------\r\nOREN-PC       Update           KB4100347     NT AUTHORITY\\SYSTEM  2/18/2019 12:00:00 AM\r\nOREN-PC       Update           KB4343669     NT AUTHORITY\\SYSTEM  7/11/2018 12:00:00 AM\r\nOREN-PC       Update           KB4456655     NT AUTHORITY\\SYSTEM  9/13/2018 12:00:00 AM\r\nOREN-PC       Security Update  KB4465663     NT AUTHORITY\\SYSTEM  11/14/2018 12:00:00 AM\r\nOREN-PC       Security Update  KB4471331     NT AUTHORITY\\SYSTEM  12/6/2018 12:00:00 AM\r\nOREN-PC       Security Update  KB4477137     NT AUTHORITY\\SYSTEM  12/12/2018 12:00:00 AM\r\nOREN-PC       Security Update  KB4480979     NT AUTHORITY\\SYSTEM  1/9/2019 12:00:00 AM\r\nOREN-PC       Security Update  KB4485449     NT AUTHORITY\\SYSTEM  2/19/2019 12:00:00 AM\r\nOREN-PC       Security Update  KB4487038     NT AUTHORITY\\SYSTEM  2/19/2019 12:00:00 AM\r\nOREN-PC       Security Update  KB4480966     HRHINOS\\Ayende       2/21/2019 12:00:00 AM\r\nOREN-PC       Security Update  KB4487017\r\n```\r\n\r\nThe actual stack we are seeing is always something similar to:\r\n\r\n```\r\n0:043> kp\r\n # ChildEBP RetAddr  \r\n00 (Inline) -------- coreclr!VolatileLoad+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\volatile.h @ 153] \r\n01 (Inline) -------- coreclr!Volatile<unsigned long>::Load+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\volatile.h @ 292] \r\n02 (Inline) -------- coreclr!Volatile<unsigned long>::operator unsigned long+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\volatile.h @ 346] \r\n03 (Inline) -------- coreclr!RelativePointer<Module *>::GetValue+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\fixuppointer.h @ 68] \r\n04 (Inline) -------- coreclr!RelativePointer<Module *>::GetValueAtPtr+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\fixuppointer.h @ 85] \r\n05 (Inline) -------- coreclr!ReadPointer+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\fixuppointer.h @ 954] \r\n06 (Inline) -------- coreclr!ReadPointer+0x3 [e:\\a\\_work\\335\\s\\src\\inc\\fixuppointer.h @ 954] \r\n07 (Inline) -------- coreclr!MethodTable::GetLoaderModule+0x3 [e:\\a\\_work\\335\\s\\src\\vm\\methodtable.inl @ 176] \r\n08 (Inline) -------- coreclr!MethodTable::GetLoaderAllocator+0x3 [e:\\a\\_work\\335\\s\\src\\vm\\methodtable.inl @ 182] \r\n09 0e60d0a0 5a299c42 coreclr!VirtualCallStubManager::ResolveWorker(struct StubCallSite * pCallSite = 0x0e60d13c, class Object ** protectedObj = 0x0e60d180, struct DispatchToken token = struct DispatchToken, VirtualCallStubManager::StubKind stubKind = SK_DISPATCH (0n2))+0x6b [e:\\a\\_work\\335\\s\\src\\vm\\virtualcallstub.cpp @ 1719] \r\n0a 0e60d168 5a34a26b coreclr!VSD_ResolveWorker(struct TransitionBlock * pTransitionBlock = 0x0e60d17c, unsigned long siteAddrForRegisterIndirect = 0, unsigned int token = 0xa0000)+0x24f [e:\\a\\_work\\335\\s\\src\\vm\\virtualcallstub.cpp @ 1611] \r\n0b 0e60d190 0e995fca coreclr!ResolveWorkerAsmStub(void)+0x1b [e:\\a\\_work\\335\\s\\src\\vm\\i386\\virtualcallstubcpu.hpp @ 525] \r\nWARNING: Frame IP not in any known module. Following frames may be wrong.\r\n0c 0e60d194 5a33afeb 0xe995fca\r\n0d 0e60d1a8 5a47fc7f coreclr!CallJitEHFinallyHelper(void)+0x28 [E:\\A\\_work\\335\\s\\src\\vm\\i386\\asmhelpers.asm @ 390] \r\n0e 0e60d200 5a3a2acc coreclr!CallJitEHFinally(class CrawlFrame * pCf = 0x43a07fdc, unsigned char * startPC = <Value unavailable error>, struct EE_ILEXCEPTION_CLAUSE * EHClausePtr = 0x0e60d260, unsigned long nestingLevel = 0)+0xb8 [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 3385] \r\n0f 0e60d2d0 5a249cf5 coreclr!COMPlusUnwindCallback+0x15a70c [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 2996] \r\n10 (Inline) -------- coreclr!Thread::MakeStackwalkerCallback+0x151 [e:\\a\\_work\\335\\s\\src\\vm\\stackwalk.cpp @ 877] \r\n11 0e60d59c 5a2525c1 coreclr!Thread::StackWalkFramesEx(struct REGDISPLAY * pRD = 0x0e60d5c8, <function> * pCallback = 0x0ddb401c, void * pData = 0x0e60d954, unsigned int flags = 4, class Frame * pStartFrame = 0x00000000)+0x1d4 [e:\\a\\_work\\335\\s\\src\\vm\\stackwalk.cpp @ 958] \r\n12 0e60d8d0 5a251f60 coreclr!Thread::StackWalkFrames(<function> * pCallback = 0x5a2483c0, void * pData = 0x0e60d954, unsigned int flags = 4, class Frame * pStartFrame = 0x00000000)+0xa1 [e:\\a\\_work\\335\\s\\src\\vm\\stackwalk.cpp @ 1042] \r\n13 0e60d8f0 5a252a52 coreclr!UnwindFrames(class Thread * pThread = 0x0ddb3ea8, struct ThrowCallbackType * tct = 0x0e60d954)+0x3e [e:\\a\\_work\\335\\s\\src\\vm\\excep.cpp @ 2228] \r\n14 (Inline) -------- coreclr!COMPlusAfterUnwind+0x98 [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 482] \r\n15 0e60db48 5a2512fa coreclr!CPFH_RealFirstPassHandler(struct _EXCEPTION_RECORD * pExceptionRecord = 0x0e60dcb0, struct _EXCEPTION_REGISTRATION_RECORD * pEstablisherFrame = <Value unavailable error>, struct _CONTEXT * pContext = 0x0e60dd00, int bAsynchronousThreadStop = 0n0)+0x459 [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 1263] \r\n16 0e60db88 5a250ef3 coreclr!CPFH_FirstPassHandler(struct _EXCEPTION_RECORD * pExceptionRecord = 0x0e60dcb0, struct _EXCEPTION_REGISTRATION_RECORD * pEstablisherFrame = 0x0e60e650, struct _CONTEXT * pContext = 0x0e60dd00)+0xc3 [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 1401] \r\n17 0e60dbac 7772f1a2 coreclr!COMPlusFrameHandler(struct _EXCEPTION_RECORD * pExceptionRecord = 0x0e60dcb0, struct _EXCEPTION_REGISTRATION_RECORD * pEstablisherFrame = 0x0e60e650, struct _CONTEXT * pContext = 0x0e60dd00, struct _DISPATCHER_CONTEXT * pDispatcherContext = 0x0e60dc38)+0x83 [e:\\a\\_work\\335\\s\\src\\vm\\i386\\excepx86.cpp @ 1821] \r\n18 0e60dbd0 7772f174 ntdll!ExecuteHandler2+0x26\r\n19 0e60dc98 7771cd86 ntdll!ExecuteHandler+0x24\r\n1a 0e60dc98 76f21812 ntdll!KiUserExceptionDispatcher+0x26\r\n1b 0e60e1bc 5a252d94 KERNELBASE!RaiseException+0x62\r\n1c 0e60e264 5a3248fb coreclr!RaiseTheExceptionInternalOnly(class Object * throwable = <Value unavailable error>, int rethrow = <Value unavailable error>, int fForStackOverflow = 0n0)+0x11d [e:\\a\\_work\\335\\s\\src\\vm\\excep.cpp @ 3039] \r\n1d 0e60e32c 2ed2b3e4 coreclr!IL_Throw(class Object * obj = <Value unavailable error>)+0x11b [e:\\a\\_work\\335\\s\\src\\vm\\jithelpers.cpp @ 4860] \r\n1e 0e60e33c 0e3bd604 0x2ed2b3e4\r\n1f 0e60e354 0e99a747 0xe3bd604\r\n20 0e60e384 0e999f92 0xe99a747\r\n21 0e60e3b0 0eecd3c9 0xe999f92\r\n22 0e60e400 0e995ad1 0xeecd3c9\r\n23 0e60e578 0e9934e6 0xe995ad1\r\n24 0e60e5b0 0c3c7770 0xe9934e6\r\n25 0e60e5d8 593868dd 0xc3c7770\r\n26 0e60e5f4 59cfa31d System_Threading_Thread+0x68dd\r\n27 0e60e624 59cfc0cc System_Private_CoreLib+0x4ca31d\r\n28 0e60e638 5a33b0ef System_Private_CoreLib+0x4cc0cc\r\n29 0e60e644 5a26fbf1 coreclr!CallDescrWorkerInternal(unsigned long pParams = 0xe60e6b8)+0x34 [E:\\A\\_work\\335\\s\\src\\vm\\i386\\asmhelpers.asm @ 618] \r\n2a (Inline) -------- coreclr!CallDescrWorkerWithHandler+0x52 [e:\\a\\_work\\335\\s\\src\\vm\\callhelpers.cpp @ 78] \r\n2b 0e60e6e4 5a32d4e4 coreclr!MethodDescCallSite::CallTargetWorker(unsigned int64 * pArguments = 0x0e60e730, unsigned int64 * pReturnValue = 0x00000000, int cbReturnValue = 0n0)+0x235 [e:\\a\\_work\\335\\s\\src\\vm\\callhelpers.cpp @ 620] \r\n2c 0e60e7bc 5a342b06 coreclr!ThreadNative::KickOffThread_Worker(void * ptr = 0x0e60e948)+0x104 [e:\\a\\_work\\335\\s\\src\\vm\\comsynchronizable.cpp @ 260] \r\n2d 0e60e7d4 5a26f86a coreclr!ManagedThreadBase_DispatchInner(struct ManagedThreadCallState * pCallState = <Value unavailable error>)+0x70 [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 8852] \r\n2e 0e60e880 5a26f7bb coreclr!ManagedThreadBase_DispatchMiddle(struct ManagedThreadCallState * pCallState = <Value unavailable error>)+0x65 [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 8902] \r\n2f 0e60e8e4 5a3352b9 coreclr!ManagedThreadBase_DispatchOuter(struct ManagedThreadCallState * pCallState = 0x0e60e8ec)+0x78 [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 9161] \r\n30 0e60e908 5a2d9e7c coreclr!ManagedThreadBase_FullTransitionWithAD(struct ADID pAppDomain = struct ADID, <function> * pTarget = <Value unavailable error>, void * args = <Value unavailable error>, UnhandledExceptionLocation filterType = ManagedThread (0n2))+0x2f [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 9200] \r\n31 (Inline) -------- coreclr!ManagedThreadBase::KickOff+0x15 [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 9234] \r\n32 0e60e984 5a2d9d90 coreclr!ThreadNative::KickOffThread(void * pass = 0x0ad364d0)+0xcc [e:\\a\\_work\\335\\s\\src\\vm\\comsynchronizable.cpp @ 380] \r\n33 0e60f824 76388484 coreclr!Thread::intermediateThreadProc(void * arg = 0x0abac020)+0x50 [e:\\a\\_work\\335\\s\\src\\vm\\threads.cpp @ 2255] \r\n34 0e60f838 77713ab8 KERNEL32!BaseThreadInitThunk+0x24\r\n35 0e60f880 77713a88 ntdll!__RtlUserThreadStart+0x2f\r\n36 0e60f890 00000000 ntdll!_RtlUserThreadStart+0x1b\r\n```\r\n\r\nThe managed stack, FWIW, is:\r\n\r\n```\r\n0:043> !clrstack\r\nOS Thread Id: 0x3390 (43)\r\nChild SP       IP Call Site\r\n0e60d0d8 5a29aa9b [GCFrame: 0e60d0d8] \r\n0e60d118 5a29aa9b [StubDispatchFrame: 0e60d118] System.IDisposable.Dispose()\r\n0e60d198 0e995fca Raven.Server.Rachis.FollowerAmbassador.Run()\r\n0e60e580 0e9934e6 Raven.Server.Rachis.FollowerAmbassador.b__58_0(System.Object)\r\n0e60e584 0c3c8000 Raven.Server.Utils.PoolOfThreads+PooledThread.DoWork()\r\n0e60e5b8 0c3c7770 Raven.Server.Utils.PoolOfThreads+PooledThread.Run()\r\n0e60e5e0 593868dd System.Threading.Thread.ThreadMain_ThreadStart() [E:\\A\\_work\\321\\s\\corefx\\src\\System.Threading.Thread\\src\\System\\Threading\\Thread.cs @ 93]\r\n0e60e5e8 59cfc00c System.Threading.ThreadHelper.ThreadStart_Context(System.Object) [E:\\A\\_work\\335\\s\\src\\mscorlib\\src\\System\\Threading\\Thread.cs @ 62]\r\n0e60e5fc 59cfa31d System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [E:\\A\\_work\\335\\s\\src\\mscorlib\\shared\\System\\Threading\\ExecutionContext.cs @ 167]\r\n0e60e630 59cfc0cc System.Threading.ThreadHelper.ThreadStart() [E:\\A\\_work\\335\\s\\src\\mscorlib\\src\\System\\Threading\\Thread.cs @ 91]\r\n0e60e718 5a33b0ef [GCFrame: 0e60e718] \r\n0e60e8a8 5a33b0ef [DebuggerU2MCatchHandlerFrame: 0e60e8a8] \r\n```\r\n\r\nWe are using unsafe code, but we are pretty sure that we aren't corrupting the heap in any manner (lots of tests cover that) and if we were, I would expect to see the failure in different locations.\r\n\r\nFrom trying to figure out what is going on, a few really strange things seem to be happening here:\r\n\r\nHere is the actual failure:\r\n\r\n```\r\nFAULTING_IP: \r\nKERNELBASE!RaiseException+62\r\n76f21812 8b4c2454        mov     ecx,dword ptr [esp+54h]\r\n```\r\n\r\nAnd the full register usage is:\r\n\r\n```\r\n(d2c.3390): Access violation - code c0000005 (first chance)\r\nFirst chance exceptions are reported before any exception handling.\r\nThis exception may be expected and handled.\r\neax=00000000 ebx=00e527a0 ecx=00000010 edx=15554140 esi=5a339280 edi=00e527a0\r\neip=5a29aa9b esp=0e60ce44 ebp=0e60d0a0 iopl=0         nv up ei pl zr na pe nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\r\n```\r\n\r\nAs you can see, the `esp` value has a non null value, but checking the memory location with the offset provided to the instruction shows just zeros.\r\n\r\nWhile troubleshooting this, we found a `NullReferenceException` in our code. We fixed it, but that made the problem go away. \r\nWe suspect that this is some issue related to error handling inside the CoreCLR during JIT generation.\r\nWe have run into a different issue with KB4487017 (See: https://github.com/dotnet/coreclr/issues/22597), but we are reproducing this on different versions of Windows and without the KB in question.\r\n\r\nWe aren't able to reproduce this issue in 64 bits.\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/22820","RelatedDescription":"Open issue \"Access Violation on x86\" (#22820)"},{"Id":"413824554","IsPullRequest":true,"CreatedAt":"2019-02-24T13:54:26","Actor":"dotnet-maestro[bot]","Number":"22819","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview4-27423-3\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22819","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#22819)"},{"Id":"413821311","IsPullRequest":true,"CreatedAt":"2019-02-24T13:24:36","Actor":"dotnet-maestro[bot]","Number":"22818","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22818","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#22818)"},{"Id":"413795585","IsPullRequest":true,"CreatedAt":"2019-02-24T08:21:13","Actor":"marek-safar","Number":"22817","RawContent":null,"Title":"Move more Assembly methods to shared partition","State":"open","Body":"also avoids double caching in ` Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore)`","Url":"https://github.com/dotnet/coreclr/pull/22817","RelatedDescription":"Open PR \"Move more Assembly methods to shared partition\" (#22817)"},{"Id":"413741770","IsPullRequest":true,"CreatedAt":"2019-02-23T21:20:53","Actor":"GrabYourPitchforks","Number":"22816","RawContent":null,"Title":"Improve performance of Marvin32","State":"open","Body":"This PR improves the performance of Marvin32 (`String.GetHashCode` and friends). The most significant advantages are for small inputs, but large inputs also see an improvement due to some minor tightening of the innermost loop in the routine.\r\n\r\nThe method has detailed comments explaining control flow and various optimizations that were performed, especially as they relate to the tight inner loop.\r\n\r\nBenchmark results are provided below, as is the benchmark test code. In a nutshell, a large array of strings is created with each string having a length randomly chosen from within the _InputLength_ range. The benchmark iterates over this array and calls `GetHashCode` on each string instance. The benchmark is written this way to be more representative of real-world conditions, whereas a more conventional benchmark would prime the branch predictor to expect inputs always of a certain length.\r\n\r\nThe input lengths were chosen to be representative of various categories of real-world inputs: `0 .. 8` to represent filenames, keywords, and other small identifiers; `6 .. 24` to represent usernames and email addresses; `20 .. 96` to represent GUIDs and URLs; and `64 .. 256` to be a catch-all for larger input.\r\n\r\n|            Method | Toolchain | InputLength |       Mean |     Error |    StdDev |     Median | Ratio | RatioSD |\r\n|------------------ |---------- |------------ |-----------:|----------:|----------:|-----------:|------:|--------:|\r\n| **StringGetHashcode** |  **baseline** |       **0 - 8** |   **729.2 us** | **12.703 us** | **11.883 us** |   **730.6 us** |  **1.00** |    **0.00** |\r\n| StringGetHashcode |  modified |       0 - 8 |   610.1 us |  8.423 us |  7.879 us |   606.7 us |  0.84 |    0.02 |\r\n|                   |           |             |            |           |           |            |       |         |\r\n| **StringGetHashcode** |  **baseline** |      **6 - 24** |   **982.7 us** |  **8.118 us** |  **7.196 us** |   **982.3 us** |  **1.00** |    **0.00** |\r\n| StringGetHashcode |  modified |      6 - 24 |   830.4 us |  7.423 us |  6.580 us |   830.2 us |  0.85 |    0.01 |\r\n|                   |           |             |            |           |           |            |       |         |\r\n| **StringGetHashcode** |  **baseline** |     **20 - 96** | **2,629.6 us** | **55.359 us** | **84.539 us** | **2,587.3 us** |  **1.00** |    **0.00** |\r\n| StringGetHashcode |  modified |     20 - 96 | 2,425.9 us | 29.657 us | 27.741 us | 2,420.3 us |  0.90 |    0.03 |\r\n|                   |           |             |            |           |           |            |       |         |\r\n| **StringGetHashcode** |  **baseline** |    **64 - 256** | **6,308.4 us** | **59.380 us** | **52.639 us** | **6,300.4 us** |  **1.00** |    **0.00** |\r\n| StringGetHashcode |  modified |    64 - 256 | 6,188.0 us | 45.678 us | 40.493 us | 6,174.3 us |  0.98 |    0.01 |\r\n\r\n```cs\r\n[Params(\"0 - 8\", \"6 - 24\", \"20 - 96\", \"64 - 256\")]\r\npublic string InputLength;\r\n\r\nprivate string[] _strings;\r\n\r\n[GlobalSetup]\r\npublic void Setup()\r\n{\r\n    Random r = new Random(0x12345);\r\n\r\n    string[] inputLengths = InputLength.Split(\" - \");\r\n    int minInclusive = int.Parse(inputLengths[0]);\r\n    int maxExclusive = int.Parse(inputLengths[1]) + 1;\r\n\r\n    string[] strings = new string[50_000];\r\n    for (int i = 0; i < strings.Length; i++)\r\n    {\r\n        strings[i] = new string('\\u1234', r.Next(minInclusive, maxExclusive));\r\n    }\r\n\r\n    _strings = strings;\r\n}\r\n\r\n[Benchmark]\r\npublic int StringGetHashcode()\r\n{\r\n    int retVal = default;\r\n\r\n    string[] strings = _strings;\r\n    for (int i = 0; i < strings.Length; i++)\r\n    {\r\n        retVal ^= strings[i].GetHashCode();\r\n    }\r\n\r\n    return retVal;\r\n}\r\n```\r\n\r\n(For some reason I'm having trouble running automated tests on my machine. I ran the manual tests which I believe would cover any breaks here, and I saw nothing, but I'd like to see CI coverage of this change as well to ensure nothing regressed.)","Url":"https://github.com/dotnet/coreclr/pull/22816","RelatedDescription":"Open PR \"Improve performance of Marvin32\" (#22816)"},{"Id":"413733514","IsPullRequest":false,"CreatedAt":"2019-02-23T20:01:24","Actor":"benaadams","Number":"22815","RawContent":null,"Title":"BroadcastScalarToVector256(byte*) broadcasts not correct value?","State":"open","Body":"From https://twitter.com/HaroldAptroot/status/1099389327245828096\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n    Console.WriteLine(test(128));\r\n}\r\n\r\nstatic unsafe Vector256<byte> test(byte v)\r\n{\r\n    Vector256<byte> x = Avx2.BroadcastScalarToVector256(&v);\r\n    return x;\r\n}\r\n```\r\nOutputs for debug\r\n```\r\n<224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224>\r\n```\r\nOutputs for release\r\n```\r\n<32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32>\r\n```\r\nProduces the following asm\r\n```asm\r\n; Lcl frame size = 0\r\n\r\nG_M25726_IG01:\r\n       vzeroupper \r\n       nop      \r\n       mov      dword ptr [rsp+10H], edx\r\n\r\nG_M25726_IG02:\r\n       lea      rax, bword ptr [rsp+10H]\r\n       vpbroadcastb ymm0, yrax\r\n       vmovupd  ymmword ptr[rcx], ymm0\r\n       mov      rax, rcx\r\n\r\nG_M25726_IG03:\r\n       vzeroupper \r\n       ret      \r\n\r\n; Total bytes of code 30, prolog size 5 for method Program:test(ubyte):struct\r\n```\r\nIt inlines into the Main method producing the following asm\r\n```asm\r\n\r\nG_M42296_IG01:\r\n       sub      rsp, 88\r\n       vzeroupper \r\n       vmovaps  qword ptr [rsp+40H], xmm6\r\n       vmovaps  qword ptr [rsp+30H], xmm7\r\n\r\nG_M42296_IG02:\r\n       mov      dword ptr [rsp+2CH], 128\r\n       lea      rcx, bword ptr [rsp+2CH]\r\n       vpbroadcastb ymm6, yrcx\r\n       mov      rcx, 0xD1FFAB1E\r\n       vextractf128 ymm7, ymm6, 1\r\n       call     CORINFO_HELP_NEWSFAST\r\n       vinsertf128 ymm6, ymm7, 1\r\n       vmovupd  ymmword ptr[rax+8], ymm6\r\n       mov      rcx, rax\r\n       call     Console:WriteLine(ref)\r\n       nop      \r\n\r\nG_M42296_IG03:\r\n       vmovaps  xmm6, qword ptr [rsp+40H]\r\n       vmovaps  xmm7, qword ptr [rsp+30H]\r\n       vzeroupper \r\n       add      rsp, 88\r\n       ret      \r\n\r\n; Total bytes of code 98, prolog size 19 for method Program:Main()\r\n```\r\n\r\nContrast with\r\n```csharp\r\nstatic unsafe Vector256<byte> test(byte v)\r\n{\r\n    Vector256<byte> x = Vector256.Create(v);\r\n    return x;\r\n}\r\n```\r\nWhich produces\r\n```asm\r\nG_M25727_IG02:\r\n       movzx    rax, dl\r\n       vmovd    xmm0, eax\r\n       vpbroadcastb ymm0, ymm0\r\n       vmovupd  ymmword ptr[rcx], ymm0\r\n       mov      rax, rcx\r\n```\r\nAnd correctly outputs\r\n```\r\n<128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128>\r\n```\r\n\r\n/cc @tannergooding @fiigii ","Url":"https://github.com/dotnet/coreclr/issues/22815","RelatedDescription":"Open issue \"BroadcastScalarToVector256(byte*) broadcasts not correct value?\" (#22815)"},{"Id":"413722770","IsPullRequest":false,"CreatedAt":"2019-02-23T18:28:08","Actor":"Cyl18","Number":"22814","RawContent":null,"Title":"Using method overload with generic constraints","State":"open","Body":"Consider code here:\r\n```\r\npublic static TValue GetOrCreate<TKey, TValue>(this Dictionary<TKey, TValue> directory, TKey key) where TValue : class\r\n{\r\n    ...\r\n}\r\n        \r\npublic static TValue GetOrCreate<TKey, TValue>(this Dictionary<TKey, TValue> directory, TKey key) where TValue : struct\r\n{\r\n    ...\r\n}\r\n```\r\nIt just shows\r\n![ek p9t p_m4 a7ric77xaou](https://user-images.githubusercontent.com/14993992/53290208-c1c83600-37db-11e9-80f0-4cbe2f4e222b.png)\r\n","Url":"https://github.com/dotnet/coreclr/issues/22814","RelatedDescription":"Open issue \"Using method overload with generic constraints\" (#22814)"},{"Id":"413689534","IsPullRequest":false,"CreatedAt":"2019-02-23T12:44:28","Actor":"EgorBo","Number":"22813","RawContent":null,"Title":"Pclmulqdq.CarrylessMultiply bug?","State":"closed","Body":"I am trying to port the following C code to C#:\r\n```c\r\nuint64_t Test()\r\n{\r\n  __m128i a1 = _mm_set_epi64x(0ULL, 68);\r\n  __m128i a2 = _mm_set1_epi8(0xFF);\r\n  __m128i a3 = _mm_clmulepi64_si128(a1, a2, 0);\r\n  uint64_t quote_mask = _mm_cvtsi128_si64(a3);\r\n  return quote_mask;\r\n}\r\n```\r\nmy C# version:\r\n```csharp\r\nulong Test()\r\n{\r\n  Vector128<ulong> a1 = Vector128.Create(0UL, 68);\r\n  Vector128<ulong> a2 = Vector128.Create((byte)0xFF).AsUInt64();\r\n  Vector128<ulong> a3 = Pclmulqdq.CarrylessMultiply(a1, a2, 0);\r\n  ulong quote_mask = Sse2.X64.ConvertToUInt64(a3);\r\n  return quote_mask;\r\n}\r\n```\r\nboth `a1` and `a2` have exactly the same values (I compared UInt64 debug views)\r\nbut `a3` is `(60,60)` in C and `(0,0)` in C#\r\nam I doing something wrong or these instructions are not implemented yet?\r\n\r\ncc: @fiigii @tannergooding \r\nasm for C:\r\n```asm\r\n  mov eax, 68\r\n  vmovq xmm0, rax\r\n  vpcmpeqd xmm1, xmm1, xmm1\r\n  vpclmulqdq xmm0, xmm0, xmm1, 0\r\n  vmovq rax, xmm0\r\n  ret\r\n```\r\nasm for C#:\r\n```asm\r\n\r\nG_M158_IG01:\r\n       vzeroupper \r\n       nop      \r\n\r\nG_M158_IG02:\r\n       xor      rax, rax\r\n       vmovd    xmm0, rax\r\n       mov      eax, 68\r\n       vpinsrq  xmm0, xmm0, xrax, 1\r\n       mov      eax, 255\r\n       vmovd    xmm1, eax\r\n       vpbroadcastb xmm1, xmm1\r\n       vpclmulqdq xmm0, xmm0, xmm1, 0\r\n       vmovd    rax, xmm0\r\n\r\nG_M158_IG03:\r\n       ret      \r\n; Total bytes of code: 49\r\n```\r\n\r\n\r\nthe C snippet is from [lemire/simdjson](https://github.com/lemire/simdjson/issues/53 ) lib","Url":"https://github.com/dotnet/coreclr/issues/22813","RelatedDescription":"Closed issue \"Pclmulqdq.CarrylessMultiply bug?\" (#22813)"},{"Id":"413676987","IsPullRequest":false,"CreatedAt":"2019-02-23T09:24:37","Actor":"davidfowl","Number":"22812","RawContent":null,"Title":"Assembly.Load does not work in custom load context","State":"open","Body":"I have 2 applications, ConsoleApp25 and ConsoleApp1. ConsoleApp1 is the plugin loaded into ConsoleApp25. If ConsoleApp1 calls Assembly.Load, we never seem to call back into the custom load context, it just fails (likely because it's trying to use the default). I expect Assembly.Load to be equivalent to  `AssemblyLoadContext.GetLoadContext(Assembly.GetExecutingAssembly()).LoadFromAssemblyName` but it looks like that's not the case.\r\n\r\n**ConsoleApp25**\r\n\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nusing System.Reflection;\r\nusing System.Runtime.Loader;\r\n\r\nnamespace ConsoleApp25\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var context = new AppLoadContext(@\"..\\..\\..\\..\\ConsoleApp1\\bin\\Debug\\netcoreapp3.0\\ConsoleApp1.dll\");\r\n            var asm = context.LoadFromAssemblyName(new AssemblyName(\"ConsoleApp1\"));\r\n\r\n            var executeMethodInfo = asm.GetType(\"ConsoleApp1.Program\").GetMethod(\"Execute\", BindingFlags.Public | BindingFlags.Static);\r\n            var execute = (Action)Delegate.CreateDelegate(typeof(Action), executeMethodInfo);\r\n\r\n            execute();\r\n        }\r\n    }\r\n\r\n    internal class AppLoadContext : AssemblyLoadContext\r\n    {\r\n        private readonly AssemblyDependencyResolver _resolver;\r\n\r\n        public AppLoadContext(string path) :\r\n            base(isCollectible: true)\r\n        {\r\n            _resolver = new AssemblyDependencyResolver(path);\r\n        }\r\n\r\n        protected override Assembly Load(AssemblyName assemblyName)\r\n        {\r\n            var path = _resolver.ResolveAssemblyToPath(assemblyName);\r\n            if (path != null)\r\n            {\r\n                return LoadFromAssemblyPath(path);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        protected override IntPtr LoadUnmanagedDll(string unmanagedDllName)\r\n        {\r\n            var path = _resolver.ResolveUnmanagedDllToPath(unmanagedDllName);\r\n            if (path != null)\r\n            {\r\n                return LoadUnmanagedDllFromPath(path);\r\n            }\r\n\r\n            return IntPtr.Zero;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**ConsoleApp1**\r\n\r\n```C#\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Runtime.Loader;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n\r\n        public static void Execute()\r\n        {\r\n            var assemblyName = new AssemblyName(\"ConsoleApp1\");\r\n            var context1 = AssemblyLoadContext.GetLoadContext(Assembly.GetExecutingAssembly());\r\n            var context2 = AssemblyLoadContext.GetLoadContext(typeof(Program).Assembly);\r\n            var asm = context1.LoadFromAssemblyName(assemblyName);\r\n            asm = context2.LoadFromAssemblyName(assemblyName);\r\n\r\n            // BOOM\r\n            asm = Assembly.Load(assemblyName);\r\n        }\r\n    }\r\n}\r\n```\r\ncc @jkotas @vitek-karas ","Url":"https://github.com/dotnet/coreclr/issues/22812","RelatedDescription":"Open issue \"Assembly.Load does not work in custom load context\" (#22812)"},{"Id":"413644718","IsPullRequest":true,"CreatedAt":"2019-02-23T05:29:44","Actor":"Dotnet-GitSync-Bot","Number":"22808","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @ericstj","Url":"https://github.com/dotnet/coreclr/pull/22808","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#22808)"},{"Id":"413655622","IsPullRequest":true,"CreatedAt":"2019-02-23T04:31:50","Actor":"noahfalk","Number":"22811","RawContent":null,"Title":"Spec for EventCounter changes","State":"open","Body":"@jorive @sywhang @vancem - I wrote up what I think is the result of our recent design discussion. If I misremembered anything happy to take those changes now.\r\n\r\nIf you want to propose something different than what we had, I suggest we take this PR as-is and then whoever has the proposal can make another PR where we discuss the revision.","Url":"https://github.com/dotnet/coreclr/pull/22811","RelatedDescription":"Open PR \"Spec for EventCounter changes\" (#22811)"},{"Id":"413652099","IsPullRequest":true,"CreatedAt":"2019-02-23T03:44:08","Actor":"franksinankaya","Number":"22810","RawContent":null,"Title":"GCC compatibility fixes #7","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22810","RelatedDescription":"Open PR \"GCC compatibility fixes #7\" (#22810)"},{"Id":"413649197","IsPullRequest":true,"CreatedAt":"2019-02-23T03:11:33","Actor":"tannergooding","Number":"22809","RawContent":null,"Title":"Adding a missing single-quote","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22809","RelatedDescription":"Closed or merged PR \"Adding a missing single-quote\" (#22809)"},{"Id":"413637970","IsPullRequest":true,"CreatedAt":"2019-02-23T01:25:38","Actor":"josalem","Number":"22807","RawContent":null,"Title":"Make StackTrace Aware of Unloadability","State":"open","Body":"Adds collection of `Assembly` objects while walking the stack in `DebugStackTrace::GetStackFrameInternal`\r\n* new field in `StackFrameHelper` in both managed and native (plus mscorlib macro definition)\r\n* retrieved via `methodDesc->GetAssembly()->GetDomainAssembly()->GetExposedAssemblyObject()`\r\n\r\nCalls `GetSourceLineInfo` with delegate signature that consumes an `Assembly`.  As a result, this PR should not be merged in until _after_ dotnet/corefx#35541 mas been merged into corefx.\r\n\r\n#20179 \r\n\r\nCC- @janvorli @sergiy-k ","Url":"https://github.com/dotnet/coreclr/pull/22807","RelatedDescription":"Open PR \"Make StackTrace Aware of Unloadability\" (#22807)"},{"Id":"413634077","IsPullRequest":true,"CreatedAt":"2019-02-23T00:56:08","Actor":"sywhang","Number":"22806","RawContent":null,"Title":"Fix keyword for PinPlugAtGCTime event","State":"open","Body":"Found this while working on #22306 - `PinPlugAtGCTime` should be checked against the private provider + GCprivate keyword, but that wasn't what it was checking for. ","Url":"https://github.com/dotnet/coreclr/pull/22806","RelatedDescription":"Open PR \"Fix keyword for PinPlugAtGCTime event\" (#22806)"},{"Id":"413633244","IsPullRequest":true,"CreatedAt":"2019-02-23T00:50:22","Actor":"jkoritzinsky","Number":"22805","RawContent":null,"Title":"Implement support for copy constructors when marshalling in IJW","State":"open","Body":"Fixes #22219.\r\n\r\nI decided to try simplifying the code when bringing this feature over from .NET Framework. The .NETFX x86 implementation of this marshaler adds a lot of extra code-paths, and intercepts the calling stub to enable it to exactly replicate the behavior of what would be the native code by copy-constructing an object in-place where it goes on the stack for the native call.\r\n\r\nInstead of adding all of that extra goo, I decided to keep the implementation much more similar to the non-x86 implementation from .NETFX. Instead of intercepting the call and adding bookkeeping helper stubs, the marshaler just copies to a local in the IL stub, just like non-x86. When calling the native function, it just loads the local onto the IL stack and calls the native function as a normal function. There is a difference there, but I cannot think of a way that the difference is observable to the user.\r\n\r\nThe non-x86 implementation is identical to the .NETFX implementation.","Url":"https://github.com/dotnet/coreclr/pull/22805","RelatedDescription":"Open PR \"Implement support for copy constructors when marshalling in IJW\" (#22805)"},{"Id":"413631894","IsPullRequest":true,"CreatedAt":"2019-02-23T00:41:15","Actor":"swaroop-sridhar","Number":"22804","RawContent":null,"Title":"DllMap sample","State":"open","Body":"This change provides a sample of implementing DllMaps in .Net Core 3.\r\nThe DllMap design-doc is also updated.","Url":"https://github.com/dotnet/coreclr/pull/22804","RelatedDescription":"Open PR \"DllMap sample\" (#22804)"},{"Id":"413625616","IsPullRequest":true,"CreatedAt":"2019-02-23T00:04:55","Actor":"jashook","Number":"22803","RawContent":null,"Title":"Cherry pick linux musl changes","State":"open","Body":"This will enable linux-musl-arm64 builds in release/3.0. Waiting for a clean master official build to merge.","Url":"https://github.com/dotnet/coreclr/pull/22803","RelatedDescription":"Open PR \"Cherry pick linux musl changes\" (#22803)"},{"Id":"413619466","IsPullRequest":true,"CreatedAt":"2019-02-22T23:32:41","Actor":"tannergooding","Number":"22802","RawContent":null,"Title":"Enabling a pow1 test for ARM","State":"open","Body":"CC. @AndyAyersMS \r\n\r\nJust testing to see what the failure is, if there still is one.","Url":"https://github.com/dotnet/coreclr/pull/22802","RelatedDescription":"Open PR \"Enabling a pow1 test for ARM\" (#22802)"},{"Id":"413612714","IsPullRequest":true,"CreatedAt":"2019-02-22T23:01:52","Actor":"janvorli","Number":"22801","RawContent":null,"Title":"Improve coreclrhost.h header","State":"open","Body":"The header didn't contain comments on the APIs, which was pointed out in #22271\r\nAlso, the function declarations and pointers didn't include __stdcall\r\nand so it caused crashes when someone developing his own host on x86\r\nWindows used __cdecl as the default calling convention (#22217)","Url":"https://github.com/dotnet/coreclr/pull/22801","RelatedDescription":"Open PR \"Improve coreclrhost.h header\" (#22801)"},{"Id":"413609936","IsPullRequest":true,"CreatedAt":"2019-02-22T22:50:30","Actor":"echesakovMSFT","Number":"22800","RawContent":null,"Title":"Add platforms parameter to platform-matrix.yml","State":"open","Body":"This adds a way to specify target platforms for a job generated by platform-matrix.yml template.\r\n\r\nFor example, if want to limit our CI test jobs to Windows_NT/x86 and Windows_NT/x64 we can do this in azure-pipelines.yml\r\n```yaml\r\n- ${{ if and(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')) }}:\r\n  - template: eng/platform-matrix.yml\r\n    parameters:\r\n      jobTemplate: test-job.yml\r\n      buildConfig: checked\r\n      platforms:\r\n      - Windows_NT_x64\r\n      - Windows_NT_x86\r\n      jobParameters:\r\n        testGroup: outerloop\r\n```\r\n\r\nThese changes is better viewed with [hidden whitespace changes](https://github.com/dotnet/coreclr/pull/22800/files?utf8=%E2%9C%93&diff=split&w=1)","Url":"https://github.com/dotnet/coreclr/pull/22800","RelatedDescription":"Open PR \"Add platforms parameter to platform-matrix.yml\" (#22800)"},{"Id":"413609204","IsPullRequest":true,"CreatedAt":"2019-02-22T22:47:34","Actor":"adiaaida","Number":"22799","RawContent":null,"Title":"Change IBC package layout to match what we generate","State":"open","Body":"We now produce the packages in the data/<AssemblyName> directory, so fix this in coreclr's build.","Url":"https://github.com/dotnet/coreclr/pull/22799","RelatedDescription":"Open PR \"Change IBC package layout to match what we generate\" (#22799)"},{"Id":"413606128","IsPullRequest":true,"CreatedAt":"2019-02-22T22:35:28","Actor":"grant-d","Number":"22798","RawContent":null,"Title":"Trim/TrimStart/TrimEnd methods for Memory and Span","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/31011\r\nAdded `RoS.Trim()`, `RoS.TrimStart()` and `RoS.TrimEnd()`.\r\n\r\nSpec is ambiguous - I wasn't sure if I should just do `RoS` or if I should also add similar overloads for `Memory`, `ROM`, `Span` too.\r\n\r\n**[Edit]:** Confirmed that all 4 types/overloads was the intent per https://github.com/dotnet/corefx/issues/31011#issuecomment-442187755. \r\nSo scope of this PR is correct.\r\n\r\ncc @ahsonkhan, @terrajobst ","Url":"https://github.com/dotnet/coreclr/pull/22798","RelatedDescription":"Open PR \"Trim/TrimStart/TrimEnd methods for Memory and Span\" (#22798)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"413882032","IsPullRequest":true,"CreatedAt":"2019-02-24T23:55:16","Actor":"dotnet-maestro[bot]","Number":"10876","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19124.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10876","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10876)"},{"Id":"413479291","IsPullRequest":false,"CreatedAt":"2019-02-24T19:21:24","Actor":"aateeque","Number":"10865","RawContent":null,"Title":"Incorrect sdk selected","State":"closed","Body":"## Steps to reproduce\r\nCreate a new dotnet app from CLI\r\n\r\n```\r\nD:\\>mkdir a & cd a\r\n\r\nD:\\a>dotnet new webapp\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on D:\\a\\a.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK d\r\noes not support targeting .NET Core 2.2.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [D:\\a\\a.\r\ncsproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n```\r\n\r\n## Expected  behavior\r\nShould work just fine; there is __no__ _global.json_ in D:\\\r\n\r\n\r\n## Actual behavior\r\nReports missing SDK\r\n\r\n\r\n## Environment data\r\n```\r\n`dotnet --info` output:\r\nD:\\>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10865","RelatedDescription":"Closed issue \"Incorrect sdk selected\" (#10865)"},{"Id":"412906588","IsPullRequest":false,"CreatedAt":"2019-02-24T18:37:44","Actor":"shai-glat","Number":"10861","RawContent":null,"Title":"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework","State":"closed","Body":"## Steps to reproduce\r\n1. Create a csproj and generated a nuget package from it - works as expected\r\n2. Open the package and take out the generated nuspec file.\r\n3. Add the following tag to csproj:\r\n`\t<PropertyGroup>\r\n\t\t<NuspecFile>nuspec\\MyProj.nuspec</NuspecFile>\r\n\t</PropertyGroup>\r\n`\r\n4. Add the `files` tag to nuspec file as follows:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n..... (unmodified)\r\n  </metadata>\r\n\t<files>\r\n\t\t<file src=\"<Path>/MyProj.dll\" target=\"lib\" />\r\n\t\t<file src=\"<Path>/OtherFile.dll\" target=\"lib\" />\r\n\t</files>\r\n</package>\r\n```\r\n5. run `dotnet pack MyProj.csproj -o out /p:Version=1.0.1`\r\n## Expected  behavior\r\nGenerated package is a valid .NET Core package\r\n\r\n## Actual behavior\r\nPackage contents are all .NET Core dlls, but when adding the package visual studio it states the package was restored using .NetFramework 4.6 instead of .Net Core 2.1\r\n\r\n## Environment data\r\n`dotnet --info` output: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n## Additional notes\r\nI had the same problem when adding NuspecFile via dotnet CLI, as well as when i started with an empty nuspec file and simply added the files tag as stated above","Url":"https://github.com/dotnet/cli/issues/10861","RelatedDescription":"Closed issue \"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework\" (#10861)"},{"Id":"413823025","IsPullRequest":true,"CreatedAt":"2019-02-24T14:10:25","Actor":"dotnet-maestro[bot]","Number":"10875","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19123.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10875","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#10875)"},{"Id":"413820347","IsPullRequest":true,"CreatedAt":"2019-02-24T13:15:18","Actor":"dotnet-maestro[bot]","Number":"10874","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19124.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10874","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10874)"},{"Id":"413760631","IsPullRequest":true,"CreatedAt":"2019-02-24T00:16:06","Actor":"thomasgassmann","Number":"10873","RawContent":null,"Title":"add --no-solution-folders flag to dotnet sln add","State":"open","Body":"Closes #10427\r\n\r\nAdds the `--no-solution-folders` flag to the `dotnet sln add` command. ","Url":"https://github.com/dotnet/cli/pull/10873","RelatedDescription":"Open PR \"add --no-solution-folders flag to dotnet sln add\" (#10873)"},{"Id":"413694802","IsPullRequest":true,"CreatedAt":"2019-02-23T16:11:51","Actor":"dotnet-maestro[bot]","Number":"10872","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19123.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10872","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10872)"},{"Id":"413628582","IsPullRequest":true,"CreatedAt":"2019-02-23T01:01:54","Actor":"dotnet-maestro[bot]","Number":"10871","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19121.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10871","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10871)"},{"Id":"413546931","IsPullRequest":true,"CreatedAt":"2019-02-23T00:45:12","Actor":"peterhuene","Number":"10866","RawContent":null,"Title":"[WIP] Bump the patch versions for 1.x.","State":"closed","Body":"This is a test PR for now.","Url":"https://github.com/dotnet/cli/pull/10866","RelatedDescription":"Closed or merged PR \"[WIP] Bump the patch versions for 1.x.\" (#10866)"},{"Id":"413624894","IsPullRequest":true,"CreatedAt":"2019-02-23T00:01:04","Actor":"dotnet-bot","Number":"10870","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10870","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10870)"},{"Id":"413624882","IsPullRequest":true,"CreatedAt":"2019-02-23T00:01:01","Actor":"dotnet-bot","Number":"10869","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10869","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10869)"},{"Id":"413274666","IsPullRequest":false,"CreatedAt":"2019-02-22T23:52:43","Actor":"KevinRansom","Number":"10864","RawContent":null,"Title":"Build behavior change between 2.1.403 and 3.0.100-preview-010000","State":"closed","Body":"On version: 2.1.403\r\n\r\nThis project builds correctly:  https://github.com/Microsoft/visualfsharp/blob/master/src/buildtools/buildtools.proj\r\n\r\nc:\\kevinransom\\visualfsharp\\fcs>dotnet build ..\\src\\buildtools\\buildtools.proj\r\nMicrosoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 19.05 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj.\r\n  Restore completed in 1.76 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj.\r\n  fslex -> c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fslex\\Debug\\netcoreapp2.0\\fslex.dll\r\n  fsyacc -> c:\\kevinransom\\visualfsharp\\artifacts\\bin\\fsyacc\\Debug\\netcoreapp2.0\\fsyacc.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.64\r\n\r\nWith version 3.0.100-preview-010000 installed the behavior has changed:\r\n\r\nc:\\kevinransom\\visualfsharp\\fcs>dotnet build ..\\src\\buildtools\\buildtools.proj\r\nMicrosoft (R) Build Engine version 16.0.284-preview+g7905402dc6 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj...\r\n  Generating MSBuild file c:\\kevinransom\\visualfsharp\\artifacts\\obj\\fslex\\fslex.fsproj.nuget.g.props.\r\n  Restore completed in 125.12 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fslex\\fslex.fsproj.\r\n  Restoring packages for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj...\r\n  Generating MSBuild file c:\\kevinransom\\visualfsharp\\artifacts\\obj\\fsyacc\\fsyacc.fsproj.nuget.g.props.\r\n  Restore completed in 59.86 ms for c:\\kevinransom\\visualfsharp\\src\\buildtools\\fsyacc\\fsyacc.fsproj.\r\nc:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj : error MSB4025: The project file could not be loaded. Could not find a part of the path 'c:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj'.\r\n\r\nBuild FAILED.\r\n\r\nc:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj : error MSB4025: The project file could not be loaded. Could not find a part of the path 'c:\\kevinransom\\visualfsharp\\src\\src\\buildtools\\buildtools.proj'.\r\n   0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.80\r\n\r\nI assume this is a bug.\r\n\r\nKevin\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10864","RelatedDescription":"Closed issue \"Build behavior change between 2.1.403 and 3.0.100-preview-010000\" (#10864)"},{"Id":"413619331","IsPullRequest":false,"CreatedAt":"2019-02-22T23:31:58","Actor":"peterhuene","Number":"10868","RawContent":null,"Title":"Replace MIT License with .NET Library EULA in Windows installer","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Install a 3.0.100 SDK preview for Windows using the installer.\r\n\r\n## Expected  behavior\r\n\r\nThe link for \"MIT License\" should be replaced with \".NET Library EULA\".\r\n\r\n## Actual behavior\r\n\r\nThe link for the \"MIT License\" remains.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10868","RelatedDescription":"Open issue \"Replace MIT License with .NET Library EULA in Windows installer\" (#10868)"},{"Id":"412919223","IsPullRequest":true,"CreatedAt":"2019-02-22T21:19:26","Actor":"dotnet-maestro[bot]","Number":"10862","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19121.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19122.1\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19122.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10862","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10862)"},{"Id":"413552689","IsPullRequest":true,"CreatedAt":"2019-02-22T19:48:36","Actor":"peterhuene","Number":"10867","RawContent":null,"Title":"[WIP] Bump patch versions.","State":"open","Body":"This commit also parameterizes the latest patch versions so that build\r\ndefinitions can modify them.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10867","RelatedDescription":"Open PR \"[WIP] Bump patch versions.\" (#10867)"},{"Id":"412716639","IsPullRequest":true,"CreatedAt":"2019-02-22T17:16:47","Actor":"tmat","Number":"10856","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/cli/pull/10856","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#10856)"},{"Id":"413037854","IsPullRequest":false,"CreatedAt":"2019-02-21T17:23:31","Actor":"KathleenDollard","Number":"10863","RawContent":null,"Title":"Nicer message for `dotnet tool install` failure","State":"open","Body":"## Steps to reproduce\r\n\r\nIn a directory that does not have a manifest file, enter\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\n```\r\n\r\nNote, I neglected to enter `-g`\r\n\r\n## Expected  behavior\r\n\r\nSomething nice, and not a list of places searched. Suggestion below.\r\n\r\n(Note: Since this is a common mistake, I think we made the right decision not to create a manifest automatically). \r\n\r\n## Actual behavior\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\nCannot find any manifests file. Searched:\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/.config/dotnet-tools.json\r\n/Users/kathleen/repos/dotnet-tools.json\r\n/Users/kathleen/.config/dotnet-tools.json\r\n/Users/kathleen/dotnet-tools.json\r\n/Users/.config/dotnet-tools.json\r\n/Users/dotnet-tools.json\r\n/.config/dotnet-tools.json\r\n/dotnet-tools.json\r\n```\r\n\r\n## Suggested message \r\n\r\n```\r\nCannot find a manifest file. \r\nIf you intended to install a global tool, add `--global` to the command.\r\nIf you would like to create a manifest, use `dotnet new tool-manifest` first, usually in the repo root directory\r\nFor a list of locations searched, use `dotnet tool install <toolname> -v`\r\n```\r\n\r\n-v would add the places searched before or after this message. \r\n\r\n## Environment data\r\n```\r\ndotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009988\r\n Commit:    8d071f3d19\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009988/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10863","RelatedDescription":"Open issue \"Nicer message for `dotnet tool install` failure\" (#10863)"},{"Id":"412864127","IsPullRequest":false,"CreatedAt":"2019-02-21T10:54:52","Actor":"couven92","Number":"10860","RawContent":null,"Title":"Add `dotnet tool update --all` option","State":"open","Body":"## Request\r\n\r\nWhen multiple tools are installed, either globally or locally, it becomes hard to keep track of which tools are outdated and which are not, and updating all outdated tools is time-consuming and boring copy-paste work, since the package id of each installed package needs to be provided to the `dotnet tool update` command.\r\n\r\nI propose to add the `--all` (alias: `-a`) option to the `dotnet tool update` command. This option would simply run `dotnet tool list` internally and use the results obtained from that command to get the package ids that are installed. Then the `dotnet tool update` command could be called with each of these package ids.\r\n\r\n## Background\r\n\r\nUpdating all installed programs is very usual operation for package maintance application to do. `apt upgrade` on Debian/Ubuntu, `npm upgrade` for NPM, etc.\r\n\r\nI have encountered the same problem in Python, however, there one can (semi-)easily write a Windows CMD `FOR` command that uses the `pip list --outdated --format=freeze` command.\r\n\r\nCurrently, the only way to update all packages installed with `dotnet tool` is to parse the output of `dotnet tool list`. That means I now have to write a PowerShell script that ignores the first two lines (the header and header-splitter) and parses the package id from the start of the line to the first whitespace. Yes, it's doable, but it would be much more convenient to have a command that just does all that for you. Also, adding an option in the actual executable means that `dotnet` can use it's own data representation of the information on the installed packages, and thus does not have to be subject to changes in the output format, invalid characters when printed to the console, and all that stuff.\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n``` txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview1-009349 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview-26820-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10860","RelatedDescription":"Open issue \"Add `dotnet tool update --all` option\" (#10860)"},{"Id":"412721216","IsPullRequest":true,"CreatedAt":"2019-02-21T08:10:17","Actor":"livarcocc","Number":"10857","RawContent":null,"Title":"SDK 1.1.1-svc-20190221-1","State":"closed","Body":"@peterhuene once this gets merged you should be good to merge cli into the closed source and build with the runtime.","Url":"https://github.com/dotnet/cli/pull/10857","RelatedDescription":"Closed or merged PR \"SDK 1.1.1-svc-20190221-1\" (#10857)"},{"Id":"412779633","IsPullRequest":true,"CreatedAt":"2019-02-21T07:56:41","Actor":"livarcocc","Number":"10858","RawContent":null,"Title":"SDK 2.2.200-preview-63821-01","State":"closed","Body":"This SDK contains a matching NuGet.\r\n","Url":"https://github.com/dotnet/cli/pull/10858","RelatedDescription":"Closed or merged PR \"SDK 2.2.200-preview-63821-01\" (#10858)"},{"Id":"412780084","IsPullRequest":true,"CreatedAt":"2019-02-21T07:53:47","Actor":"livarcocc","Number":"10859","RawContent":null,"Title":"SDK 2.1.600-preview-63821-02","State":"closed","Body":"This contains a matching NuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10859","RelatedDescription":"Closed or merged PR \"SDK 2.1.600-preview-63821-02\" (#10859)"},{"Id":"412709325","IsPullRequest":true,"CreatedAt":"2019-02-21T05:14:27","Actor":"dotnet-maestro[bot]","Number":"10855","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19120.3\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19120.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10855","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10855)"},{"Id":"412700735","IsPullRequest":true,"CreatedAt":"2019-02-21T02:23:24","Actor":"livarcocc","Number":"10853","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-05","State":"closed","Body":"We need one more for Loc.","Url":"https://github.com/dotnet/cli/pull/10853","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-05\" (#10853)"},{"Id":"412685392","IsPullRequest":true,"CreatedAt":"2019-02-21T02:22:58","Actor":"nugetlurker","Number":"10851","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10851","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into cli\" (#10851)"},{"Id":"412685402","IsPullRequest":true,"CreatedAt":"2019-02-21T02:14:07","Actor":"nugetlurker","Number":"10852","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10852","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into cli\" (#10852)"},{"Id":"412700934","IsPullRequest":true,"CreatedAt":"2019-02-21T02:11:16","Actor":"livarcocc","Number":"10854","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-05","State":"closed","Body":"One more for loc.\r\n","Url":"https://github.com/dotnet/cli/pull/10854","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-05\" (#10854)"},{"Id":"412677022","IsPullRequest":true,"CreatedAt":"2019-02-21T00:32:42","Actor":"livarcocc","Number":"10850","RawContent":null,"Title":"Porting a change we already have in 2.x where we skip tests for native installers.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10850","RelatedDescription":"Closed or merged PR \"Porting a change we already have in 2.x where we skip tests for native installers.\" (#10850)"},{"Id":"412622957","IsPullRequest":true,"CreatedAt":"2019-02-20T22:59:23","Actor":"livarcocc","Number":"10849","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-02.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10849","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-02.\" (#10849)"},{"Id":"412622764","IsPullRequest":true,"CreatedAt":"2019-02-20T22:59:09","Actor":"livarcocc","Number":"10848","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-02.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10848","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-02.\" (#10848)"},{"Id":"412599390","IsPullRequest":true,"CreatedAt":"2019-02-20T20:37:14","Actor":"peterhuene","Number":"10847","RawContent":null,"Title":"Merge branch 'rel/1.1.0-MSRC' into rel/1.1.0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10847","RelatedDescription":"Closed or merged PR \"Merge branch 'rel/1.1.0-MSRC' into rel/1.1.0\" (#10847)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"408526522","IsPullRequest":false,"CreatedAt":"2019-02-23T00:00:14","Actor":"jmroyb","Number":"1066","RawContent":null,"Title":"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?","State":"closed","Body":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers","Url":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Closed issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"408429514","IsPullRequest":false,"CreatedAt":"2019-02-21T19:39:58","Actor":"kaby76","Number":"1065","RawContent":null,"Title":"CI build status log is not public","State":"closed","Body":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work.","Url":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Closed issue \"CI build status log is not public\" (#1065)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410527393","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:45","Actor":"wtgodbe","Number":"1067","RawContent":null,"Title":"Add netstandard.xml Intellisense file back to NetStandard.Library","State":"closed","Body":"The SDK expects `XmlDocFileRoot` to be defined by the repo so that it can find the intellisense file to binplace into the package - redefining this property makes it so we get `netstandard.xml` in the package again for 2.1.\r\n\r\nCC @dsplaisted @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1067","RelatedDescription":"Closed or merged PR \"Add netstandard.xml Intellisense file back to NetStandard.Library\" (#1067)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"},{"Id":"410528981","IsPullRequest":true,"CreatedAt":"2019-02-14T23:12:42","Actor":"dotnet-maestro[bot]","Number":"1068","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19113.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1068","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#1068)"},{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"413923968","IsPullRequest":true,"CreatedAt":"2019-02-25T04:06:17","Actor":"ahsonkhan","Number":"35554","RawContent":null,"Title":"Update the IBufferWriter contract definition documentation to be clearer","State":"open","Body":"Based on recent discussions:\r\n- https://github.com/dotnet/corefx/issues/34259\r\n- https://github.com/dotnet/corefx/pull/35186\r\n\r\ncc @pakrym, @stephentoub, @davidfowl, @AArnott, @benaadams, @KrzysztofCwalina, @terrajobst ","Url":"https://github.com/dotnet/corefx/pull/35554","RelatedDescription":"Open PR \"Update the IBufferWriter contract definition documentation to be clearer\" (#35554)"},{"Id":"413590664","IsPullRequest":true,"CreatedAt":"2019-02-24T22:31:53","Actor":"Anipik","Number":"35532","RawContent":null,"Title":"Removing restriction of first 8 character being different from lognames","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/31119\r\n\r\nI removed the first 8 same characters check. Same log Name check is not required because opensubkey will already be looking at all the subkeys, when it tries to open the subkey.\r\n\r\ni retained the restriction of not being able to use system names such as \"appevent secvent Sysevent\". However i allowed them to be present as a substring.","Url":"https://github.com/dotnet/corefx/pull/35532","RelatedDescription":"Closed or merged PR \"Removing restriction of first 8 character being different from lognames\" (#35532)"},{"Id":"413843836","IsPullRequest":true,"CreatedAt":"2019-02-24T17:10:08","Actor":"filipnavara","Number":"35553","RawContent":null,"Title":"WIP: Add temporary resources and copy of Thread implementation to unblock merge of shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22744 and https://github.com/dotnet/corert/pull/7067 once the shared partition code is updated. This makes CoreFX buildable. It is temporary step until dependencies are picked up and the CoreCLR/CoreRT types can be used.","Url":"https://github.com/dotnet/corefx/pull/35553","RelatedDescription":"Open PR \"WIP: Add temporary resources and copy of Thread implementation to unblock merge of shared CoreLib\" (#35553)"},{"Id":"413836756","IsPullRequest":false,"CreatedAt":"2019-02-24T16:01:06","Actor":"Dixin","Number":"35552","RawContent":null,"Title":"Proposal (& implementation): LINQ APIs to enable C# 8.0 index and range for IEnumerable<T>","State":"open","Body":"C# 8.0 introduces index and range features for array. It is natural and convenient to support index and range in LINQ, so they can work with any type that implements `IEnumerable<T>`. I searched the [API review notes](https://github.com/dotnet/apireviews), didn't find such APIs, so propose it here.\r\n\r\n# Rationale and usage\r\n\r\nCurrently (v3.0.0-preview2/SDK 3.0.100-preview-010184), the index and range work with array, and do not work with other types, like `List<T>`. The goals of these LINQ APIs are:\r\n\r\n- Use index to locate an element in sequence, use range to slice sequence. The usage is the same as index/range for array, but with deferred execution for slice with range.\r\n- Use range to start fluent LINQ query.\r\n\r\nThis enables the index and range to work with any type that implements `IEnumerable<T>`.\r\n\r\nLINQ already has `ElementAt(int index)` and `ElementOrDefault(int index)` query operator. It would be natural to have a overload for `System.Index`: `ElementAt(Index index)` and `ElementOrDefault(Index index)`, and a new method `ElementsIn(Range range)`, so that LINQ can seamlessly work with C# 8.0:\r\n```cs\r\nIndex index = ...;\r\nvar element1 = source1.ElementAt(index);\r\nvar element2 = source2.ElementAtOrDefault(^5);\r\nRange range = ...;\r\nvar slice1 = source3.ElementsIn(range);\r\nvar slice2 = source4.ElementsIn(2..^2)\r\nvar slice2 = source5.ElementsIn(^10..);\r\n```\r\n\r\nThe following `Range` overload and `AsEnumerable` overload for `System.Range` convert it to a sequence, so that LINQ query can be started fluently from c# range:\r\n```cs\r\nvar query1 = Enumerable.Range(10..).Select(...);\r\nRange range = ...;\r\nvar query1 = range.AsEnumerable().Select(...);\r\nvar query2 = (10..20).AsEnumerable().Where(...);\r\n```\r\n\r\n# Proposed APIs\r\n\r\nFor LINQ to Objects:\r\n```cs\r\nnamespace System.Linq\r\n{\r\n    public static partial class Queryable\r\n    {\r\n        public static TSource ElementAt<TSource>(this IEnumerable<TSource> source, Index index) { throw null; }\r\n\r\n        public static TSource ElementAtOrDefault<TSource>(this IEnumerable<TSource> source, Index index) { throw null; }\r\n\r\n        public static IEnumerable<TSource> ElementsIn<TSource>(this IEnumerable<TSource> source, Range range) { throw null; }\r\n\r\n        public static IEnumerable<TSource> Range<TSource>(Range range) { throw null; }\r\n\r\n        public static IEnumerable<TSource> AsEnumerable<TSource>(this Range source) { throw null; }\r\n}\r\n```\r\nFor remote LINQ:\r\n```cs\r\nnamespace System.Linq\r\n{\r\n    public static partial class Queryable\r\n    {\r\n        public static TSource ElementAt<TSource>(this IQueryable<TSource> source, Index index) { throw null; }\r\n\r\n        public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, Index index) { throw null; }\r\n\r\n        public static IQueryable<TSource> ElementsIn<TSource>(this IQueryable<TSource> source, Range range) { throw null; }\r\n}\r\n```\r\n\r\n# Implementation details (and pull request)\r\n\r\nThe [API review process](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md) says PR should not be submitted before the API proposal is approved. So currently I implemented these APIs separately:\r\n- `Enumerable`: [`ElementAt(Index)`, `ElementOrDefaultAt(Index)`](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range/ElementAt.cs)\r\n- `Enumerable`: [`ElementsIn(Range)`](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range/ElementsIn.cs)\r\n- `Enumerable`: [`Range(Range)`](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range/Range.cs) and [`AsEnumerable(Range)`](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range/AsEnumerable.cs). They are the same conversion.\r\n- `Queryable`: [`ElementAt(Index)`, `ElementOrDefaultAt(Index)`, `ElementsIn(Range)`](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range/QueryableExtensions.cs).\r\n\r\nThese APIs' implementation is self-contained so that the code can be just copied to use. If this proposal is doable, I can submit a PR quickly.\r\n\r\nThe implementation of `ElementAt(Index)`, `ElementOrDefault(Index)` and `ElementsIn(Range)` for `IQueryable<T>` is straightforward. They just create an expression tree. These methods for `IEnumerable<T>` are straightforward as well, I just followed the behavior and exceptions of array with range (See unit tests [here](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range.Tests/ElementsInTests.cs)).\r\n\r\n# Open questions\r\n\r\nFor `Range(Range)` and `AsEnumerable(Range)`, the question is: what does `Range`'s start `Index` and end `Index` mean when the index is from the end? For example, `10..20` can be easily converted to a sequence of 10, 11,12, ... 19, but how about `^20...^10`? In my current implementation, regarding `Index`'s value can be from `0` to `int.MaxValue`, I assume a virtual \"full range\" `0..2147483648`, and any `Range` instance is a slice of that \"full range\". So:\r\n\r\n- Ranges `..` and `0..` and `..^0` and `0..^0` are converted to \"full sequence\" 0, 1, .. 2147483647\r\n- Range `100..^47` is converted to sequence 100, 101, .. 2147483600\r\n- Range `^48..^40` is converted to sequence 2147483600, 2147483601 .. 2147483607\r\n- Range `10..10` is converted to empty sequence\r\n\r\netc. See unit tests of `AsEnumerable(Range)` [here](https://github.com/Dixin/CodeSnippets/blob/master/Linq.Range/Linq.Range.Tests/AsEnumerableTests.cs).","Url":"https://github.com/dotnet/corefx/issues/35552","RelatedDescription":"Open issue \"Proposal (& implementation): LINQ APIs to enable C# 8.0 index and range for IEnumerable<T>\" (#35552)"},{"Id":"413823484","IsPullRequest":true,"CreatedAt":"2019-02-24T13:44:18","Actor":"dotnet-maestro[bot]","Number":"35551","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19123.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35551","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#35551)"},{"Id":"413784741","IsPullRequest":false,"CreatedAt":"2019-02-24T05:39:30","Actor":"krwq","Number":"35550","RawContent":null,"Title":"stackalloc initializer loses value during initialization","State":"open","Body":"Not sure which part of the stack is broken - perhaps I'm missing something obvious but feels like my value should not get lost\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\n\r\npublic class Program\r\n{\r\n  public static void Main()\r\n  {\r\n    byte foo = 8;\r\n    Span<byte> outArray = stackalloc byte[8] { foo, 0, 0, 0, 0, 0, 0, 0 };\r\n    Console.WriteLine(string.Join(\"\", outArray.ToArray().Select(x => x.ToString(\"X2\"))));\r\n  }\r\n}\r\n```\r\n\r\nExpected output:\r\n\r\n```\r\n0800000000000000\r\n```\r\n\r\nActual output:\r\n\r\n```\r\n0000000000000000\r\n```\r\n\r\nSeems like repros for length 4-8 (perhaps larger range)\r\n\r\nThis works as expected:\r\n\r\n```csharp\r\n   byte foo = 8;\r\n   Span<byte> outArray = stackalloc byte[3] { foo, 0, 0 };\r\n   Console.WriteLine(string.Join(\"\", outArray.ToArray().Select(x => x.ToString(\"X2\"))));\r\n```\r\n\r\nRepros on https://try.dot.net/ also my local box with sdk 2.1.403\r\n\r\nAlso repros when foo is not on the stack (i.e. a property in the class)\r\n\r\ncc: @ahsonkhan @stephentoub \r\n","Url":"https://github.com/dotnet/corefx/issues/35550","RelatedDescription":"Open issue \"stackalloc initializer loses value during initialization\" (#35550)"},{"Id":"413760514","IsPullRequest":true,"CreatedAt":"2019-02-24T00:14:57","Actor":"Wraith2","Number":"35549","RawContent":null,"Title":"SqlClient shrink SqlParameter and fix 34414","State":"open","Body":"fixes https://github.com/dotnet/corefx/issues/34414\r\n\r\nWhen using `SqlCommandBuilder.DeriveParameters` to identify the parameters of a stored procedure any table valued parameters will have their type name incorrectly constructed including the database name part. \r\n\r\nThis bug has been outstanding in SqlClient for quite some time so the direct fix would break user code where they rely on the incorrect parameter format to identify and fix the problem themselves. Rather than produce a correct name the name is still incorrectly generated but parameter is flagged as having a known incorrect name. If the user assigns to the typename the flag is cleared and we assume they've fixed it themselves. Later in the execution process when the user can no longer alter the parameter before execution the flag is checked and if still set the type name is auto corrected. Discussion of this method can be found on the [original PR by @ssa3512](https://github.com/dotnet/corefx/pull/34418#discussion_r246159268)\r\n\r\nI have added a new test `UDTParams_DeriveParameters` which verifies that the auto correction behaviour takes place. This test requires a new table values type and sproc in the UDT test database so the test database script has been updated. The functional and manual tests all pass.\r\n\r\nWhile investigating and implementing these changes I have compressed the `SqlParameter` field definitions because it was being quite wasteful about storing multiple parameters. Multiple boolean fields have been combined into flags, the rarely used xml fields have been moved into the same lazy initialized object as used in SqlCommand. I realize that this adds noise to the fix diffs but it seemed wasteful not to take the opportunity while I was working on the type. The patterns used are already used in SqlCommand so they're low risk imo.\r\n\r\n/cc all the usual people @AfsanehR @tarikulsabbir, @david-engel and @ssa3512 @saurabh500 from the original PR\r\n","Url":"https://github.com/dotnet/corefx/pull/35549","RelatedDescription":"Open PR \"SqlClient shrink SqlParameter and fix 34414\" (#35549)"},{"Id":"413729810","IsPullRequest":true,"CreatedAt":"2019-02-23T19:29:41","Actor":"am11","Number":"35548","RawContent":null,"Title":"Use NativeLibrary.TryLoad and prefer RTLD_LAZY over RTLD_NOW","State":"open","Body":"Use:\r\n* `NativeLibrary.TryLoad` in few test helpers\r\n* `RTLD_LAZY` instead of `RTLD_NOW`\r\n\r\nRelated to: #34633","Url":"https://github.com/dotnet/corefx/pull/35548","RelatedDescription":"Open PR \"Use NativeLibrary.TryLoad and prefer RTLD_LAZY over RTLD_NOW\" (#35548)"},{"Id":"413713646","IsPullRequest":false,"CreatedAt":"2019-02-23T16:49:22","Actor":"rikimaru0345","Number":"35547","RawContent":null,"Title":"How to emulate Expression.This() when using CompileToMethod","State":"open","Body":"I'm using `System.Linq.Expressions` to implement formatters (serializers) for any type T.\r\nAt runtime everything works fine, but now I want to support IL2CPP (Unitys ahead-of-time compiler).\r\nSo I thought I'd just get a list of all types to be serialized in my serializer, and then compile those expressions using `CompileToMethod` and then saving them in an assembly.\r\nThat way - for IL2CPP - no code has to be compiled at runtime.\r\n\r\nThe issue is that the constants in the expression tree can't be saved, which is no surprise.\r\nEach formatter (expression tree) has can have 0-N sub formatters that it uses to serialize the individual fields of its type. For example: A formatter `IFormatter<Person>` generated for `class Person { public int Age; public string Name; }` would itself contain `IFormatter<int>` and `IFormatter<string>` in order to serialize the two fields.\r\n\r\nOk, so it's obvious to me why this doesn't work.\r\nSo my idea now is to somehow replace the constants (the sub formatters) in the expression trees with fields!\r\nSo instead of genrating the two expressions (serialize and deserialize) of the `IFormatter<Person>` on their own, I would use DynamicType/TypeBuilder to generate a type that has fields for the needed formatters.\r\nA `Expression.Constant(stringFormatterInstance);` I would generate something like `Expression.MakeMemberAccess(???, stringFormatterField)`.\r\n\r\nNow my problem is, there's no `Expression.This()` is there?\r\nAlso the LambdaCompiler seems to always want to include some sort of closure object. Maybe I can manually instantiate that somehow and use it as my \"this\"?\r\n\r\nI'm a bit confused now regarding what my options are to actually solve this.\r\nMaybe there's some other way to replace the constants when loading the generated assembly?\r\nThe solution obviously can't be anything that uses dynamic code generation, as the whole point is to have this run on an AOT platform.","Url":"https://github.com/dotnet/corefx/issues/35547","RelatedDescription":"Open issue \"How to emulate Expression.This() when using CompileToMethod\" (#35547)"},{"Id":"413694071","IsPullRequest":true,"CreatedAt":"2019-02-23T13:09:17","Actor":"dotnet-maestro[bot]","Number":"35546","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27421-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27421-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27421-73\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27421-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27421-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27421-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35546","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#35546)"},{"Id":"413680366","IsPullRequest":true,"CreatedAt":"2019-02-23T11:22:08","Actor":"Dotnet-GitSync-Bot","Number":"35545","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/35545","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35545)"},{"Id":"413673766","IsPullRequest":false,"CreatedAt":"2019-02-23T08:40:39","Actor":"hanabi1224","Number":"35544","RawContent":null,"Title":"SafeWaitHandle does not work properly on linux","State":"open","Body":"When targeting to netcoreapp2.0, below code works fine on windows but not linux,  WaitHandle.WaitAll returns immediately on linux instead of waiting for process to actually exit.  Is this bug or by design?\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Process p;\r\n            if (Environment.OSVersion.Platform == PlatformID.Win32NT)\r\n            {\r\n                p = Process.Start(\"timeout\", \"10\");\r\n            }\r\n            else\r\n            {\r\n                p = Process.Start(\"sleep\", \"10s\");\r\n            }\r\n\r\n            var waitHandle = new ManualResetEvent(false);\r\n            waitHandle.SetSafeWaitHandle(new SafeWaitHandle(p.Handle, false));\r\n            WaitHandle.WaitAll(new[] { waitHandle });\r\n            if (!p.HasExited)\r\n            {\r\n                throw new Exception(\"Process wait handle is not working properly\");\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\"success\");\r\n            }\r\n        }","Url":"https://github.com/dotnet/corefx/issues/35544","RelatedDescription":"Open issue \"SafeWaitHandle does not work properly on linux\" (#35544)"},{"Id":"413641852","IsPullRequest":true,"CreatedAt":"2019-02-23T05:00:32","Actor":"Dotnet-GitSync-Bot","Number":"35543","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/35543","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35543)"},{"Id":"413608761","IsPullRequest":true,"CreatedAt":"2019-02-23T02:53:25","Actor":"eanova","Number":"35534","RawContent":null,"Title":"Dead Code Deletions in System.IO.Compression","State":"closed","Body":"As this is my first contribution to OSS,  I wanted to keep the PR small.  The three lines were removed and passed all tests.\r\n\r\nI was unable to use the /p:TargetGroup=netfx with msbuild, so instead used /p:TargetFrameworkVersion=4.7.2,  as well as the default for tests.","Url":"https://github.com/dotnet/corefx/pull/35534","RelatedDescription":"Closed or merged PR \"Dead Code Deletions in System.IO.Compression\" (#35534)"},{"Id":"413637126","IsPullRequest":true,"CreatedAt":"2019-02-23T02:37:22","Actor":"bartonjs","Number":"35542","RawContent":null,"Title":"Add #define alias for local_X509_STORE_CTX_get0_store for RHEL6 build","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/35542","RelatedDescription":"Closed or merged PR \"Add #define alias for local_X509_STORE_CTX_get0_store for RHEL6 build\" (#35542)"},{"Id":"413531010","IsPullRequest":true,"CreatedAt":"2019-02-23T02:20:16","Actor":"ericstj","Number":"35526","RawContent":null,"Title":"Make System.Runtime.CompilerServices.Unsafe inbox","State":"closed","Body":"Fix a couple places where we wanted to use it from other inbox assemblies but couldn't.\r\n\r\nUnsafe remains as a package and newer versions of Unsafe will replace the inbox Version,\r\npermitting us to add API over time.","Url":"https://github.com/dotnet/corefx/pull/35526","RelatedDescription":"Closed or merged PR \"Make System.Runtime.CompilerServices.Unsafe inbox\" (#35526)"},{"Id":"413636724","IsPullRequest":true,"CreatedAt":"2019-02-23T01:15:32","Actor":"josalem","Number":"35541","RawContent":null,"Title":"Make Stacktrace Symbols Cache Aware of Unloadability (phase 1)","State":"open","Body":"Adds an overload of the `GetSourceLineInfo` method with its original parameters list, and adds `System.Reflection.Assembly` as a paramter to the actual implementation.  This is to accomodate a cross corefx, coreclr change to use `System.Reflection.Assembly` as the cache key in a `ConditionalWeakTable<Assembly, MetadataReaderProvider>`.  To see what the end result will look like on the corefx side, please look [here](https://github.com/josalem/corefx/blob/stacktrace-cache-unloading-coreclr20179/src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackTraceSymbols.CoreCLR.cs).\r\n\r\ndotnet/coreclr#20179\r\n\r\nCC - @janvorli ","Url":"https://github.com/dotnet/corefx/pull/35541","RelatedDescription":"Open PR \"Make Stacktrace Symbols Cache Aware of Unloadability (phase 1)\" (#35541)"},{"Id":"413627965","IsPullRequest":false,"CreatedAt":"2019-02-23T01:11:38","Actor":"dotnet-mc-bot","Number":"35536","RawContent":null,"Title":"Test failure: System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)","State":"closed","Body":"Opened on behalf of @wfurt\n\nThe test `System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)` has failed.\n\nFailure Message:\n```\nSystem.UnauthorizedAccessException : Access to the path is denied.\n---- System.IO.IOException : Operation not permitted\n```\n\nStack Trace:\n```\n   at System.IO.MemoryMappedFiles.MemoryMappedView.CreateView(SafeMemoryMappedFileHandle memMappedFileHandle, MemoryMappedFileAccess access, Int64 requestedOffset, Int64 requestedSize) in /__w/1/s/src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedView.Unix.cs:line 119\n   at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64 offset, Int64 size, MemoryMappedFileAccess access) in /__w/1/s/src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs:line 447\n   at System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests.<>c__DisplayClass1_0.<ValidAccessLevelCombinations>b__0() in /__w/1/s/src/System.IO.MemoryMappedFiles/tests/MemoryMappedViewAccessor.Tests.cs:line 84\n   at System.AssertExtensions.ThrowsIf[T](Boolean condition, Action action) in /__w/1/s/src/CoreFx.Private.TestUtilities/src/System/AssertExtensions.cs:line 189\n   at System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests.ValidAccessLevelCombinations(MemoryMappedFileAccess mapAccess, MemoryMappedFileAccess viewAccess) in /__w/1/s/src/System.IO.MemoryMappedFiles/tests/MemoryMappedViewAccessor.Tests.cs:line 80\n----- Inner Stack Trace -----\n\n```\n\nBuild : 3.0 - 20190222.2 (Core Tests)\nFailing configurations:\n- Ubuntu.1604.Arm64-arm64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/35536","RelatedDescription":"Closed issue \"Test failure: System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)\" (#35536)"},{"Id":"413631961","IsPullRequest":true,"CreatedAt":"2019-02-23T01:00:32","Actor":"safern","Number":"35540","RawContent":null,"Title":"Disable azure pipelines reporter for official builds","State":"closed","Body":"In order for this to work correctly first we need to wait for our tests to finish.\r\n\r\ncc: @MattGal ","Url":"https://github.com/dotnet/corefx/pull/35540","RelatedDescription":"Closed or merged PR \"Disable azure pipelines reporter for official builds\" (#35540)"},{"Id":"413631114","IsPullRequest":false,"CreatedAt":"2019-02-23T00:36:38","Actor":"wfurt","Number":"35539","RawContent":null,"Title":"System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress blocking test runs on ARM64","State":"open","Body":"We get catastrophic failure in CI.\r\n\r\n```\r\n~/dotnetbuild/work/6271876f-6ed7-4469-828e-f8c62abc33df/Work/4b9b88e6-1a8f-468f-8386-88f45204d46c/Exec ~/dotnetbuild/work/6271876f-6ed7-4469-828e-f8c62abc33df/Work/4b9b88e6-1a8f-468f-8386-88f45204d46c/Exec\r\n[37m  Discovering: System.Diagnostics.DiagnosticSource.Tests (method display = ClassAndMethod, method display options = None)\r\n[m[37m  Discovered:  System.Diagnostics.DiagnosticSource.Tests (found 50 test cases)\r\n[m[37m  Starting:    System.Diagnostics.DiagnosticSource.Tests (parallel test collections = on, max threads = 2)\r\n[m[33;1m   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] 'System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress', Elapsed: 00:02:36\r\n[m[33;1m   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] 'System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress', Elapsed: 00:04:38\r\n[m[33;1m   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] 'System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress', Elapsed: 00:06:38\r\n[m[33;1m   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] 'System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress', Elapsed: 00:08:38\r\n[mKilled\r\n```","Url":"https://github.com/dotnet/corefx/issues/35539","RelatedDescription":"Open issue \"System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress blocking test runs on ARM64\" (#35539)"},{"Id":"413631057","IsPullRequest":false,"CreatedAt":"2019-02-23T00:36:19","Actor":"bartonjs","Number":"35538","RawContent":null,"Title":"Expose X509SubjectAlternativeNameExtension (or a reasonable facsimilie thereof)","State":"open","Body":"Users who want to inspect Subject Alternative Names do so by parsing the output of X509Extension.Format, which is not consistent across cultures or operating systems.\r\n\r\nOne possible approach is just expose GeneralName and be transparent about the SEQUENCE.  But what most scenarios probably want is something more like `cert.MatchesHost(string)` (so there's at least a consistent interpretation of wildcard matching); which would then likely also make sense on the rich type of the extension.  (The problem with `MatchesHost` is that there are various interpretations for CN fallback, wildcard matching, et cetera; and specifying a lot of flags may not be what anyone wants, either).","Url":"https://github.com/dotnet/corefx/issues/35538","RelatedDescription":"Open issue \"Expose X509SubjectAlternativeNameExtension (or a reasonable facsimilie thereof)\" (#35538)"},{"Id":"413628886","IsPullRequest":false,"CreatedAt":"2019-02-23T00:23:24","Actor":"dotnet-mc-bot","Number":"35537","RawContent":null,"Title":"Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_SslProtocols_Test/GetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol: Ssl3, requestOnlyThisProtocol: True)","State":"open","Body":"Opened on behalf of @wfurt\n\nThe test `System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_SslProtocols_Test/GetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol: Ssl3, requestOnlyThisProtocol: True)` has failed.\n\nFailure Message:\n```\nSystem.AggregateException : One or more errors occurred. (One or more errors occurred. (Authentication failed because the remote party has closed the transport stream.)) (One or more errors occurred. (An error occurred while sending the request.))\\r\n---- System.AggregateException : One or more errors occurred. (Authentication failed because the remote party has closed the transport stream.)\\r\n-------- System.IO.IOException : Authentication failed because the remote party has closed the transport stream.\\r\n---- System.AggregateException : One or more errors occurred. (An error occurred while sending the request.)\\r\n-------- System.Net.Http.HttpRequestException : An error occurred while sending the request.\\r\n------------ System.Net.Http.WinHttpException : Error 12175 calling WINHTTP_CALLBACK_STATUS_REQUEST_ERROR, 'A security error occurred'.\n```\n\nStack Trace:\n```\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Threading\\Tasks\\TaskTimeoutExtensions.cs:line 105\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Threading\\Tasks\\TaskTimeoutExtensions.cs:line 65\n   at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_0.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext() in F:\\vsagent\\1\\s\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.SslProtocols.cs:line 144\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Net\\Http\\LoopbackServer.cs:line 66\n   at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_AllowedSSLVersion_Succeeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol) in F:\\vsagent\\1\\s\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.SslProtocols.cs:line 142\n--- End of stack trace from previous location where exception was thrown ---\n----- Inner Stack Trace #1 (System.AggregateException) -----\n\n----- Inner Stack Trace -----\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 874\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 863\n   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 656\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 575\n   at System.Net.Security.SslStream.BeginAuthenticateAsServer(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 265\n   at System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation, AsyncCallback asyncCallback, Object asyncState) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 254\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__51_1(X509Certificate arg1, Boolean arg2, SslProtocols arg3, AsyncCallback callback, Object state) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 417\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2,TArg3](Func`6 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions) in F:\\vsagent\\19\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\FutureFactory.cs:line 1158\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2,TArg3](Func`6 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions) in F:\\vsagent\\19\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskFactory.cs:line 1135\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2,TArg3](Func`6 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state) in F:\\vsagent\\19\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskFactory.cs:line 1092\n   at System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation) in F:\\vsagent\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 418\n   at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Net\\Http\\LoopbackServer.cs:line 100\n   at System.Net.Test.Common.LoopbackServer.AcceptConnectionSendResponseAndCloseAsync(HttpStatusCode statusCode, String additionalHeaders, String content) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Net\\Http\\LoopbackServer.cs:line 146\n----- Inner Stack Trace #2 (System.AggregateException) -----\n\n----- Inner Stack Trace -----\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in F:\\vsagent\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs:line 475\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in F:\\vsagent\\1\\s\\src\\Common\\tests\\System\\Threading\\Tasks\\TaskTimeoutExtensions.cs:line 77\n----- Inner Stack Trace -----\n   at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in F:\\vsagent\\1\\s\\src\\Common\\src\\System\\Threading\\Tasks\\RendezvousAwaitable.cs:line 66\n   at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in F:\\vsagent\\1\\s\\src\\System.Net.Http.WinHttpHandler\\src\\System\\Net\\Http\\WinHttpHandler.cs:line 880\n```\n\nBuild : 3.0 - 20190222.4 (Core Tests)\nFailing configurations:\n- Windows.10.Amd64.Core-x64\n  - Release\n- Windows.10.Amd64.Core-x86\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/35537","RelatedDescription":"Open issue \"Test failure: System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_SslProtocols_Test/GetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol: Ssl3, requestOnlyThisProtocol: True)\" (#35537)"},{"Id":"413622168","IsPullRequest":false,"CreatedAt":"2019-02-22T23:46:23","Actor":"roji","Number":"35535","RawContent":null,"Title":"ADO.NET factory methods should throw instead of returning null","State":"open","Body":"Some ADO.NET APIs create objects which not all providers support. For example, `DbProviderFactory.CreateCommandBuilder()` returns a `DbCommandBuilder`, but some providers don't support this functionality (e.g. SQLite if I'm not mistaken, @bricelam). The current implementation for all the methods on DbProviderFactory is [to return null by default](https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/Common/DbProviderFactory.cs), which serves as a sort of \"feature detection mechanism\" - consumers can check if the result is null to know if the feature is supported or not.\r\n\r\nAside being a generally problematic mechanism (users get NullReferenceException instead of the clearer NotSupportedException), this mechanism is also not suited for C# 8 nullability. If certain providers can return null to indicate that the feature isn't supported, than it seems like the `Create*()` method will return a nullable reference. This would impose on everyone to either check for null, or use the bang (!) operator to tell the compiler that no null is actually possible there - not good practice since users simply know that their specific provider supports the feature. Conversely, if the `Create*()` method returns a non-nullable reference, then you may get warnings for checking it for null.\r\n\r\nInstead, we should change these methods to throw NotSupportedException (breaking change), and add `Can*()` virtual bool properties alongside these methods to indicate whether the feature is supported or not (similar to how `DbProviderFactory.CanCreateDataSourceEnumerator` exists alongside `DbProviderFactory.CreateDataSourceEnumerator()`. The default implementation of these capability properties could be to call the corresponding method, catching NotSupportedException and returning based on that.\r\n\r\nThis should be done for .NET Standard 2.1 if possible.\r\n\r\nOriginally discussed in https://github.com/dotnet/corefx/issues/35135#issuecomment-466452344","Url":"https://github.com/dotnet/corefx/issues/35535","RelatedDescription":"Open issue \"ADO.NET factory methods should throw instead of returning null\" (#35535)"},{"Id":"413582538","IsPullRequest":true,"CreatedAt":"2019-02-22T22:27:59","Actor":"Dotnet-GitSync-Bot","Number":"35529","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/35529","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35529)"},{"Id":"413523003","IsPullRequest":true,"CreatedAt":"2019-02-22T22:21:20","Actor":"wtgodbe","Number":"35525","RawContent":null,"Title":"Bump version for SqlClient & turn on package build","State":"closed","Body":"Ensures https://github.com/dotnet/corefx/pull/34260 will ship with 2.2.3 (that PR was a follow-up to https://github.com/dotnet/corefx/pull/31039, which we also shipped out of release/2.2)\r\n\r\n@safern @ericstj PTAL\r\n\r\nCC @AfsanehR ","Url":"https://github.com/dotnet/corefx/pull/35525","RelatedDescription":"Closed or merged PR \"Bump version for SqlClient & turn on package build\" (#35525)"},{"Id":"413598286","IsPullRequest":true,"CreatedAt":"2019-02-22T22:20:16","Actor":"MattGal","Number":"35533","RawContent":null,"Title":"Adding Alpine 3.9 Runs to official","State":"closed","Body":"There may be a little more work to be done here for displaying what actually ran, but I believe we're ready to use the new Helix Client docker work.\r\n","Url":"https://github.com/dotnet/corefx/pull/35533","RelatedDescription":"Closed or merged PR \"Adding Alpine 3.9 Runs to official\" (#35533)"},{"Id":"413588441","IsPullRequest":true,"CreatedAt":"2019-02-22T21:35:39","Actor":"wfurt","Number":"35531","RawContent":null,"Title":"improve detection for ReadOnly_FileSystemHelper","State":"open","Body":"Add detection of Docker instead of blaming Alpine.\r\nI verified that other OSes also fail when executed in Docker image. \r\nThis also fixes currently failing tests on ARM64:\r\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190222.2/workItem/System.IO.FileSystem.Tests\r\n\r\nAlso test will now properly report skip result instead of pass.\r\n\r\nfixes #21920  ","Url":"https://github.com/dotnet/corefx/pull/35531","RelatedDescription":"Open PR \"improve detection for ReadOnly_FileSystemHelper\" (#35531)"},{"Id":"413586188","IsPullRequest":false,"CreatedAt":"2019-02-22T21:28:30","Actor":"GrabYourPitchforks","Number":"35530","RawContent":null,"Title":"Add Rune.TryEncodeToUtf8Bytes","State":"open","Body":"The API `Rune.TryEncodeToUtf8Bytes` (see [source.dot.net](https://source.dot.net/#System.Private.CoreLib/shared/System/Text/Rune.cs,a25810101a4e6140)) is being added to the `System.Runtime` ref assembly to unblock feature work, but this API was never sent through formal review. We should review it.\r\n\r\nHere's the API shape:\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n    public readonly partial struct Rune\r\n    {\r\n        // EXISTING APPROVED API - writes as UTF-16\r\n        public bool TryEncode(Span<char> destination, out int charsWritten);\r\n\r\n        // NEW PROPOSED API - writes as UTF-8\r\n        public bool TryEncodeToUtf8Bytes(Span<byte> destination, out int bytesWritten);\r\n    }\r\n}\r\n```\r\n\r\nIn particular we need to figure out how to normalize the `TryEncode` / `TryEncodeToUtf8Bytes` names so that they fit a common pattern. Per our brief review today we said that we're not opposed to suffixing everything with `Utf16` and `Utf8`, especially since we expect that consumers of this particular API will be familiar with UTF-\\* representation.\r\n\r\n/cc @ahsonkhan @ericstj","Url":"https://github.com/dotnet/corefx/issues/35530","RelatedDescription":"Open issue \"Add Rune.TryEncodeToUtf8Bytes\" (#35530)"},{"Id":"413580680","IsPullRequest":false,"CreatedAt":"2019-02-22T21:11:07","Actor":"geoffkizer","Number":"35528","RawContent":null,"Title":"HTTP2: Implement MaxResponseHeadersLength setting","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/issues/35528","RelatedDescription":"Open issue \"HTTP2: Implement MaxResponseHeadersLength setting\" (#35528)"},{"Id":"413565507","IsPullRequest":false,"CreatedAt":"2019-02-22T20:26:10","Actor":"ajcvickers","Number":"35527","RawContent":null,"Title":"Database connection not working on microsoft/dotnet:2.2-aspnetcore-runtime-alpine image","State":"open","Body":"Moved from https://github.com/aspnet/EntityFrameworkCore/issues/14760 posted by @Jeremiad\r\n\r\nHi,\r\n\r\nI'm having issues connecting to MS SQL server db from container using EF. Database server is running on other machine. \r\n\r\nThis issue is only happening with microsoft/dotnet:2.2-aspnetcore-runtime-alpine docker image but not with microsoft/dotnet:2.2-aspnetcore-runtime image.\r\n\r\n```\r\nException message: System.InvalidOperationException: Internal connection fatal error.\r\nStack trace:\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n\r\n      Connection id \"0HLKLNP48COLT\", Request id \"0HLKLNP48COLT:00000001\": An unhandled exception was thrown by the application.\r\n\r\nSystem.InvalidOperationException: Internal connection fatal error.\r\n\r\n   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n\r\n   at System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj)\r\n\r\n   at System.Data.SqlClient.TdsParser.DrainData(TdsParserStateObject stateObj)\r\n\r\n   at System.Data.SqlClient.TdsParser.ThrowUnsupportedCollationEncountered(TdsParserStateObject stateObj)\r\n\r\n   at System.Data.SqlClient.TdsParser.GetCodePage(SqlCollation collation, TdsParserStateObject stateObj)\r\n\r\n   at System.Data.SqlClient.TdsParser.TryProcessEnvChange(Int32 tokenLength, TdsParserStateObject stateObj, SqlEnvChange[]& sqlEnvChange)\r\n\r\n   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n\r\n   at System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj)\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds.CompleteLogin(Boolean enlistOK)\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(Boolean errorsExpected)\r\n\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)\r\n\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)\r\n\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()\r\n\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\r\n\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\r\n\r\n   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n```\r\n\r\n### Steps to reproduce\r\n* Clone https://github.com/Jeremiad/arknotifications\r\n* Run linux-build.sh / or build manually\r\n* Configure database connection in appsettings.json\r\n* call api http://host/api/notifications\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.2.2\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Alpine Docker container\r\nIDE: -\r\n","Url":"https://github.com/dotnet/corefx/issues/35527","RelatedDescription":"Open issue \"Database connection not working on microsoft/dotnet:2.2-aspnetcore-runtime-alpine image\" (#35527)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"413915051","IsPullRequest":true,"CreatedAt":"2019-02-25T03:16:02","Actor":"davidwengier","Number":"33653","RawContent":null,"Title":"TempPE compiler fixes","State":"open","Body":"A couple of minor fixes to the TempPE compiler that will be used by CPS projects.\r\n\r\n* Start with the current project compilation options, mainly due to the VB compiler requirements and the desire to have a single compiler that can do both languages\r\n* Set the assembly of the output DLL properly, to allow for multiple TempPE outputs from the same project\r\n\r\nThis is part of https://github.com/dotnet/project-system/issues/4163","Url":"https://github.com/dotnet/roslyn/pull/33653","RelatedDescription":"Open PR \"TempPE compiler fixes\" (#33653)"},{"Id":"413912471","IsPullRequest":false,"CreatedAt":"2019-02-25T03:01:28","Actor":"sharwell","Number":"33652","RawContent":null,"Title":"FailFast in SolutionState.CheckContainsDocument","State":"open","Body":"**Version Used**: #33646\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=105532\r\n\r\n**Steps to Reproduce**:\r\n\r\nFound in integration tests.\r\n\r\n```\r\nEvent Time (UTC): 2/25/2019 1:26:22 AM\r\nEvent ID: 1025\r\nData: Application: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.Exception\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)\r\n   at System.Diagnostics.TraceListener.Fail(System.String)\r\n   at System.Diagnostics.TraceInternal.Fail(System.String)\r\n   at System.Diagnostics.Debug.Assert(Boolean)\r\n   at Microsoft.CodeAnalysis.SolutionState.CheckContainsDocument(Microsoft.CodeAnalysis.DocumentId)\r\n   at Microsoft.CodeAnalysis.SolutionState.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)\r\n   at Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)\r\n   at Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)\r\n   at Microsoft.CodeAnalysis.Text.Extensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+<UpdateAsync>d__7.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+<UpdateAsync>d__7, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<UpdateAsync>d__7 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree.UpdateAsync(Microsoft.VisualStudio.Text.ITextSnapshot, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+<RebuildAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+<RebuildAsync>d__9, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<RebuildAsync>d__9 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache.RebuildAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+<UpdateSnapshotAsync>d__15.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+<UpdateSnapshotAsync>d__15, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<UpdateSnapshotAsync>d__15 ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger.UpdateSnapshotAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1+<<UpdateSnapshotAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1+<<UpdateSnapshotAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.VisualStudio.CodeSense, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](<<UpdateSnapshotAsync>b__0>d<System.__Canon> ByRef)\r\n   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+<>c__DisplayClass22_1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<UpdateSnapshotAsync>b__0(System.Threading.Tasks.Task`1<Int32>)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33652","RelatedDescription":"Open issue \"FailFast in SolutionState.CheckContainsDocument\" (#33652)"},{"Id":"413885991","IsPullRequest":true,"CreatedAt":"2019-02-25T01:30:08","Actor":"dotnet-bot","Number":"33649","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33649","RelatedDescription":"Closed or merged PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#33649)"},{"Id":"413886013","IsPullRequest":true,"CreatedAt":"2019-02-25T01:30:05","Actor":"dotnet-bot","Number":"33650","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33650","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33650)"},{"Id":"413886205","IsPullRequest":true,"CreatedAt":"2019-02-25T00:01:48","Actor":"CyrusNajmabadi","Number":"33651","RawContent":null,"Title":"Add 'use var when explicit' as a new option for when 'var' is allowed.","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/29657\r\n\r\n1. Followup to https://github.com/dotnet/roslyn/pull/33647.  This will be easier to review if that goes in.\r\n2. There's a large amount of diff here due to resource files switchin from tabs to spaces.  not sure what's up with that.\r\n\r\n## Description\r\n\r\nThis PR stems from several pieces of feedback we've gotten over time about how \"use var when type is apparent\" is a bit too broad for some people's tastes.\r\n\r\nSpecifically, \"when apparent\" has a couple of cases that are a little too broad for people.  For example, 'when apparent' supports this case:\r\n\r\n```c#\r\nvar v = x.ToString();\r\n```\r\n\r\nThe feeling here was that a `ToXXX` method made it apparent-enough that the type on the left would be `XXX`.  However, this was unpleasant for some as it's a very tenuous connection, with `XXX` not actually appearing on the RHS as an actual type.\r\n\r\nIn a similar vein, \"when apparent\" was not strict about generics.  if you had, for example:\r\n\r\n```c#\r\nvar arr = ImmutableArray.Create(1, 2, 3);\r\n```\r\n\r\nIt would consider this an apparent enough match since the type on the left and the right are both `ImmutableArray` in terms of their name.  However, the type on the left is `ImmutableArray<int>` and the lack of `int` on the RHS made this unpalatable for people.\r\n\r\nFinally, there were common method invocation patterns not detected.  For example:\r\n\r\n```c#\r\nvar logger = component.GetService<ILogger>();\r\n```\r\n\r\nIn this case, people felt that this was an apparent use of ILogger and should fall under that category.\r\n\r\nin this PR we now add a new editorconfig option `csharp_style_var_when_type_is_explicit`.  The meaning is similar to `csharp_style_var_when_type_is_apparent` except that it's now a requirement that the actual type show up in an appropriate location in syntax on the RHS.  The allowed syntax locations are:\r\n\r\n1. `= default(SomeType)`\r\n2. `= new SomeType(...)`\r\n3. `= new SomeType[...] { ... }`\r\n4. `= ... as SomeType`\r\n5. `= (SomeType)...`\r\n6. `= Foo<SomeType>(...)` (Foo has to return `SomeType`).\r\n7. `= SomeType.FactoryMethod(...)` (FactoryMethod has to return `SomeType`).\r\n\r\n## Design questions\r\n\r\nNote: there is an open design question around tuples.  i.e. if you have:\r\n\r\n```c#\r\nvar v = (default(SomeType), default(SomeOtherType);\r\n```\r\n\r\nIs the type of 'v' considered 'explicit'?  I personally think so.  It's clearly `(SomeType, SomeOtherType)` from very obvious syntax.  However, i could see some debate here, so i bring this up in case we want to consider that non-explicit.\r\n\r\nAlso, there are questions about certain C# constructs that are completely clear about what type they are, even if the type is not stated.  for example `var v = x is Y`.  'bool' here has the type `bool`.  But `bool` was never stated explicit.  Do we care about this sort of case?  Probably not IMO. It's pretty reasonable that `explicit` means `stated as type` or `stated as type within a large type syntax` (like the tuple case).  \r\n\r\n## UI \r\n\r\nTo help make the concept understandable, here's the UI:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/53307441-76e70680-384d-11e9-9539-5545cf93cf4f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/53307443-7cdce780-384d-11e9-83a5-1fe62927008e.png)\r\n\r\n## TODO\r\n\r\n- [ ] Needs tests.  Especially around the interaction between apparent/explicit.  We need tests for all four permutations of that.","Url":"https://github.com/dotnet/roslyn/pull/33651","RelatedDescription":"Open PR \"Add 'use var when explicit' as a new option for when 'var' is allowed.\" (#33651)"},{"Id":"413878032","IsPullRequest":true,"CreatedAt":"2019-02-24T22:42:37","Actor":"gafter","Number":"33648","RawContent":null,"Title":"Revise NullableWalker to use a two-state solution","State":"open","Body":"The NullableWalker is revised so that the inferred state of an expression is either `NotNull` or `MaybeNull` (represented by the new type `NullableFlowState`).  There is no longer such as thing as an oblivious rvalue.  There are four kinds of lvalues:\r\n- oblivious lvalues read as NotNull but null can be written to them\r\n- annotated lvalues read as MaybeNull and null can be written to them\r\n- unannotated lvalues read as NotNull and null may not be written to them\r\n- unconstrained type parameters read as MaybeNull but null may not be written to them\r\n\r\nIn order to preserve the safety in the face of such unconstrained type parameters, we warn immediately when a null value of such a type is introduced.  This is a safety warning.  The contexts in which such a warning are given are\r\n- `default` and `default(T)`\r\n- `null` conversion to `T` (when `T` is known to be ref type)\r\n- `e?.M()` when the return type is `T`\r\n- dynamic conversion or cast to `T` when the dynamic might be null\r\n- explicit conversion to `T`\r\n- `e as T` when there is not an implicit conversion from the type of `e` to `T`\r\n- a call to a method like `FirstOrDefault()` that is annotated with `[MaybeNull] (not yet implemented)\r\n\r\nWe remove the hidden diagnostics previously computed by the NullableWalker.\r\n\r\nWe add debugger display support for a number of types used by the NullableWalker.  The display for `NullableWalker` summarizes the computed nullability of variables in a nice compact form.\r\n\r\nWe remove support for definite assignment in the NullableWalker.  Some scenarios involving the use of not-definitely-assigned variables may cause cascaded diagnostics.  We might remove them in the future by initializing all vaiables to the `NotNull` state when they enter scope.\r\n\r\nWe overhaul and simplify the inplementation of conversions, the null-conditional operator, and result inference for lifted operators.\r\n\r\nWe simplify the Meet and Join operations so that they form a lattice on both the NullableAnnotation and NullableFlowState.\r\n\r\nCatch variables are now initialized to a non-null state on entry to the catch block.\r\n\r\nIn unreachable code, every expression produces a non-null rvalue.  An erroneous expression produces a non-null rvalue (to suppress cascaded diagnostics).","Url":"https://github.com/dotnet/roslyn/pull/33648","RelatedDescription":"Open PR \"Revise NullableWalker to use a two-state solution\" (#33648)"},{"Id":"413876868","IsPullRequest":true,"CreatedAt":"2019-02-24T22:30:59","Actor":"CyrusNajmabadi","Number":"33647","RawContent":null,"Title":"Rename and cleanup some members in the 'use var' feature.","State":"open","Body":"Precursor to some additional work i'm doing here.\r\n\r\nReviewing a commit at a time would likely be useful.","Url":"https://github.com/dotnet/roslyn/pull/33647","RelatedDescription":"Open PR \"Rename and cleanup some members in the 'use var' feature.\" (#33647)"},{"Id":"413871070","IsPullRequest":true,"CreatedAt":"2019-02-24T21:33:59","Actor":"sharwell","Number":"33646","RawContent":null,"Title":"Cherry-pick test fixes","State":"open","Body":"It has become clear that we will not be able to complete an integration test build for dev16.0-vs-deps without the fixes that were made to the master branch. This pull request cherry-picks a set of test-only changes to stabilize the dev16.0 and dev16.0-vs-deps branches.","Url":"https://github.com/dotnet/roslyn/pull/33646","RelatedDescription":"Open PR \"Cherry-pick test fixes\" (#33646)"},{"Id":"413869490","IsPullRequest":false,"CreatedAt":"2019-02-24T21:29:49","Actor":"gafter","Number":"33645","RawContent":null,"Title":"Must reinfer lambdas in NullableWalker from computed states","State":"closed","Body":"In `NullableWalker`, we reinfer a lambda's return type by binding it in the context of a reinferred method.  However, we do so using the original binder.  That results in the wrong computed return type for the lambda, as the original binder does not make use of the computed types and nullabilities from the nullable walker.\r\n\r\nHere is a test that fails because of this:\r\n\r\n``` c#\r\n        [Fact]\r\n        public void ReinferLambdaReturnType()\r\n        {\r\n            var source =\r\n@\"using System;\r\nclass C\r\n{\r\n    static T F<T>(Func<T> f) => f();\r\n    static void G(object? x)\r\n    {\r\n        F(() => x)/*T:object?*/;\r\n        if (x == null) return;\r\n        F(() => x)/*T:object!*/;\r\n    }\r\n}\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics();\r\n            comp.VerifyTypes();\r\n        }\r\n```\r\n\r\nHere is the failure mode:\r\n\r\n``` none\r\nMessage: void C.G(System.Object? x)\r\n\r\nExpected:\r\nobject?,\r\nobject!\r\nActual:\r\nobject?,\r\nobject?\r\nDifferences:\r\n    object?,\r\n++> object?,\r\n--> object!\r\n\r\nExpected: True\r\nActual:   False\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33645","RelatedDescription":"Closed issue \"Must reinfer lambdas in NullableWalker from computed states\" (#33645)"},{"Id":"413865056","IsPullRequest":false,"CreatedAt":"2019-02-24T20:36:52","Actor":"RikkiGibson","Number":"33644","RawContent":null,"Title":"DeclarePublicAPIFix code fix crashing","State":"open","Body":"**Version Used**:\r\ndev16 preview. Doesn't reproduce in dev15.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add public API to Microsoft.CodeAnalysis.CSharp\r\n2. Inspect the new diagnostic on the member not added to PublicAPI.Unshipped.txt\r\n3. Run the DeclarePublicAPIFix\r\n\r\n**Expected Behavior**:\r\n\r\nLine added to PublicAPI.Unshipped.txt\r\n\r\n**Actual Behavior**:\r\n\r\nCode fix is disabled with the exception/stack trace below:\r\n```\r\nSystem.AggregateException : One or more errors occurred. ---> Object reference not set to an instance of an object.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n---> (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)\r\n   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)<---\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33644","RelatedDescription":"Open issue \"DeclarePublicAPIFix code fix crashing\" (#33644)"},{"Id":"413859314","IsPullRequest":true,"CreatedAt":"2019-02-24T19:40:42","Actor":"emilefokkema","Number":"33643","RawContent":null,"Title":"skip new lines when moving trivia from one node to another","State":"open","Body":"This fixes https://github.com/dotnet/roslyn/issues/33345.\r\n\r\nThere is a `SyntaxNode` extension method called `WithPrependedNonIndentationTriviaFrom`, which takes trivia from one node and prepends them to a node that comes next. But because the node from which they are taken is in the process of being removed, any leading new lines preceding the next node are no longer needed. So the method `WithPrependedNonIndentationTriviaFrom` is changed to take those new lines into account and to do so by making better use of the `SyntaxTriviaListExtensions`.","Url":"https://github.com/dotnet/roslyn/pull/33643","RelatedDescription":"Open PR \"skip new lines when moving trivia from one node to another\" (#33643)"},{"Id":"413859125","IsPullRequest":true,"CreatedAt":"2019-02-24T19:39:01","Actor":"sharwell","Number":"33642","RawContent":null,"Title":"Fix integration test hangs","State":"open","Body":"These cases were found during reviews of recent integration test run failures.","Url":"https://github.com/dotnet/roslyn/pull/33642","RelatedDescription":"Open PR \"Fix integration test hangs\" (#33642)"},{"Id":"413813892","IsPullRequest":true,"CreatedAt":"2019-02-24T13:30:05","Actor":"dotnet-bot","Number":"33640","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33640","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33640)"},{"Id":"413820669","IsPullRequest":false,"CreatedAt":"2019-02-24T13:18:21","Actor":"Diaskhan","Number":"33641","RawContent":null,"Title":"Generate EntityTypeConfiguration Chain call?","State":"open","Body":"**Version Used**: \r\nMicrosoft.CodeAnalysis\" Version=\"2.10.0\"\r\n\r\n**Steps to Reproduce**:\r\nHow to generate chain method call ?\r\nA have some Entity and I want generate EntityTypeConfiguration for ef core ?\r\nCould  U fellows guide me how to do it ?\r\n\r\n```\r\npublic class StudentEntityConfiguration: EntityTypeConfiguration<Student>\r\n{\r\n    public StudentEntityConfiguration()\r\n    {\r\n            this.ToTable(\"StudentInfo\");\r\n                \r\n            this.HasKey<int>(s => s.StudentKey);\r\n                \r\n            this.Property(p => p.DateOfBirth)\r\n                    .HasColumnName(\"DoB\")\r\n                    .HasColumnOrder(3)\r\n                    .HasColumnType(\"datetime2\");\r\n\r\n            this.Property(p => p.StudentName)\r\n                    .HasMaxLength(50);\r\n                        \r\n            this.Property(p => p.StudentName)\r\n                    .IsConcurrencyToken();\r\n                \r\n            this.HasMany<Course>(s => s.Courses)\r\n                .WithMany(c => c.Students)\r\n                .Map(cs =>\r\n                        {\r\n                            cs.MapLeftKey(\"StudentId\");\r\n                            cs.MapRightKey(\"CourseId\");\r\n                            cs.ToTable(\"StudentCourse\");\r\n                        });\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n**Actual Behavior**:","Url":"https://github.com/dotnet/roslyn/issues/33641","RelatedDescription":"Open issue \"Generate EntityTypeConfiguration Chain call?\" (#33641)"},{"Id":"413806082","IsPullRequest":false,"CreatedAt":"2019-02-24T10:22:45","Actor":"gafter","Number":"33639","RawContent":null,"Title":"When we compute a nullable annotation in flow analysis, should we use the context?","State":"open","Body":"The current LDM position is that we use the annotation context to compute the annotations (oblivious versus non-nullable).  We don't currently do this.\r\n\r\nPersonally, I think we should change the LDM's mind about this rather than implementing it.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33639","RelatedDescription":"Open issue \"When we compute a nullable annotation in flow analysis, should we use the context?\" (#33639)"},{"Id":"413804990","IsPullRequest":false,"CreatedAt":"2019-02-24T10:10:44","Actor":"gafter","Number":"33638","RawContent":null,"Title":"Incorrect nullability inferred with nested generics (nullable walker)","State":"open","Body":"The following test should produce no diagnostics, but it produces diagnostics.\r\n\r\n``` c#\r\n        [Fact]\r\n        public void TupleFromNestedGenerics()\r\n        {\r\n            var source =\r\n@\"public class G<T>\r\n{\r\n    public (T, U) M<U>(T t, U u) => (t, u);\r\n}\r\npublic class C\r\n{\r\n    public (T, U) M<T, U>(T t, U u) => (t, u);\r\n}\r\n\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics(\r\n                // (3,37): warning CS8619: Nullability of reference types in value of type '(T t, U u)' doesn't match target type '(T, U)'.\r\n                //     public (T, U) M<U>(T t, U u) => (t, u);\r\n                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, \"(t, u)\").WithArguments(\"(T t, U u)\", \"(T, U)\").WithLocation(3, 37),\r\n                // (7,40): warning CS8619: Nullability of reference types in value of type '(T t, U u)' doesn't match target type '(T, U)'.\r\n                //     public (T, U) M<T, U>(T t, U u) => (t, u);\r\n                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, \"(t, u)\").WithArguments(\"(T t, U u)\", \"(T, U)\").WithLocation(7, 40));\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33638","RelatedDescription":"Open issue \"Incorrect nullability inferred with nested generics (nullable walker)\" (#33638)"},{"Id":"413804176","IsPullRequest":false,"CreatedAt":"2019-02-24T10:01:33","Actor":"gafter","Number":"33637","RawContent":null,"Title":"Method groups not inferred based on receiver type (nullable walker)","State":"open","Body":"In `NullableWalker.VisitMethodGroup`, we recompute the type of the group's receiver and then drop it on the floor.  When the method group is an argument to a generic, we will need the recomputed method (or group of methods) for proper type inference.\r\n\r\nHere is a test that demonstrates the issue:\r\n\r\n``` c#\r\n        [Fact]\r\n        public void MethodGroupReinferredAfterReceiver()\r\n        {\r\n            var source =\r\n@\"public class C\r\n{\r\n    G<T> CreateG<T>(T t) => new G<T>();\r\n    void Main(string? s1, string? s2)\r\n    {\r\n        Run(CreateG(s1).M, s2)/*T:(string?, string?)!*/;\r\n        if (s1 == null) return;\r\n        Run(CreateG(s1).M, s2)/*T:(string!, string?)!*/;\r\n        if (s2 == null) return;\r\n        Run(CreateG(s1).M, s2)/*T:(string!, string!)!*/;\r\n    }\r\n    (T, U) Run<T, U>(MyDelegate<T, U> del, U u) => del(u);\r\n}\r\npublic class G<T>\r\n{\r\n    public T t = default(T)!;\r\n    public (T, U) M<U>(U u) => (t, u)!;\r\n}\r\npublic delegate (T, U) MyDelegate<T, U>(U u);\r\n\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics();\r\n            comp.VerifyTypes();\r\n        }\r\n```\r\n\r\nThe failure is\r\n\r\n``` none\r\nMessage: void C.Main(System.String? s1, System.String? s2)\r\n\r\nExpected:\r\n(string?, string?)!,\r\n(string!, string?)!,\r\n(string!, string!)!\r\nActual:\r\n(string, string?),\r\n(string, string?),\r\n(string, string!)\r\nDifferences:\r\n++> (string, string?),\r\n++> (string, string?),\r\n++> (string, string!),\r\n--> (string?, string?)!,\r\n--> (string!, string?)!,\r\n--> (string!, string!)!\r\n\r\nExpected: True\r\nActual:   False\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33637","RelatedDescription":"Open issue \"Method groups not inferred based on receiver type (nullable walker)\" (#33637)"},{"Id":"413803961","IsPullRequest":false,"CreatedAt":"2019-02-24T09:59:11","Actor":"Dreamescaper","Number":"33636","RawContent":null,"Title":"IntelliSense: double quote character should not be commit character","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 Preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\nHaving any item selected in IntelliSense, press `\"`\r\n\r\n**Expected Behavior**:\r\nIntelliSense item is not commited, `\"` is typed\r\n\r\n**Actual Behavior**:\r\nIntelliSense item is commited, `\"` is typed after item text.\r\n\r\n![2019-02-24_11-58-24](https://user-images.githubusercontent.com/17177729/53297746-93724700-382b-11e9-99b4-171bd5d8e22f.gif)\r\n","Url":"https://github.com/dotnet/roslyn/issues/33636","RelatedDescription":"Open issue \"IntelliSense: double quote character should not be commit character\" (#33636)"},{"Id":"413799862","IsPullRequest":false,"CreatedAt":"2019-02-24T09:06:49","Actor":"gafter","Number":"33635","RawContent":null,"Title":"We drop method group return nullability in nullability reinference","State":"open","Body":"When we reinfer a method's type based on its arguments in the nullable walker, if one of those arguments is the method group of a method, we drop the nullability of its return during type inference.  We should use either the declared nullability of the inferred method from the group, or convert oblivious to non-null as a final step.  Either way, we should not replace the returned nullability with oblivious, as we currently do in `MethodTypeInference.MethodGroupReturnTypeInference`.\r\n\r\nRelated to this, we should only infer using the one method from the method group that was selected by initial binding. We can ignore other candidates.\r\n\r\nI have marked an affected test and the relevant area of the compiler with this issue.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33635","RelatedDescription":"Open issue \"We drop method group return nullability in nullability reinference\" (#33635)"},{"Id":"413798510","IsPullRequest":false,"CreatedAt":"2019-02-24T08:51:30","Actor":"jimmylewis","Number":"33634","RawContent":null,"Title":"C# Code Style settings should expose dotnet_style_require_accessibility_modifiers editorconfig setting","State":"open","Body":"**Version Used**: VS2019 Preview 4 (dogfood)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Tools -> Options -> C# -> Code Style\r\n2. Try to find an option to match the dotnet_style_require_accessibility_modifiers editorconfig property\r\n\r\n**Expected Behavior**:\r\nOption should exist, as this property exists for editorconfig (and is documented).\r\n\r\n**Actual Behavior**:\r\nNo options exist.","Url":"https://github.com/dotnet/roslyn/issues/33634","RelatedDescription":"Open issue \"C# Code Style settings should expose dotnet_style_require_accessibility_modifiers editorconfig setting\" (#33634)"},{"Id":"413797114","IsPullRequest":false,"CreatedAt":"2019-02-24T08:37:42","Actor":"jimmylewis","Number":"33633","RawContent":null,"Title":"VS Tools->Options settings for using statements should move into Code Style section","State":"open","Body":"**Version Used**: VS2019 Preview 4 (dogfood)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Tools -> Options, find C# Code Style settings\r\n2. Look for the settings about Using statements (they are actually located on the C# Advanced page)\r\n  * Place 'System' directives first when sorting usings\r\n  * Separate using directive groups\r\n3. Set them as desired,\r\n4. Export .editorconfig settings from the Code Style page\r\n\r\n**Expected Behavior**:\r\nThese settings should be included in the generated .editorconfig file, since there are .editorconfig settings for them.\r\n\r\n**Actual Behavior**:\r\nThey are left out, because they are not located in the Code Style page.  They *are* code style features though.","Url":"https://github.com/dotnet/roslyn/issues/33633","RelatedDescription":"Open issue \"VS Tools->Options settings for using statements should move into Code Style section\" (#33633)"},{"Id":"413791908","IsPullRequest":true,"CreatedAt":"2019-02-24T07:33:56","Actor":"cston","Number":"33632","RawContent":null,"Title":"Store type and slot in VisitResult","State":"open","Body":"Change `VisitResult` to `{ Type, Slot }`, representing the inferred type of the visited expression and an optional slot for tracked variables.\r\n\r\nIf `VisitRvalue(expr)` is called (or `MakeRvalue()` is called after `Visit(expr)`), the top-level nullability of the result type is updated from the tracked state. ","Url":"https://github.com/dotnet/roslyn/pull/33632","RelatedDescription":"Open PR \"Store type and slot in VisitResult\" (#33632)"},{"Id":"413749328","IsPullRequest":true,"CreatedAt":"2019-02-23T22:25:13","Actor":"CyrusNajmabadi","Number":"33631","RawContent":null,"Title":"Code wrapping refactorings should be lower pri than other refactorings","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/33605\r\n\r\nAfter this change, lightbulb list looks like:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/53292546-a6780f00-3778-11e9-9fd7-db7e1f7c5d1b.png)\r\n","Url":"https://github.com/dotnet/roslyn/pull/33631","RelatedDescription":"Open PR \"Code wrapping refactorings should be lower pri than other refactorings\" (#33631)"},{"Id":"413728306","IsPullRequest":false,"CreatedAt":"2019-02-23T19:15:45","Actor":"miloush","Number":"33630","RawContent":null,"Title":"Autocompletion missing arguments","State":"open","Body":"**Version Used**: VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nstatic void Main(int x, int y)\r\n{\r\n    int m = | x * y;\r\n    int s =  x + y;\r\n}\r\n```\r\nImagine you want to prepend the formula, e.g. make it `int m = y + x * y`. However, when you type `y` in front of `x * y`, i.e. `y| x * y`, it is not offered in autocomplete and random entry with `y` will be committed when pressing space.\r\n\r\nAll other cases work:\r\n1. Type `x` in front of `x + y` , i.e. `x| x + y`. `x` is in autocomplete.\r\n2. Type `y` instead, i.e. `y| x + y`. `y` is in autocomplete.\r\n3. Type `x` in front of `x * y`, i.e. `x| x * y`. `x` is in autocomplete.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33630","RelatedDescription":"Open issue \"Autocompletion missing arguments\" (#33630)"},{"Id":"413723218","IsPullRequest":false,"CreatedAt":"2019-02-23T18:32:55","Actor":"rikimaru0345","Number":"33629","RawContent":null,"Title":"Is there any way to get (and apply) all code fixes","State":"open","Body":"How can I apply all code fixes that VS would normally suggest, but from a custom commandline tool.\r\nI've seen\r\n https://github.com/dotnet/roslyn/issues/2020 \r\nand \r\nhttps://github.com/dotnet/roslyn/issues/2709\r\nbut I'm not sure how, or if, they are related.\r\n\r\nSo basically I want to apply all the built-in code fixes like `IDE0049` (\"Name can be simplified\") to a `Microsoft.CodeAnalysis.Document`.\r\nIs that possible? If so, here would I start?\r\n\r\nI've tried to track down the implementations of those fixes, but they're all marked as internal.\r\nBut maybe there's some public static list or enumerable somewhere that contains all of them so outside users can still use and apply them?\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33629","RelatedDescription":"Open issue \"Is there any way to get (and apply) all code fixes\" (#33629)"},{"Id":"413702048","IsPullRequest":true,"CreatedAt":"2019-02-23T14:40:50","Actor":"sharwell","Number":"33628","RawContent":null,"Title":"Non-private readonly fields are PascalCase","State":"open","Body":"Fixes #33608","Url":"https://github.com/dotnet/roslyn/pull/33628","RelatedDescription":"Open PR \"Non-private readonly fields are PascalCase\" (#33628)"},{"Id":"413675205","IsPullRequest":false,"CreatedAt":"2019-02-23T09:00:39","Actor":"vsfeedback","Number":"33627","RawContent":null,"Title":"Find All References is broken on mixed F# and C# solution","State":"open","Body":"VSF_TYPE_MARKDOWNWe are waiting for more then two years while the Visual Studio team will fixed this issue. But the issue is still in the VS 2019 Preview 3.\nWe always need to unload F# projects from the solution for the normal fork with Find All References feature.\n\nI have attached a small sample project. The issue can be reproduced in VS 2017 (15.9.7) and in VS 2019 Preview 3.\nSteps to reproduce:\n1. Open the attached project\n2. Open the Class1 file from the CSLibrary\n3. Try to execute Find All References on the GetInt function\n\nActual result:\nThe Find All References operation is never be finished\n\nExpected result:\nShow all references for the GetInt function.\n\nPlease fix this issue before VS2019 will be released.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/464811/find-all-references-is-broken-on-mixed-f-and-c-sol.html\nVSTS ticketId: 797556_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/21/2019, 00:40 AM (2 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33627","RelatedDescription":"Open issue \"Find All References is broken on mixed F# and C# solution\" (#33627)"},{"Id":"413659348","IsPullRequest":false,"CreatedAt":"2019-02-23T05:23:17","Actor":"DavidKarlas","Number":"33626","RawContent":null,"Title":"async completion: eats existing code on commit","State":"open","Body":"**Version Used**: \r\nVS 2019 Preview 3\r\n**Steps to Reproduce**:\r\n\r\n1.  Create standard Console app\r\n2. type `override` above `static void Main..` method\r\n3. create space and press Ctrl+Space to trigger code completion\r\n4. type `asdasdasdasdasdasd` or any random text\r\n5. select one of code completion options and press Enter\r\n\r\n**Expected Behavior**:\r\nNicely inserted new code\r\n**Actual Behavior**:\r\n<img width=\"439\" alt=\"image\" src=\"https://user-images.githubusercontent.com/774791/53282110-7d815b00-3733-11e9-80ea-1002d7b7b96f.png\">\r\n","Url":"https://github.com/dotnet/roslyn/issues/33626","RelatedDescription":"Open issue \"async completion: eats existing code on commit\" (#33626)"},{"Id":"413635790","IsPullRequest":true,"CreatedAt":"2019-02-23T01:08:28","Actor":"AlekseyTs","Number":"33625","RawContent":null,"Title":"Support static constructors in interfaces","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33625","RelatedDescription":"Open PR \"Support static constructors in interfaces\" (#33625)"},{"Id":"413630079","IsPullRequest":true,"CreatedAt":"2019-02-23T00:30:21","Actor":"chborl","Number":"33624","RawContent":null,"Title":"Offer to add parameter to constructor with no existing parameters","State":"open","Body":"Fixes #33602","Url":"https://github.com/dotnet/roslyn/pull/33624","RelatedDescription":"Open PR \"Offer to add parameter to constructor with no existing parameters\" (#33624)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"413877055","IsPullRequest":true,"CreatedAt":"2019-02-24T22:33:06","Actor":"MichalStrehovsky","Number":"7078","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"git merge 617d11b313ebdf83cd4e697dd0b04c290472d4ad\r\n\r\nNot picking up the header change that messed up Redhawk.","Url":"https://github.com/dotnet/corert/pull/7078","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7078)"},{"Id":"413695028","IsPullRequest":true,"CreatedAt":"2019-02-24T16:08:12","Actor":"MichalStrehovsky","Number":"7076","RawContent":null,"Title":"Fix generation of type forwarder metadata","State":"closed","Body":"We were not setting the public key/token for the reference.","Url":"https://github.com/dotnet/corert/pull/7076","RelatedDescription":"Closed or merged PR \"Fix generation of type forwarder metadata\" (#7076)"},{"Id":"413711302","IsPullRequest":true,"CreatedAt":"2019-02-23T16:23:04","Actor":"yowl","Number":"7077","RawContent":null,"Title":"WIP: wasm: fix for incorrect use of VirtualMethodUseNode for generic method","State":"open","Body":"fixes #7073 .  Generic virtual methods were creating a `VirtualMethodUseNode` which I understand to be incorrect.  This PR adds a test for this type of call and calls `NodeFactory.MethodEntrypoint` instead.  I'd welcome feedback on how correct that is, it passes the simple test here, but possibly I'm not understanding the full implication.  Also I've not changed the processing for the `Ldvirtftn` opcode, would that suffer the same problem and if so, how would that be exercised?","Url":"https://github.com/dotnet/corert/pull/7077","RelatedDescription":"Open PR \"WIP: wasm: fix for incorrect use of VirtualMethodUseNode for generic method\" (#7077)"},{"Id":"413695008","IsPullRequest":true,"CreatedAt":"2019-02-23T13:17:22","Actor":"MichalStrehovsky","Number":"7075","RawContent":null,"Title":"Make binary serialization work","State":"open","Body":"Three parts:\r\n\r\n* Expose serialization-related metadata in the type system.\r\n* Poke holes into reflection blocking to make binary serialization work for FX types\r\n* Update the usage based metadata analyzer to scan for binary serialization.\r\n\r\nThis fixes about 300 failing tests newly exposed in #6987.","Url":"https://github.com/dotnet/corert/pull/7075","RelatedDescription":"Open PR \"Make binary serialization work\" (#7075)"},{"Id":"413641865","IsPullRequest":true,"CreatedAt":"2019-02-23T02:00:27","Actor":"Dotnet-GitSync-Bot","Number":"7074","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7074","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7074)"},{"Id":"413631372","IsPullRequest":false,"CreatedAt":"2019-02-23T00:38:11","Actor":"yowl","Number":"7073","RawContent":null,"Title":"wasm: A generic method on an interface fails to compile","State":"open","Body":"The following code fails to compile as it hits an assert:\r\n```\r\n    private static void TestVirtualMethodUse()\r\n    {\r\n        TestGenItf implInt = new TestGenItf();\r\n        implInt.Log<object>(new object());\r\n    }\r\n\r\n    public interface ITestGenItf\r\n    {\r\n        bool Log<TState>(TState state);\r\n    }\r\n\r\n    public class TestGenItf : ITestGenItf\r\n    {\r\n        public bool Log<TState>(TState state)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n\r\nHits the assert at \r\nhttps://github.com/dotnet/corert/blob/a99bac8c410b9cbb2b5f6583105ea53db372e61d/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/VirtualMethodUseNode.cs#L39\r\nwhen compiling the method `{[HelloWasm]Program+TestGenItf.Log<TState>(!!0)}`\r\n\r\nStack is\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Debug.Assert(bool condition, string message, string detailMessage) Line 107\tC#\r\n>\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.VirtualMethodUseNode.VirtualMethodUseNode(Internal.TypeSystem.MethodDesc decl) Line 39\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.CreateNodeCaches.AnonymousMethod__36_19(Internal.TypeSystem.MethodDesc method) Line 303\tC#\r\n \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key, System.Func<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode> valueFactory) Line 989\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NodeCache<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key) Line 150\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.VirtualMethodUse(Internal.TypeSystem.MethodDesc decl) Line 885\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.AddVirtualMethodReference(Internal.TypeSystem.MethodDesc method) Line 2330\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.StackEntry[] argumentValues, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget, Internal.TypeSystem.TypeDesc forcedReturnType) Line 2037\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget) Line 2029\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportCall(Internal.IL.ILOpcode opcode, int token) Line 1688\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlock(Internal.IL.ILImporter.BasicBlock basicBlock) Line 581\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlocks() Line 304\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.Import() Line 163\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation compilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode methodCodeNodeNeedingCode) Line 86\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> obj) Line 62\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> deferredStaticDependencies) Line 139\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeMarkedNodes() Line 262\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(string outputFile, ILCompiler.ObjectDumper dumper) Line 51\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.ILCompiler.ICompilation.Compile(string outputFile, ILCompiler.ObjectDumper dumper) Line 382\tC#\r\n \tilc.dll!ILCompiler.Program.Run(string[] args) Line 574\tC#\r\n \tilc.dll!ILCompiler.Program.Main(string[] args) Line 730\tC#\r\n```","Url":"https://github.com/dotnet/corert/issues/7073","RelatedDescription":"Open issue \"wasm: A generic method on an interface fails to compile\" (#7073)"},{"Id":"413582574","IsPullRequest":true,"CreatedAt":"2019-02-22T22:28:10","Actor":"Dotnet-GitSync-Bot","Number":"7072","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7072","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7072)"},{"Id":"413511611","IsPullRequest":true,"CreatedAt":"2019-02-22T17:51:48","Actor":"kouvel","Number":"7071","RawContent":null,"Title":"Change Timer implementation on Unixes to use only one scheduling thread","State":"open","Body":"- Separated from https://github.com/dotnet/corert/pull/7066\r\n\r\nCC @filipnavara ","Url":"https://github.com/dotnet/corert/pull/7071","RelatedDescription":"Open PR \"Change Timer implementation on Unixes to use only one scheduling thread\" (#7071)"},{"Id":"413336838","IsPullRequest":true,"CreatedAt":"2019-02-22T17:41:03","Actor":"filipnavara","Number":"7069","RawContent":null,"Title":"Fix timer firing bug introduced in commit e652d4d (#6905 / #6898)","State":"closed","Body":"This is minimal fix for the problem described in https://github.com/dotnet/corert/pull/7066. I took the liberty to also include the accompanying test from that PR. I fully anticipate that this fix will eventually get superseded by the fix from #7066, but I would like to fix the regression as fast as possible for the master builds without waiting for unrelated changes to diagnostic counters.\r\n\r\n/cc @kouvel @jkotas ","Url":"https://github.com/dotnet/corert/pull/7069","RelatedDescription":"Closed or merged PR \"Fix timer firing bug introduced in commit e652d4d (#6905 / #6898)\" (#7069)"},{"Id":"413341138","IsPullRequest":true,"CreatedAt":"2019-02-22T14:03:16","Actor":"MichalStrehovsky","Number":"7070","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"We need to specify SkipImportRoslynProps because we don't want to include the props file from a bogus file path below, but we do want the 8.0 LangVersion treatment in ProjectN. Since this line is temporary until Roslyn decides that 8.0 is in fact the latest version, I don't feel too bad about this.","Url":"https://github.com/dotnet/corert/pull/7070","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#7070)"},{"Id":"413316220","IsPullRequest":true,"CreatedAt":"2019-02-22T10:33:17","Actor":"Dotnet-GitSync-Bot","Number":"7068","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7068","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7068)"},{"Id":"412787041","IsPullRequest":true,"CreatedAt":"2019-02-22T09:26:35","Actor":"Dotnet-GitSync-Bot","Number":"7065","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7065","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7065)"},{"Id":"413152043","IsPullRequest":true,"CreatedAt":"2019-02-21T22:24:05","Actor":"filipnavara","Number":"7067","RawContent":null,"Title":"WIP: Move Thread to shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22744.","Url":"https://github.com/dotnet/corert/pull/7067","RelatedDescription":"Open PR \"WIP: Move Thread to shared CoreLib\" (#7067)"},{"Id":"413116684","IsPullRequest":true,"CreatedAt":"2019-02-21T20:47:42","Actor":"kouvel","Number":"7066","RawContent":null,"Title":"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- May depend on https://github.com/dotnet/coreclr/pull/22754\r\n- Fixed `Timer` implementation on Unixes. Previously there was only ever one timer request from the upper-level implementation and that is not the case anymore, so the lower-level \"app domain timer\" implementation needed to handle multiple timer requests.","Url":"https://github.com/dotnet/corert/pull/7066","RelatedDescription":"Open PR \"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes\" (#7066)"},{"Id":"412674876","IsPullRequest":true,"CreatedAt":"2019-02-21T07:38:10","Actor":"yowl","Number":"7062","RawContent":null,"Title":"Wasm: fix to enable multidimensional array get and set operations","State":"closed","Body":"Enables get and set operations on multidimensional arrays.  Fixes https://github.com/dotnet/corert/issues/6263","Url":"https://github.com/dotnet/corert/pull/7062","RelatedDescription":"Closed or merged PR \"Wasm: fix to enable multidimensional array get and set operations\" (#7062)"},{"Id":"412680770","IsPullRequest":true,"CreatedAt":"2019-02-21T07:37:14","Actor":"yowl","Number":"7063","RawContent":null,"Title":"wasm: Add test for using","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/6474.  Or rather just adds a test for it as it was already working.  There was a test for `try/finally`, but not explicitly `using`.  That test is added here.","Url":"https://github.com/dotnet/corert/pull/7063","RelatedDescription":"Closed or merged PR \"wasm: Add test for using\" (#7063)"},{"Id":"412718852","IsPullRequest":true,"CreatedAt":"2019-02-21T07:36:24","Actor":"Dotnet-GitSync-Bot","Number":"7064","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7064","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7064)"},{"Id":"412594199","IsPullRequest":true,"CreatedAt":"2019-02-20T23:39:35","Actor":"Dotnet-GitSync-Bot","Number":"7059","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @benaadams @stephentoub @stephentoub","Url":"https://github.com/dotnet/corert/pull/7059","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7059)"},{"Id":"412664296","IsPullRequest":false,"CreatedAt":"2019-02-20T22:44:41","Actor":"Danl2620","Number":"7061","RawContent":null,"Title":"Q: Is there any mechanism to generate C++ header files from C#/F#?","State":"open","Body":"Is there a way to build a native static library from a C# project and also generate C++ header files corresponding to certain (potentially attributed) types in the C#/F#?  I'm trying to embed a native .NET project in a C++ project but need a way to get the type declarations correct.","Url":"https://github.com/dotnet/corert/issues/7061","RelatedDescription":"Open issue \"Q: Is there any mechanism to generate C++ header files from C#/F#?\" (#7061)"},{"Id":"412634026","IsPullRequest":true,"CreatedAt":"2019-02-20T21:21:10","Actor":"yowl","Number":"7060","RawContent":null,"Title":"WIP: Wasm: fix unaligned memory access for asm.js target","State":"open","Body":"This is a resubmit of https://github.com/dotnet/corert/pull/6432.  His initial description:\r\n\r\n> Asm.js does aligned memory accesses unless forced to do otherwise. This causes occasional memory corruption on various structures that aren't 4-byte aligned (two of which get used in interface dispatch). To handle that, this change:\r\n> \r\n>     1. Changes the LLVM representation of managed structs to approximately match the managed representation. This fixes DispatchMapEntry, which is 3 uint16s that can be 2-byte aligned.\r\n> \r\n>     2. Annotates an unaligned read used by OptionalFields so the compiler can handle it.\r\n\r\nI've added a few more fixes to get the `-s WASM=0` passing the tests (which the CI doesn't do).  You'll notice a few things which you may want to comment on:\r\n\r\n1. Use of `WASM && DEBUG` to mark sections where the output may go to asm.js, depending on `-s WASM=0`.  Maybe a different directive to `DEBUG` would be more descriptive?  I'm introducing the idea that for release mode the output will always be `-s WASM=1`, i.e. wasm.  This means that it wont be able to produce release mode for asm.js for IE for example.\r\n2. Only code paths that I hit are updated, so e.g. in `src\\Common\\src\\Internal\\NativeFormat\\NativeFormatReader.Primitives.cs` I did `ReadUInt32` and `ReadUInt16` but not the 8 and 64 bit variants.\r\n3. I've not done anything for https://github.com/dotnet/corert/pull/6432#discussion_r226932894 .  Is it suggested to do another section for `#if _MSC_VER`  with the `UNALIGNED` prefix back in?  I could try putting it in unconditionally, I'm not sure what happens to these lines, will they get converted to `unaligned ldind...` ?","Url":"https://github.com/dotnet/corert/pull/7060","RelatedDescription":"Open PR \"WIP: Wasm: fix unaligned memory access for asm.js target\" (#7060)"},{"Id":"412242850","IsPullRequest":true,"CreatedAt":"2019-02-20T19:34:10","Actor":"Dotnet-GitSync-Bot","Number":"7055","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7055","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7055)"},{"Id":"412463521","IsPullRequest":true,"CreatedAt":"2019-02-20T19:33:58","Actor":"kbaladurin","Number":"7057","RawContent":null,"Title":"Include eetype.inl in gcwks.cpp","State":"closed","Body":"Without it we have following error when link against release libRuntime.a:\r\n```\r\nlibRuntime.a(gcwks.cpp.o): In function `EEType::RequiresAlign8()':\r\neetype.h:546: undefined reference to `EEType::get_RareFlags()'\r\n...\r\n```","Url":"https://github.com/dotnet/corert/pull/7057","RelatedDescription":"Closed or merged PR \"Include eetype.inl in gcwks.cpp\" (#7057)"},{"Id":"412457741","IsPullRequest":true,"CreatedAt":"2019-02-20T16:58:27","Actor":"kbaladurin","Number":"7056","RawContent":null,"Title":"Fix objwriter build","State":"closed","Body":"Add include directories for LLVM build.","Url":"https://github.com/dotnet/corert/pull/7056","RelatedDescription":"Closed or merged PR \"Fix objwriter build\" (#7056)"},{"Id":"412475420","IsPullRequest":true,"CreatedAt":"2019-02-20T16:26:16","Actor":"kbaladurin","Number":"7058","RawContent":null,"Title":"Fix tizen rootfs building","State":"closed","Body":"Move tizen-release package from base to unified repo.","Url":"https://github.com/dotnet/corert/pull/7058","RelatedDescription":"Closed or merged PR \"Fix tizen rootfs building\" (#7058)"},{"Id":"412158659","IsPullRequest":true,"CreatedAt":"2019-02-20T04:38:50","Actor":"Dotnet-GitSync-Bot","Number":"7053","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe @stephentoub","Url":"https://github.com/dotnet/corert/pull/7053","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7053)"},{"Id":"412180530","IsPullRequest":true,"CreatedAt":"2019-02-19T23:57:12","Actor":"yowl","Number":"7054","RawContent":null,"Title":"Wasm: fix operations on bytes that are stored in shorts","State":"open","Body":"The final expression type for binary ops like `add` and shift ops `<<` was incorrectly set to `byte` when the operand was of type `byte`.  These operations act on ints (or int64 - which was ok), and they were incorrectly being truncated back to `byte`.  E.g.\r\n\r\n```\r\n        byte aByte = 2;\r\n        short aShort = 0x100;\r\n        short byteAndShortResult = (short)(aByte + aShort);\r\n```\r\nwas resulting in `2`.","Url":"https://github.com/dotnet/corert/pull/7054","RelatedDescription":"Open PR \"Wasm: fix operations on bytes that are stored in shorts\" (#7054)"},{"Id":"411994564","IsPullRequest":true,"CreatedAt":"2019-02-19T17:28:30","Actor":"Dotnet-GitSync-Bot","Number":"7052","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/7052","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7052)"},{"Id":"411707658","IsPullRequest":false,"CreatedAt":"2019-02-19T16:56:40","Actor":"yowl","Number":"7050","RawContent":null,"Title":"WASM: question - System.Buffer.Memmove unaligned memory assignment","State":"closed","Body":"When compiling to asm.js unaligned memory access is not allowed as when loading/storing int32s the address is `>>2` and when the least significant 2 bits contain 1s they are lost.  Looking at the special case for `Memmove` when the `len` is 14 (e.g. when `wstrcpy` of a string of length 7), it goes through \r\n\r\nhttps://github.com/dotnet/corert/blob/a3469f865ed1fd6388f3680704c0a018de8ad9ec/src/System.Private.CoreLib/src/System/Buffer.cs#L280-L283\r\n\r\nAnd it copies 8 bytes from the beginning which is fine, then 8 bytes from the end using offsets of `-8` and `-4` i,e `dest + len - 8` and `dest + len - 4` which would be dest + 6 and dest + 10 which are not 4 byte aligned, and then consequently fails when compiling/running with SAFE_HEAP=1.  asm.js is a useful target right now for debugging, so the question is, would it be appropriate to add some `#if WASM` logic here (and other special points in this function where it works from the end) to, for example, do a first copy on an int16 if not 4 byte aligned? \r\n","Url":"https://github.com/dotnet/corert/issues/7050","RelatedDescription":"Closed issue \"WASM: question - System.Buffer.Memmove unaligned memory assignment\" (#7050)"},{"Id":"411899806","IsPullRequest":false,"CreatedAt":"2019-02-19T12:28:59","Actor":"mig42","Number":"7051","RawContent":null,"Title":"[x64/Linux] log4net init reports unsupported platform for Named mutex","State":"open","Body":"OS: Ubuntu Linux 18.04\r\ndotnet version: 2.1.504\r\nMicrosoft.DotNet.ILCompiler version: 1.0.0-alpha-27419-01\r\n\r\nI'm using clang-6.0 to compile via environment variable:\r\n```\r\nexport CppCompilerAndLinker=clang-6.0\r\n```\r\n\r\nI'm trying to build a native single-file executable of my app in Linux. The build itself seems to finish successfully, but when I run my app I get this on `stdout`:\r\n```\r\nlog4net:ERROR Could not create Appender [DebugAppender] of type [log4net.Appender.RollingFileAppender]. Reported error follows.\r\nSystem.PlatformNotSupportedException: The named version of this synchronization primitive is not supported on this platform.\r\n   at System.Threading.Mutex.CreateMutexCore(Boolean, String, Boolean&) + 0x62\r\n   at log4net.Appender.RollingFileAppender.ActivateOptions() + 0x1d6\r\n   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(XmlElement) + 0x4fd\r\n\r\nlog4net:ERROR Appender named [DebugAppender] not found.\r\n```\r\nI tried different `lockingModel` values, but none of them prevented the error from happening.\r\n\r\nThese are the contents of my `rd.xml` file:\r\n```xml\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"log4net\" Dynamic=\"Required All\" />\r\n    <Assembly Name=\"System.Linq.Expressions\">\r\n      <Type Name=\"System.Linq.Expressions.ExpressionCreator`1[[Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]],Newtonsoft.Json]]\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.Linq.Expressions.ExpressionCreator`1[[System.Func`2[[System.Object,System.Private.CoreLib],[System.Object,System.Private.CoreLib]],System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n    <Assembly Name=\"Newtonsoft.Json\" >\r\n      <Type Name=\"Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n    <Assembly Name=\"System.ComponentModel.TypeConverter\">\r\n      <Type Name=\"System.ComponentModel.TypeConverter\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.ComponentModel.StringConverter\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.ComponentModel.Int32Converter\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\nRemoving the `log4net` assembly doesn't do anything either.\r\n\r\nI guess there must be something wrong with my setup or CoreRT doesn't support named mutex yet, because this code works OK if I run a self-contained publish... Do you have any idea about where to look now? Any help will be really appreciated.\r\n\r\nThanks!","Url":"https://github.com/dotnet/corert/issues/7051","RelatedDescription":"Open issue \"[x64/Linux] log4net init reports unsupported platform for Named mutex\" (#7051)"},{"Id":"411617288","IsPullRequest":true,"CreatedAt":"2019-02-19T07:51:21","Actor":"yowl","Number":"7049","RawContent":null,"Title":"wasm: Refactor simple tests and exit with error code on failure","State":"closed","Body":"There was a lot of duplication in the test pattern used and when a non-fatal error occurred the test exited with a success error code making finding errors a question of scanning the output for \"Failed\" text.  This PR removes some of the boilerplate in the tests and exits with `-1` in the case of a test failure.","Url":"https://github.com/dotnet/corert/pull/7049","RelatedDescription":"Closed or merged PR \"wasm: Refactor simple tests and exit with error code on failure\" (#7049)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"413197636","IsPullRequest":false,"CreatedAt":"2019-02-25T02:30:23","Actor":"natemcmaster","Number":"2976","RawContent":null,"Title":"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec","State":"closed","Body":"https://github.com/dotnet/sdk/blob/0690b28e426f5b7e6dfe7ab4200b83ce3c96bc95/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L81-L87\r\n\r\nThis should probably have been 'PrivateAssets=All'. \r\n\r\nAll aspnet 3.0 Preview 3 packages which target netcoreapp3.0 have this dependency in their nuspec. cc @Eilon @livarcocc \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/53213059-4e1c0280-35fc-11e9-9591-32f81f33502c.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2976","RelatedDescription":"Closed issue \"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec\" (#2976)"},{"Id":"413886149","IsPullRequest":true,"CreatedAt":"2019-02-25T02:30:21","Actor":"dotnet-bot","Number":"2987","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2987)"},{"Id":"413843026","IsPullRequest":true,"CreatedAt":"2019-02-24T21:53:25","Actor":"dsplaisted","Number":"2986","RawContent":null,"Title":"Mark implicit platforms package reference as PrivateAssets","State":"closed","Body":"Fixes #2976","Url":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Closed or merged PR \"Mark implicit platforms package reference as PrivateAssets\" (#2986)"},{"Id":"413641877","IsPullRequest":false,"CreatedAt":"2019-02-24T18:29:59","Actor":"SergeyKhutornoy","Number":"2982","RawContent":null,"Title":"donet publish always publishes web.Release.config","State":"closed","Body":"When you run dotnet publish command for a Microsoft.NET.Sdk.Web project targeting **net462**, the tool always publishes web.*.config files (web.debug.config and web.release.config in addition to the transformed web.config).\r\n\r\nProject file (.csproj):\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <ProductVersion>8.0.30703</ProductVersion>\r\n    <ProjectGuid>{842f247f-8658-4b47-b9cf-5582f7c1e26e}</ProjectGuid>\r\n    <RootNamespace>Service</RootNamespace>\r\n    <AssemblyName>Service</AssemblyName>\r\n    <TargetFramework>net462</TargetFramework>\r\n    <AssemblyTitle>Service</AssemblyTitle>\r\n    <OutputPath>bin\\$(Configuration)\\</OutputPath>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.configuration\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n    <Reference Include=\"System\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n## Steps to reproduce\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `dotnet publish /p:Configuration=Release`\r\n\r\nor\r\n\r\n1. Create web.config, web.Debug.config, web.Release.config files in the project root folder.\r\n2. Run `msbuild Service.csproj /p:DeployOnBuild=true /p:Configuration=Release /p:PublishProfile=FolderProfile`\r\n\r\n## Expected behavior\r\nThere is only transformed web.config file in the publish folder.\r\n\r\n## Actual behavior\r\nweb.config, web.release.config, web.debug.config files are in the publish folder.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]","Url":"https://github.com/dotnet/sdk/issues/2982","RelatedDescription":"Closed issue \"donet publish always publishes web.Release.config\" (#2982)"},{"Id":"413639072","IsPullRequest":false,"CreatedAt":"2019-02-24T18:29:13","Actor":"YankdaCode","Number":"2981","RawContent":null,"Title":"Error on implementing custom FileProvider - Cannot find compilation library location for package 'projectCLB'","State":"closed","Body":"So, I am designing a very customized solution from scratch wherein I have asp.net mvc core app as the main web app. Then I create separate class libraries and update the SDK to Microsoft.NET.Sdk.Razor and use:\r\n    `<PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />`\r\nThis allows me to create MVC type class library, lets say \"projectCLB\" and then at startup I scan the folder that is located outside of the project main directory and load the assemblies for my project:\r\nprojectCLB.dll\r\nprojectCLB.Views.dll\r\n\r\nThis was working fine by the following code:\r\n`\r\n```\r\nAssembly assembly;\r\n                try\r\n                {\r\n                    assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(file.FullName);\r\n                }\r\n                catch (FileLoadException ex)\r\n                {\r\n                    // If assembly is already loaded, we'll just catch it and continue to the next one, plugins can have same dependencies:\r\n                    if (ex.Message == \"Assembly with same name is already loaded\")\r\n                    {\r\n                        continue;\r\n                    }\r\n                    throw;\r\n                }\r\n\r\n// Check if the assembly has already been loaded:\r\n                if (!(mvcBuilder.PartManager.ApplicationParts.Any(x => x.Name == assembly.GetName().Name)))\r\n                {\r\n                    //Load the pre-compiled Views:\r\n                    if (assembly.ManifestModule.Name.Contains(\".Views.dll\"))\r\n                    {\r\n                        mvcBuilder.ConfigureApplicationPartManager(mgr =>\r\n                        {\r\n                            foreach (var b in CompiledRazorAssemblyApplicationPartFactory.GetDefaultApplicationParts(assembly))\r\n                            {\r\n                                mvcBuilder.ConfigureApplicationPartManager(apm => apm.ApplicationParts.Add(b));\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n                    // Load the plug in assemblies:\r\n                    else\r\n                    {\r\n                        \r\n                        mvcBuilder.AddApplicationPart(assembly);\r\n                     \r\n                       \r\n\r\n                    }\r\n\r\n                }\r\n```\r\n`\r\n\r\n\r\nThis is how my class library project file looks:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\r\n\r\n\r\n  <PropertyGroup Label=\"Globals\">\r\n    <SccProjectName>SAK</SccProjectName>\r\n    <SccProvider>SAK</SccProvider>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccLocalPath>SAK</SccLocalPath>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    \r\n  </PropertyGroup>\r\n\r\n\r\n  <ItemGroup>\r\n    \r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.1\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"Content\\\" />\r\n    <Folder Include=\"Infrastructure\\Data\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n\r\n    <ProjectReference Include=\"..\\..\\<baseapp project>.Common\\baseapp project.Common.csproj\" />\r\n\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Data\\baseapp project.Data.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\baseapp project.Repositories\\baseapp project.Repositories.csproj\" />\r\n  </ItemGroup>\r\n  <Target Name=\"UpdateTargetPath\" BeforeTargets=\"AssignRazorGenerateTargetPaths\">\r\n    <ItemGroup>\r\n      <RazorGenerate Include=\"@(RazorGenerate)\" Link=\"$(TargetName)\\plugin\\%(RazorGenerate.RelativeDir)%(RazorGenerate.FileName)%(RazorGenerate.Extension)\" />\r\n\r\n    </ItemGroup>\r\n  </Target>\r\n \r\n\r\n</Project>\r\n\r\n```\r\n\r\nIt was working all fine until I implemented a File Provider so that we can use cshtml files at development time instead of precompiled views since I was having to copy the dlls/ rebuild after a cshtml change. \r\nReason being that PhysicalFileProvider doesn't look outside of the webroot. Now I get this error and there are other posts that I saw but none of the workarounds actually work for me.\r\n\r\n\r\n`System.InvalidOperationException: Cannot find compilation library location for package 'projectCLB'\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n   at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.LazyMetadataReferenceFeature.get_References()\r\n   at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)`","Url":"https://github.com/dotnet/sdk/issues/2981","RelatedDescription":"Closed issue \"Error on implementing custom FileProvider - Cannot find compilation library location for package 'projectCLB'\" (#2981)"},{"Id":"413818973","IsPullRequest":true,"CreatedAt":"2019-02-24T13:01:01","Actor":"dotnet-maestro[bot]","Number":"2985","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2985","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#2985)"},{"Id":"413780813","IsPullRequest":true,"CreatedAt":"2019-02-24T04:32:29","Actor":"dsplaisted","Number":"2984","RawContent":null,"Title":"Add CI legs to run tests as tools","State":"open","Body":"Eventually I'd like to use the tests from this repo in other repos such as dotnet/core-sdk.  This PR adds CI legs which runs the tests as tools, in order to make sure they run correctly as tools.","Url":"https://github.com/dotnet/sdk/pull/2984","RelatedDescription":"Open PR \"Add CI legs to run tests as tools\" (#2984)"},{"Id":"413693389","IsPullRequest":true,"CreatedAt":"2019-02-23T14:21:28","Actor":"dotnet-maestro[bot]","Number":"2983","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2983","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2983)"},{"Id":"413638871","IsPullRequest":true,"CreatedAt":"2019-02-23T01:33:35","Actor":"natemcmaster","Number":"2980","RawContent":null,"Title":"Change publish feed to workaround 'Waiting to obtain an exclusive lock on the feed.'","State":"open","Body":"We're getting consistent build timeouts. Changing to a unique feed instead. \n\nNote!!! Each upstream repo will need to add this to restore sources.","Url":"https://github.com/dotnet/sdk/pull/2980","RelatedDescription":"Open PR \"Change publish feed to workaround 'Waiting to obtain an exclusive lock on the feed.'\" (#2980)"},{"Id":"413617702","IsPullRequest":true,"CreatedAt":"2019-02-22T23:24:14","Actor":"wli3","Number":"2979","RawContent":null,"Title":"Fix 1.0 project tools missing dll in runtime","State":"open","Body":"By Disabling targeting pack reference in generate deps.json\r\n\r\nIn short, since generating deps.json in 2.x.xxx SDK does not have Microsoft.NETCore.App reference. We need to do the same for 2.x.xxx.\r\n\r\nDetail:\r\n\r\nProject Tools deps.json generator is not ideal. When restore, since we don’t know what is the tool’s TFM before restoring it, we will always restore with SDK’s TFM, which is netcoreapp3.0.\r\n\r\nIn 2.x.xxx time due to special restore logic, there is no reference to Microsoft.NETCore.App in asset.json file. So when generate deps.son, assets from the packages will be in deps.json instead of being removed by conflict resolution. This is important since when invoke the command, 1.0 runtime will be used (due to the tool is targeting 1.0), and 1.0 runtime will not have all the dlls restored in netcoreapp2.0 TFM available to load these dll need dep.json.\r\n\r\nAnd now in 3.0, ImplicitFrameworkReferences need to be disabled to match existing “no reference to Microsoft.NETCore.App” behavior.","Url":"https://github.com/dotnet/sdk/pull/2979","RelatedDescription":"Open PR \"Fix 1.0 project tools missing dll in runtime\" (#2979)"},{"Id":"413284966","IsPullRequest":false,"CreatedAt":"2019-02-22T21:29:36","Actor":"jimmylewis","Number":"2977","RawContent":null,"Title":"Installing 3.0 Preview 3 SDK broke build for 3.0 Preview 2 Razor Components app","State":"closed","Body":"I created an app with the Preview 2 SDK (released bits).  Today I installed the latest available Preview 3 bits (https://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.1xx/dotnet-sdk-latest-win-x64.exe) and now I get build errors for the Razor Components cshtml files.  I'm not sure if this is expected, since there have been a lot of changes in this area between Preview 2 and Preview 3.\r\n\r\nInstallation reported these bits, for context:\r\n>The following were installed at: 'C:\\Program Files\\dotnet'\r\n>    • .NET Core SDK 3.0.100-preview3-010343\r\n>    • .NET Core Runtime 3.0.0-preview3-27421-7\r\n>    • ASP.NET Core Runtime 3.0.0-preview3-19121-17\r\n>    • .NET Core Windows Desktop Runtime 3.0.0-preview3-27420-40\r\n\r\nThe build errors I get are like this one (note, it's in a generated file for the .cshtml):\r\n> obj\\Debug\\netstandard2.0\\Razor\\Pages\\Counter.cshtml.g.cs(35,48): error CS0234: The type or namespace name 'EventCallback' does not exist in the namespace 'Microsoft.AspNetCore.Components' (are you missing an assembly reference?) [D:\\src\\AppBuilding\\src\\OrderSite.App\\OrderSite.App.csproj]\r\n\r\nThe generated line of code is:\r\n```\r\nbuilder.AddAttribute(7, \"onclick\", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, IncrementCount));\r\n```\r\n\r\nWith the Preview 2 SDK, the generated line of code was:\r\n\r\n```\r\nbuilder.AddAttribute(7, \"onclick\", Microsoft.AspNetCore.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Components.UIMouseEventArgs>(IncrementCount));\r\n```\r\n\r\nNote: if I create a new Razor Components project with the Preview 3 SDK installed, it builds fine.  The project created is very different from the Preview 2 template however.","Url":"https://github.com/dotnet/sdk/issues/2977","RelatedDescription":"Closed issue \"Installing 3.0 Preview 3 SDK broke build for 3.0 Preview 2 Razor Components app\" (#2977)"},{"Id":"412718584","IsPullRequest":true,"CreatedAt":"2019-02-22T19:32:40","Actor":"tmat","Number":"2971","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/sdk/pull/2971","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#2971)"},{"Id":"413394061","IsPullRequest":true,"CreatedAt":"2019-02-22T14:46:46","Actor":"dotnet-maestro[bot]","Number":"2978","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2978)"},{"Id":"413180902","IsPullRequest":true,"CreatedAt":"2019-02-22T02:00:20","Actor":"dotnet-bot","Number":"2975","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2975","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2975)"},{"Id":"412792797","IsPullRequest":true,"CreatedAt":"2019-02-21T19:16:46","Actor":"dsplaisted","Number":"2972","RawContent":null,"Title":"Add test and fix self-contained app using ASP.NET Core","State":"closed","Body":"Test scenario for https://github.com/aspnet/AspNetCore/issues/7782","Url":"https://github.com/dotnet/sdk/pull/2972","RelatedDescription":"Closed or merged PR \"Add test and fix self-contained app using ASP.NET Core\" (#2972)"},{"Id":"412890450","IsPullRequest":true,"CreatedAt":"2019-02-21T15:00:25","Actor":"dotnet-bot","Number":"2973","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2973","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2973)"},{"Id":"412913042","IsPullRequest":true,"CreatedAt":"2019-02-21T14:16:41","Actor":"dotnet-maestro[bot]","Number":"2974","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2974","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2974)"},{"Id":"412680563","IsPullRequest":true,"CreatedAt":"2019-02-21T06:42:17","Actor":"nugetlurker","Number":"2970","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2970","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2970)"},{"Id":"412680549","IsPullRequest":true,"CreatedAt":"2019-02-21T06:41:58","Actor":"nugetlurker","Number":"2969","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2969","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2969)"},{"Id":"412603209","IsPullRequest":true,"CreatedAt":"2019-02-21T00:12:52","Actor":"dsplaisted","Number":"2965","RawContent":null,"Title":"Update stage 0, Fix .NET Standard 2.1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2965","RelatedDescription":"Closed or merged PR \"Update stage 0, Fix .NET Standard 2.1\" (#2965)"},{"Id":"411889520","IsPullRequest":true,"CreatedAt":"2019-02-20T22:02:54","Actor":"dotnet-bot","Number":"2959","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2959","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2959)"},{"Id":"412613270","IsPullRequest":true,"CreatedAt":"2019-02-20T21:40:19","Actor":"wli3","Number":"2967","RawContent":null,"Title":"WIP Update stage0 and nuget","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2967","RelatedDescription":"Closed or merged PR \"WIP Update stage0 and nuget\" (#2967)"},{"Id":"412641119","IsPullRequest":true,"CreatedAt":"2019-02-20T21:39:36","Actor":"wli3","Number":"2968","RawContent":null,"Title":"WIP merge release/2.2.2xx to release/release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2968","RelatedDescription":"Open PR \"WIP merge release/2.2.2xx to release/release/3.0.1xx\" (#2968)"},{"Id":"412604385","IsPullRequest":false,"CreatedAt":"2019-02-20T20:03:26","Actor":"tmat","Number":"2966","RawContent":null,"Title":"Global tool shims: Store package version in Win32 version resource ","State":"open","Body":"**Issue**\r\n\r\nCurrently the tool shim embeds a relative path to the target .dll in a `.data` section that includes package version:\r\n\r\nFor example:\r\n```\r\n.store\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\tools\\netcoreapp2.1\\any\\Microsoft.DotNet.Darc.dll\r\n```\r\n\r\nThis design makes it very difficult to change the version number in a post-build step. \r\nThis approach is not compatible with some of our build tools and deterministic build tools that build artifacts without versions and stamp them with the version afterwards.\r\n\r\n**Proposal**\r\n\r\nInstead of embedding relative path, store the package version in a version resource, read the version and construct the path in the shim.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2966","RelatedDescription":"Open issue \"Global tool shims: Store package version in Win32 version resource \" (#2966)"},{"Id":"412390668","IsPullRequest":true,"CreatedAt":"2019-02-20T15:00:53","Actor":"dotnet-bot","Number":"2963","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2963","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2963)"},{"Id":"412413417","IsPullRequest":true,"CreatedAt":"2019-02-20T14:26:53","Actor":"dotnet-maestro[bot]","Number":"2964","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2964","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2964)"},{"Id":"411889557","IsPullRequest":true,"CreatedAt":"2019-02-20T03:00:31","Actor":"dotnet-bot","Number":"2961","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2961","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2961)"},{"Id":"412091091","IsPullRequest":false,"CreatedAt":"2019-02-19T19:39:26","Actor":"dsplaisted","Number":"2962","RawContent":null,"Title":"Remove UseRefTargetingPacks once SDK round-trips through core-sdk","State":"open","Body":"#2919 added a `UseRefTargetingPacks` flag to enable using the new .Ref targeting packs instead of the ones in the bundled versions file.  Once that PR has flowed into core-sdk, we should update the stage 0 in dotnet/sdk and remove the flag.","Url":"https://github.com/dotnet/sdk/issues/2962","RelatedDescription":"Open issue \"Remove UseRefTargetingPacks once SDK round-trips through core-sdk\" (#2962)"},{"Id":"411889540","IsPullRequest":true,"CreatedAt":"2019-02-19T12:01:55","Actor":"dotnet-bot","Number":"2960","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2960","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2960)"},{"Id":"411889504","IsPullRequest":true,"CreatedAt":"2019-02-19T12:01:50","Actor":"dotnet-bot","Number":"2958","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2958","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2958)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1098610296367841282","CreatedAt":"2019-02-21T15:48:00+00:00","UserScreenname":"dotnet","Text":"The #dotnet blog just got a makeover!\n\nDiscover and share great content while enjoying the modern, clean design of… https://t.co/b0rdirHuPF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":15,"RawContent":null},{"Id":"1098594189313363968","CreatedAt":"2019-02-21T14:44:00+00:00","UserScreenname":"dotnet","Text":". @ChristosMatskas joins #OnDotNet to share the story of an application he built using the Azure SDKs for .NET and… https://t.co/TR4ua9BnvV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"1098337450924040194","CreatedAt":"2019-02-20T21:43:49+00:00","UserScreenname":"dotnet","Text":"Check out the February updates for .NET. https://t.co/8Fz51sPyod","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"1097924819415326720","CreatedAt":"2019-02-19T18:24:10+00:00","UserScreenname":"dotnet","Text":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019 https://t.co/45GssRCrZk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":129,"FavoriteCount":134,"RawContent":null},{"Id":"1095786421221240833","CreatedAt":"2019-02-13T20:46:56+00:00","UserScreenname":"dotnet","Text":"The #DotNet blog is getting a major update! Find more details and get a sneak peek of our new and improved blog des… https://t.co/cIC92TS7qA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":37,"RawContent":null}]}},"RunOn":"2019-02-25T05:30:47.9287019Z","RunDurationInMilliseconds":16798}