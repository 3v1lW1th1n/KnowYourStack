{"Data":{"GitHub":{"Issues":[{"Id":"407524418","IsPullRequest":false,"CreatedAt":"2019-02-07T03:08:13","Actor":"TomFinley","Number":"2452","RawContent":null,"Title":"DataOperationsCatalog SaveAsText extension method is evil","State":"open","Body":"I was attempting to migrate some of our tests, when I discovered we have a few problems in our new API on text saving. I know @artidoro had some thoughts on text saving/loading so mentioning him. Also I know @sfilipi and @rogancarr are handling many issues w.r.t. API completeness and consistency as they work on samples and docs, so maybe they have some thoughts on this. (Of course everyone is free to chime in.)\r\n\r\nFrom what I can see, whoever authored this method confused the defaults with the text *loader* and the text *saver*. (Note how the defaults used in the text saving utility method are coming from `TextLoader`, which is incorrect.) It might seem intuitive if you don't think about it too hard that text saving and loading should have the same defaults, but practically it becomes clear they should not. The situations where one is \"loading\" into ML.NET and \"saving\" out of ML.NET are in fact very different situations. When someone is using a text loader ***with non-default settings*** they're usually asking us to ingest *their* format (so we chose the most helpful defaults for that more common scenario), whereas our text saver makes some attempt at schema. (Note also that under default settings, the text loader loads our own format without trouble, since it detects that a schema and settings is embedded in the file itself.)\r\n\r\nThis is the offending method:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e192a18d553a71ded3728495e9aaf4349169290d/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L147-L153\r\n\r\nAs point of reference, this is that constant:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e192a18d553a71ded3728495e9aaf4349169290d/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L401\r\n\r\nNow, compare this with the *actual* defaults on our text saver:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e192a18d553a71ded3728495e9aaf4349169290d/src/Microsoft.ML.Data/DataLoadSave/Text/TextSaver.cs#L28-L43\r\n\r\n* The default for whether header row is saved has gone from `true` to `false`. The primary practical effect of this is, we're now dropping feature names (or more precisely, slot names) by default. This seems silly. Feature names are *important*. I think we ought to keep them by default.\r\n\r\n* We've lost the ability to force saving as dense format *at all* through this new API. This is often important for comprehensibility.\r\n\r\nI ran into it while I was trying to clean up some of our tests to use more of the actual public surface. Consider this test.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e192a18d553a71ded3728495e9aaf4349169290d/test/Microsoft.ML.Tests/Transformers/ConcatTests.cs#L133-L138\r\n\r\nThat's kind of obnoxious, and not using our public API. I'd love to migrate it over to something like this:\r\n\r\n```csharp\r\nusing (var fs = File.Create(outputPath)) \r\n    ML.Data.SaveAsText(data, fs, keepHidden: false, forceDense: true);\r\n```\r\n\r\nBut I can't specify equivalent settings because there's no way to force dense.\r\n\r\n***So I suggest this:*** we change the defaults of this text *saving* utility function to use the text *saver* defaults, instead of the text loader defaults, and also restore the ability to force a dense format.\r\n\r\n## Why forcing dense is kind of useful sometimes...\r\n\r\nIt may not be obvious why forcing to dense is kind of useful. So imagine this input file `foo.txt`.\r\n\r\n```\r\n1,2,3,4,5,6\r\n0,0,1,0,0,0\r\n```\r\n\r\nThen imagine I have this MML command line:\r\n\r\n    dotnet MML.dll savedata loader=text{sep=comma} data=foo.txt dout=foo1.txt\r\n\r\nThe resulting `foo1.txt` file is this:\r\n\r\n```\r\n#@ TextLoader{\r\n#@   header+\r\n#@   sep=tab\r\n#@   col=Label:R4:0\r\n#@   col=Features:R4:1-5\r\n#@ }\r\nLabel   5       0:\"\"\r\n1       2       3       4       5       6\r\n6       2:1\r\n```\r\n\r\nWhat is that `6 2:1` line? It is encoding the information that this line has 6 fields, and the field at index 2 is the only one with a non-default value. That is, it has detected, \"hey, this can be sparsely encoded,\" and it has done so. Similarly with this seemingly crazy `Label   5       0:\"\"` line. But sometimes we find that confusing!! I've spent over the years probably, cumulatively, *days* trying to explain the ins and outs of the mixed sparse/dense format. So we have this setting to say, \"you know what, I don't care about efficient, give me a dense format.\"\r\n\r\n    dotnet MML.dll savedata loader=text{sep=comma} data=foo.txt dout=foo2.txt saver=text{dense+}\r\n\r\nThe result is this:\r\n\r\n```\r\n#@ TextLoader{\r\n#@   header+\r\n#@   sep=tab\r\n#@   col=Label:R4:0\r\n#@   col=Features:R4:1-5\r\n#@ }\r\nLabel   \"\"      \"\"      \"\"      \"\"      \"\"\r\n1       2       3       4       5       6\r\n0       0       1       0       0       0\r\n```\r\n\r\nLess efficient? Sure. Eaier to understand? I'd say so. And lots of our tests use it, since our tests are usually writing small amounts of data and we found comprehensibility of test files to be valuable.","Url":"https://github.com/dotnet/machinelearning/issues/2452","RelatedDescription":"Open issue \"DataOperationsCatalog SaveAsText extension method is evil\" (#2452)"},{"Id":"407519233","IsPullRequest":true,"CreatedAt":"2019-02-07T02:37:40","Actor":"Ivanidzo4ka","Number":"2451","RawContent":null,"Title":"[WIP] Internalize recommender project","State":"open","Body":"fixes #2276","Url":"https://github.com/dotnet/machinelearning/pull/2451","RelatedDescription":"Open PR \"[WIP] Internalize recommender project\" (#2451)"},{"Id":"407013711","IsPullRequest":true,"CreatedAt":"2019-02-07T02:04:12","Actor":"najeeb-kazmi","Number":"2426","RawContent":null,"Title":"Make KeyToValueMapping API consistent","State":"closed","Body":"Fixes #2376 \r\n\r\nMakes KeyToValueMapping API consistent with the rest by using the `string outputColumnName, string inputColumnName = null` signature in the `MapKeyToValue` method in `ConversionsExtensionsCatalog` and the associated `KeyToValueMappingEstimator` and `KeyToValueMappingTransformer` constructors.","Url":"https://github.com/dotnet/machinelearning/pull/2426","RelatedDescription":"Closed or merged PR \"Make KeyToValueMapping API consistent\" (#2426)"},{"Id":"407503468","IsPullRequest":true,"CreatedAt":"2019-02-07T01:15:09","Actor":"singlis","Number":"2450","RawContent":null,"Title":"ValueMappingEstimator documentation update","State":"open","Body":"Adds a type='bullet' tag to the documentation for ValueMappingEstimator so that the bulleted list will render correctly.\r\n\r\nFixes #2447","Url":"https://github.com/dotnet/machinelearning/pull/2450","RelatedDescription":"Open PR \"ValueMappingEstimator documentation update\" (#2450)"},{"Id":"407498159","IsPullRequest":true,"CreatedAt":"2019-02-07T00:50:39","Actor":"Ivanidzo4ka","Number":"2449","RawContent":null,"Title":"Remove unnecessary JIT workaround","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/1247\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2449","RelatedDescription":"Open PR \"Remove unnecessary JIT workaround\" (#2449)"},{"Id":"407047712","IsPullRequest":true,"CreatedAt":"2019-02-07T00:45:37","Actor":"zeahmed","Number":"2429","RawContent":null,"Title":"Moved TensorFlow samples to its own directory in Samples project.","State":"closed","Body":"This PR addresses following issues\r\n\r\n1. Moved TF sample to `TensorFlow` folder in samples project.\r\n2. Renamed the files to meaningful name.\r\n3. Added a text classification sample.\r\n4. Updated TensorFlow.Redist nuget to latest in samples project.\r\n\r\n@sfilipi, @shmoradims and @rogancarr, let me know if this move can be a problem for any documentation referencing it.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2429","RelatedDescription":"Closed or merged PR \"Moved TensorFlow samples to its own directory in Samples project.\" (#2429)"},{"Id":"407486170","IsPullRequest":true,"CreatedAt":"2019-02-06T23:58:50","Actor":"singlis","Number":"2448","RawContent":null,"Title":"Updates ml.net reference of LightGBM to version 2.2","State":"open","Body":"- Updates ml.net reference of LightGBM to version 2.2.3 (Fixes #2446)\r\n- Updated the lightgbm parsing code to handle inf, -inf (now checks for\r\ncontains rather than equals).\r\n- Additional updates for handling NaN\r\n- Moved all LightGBM baseline tests from SingleDebug/SingleRelease to\r\nCommon.\r\n- Added Seed parameter to LightGBM arguments to support setting\r\nLightGBM's random seed.","Url":"https://github.com/dotnet/machinelearning/pull/2448","RelatedDescription":"Open PR \"Updates ml.net reference of LightGBM to version 2.2\" (#2448)"},{"Id":"407442961","IsPullRequest":true,"CreatedAt":"2019-02-06T23:34:40","Actor":"rogancarr","Number":"2441","RawContent":null,"Title":"Make DataOperations catalog names more precise","State":"closed","Body":"This PR adds the word \"Rows\" to names in `DataOperations` catalog where the use may be ambiguous, e.g. between Rows, Columns, and Slots.\r\n\r\nFixes #2440 ","Url":"https://github.com/dotnet/machinelearning/pull/2441","RelatedDescription":"Closed or merged PR \"Make DataOperations catalog names more precise\" (#2441)"},{"Id":"407433163","IsPullRequest":false,"CreatedAt":"2019-02-06T23:34:39","Actor":"rogancarr","Number":"2440","RawContent":null,"Title":"Add \"Row\" to the title of ambiguous DataOperations catalog members","State":"closed","Body":"Certain operations in the `DataOperations` catalog are as to whether they operate on rows, columns, or slots. I suggest renaming the `FilterBy...`s and `Shuffle` to have `Rows` after the verb (e.g. `FilterRowsBy...`), similar to how we named `SkipRows` and `TakeRows`.","Url":"https://github.com/dotnet/machinelearning/issues/2440","RelatedDescription":"Closed issue \"Add \"Row\" to the title of ambiguous DataOperations catalog members\" (#2440)"},{"Id":"407472887","IsPullRequest":false,"CreatedAt":"2019-02-06T23:08:03","Actor":"singlis","Number":"2447","RawContent":null,"Title":"ValueMapping Documentation missing bullets in the remarks section","State":"open","Body":"The remarks section for ValueMappingTransform contains a list that does not render to the HTML. This is due to a missing type on the this list element:\r\nCurrently its this:\r\n``\r\nExamples for using a ValueMappingEstimator are:\r\n<list>\r\n...\r\n</list>\r\n``\r\n\r\nExpected is this:\r\n``\r\nExamples for using a ValueMappingEstimator are:\r\n<list type=\"bullet\">\r\n...\r\n</list>\r\n``\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2447","RelatedDescription":"Open issue \"ValueMapping Documentation missing bullets in the remarks section\" (#2447)"},{"Id":"407469954","IsPullRequest":false,"CreatedAt":"2019-02-06T22:58:07","Actor":"singlis","Number":"2446","RawContent":null,"Title":"Updating LightGBM to version 2.2.3","State":"open","Body":"LightGBM has been updated to version 2.2.3, ml.net references 2.2.1.1. \r\n\r\nCreating this issue to update ml.net to the latest version of LightGBM.","Url":"https://github.com/dotnet/machinelearning/issues/2446","RelatedDescription":"Open issue \"Updating LightGBM to version 2.2.3\" (#2446)"},{"Id":"407466897","IsPullRequest":false,"CreatedAt":"2019-02-06T22:48:23","Actor":"sfilipi","Number":"2445","RawContent":null,"Title":"Inventory of the Microsoft.ML public types: what to rename, move, hide there. ","State":"open","Body":"This is the list of the types in the Microsoft.ML namespace, as seen from the docs site.  Taking a first pass at what doesn't need to be there, what needs to be hidden, and what needs to be moved to a different namespace. \r\n\r\nMicrosoft.ML namespace type | Rename/Move/Hide |\r\n--------------------------- | --------- |\r\nBinaryClassificationCatalog |    | \r\nBinaryClassificationCatalog.BinaryClassificationTrainers|    | \r\nBinaryClassificationMetricsStatistics|    | \r\nBinaryLoaderSaverCatalog|    | \r\nCategoricalCatalog|    | \r\nChannelMessage|   move | \r\nChannelMessageKind|  move  | \r\nClusteringCatalog|    | \r\nClusteringCatalog.ClusteringTrainers|    | \r\nComponentCatalog|  move  | \r\nConversionsCatalog|    | \r\nConversionsExtensionsCatalog|    | \r\nCustomMappingCatalog|    | \r\nDataOperationsCatalog|    | \r\nDataReaderExtensions|    | \r\nDebuggerExtensions|    | \r\nExplainabilityCatalog |    | \r\nExpLoss | move   | \r\nExpLoss.Arguments |  move  | \r\nExtensionsCatalog |    | \r\nFactorizationMachineExtensions |    | \r\nFeatureSelectionCatalog |    | \r\nHalLearnersCatalog |    | \r\nHingeLoss |  move  | \r\nHingeLoss.Arguments |  move  | \r\nIChannel |  move  | \r\nIChannelProvider |  move  | \r\nIClassificationLoss |  move  | \r\nIComponentFactory | hide  | \r\nIComponentFactory<TComponent> | hide   | \r\nIComponentFactory<TArg1,TComponent> |  hide  | \r\nIComponentFactory<TArg1,TArg2,TComponent> |  hide  | \r\nIComponentFactory<TArg1,TArg2,TArg3,TComponent> |  hide  | \r\nIExceptionContext |  hide  | \r\nIFileHandle | hide   | \r\nIHost |    | \r\nIHostEnvironment |    | \r\nILossFunction<TOutput,TLabel> | move   | \r\nImageEstimatorsCatalog |    | \r\nIParameterValue | hide   | \r\nIParameterValue<TValue> |  hide  | \r\nIPipe<TMessage> |  hide  | \r\nIPredictionTransformer<TModel> |    | \r\nIPredictor |    | \r\nIPredictorProducing<TResult> |    | \r\nIProgressChannel |    | \r\nIProgressChannelProvider |    | \r\nIProgressEntry |    | \r\nIRegressionLoss |    | \r\nIRunResult |   hide | \r\nIRunResult<T> |   hide | \r\nIScalarOutputLoss |  hide  | \r\nISingleFeaturePredictionTransformer<TModel> |    | \r\nISupportClassificationLossFactory |  move  | \r\nISupportRegressionLossFactory |  move  | \r\nISupportSdcaClassificationLoss | move   | \r\nISupportSdcaClassificationLossFactory |  move  | \r\nISupportSdcaRegressionLossFactory |   move | \r\nISweeper |  hide  | \r\nISweepResultEvaluator<TResults> |  hide  | \r\nIValueGenerator |  hide  | \r\nKMeansClusteringExtensions |    | \r\nLearningPipelineExtensions |    | \r\nLightGbmExtensions |    | \r\nLoggingEventArgs |    | \r\nLogLoss |   move | \r\nLogLossFactory |  move  | \r\nMessageSensitivity |    | \r\nMetricsStatisticsBase<T> |    | \r\nMetricStatistics |    | \r\nMLContext |    | \r\nModelOperationsCatalog |    | \r\nModelOperationsCatalog.ExplainabilityTransforms |    | \r\nModelOperationsCatalog.SubCatalogBase |    | \r\nMulticlassClassificationCatalog |    | \r\nMulticlassClassificationCatalog.MulticlassClassificationTrainers |    | \r\nMultiClassClassifierMetricsStatistics |    | \r\nNormalizerCatalog |    | \r\nOnnxCatalog |    | \r\nOnnxExportExtensions |    | \r\nParameterSet |   hide | \r\nPcaCatalog |    | \r\nPermutationFeatureImportanceExtensions |    | \r\nPoissonLoss |  move  | \r\nPoissonLossFactory |  move  | \r\nPredictionEngine<TSrc,TDst> |    | \r\nPredictionEngineBase<TSrc,TDst> |    | \r\nPredictionEngineExtensions |    | \r\nPredictionKind |    | \r\nProgressHeader |  hide  | \r\nProjectionCatalog |    | \r\nQuantileStatistics |    | \r\nRankerMetricsStatistics |    | \r\nRankingCatalog |    | \r\nRankingCatalog.RankingTrainers |    | \r\nRecommendationCatalog |    | \r\nRecommendationCatalog.RecommendationTrainers |    | \r\nRecommenderCatalog |    | \r\nRegressionCatalog |    | \r\nRegressionCatalog.RegressionTrainers |    | \r\nRegressionMetricsStatistics |    | \r\nRunMetric |    | \r\nRunResult |    | \r\nSignatureClassificationLoss |  hide  | \r\nSignatureRegressionLoss |  hide  | \r\nSignatureSuggestedSweepsParser |  hide  | \r\nSignatureSweeper |  hide  | \r\nSignatureSweepResultEvaluator |  hide  | \r\nSimpleFileHandle |  hide  | \r\nSmoothedHingeLoss |   move | \r\nSmoothedHingeLoss.Arguments |  move  | \r\nSquaredLoss | move   | \r\nSquaredLossFactory |  move  | \r\nStandardLearnersCatalog |    | \r\nTensorflowCatalog |    | \r\nTextCatalog |    | \r\nTextLoaderSaverCatalog |    | \r\nTrainCatalogBase |    | \r\nTrainCatalogBase.CatalogInstantiatorBase |  hide  | \r\nTrainerInfo |    | \r\nTransformExtensionsCatalog |    | \r\nTransformsCatalog |    | \r\nTransformsCatalog.CategoricalTransforms |    | \r\nTransformsCatalog.ConversionTransforms |    | \r\nTransformsCatalog.FeatureSelectionTransforms |    | \r\nTransformsCatalog.ProjectionTransforms |    | \r\nTransformsCatalog.SubCatalogBase |    | \r\nTransformsCatalog.TextTransforms |    | \r\nTreeExtensions |    | \r\nTweedieLoss |  move  | \r\nTweedieLoss.Arguments |   move | \r\n\r\ncc @yaeldekel @TomFinley @glebuk  see if any of my suggestions need to change. \r\nFor the cases marked with `move`, where should they live?","Url":"https://github.com/dotnet/machinelearning/issues/2445","RelatedDescription":"Open issue \"Inventory of the Microsoft.ML public types: what to rename, move, hide there. \" (#2445)"},{"Id":"407431051","IsPullRequest":true,"CreatedAt":"2019-02-06T22:27:35","Actor":"rogancarr","Number":"2439","RawContent":null,"Title":"Allowing SelectColumns to take a bare list of columns","State":"closed","Body":"This PR overloads `SelectColumns` so that it can be used with a bare list of columns. The original API is changed to remove `keepHidden`, as this new API has the default behavior.\r\n\r\nThe PR also cleans up the sample, which had mismatches between the actual and expected outputs.\r\n\r\nFixes: #2371 ","Url":"https://github.com/dotnet/machinelearning/pull/2439","RelatedDescription":"Closed or merged PR \"Allowing SelectColumns to take a bare list of columns\" (#2439)"},{"Id":"407452712","IsPullRequest":false,"CreatedAt":"2019-02-06T22:06:28","Actor":"eerhardt","Number":"2444","RawContent":null,"Title":"FastTree does not work in UWP","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows UWP app\r\n- **.NET Version (eg., dotnet --info)**:  UWP\r\n\r\n### Issue\r\n\r\nFastTree is currently always attempting to `PrintMemoryStats` during training. This is an issue on some platforms (specifically UWP) because these APIs throw exceptions.\r\n\r\nWe should at least have a way to disable these stats when on platforms that don't support it.\r\n\r\n- **What did you do?**\r\n\r\nTry to train a FastTree model in a UWP app.\r\n\r\n- **What happened?**\r\n\r\nA `PlatformNotSupportedException` was thrown from the following method:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/6b1a0d337f74274509cfd439974dca2305a6bfbb/src/Microsoft.ML.FastTree/FastTree.cs#L458-L483\r\n\r\n- **What did you expect?**\r\n\r\nI expected FastTree to work inside a UWP app.\r\n\r\n### Source code / logs\r\n\r\nOn UWP apps, you can't get certain information about local processes - it throws an exception:\r\n\r\n```\r\nSystem.PlatformNotSupportedException: Retrieving information about local processes is not supported on this platform.\r\n   at System.Diagnostics.NtProcessInfoHelper.GetProcessInfos(Predicate`1 processIdFilter)\r\n   at System.Diagnostics.ProcessManager.GetProcessInfo(Int32 processId, String machineName)\r\n   at System.Diagnostics.Process.EnsureState(State state)\r\n   at System.Diagnostics.Process.get_WorkingSet64()\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2444","RelatedDescription":"Open issue \"FastTree does not work in UWP\" (#2444)"},{"Id":"407446429","IsPullRequest":false,"CreatedAt":"2019-02-06T21:49:13","Actor":"sdg002","Number":"2443","RawContent":null,"Title":"Very scanty documentation - ","State":"open","Body":"No sample code. What value is this page providing?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 2c4f07b9-e625-aa2e-940a-69bedbe67a3b\n* Version Independent ID: 1f4fe341-3c68-bc18-06d2-480c6283a609\n* Content: [LightGbm Class (Microsoft.ML.LightGBM)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.lightgbm.lightgbm?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.LightGBM/LightGbm.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.LightGBM/LightGbm.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2443","RelatedDescription":"Open issue \"Very scanty documentation - \" (#2443)"},{"Id":"407443599","IsPullRequest":true,"CreatedAt":"2019-02-06T21:41:28","Actor":"sfilipi","Number":"2442","RawContent":null,"Title":"Towards #2326 - removing some namespaces","State":"open","Body":"Replacing the following namespaces as described in #2326:\r\n\r\nMicrosoft.ML.Internal.Internallearn.ResultProcessor \r\nMicrosoft.ML.Trainers.FastTree.Internal,\r\nMicrosoft.ML.Learners, \r\nMicrosoft.ML.Trainers.SymSGD.","Url":"https://github.com/dotnet/machinelearning/pull/2442","RelatedDescription":"Open PR \"Towards #2326 - removing some namespaces\" (#2442)"},{"Id":"407365927","IsPullRequest":true,"CreatedAt":"2019-02-06T21:05:36","Actor":"rogancarr","Number":"2436","RawContent":null,"Title":"Add Skip and Take filters","State":"closed","Body":"This PR adds the Skip and Take filters to the `DataOperations` catalog in `MLContext`, with corresponding samples. It also adds direct constructors for `Skip` and `Take` to the `SkipTakeTransform` in the style of the other filters in ML.NET.\r\n\r\nFixes #2401","Url":"https://github.com/dotnet/machinelearning/pull/2436","RelatedDescription":"Closed or merged PR \"Add Skip and Take filters\" (#2436)"},{"Id":"407421102","IsPullRequest":false,"CreatedAt":"2019-02-06T20:41:16","Actor":"rogancarr","Number":"2438","RawContent":null,"Title":"We need documentation describing how to use the explainability features in ML.NET","State":"open","Body":"We have some great explainability features in ML.NET, but they are hidden here and there. It would be great to have an explainability doc, similar to the [ML.NET Cookbook](https://github.com/dotnet/machinelearning/blob/master/docs/code/MlNetCookBook.md), that showed how to use these features and what they do.","Url":"https://github.com/dotnet/machinelearning/issues/2438","RelatedDescription":"Open issue \"We need documentation describing how to use the explainability features in ML.NET\" (#2438)"},{"Id":"407029270","IsPullRequest":true,"CreatedAt":"2019-02-06T19:54:23","Actor":"rogancarr","Number":"2427","RawContent":null,"Title":"Adding Shuffle to the catalog","State":"closed","Body":"This PR adds `Shuffle` to the catalog, along with a sample. It also marks `RowShufflingTransform` `internal`.\r\n\r\nFixes #342 ","Url":"https://github.com/dotnet/machinelearning/pull/2427","RelatedDescription":"Closed or merged PR \"Adding Shuffle to the catalog\" (#2427)"},{"Id":"407383688","IsPullRequest":false,"CreatedAt":"2019-02-06T19:02:28","Actor":"zeahmed","Number":"2437","RawContent":null,"Title":"VariableVectorType attribute","State":"open","Body":"`VectorType(0)` is currently used to designate a variable in a type as variable length vector e.g.\r\n\r\n``` csharp\r\npublic class IMDBSentiment\r\n{\r\n    public string Sentiment_Text { get; set; }\r\n\r\n    /// <summary>\r\n    /// This is a variable length vector designated by VectorType(0) attribute.\r\n    /// Variable length vectors are produced by applying operations such as 'TokenizeWords' on strings\r\n    /// resulting in vectors of tokens of variable lengths.\r\n    /// </summary>\r\n    [VectorType(0)]\r\n    public int[] VariableLenghtFeatures { get; set; }\r\n}\r\n```\r\n\r\nThis seems not very intuitive. Can we have attribute type that can be specifically used to designed variable length vectors? such as `VariableVectorType`","Url":"https://github.com/dotnet/machinelearning/issues/2437","RelatedDescription":"Open issue \"VariableVectorType attribute\" (#2437)"},{"Id":"407364026","IsPullRequest":true,"CreatedAt":"2019-02-06T18:12:01","Actor":"wschin","Number":"2435","RawContent":null,"Title":"[WIP] Typed Calibrated Predictors","State":"open","Body":"There are some [problems ](https://github.com/dotnet/machinelearning/issues/2378)around weekly-typed calibrated predictor, if we want to expose those trained calibrated predictor to users. To expose trained predictor in a type-safe manner, this PR adds two type parameters to `CalibratedPredictorBase`; that is,\r\n```csharp\r\n    /// <summary>\r\n    /// <see cref=\"IHasInternalCalibratedPredictor\"/> provide a weekly-typed way to access strongly-typed\r\n    /// <see cref=\"CalibratedPredictorBase{TSubPredictor, TCalibrator}.SubPredictor\"/> and\r\n    /// <see cref=\"CalibratedPredictorBase{TSubPredictor, TCalibrator}.Calibrator\"/>.\r\n    /// <see cref=\"IHasInternalCalibratedPredictor\"/> is commonly used in weekly-typed expressions. The\r\n    /// existence of this interface is just for supporting existing codebase, so we discourage its uses.\r\n    /// </summary>\r\n    [BestFriend]\r\n    internal interface IHasInternalCalibratedPredictor\r\n    {\r\n        IPredictorProducing<float> InternalSubPredictor { get; }\r\n        ICalibrator InternalCalibrator { get; }\r\n    }\r\n\r\n    public abstract class CalibratedPredictorBase<TSubPredictor, TCalibrator> :\r\n        IDistPredictorProducing<float, float>,\r\n        ICanSaveInIniFormat,\r\n        ICanSaveInTextFormat,\r\n        ICanSaveInSourceCode,\r\n        ICanSaveSummary,\r\n        ICanGetSummaryInKeyValuePairs,\r\n        IHasInternalCalibratedPredictor\r\n        where TSubPredictor : class, IPredictorProducing<float>\r\n        where TCalibrator : class, ICalibrator\r\n```\r\nand make changes making the code complied. This PR doesn't make every use of `CalibratedPredictorBase` type-safe, because there are some functionalities built upon C# interface.","Url":"https://github.com/dotnet/machinelearning/pull/2435","RelatedDescription":"Open PR \"[WIP] Typed Calibrated Predictors\" (#2435)"},{"Id":"407320745","IsPullRequest":true,"CreatedAt":"2019-02-06T16:30:41","Actor":"mareklinka","Number":"2434","RawContent":null,"Title":"Add analyzer for detecting BestFriend usages on public declarations","State":"open","Body":"As proposed in #2415, the `BestFriend` attribute should never be applied to public declarations. While this is not a problem per se it still introduces unnecessary noise. I implemented a code analyzer that will flag these occurrences as errors whenever a `[BestFriend]` attribute is applied to a:\r\n\r\n1. public class/struct/enum/interface\r\n2. public method/property/field/delegate\r\n3. public constructor\r\n\r\nI didn't implement an automated code fix for this diagnostic as fixing the problem is trivial - either remove the attribute or make the declaration internal. If we still want a code fix to be created I'll gladly take care of that as well.\r\n\r\nFixes #2415.","Url":"https://github.com/dotnet/machinelearning/pull/2434","RelatedDescription":"Open PR \"Add analyzer for detecting BestFriend usages on public declarations\" (#2434)"},{"Id":"406993497","IsPullRequest":true,"CreatedAt":"2019-02-06T16:15:57","Actor":"rogancarr","Number":"2424","RawContent":null,"Title":"Add MissingValueFilter (NAFilter) to the DataOperations catalog","State":"closed","Body":"This PR adds the `MissingValueFilter` (aka `NAFilter`) to the `DataOperations` catalog along with a sample of its use.\r\n\r\nFixes #2400 ","Url":"https://github.com/dotnet/machinelearning/pull/2424","RelatedDescription":"Closed or merged PR \"Add MissingValueFilter (NAFilter) to the DataOperations catalog\" (#2424)"},{"Id":"407175873","IsPullRequest":false,"CreatedAt":"2019-02-06T10:48:14","Actor":"nsulikowski","Number":"2433","RawContent":null,"Title":"NimbusML's dot_export_pipeline for c#","State":"open","Body":"How can I access the list of estimators inside a pipeline?\r\nI can see it as _estimators in the \"Non-Public\" area of the Locals window when I debug.\r\nI'm trying to display the pipeline graphically (from c#) similar to the way NimbusML does\r\n\r\nfrom nimbusml.utils.exports import dot_export_pipeline\r\ndot_vis = dot_export_pipeline(pipeline, stream)\r\nprint(dot_vis)\r\n\r\nI'm stuck at how to navigate the pipeline.","Url":"https://github.com/dotnet/machinelearning/issues/2433","RelatedDescription":"Open issue \"NimbusML's dot_export_pipeline for c#\" (#2433)"},{"Id":"407168220","IsPullRequest":true,"CreatedAt":"2019-02-06T10:28:15","Actor":"HerraHak","Number":"2432","RawContent":null,"Title":"Update the parameters description in the summary as described in the issue 2177","State":"open","Body":"Fixes #2177 \r\n\r\nThe description of the parameters have been updated as described by @sfilipi in issue #2177 \r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [X ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [X ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [X ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ N/A] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2432","RelatedDescription":"Open PR \"Update the parameters description in the summary as described in the issue 2177\" (#2432)"},{"Id":"407120560","IsPullRequest":true,"CreatedAt":"2019-02-06T08:11:05","Actor":"artidoro","Number":"2431","RawContent":null,"Title":"WIP: ITransformer derives from ICanSaveModel and explicit implementation for ICanSaveModel","State":"open","Body":"Fixes  #2336.\r\n\r\nThis PR makes `ITransformer` derive from `ICanSaveModel`. The reasons for changing the core `ITransformer/IEstimator/IDataView` API are illustrated in more detail in the issue #2336. But this essentially captures the idea that once trained the model should be savable. \r\nFor this change I moved `ICanSaveModel, ModelSaveContext, ModelLoadContext` and a few related utility files to Microsoft.ML.Core as `ITransformer` lives in that assembly.\r\n\r\nThe second dimension of this change is the explicit implementation of the interface `ICanSaveModel` everywhere. This will make it a requirement to cast the classes to `ICanSaveModel` in order to access the method `Save(ModelSaveContext ctx)` so that it is less visible. I have covered the entire code base with my changes, including some classes that are internal and others that I think should be made internal shortly. This makes my change touch ~140 files. I decided to do so in order to make the way we implement the `ICanSaveModel` interface consistent everywhere.","Url":"https://github.com/dotnet/machinelearning/pull/2431","RelatedDescription":"Open PR \"WIP: ITransformer derives from ICanSaveModel and explicit implementation for ICanSaveModel\" (#2431)"},{"Id":"407057097","IsPullRequest":false,"CreatedAt":"2019-02-06T02:26:08","Actor":"nsulikowski","Number":"2430","RawContent":null,"Title":"BoostrapSample not in Data catalog","State":"open","Body":"mlcontext.Data.BoostrapSample does not exists (from your samples)","Url":"https://github.com/dotnet/machinelearning/issues/2430","RelatedDescription":"Open issue \"BoostrapSample not in Data catalog\" (#2430)"},{"Id":"407045017","IsPullRequest":true,"CreatedAt":"2019-02-06T01:21:17","Actor":"Anipik","Number":"2428","RawContent":null,"Title":"Minimum Vector size check added","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2253\r\n\r\nThe new c# implementation is slower for inputs of smaller size, so adding a size constraint for using these new c# apis\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2428","RelatedDescription":"Open PR \"Minimum Vector size check added\" (#2428)"},{"Id":"407003246","IsPullRequest":false,"CreatedAt":"2019-02-05T22:29:45","Actor":"Ivanidzo4ka","Number":"2425","RawContent":null,"Title":"We have zero tests for OnlineGradientDescent","State":"open","Body":"While looking into https://github.com/dotnet/machinelearning/issues/2407 I found we have only one test which indirectly touches OGD, `TestPfiRegressionOnDenseFeatures` we have zero tests with baselines (well we have them, but they marked as skipped)","Url":"https://github.com/dotnet/machinelearning/issues/2425","RelatedDescription":"Open issue \"We have zero tests for OnlineGradientDescent\" (#2425)"},{"Id":"406982910","IsPullRequest":false,"CreatedAt":"2019-02-05T21:30:23","Actor":"ileve","Number":"2423","RawContent":null,"Title":"Unable to find TensorFlow dll","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win7-x64\r\n- **.NET Version (eg., dotnet --info)**: NET.Core SDK 2.1.502 and project target NET.Core 2.1\r\nVisual Studio version 15.9.4\r\n\r\n### **Unable to find TensorFlow DLL**\r\n\r\n- **What did you do?**\r\nI tried to run the example [TensorFlowTransform](https://github.com/dotnet/machinelearning/blob/e3830910531f00013c27391914233a085a1394a4/docs/samples/Microsoft.ML.Samples/Dynamic/TensorFlowTransform.cs)\r\n\r\n- **What happened?**\r\n\r\nWhen the method `ScoreTensorFlowModel` is invoked, I receive the following runtime exception:\r\n\r\n`Unable to load DLL 'tensorflow' or one of its dependencies: Exception from HRESULT: 0xC000001D`\r\n\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nI used version `0.11.0-preview-27405-2`. I also tried to set build target to x64 but didn't work.\r\nI also notice that the static extension method `ApplyTensorFlowGraph` is not available in nuget package.","Url":"https://github.com/dotnet/machinelearning/issues/2423","RelatedDescription":"Open issue \"Unable to find TensorFlow dll\" (#2423)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-07T05:30:56.2605142Z","RunDurationInMilliseconds":1093}