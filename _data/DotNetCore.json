{"Data":{"Blog":{"FeedItems":[{"Title":"Fall .NET Core Survey","PublishedOn":"2019-10-17T20:24:19+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"It’s been a busy time for .NET Core – we just shipped 3.0, and are currently working on a few updates for v3.1 (due in November.) As we turn our attention to .NET Core 5.0, we want to take a step back...","Href":"https://devblogs.microsoft.com/dotnet/fall-net-core-survey/","RawContent":null},{"Title":".NET Framework October 2019 Preview of Quality Rollup","PublishedOn":"2019-10-15T21:11:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Core 3.1 Preview 1","PublishedOn":"2019-10-15T16:49:48+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.1 Preview 1. .NET Core 3.1 will be a small release focused on key improvements in Blazor and Windows desktop, the two big additions in .NET Core 3.0. It will...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/","RawContent":null},{"Title":".NET Framework October 2019 Security and Quality Rollup","PublishedOn":"2019-10-08T19:10:44+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the October 2019 Security and Quality Rollup and Cumulative Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10647641262","Type":"IssuesEvent","CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 1\" (#131) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10682368454","Type":"PullRequestEvent","CreatedAt":"2019-10-22T05:03:41","Actor":"adamsitnik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27340","RelatedDescription":"Merged pull request \"remove double bound check from StringBuilder.Append(char)\" (#27340) at dotnet/coreclr","RelatedBody":"Idea suggested by @EgorBo in a different PR\r\n\r\n```cs\r\n[Benchmark]\r\n[Arguments(100)]\r\n[Arguments(100_000)]\r\npublic StringBuilder Append_Char(int length)\r\n{\r\n    StringBuilder builder = new StringBuilder();\r\n\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        builder.Append('a');\r\n    }\r\n\r\n    return builder;\r\n}\r\n\r\n[Benchmark]\r\n[Arguments(100)]\r\n[Arguments(100_000)]\r\npublic StringBuilder Append_Char_Capacity(int length)\r\n{\r\n    StringBuilder builder = new StringBuilder(length);\r\n\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        builder.Append('a');\r\n    }\r\n\r\n    return builder;\r\n}\r\n```\r\n\r\n|               Method |           Toolchain | length |         Mean | Ratio |\r\n|--------------------- |-------------------- |------- |-------------:|------:|\r\n|          Append_Char |  \\after\\CoreRun.exe |    100 |     329.0 ns |  0.98 |\r\n|          Append_Char | \\before\\CoreRun.exe |    100 |     335.5 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n| Append_Char_Capacity |  \\after\\CoreRun.exe |    100 |     224.5 ns |  0.89 |\r\n| Append_Char_Capacity | \\before\\CoreRun.exe |    100 |     251.7 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n|          Append_Char |  \\after\\CoreRun.exe | 100000 | 235,113.5 ns |  1.00 |\r\n|          Append_Char | \\before\\CoreRun.exe | 100000 | 235,569.2 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n| Append_Char_Capacity |  \\after\\CoreRun.exe | 100000 | 205,619.0 ns |  0.88 |\r\n| Append_Char_Capacity | \\before\\CoreRun.exe | 100000 | 233,656.2 ns |  1.00 |\r\n\r\nCodgen:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/67228458-96185100-f439-11e9-8a6d-3e8fa4c860ca.png)\r\n\r\n\r\n"},{"Id":"10682326318","Type":"PullRequestEvent","CreatedAt":"2019-10-22T04:51:57","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27339","RelatedDescription":"Merged pull request \"Fix -gcc flag in bash build scripts.\" (#27339) at dotnet/coreclr","RelatedBody":"Re-enables the -gcc flag that was broken in #27077 \r\n\r\ncc: @franksinankaya "},{"Id":"10681858155","Type":"PullRequestEvent","CreatedAt":"2019-10-22T02:42:23","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25702","RelatedDescription":"Closed pull request \"Frkaya/gccfixes 07152019\" (#25702) at dotnet/coreclr","RelatedBody":"@am11 @jkotas @janvorli "},{"Id":"10681799988","Type":"PullRequestEvent","CreatedAt":"2019-10-22T02:27:03","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27349","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert,corefx\" (#27349) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @eriawan @danmosemsft"},{"Id":"10681780503","Type":"IssuesEvent","CreatedAt":"2019-10-22T02:21:49","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23386","RelatedDescription":"Closed issue \"JIT doesn't compile with GCC\" (#23386) at dotnet/coreclr","RelatedBody":"There is a desire to compile CoreCLR with GCC compiler.\r\nThere are two benefits to this approach.\r\n\r\n1. Code coverage and bugs.\r\nThis allows us to find bugs that were not previously caught by clang and MSVC compilers. GCC also has a much more stricter compliance requirements than other compilers. This allows code to be future proof.\r\n\r\n2. Porting to other platforms\r\nThere are several operating systems where GCC is supported natively but clang is not. This wll allows CoreCLR to reach out to more platforms and increase usage.\r\n\r\nWhile # 2 is a long term goal, # 1 is very valuable.\r\n\r\nSeveral GCC portability changes have been already merged into CoreCLR baseline. Code is %90 compilable. \r\n\r\nRemaining issues are: guid support (declspec(uuid)) and JIT compilation issues.\r\n\r\nuuid has been discussed here. https://github.com/dotnet/coreclr/issues/22745 Implementation is to do.\r\n\r\nThis issue has been raised to support JIT.\r\n\r\nImmediate Problem:\r\nJIT compiler makes use of __declspec(property) attributes. GCC compiler doesn't support this construct.\r\n\r\nSuggestion:\r\nRecommendation is to remove property usage and do a direct function calls.  The change is very mechanical.\r\n\r\nfind src/jit -type f -exec sed -i -e 's/->genEmitter/->getEmitter()/g' {} \\;\r\nfind src/jit -type f -exec sed -i -e 's/\\.genEmitter/\\.getEmitter()/g' {} \\;\r\nfind src/jit -type f -exec sed -i -e 's/genEmitter->/getEmitter()->/g' {} \\;\r\n\r\nImpacts:\r\nThis will have rebase issues for ongoing reviews. While this has been raised as a big impact, fixing the issue is as simple as changing calling convention from genEmitter to getEmitter(). \r\n\r\ncategory:implementation\r\ntheme:jit-coding-style\r\nskill-level:beginner\r\ncost:medium"},{"Id":"10681760204","Type":"IssuesEvent","CreatedAt":"2019-10-22T02:16:20","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27357","RelatedDescription":"Closed issue \"Question Jit Allocation reuse\" (#27357) at dotnet/coreclr","RelatedBody":"Jit allocations hang around; I assume the memory is reused rather than leaked? (e.g. have 12MB of unreleased Jit allocations in this trace)\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254274-2a070e80-f474-11e9-8b37-6850d373d6f7.png)\r\n\r\n\r\nSample chain\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254241-f88e4300-f473-11e9-9d6f-3569248186ab.png)\r\n"},{"Id":"10681748247","Type":"PullRequestEvent","CreatedAt":"2019-10-22T02:13:04","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27358","RelatedDescription":"Opened pull request \"Disable JIT\\Directed\\VectorABI\\VectorMgdMgdStatic_r under JitStress modes\" (#27358) at dotnet/coreclr","RelatedBody":"Same assertion as in https://github.com/dotnet/coreclr/pull/27291\r\nFails in https://dev.azure.com/dnceng/public/_build/results?buildId=392704\r\n\r\nRe-enable when #26491 is fixed\r\n\r\ncc @dotnet/jit-contrib "},{"Id":"10681604073","Type":"IssuesEvent","CreatedAt":"2019-10-22T01:33:33","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27357","RelatedDescription":"Opened issue \"Question Jit Allocation reuse\" (#27357) at dotnet/coreclr","RelatedBody":"Jit allocations hang around; I assume the memory is reused rather than leaked? (e.g. have 12MB of unreleased Jit allocations in this trace)\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254274-2a070e80-f474-11e9-8b37-6850d373d6f7.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254241-f88e4300-f473-11e9-9d6f-3569248186ab.png)\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10682241290","Type":"PullRequestEvent","CreatedAt":"2019-10-22T04:27:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12954","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12954) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.13\r\n- **Date Produced**: 10/22/2019 2:35 AM\r\n- **Commit**: 93b469074cd73445634feeb0032f7fcb75ef4bfb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.13\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19521.5 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n"},{"Id":"10681690849","Type":"PullRequestEvent","CreatedAt":"2019-10-22T01:57:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12952","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12952) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191021.6\r\n- **Date Produced**: 10/22/2019 12:34 AM\r\n- **Commit**: c1389d79af44fa1f05d9ef8345173db93b821fdb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19521.6\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n\r\n\r\n"},{"Id":"10681532128","Type":"PullRequestEvent","CreatedAt":"2019-10-22T01:13:32","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12955","RelatedDescription":"Opened pull request \"Fix mark of the web\" (#12955) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"10681145185","Type":"PullRequestEvent","CreatedAt":"2019-10-21T23:35:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12954","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12954) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.9\r\n- **Date Produced**: 10/21/2019 10:21 PM\r\n- **Commit**: 12fdfd9bbde31795c3b2c4552b332296c596ddea\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.9\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.9\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.9\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10680536922","Type":"PullRequestEvent","CreatedAt":"2019-10-21T21:40:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12953","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12953) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.7\r\n- **Date Produced**: 10/21/2019 7:58 PM\r\n- **Commit**: 763532fc5b6003b7aedc2d9b587411a6826e30e1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10680332198","Type":"PullRequestEvent","CreatedAt":"2019-10-21T21:10:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12953","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12953) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.7\r\n- **Date Produced**: 10/21/2019 7:58 PM\r\n- **Commit**: 763532fc5b6003b7aedc2d9b587411a6826e30e1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10680093464","Type":"IssuesEvent","CreatedAt":"2019-10-21T20:38:12","Actor":"rainersigwald","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/4101","RelatedDescription":"Closed issue \"Migration: Remove msbuild.exe text file workaround\" (#4101) at dotnet/cli","RelatedBody":"blocked on: https://github.com/Microsoft/msbuild/issues/927\n"},{"Id":"10679869993","Type":"PullRequestEvent","CreatedAt":"2019-10-21T20:10:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12952","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12952) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191021.2\r\n- **Date Produced**: 10/21/2019 7:24 PM\r\n- **Commit**: 4fd9d383d965067a7a8a4f620ebc1120a1be18f5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19521.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10675738806","Type":"PullRequestEvent","CreatedAt":"2019-10-21T12:23:02","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1620","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1620) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191020.7\r\n- **Date Produced**: 10/21/2019 6:09 AM\r\n- **Commit**: 03453d9aae8e5d18e571699c5d2229b1ab5f4b9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19520.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10675662428","Type":"PullRequestEvent","CreatedAt":"2019-10-21T12:12:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1620","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1620) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191020.7\r\n- **Date Produced**: 10/21/2019 6:09 AM\r\n- **Commit**: 03453d9aae8e5d18e571699c5d2229b1ab5f4b9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19520.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10670217318","Type":"PullRequestEvent","CreatedAt":"2019-10-20T12:22:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1619","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1619) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191019.7\r\n- **Date Produced**: 10/20/2019 2:47 AM\r\n- **Commit**: 03dd803990dfb8f05db8d0ec1bc34268386c1d5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19519.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10670195878","Type":"PullRequestEvent","CreatedAt":"2019-10-20T12:12:01","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1619","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1619) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191019.7\r\n- **Date Produced**: 10/20/2019 2:47 AM\r\n- **Commit**: 03dd803990dfb8f05db8d0ec1bc34268386c1d5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19519.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10667443815","Type":"PullRequestEvent","CreatedAt":"2019-10-19T12:29:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1618","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1618) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191018.10\r\n- **Date Produced**: 10/19/2019 7:13 AM\r\n- **Commit**: 5590d3896f012c1c9b7774774456331a36ba1d57\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19518.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10667422101","Type":"PullRequestEvent","CreatedAt":"2019-10-19T12:19:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1618","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1618) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191018.10\r\n- **Date Produced**: 10/19/2019 7:13 AM\r\n- **Commit**: 5590d3896f012c1c9b7774774456331a36ba1d57\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19518.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10682268271","Type":"PullRequestEvent","CreatedAt":"2019-10-22T04:35:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41980","RelatedDescription":"Opened pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41980) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.7\r\n- **Date Produced**: 10/22/2019 1:46 AM\r\n- **Commit**: 7a8e08cac71924a301d96dbac6dcb283677e93b1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10682081201","Type":"PullRequestEvent","CreatedAt":"2019-10-22T03:41:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41976","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41976) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.5\r\n- **Date Produced**: 10/21/2019 10:27 PM\r\n- **Commit**: a43e0c2108d27cc88a22a9881ce5aaaa690a1d65\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.5\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10681963450","Type":"IssuesEvent","CreatedAt":"2019-10-22T03:10:07","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41432","RelatedDescription":"Closed issue \"Process.Start() stuck forever on Alpine Linux when UserName is set in StartInfo\" (#41432) at dotnet/corefx","RelatedBody":"Code example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var p = new Process\r\n            {\r\n                StartInfo = new ProcessStartInfo\r\n                {\r\n                    FileName = \"/bin/sh\",\r\n                    UserName = \"root\",\r\n                    RedirectStandardInput = true,\r\n                    RedirectStandardOutput = true,\r\n                    RedirectStandardError = true,\r\n                    UseShellExecute = false\r\n                },\r\n                EnableRaisingEvents = true\r\n            };\r\n\r\n            Console.WriteLine(\"Trying to start /bin/sh\");\r\n            p.Start();\r\n            Console.WriteLine(\"/bin/sh started successfully\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPublish the project with `dotnet publish -c Release -r linux-musl-x64 --self-contained` and copy the output to a fresh-installed Alpine Linux VM.\r\n\r\n```\r\nlocalhost:~/test# ./test\r\nTrying to start /bin/sh\r\n```\r\n(output stuck here)\r\n\r\nThe process tree looks like this\r\n![image](https://user-images.githubusercontent.com/1969802/65828964-3cf24d00-e2d3-11e9-8a85-4e9bf2f7a7a2.png)\r\n\r\n```\r\nlocalhost:~# cat /proc/2421/stack\r\n[<0>] _do_fork+0x21c/0x2fe\r\n[<0>] do_syscall_64+0x50/0xeb\r\n[<0>] entry_SYSCALL_64_after_hwframe+0x44/0xa9\r\n[<0>] 0xffffffffffffffff\r\nlocalhost:~# cat /proc/2429/stack\r\n[<0>] futex_wait_queue_me+0xbc/0x101\r\n[<0>] futex_wait+0xd7/0x1f1\r\n[<0>] do_futex+0x131/0x9a5\r\n[<0>] __se_sys_futex+0x139/0x15e\r\n[<0>] do_syscall_64+0x50/0xeb\r\n[<0>] entry_SYSCALL_64_after_hwframe+0x44/0xa9\r\n[<0>] 0xffffffffffffffff\r\n```\r\n\r\nIt seems that the parent process already called vfork() but child has not yet exec or exit, leaving the parent in the uninterruptible sleep state. Related framework code could possibly be [here](https://github.com/dotnet/corefx/blob/5c83394112febe1b481ab1c0b61a45c850677165/src/Native/Unix/System.Native/pal_process.c#L342)\r\n\r\nEnvironment info\r\n.NET Core SDK version: 3.0.100\r\nOS: Alpine Linux 3.10 latest"},{"Id":"10681815326","Type":"IssuesEvent","CreatedAt":"2019-10-22T02:31:08","Actor":"liu10725","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41979","RelatedDescription":"Opened issue \"NetCore System.Drawing.Common Bitmap SetResolution invalid\" (#41979) at dotnet/corefx","RelatedBody":"Setting the image resolution is good on windows, but it doesn't work on Linux. When you draw text, you don't enlarge the font according to the resolution.\r\n\r\n`image.SetResolution(96 * imageDpi, 96 * imageDpi);`"},{"Id":"10681794809","Type":"IssuesEvent","CreatedAt":"2019-10-22T02:25:38","Actor":"Alan-Lun","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41978","RelatedDescription":"Opened issue \"Net Core 3.0 Memory\" (#41978) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/41669\r\n記憶體都持續飆高，不會下降\r\n基本專案\r\nhttps://github.com/Alan-Lun/NetCoreMemory\r\n\r\n圖片\r\ninit\r\nhttps://imgur.com/PgpjVFe\r\n呼叫一次\r\nhttps://imgur.com/2w25aUI\r\n連續呼叫\r\nhttps://imgur.com/SU8bWQm\r\nhttps://imgur.com/t3GxpGY\r\n\r\n目前專案上Memory\r\nQuartz.net(https://github.com/quartznet/quartznet)\r\nhttps://imgur.com/IyanjhX\r\n.Net Core 3.0 WebAPI\r\nhttps://imgur.com/YXBCd2e\r\n\r\nmemory total: 128mb\r\nbuild image: mcr.microsoft.com/dotnet/core/sdk:3.0-buster\r\ndotnet publish API.csproj -c Release -r linux-x64 --self-contained true\r\n\r\nrun image: mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim\r\n\r\nAWS ECS\r\nCPU available:2048\r\nMemory available(MB)\r\nAgent version: 1.29.0\r\nDocker version:18.06.1-ce"},{"Id":"10681702300","Type":"PullRequestEvent","CreatedAt":"2019-10-22T02:00:42","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41977","RelatedDescription":"Opened pull request \"Add more tests for collections\" (#41977) at dotnet/corefx","RelatedBody":"Additional tests for collections, given the changes in https://github.com/dotnet/corefx/pull/41482.\r\n- Fixes https://github.com/dotnet/corefx/issues/40657\r\n- Partly addresses https://github.com/dotnet/corefx/issues/40370"},{"Id":"10681665386","Type":"PullRequestEvent","CreatedAt":"2019-10-22T01:50:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41976","RelatedDescription":"Opened pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41976) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.5\r\n- **Date Produced**: 10/21/2019 10:27 PM\r\n- **Commit**: a43e0c2108d27cc88a22a9881ce5aaaa690a1d65\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.5\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10681663995","Type":"PullRequestEvent","CreatedAt":"2019-10-22T01:50:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41870","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41870) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.2\r\n- **Date Produced**: 10/21/2019 7:02 PM\r\n- **Commit**: 89091b51f3a4ececbf2af2e9fff6f9400efe8191\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.2\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10681633405","Type":"PullRequestEvent","CreatedAt":"2019-10-22T01:41:53","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41975","RelatedDescription":"Opened pull request \"Handle non blittable LOGFONT structs\" (#41975) at dotnet/corefx","RelatedBody":"Adding support for blittable structs broke non-blittable structs passed to `Font.FromLogFont`. Try to blit and fall through to the marshaller for non blittable types.\r\n\r\nFixes: https://github.com/dotnet/winforms/issues/2136\r\n\r\nWe should consider for 3.1 as this has been reported by a customer."},{"Id":"10681562852","Type":"IssuesEvent","CreatedAt":"2019-10-22T01:21:45","Actor":"mairaw","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41836","RelatedDescription":"Closed issue \"HttpClient.DefaultRequestVersion of HTTP/2 is not honored if using SendAsync\" (#41836) at dotnet/corefx","RelatedBody":"This will send a request via HTTP/1.1:\r\n\r\n```c#\r\nvar client = new HttpClient() { DefaultRequestVersion = HttpVersion.Version20 };\r\nvar msg = new HttpRequestMessage { Method = HttpMethod.Get, RequestUri = new Uri(\"https://contoso.com\") };\r\nclient.SendAsync(msg);\r\n```\r\n\r\nThe default version is only being used for the convenience methods (`GetAsync` etc.)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10681405430","Type":"PullRequestEvent","CreatedAt":"2019-10-22T00:39:59","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39438","RelatedDescription":"Opened pull request \"Lock resettable delay to prevent concurrent access.\" (#39438) at dotnet/roslyn","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994068"},{"Id":"10681397272","Type":"IssuesEvent","CreatedAt":"2019-10-22T00:37:44","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39437","RelatedDescription":"Opened issue \"Code fixes never shows up if you navigate to it and the file has never been open before\" (#39437) at dotnet/roslyn","RelatedBody":"This is 100% repro and has occurred up on stage presenting the fixes.\r\n\r\n**Visual Studio Version**:\r\nVersion 16.4.0 Preview 3.0 [29421.117.master]\r\n\r\n**Summary**:\r\n\r\n**Steps to Reproduce**:\r\n\r\nMake sure Full Solution Analysis is turned on.\r\n\r\n1. `git clone https://github.com/davkean/audio-switcher`\r\n2. `cd audio-switcher`\r\n3. `git checkout 9d8fa8d1d1dde083abc6d813617df05b088d88f1`\r\n4. `src\\AudioSwitcher.sln`\r\n5. Open Error List and wait for \"Use pattern matching\" analysis message to appear\r\n6. Double-click it to natigate to source code\r\n7. Drop lightbulb\r\n\r\nExpected:\r\n\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/67252753-0f5a8700-f4c0-11e9-9b60-449a59ebd03e.png)\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/67252740-079ae280-f4c0-11e9-9e4f-abfbc36604b8.png)\r\n\r\n**User Impact**:\r\n"},{"Id":"10681327554","Type":"PullRequestEvent","CreatedAt":"2019-10-22T00:19:53","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39431","RelatedDescription":"Merged pull request \"Link to http://sourceroslyn.io\" (#39431) at dotnet/roslyn","RelatedBody":""},{"Id":"10681227724","Type":"PullRequestEvent","CreatedAt":"2019-10-21T23:55:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39300","RelatedDescription":"Merged pull request \"Avoid leave.s opcode jumping out of a finally block\" (#39300) at dotnet/roslyn","RelatedBody":"There were two problems with the original implementation:\r\n- within a `try` statement, we should only jump to the `finallyEntry` label for disposal when we're inside the `try` or a `catch` block, but not if we're inside that `finally` block.\r\n- even with that fixed, we were still producing a `leave.s` to jump out of a `finally`, which is illegal. So we now jump to the end of the current finally instead.\r\n\r\n``` csharp\r\ntry\r\n{\r\n}\r\nfinally\r\n{\r\n    try\r\n    {\r\n    }\r\n    finally\r\n    {\r\n    }\r\n    // disposal code inserted after finally to jump to next relevant finally should not straight jump to \"exit\" label (invalid leave.s instruction), but instead to the end of the enclosing finally, \"finallyExit\"\r\n    ...\r\n    finallyExit:\r\n}\r\nexit:\r\n```\r\n\r\nThis is illustrated by the commits in this PR.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/38961\r\nFYI @stephentoub "},{"Id":"10681227712","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:55:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38961","RelatedDescription":"Closed issue \"IAsyncEnumerable iterator method generates InvalidProgramException at runtime\" (#38961) at dotnet/roslyn","RelatedBody":"**Version Used**: Core 3.0.100\r\n\r\n**Steps to Reproduce**:\r\n\r\n1) Call this function:\r\n\r\n\r\n        object _splitsLock = new object();\r\n        public async IAsyncEnumerable<SplitBatch> GetSplits(IEnumerable<string> ids,\r\n            DateTime from, DateTime to, [EnumeratorCancellation] CancellationToken ct)\r\n        {\r\n            if (to == from)\r\n                yield break;\r\n            try\r\n            {\r\n            }\r\n            finally\r\n            {\r\n                lock (_splitsLock)\r\n                    Console.WriteLine(\"\");\r\n            }\r\n        }\r\n\r\n\r\n**Expected Behavior**: No InvalidProgramException\r\n\r\n**Actual Behavior**: InvalidProgramException\r\n\r\nI stripped it of most code while still triggering the error. The lock in the finally block is needed to trigger the exception. Function is called from a grpc streaming server call in asp.net core."},{"Id":"10681105099","Type":"PullRequestEvent","CreatedAt":"2019-10-21T23:26:08","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39436","RelatedDescription":"Opened pull request \"Call AsyncIteratorMethodBuilder.Complete\" (#39436) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/39321\r\n\r\nWe need to call `AsyncIteratorMethodBuilder.Complete` to dispose of some resources it holds. We can do that when bringing the state machine to a finalized state (`-2`), that is when we'd call `AsyncTaskMethodBuilder.SetResult` in a plain async method.\r\nBut a completed instance cannot be re-used, so we also need to reset it in `GetAsyncEnumerator`.\r\n"},{"Id":"10681030509","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:10:04","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39435","RelatedDescription":"Opened issue \"Incorrect editor behavior during Rename Refactor\" (#39435) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784737/incorrect-editor-behavior-during-rename-refactor.html)._\n\n---\n<ol><li>In a C# project, initiate a rename refactor on an identifier having more than one character.</li><li>Press Shift+Left Arrow to select one or more characters, but not all of them.</li><li>Type some characters.</li></ol><p>RESULT: The selected characters are deleted, but the typed characters appear at the beginning of the identifier.</p><p>EXPECT: The typed characters to overwrite the selected characters.</p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/20/2019, 07:41 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10681018291","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:07:25","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39434","RelatedDescription":"Opened issue \"Autogeneration of interface implementation for IDiaStackWalkHelper is confused by indexed getter\" (#39434) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784552/autogeneration-of-interface-implementation-for-idi.html)._\n\n---\nAfter importing the DIA com type library in my C# project, I try to implement the IDiaStackWalkHelper interface. Using the automatic inteface implementation skeleton generation command results in an incorrect implementation of the `get_registerValue` method.\n\nThe generated skeleton thinks that `registerValue` is a normal property, when it is not. It's a named indexer, which isn't supported in C# and must be implemented as a pair of regular methods.\n\nThis error is instantly detected by intelisense who points out that the members aren't implemented.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/21/2019, 03:00 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10681010686","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:05:47","Actor":"ryzngard","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39430","RelatedDescription":"Closed issue \"IDE0054 and IDE0063 triggered when NOT using C#8\" (#39430) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/752720/ide0054-and-ide0063-triggered-when-not-using-c8.html)._\n\n---\nProblem since upgrading to VS Community 2019 16.3.\n\n.Net Framework projects only support C#7.3, but various C#8 hints are triggered which lead to code changes that look valid in the IDE but do not compile (&quot;language feature XXX is not availabel in C#7.3&quot;). \n\nI can prevent this by manually disabling the rules in a .ruleset file, but it would be better to disbale rules automatically that target a higher version.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/28/2019, 07:27 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 9/30/2019, 00:25 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Tom Austin on 10/15/2019, 02:43 AM: \n\n<p>Is there anymore info on this? It's still an issue.</p>\n\n#### sean on 10/17/2019, 00:48 PM: \n\n<p>I am using VS Professional 16.3.5 and am experiencing this issue.</p><p>I am using a type that implements `IDisposable`.</p><p>My csproj is an SDK style project.</p><p>It has `&lt;LangVersion&gt;latest&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;net472&lt;/TargetFramework&gt;`, so it is not a .NET Core project.</p><p><br>Do I have to explicitly set `&lt;LangVersion&gt;7.3&lt;/LangVersion&gt;` to not get the `IDE0063` recommendation?</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10680998519","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:03:08","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39433","RelatedDescription":"Opened issue \"weird indentation for tuple literal ending with lambda csharp\" (#39433) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784678/weird-indentation-for-tuple-literal-ending-with-la.html)._\n\n---\nIf I write a lambda in a tuple and type a semicolon after the tuple or ask Visual Studio to fix indentation for the file, it adds a newline between the lambda’s closing curly brace and the tuple’s closing parenthesis. This seems odd. I would expect a newline between the opening parenthesis and first value in the tuple if this were considered the desired style. However, I don’t think it is the desired style for tuples.\n\nI generally expect the styling of tuple parens to be the same as function argument list parens.\n\nBefore typing the semicolon:\n```csharp\nvar plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();\nplan.Add((2, i =&gt;\n{\n    Console.WriteLine($&quot;Action (execution {i})&quot;);\n}))\n```\n\n\nAfter typing the semicolon after the tuple.:\n```csharp\nvar plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();\nplan.Add((2, i =&gt;\n{\n    Console.WriteLine($&quot;Action (execution {i})&quot;);\n}\n));\n```\n\nExpected:\n```csharp\nvar plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();\nplan.Add((2, i =&gt;\n{\n    Console.WriteLine($&quot;Action (execution {i})&quot;);\n}));\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/21/2019, 02:48 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10680957764","Type":"PullRequestEvent","CreatedAt":"2019-10-21T22:54:39","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39432","RelatedDescription":"Opened pull request \"Semantic model assert\" (#39432) at dotnet/roslyn","RelatedBody":"Fixed invalid assert in `GetRemappedSymbols` for `AttributeSemanticModel`s. Since attribute models don't have a root symbol, we can't perform any symbol remapping in that context. Additionally updated the IDE test with the current baseline. @dotnet/roslyn-compiler @ryzngard for review.\r\nFixes https://github.com/dotnet/roslyn/issues/39427."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10682428506","Type":"IssuesEvent","CreatedAt":"2019-10-22T05:20:51","Actor":"DardoTheMaster","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7832","RelatedDescription":"Closed issue \"Unable to compile on Ubuntu 18.04 (WSL)\" (#7832) at dotnet/corert","RelatedBody":"Hello, i'm just trying out to build a shared library from a dotnet project.\r\nUnfortunately i'm getting this error and i'm unable to build the underlined project.\r\n\r\n```\r\n$ dotnet publish /p:NativeLib=Shared -r linux-x64\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  Restore completed in 63.25 ms for /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj.\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  NativeLibrary -> /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/bin/Debug/netcoreapp3.0/linux-x64/NativeLibrary.dll\r\n  /usr/bin/clang-6.0\r\n  Generating native code\r\nclang : warning : argument unused during compilation: '-exported_symbols_list obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports' [-Wunused-command-line-argument] [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n  /usr/bin/ld: obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o: relocation R_X86_64_PC32 against symbol `System_Console_System_Text_StringOrCharArray____GetFieldHelper' can not be used when making a shared object; recompile with -fPIC\r\n  /usr/bin/ld: final link failed: Bad value\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n/home/dardo/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang-6.0 \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o\" -o \"bin/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.so\" -exported_symbols_list \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports\" /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libbootstrapperdll.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libRuntime.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.CoreLib.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.TypeLoader.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Globalization.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.IO.Compression.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Net.Security.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt -shared\" exited with code 1. [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\ndardo@LAPTOP-TQ8D057I:/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary$\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10681798208","Type":"PullRequestEvent","CreatedAt":"2019-10-22T02:26:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7833","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7833) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @eriawan @danmosemsft @AaronRobinsonMSFT @stephentoub @GrabYourPitchforks @delmyers @benaadams @tannergooding"},{"Id":"10680769818","Type":"PullRequestEvent","CreatedAt":"2019-10-21T22:18:52","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7833","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7833) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10675768976","Type":"IssuesEvent","CreatedAt":"2019-10-21T12:26:51","Actor":"DardoTheMaster","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7832","RelatedDescription":"Opened issue \"Unable to compile on Ubuntu 18.04 (WSL)\" (#7832) at dotnet/corert","RelatedBody":"Hello, i'm just trying out to build a shared library from a dotnet project.\r\nUnfortunately i'm getting this error and i'm unable to build the underlined project.\r\n\r\n```\r\n$ dotnet publish /p:NativeLib=Shared -r linux-x64\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  Restore completed in 63.25 ms for /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj.\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  NativeLibrary -> /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/bin/Debug/netcoreapp3.0/linux-x64/NativeLibrary.dll\r\n  /usr/bin/clang-6.0\r\n  Generating native code\r\nclang : warning : argument unused during compilation: '-exported_symbols_list obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports' [-Wunused-command-line-argument] [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n  /usr/bin/ld: obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o: relocation R_X86_64_PC32 against symbol `System_Console_System_Text_StringOrCharArray____GetFieldHelper' can not be used when making a shared object; recompile with -fPIC\r\n  /usr/bin/ld: final link failed: Bad value\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n/home/dardo/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang-6.0 \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o\" -o \"bin/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.so\" -exported_symbols_list \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports\" /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libbootstrapperdll.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libRuntime.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.CoreLib.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.TypeLoader.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Globalization.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.IO.Compression.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Net.Security.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt -shared\" exited with code 1. [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\ndardo@LAPTOP-TQ8D057I:/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary$\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10670449661","Type":"PullRequestEvent","CreatedAt":"2019-10-20T14:04:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7830","RelatedDescription":"Merged pull request \"Add AppContext switch to not throw for Type.Name\" (#7830) at dotnet/corert","RelatedBody":"Makes simple WinForms apps work in reflection-free mode without crashing.\r\n\r\nhttps://github.com/dotnet/winforms/blob/5df2ebfe70f2eaa2733c7f21e7e9e20f0be7e766/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L4013"},{"Id":"10670448300","Type":"PullRequestEvent","CreatedAt":"2019-10-20T14:04:12","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7831","RelatedDescription":"Merged pull request \"Scan for Marshal.SizeOf in reflection-disabled mode\" (#7831) at dotnet/corert","RelatedBody":"I tacked scanning for `Marshal.SizeOf(typeof(SomeType))` on the reflection method body scanner. It felt a bit dirty, but it worked and we no longer had to worry about not having interop marshalling data for these types at runtime if we saw the pattern at compile time.\r\n\r\nBut we would like to scan for this even in the reflection disabled mode, which makes this whole business a bit messier.\r\n\r\nWe'll probably want to plug this into the RyuJIT scanner at some point, but we'll need to think about scanning some more (whether scanning is just an optimization, or whether scanning is needed for correctness, how/whether would RyuJIT report parameters, etc.)."},{"Id":"10669127322","Type":"PullRequestEvent","CreatedAt":"2019-10-20T02:03:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7828","RelatedDescription":"Merged pull request \"Move portable thread pool to shared partition\" (#7828) at dotnet/corert","RelatedBody":""},{"Id":"10668657728","Type":"PullRequestEvent","CreatedAt":"2019-10-19T21:20:21","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7831","RelatedDescription":"Opened pull request \"Scan for Marshal.SizeOf in reflection-disabled mode\" (#7831) at dotnet/corert","RelatedBody":"I tacked scanning for `Marshal.SizeOf(typeof(SomeType))` on the reflection method body scanner. It felt a bit dirty, but it worked and we no longer had to worry about not having interop marshalling data for these types at runtime if we saw the pattern at compile time.\r\n\r\nBut we would like to scan for this even in the reflection disabled mode, which makes this whole business a bit messier.\r\n\r\nWe'll probably want to plug this into the RyuJIT scanner at some point, but we'll need to think about scanning some more (whether scanning is just an optimization, or whether scanning is needed for correctness, how/whether would RyuJIT report parameters, etc.)."},{"Id":"10668656183","Type":"PullRequestEvent","CreatedAt":"2019-10-19T21:19:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7830","RelatedDescription":"Opened pull request \"Add AppContext switch to not throw for Type.Name\" (#7830) at dotnet/corert","RelatedBody":"Makes simple WinForms apps work in reflection-free mode without crashing.\r\n\r\nhttps://github.com/dotnet/winforms/blob/5df2ebfe70f2eaa2733c7f21e7e9e20f0be7e766/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L4013"},{"Id":"10668601575","Type":"IssuesEvent","CreatedAt":"2019-10-19T20:52:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7829","RelatedDescription":"Opened issue \"Compilation crashes with System.IndexOutOfRangeException\" (#7829) at dotnet/corert","RelatedBody":"```\r\n  Unhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n     at Internal.IL.Stubs.ILStubMethodIL.GetObject(Int32 token) in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\Stubs\\ILEmitter.cs:line 550\r\n     at Internal.IL.ILStackHelper.ComputeMaxStack(MethodIL methodIL) in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\ILStackHelper.cs:line 290\r\n     at Internal.IL.Stubs.ILStubMethodIL.get_MaxStack() in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\Stubs\\ILEmitter.cs:line 527\r\n     at Internal.JitInterface.CorInfoImpl.Get_CORINFO_METHOD_INFO(MethodDesc method, MethodIL methodIL, CORINFO_METHOD_INFO* methodInfo) in F:\\workspace\\_work\\1\\s\\src\\JitInterface\\src\\CorInfoImpl.cs:line 413\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL) in F:\\workspace\\_work\\1\\s\\src\\JitInterface\\src\\CorInfoImpl.cs:line 154\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode) in F:\\workspace\\_work\\1\\s\\src\\ILCompiler.RyuJit\\src\\Compiler\\RyuJitCompilation.cs:line 139\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10681023517","Type":"IssuesEvent","CreatedAt":"2019-10-21T23:08:32","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3768","RelatedDescription":"Opened issue \"Cannot build on ubuntu 18.04\" (#3768) at dotnet/sdk","RelatedBody":"Should disable downloading 1.x runtime on later distros"},{"Id":"10680386941","Type":"IssuesEvent","CreatedAt":"2019-10-21T21:17:54","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3765","RelatedDescription":"Closed issue \"PublishSingleFile=true does not include Content files\" (#3765) at dotnet/sdk","RelatedBody":"I am working with a (non-web) .NET Core 3.0 console application and I am trying to use `PublishSingleFile=true`. While the single-file aspect does indeed work (I get one executable file), my application always crashes due to missing appsettings.json files. I've tried setting the files to Content/None, Copy Always/Newest. I also tried adding `<CopyToPublishDirectory>true</CopyToPublishDirectory>` and yet nothing seems to work.\r\n\r\nIf I create a brand new fresh _Web_-SDK project, the single file publish works and the content files are dropped right next to the published executable. I tried comparing the starter web project to my console application and I don't see a difference.  \r\n\r\nThe easiest reproduction I have is to create a blank console application project, add a text file to the project (as content or `none`) and then publish with the PublishSingleFile=true. The output does not contain the content files. \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"MyContentFile.txt\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n      <CopyToPublishDirectory>Always</CopyToPublishDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIs this supposed to work for non-Web projects?\r\n\r\n> .NET Core SDK (reflecting any global.json):\r\n>  Version:   3.0.100\r\n>  Commit:    04339c3a26\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.18362\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 3.0.0\r\n>   Commit:  95a0a61858\r\n> \r\n> .NET Core SDKs installed:\r\n>   3.0.100-rc1-014190 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]"},{"Id":"10679008318","Type":"PullRequestEvent","CreatedAt":"2019-10-21T18:24:53","Actor":"tlakollo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3705","RelatedDescription":"Closed pull request \"Improve Error Experience\" (#3705) at dotnet/sdk","RelatedBody":"As part of the improve error experience linker issue (see issue https://github.com/mono/linker/issues/653) we find out that an additional flag was needed in order to print warning messages.\r\nThis change mades possible for the linker to print valuable information like warnings when an assembly is unresolved and is going to be skipped. Likely this feature could also work to warning the user when it's using patterns that could break their application."},{"Id":"10678688920","Type":"IssuesEvent","CreatedAt":"2019-10-21T17:46:46","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3708","RelatedDescription":"Closed issue \"Build Order Bug with app.config/BeforeBuild\" (#3708) at dotnet/sdk","RelatedBody":"Please see https://github.com/icsharpcode/ILSpy/issues/1731\r\n\r\nEffectively, only Visual Studio gets the build order wrong, but both of our build servers don't (msbuild). The cause seems that app.config for ILSpy.csproj is built from a template."},{"Id":"10678545494","Type":"IssuesEvent","CreatedAt":"2019-10-21T17:29:33","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3679","RelatedDescription":"Closed issue \"Upgraded projects which compile to NS 2.1, didn't compile, downgrade, now compile fails as well\" (#3679) at dotnet/sdk","RelatedBody":"I was trying to update an application to netcore3 to fix some issues, which spawned other issues (RazorTagHelper requiring some Configuration to operate). To attempt resolve those issues i figured i may try to update the libraries to netstandard 2.1 - that didn't fix it either, so i downgraded my projects back to 2.0.\r\n\r\nOddly enough now those libraries won't compile either even if i clean the solution + delete bin/obj manually.\r\n\r\nFehler: Es wurde versucht, einen numerischen Vergleich für \"$(_TargetFrameworkVersionWithoutV)\" auszuführen, der zu \"**.2.0**\" anstatt zu einer Zahl in Bedingung \" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '**2.0**' \" ausgewertet wird.  C:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.NuGetOfflineCache.targets"},{"Id":"10670876562","Type":"IssuesEvent","CreatedAt":"2019-10-20T16:55:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3762","RelatedDescription":"Closed issue \"The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\" (#3762) at dotnet/sdk","RelatedBody":"_From @DataTables on Thursday, October 17, 2019 10:16:11 AM_\r\n\r\n### Describe the bug\r\n\r\nWhen adding .NET Core 3.0 to a multi-targeted project I'm getting the error:\r\n\r\n> error NETSDK1073: The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\r\n\r\nI've followed the [porting guide here](https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-2.2&tabs=visual-studio) but have been unable to resolve the issue. It looks like this also also been raised in [other issues](https://github.com/aspnet/AspNetCore/issues/4490), but the indications there are that this was an issue during the previews and should now be resolved.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1) Clone into [this repo](https://github.com/DataTables/Editor-NET) which is the one I'm trying to add .NET Core 3.0 build support to.\r\n2) Update the DataTables-Editor-Server.csproj file to target .NET Core 3.0:\r\n\r\n```\r\n<TargetFrameworks>netcoreapp2.1;netcoreapp3.0;net45;net46;net47</TargetFrameworks>\r\n```\r\n\r\nand add:\r\n\r\n```\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netcoreapp3.0'\">\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.CSharp\">\r\n      <Version>4.6.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n```\r\n\r\n3) Run `msbuild DataTables.sln` - observe errors for .NET Core 3.0 build.\r\n\r\nThe [documentation here](https://docs.microsoft.com/en-gb/dotnet/core/tools/csproj#implicit-package-references) notes that `Microsoft.AspNetCore.App\"` is implicit and doesn't need to be included, but the migration guide says it should if the SDK is `Microsoft.NET.Sdk` which I've been using.\r\n\r\n### Expected behavior\r\ndll targeting .NET Core 3.0 will be build along with the others.\r\n\r\n### Additional context\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  27\r\n OS Platform: Linux\r\n RID:         fedora.27-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  95a0a61858\r\n\r\n.NET Core SDKs installed:\r\n  2.1.505 [/usr/share/dotnet/sdk]\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nInstallation for .NET Core (and Framework via mono) build in Fedora was:\r\n\r\n```\r\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\r\nwget -q https://packages.microsoft.com/config/fedora/27/prod.repo\r\nsudo mv prod.repo /etc/yum.repos.d/microsoft-prod.repo\r\nsudo chown root:root /etc/yum.repos.d/microsoft-prod.repo\r\n\r\nsudo dnf install -y aspnetcore-runtime-2.1\r\nsudo dnf install -y dotnet-sdk-2.1-2.1.505\r\n\r\nsudo dnf install -y aspnetcore-runtime-3.0\r\nsudo dnf install -y dotnet-sdk-3.0\r\n\r\n# .NET Framework via Mono\r\nsudo rpm --import \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\"\r\nsudo curl https://download.mono-project.com/repo/centos7-stable.repo | sudo tee /etc/yum.repos.d/mono-centos7-stable.repo\r\nsudo dnf install -y mono-devel mono-complete xsp msbuild\r\n```\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#15107_"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"510147416","IsPullRequest":true,"CreatedAt":"2019-10-22T05:03:40","Actor":"adamsitnik","Number":"27340","RawContent":null,"Title":"remove double bound check from StringBuilder.Append(char)","State":"closed","Body":"Idea suggested by @EgorBo in a different PR\r\n\r\n```cs\r\n[Benchmark]\r\n[Arguments(100)]\r\n[Arguments(100_000)]\r\npublic StringBuilder Append_Char(int length)\r\n{\r\n    StringBuilder builder = new StringBuilder();\r\n\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        builder.Append('a');\r\n    }\r\n\r\n    return builder;\r\n}\r\n\r\n[Benchmark]\r\n[Arguments(100)]\r\n[Arguments(100_000)]\r\npublic StringBuilder Append_Char_Capacity(int length)\r\n{\r\n    StringBuilder builder = new StringBuilder(length);\r\n\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        builder.Append('a');\r\n    }\r\n\r\n    return builder;\r\n}\r\n```\r\n\r\n|               Method |           Toolchain | length |         Mean | Ratio |\r\n|--------------------- |-------------------- |------- |-------------:|------:|\r\n|          Append_Char |  \\after\\CoreRun.exe |    100 |     329.0 ns |  0.98 |\r\n|          Append_Char | \\before\\CoreRun.exe |    100 |     335.5 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n| Append_Char_Capacity |  \\after\\CoreRun.exe |    100 |     224.5 ns |  0.89 |\r\n| Append_Char_Capacity | \\before\\CoreRun.exe |    100 |     251.7 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n|          Append_Char |  \\after\\CoreRun.exe | 100000 | 235,113.5 ns |  1.00 |\r\n|          Append_Char | \\before\\CoreRun.exe | 100000 | 235,569.2 ns |  1.00 |\r\n|                      |                     |        |              |       |\r\n| Append_Char_Capacity |  \\after\\CoreRun.exe | 100000 | 205,619.0 ns |  0.88 |\r\n| Append_Char_Capacity | \\before\\CoreRun.exe | 100000 | 233,656.2 ns |  1.00 |\r\n\r\nCodgen:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/67228458-96185100-f439-11e9-8a6d-3e8fa4c860ca.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27340","RelatedDescription":"Closed or merged PR \"remove double bound check from StringBuilder.Append(char)\" (#27340)"},{"Id":"510147023","IsPullRequest":true,"CreatedAt":"2019-10-22T04:51:56","Actor":"jkoritzinsky","Number":"27339","RawContent":null,"Title":"Fix -gcc flag in bash build scripts.","State":"closed","Body":"Re-enables the -gcc flag that was broken in #27077 \r\n\r\ncc: @franksinankaya ","Url":"https://github.com/dotnet/coreclr/pull/27339","RelatedDescription":"Closed or merged PR \"Fix -gcc flag in bash build scripts.\" (#27339)"},{"Id":"510325784","IsPullRequest":true,"CreatedAt":"2019-10-22T02:27:02","Actor":"Dotnet-GitSync-Bot","Number":"27349","RawContent":null,"Title":"Mirror changes from dotnet/corert,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @eriawan @danmosemsft","Url":"https://github.com/dotnet/coreclr/pull/27349","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,corefx\" (#27349)"},{"Id":"510382283","IsPullRequest":false,"CreatedAt":"2019-10-22T02:16:20","Actor":"benaadams","Number":"27357","RawContent":null,"Title":"Question Jit Allocation reuse","State":"closed","Body":"Jit allocations hang around; I assume the memory is reused rather than leaked? (e.g. have 12MB of unreleased Jit allocations in this trace)\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254274-2a070e80-f474-11e9-8b37-6850d373d6f7.png)\r\n\r\n\r\nSample chain\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/67254241-f88e4300-f473-11e9-9d6f-3569248186ab.png)\r\n","Url":"https://github.com/dotnet/coreclr/issues/27357","RelatedDescription":"Closed issue \"Question Jit Allocation reuse\" (#27357)"},{"Id":"510391706","IsPullRequest":true,"CreatedAt":"2019-10-22T02:13:04","Actor":"echesakovMSFT","Number":"27358","RawContent":null,"Title":"Disable JIT\\Directed\\VectorABI\\VectorMgdMgdStatic_r under JitStress modes","State":"open","Body":"Same assertion as in https://github.com/dotnet/coreclr/pull/27291\r\nFails in https://dev.azure.com/dnceng/public/_build/results?buildId=392704\r\n\r\nRe-enable when #26491 is fixed\r\n\r\ncc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27358","RelatedDescription":"Open PR \"Disable JIT\\Directed\\VectorABI\\VectorMgdMgdStatic_r under JitStress modes\" (#27358)"},{"Id":"510185280","IsPullRequest":true,"CreatedAt":"2019-10-22T01:06:05","Actor":"franksinankaya","Number":"27341","RawContent":null,"Title":"Remove declspec","State":"closed","Body":"@sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27341","RelatedDescription":"Closed or merged PR \"Remove declspec\" (#27341)"},{"Id":"510322479","IsPullRequest":true,"CreatedAt":"2019-10-22T00:56:42","Actor":"elinor-fung","Number":"27348","RawContent":null,"Title":"Fix setting WinRT assembly's fallback binder","State":"closed","Body":"`AssemblySpec::SetHostBinder` is no longer used. We were relying on that being set (`LoadDomainAssembly` in typeparse.cpp) to then set the fallback binder set on WinRT assembly (for use in the case of a WinRT assembly triggering the load of a non-WinRT assembly). This should now go through `AssemblySpec::GetFallbackLoadContextBinderForRequestingAssembly`\r\n\r\nRemove unused functions and params in binding code","Url":"https://github.com/dotnet/coreclr/pull/27348","RelatedDescription":"Closed or merged PR \"Fix setting WinRT assembly's fallback binder\" (#27348)"},{"Id":"510372854","IsPullRequest":true,"CreatedAt":"2019-10-22T00:50:51","Actor":"jkotas","Number":"27356","RawContent":null,"Title":"Delete Uap quirks from CoreLib","State":"open","Body":"This matches cleanup done in CoreFX.","Url":"https://github.com/dotnet/coreclr/pull/27356","RelatedDescription":"Open PR \"Delete Uap quirks from CoreLib\" (#27356)"},{"Id":"510365529","IsPullRequest":true,"CreatedAt":"2019-10-22T00:21:32","Actor":"SrivastavaAnubhav","Number":"27355","RawContent":null,"Title":"[WIP] Implement comparisons for all ObjectNodes","State":"open","Body":"* Implement comparison for all ObjectNodes so that the output of the compiler will be deterministic after introducing parallelism\r\n* Add sorting for ModuleDesc in TypeSystemComparer\r\n* Sort methods before returning them from ReadyToRunTableManager\r\n\r\nNotes to reviewers:\r\n* I tested with the CoreRT_DeterminismSeed and confirmed that after these changes we have deterministic output with different seeds\r\n* I have not added parallelism in this PR, but I have tested locally with it and it seems to work\r\n* I still have to add a test for the aforementioned determinism in this PR","Url":"https://github.com/dotnet/coreclr/pull/27355","RelatedDescription":"Open PR \"[WIP] Implement comparisons for all ObjectNodes\" (#27355)"},{"Id":"510256428","IsPullRequest":true,"CreatedAt":"2019-10-22T00:20:59","Actor":"mikedn","Number":"27343","RawContent":null,"Title":"Delete dead liveness code","State":"closed","Body":"Nothing calls `fgUpdateLiveSet`. It's also possibly broken - it's looking for `GTF_VAR_DEATH` on a node which might not be a `LCL_VAR`.","Url":"https://github.com/dotnet/coreclr/pull/27343","RelatedDescription":"Closed or merged PR \"Delete dead liveness code\" (#27343)"},{"Id":"510363380","IsPullRequest":true,"CreatedAt":"2019-10-22T00:13:55","Actor":"sywhang","Number":"27354","RawContent":null,"Title":"Refactor genEventing script to remove SELECTANY from provider context struct definitions","State":"open","Body":"This refactors the genEventing script so that the static runtime context definitions don't contain SELECTANY. ","Url":"https://github.com/dotnet/coreclr/pull/27354","RelatedDescription":"Open PR \"Refactor genEventing script to remove SELECTANY from provider context struct definitions\" (#27354)"},{"Id":"510354315","IsPullRequest":false,"CreatedAt":"2019-10-21T23:39:38","Actor":"sywhang","Number":"27353","RawContent":null,"Title":"Some runtime events are always fired under LTTng","State":"open","Body":"When tracing an app via LTTng, the user must set the environment variable `COMPlus_EnableEventLog`. Currently, even if this variable is set to 0 (which is the default behavior), it tries to still fire a bunch of events through LTTng because the runtime side that fires these methods aren't checking whether EnableEventLog is set. \r\n\r\nHere is an EventStats view from PerfView on a trace I collected with LTTng without setting the environment variable: \r\n![image](https://user-images.githubusercontent.com/30421794/67250707-4c237100-f421-11e9-92cf-021cfbdfe7bb.png)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27353","RelatedDescription":"Open issue \"Some runtime events are always fired under LTTng\" (#27353)"},{"Id":"510352432","IsPullRequest":true,"CreatedAt":"2019-10-21T23:32:54","Actor":"sandreenko","Number":"27352","RawContent":null,"Title":"Fix: Expression 'refType == RefTypeUpperVectorSave' is always false.","State":"open","Body":"https://github.com/dotnet/coreclr/pull/23344/files#diff-93fb9832a03a9783e2a415b581fcb45c added a fast return for `(refType == RefTypeUpperVectorSave) || (refType == RefTypeUpperVectorRestore)` so that check became useless. \r\n\r\nAnother small PVS warning.","Url":"https://github.com/dotnet/coreclr/pull/27352","RelatedDescription":"Open PR \"Fix: Expression 'refType == RefTypeUpperVectorSave' is always false.\" (#27352)"},{"Id":"510349787","IsPullRequest":true,"CreatedAt":"2019-10-21T23:24:00","Actor":"sdmaclea","Number":"27351","RawContent":null,"Title":"Fix step with stackalloc (#27246)","State":"open","Body":"* Make ControllerStackInfo::m_returnFrame private\r\n\r\n* Make ControllerStackInfo always capture a return frame\r\n\r\nIn case the active frame has no managed caller, capture\r\nthe unmanaged frame\r\n\r\n* Fix step over stackalloc\r\n\r\nGeneralize handling of stack allocations and stepping\r\n\r\n* Fix GetFunctionFromToken() argument checking\r\n\r\nCheck token type is a method before creating a CordbFunction.\r\n\r\nAdd extra assert to check for invalid tokens","Url":"https://github.com/dotnet/coreclr/pull/27351","RelatedDescription":"Open PR \"Fix step with stackalloc (#27246)\" (#27351)"},{"Id":"510346155","IsPullRequest":true,"CreatedAt":"2019-10-21T23:13:29","Actor":"sandreenko","Number":"27350","RawContent":null,"Title":"Delete `fgArgInfo::ArgsComplete():hasStackArgs` local var.","State":"open","Body":"`fgArgInfo` has a field with the same name and the same function. The duplication happened because the local var was added in 2011 and the struct field was added in 2014.\r\nhttps://github.com/dotnet/coreclr/blob/90e59bed1cf8c513d42fc7c660953e7d46057a4e/src/jit/compiler.h#L1757\r\n\r\nPVS warning:  The 'hasStackArgs' local variable possesses the same name as one of the class members, which can result in a confusion. morph.cpp 1247","Url":"https://github.com/dotnet/coreclr/pull/27350","RelatedDescription":"Open PR \"Delete `fgArgInfo::ArgsComplete():hasStackArgs` local var.\" (#27350)"},{"Id":"510321315","IsPullRequest":true,"CreatedAt":"2019-10-21T22:08:50","Actor":"cshung","Number":"27347","RawContent":null,"Title":"[crossgen2] Make sure hardware intrinsic are generated for CoreLib only","State":"open","Body":"To validate this change, I added this method into `tests/src/readytorun/crossgen2/Program.cs` and run the test as usual before and after the change. Because the function is not defined in CoreLib (and intentionally, the use of the hardware intrinsic is *not* protected under `IsSupported`, the code would have failfast if the running processor does not support the `lzcnt` instruction.\r\n\r\n```C#\r\nprivate static void DoNotExpandHardwareIntrinsics()\r\n{\r\n    uint number = 10086;\r\n    Console.WriteLine(Lzcnt.LeadingZeroCount(number));\r\n}\r\n```\r\n\r\nBefore the change, the `R2RDump` of the function looks like this:\r\n\r\n```\r\nVoid Program.DoNotExpandHardwareIntrinsics()\r\nHandle: 0x0600004F\r\nRid: 79\r\nEntryPointRuntimeFunctionId: 41\r\nNumber of RuntimeFunctions: 1\r\n\r\nVoid Program.DoNotExpandHardwareIntrinsics()\r\nId: 41\r\nStartAddress: 0x00004D90\r\nSize: 50 bytes\r\nUnwindRVA: 0x000014FC\r\nVersion:            1\r\nFlags:              0x03 EHANDLER UHANDLER\r\nSizeOfProlog:       0x0005\r\nCountOfUnwindCodes: 2\r\nFrameRegister:      RAX\r\nFrameOffset:        0x0\r\nPersonalityRVA:     0x3928\r\nUnwindCode[0]: CodeOffset 0x0005 FrameOffset 0x5205 NextOffset 0x-1 Op 48\r\nUnwindCode[1]: CodeOffset 0x0001 FrameOffset 0x5001 NextOffset 0x-1 Op RBP(5)\r\n\r\nGC info:\r\n    Version:                           2\r\n    ReturnKind:                        RT_Scalar\r\n    ValidRangeStart:                   0x0000\r\n    ValidRangeEnd:                     0x0000\r\n    SecurityObjectStackSlot:           0xFFFFFFFF\r\n    GSCookieStackSlot:                 0xFFFFFFFF\r\n    PSPSymStackSlot:                   0xFFFFFFFF\r\n    GenericsInstContextStackSlot:      0xFFFFFFFF\r\n    StackBaseRegister:                 5\r\n    SizeOfENCPreservedArea:            0xFFFFFFFF\r\n    ReversePInvokeFrameStackSlot:      0xFFFFFFFF\r\n    SizeOfStackOutgoingAndScratchArea: 0x0020\r\n    NumSafePoints:                     0\r\n    NumInterruptibleRanges:            1\r\n    SafePointOffsets: 0\r\n    InterruptibleRanges: 1\r\n        Index:  0; StartOffset: 0x000F; StopOffset: 0x002C\r\n    SlotTable:\r\n        NumRegisters:  0\r\n        NumStackSlots: 0\r\n        NumUntracked:  0\r\n        NumSlots:      0\r\n        GcSlots:       0\r\n\r\nDebug Info\r\n\tBounds:\r\n\tNative Offset: 0x0, IL Offset: 0xFFFFFFFE, Source Types: StackEmpty\r\n\tNative Offset: 0xF, IL Offset: 0x0, Source Types: StackEmpty\r\n\tNative Offset: 0x10, IL Offset: 0x1, Source Types: StackEmpty\r\n\tNative Offset: 0x17, IL Offset: 0x7, Source Types: StackEmpty\r\n\tNative Offset: 0x21, IL Offset: 0xD, Source Types: SourceTypeInvalid\r\n\tNative Offset: 0x24, IL Offset: 0xD, Source Types: CallInstruction\r\n\tNative Offset: 0x2A, IL Offset: 0x12, Source Types: StackEmpty\r\n\tNative Offset: 0x2B, IL Offset: 0x13, Source Types: StackEmpty\r\n\tNative Offset: 0x2C, IL Offset: 0xFFFFFFFD, Source Types: StackEmpty\r\n\r\n\tVariable Locations:\r\n\tVariable Number: 0\r\n\tStart Offset: 0xF\r\n\tEnd Offset: 0x2C\r\n\tLoc Type: VLT_STK\r\n\tBase Register: RBP\r\n\tStack Offset: -4\r\n\r\n    4d90: 55                    push rbp\r\n                                UWOP_PUSH_NONVOL RBP(5)\r\n    4d91: 48 83 ec 30           sub rsp, 48\r\n                                UWOP_ALLOC_SMALL 48\r\n    4d95: 48 8d 6c 24 30        lea rbp, [rsp + 48]\r\n    4d9a: 33 c0                 xor eax, eax\r\n    4d9c: 89 45 fc              mov dword ptr [rbp - 4], eax\r\n    4d9f: 90                    nop\r\n    4da0: c7 45 fc 66 27 00 00  mov dword ptr [rbp - 4], 10086\r\n    4da7: 33 c9                 xor ecx, ecx\r\n    4da9: f3 0f bd 4d fc        lzcnt ecx, dword ptr [rbp - 4]\r\n    4dae: 89 4d f8              mov dword ptr [rbp - 8], ecx\r\n    4db1: 8b 4d f8              mov ecx, dword ptr [rbp - 8]\r\n    4db4: ff 15 4e 9d 01 00     call qword ptr [0x1eb08]      // Void System.Console.WriteLine(UInt32) (METHOD_ENTRY_REF_TOKEN)\r\n    4dba: 90                    nop\r\n    4dbb: 90                    nop\r\n    4dbc: 48 8d 65 00           lea rsp, [rbp]\r\n    4dc0: 5d                    pop rbp\r\n    4dc1: c3                    ret\r\n```\r\n\r\nI am not checking in the test change right now since there is no way I can validate the generated code in the current test harness.\r\n\r\nAfter the change. the `R2RDump` of the function looks like this:\r\n```\r\nVoid Program.DoNotExpandHardwareIntrinsics()\r\nHandle: 0x0600004F\r\nRid: 79\r\nEntryPointRuntimeFunctionId: 41\r\nNumber of RuntimeFunctions: 1\r\n\r\nVoid Program.DoNotExpandHardwareIntrinsics()\r\nId: 41\r\nStartAddress: 0x00004D90\r\nSize: 52 bytes\r\nUnwindRVA: 0x000014FC\r\nVersion:            1\r\nFlags:              0x03 EHANDLER UHANDLER\r\nSizeOfProlog:       0x0005\r\nCountOfUnwindCodes: 2\r\nFrameRegister:      RAX\r\nFrameOffset:        0x0\r\nPersonalityRVA:     0x3928\r\nUnwindCode[0]: CodeOffset 0x0005 FrameOffset 0x5205 NextOffset 0x-1 Op 48\r\nUnwindCode[1]: CodeOffset 0x0001 FrameOffset 0x5001 NextOffset 0x-1 Op RBP(5)\r\n\r\nGC info:\r\n    Version:                           2\r\n    ReturnKind:                        RT_Scalar\r\n    ValidRangeStart:                   0x0000\r\n    ValidRangeEnd:                     0x0000\r\n    SecurityObjectStackSlot:           0xFFFFFFFF\r\n    GSCookieStackSlot:                 0xFFFFFFFF\r\n    PSPSymStackSlot:                   0xFFFFFFFF\r\n    GenericsInstContextStackSlot:      0xFFFFFFFF\r\n    StackBaseRegister:                 5\r\n    SizeOfENCPreservedArea:            0xFFFFFFFF\r\n    ReversePInvokeFrameStackSlot:      0xFFFFFFFF\r\n    SizeOfStackOutgoingAndScratchArea: 0x0020\r\n    NumSafePoints:                     0\r\n    NumInterruptibleRanges:            1\r\n    SafePointOffsets: 0\r\n    InterruptibleRanges: 1\r\n        Index:  0; StartOffset: 0x000F; StopOffset: 0x002E\r\n    SlotTable:\r\n        NumRegisters:  0\r\n        NumStackSlots: 0\r\n        NumUntracked:  0\r\n        NumSlots:      0\r\n        GcSlots:       0\r\n\r\nDebug Info\r\n\tBounds:\r\n\tNative Offset: 0x0, IL Offset: 0xFFFFFFFE, Source Types: StackEmpty\r\n\tNative Offset: 0xF, IL Offset: 0x0, Source Types: StackEmpty\r\n\tNative Offset: 0x10, IL Offset: 0x1, Source Types: StackEmpty\r\n\tNative Offset: 0x17, IL Offset: 0x7, Source Types: StackEmpty\r\n\tNative Offset: 0x1A, IL Offset: 0x8, Source Types: CallInstruction\r\n\tNative Offset: 0x23, IL Offset: 0xD, Source Types: SourceTypeInvalid\r\n\tNative Offset: 0x26, IL Offset: 0xD, Source Types: CallInstruction\r\n\tNative Offset: 0x2C, IL Offset: 0x12, Source Types: StackEmpty\r\n\tNative Offset: 0x2D, IL Offset: 0x13, Source Types: StackEmpty\r\n\tNative Offset: 0x2E, IL Offset: 0xFFFFFFFD, Source Types: StackEmpty\r\n\r\n\tVariable Locations:\r\n\tVariable Number: 0\r\n\tStart Offset: 0xF\r\n\tEnd Offset: 0x2E\r\n\tLoc Type: VLT_STK\r\n\tBase Register: RBP\r\n\tStack Offset: -4\r\n\r\n    4d90: 55                    push rbp\r\n                                UWOP_PUSH_NONVOL RBP(5)\r\n    4d91: 48 83 ec 30           sub rsp, 48\r\n                                UWOP_ALLOC_SMALL 48\r\n    4d95: 48 8d 6c 24 30        lea rbp, [rsp + 48]\r\n    4d9a: 33 c0                 xor eax, eax\r\n    4d9c: 89 45 fc              mov dword ptr [rbp - 4], eax\r\n    4d9f: 90                    nop\r\n    4da0: c7 45 fc 66 27 00 00  mov dword ptr [rbp - 4], 10086\r\n    4da7: 8b 4d fc              mov ecx, dword ptr [rbp - 4]\r\n    4daa: ff 15 58 9d 01 00     call qword ptr [0x1eb08]      // UInt32 System.Runtime.Intrinsics.X86.Lzcnt.LeadingZeroCount(UInt32) (METHOD_ENTRY_REF_TOKEN)\r\n    4db0: 89 45 f8              mov dword ptr [rbp - 8], eax\r\n    4db3: 8b 4d f8              mov ecx, dword ptr [rbp - 8]\r\n    4db6: ff 15 54 9d 01 00     call qword ptr [0x1eb10]      // Void System.Console.WriteLine(UInt32) (METHOD_ENTRY_REF_TOKEN)\r\n    4dbc: 90                    nop\r\n    4dbd: 90                    nop\r\n    4dbe: 48 8d 65 00           lea rsp, [rbp]\r\n    4dc2: 5d                    pop rbp\r\n    4dc3: c3                    ret\r\n```\r\n\r\n@dotnet/crossgen-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27347","RelatedDescription":"Open PR \"[crossgen2] Make sure hardware intrinsic are generated for CoreLib only\" (#27347)"},{"Id":"510310216","IsPullRequest":true,"CreatedAt":"2019-10-21T21:41:52","Actor":"nattress","Number":"27346","RawContent":null,"Title":"Ignore launchSettings.json","State":"open","Body":"With crossgen2 now moved into this branch, debugging creates a launchSettings.json for local dev command line / working folder we should ignore.\r\n\r\nThis is controversial as a default setting for VS (https://github.com/github/gitignore/pull/2705). We are not storing required launch config in any launchSettings.json in this repo so should be fine.","Url":"https://github.com/dotnet/coreclr/pull/27346","RelatedDescription":"Open PR \"Ignore launchSettings.json\" (#27346)"},{"Id":"510299210","IsPullRequest":false,"CreatedAt":"2019-10-21T21:17:30","Actor":"mrboersm","Number":"27345","RawContent":null,"Title":"XML ENTITY not working with references to external xml files in .NET 4.7.2","State":"open","Body":"I have constructed an application that reads XML content and in the XML content it uses ENTITY components (file references) to reference other XML files. This worked when we were building with .NET Framework 4.0, but it stopped working in 4.5 and is still not working in 4.7.2. This is a critical issue for releasing a product of ours. I have attached a sample App that demonstrates the problem. See the instructions.txt file included in the zip for workflows/information.\r\n[XMLEntityReference.zip](https://github.com/dotnet/coreclr/files/3752941/XMLEntityReference.zip)\r\n","Url":"https://github.com/dotnet/coreclr/issues/27345","RelatedDescription":"Open issue \"XML ENTITY not working with references to external xml files in .NET 4.7.2\" (#27345)"},{"Id":"510257416","IsPullRequest":true,"CreatedAt":"2019-10-21T20:08:58","Actor":"erozenfeld","Number":"27344","RawContent":null,"Title":"Disable STRESS_MIN_OPTS for ObjectStackAllocationTests.","State":"open","Body":"ObjectStackAllocationTests rely on the object stack allocation\r\noptimization to be running. STRESS_MIN_OPTS  prevents that.","Url":"https://github.com/dotnet/coreclr/pull/27344","RelatedDescription":"Open PR \"Disable STRESS_MIN_OPTS for ObjectStackAllocationTests.\" (#27344)"},{"Id":"510188984","IsPullRequest":true,"CreatedAt":"2019-10-21T18:30:04","Actor":"briansull","Number":"27342","RawContent":null,"Title":"Ensure that all of the calculations for PerfScore are done using doubles","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27342","RelatedDescription":"Open PR \"Ensure that all of the calculations for PerfScore are done using doubles\" (#27342)"},{"Id":"510142622","IsPullRequest":true,"CreatedAt":"2019-10-21T17:28:15","Actor":"mikedn","Number":"27338","RawContent":null,"Title":"Fix block store local address containment on ARM","State":"open","Body":"Extracted from #21711\r\n\r\nWhen the source/destination address was local, genCodeForCpBlkUnroll was folding the local offset into the address mode of the generated load/store instructions as if the local address was contained. But lowering didn't actually contain the address so useless ADD instructions were still being generated.","Url":"https://github.com/dotnet/coreclr/pull/27338","RelatedDescription":"Open PR \"Fix block store local address containment on ARM\" (#27338)"},{"Id":"509821800","IsPullRequest":false,"CreatedAt":"2019-10-21T17:21:43","Actor":"germrfy","Number":"27334","RawContent":null,"Title":"Error running dotnet core 3.0 docker image on Kubernetes","State":"closed","Body":"## Steps to reproduce the issue\r\n1. Create a webapi project template using the dotnet CLI (dotnet --version = 3.0.100)\r\n2. Build the dockerfile to create image (see dockerfile below)\r\n3. Run the docker image on local docker (works fine)\r\n4. Push this docker image to a docker registry\r\n5. Deploy this onto K8s (were using EKS on AWS)\r\n\r\n## Expected behavior\r\nPod starts up, and runs the webapi\r\n\r\n## Actual behavior\r\nPod fails to start up, with the following error in logs:\r\n```\r\nterminate called after throwing an instance of 'boost::wrapexcept<util::AprException>'\r\n  what():  BaseException: Could not find the requested symbol. at /opt/jenkins/oa-s173/cmake-64-d/agent/native/shared/libutil/src/main/cpp/util/AprException.h:54 at static void util::AprException::check(apr_status_t)\r\n  at liboneagentdotnet.so [0x90ec22]\r\n  at liboneagentdotnet.so [0x90ed1b]\r\n  at liboneagentdotnet.so [0x90ed7c]\r\n  at liboneagentdotnet.so [0x143d61]\r\n  at liboneagentdotnet.so [0x144adb]\r\n  at unknown [0x7f4a024acee2]\r\n  at unknown [0x7f4a024accef]\r\n  at unknown [0x7f4a024a4e48]\r\n  at unknown [0x7f4a024acb40]\r\n  at unknown [0x7f4a024aca6c]\r\n  at unknown [0x7f4a024ac77a]\r\n  at unknown [0x7f4a024a3299]\r\n  at unknown [0x7f4a024a2dd1]\r\n  at unknown [0x7f4a024a2d4e]\r\n  at unknown [0x7f4a024a2425]\r\n  at unknown [0x7f4a020ac426]\r\n  at unknown [0x7f4a020aca3d]\r\n  at libcoreclr.so(CallDescrWorkerInternal+0x7b) [0x24dcae]\r\n  at libcoreclr.so(CallDescrWorkerWithHandler(CallDescrData*, int)+0x74) [0x17dfc4]\r\n  at libcoreclr.so(DispatchCallDebuggerWrapper(CallDescrData*, ContextTransitionFrame*, int)+0x86) [0x17e0b6]\r\n  at libcoreclr.so(DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int)+0xb6) [0x17e236]\r\n  at libcoreclr.so(MethodTable::RunClassInitEx(Object**)+0x1a1) [0x115d61]\r\n  at libcoreclr.so(MethodTable::DoRunClassInitThrowing()+0x2f8) [0x1162e8]\r\n  at libcoreclr.so(JIT_GetSharedNonGCStaticBase_Helper+0xcf) [0x1b916f]\r\n  at unknown [0x7f4a020ac2ea]\r\n  at unknown [0x7f4a020ab4ec]\r\n  at unknown [0x7f4a020aadad]\r\n  at libcoreclr.so(CallDescrWorkerInternal+0x7b) [0x24dcae]\r\n  at libcoreclr.so(CallDescrWorkerWithHandler(CallDescrData*, int)+0x74) [0x17dfc4]\r\n  at libcoreclr.so(DispatchCallDebuggerWrapper(CallDescrData*, ContextTransitionFrame*, int)+0x86) [0x17e0b6]\r\n  at libcoreclr.so(DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int)+0xb6) [0x17e236]\r\n  at libcoreclr.so(MethodTable::RunClassInitEx(Object**)+0x1a1) [0x115d61]\r\n  at libcoreclr.so(MethodTable::DoRunClassInitThrowing()+0x2f8) [0x1162e8]\r\n  at libcoreclr.so [0x29c00b]\r\n  at libcoreclr.so [0x2551cc]\r\n  at libcoreclr.so [0x2548c4]\r\n  at libcoreclr.so [0x2546b3]\r\n  at libcoreclr.so [0x29ba01]\r\n  at libcoreclr.so(MethodTable::EnsureInstanceActive()+0x92) [0x115a92]\r\n  at libcoreclr.so(MethodDesc::EnsureActive()+0x22) [0x109ae2]\r\n  at libcoreclr.so [0x262507]\r\n  at libcoreclr.so [0x26291f]\r\n  at libcoreclr.so(CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*)+0x240) [0xcae90]\r\n  at libcoreclr.so(coreclr_execute_assembly+0xd3) [0xa3c63]\r\n  at libhostpolicy.so [0x161c2]\r\n  at libhostpolicy.so(corehost_main+0xcb) [0x16a1b]\r\n  at libhostfxr.so [0x2ab0f]\r\n  at libhostfxr.so [0x296a2]\r\n  at libhostfxr.so(hostfxr_main_startupinfo+0x92) [0x246f2]\r\n  at dotnet [0xc440]\r\n  at dotnet [0xc9fd]\r\n  at libc.so.6(__libc_start_main+0xea) [0x2409a]\r\n  at dotnet(_start+0x28) [0x2f3f]\r\n```\r\n\r\n## Additional information\r\ndockerfile is below:\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.0 AS build-env\r\nWORKDIR /build\r\n\r\nCOPY /src .\r\nRUN dotnet restore\r\nRUN dotnet build\r\nRUN dotnet publish -c Release -o ./out\r\n\r\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.0\r\nWORKDIR /app\r\nCOPY --from=build-env /build/out .\r\nENTRYPOINT [\"dotnet\", \"Weather.dll\"]\r\n```\r\n\r\nIt is unusual that this is happening only on K8s, were testing this as part of a migration to dotnetcore 3.0\r\n\r\nThis behavior does not change when specifying the `runtime` flag when executing `dotnet publish`.\r\n\r\n## Output of `docker version`\r\n\r\n```\r\nLocal docker for windows version: Docker version 19.03.2, build 6a30dfc\r\nContainer Runtime Version (on K8s):  docker://18.6.1\r\n```\r\n\r\n## General Comments\r\n\r\nApologies if this is not the correct place to post this, however my main issue is that I don't have an understanding of the error to aid my troubleshooting,","Url":"https://github.com/dotnet/coreclr/issues/27334","RelatedDescription":"Closed issue \"Error running dotnet core 3.0 docker image on Kubernetes\" (#27334)"},{"Id":"510023474","IsPullRequest":true,"CreatedAt":"2019-10-21T14:58:23","Actor":"AndyAyersMS","Number":"27337","RawContent":null,"Title":"JIT: fix assertion prop issues with subtypes","State":"open","Body":"* don't use late args to destructure helper call\r\n* create proper subtype constant kind when jitting","Url":"https://github.com/dotnet/coreclr/pull/27337","RelatedDescription":"Open PR \"JIT: fix assertion prop issues with subtypes\" (#27337)"},{"Id":"509715729","IsPullRequest":true,"CreatedAt":"2019-10-21T14:23:27","Actor":"danmosemsft","Number":"27333","RawContent":null,"Title":"Clarify inner exception and aggregate exception ToString()","State":"closed","Body":"Continuation of the part of https://github.com/dotnet/coreclr/pull/25045 that was deferred from 3.0.\r\n\r\nUsing this [test program](https://gist.github.com/danmosemsft/e2263748f12a4edf81ef297dbd200c16) - the SSL case is real, albeit the stacks are not --\r\n\r\n* [original output](https://gist.github.com/danmosemsft/421d37130f3a2ae36206fa1c8ca5b062)\r\n* [simple indent/arrows](https://gist.github.com/danmosemsft/ae41c57a564ad5bae7699c59c3874d5f)\r\n* [boxes](https://gist.github.com/danmosemsft/70281235ea0f07dce17245d1b3597a2f)\r\n* [compact boxes](https://gist.github.com/danmosemsft/2ffd883ec3d553427d2fc057be8efa16)  (this PR)\r\n\r\nIt's easiest to open in separate tabs and switch between. I think the boxes make it considerably easier to match up which exception goes with which stack, and which exception is nested inside which other exception. Thoughts? Other suggestions?\r\n\r\nNote that the non-aggregate non-nested exception case (top example) is not affected.\r\n\r\nBTW also made some minor fixes to pretty some exceptions I noticed as I was doing this\r\n* aae660d (one bad IL message was missing path)\r\n* 7b57069 (non absolute path message was missing path)\r\n* 54336a7 (2 blank lines caused by runtime passing empty string for fusion log: I assume fusion log is not relevant anymore)\r\n* Only append the file name if it's not already in the exception message. It looks like the runtime pretty much always puts it in the message if it's available, in which case text line `File name: 'c:\\some\\file'` is an unnecessary line.","Url":"https://github.com/dotnet/coreclr/pull/27333","RelatedDescription":"Closed or merged PR \"Clarify inner exception and aggregate exception ToString()\" (#27333)"},{"Id":"509920177","IsPullRequest":true,"CreatedAt":"2019-10-21T14:14:31","Actor":"dotnet-maestro[bot]","Number":"27336","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191020.7\r\n- **Date Produced**: 10/21/2019 6:09 AM\r\n- **Commit**: 03453d9aae8e5d18e571699c5d2229b1ab5f4b9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19520.7\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19520.7\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27336","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#27336)"},{"Id":"509888807","IsPullRequest":false,"CreatedAt":"2019-10-21T10:59:49","Actor":"4creators","Number":"27335","RawContent":null,"Title":"JIT Hardware Intrinsics low compiler throughput due to inefficient intrinsic identification algorithm during import phase","State":"open","Body":"During the design phase of JIT Hardware Intrinsics compiler bits one inefficient, temporary algorithm was allowed to be used for searching for intrinsics function names/ids. The naive search algorithm currently used works in O(n) time for each intrinsic imported, while it is possible to do this search in O(1) with very low constant overhead. Usually, this problem is hitting particularly hard in functions that use multiple intrinsics instructions since the search time is equal to `t = number_of_intrinsics_used * O(n)`. This is particularly exacerbated in applications that require fast startup time: cloud lambda functions, command-line tools i.e. PowerShell Core.\r\n\r\nThe function implementing an algorithm which slipped to the release is the following:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/6de88d4f5d291269f82e3dd1aa39cee026725dfe/src/jit/hwintrinsic.cpp#L186\r\n\r\nand the algorithm used:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/6de88d4f5d291269f82e3dd1aa39cee026725dfe/src/jit/hwintrinsic.cpp#L210\r\n\r\nPreviously discussed solutions included using a hashtable or/and creating fast binary preselection due to the fixed nature of search terms.\r\n\r\n@AndyAyersMS @CarolEidt @fiigii @tannergooding \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27335","RelatedDescription":"Open issue \"JIT Hardware Intrinsics low compiler throughput due to inefficient intrinsic identification algorithm during import phase\" (#27335)"},{"Id":"509699801","IsPullRequest":true,"CreatedAt":"2019-10-21T08:30:06","Actor":"franksinankaya","Number":"27330","RawContent":null,"Title":"Forgotten gtIntCon replacement for AsIntCon()->","State":"closed","Body":"@sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27330","RelatedDescription":"Closed or merged PR \"Forgotten gtIntCon replacement for AsIntCon()->\" (#27330)"},{"Id":"509699461","IsPullRequest":true,"CreatedAt":"2019-10-21T08:29:13","Actor":"franksinankaya","Number":"27329","RawContent":null,"Title":"Replace gtILOffset, with AsILOffset()->","State":"closed","Body":"@sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27329","RelatedDescription":"Closed or merged PR \"Replace gtILOffset, with AsILOffset()->\" (#27329)"},{"Id":"509704539","IsPullRequest":false,"CreatedAt":"2019-10-21T03:01:41","Actor":"AriNuer","Number":"27332","RawContent":null,"Title":"Test failure : System.Numerics.Tests.ComplexTests.Pow","State":"open","Body":"**Job:**\r\n[coreclr-corefx-jitstressregs:20191020.1](https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=394941)\r\n\r\n**Details:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/f0c1a15f-48eb-40e9-a2b1-a9a6077cda59/workitems/System.Runtime.Numerics.Tests/console\r\n\r\n**OS & Arch:**\r\nWindows x64\r\n\r\n**Note:**\r\n\r\n- There are no `MicrosoftPrivateCoreFxNETCoreAppVersion` in eng\\Versions.props in coreclr repo, but `MicrosoftPrivateCoreFxNETCoreAppPackageVersion`\r\n- This failure **doesn't repro** on our windows x64 machine with `MicrosoftPrivateCoreFxNETCoreAppPackageVersion`.\r\n\r\n**Log:**\r\n```\r\n===========================================================================================================\r\n\r\nC:\\dotnetbuild\\work\\f0c1a15f-48eb-40e9-a2b1-a9a6077cda59\\Work\\646a12f5-c82f-47bb-aee2-b5f8851693eb\\Exec>\"C:\\dotnetbuild\\work\\f0c1a15f-48eb-40e9-a2b1-a9a6077cda59\\Payload\\dotnet.exe\" exec --runtimeconfig System.Runtime.Numerics.Tests.runtimeconfig.json xunit.console.dll System.Runtime.Numerics.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\f0c1a15f-48eb-40e9-a2b1-a9a6077cda59\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Runtime.Numerics.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Numerics.Tests (found 219 of 225 test cases)\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 2)\r\n    System.Numerics.Tests.ComplexTests.Pow(real: 1.7976931348623157E+308, imaginary: 0) [FAIL]\r\n      Failure at line 1303. Expected real: 0. Actual real: 1.7976931348623157E+308\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1951,0): at System.Numerics.Tests.ComplexTests.VerifyRealImaginaryProperties(Complex complex, Double real, Double imaginary, Int32 lineNumber)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1304,0): at System.Numerics.Tests.ComplexTests.VerifyPow_Complex_Complex(Double realValue, Double imaginaryValue, Double realPower, Double imaginaryPower)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1275,0): at System.Numerics.Tests.ComplexTests.Pow_Complex_Complex(Double real, Double imaginary)\r\n    System.Numerics.Tests.ComplexTests.Pow(real: -1.7976931348623157E+308, imaginary: 0) [FAIL]\r\n      Failure at line 1303. Expected real: 0. Actual real: -1.7976931348623157E+308\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1951,0): at System.Numerics.Tests.ComplexTests.VerifyRealImaginaryProperties(Complex complex, Double real, Double imaginary, Int32 lineNumber)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1304,0): at System.Numerics.Tests.ComplexTests.VerifyPow_Complex_Complex(Double realValue, Double imaginaryValue, Double realPower, Double imaginaryPower)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1275,0): at System.Numerics.Tests.ComplexTests.Pow_Complex_Complex(Double real, Double imaginary)\r\n    System.Numerics.Tests.ComplexTests.Pow(real: 1, imaginary: 0) [FAIL]\r\n      Failure at line 1303. Expected real: 0. Actual real: 1\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1951,0): at System.Numerics.Tests.ComplexTests.VerifyRealImaginaryProperties(Complex complex, Double real, Double imaginary, Int32 lineNumber)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1304,0): at System.Numerics.Tests.ComplexTests.VerifyPow_Complex_Complex(Double realValue, Double imaginaryValue, Double realPower, Double imaginaryPower)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1275,0): at System.Numerics.Tests.ComplexTests.Pow_Complex_Complex(Double real, Double imaginary)\r\n    System.Numerics.Tests.ComplexTests.Pow(real: -1, imaginary: 0) [FAIL]\r\n      Failure at line 1303. Expected real: 0. Actual real: -1\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1951,0): at System.Numerics.Tests.ComplexTests.VerifyRealImaginaryProperties(Complex complex, Double real, Double imaginary, Int32 lineNumber)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1304,0): at System.Numerics.Tests.ComplexTests.VerifyPow_Complex_Complex(Double realValue, Double imaginaryValue, Double realPower, Double imaginaryPower)\r\n        /_/src/System.Runtime.Numerics/tests/ComplexTests.cs(1275,0): at System.Numerics.Tests.ComplexTests.Pow_Complex_Complex(Double real, Double imaginary)\r\n  Finished:    System.Runtime.Numerics.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Runtime.Numerics.Tests  Total: 2086, Errors: 0, Failed: 4, Skipped: 0, Time: 105.001s\r\n----- end Sun 10/20/2019 12:21:42.12 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/27332","RelatedDescription":"Open issue \"Test failure : System.Numerics.Tests.ComplexTests.Pow\" (#27332)"},{"Id":"509702615","IsPullRequest":false,"CreatedAt":"2019-10-21T02:52:46","Actor":"VincentBu","Number":"27331","RawContent":null,"Title":"Test failed: JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh","State":"open","Body":"**Job:**\r\n[coreclr-jitstress #20191019.1](https://dev.azure.com/dnceng/public/_build/results?buildId=394826)\r\n\r\n**Detail:**\r\nlinux x64:\r\nhttps://helix.dot.net/api/2019-06-17/jobs/bf1f0311-43d8-43c3-a6f9-51269ad69f80/workitems/JIT/console\r\nOSX x64:\r\nhttps://helix.dot.net/api/2019-06-17/jobs/8159f61d-9813-48f6-b447-f50cdd09a276/workitems/JIT/console\r\n\r\n**OS & Arch:**\r\nlinux x64\r\nosx x64\r\n\r\n**Mode:**\r\nlinux x64:\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_DbgEnableMiniDump=1\r\nCOMPlus_DbgMiniDumpName=$HELIX_DUMP_FOLDER/coredump.%d.dmp\r\nCOMPlus_JitStress=2\r\n\r\nosx x64:\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_DbgEnableMiniDump=1\r\nCOMPlus_DbgMiniDumpName=$HELIX_DUMP_FOLDER/coredump.%d.dmp\r\nCOMPlus_JitStress=1\r\n\r\n**Note:**\r\nThis failure **repros** on our osx x64 machine.\r\nThere is no 'Tests_Linux_x64_checked_jitstress' in artfacts.\r\n\r\n**Log:**\r\n```\r\nJIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/bf1f0311-43d8-43c3-a6f9-51269ad69f80/Work/7509fbd3-e1bb-4605-8f58-fc3ab6c77874/Exec/JIT/opt/Reports/JIT.opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/bf1f0311-43d8-43c3-a6f9-51269ad69f80/Payload/corerun ObjectStackAllocationTests.dll ''\r\n      SUCCESS (AllocateSimpleClassAndAddFields)\r\n      FAILURE (AllocateSimpleClassesAndEQCompareThem): unexpected allocation of 48 bytes\r\n      SUCCESS (AllocateSimpleClassesAndNECompareThem)\r\n      SUCCESS (AllocateSimpleClassAndGetField)\r\n      SUCCESS (AllocateClassWithNestedStructAndGetField)\r\n      SUCCESS (AllocateClassWithNestedStructAndAddFields)\r\n      SUCCESS (AllocateSimpleClassWithGCFieldAndAddFields)\r\n      SUCCESS (AllocateSimpleClassAndAssignRefToAField)\r\n      SUCCESS (TestMixOfReportingAndWriteBarriers)\r\n      SUCCESS (AllocateSimpleClassAndCheckTypeNoHelper)\r\n      SUCCESS (AllocateSimpleClassAndCheckTypeHelper)\r\n      SUCCESS (AllocateSimpleClassAndCast)\r\n      SUCCESS (BoxSimpleStructAndAddFields)\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27331","RelatedDescription":"Open issue \"Test failed: JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh\" (#27331)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"510353136","IsPullRequest":true,"CreatedAt":"2019-10-22T04:27:30","Actor":"dotnet-maestro[bot]","Number":"12954","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.13\r\n- **Date Produced**: 10/22/2019 2:35 AM\r\n- **Commit**: 93b469074cd73445634feeb0032f7fcb75ef4bfb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.13\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.13\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19521.5 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12954","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12954)"},{"Id":"510258245","IsPullRequest":true,"CreatedAt":"2019-10-22T01:57:45","Actor":"dotnet-maestro[bot]","Number":"12952","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191021.6\r\n- **Date Produced**: 10/22/2019 12:34 AM\r\n- **Commit**: c1389d79af44fa1f05d9ef8345173db93b821fdb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19521.6\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12952","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12952)"},{"Id":"510378149","IsPullRequest":true,"CreatedAt":"2019-10-22T01:13:32","Actor":"wli3","Number":"12955","RawContent":null,"Title":"Fix mark of the web","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/12955","RelatedDescription":"Open PR \"Fix mark of the web\" (#12955)"},{"Id":"510295442","IsPullRequest":true,"CreatedAt":"2019-10-21T21:40:28","Actor":"dotnet-maestro[bot]","Number":"12953","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.7\r\n- **Date Produced**: 10/21/2019 7:58 PM\r\n- **Commit**: 763532fc5b6003b7aedc2d9b587411a6826e30e1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19521.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12953","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12953)"},{"Id":"509843995","IsPullRequest":false,"CreatedAt":"2019-10-21T09:31:31","Actor":"ww898","Number":"12951","RawContent":null,"Title":"dotnet publush for .NET Core 3.x doesn't set execute flags for executables","State":"open","Body":"## Steps to reproduce\r\n`dotnet publish --self-contained true -f netcoreapp3.0 -r linux-x64`\r\n`dotnet publish --self-contained true -f netcoreapp3.0 -r osx-x64`\r\n\r\n## Expected  behavior\r\nThe compiled executable should be ready to be executed after publishing.\r\n\r\n## Actual behavior\r\n.NET Core 3.0/3.1 doesn't set execute flags for executables during publishing. Previous version of .NET Core do it.\r\n\r\n## Environment data\r\n- Linux qqq 4.15.0-65-generic #74~16.04.1-Ubuntu SMP Wed Sep 18 09:51:44 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n- macOS Mojave version 10.14\r\n- macOS Catalina version 10.15\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12951","RelatedDescription":"Open issue \"dotnet publush for .NET Core 3.x doesn't set execute flags for executables\" (#12951)"},{"Id":"509816461","IsPullRequest":true,"CreatedAt":"2019-10-21T08:40:12","Actor":"dotnet-maestro[bot]","Number":"12950","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.3\r\n- **Date Produced**: 10/21/2019 3:12 PM\r\n- **Commit**: b6e04f97df5f62282cc7738a31ae697da43ab977\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19521.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19521.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19521.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19521.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19521.3\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19521.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12950","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12950)"},{"Id":"509669957","IsPullRequest":true,"CreatedAt":"2019-10-21T00:10:23","Actor":"dotnet-maestro[bot]","Number":"12949","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191020.3\r\n- **Date Produced**: 10/20/2019 10:30 PM\r\n- **Commit**: 32228f2ae5e68394197859608c8c6afb94276481\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19520.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19520.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19520.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19520.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19520.3\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19520.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12949","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12949)"},{"Id":"509628488","IsPullRequest":true,"CreatedAt":"2019-10-20T17:58:34","Actor":"dsplaisted","Number":"12948","RawContent":null,"Title":"Delete code and update readme for repo merge","State":"open","Body":"The CLI repo [has been merged](https://github.com/dotnet/toolset/pull/2940) into the toolset repo.  So this PR removes the code from the master branch of the CLI repo, and updates the README and issue template to point to the dotnet/sdk repo.","Url":"https://github.com/dotnet/cli/pull/12948","RelatedDescription":"Open PR \"Delete code and update readme for repo merge\" (#12948)"},{"Id":"509498603","IsPullRequest":false,"CreatedAt":"2019-10-20T16:56:42","Actor":"devel0","Number":"12943","RawContent":null,"Title":"dotnet restore parallel adaptive","State":"closed","Body":"## Description\r\n\r\nrestoring in tethering mode using phone line may cause failure due to timeout issue; a workaround is to use `--disable-parallel` but I think that a better approach should to use a sort of *adaptive parallel mode* so that restore will start in parallel and auto disable until all packages in queue where timeout occurred downloaded then switch back in parallel mode.\r\n\r\n## Steps to reproduce\r\n\r\n```sh\r\ngit clone https://github.com/devel0/repros.git\r\ngit checkout 9a5a81d0fe20d5e68cf0161ac9c64e93eae8e81a\r\ncd repros/netcore/dotnet-restore-01\r\ndocker build .\r\n```\r\n\r\nresults can be viewed with follow\r\n\r\n```sh\r\nless results.log.gz\r\n```\r\n\r\nnote: may need to set a bandwidth limiter to your network\r\n\r\n## Expected  behavior\r\n\r\nrestore without error\r\n\r\n## Actual behavior\r\n\r\nrestore fails due timeout in docker\r\n\r\n```\r\n         Failed to download package 'System.Text.Encodings.Web.4.4.0' from 'https://api.nuget.org/v3-flatcontainer/system.text.encodings.web/4.4.0/system.text.encodings.web.4.4.0.nupkg'.\r\n         The download of 'https://api.nuget.org/v3-flatcontainer/system.text.encodings.web/4.4.0/system.text.encodings.web.4.4.0.nupkg' timed out because no data was received for 60000ms.\r\n           Exception of type 'System.TimeoutException' was thrown.\r\n```\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  10\r\n OS Platform: Linux\r\n RID:         debian.10-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12943","RelatedDescription":"Closed issue \"dotnet restore parallel adaptive\" (#12943)"},{"Id":"509561137","IsPullRequest":true,"CreatedAt":"2019-10-20T16:43:28","Actor":"dotnet-maestro[bot]","Number":"12947","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191020.1\r\n- **Date Produced**: 10/20/2019 3:01 PM\r\n- **Commit**: 07c1aa65a954ed0bb7a3804485422c577eac7167\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19520.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19520.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19520.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19520.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19520.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19520.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12947","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12947)"},{"Id":"509543324","IsPullRequest":true,"CreatedAt":"2019-10-20T04:45:24","Actor":"dotnet-maestro[bot]","Number":"12946","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191019.2\r\n- **Date Produced**: 10/20/2019 3:24 AM\r\n- **Commit**: 0de57914279da79eb7166588f67609c851e46179\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19519.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12946","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12946)"},{"Id":"509541311","IsPullRequest":true,"CreatedAt":"2019-10-20T04:20:23","Actor":"dotnet-maestro[bot]","Number":"12945","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191019.7\r\n- **Date Produced**: 10/20/2019 2:40 AM\r\n- **Commit**: 821e656fa75e04a2161c828446321f4a1ea99be7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19519.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19519.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19519.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19519.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19519.7\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19519.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12945","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12945)"},{"Id":"509519893","IsPullRequest":true,"CreatedAt":"2019-10-19T23:40:27","Actor":"dotnet-maestro[bot]","Number":"12944","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191019.5\r\n- **Date Produced**: 10/19/2019 9:52 PM\r\n- **Commit**: 2b26a74b8fc8025f3b4a372483cb7d4477de0de2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19519.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19519.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19519.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19519.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19519.5\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19519.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12944","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12944)"},{"Id":"509495967","IsPullRequest":true,"CreatedAt":"2019-10-19T22:55:50","Actor":"cinta631","Number":"12942","RawContent":null,"Title":"Update dependencies from https://github.com/aspnet/AspNetCore build 2…","State":"closed","Body":"…0191019.1\r\n\r\n- Microsoft.AspNetCore.DeveloperCertificates.XPlat - 5.0.0-alpha1.19519.1\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12942","RelatedDescription":"Closed or merged PR \"Update dependencies from https://github.com/aspnet/AspNetCore build 2…\" (#12942)"},{"Id":"509480865","IsPullRequest":true,"CreatedAt":"2019-10-19T21:11:49","Actor":"dotnet-maestro[bot]","Number":"12940","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191019.4\r\n- **Date Produced**: 10/19/2019 7:35 PM\r\n- **Commit**: d51ccfc121e31cc9bbf0c3ef538915a75b25458a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19519.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19519.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19519.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19519.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19519.4\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19519.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12940","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12940)"},{"Id":"509486689","IsPullRequest":false,"CreatedAt":"2019-10-19T17:51:05","Actor":"leo-labs","Number":"12941","RawContent":null,"Title":"dotnet sln remove has exit code 0 despite project not found","State":"open","Body":"## Steps to reproduce\r\n\r\nRemove a non existent project from a solution, e.g. `dotnet sln <SLN_FILE> remove foo`\r\n\r\n## Expected  behavior\r\n\r\nreturn a nonzero exit code, similar as `dotnet sln <SLN_FILE> add foo`\r\n\r\n## Actual behavior\r\n\r\nthe command returns an exit code of `0`\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.2.105 [/usr/local/share/dotnet/sdk]\r\n  2.2.402 [/usr/local/share/dotnet/sdk]\r\n  3.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12941","RelatedDescription":"Open issue \"dotnet sln remove has exit code 0 despite project not found\" (#12941)"},{"Id":"509478914","IsPullRequest":true,"CreatedAt":"2019-10-19T16:50:10","Actor":"dotnet-maestro[bot]","Number":"12939","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191019.1\r\n- **Date Produced**: 10/19/2019 4:04 PM\r\n- **Commit**: 0c5e370b7c2352bed7ac862b1ef5c6186362a512\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19519.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12939","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12939)"},{"Id":"509465322","IsPullRequest":true,"CreatedAt":"2019-10-19T15:35:24","Actor":"dotnet-maestro[bot]","Number":"12938","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191019.2\r\n- **Date Produced**: 10/19/2019 1:59 PM\r\n- **Commit**: 9269887c1b11fd472ef769ca29f59a17569846c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19519.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19519.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19519.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19519.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19519.2\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19519.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12938","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12938)"},{"Id":"509443921","IsPullRequest":true,"CreatedAt":"2019-10-19T13:05:27","Actor":"dotnet-maestro[bot]","Number":"12937","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191019.1\r\n- **Date Produced**: 10/19/2019 11:21 AM\r\n- **Commit**: 51f6dbc700810bfd769758c4d196a337465d79a6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19519.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19519.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19519.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19519.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19519.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19519.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12937","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12937)"},{"Id":"509440746","IsPullRequest":true,"CreatedAt":"2019-10-19T12:33:11","Actor":"dotnet-maestro[bot]","Number":"12935","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/1/2019 1:57 PM\r\n- **Commit**: 419501cb5731805c7e49bae276a2938e7c1844de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19501.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12935","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12935)"},{"Id":"509440728","IsPullRequest":true,"CreatedAt":"2019-10-19T12:33:01","Actor":"dotnet-maestro[bot]","Number":"12934","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191018.2\r\n- **Date Produced**: 10/18/2019 9:12 PM\r\n- **Commit**: f59f1ebe9b293ad523d3bfa4e5cffc663708ef11\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19518.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12934","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12934)"},{"Id":"509441352","IsPullRequest":true,"CreatedAt":"2019-10-19T12:08:03","Actor":"dotnet-maestro[bot]","Number":"12936","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191016.1\r\n- **Date Produced**: 10/16/2019 12:56 PM\r\n- **Commit**: 6f180514b4aefc006d50c07c947da61e0ac2ed4c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19516.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12936","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12936)"},{"Id":"509414716","IsPullRequest":true,"CreatedAt":"2019-10-19T08:45:24","Actor":"dotnet-maestro[bot]","Number":"12932","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191018.8\r\n- **Date Produced**: 10/19/2019 7:28 AM\r\n- **Commit**: a1fea2015777954c282a226339824874fe42c569\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19518.8\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12932","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12932)"},{"Id":"509417292","IsPullRequest":false,"CreatedAt":"2019-10-19T08:35:31","Actor":"thomaslevesque","Number":"12933","RawContent":null,"Title":"How to make a package with an empty TFM with dotnet pack?","State":"open","Body":"I'm trying to build a package with multiple target frameworks, with has an empty TFM folder for netstandard2.1 (because the functionality provided by the package is not necessary in netstandard2.1, so I don't want restore to pick netstandard2.0).\r\n\r\nI know I could do it easily with a nuspec file, but I'd really prefer to be able to use just a csproj and dotnet pack.\r\n\r\nMy first attempt was to set `IncludeBuildOutput` to false when `TargetFramework` is netstandard2.1, but apparently that property is evaluated globally, rather than per-TFM.\r\n\r\nIn the end, the only way I found to make it work is this, which is a bit ugly:\r\n\r\n```xml\r\n  <Target Name=\"RemoveNetStd21Files\" AfterTargets=\"_WalkEachTargetPerFramework\">\r\n    <ItemGroup>\r\n      <_BuildOutputInPackage Remove=\"$(MSBuildThisFileDirectory)$(IntermediateOutputPath)netstandard2.1/$(AssemblyName).*\" Pack=\"false\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\nIt's ugly because it's verbose, and more importantly, it depends on \"private\" MSBuild targets and properties, which could change anytime.\r\n\r\nIs there a clean way to exclude the output of a given TFM in the output package?\r\n","Url":"https://github.com/dotnet/cli/issues/12933","RelatedDescription":"Open issue \"How to make a package with an empty TFM with dotnet pack?\" (#12933)"},{"Id":"509403494","IsPullRequest":true,"CreatedAt":"2019-10-19T07:00:26","Actor":"dotnet-maestro[bot]","Number":"12931","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191018.11\r\n- **Date Produced**: 10/19/2019 5:16 AM\r\n- **Commit**: 4de60f765b2d98b67f59390f40d7ee4c72a2daca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19518.11\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19518.11\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19518.11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19518.11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19518.11\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19518.11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12931","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12931)"},{"Id":"509399848","IsPullRequest":true,"CreatedAt":"2019-10-19T06:20:27","Actor":"dotnet-maestro[bot]","Number":"12930","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191018.6\r\n- **Date Produced**: 10/19/2019 4:56 AM\r\n- **Commit**: 3d3d5f699e0b7efb59b7133bde92eac1f1799318\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19518.6\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12930","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12930)"},{"Id":"509389014","IsPullRequest":true,"CreatedAt":"2019-10-19T04:30:26","Actor":"dotnet-maestro[bot]","Number":"12929","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191018.10\r\n- **Date Produced**: 10/19/2019 2:50 AM\r\n- **Commit**: 63a98493a9ea4bae1b31ac673fb900f7cdb2dffb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19518.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19518.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19518.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19518.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19518.10\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19518.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12929","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12929)"},{"Id":"509379701","IsPullRequest":true,"CreatedAt":"2019-10-19T03:00:24","Actor":"dotnet-maestro[bot]","Number":"12928","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191018.4\r\n- **Date Produced**: 10/19/2019 1:41 AM\r\n- **Commit**: 65585c13f17de7222763a0b6282b4e83c15eb188\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview2.19518.4\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12928","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12928)"},{"Id":"509376478","IsPullRequest":true,"CreatedAt":"2019-10-19T02:50:29","Actor":"dotnet-maestro[bot]","Number":"12927","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191018.9\r\n- **Date Produced**: 10/19/2019 12:55 AM\r\n- **Commit**: d08c057d0651ffedf663fe0687d6d0c5ca103861\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 5.0.0-alpha1.19518.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19518.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19518.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19518.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19518.9\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 5.0.0-alpha1.19518.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12927","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12927)"},{"Id":"509366646","IsPullRequest":true,"CreatedAt":"2019-10-19T01:20:25","Actor":"dotnet-maestro[bot]","Number":"12926","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191018.8\r\n- **Date Produced**: 10/18/2019 11:38 PM\r\n- **Commit**: 3a78795f4d10a6a23af378116cabf429efefea88\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview2.19518.8\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19518.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19518.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19518.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19518.8\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19518.8\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19518.6 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12926","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12926)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"509922429","IsPullRequest":true,"CreatedAt":"2019-10-21T12:23:01","Actor":"dotnet-maestro[bot]","Number":"1620","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191020.7\r\n- **Date Produced**: 10/21/2019 6:09 AM\r\n- **Commit**: 03453d9aae8e5d18e571699c5d2229b1ab5f4b9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19520.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19520.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1620","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1620)"},{"Id":"509586833","IsPullRequest":true,"CreatedAt":"2019-10-20T12:22:06","Actor":"dotnet-maestro[bot]","Number":"1619","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191019.7\r\n- **Date Produced**: 10/20/2019 2:47 AM\r\n- **Commit**: 03dd803990dfb8f05db8d0ec1bc34268386c1d5b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19519.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19519.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1619","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1619)"},{"Id":"509442622","IsPullRequest":true,"CreatedAt":"2019-10-19T12:29:32","Actor":"dotnet-maestro[bot]","Number":"1618","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191018.10\r\n- **Date Produced**: 10/19/2019 7:13 AM\r\n- **Commit**: 5590d3896f012c1c9b7774774456331a36ba1d57\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19518.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19518.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1618","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1618)"},{"Id":"509155885","IsPullRequest":false,"CreatedAt":"2019-10-18T15:46:13","Actor":"0blu","Number":"1617","RawContent":null,"Title":"Why do I need special permission when using HttpListener?","State":"closed","Body":"Hey,\r\n\r\nthis issue is a little bit dot net bashing because some interfaces are design with assumptions that are too specific for most users, HttpListener is one of them.\r\n\r\nFirst of all, I already read about the [HTTP namespace system](https://docs.microsoft.com/en-us/windows/win32/http/routing-incoming-requests).\r\n\r\n`HttpListener` allows simple and high level creation of HTTP servers, but what if I want to create a HTTP server that can listen on all hosts, without requiring admin permissions or running arbitrary `netsh` commands?\r\n\r\nIf I would run this code as an unprivileged user the result would be an access exception.\r\n``` c#\r\nHttpListener listener = new HttpListener();\r\nlistener.Prefixes.Add(\"http://*:1234/\");\r\nlistener.Start();\r\n```\r\n\r\nHowever running the following code proves that an unprivileged user could potentially write his own HTTP server, that allows access from all interfaces.\r\n``` c#\r\nTcpListener server = new TcpListener(IPAddress.Any, 1234);\r\nserver.Start();\r\n```\r\n\r\nI wonder why there is no way to take all the benefits of the `HttpListener` and skipping the namespacing system. Other languages have such features.\r\n\r\nIs there any chance to request an API addition that allows such things?\r\nFor example allowing the constructor of `HttpListener` to take an `TcpListener`-Instance.\r\n","Url":"https://github.com/dotnet/standard/issues/1617","RelatedDescription":"Closed issue \"Why do I need special permission when using HttpListener?\" (#1617)"},{"Id":"509045354","IsPullRequest":true,"CreatedAt":"2019-10-18T12:30:25","Actor":"dotnet-maestro[bot]","Number":"1616","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191018.1\r\n- **Date Produced**: 10/18/2019 8:58 AM\r\n- **Commit**: 2b92fc0930b941cd0d9146971745cd717689434c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19518.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19518.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19518.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1616","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1616)"},{"Id":"508423360","IsPullRequest":true,"CreatedAt":"2019-10-17T23:53:53","Actor":"akoeplinger","Number":"1614","RawContent":null,"Title":"Update Xamarin APIs to latest Dev16.4 builds","State":"closed","Body":"- Xamarin.Android 10.1.0.1\r\n- Xamarin.iOS 13.8.1.1\r\n- Xamarin.Mac 6.8.1.1\r\n\r\nThis also uses a new GenAPI version so the diff is a little messy because of the enum value to name changes in attributes.\r\n\r\nI also had to introduce a System.Core.stubs.csproj to break a build cycle because System.dll references System.Security.Cryptography.ECDsa from System.Core.dll now.","Url":"https://github.com/dotnet/standard/pull/1614","RelatedDescription":"Closed or merged PR \"Update Xamarin APIs to latest Dev16.4 builds\" (#1614)"},{"Id":"508433927","IsPullRequest":true,"CreatedAt":"2019-10-17T12:24:28","Actor":"dotnet-maestro[bot]","Number":"1615","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191016.16\r\n- **Date Produced**: 10/17/2019 4:25 AM\r\n- **Commit**: b9186cfa3566ee24e5f16e45c542a3078e128dc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19516.16\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19516.16\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19516.16\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1615","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1615)"},{"Id":"507816713","IsPullRequest":true,"CreatedAt":"2019-10-16T12:33:03","Actor":"dotnet-maestro[bot]","Number":"1613","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191015.14\r\n- **Date Produced**: 10/16/2019 5:58 AM\r\n- **Commit**: b50bd0a1d3f0326fc717706cb5c5950ab41cf437\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19515.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19515.14\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19515.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1613","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1613)"},{"Id":"507439996","IsPullRequest":true,"CreatedAt":"2019-10-15T19:33:30","Actor":"crummel","Number":"1612","RawContent":null,"Title":"Source-build improvements.","State":"open","Body":"- Always restore, even in source-build.  This is required so we get NETStandard.Library netstandard2.0 reference bits for inclusion in the NETStandard.Library we are building.\r\n  - Also make this error out in source-build if it fails like it does in the standalone build.\r\n- Sourcelink is now supported in source-build.\r\n\r\nI'm still testing this out in source-build but does it look like what you were thinking of @ericstj?","Url":"https://github.com/dotnet/standard/pull/1612","RelatedDescription":"Open PR \"Source-build improvements.\" (#1612)"},{"Id":"507207673","IsPullRequest":true,"CreatedAt":"2019-10-15T12:30:27","Actor":"dotnet-maestro[bot]","Number":"1611","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191014.7\r\n- **Date Produced**: 10/15/2019 8:46 AM\r\n- **Commit**: 3d16a2bd46d452ceb341887dc9c9dde26545110b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19514.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19514.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19514.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1611","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1611)"},{"Id":"507198335","IsPullRequest":true,"CreatedAt":"2019-10-15T12:01:34","Actor":"dotnet-maestro[bot]","Number":"1610","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191018.2\r\n- **Date Produced**: 10/18/2019 9:12 PM\r\n- **Commit**: f59f1ebe9b293ad523d3bfa4e5cffc663708ef11\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19518.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19518.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19518.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19518.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19518.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19518.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1610","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1610)"},{"Id":"506615487","IsPullRequest":true,"CreatedAt":"2019-10-14T12:25:04","Actor":"dotnet-maestro[bot]","Number":"1609","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191013.1\r\n- **Date Produced**: 10/13/2019 1:26 PM\r\n- **Commit**: 437d9bc76489ff18bd9ce04f287e07591f6bc38c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19513.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1609","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1609)"},{"Id":"506317458","IsPullRequest":true,"CreatedAt":"2019-10-13T12:25:39","Actor":"dotnet-maestro[bot]","Number":"1608","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191012.1\r\n- **Date Produced**: 10/12/2019 1:32 PM\r\n- **Commit**: 8d21b79b924d29088dbde46d42737a657d466b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19512.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1608","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1608)"},{"Id":"506180021","IsPullRequest":true,"CreatedAt":"2019-10-12T12:30:20","Actor":"dotnet-maestro[bot]","Number":"1607","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/12/2019 12:05 AM\r\n- **Commit**: 57ae5430e0e6cbf16b5c7b7def4fc95015b2b722\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19511.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1607","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1607)"},{"Id":"506178147","IsPullRequest":true,"CreatedAt":"2019-10-12T12:16:34","Actor":"dotnet-maestro[bot]","Number":"1606","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191011.1\r\n- **Date Produced**: 10/11/2019 12:51 PM\r\n- **Commit**: 64a027b8d8b3a8e8e214bb00da02148335e3bd92\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19511.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1606","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1606)"},{"Id":"505819610","IsPullRequest":true,"CreatedAt":"2019-10-11T12:31:35","Actor":"dotnet-maestro[bot]","Number":"1605","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191010.15\r\n- **Date Produced**: 10/11/2019 6:45 AM\r\n- **Commit**: 901c370c2379ad0885bcc5a1921c4164104586aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19510.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19510.15\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19510.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1605","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1605)"},{"Id":"505811013","IsPullRequest":true,"CreatedAt":"2019-10-11T12:11:39","Actor":"dotnet-maestro[bot]","Number":"1604","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191010.4\r\n- **Date Produced**: 10/10/2019 5:59 PM\r\n- **Commit**: 8cd48078f550fbcbd4f684b897b14db207397b52\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19510.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1604","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1604)"},{"Id":"505304835","IsPullRequest":false,"CreatedAt":"2019-10-10T14:21:00","Actor":"Sumeetkumawat","Number":"1603","RawContent":null,"Title":"Issue while Referencing iOS native library to .net standard library","State":"open","Body":"I have three projects in my solution. I have added .net standard library say 'A'. I have some code there. Then i added ios library 'B' and added project reference of 'A' here.\r\nNow I have another .net standard library 'C' and here I would like to add reference of 'A' & 'B' projects not dll's. Reference of 'A' is added successfully but while adding reference of 'B', I \r\nsee 'Incompatible Target Framework' message.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1603","RelatedDescription":"Open issue \"Issue while Referencing iOS native library to .net standard library\" (#1603)"},{"Id":"505235113","IsPullRequest":true,"CreatedAt":"2019-10-10T12:33:39","Actor":"dotnet-maestro[bot]","Number":"1602","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1602)"},{"Id":"505224197","IsPullRequest":true,"CreatedAt":"2019-10-10T12:11:42","Actor":"dotnet-maestro[bot]","Number":"1601","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1601","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1601)"},{"Id":"505206761","IsPullRequest":false,"CreatedAt":"2019-10-10T11:24:37","Actor":"manijak","Number":"1600","RawContent":null,"Title":"The state of X509Certificate management with netstandard, xamarin, win & macOS","State":"open","Body":"First, my apologies if this is the wrong channel to post this. I've been digging and trying to understand for weeks where the issue/limitation is to our problem, figured this would be the most suitable place to ask. We are not sure if this is a limitation with the frameworks, or the platform, or due to our limited knowledge, or a combination of all. But things are very confusing right now, and we just need proper guidance on what direction to take.\r\n\r\nEDIT: Would appreciate if @bartonjs or @filipnavara could pitch in 👍 \r\n\r\n### **Background** 💡 \r\nWe are creating a small, cross-platform (win & macos), desktop application that will act as a websocket server running only on localhost (https). This application is a bridge between our web applications and the local machine hardware (e.g. printers). In order to provide a secure connection, `SslStream` requires a `X509Certificate2` class with a `PrivateKey`.\r\n\r\nThe idea is to let the app itself generate a self-signed certificate with private key and use that to start the secure websocket service. After the certificate has been generated for the first time, we store it in the local certificate store and reuse it when the app restarts. \r\n\r\n### **Project structure & frameworks** 📦 \r\nThis is how our solution is defined. `SharedProject` is a shared lib referenced by both `AppWin` & `AppMac`. The Win & Mac projects are startup-projects for their respective platform. \r\n```\r\nOurApp.sln\r\n  |---- SharedProject (netstandard2.1)\r\n        Creates & runs the websocket service, generates certificate (win), communicates with local hardware, ect\r\n\r\n  |---- AppWin (netcore3.0)\r\n        Startup project for Windows platform. Contains platform-specific code, if any.\r\n\r\n  |---- AppMac (Xamarin.Mac)\r\n        Startup project for macOS platform. Contains platform-specific code (generates certificate).\r\n```\r\n\r\n### **How it runs** 🏃 \r\nIn our `SharedProject` we have a class taking care of certificate generation and storing. The idea was that both the Win & Mac platforms could use this to manage the certificates. It uses the `X509Certificate2` & `CertificateRequest` provided by the framework. Plus the `X509Store` to save and retrieve the certificate.\r\n\r\n**Windows** ✔️ \r\nOn Windows there are no issues. With minimum amount of code we are able to generate a self-signed certificate with private-key, store it, and run the service with it. Also re-using the certificate when the app restarts by retrieving the certificate works very well. The `X509Store` returns the certificate with the _private key_, and we can easily use it with our `SslStream`. \r\n\r\n**macOS** ❌ \r\nThings are not so clear here... We could not use the above mentioned shared class to manage certificates (that works just fine on Windows):\r\n* First issue was that we got a `PlatformNotSupportedException` when the application was trying to use the `CertificateRequest`. \r\n* Second \"issue\" was that the `X509Store` did not store or retrieve certificates from the macOS keychain, but instead it uses some local mono certificate-store that the browsers do not see (at least in our tests). And it only stored the certificate (.cer) not the private-key that was included in the `X509Certificate2` object. Plus it seemed difficult to \"Trust\" the stored certificate.\r\n\r\nSo we created a separate class to take care of certificate management for macOS inside the `AppMac (Xamarin.Mac)` project. By using `BouncyCastle` we generated an identical self-signed certificate with private-key and used that to run our secure websocket service:\r\n\r\n* When launching our Secure Websocket service on macOS, the certificate used here is automatically added to the local macOS login keychain. For us this is great, since we could not use `X509Store` to add it there in the first place.\r\n* The only way we could retrieve the certificate from the keychain was to use the `SecKeyChain` class and query for it. Thankfully the `SecCertificate` object has a `ToX509Certificate2()` function. But that still left us without the `PrivateKey` that is needed by `SslStream`. \r\n* We also tried using `SecKeyChain.FindIdentity` to retrieve both, but even tho it is easy to convert `SecCertificate` to `X509Certificate2`, there seems to be no way to convert a `SecKey` to something useful like `RSA` or `RSACryptoServiceProvider` or something that can be embedded to the `X509Certificate2`\r\n\r\n### What to do? 😭 \r\nWe are pretty much stuck when it comes to the macOS platform. There seems to be no way for us to retrieve our own X509Certificate2 with the private-key embedded. Not sure if this is because we are using Xamarin.Mac & netstandard2.1, perhaps things are easier on netcore3? But still, Xamarin & mono have been around for a long time, there should be a way for us to do this today. Must be something we are missing here and would appreciate if someone could guide us. ","Url":"https://github.com/dotnet/standard/issues/1600","RelatedDescription":"Open issue \"The state of X509Certificate management with netstandard, xamarin, win & macOS\" (#1600)"},{"Id":"504399207","IsPullRequest":false,"CreatedAt":"2019-10-09T12:43:05","Actor":"2300070","Number":"1598","RawContent":null,"Title":"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.","State":"closed","Body":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n","Url":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Closed issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598)"},{"Id":"504610278","IsPullRequest":true,"CreatedAt":"2019-10-09T12:21:49","Actor":"dotnet-maestro[bot]","Number":"1599","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 9:11 AM\r\n- **Commit**: a7ee8cdccce7d2607d58f9b93ce319209a238f7a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1599","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1599)"},{"Id":"504006427","IsPullRequest":true,"CreatedAt":"2019-10-08T12:28:23","Actor":"dotnet-maestro[bot]","Number":"1597","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1597)"},{"Id":"503415647","IsPullRequest":true,"CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Number":"1596","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1596)"},{"Id":"503407217","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1595)"},{"Id":"503093090","IsPullRequest":true,"CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Number":"1594","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1594)"},{"Id":"503091277","IsPullRequest":true,"CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1593","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1593)"},{"Id":"502956371","IsPullRequest":true,"CreatedAt":"2019-10-05T12:29:24","Actor":"dotnet-maestro[bot]","Number":"1592","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 3:05 AM\r\n- **Commit**: 99ea2b5aebf7361a5baa638c978cb6214fca5217\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19504.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1592)"},{"Id":"502954708","IsPullRequest":true,"CreatedAt":"2019-10-05T12:06:58","Actor":"dotnet-maestro[bot]","Number":"1591","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:24 AM\r\n- **Commit**: 380eaaf663b425943754a15b29e814df0bb1b078\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19504.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1591","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1591)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"510423799","IsPullRequest":true,"CreatedAt":"2019-10-22T04:35:24","Actor":"dotnet-maestro[bot]","Number":"41980","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.7\r\n- **Date Produced**: 10/22/2019 1:46 AM\r\n- **Commit**: 7a8e08cac71924a301d96dbac6dcb283677e93b1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41980","RelatedDescription":"Open PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41980)"},{"Id":"510386215","IsPullRequest":true,"CreatedAt":"2019-10-22T03:41:28","Actor":"dotnet-maestro[bot]","Number":"41976","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191021.5\r\n- **Date Produced**: 10/21/2019 10:27 PM\r\n- **Commit**: a43e0c2108d27cc88a22a9881ce5aaaa690a1d65\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19521.5\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19521.5\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41976","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41976)"},{"Id":"510395794","IsPullRequest":false,"CreatedAt":"2019-10-22T02:31:08","Actor":"liu10725","Number":"41979","RawContent":null,"Title":"NetCore（2.1） System.Drawing.Common（4.6.0） Bitmap SetResolution invalid","State":"open","Body":"Setting the image resolution is good on windows, but it doesn't work on Linux. When you draw text, you don't enlarge the font according to the resolution.\r\n\r\n`image.SetResolution(96 * imageDpi, 96 * imageDpi);`","Url":"https://github.com/dotnet/corefx/issues/41979","RelatedDescription":"Open issue \"NetCore（2.1） System.Drawing.Common（4.6.0） Bitmap SetResolution invalid\" (#41979)"},{"Id":"510394444","IsPullRequest":false,"CreatedAt":"2019-10-22T02:25:38","Actor":"Alan-Lun","Number":"41978","RawContent":null,"Title":"Net Core 3.0 Memory","State":"open","Body":"https://github.com/dotnet/corefx/issues/41669\r\n記憶體都持續飆高，不會下降釋放\r\n基本專案\r\nhttps://github.com/Alan-Lun/NetCoreMemory\r\n\r\n圖片\r\ninit\r\nhttps://imgur.com/PgpjVFe\r\n呼叫一次\r\nhttps://imgur.com/2w25aUI\r\n連續呼叫\r\nhttps://imgur.com/SU8bWQm\r\nhttps://imgur.com/t3GxpGY\r\n\r\n目前專案上Memory\r\nQuartz.net(https://github.com/quartznet/quartznet)\r\nhttps://imgur.com/IyanjhX\r\n.Net Core 3.0 WebAPI\r\nhttps://imgur.com/YXBCd2e\r\n\r\nmemory total: 128mb\r\nbuild image: mcr.microsoft.com/dotnet/core/sdk:3.0-buster\r\ndotnet publish API.csproj -c Release -r linux-x64 --self-contained true\r\n\r\nrun image: mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim\r\n\r\nAWS ECS\r\nCPU available:2048\r\nMemory available(MB)\r\nAgent version: 1.29.0\r\nDocker version:18.06.1-ce","Url":"https://github.com/dotnet/corefx/issues/41978","RelatedDescription":"Open issue \"Net Core 3.0 Memory\" (#41978)"},{"Id":"510388407","IsPullRequest":true,"CreatedAt":"2019-10-22T02:00:41","Actor":"layomia","Number":"41977","RawContent":null,"Title":"Add more tests for collections","State":"open","Body":"Additional tests for collections, given the changes in https://github.com/dotnet/corefx/pull/41482.\r\n- Fixes https://github.com/dotnet/corefx/issues/40657\r\n- Partly addresses https://github.com/dotnet/corefx/issues/40370","Url":"https://github.com/dotnet/corefx/pull/41977","RelatedDescription":"Open PR \"Add more tests for collections\" (#41977)"},{"Id":"510384167","IsPullRequest":true,"CreatedAt":"2019-10-22T01:41:52","Actor":"JeremyKuhne","Number":"41975","RawContent":null,"Title":"Handle non blittable LOGFONT structs","State":"open","Body":"Adding support for blittable structs broke non-blittable structs passed to `Font.FromLogFont`. Try to blit and fall through to the marshaller for non blittable types.\r\n\r\nFixes: https://github.com/dotnet/winforms/issues/2136\r\n\r\nWe should consider for 3.1 as this has been reported by a customer.","Url":"https://github.com/dotnet/corefx/pull/41975","RelatedDescription":"Open PR \"Handle non blittable LOGFONT structs\" (#41975)"},{"Id":"510368432","IsPullRequest":false,"CreatedAt":"2019-10-22T00:31:43","Actor":"bartonjs","Number":"41974","RawContent":null,"Title":"Enable DynamicRevocationTests on macOS","State":"open","Body":"All responses are coming back from SecTrustEvaluate with RevocationStatusUnknown, so macOS is unhappy with either the OCSP Responses or the trust chain.\r\n\r\n* Maybe they don't use the SecTrust anchors list, but the default trust list, when validating responses?\r\n* Maybe they want some extra metadata in the cert chains somewhere?\r\n\r\nEnabling tracing on the revocation responder shows that the response was sent, and it works for Windows and Linux... so something OS-specific is going on.\r\n\r\nSince the tests are still valueable for Windows and Linux, they're being committed with macOS disabled.","Url":"https://github.com/dotnet/corefx/issues/41974","RelatedDescription":"Open issue \"Enable DynamicRevocationTests on macOS\" (#41974)"},{"Id":"510325939","IsPullRequest":true,"CreatedAt":"2019-10-21T23:38:25","Actor":"Dotnet-GitSync-Bot","Number":"41971","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @filipnavara @AaronRobinsonMSFT @stephentoub @GrabYourPitchforks @delmyers @benaadams @tannergooding","Url":"https://github.com/dotnet/corefx/pull/41971","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#41971)"},{"Id":"510339591","IsPullRequest":false,"CreatedAt":"2019-10-21T22:52:36","Actor":"neman","Number":"41973","RawContent":null,"Title":"Why System.Text.Json requires that class explicitly have parameterless constructor","State":"open","Body":"I have a class containing one constructor with some parameters. \r\nWhy do I also have to explicitly declare default constructor?\r\n\r\nI'm already using both constructors throughout the code, and System.Text.Json does not serialize if I do not explicitly write default constructor. Newtonsoft json did not required this intervention. Now I have to revert back to old code.\r\n\r\nExample of code which does not work\r\n\r\n```c#\r\nstring test = \"{\\\"First\\\": {\\\"Name\\\": \\\"Nemanja\\\"}}\";\r\nvar value = JsonSerializer.Deserialize<Dictionary<string, Person>>(test);\r\n\r\npublic class Person\r\n{\r\n   public string Name { get; set; }\r\n   public Person(int x)   { }\r\n}\r\n```\r\n\r\nThis code throws exception. It works when I add parameterless constructor\r\n","Url":"https://github.com/dotnet/corefx/issues/41973","RelatedDescription":"Open issue \"Why System.Text.Json requires that class explicitly have parameterless constructor\" (#41973)"},{"Id":"510336321","IsPullRequest":false,"CreatedAt":"2019-10-21T22:42:25","Actor":"veleek","Number":"41972","RawContent":null,"Title":"Intermittent \"System.Net.Http.HttpRequestException: No such host is known\" when making high volume in-parallel calls from a single host.","State":"open","Body":"This bug was originally filed against the Azure KeyVault client (here https://github.com/Azure/azure-sdk-for-net/issues/7873), but after some further troubleshooting it looks like it might be an issue related to the .NET framework.  Details are mostly copied from the initial bug report there, but please see that thread for more detail.  \r\n\r\nThere is a minimum repro of the issue (that I've been able to re-create) available here: https://gist.github.com/veleek/6751f70081e13d5f8bdf3f0cb09d0a4f and as mentioned below this only seems to occur with the Visual Studio debugger attached (which slows the process down).\r\n\r\n**Describe the bug**\r\nWhen making large numbers of requests to KeyVault, .NET occasionally throws 'No such host is known' errors.  Retrying with the exact same URL always succeeds \r\n\r\nIn this case, I'm calling a KeyVault to enumerate all the secrets and then making calls in parallel to download them all.  I can consistently enumerate a few thousand secrets in a few minutes without issues, but then it starts slowing down, and then a few of these exceptions start occurring.  The KeyVault I'm testing with has 10030 secrets, and it successfully downloads ~9990 of them.  So it's a significant number of exception hits.\r\n\r\nKeyVault requests are performed in parallel using `System.Threading.DataFlows.TransformBlock` with 25-50 requests in parallel.  \r\n\r\n* This only seems to occur when running under the debugger in Visual Studio\r\n* Visual Studio 2019\r\n* .NET Core 3.0.100\r\n* The problem doesn't reproduce 100%, it is possible to get a completely clean run but the repro rate is high. \r\n* When one of these errors occur, it almost always occurs a whole bunch of times for the remainder of the run.\r\n* This is NOT related to service side throttling at all.  If that were the case then it would be more likely to occur when running without the debugger because the process completes all 10K keys MUCH faster and has never failed without the debugger.  I think the debugger may just be exposing a much more rare threading issue.\r\n\r\n***Exception or Stack Trace***\r\n```\r\nSystem.Net.Http.HttpRequestException: No such host is known.\r\n ---> System.Net.Sockets.SocketException (11001): No such host is known.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Rest.RetryDelegatingHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClient.GetSecretWithHttpMessagesAsync(String vaultBaseUrl, String secretName, String secretVersion, Dictionary`2 customHeaders, CancellationToken cancellationToken)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClientExtensions.GetSecretAsync(IKeyVaultClient operations, String secretIdentifier, CancellationToken cancellationToken)\r\n   at ContentKey.Cli.KeyVaultContentKeySource.LoadKey(String keyId) in E:\\src\\ContentKey.Cli\\KeyVaultContentKeySource.cs:line 70\r\n   at ContentKey.Cli.IContentKeySource.<>c__DisplayClass2_0.<<UpdateKeys>b__0>d.MoveNext() in E:\\src\\ContentKey.Cli\\IContentKeySource.cs:line 49\r\n```\r\n\r\n**Expected behavior**\r\nNo error should be thrown.\r\n\r\n**Setup (please complete the following information):**\r\n - OS: Windows (.NET Core 3.0 Console App)\r\n - IDE : Visual Studio\r\n\r\n**Additional context**\r\nI'm able to reproduce this behavior pretty consistently when running with the debugger attached (no breakpoints configured or hit or anything though), but when running from the command line with no debugger it doesn't seem to fail.","Url":"https://github.com/dotnet/corefx/issues/41972","RelatedDescription":"Open issue \"Intermittent \"System.Net.Http.HttpRequestException: No such host is known\" when making high volume in-parallel calls from a single host.\" (#41972)"},{"Id":"510130188","IsPullRequest":true,"CreatedAt":"2019-10-21T22:13:36","Actor":"stephentoub","Number":"41957","RawContent":null,"Title":"Guard against attempting to creating out-of-range spans in macOS FileSystemWatcher","State":"closed","Body":"Addresses PR feedback in https://github.com/dotnet/corefx/pull/40957 (I don't have push rights to that branch)\r\nReplaces https://github.com/dotnet/corefx/pull/40957\r\nFixes https://github.com/dotnet/corefx/issues/40054\r\ncc: @alexischr ","Url":"https://github.com/dotnet/corefx/pull/41957","RelatedDescription":"Closed or merged PR \"Guard against attempting to creating out-of-range spans in macOS FileSystemWatcher\" (#41957)"},{"Id":"510321112","IsPullRequest":true,"CreatedAt":"2019-10-21T22:12:53","Actor":"safern","Number":"41970","RawContent":null,"Title":"Update readme badge to point to public CI build","State":"closed","Body":"cc: @stephentoub @ViktorHofer @danmosemsft @joperezr ","Url":"https://github.com/dotnet/corefx/pull/41970","RelatedDescription":"Closed or merged PR \"Update readme badge to point to public CI build\" (#41970)"},{"Id":"510321039","IsPullRequest":false,"CreatedAt":"2019-10-21T22:08:15","Actor":"bartonjs","Number":"41969","RawContent":null,"Title":"X509Chain is not consistent with NotValidForUsage between Windows and Linux","State":"open","Body":"This is tracking a test that will be committed disabled, more variations are probably worth pursuing.\r\n\r\n* Build a self-signed certificate, no EKU\r\n* Build an intermediate CA, no EKU.\r\n* Build an end-entity certificate good for TLS Client\r\n* Feed all of that into an appropriately-trusting X509Chain, test for the TLS Server EKU in ApplicationPolicy\r\n\r\nWindows reports NotValidForUsage only at the end-entity certificate level in the chain.  Linux reports it for all three certificates.\r\n\r\nThis particular test result was from a test that did the above as well as revoked the intermediate; it probably also applies with no revocation checking (or a non-revoked chain).\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: X509ChainStatusFlags[] [NoError, Revoked, NotValidForUsage | RevocationStatusUnknown | OfflineRevocation]\r\nActual:   X509ChainStatusFlags[] [NotValidForUsage, Revoked | NotValidForUsage, NotValidForUsage | RevocationStatusUnknown | OfflineRevocation]\r\n```","Url":"https://github.com/dotnet/corefx/issues/41969","RelatedDescription":"Open issue \"X509Chain is not consistent with NotValidForUsage between Windows and Linux\" (#41969)"},{"Id":"510313221","IsPullRequest":false,"CreatedAt":"2019-10-21T21:49:41","Actor":"ahsonkhan","Number":"41968","RawContent":null,"Title":"System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent failing with System.ComponentModel.Win32Exception","State":"open","Body":"From https://github.com/dotnet/corefx/pull/41845\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=395966\r\n\r\nFailing on netfx-Windows_NT-Release-x86-Windows.10.Amd64.Client19H1.Open\r\n\r\n`System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(SourceFlag: True)`\r\n`System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(SourceFlag: False)`\r\n\r\n```text\r\nSystem.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n```\r\n\r\n\r\nhttps://helix.dot.net/api/2019-06-17/jobs/84405ce3-2c71-4840-8ff8-d714579059b2/workitems/System.Diagnostics.EventLog.Tests/console\r\n```text\r\n    System.Diagnostics.Tests.EventLogConfigurationTests.SetProperties_SaveChanges_NotAdmin_Throws [SKIP]\r\n      Condition(s) not met: \"NotElevatedAndSupportsEventLogs\"\r\n    System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(SourceFlag: False) [FAIL]\r\n      System.AggregateException : One or more errors occurred.\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      Stack Trace:\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(45,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(35,0): at System.Diagnostics.Tests.Helpers.Retry[T](Func`1 func)\r\n        /_/src/System.Diagnostics.EventLog/tests/EventLogTests/EventLogWriteEntryTests.cs(328,0): at System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(Boolean SourceFlag)\r\n        ----- Inner Stack Trace #1 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #2 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #3 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #4 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #5 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #6 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #7 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #8 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #9 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #10 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n    System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(SourceFlag: True) [FAIL]\r\n      System.AggregateException : One or more errors occurred.\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      ---- System.ComponentModel.Win32Exception : A device attached to the system is not functioning\r\n      Stack Trace:\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(45,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(35,0): at System.Diagnostics.Tests.Helpers.Retry[T](Func`1 func)\r\n        /_/src/System.Diagnostics.EventLog/tests/EventLogTests/EventLogWriteEntryTests.cs(328,0): at System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent(Boolean SourceFlag)\r\n        ----- Inner Stack Trace #1 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #2 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #3 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #4 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #5 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #6 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #7 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #8 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #9 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n        ----- Inner Stack Trace #10 (System.ComponentModel.Win32Exception) -----\r\n           at System.Diagnostics.EventLogInternal.Clear()\r\n           at System.Diagnostics.EventLog.Delete(String logName, String machineName)\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(23,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<Retry>b__0()\r\n        /_/src/System.Diagnostics.EventLog/tests/Helpers.cs(32,0): at System.Diagnostics.Tests.Helpers.<>c__DisplayClass7_0`1.<Retry>b__0()\r\n        /_/src/Common/tests/CoreFx.Private.TestUtilities/System/RetryHelper.cs(37,0): at System.RetryHelper.Execute(Action test, Int32 maxAttempts, Func`2 backoffFunc)\r\n  Finished:    System.Diagnostics.EventLog.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.EventLog.Tests  Total: 138, Errors: 0, Failed: 2, Skipped: 1, Time: 63.162s\r\n----- end Mon 10/21/2019 20:59:06.57 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\ncc @wtgodbe \r\n\r\nLooks similar to https://github.com/dotnet/corefx/issues/41150","Url":"https://github.com/dotnet/corefx/issues/41968","RelatedDescription":"Open issue \"System.Diagnostics.Tests.EventLogWriteEntryTests.WriteEvent failing with System.ComponentModel.Win32Exception\" (#41968)"},{"Id":"510205034","IsPullRequest":true,"CreatedAt":"2019-10-21T21:44:28","Actor":"danmosemsft","Number":"41960","RawContent":null,"Title":"use background thread to wait for address changes on OSX (#41768)","State":"closed","Body":"### Description\r\n\r\nUse background thread to wait for address changes on OSX to avoid hang after:\r\n```C#\r\nSystem.Net.NetworkInformation.NetworkChange.NetworkAddressChanged += (sender, e) => {}\r\n```\r\n\r\nports https://github.com/dotnet/corefx/pull/41768\r\nfixes #41740\r\n\r\n### Customer Impact:\r\n\r\nRequested by @davidfowl : \"We found this when we noticed that applications which use AppInsights don't close when they would normally exit on a Mac. This isn't noticed normally because the normal workflow for AspNetCore apps is that when you want the server to exit you send Ctrl-C.\"\r\n\r\n### Regression? \r\n\r\nNo.\r\n\r\n### Risk\r\n\r\nVery low. The fix is just changing a thread to Background, and the only effect of that is to prevent the runtime joining on it before terminating.\r\n\r\n### Tests run / added\r\n\r\nTest added.","Url":"https://github.com/dotnet/corefx/pull/41960","RelatedDescription":"Closed or merged PR \"use background thread to wait for address changes on OSX (#41768)\" (#41960)"},{"Id":"510297894","IsPullRequest":true,"CreatedAt":"2019-10-21T21:14:56","Actor":"wfurt","Number":"41967","RawContent":null,"Title":"propagate TLS alerts from OS layers ","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/41967","RelatedDescription":"Open PR \"propagate TLS alerts from OS layers \" (#41967)"},{"Id":"510296303","IsPullRequest":false,"CreatedAt":"2019-10-21T21:11:58","Actor":"TomasMorton","Number":"41966","RawContent":null,"Title":"Targeting netstandard2.1 conflicts with System.Data.DataSetExtensions","State":"open","Body":"I'm trying to upgrade my solution to DotNet Core 3.  I have references to Entity Framework, which has forced an upgrade to netstandard 2.1.\r\n\r\nHowever, my classes that were using the DataTableExtensions are now unable to compile due to the following error:\r\n`[CS0121] The call is ambiguous between the following methods or properties: 'System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)' and 'System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)'`\r\nand also\r\n`[CS0433] The type 'TypedTableBase<T>' exists in both 'System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' and 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'`\r\n\r\nI have removed all Nuget packages for System.Data.DataSetExtensions, but I probably have a transitive dependency somewhere in the graph.\r\n\r\nThis problem seems to be the same as the previous one in https://github.com/dotnet/corefx/issues/37738.\r\n\r\nI would appreciate any workarounds to get my solution compiling as soon as possible.","Url":"https://github.com/dotnet/corefx/issues/41966","RelatedDescription":"Open issue \"Targeting netstandard2.1 conflicts with System.Data.DataSetExtensions\" (#41966)"},{"Id":"510296178","IsPullRequest":false,"CreatedAt":"2019-10-21T21:11:43","Actor":"rstm-sf","Number":"41965","RawContent":null,"Title":"Add alternative variant for get encoding by string name","State":"open","Body":"Hello!\r\n\r\nAdd alternative variant for get encoding by string name.\r\n\r\nSince the `System.Text.Encoding.CodePages.dll` library is now part of the framework, I would like to see the method without additional code in the form `Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)`","Url":"https://github.com/dotnet/corefx/issues/41965","RelatedDescription":"Open issue \"Add alternative variant for get encoding by string name\" (#41965)"},{"Id":"510283876","IsPullRequest":true,"CreatedAt":"2019-10-21T20:49:11","Actor":"vcsjones","Number":"41964","RawContent":null,"Title":"Cleanup unused locals in more places","State":"open","Body":"/cc @bartonjs @stephentoub \r\n\r\nContributes to #39962.","Url":"https://github.com/dotnet/corefx/pull/41964","RelatedDescription":"Open PR \"Cleanup unused locals in more places\" (#41964)"},{"Id":"510263663","IsPullRequest":true,"CreatedAt":"2019-10-21T20:18:03","Actor":"aik-jahoda","Number":"41963","RawContent":null,"Title":"Fix wrong behaviour when move multiple files out of watched folder on mac","State":"open","Body":"On mac when the file is moved fsevents trigger two events. One for the original filename the second for the new filename. The events are paired and in .net FileSystemWatcher and triggered as one Rename event. When the file is moved outside the watched folder only one event with the old file name is triggered. It works fine until only one file is moved however when more files are moved outside of the directory the event for each files are paired together altought it doesn't belong to the same file.\r\n\r\nThe fix add event id constraint to match the events correctly. Tests for all platforms were added.\r\n\r\nFixes #41080 and Fixes #41465","Url":"https://github.com/dotnet/corefx/pull/41963","RelatedDescription":"Open PR \"Fix wrong behaviour when move multiple files out of watched folder on mac\" (#41963)"},{"Id":"510256229","IsPullRequest":true,"CreatedAt":"2019-10-21T20:07:09","Actor":"eriawan","Number":"41962","RawContent":null,"Title":"Remove unused locals in System.Data.Common and keep some logic using discard","State":"open","Body":"remove unused locals in System.Data.Common and keep some logic using discard.\r\nPartially fix issue #39962\r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/41962","RelatedDescription":"Open PR \"Remove unused locals in System.Data.Common and keep some logic using discard\" (#41962)"},{"Id":"510205101","IsPullRequest":false,"CreatedAt":"2019-10-21T18:51:25","Actor":"Symbai","Number":"41961","RawContent":null,"Title":"API Proposal: Path.GetTempDirectory","State":"open","Body":"When dealing with temporary files, especially with more than one, we would like to create our own folder and place them inside. There are several ways to achieve this but for convenience and for completion of the existing Path.GetTempFileName there should be an official API for this. \r\n\r\nThe API name can be different (CreateTempDirectory?) to avoid confusion between GetTempPath and the meaning of it.\r\n\r\n```\r\npublic static partial class Path\r\n{\r\n\t/// <summary>\r\n\t/// Creates a uniquely named, empty folder on disk and returns the full path of that directory. \r\n\t/// </summary>\r\n\tpublic static string GetTempDirectory()\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/41961","RelatedDescription":"Open issue \"API Proposal: Path.GetTempDirectory\" (#41961)"},{"Id":"510151673","IsPullRequest":false,"CreatedAt":"2019-10-21T17:40:01","Actor":"bert2","Number":"41959","RawContent":null,"Title":"API Proposal: Add `Replace()` methods to `ImmutableList` builder","State":"open","Body":"`ImmutableList<T>.Builder` should have `Replace()` methods like `ImmutableList<T>` does, in order to make it easier switching between the two in client code.\r\n\r\n# Rationale and Usage\r\n\r\nIn order to facilitate the use of the performant `Immutable*<T>.Builder` types, their API should mirror the API of the respective target type as closely as _reasonable_. `ImmutableList<T>.Builder`, however, is missing the two `Replace()` methods its target type `ImmutableList<T>` [has](https://github.com/dotnet/corefx/blob/5e4bf872154c17a1407997a38cc013fb12d5d1af/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList_1.cs#L397).\r\n\r\nThis forces client code to re-implement `Replace()` when switching from an `ImmutableList<T>` to its builder:\r\n\r\n```csharp\r\n// Replacing an item directly\r\n\r\nvar xs = ImmutableList.Create(1, 2, 4);\r\n\r\nxs = xs.Replace(4, 3);\r\n```\r\n\r\n```csharp\r\n// Replacing an item with builder\r\n\r\nvar xs = ImmutableList.Create(1, 2, 4);\r\nvar xsb = xs.ToBuilder();\r\n\r\n// naive re-implementation of `Replace()`\r\nvar idx = xsb.IndexOf(4);\r\nxsb.RemoveAt(idx);\r\nxsb.Insert(idx, 3);\r\n\r\nxs = xsb.ToImmutable();\r\n```\r\n\r\nThe lack of the `Replace()` method is IMHO confusing for developers. Furthermore, the re-implementation of `Replace()` means extra work and is probably less performant than an implementation coming with the builder itself.\r\n\r\n# Proposed API\r\n\r\n```csharp\r\npublic sealed partial class ImmutableList<T>\r\n{\r\n    public sealed class Builder : ...\r\n    {\r\n        ...\r\n        public void Replace(T oldValue, T newValue) { ... }\r\n        public void Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer) { ... }\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n# Details\r\n\r\nOf course no builder can mirror the API of its target type _exactly_. The method return values are usually not a modified copy of the original data structure, but `void` or useful meta data instead (e.g. `ImmutableList<T>.Builder.Remove(T)` returns a `bool` indicating whether the item was found). Also it would not make any sense to implement `ToBuilder()` on the builder type.\r\n\r\n# Open Questions\r\n\r\n- Was `Replace()` not implemented on the builder _intentionally_? Maybe there are technical limitations?\r\n- If `Replace()` was not implemented on the builder _by accident_: should there be a unit test verifying that the various builder types are exposing the same API as the respective target type?\r\n- Are there more methods missing on the same or other builders? I didn't check this to keep the PR small. But given that changes to the public API go through an extensive review process, it could make sense to fix as many missing methods as possible in one sweep.\r\n\r\n# Pull Request\r\n\r\nA (prematurely opened) PR with the proposed changes is available: https://github.com/dotnet/corefx/pull/41920","Url":"https://github.com/dotnet/corefx/issues/41959","RelatedDescription":"Open issue \"API Proposal: Add `Replace()` methods to `ImmutableList` builder\" (#41959)"},{"Id":"510140514","IsPullRequest":true,"CreatedAt":"2019-10-21T17:25:34","Actor":"stephentoub","Number":"41958","RawContent":null,"Title":"Fix a rare GetAwaiter().GetResult() on a ValueTask in System.Net.Http","State":"open","Body":"If someone's custom HttpContent-derived type is implementing their async SerializeToStreamAsync with synchronous Write calls on the destination stream, and if that WriteAsync method returns an IValueTaskSource-based ValueTask that's not yet completed, this could throw an exception.   This is unlikely to actually negative impact anyone right now, but it's worth fixing.  This is one of the patterns an analyzer around ValueTasks will help find and fix.","Url":"https://github.com/dotnet/corefx/pull/41958","RelatedDescription":"Open PR \"Fix a rare GetAwaiter().GetResult() on a ValueTask in System.Net.Http\" (#41958)"},{"Id":"510129370","IsPullRequest":true,"CreatedAt":"2019-10-21T17:10:37","Actor":"bartonjs","Number":"41956","RawContent":null,"Title":"Normalize Linux and Windows X.509 Revocation Statuses","State":"open","Body":"* Add a bunch of tests for X.509 Revocation using an HttpListener-based responder\r\n* Add Linux support for OCSP at multiple levels (not just the leaf)\r\n* Fix up some inconsistencies in chain element statuses\r\n\r\n[Draft PR]\r\n* Once results are tested, move the new tests to OuterLoop, because they're slow (16 seconds => 290 seconds)\r\n* No idea what macOS's status is, I imagine it's not pretty due to their lack of good CRL support (probably need a condition in the theory-generator)\r\n","Url":"https://github.com/dotnet/corefx/pull/41956","RelatedDescription":"Open PR \"Normalize Linux and Windows X.509 Revocation Statuses\" (#41956)"},{"Id":"510077092","IsPullRequest":false,"CreatedAt":"2019-10-21T16:48:35","Actor":"NextTurn","Number":"41955","RawContent":null,"Title":"Assembly.Load(String) doesn't need full name","State":"closed","Body":"Migrated from dotnet/dotnet-api-docs#2270 to request for more information.\r\n\r\n> https://github.com/dotnet/dotnet-api-docs/blob/3417fadcec76fa01f6b262ea7bcd999ae6b74a50/xml/System.Reflection/Assembly.xml#L3552\r\n>\r\n> I successfully called `Assembly.Load(String)` with the [simple name](https://docs.microsoft.com/dotnet/api/system.reflection.assemblyname.name) of an assembly, in .NET Framework 4.7.2 and .NET Core 2.2.","Url":"https://github.com/dotnet/corefx/issues/41955","RelatedDescription":"Closed issue \"Assembly.Load(String) doesn't need full name\" (#41955)"},{"Id":"510012985","IsPullRequest":false,"CreatedAt":"2019-10-21T16:02:45","Actor":"carlossanlop","Number":"41954","RawContent":null,"Title":"Restructure our documentation","State":"closed","Body":"Followup for this issue: https://github.com/dotnet/corefx/issues/36057\r\n\r\nAs requested in [this comment](https://github.com/dotnet/corefx/issues/36057#issuecomment-541722131), we want to have our GitHub documentation recategorized before the corefx and coreclr repos get merged.\r\n\r\nI modified the Documentation README.md to merge corefx and coreclr documentation, and include the wiki data I considered useful from my table above. But before I submit a PR with the new structure, I would like to get some feedback from the community.\r\n\r\nHere is my proposed new structure:\r\nhttps://github.com/carlossanlop/corefx/tree/NewReadme/Documentation\r\n","Url":"https://github.com/dotnet/corefx/issues/41954","RelatedDescription":"Closed issue \"Restructure our documentation\" (#41954)"},{"Id":"509985256","IsPullRequest":false,"CreatedAt":"2019-10-21T14:04:17","Actor":"onatm","Number":"41953","RawContent":null,"Title":"System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix is not working as expected on Unix family OSes","State":"open","Body":"Currently, `System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix` property returns only the `search` keyword's value from `resolv.conf` when there is exactly one entry on the line where `search` is present.\r\n\r\nAccording to [resolv.conf](https://linux.die.net/man/5/resolv.conf) manual, there could be multiple entries for a given search keyword.\r\n\r\nFollowing the documentation, you can also see that the `domain` keyword could be used as the first search domain when specified.\r\n\r\nAdditionally, when both of the keywords are specified, the last one will be used as the search domain:\r\n\r\n> The domain and search keywords are mutually exclusive. If more than one instance of these keywords is present, the last instance wins.\r\n\r\nReturning multiple search domain entries (DNS suffixes) would break the backward compatibility. However, there should be a way for Unix family OSes to acquire this data somehow and the `domain` keyword should be used as well.","Url":"https://github.com/dotnet/corefx/issues/41953","RelatedDescription":"Open issue \"System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix is not working as expected on Unix family OSes\" (#41953)"},{"Id":"509984141","IsPullRequest":false,"CreatedAt":"2019-10-21T14:02:29","Actor":"CodingBeagle","Number":"41952","RawContent":null,"Title":"Net Core 3.0 and 3.1 Preview - Http Client seems to default to NTLM instead of Kerberos","State":"open","Body":"Hey,\r\n\r\nI am in the progress of migrating a codebase from .Net Core 2.2 to Net Core 3.0. Without changing our codebase, we noticed that HTTP requests using Kerberos stopped working.\r\n\r\nInvestigating the headers of the HTTP requests, we see that the Authorization header appears to default to an NTLM key instead of a Kerberos key. It appears that from 2.2 to 3.0, something in the HTTP client broke. It seems to be the same issue that we had when using Net Core 2.1, where the HTTP client would also default to NTLM instead of Kerberos. This was fixed in 2.2, and now seems to be misbehaving again.\r\n\r\nNotice, no code was changed in this part of the codebase going from 2.2 to 3.0. Reverting back to 2.2 and the exact same code works again.\r\n\r\nI just tried the Net Core 3.1 preview, however nothing seems to have been fixed in this version either.\r\n\r\nDoes anyone else have any experience with this, or potential fixes?\r\n\r\nThe way we set up our HTTP client with network credentials is like this:\r\n\r\n`httpClient = new HttpClient(new SocketsHttpHandler \r\n{\r\n\tCredentials = new NetworkCredential\r\n\t{\r\n\t\tUserName = \"username\",\r\n\t\tPassword = \"password\",\r\n\t\tDomain = \"domain\"\r\n\t}\r\n});`","Url":"https://github.com/dotnet/corefx/issues/41952","RelatedDescription":"Open issue \"Net Core 3.0 and 3.1 Preview - Http Client seems to default to NTLM instead of Kerberos\" (#41952)"},{"Id":"509981460","IsPullRequest":true,"CreatedAt":"2019-10-21T13:58:00","Actor":"carlossanlop","Number":"41951","RawContent":null,"Title":"Bump IntelliSense to 3.1.0-preview2-191021-1","State":"open","Body":"This PR is going into the `release/3.1` branch. Please let me know if I should be using a different branch.\r\n\r\nThe nupkg file was successfully uploaded following [these instructions](https://github.com/dotnet/core-eng/tree/master/Documentation/Tools/dotnet-core-push-oneoff-package).\r\n\r\nFor the curious, the updated intellisense files can be seen [here](https://github.com/dotnet/corefxlab/pull/2758).","Url":"https://github.com/dotnet/corefx/pull/41951","RelatedDescription":"Open PR \"Bump IntelliSense to 3.1.0-preview2-191021-1\" (#41951)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"510370405","IsPullRequest":true,"CreatedAt":"2019-10-22T00:39:57","Actor":"dibarbet","Number":"39438","RawContent":null,"Title":"Lock resettable delay to prevent concurrent access.","State":"open","Body":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994068\r\n\r\nPossible reason. ->\r\nWe get two simultaneous entrances into ProgressUpdated, one from sln crawler (1), one from [completion of previous ProgressUpdated](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,150) (2)\r\n\r\nAt this point in time, the delay is null (b/c of (2)).  So they both hit the [construction of a new resettabledelay](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,146).  Both append the continuation to their delay, but only one get stored in the field, let's say that (2) is in the field.\r\n\r\n(Might be optional step) A third event comes in, [resetting the delay of the stored delay](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,142), (2).\r\n\r\nEventually the unstored delay (1) completes resetting the field to null.\r\nA fourth ProgressUpdated event comes in, sees null, tries to create a new delay.  Immediately after the constructor is hit, the previously stored delay (2) completes and sets the delay to null -> null prt exception.\r\n\r\n@jasonmalinowski now that I'm writing this down this is the scenario I can think of - does it sound right?","Url":"https://github.com/dotnet/roslyn/pull/39438","RelatedDescription":"Open PR \"Lock resettable delay to prevent concurrent access.\" (#39438)"},{"Id":"510369969","IsPullRequest":false,"CreatedAt":"2019-10-22T00:37:43","Actor":"davkean","Number":"39437","RawContent":null,"Title":"Code fixes never shows up if you navigate to it and the file has never been open before","State":"open","Body":"This is 100% repro and has occurred up on stage presenting the fixes.\r\n\r\n**Visual Studio Version**:\r\nVersion 16.4.0 Preview 3.0 [29421.117.master]\r\n\r\n**Summary**:\r\n\r\n**Steps to Reproduce**:\r\n\r\nMake sure Full Solution Analysis is turned on.\r\n\r\n1. `git clone https://github.com/davkean/audio-switcher`\r\n2. `cd audio-switcher`\r\n3. `git checkout 9d8fa8d1d1dde083abc6d813617df05b088d88f1`\r\n4. `src\\AudioSwitcher.sln`\r\n5. Open Error List and wait for \"Use pattern matching\" analysis message to appear\r\n6. Double-click it to navigate to source code\r\n7. Drop lightbulb\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/67252753-0f5a8700-f4c0-11e9-9b60-449a59ebd03e.png)\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/67252740-079ae280-f4c0-11e9-9e4f-abfbc36604b8.png)","Url":"https://github.com/dotnet/roslyn/issues/39437","RelatedDescription":"Open issue \"Code fixes never shows up if you navigate to it and the file has never been open before\" (#39437)"},{"Id":"510337689","IsPullRequest":true,"CreatedAt":"2019-10-22T00:19:52","Actor":"KirillOsenkov","Number":"39431","RawContent":null,"Title":"Link to http://sourceroslyn.io","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39431","RelatedDescription":"Closed or merged PR \"Link to http://sourceroslyn.io\" (#39431)"},{"Id":"510350463","IsPullRequest":true,"CreatedAt":"2019-10-21T23:26:07","Actor":"jcouv","Number":"39436","RawContent":null,"Title":"Call AsyncIteratorMethodBuilder.Complete","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/39321\r\n\r\nWe need to call `AsyncIteratorMethodBuilder.Complete` to dispose of some resources it holds. We can do that when bringing the state machine to a finalized state (`-2`), that is when we'd call `AsyncTaskMethodBuilder.SetResult` in a plain async method.\r\nBut a completed instance cannot be re-used, so we also need to reset it in `GetAsyncEnumerator`.\r\n\r\nFor more context, here's the code we [currently produce](https://sharplab.io/#v2:D4AQTAjAsAUCAMACEEAsBuWDkQKyZiwGZkxEBhRAb1kTuRJAA5EBJAQQGcBPAOwGMAorwCuAWwCmAJwCGAIwA2EgDwBLXgBcAfIgCyACgCU1WvTMgAnMgBsAOgCaqiQoAmRgmfMQIyAOyJ4D3oAX1hgoA===).\r\n\r\nHere's a sample showing an overview of the change:\r\n\r\n``` csharp\r\n\tprivate sealed class <M>d__0 : IAsyncEnumerable<int>, IAsyncEnumerator<int>, IAsyncDisposable, IValueTaskSource<bool>, IValueTaskSource, IAsyncStateMachine\r\n\t{\r\n\t\tpublic int <>1__state;\r\n\t\tpublic AsyncIteratorMethodBuilder <>t__builder;\r\n\t\tpublic ManualResetValueTaskSourceCore<bool> <>v__promiseOfValueOrEnd;\r\n\t\tprivate int <>2__current;\r\n\t\tprivate bool <>w__disposeMode;\r\n\t\tprivate int <>l__initialThreadId;\r\n\t\tprivate TaskAwaiter <>u__1;\r\n\r\n\t\t[DebuggerHidden]\r\n\t\tpublic <M>d__0(int <>1__state)\r\n\t\t{\r\n\t\t\tthis.<>1__state = <>1__state;\r\n\t\t\t<>l__initialThreadId = Environment.CurrentManagedThreadId;\r\n                        <>t__builder = AsyncIteratorMethodBuilder.Create();\r\n\t\t}\r\n\r\n\t\tprivate void MoveNext()\r\n\t\t{\r\n\t\t\tint num = <>1__state;\r\n\t\t\ttry\r\n\t\t\t{\r\n                            ...\r\n\t\t\t}\r\n\t\t\tcatch (Exception exception)\r\n\t\t\t{\r\n\t\t\t\t<>1__state = -2;\r\n\t\t\t\t<>v__promiseOfValueOrEnd.SetException(exception);\r\n\t\t\t\t<>t__builder.Complete(); // added\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t<>1__state = -2;\r\n\t\t\t<>v__promiseOfValueOrEnd.SetResult(result: false);\r\n\t\t\t<>t__builder.Complete(); // added\r\n\t\t\treturn;\r\n\t\t\tIL_011f:\r\n\t\t\t<>v__promiseOfValueOrEnd.SetResult(result: true);\r\n\t\t}\r\n\r\n\t\t[DebuggerHidden]\r\n\t\tIAsyncEnumerator<int> IAsyncEnumerable<int>.GetAsyncEnumerator(CancellationToken token)\r\n\t\t{\r\n\t\t\tif (<>1__state == -2 && <>l__initialThreadId == Environment.CurrentManagedThreadId)\r\n\t\t\t{\r\n\t\t\t\t<>1__state = -3;\r\n\t\t\t\t<>t__builder = AsyncIteratorMethodBuilder.Create(); // added\r\n\t\t\t\t<>w__disposeMode = false;\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\treturn new <M>d__0(-3);\r\n\t\t}\r\n\r\n            ...\r\n\t}\r\n```","Url":"https://github.com/dotnet/roslyn/pull/39436","RelatedDescription":"Open PR \"Call AsyncIteratorMethodBuilder.Complete\" (#39436)"},{"Id":"510345082","IsPullRequest":false,"CreatedAt":"2019-10-21T23:10:04","Actor":"vsfeedback","Number":"39435","RawContent":null,"Title":"Incorrect editor behavior during Rename Refactor","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784737/incorrect-editor-behavior-during-rename-refactor.html)._\n\n---\n<ol><li>In a C# project, initiate a rename refactor on an identifier having more than one character.</li><li>Press Shift+Left Arrow to select one or more characters, but not all of them.</li><li>Type some characters.</li></ol><p>RESULT: The selected characters are deleted, but the typed characters appear at the beginning of the identifier.</p><p>EXPECT: The typed characters to overwrite the selected characters.</p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/20/2019, 07:41 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39435","RelatedDescription":"Open issue \"Incorrect editor behavior during Rename Refactor\" (#39435)"},{"Id":"510344060","IsPullRequest":false,"CreatedAt":"2019-10-21T23:07:25","Actor":"vsfeedback","Number":"39434","RawContent":null,"Title":"Autogeneration of interface implementation for IDiaStackWalkHelper is confused by indexed getter","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784552/autogeneration-of-interface-implementation-for-idi.html)._\n\n---\nAfter importing the DIA com type library in my C# project, I try to implement the IDiaStackWalkHelper interface. Using the automatic inteface implementation skeleton generation command results in an incorrect implementation of the `get_registerValue` method.\n\nThe generated skeleton thinks that `registerValue` is a normal property, when it is not. It's a named indexer, which isn't supported in C# and must be implemented as a pair of regular methods.\n\nThis error is instantly detected by intelisense who points out that the members aren't implemented.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/21/2019, 03:00 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39434","RelatedDescription":"Open issue \"Autogeneration of interface implementation for IDiaStackWalkHelper is confused by indexed getter\" (#39434)"},{"Id":"510333830","IsPullRequest":false,"CreatedAt":"2019-10-21T23:05:46","Actor":"vsfeedback","Number":"39430","RawContent":null,"Title":"IDE0054 and IDE0063 triggered when NOT using C#8","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/752720/ide0054-and-ide0063-triggered-when-not-using-c8.html)._\n\n---\nProblem since upgrading to VS Community 2019 16.3.\n\n.Net Framework projects only support C#7.3, but various C#8 hints are triggered which lead to code changes that look valid in the IDE but do not compile (&quot;language feature XXX is not availabel in C#7.3&quot;). \n\nI can prevent this by manually disabling the rules in a .ruleset file, but it would be better to disbale rules automatically that target a higher version.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/28/2019, 07:27 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 9/30/2019, 00:25 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Tom Austin on 10/15/2019, 02:43 AM: \n\n<p>Is there anymore info on this? It's still an issue.</p>\n\n#### sean on 10/17/2019, 00:48 PM: \n\n<p>I am using VS Professional 16.3.5 and am experiencing this issue.</p><p>I am using a type that implements `IDisposable`.</p><p>My csproj is an SDK style project.</p><p>It has `&lt;LangVersion&gt;latest&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;net472&lt;/TargetFramework&gt;`, so it is not a .NET Core project.</p><p><br>Do I have to explicitly set `&lt;LangVersion&gt;7.3&lt;/LangVersion&gt;` to not get the `IDE0063` recommendation?</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39430","RelatedDescription":"Closed issue \"IDE0054 and IDE0063 triggered when NOT using C#8\" (#39430)"},{"Id":"510342758","IsPullRequest":false,"CreatedAt":"2019-10-21T23:03:08","Actor":"vsfeedback","Number":"39433","RawContent":null,"Title":"weird indentation for tuple literal ending with lambda csharp","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784678/weird-indentation-for-tuple-literal-ending-with-la.html)._\r\n\r\n---\r\nIf I write a lambda in a tuple and type a semicolon after the tuple or ask Visual Studio to fix indentation for the file, it adds a newline between the lambda’s closing curly brace and the tuple’s closing parenthesis. This seems odd. I would expect a newline between the opening parenthesis and first value in the tuple if this were considered the desired style. However, I don’t think it is the desired style for tuples.\r\n\r\nI generally expect the styling of tuple parens to be the same as function argument list parens.\r\n\r\nBefore typing the semicolon:\r\n```csharp\r\nvar plan = new List<(int count, Action<int> action)>();\r\nplan.Add((2, i =>\r\n{\r\n    Console.WriteLine($\"Action (execution {i})\");\r\n}))\r\n```\r\n\r\n\r\nAfter typing the semicolon after the tuple.:\r\n```csharp\r\nvar plan = new List<(int count, Action<int> action)>();\r\nplan.Add((2, i =>\r\n{\r\n    Console.WriteLine($\"Action (execution {i})\");\r\n}\r\n));\r\n```\r\n\r\nExpected:\r\n```csharp\r\nvar plan = new List<(int count, Action<int> action)>();\r\nplan.Add((2, i =>\r\n{\r\n    Console.WriteLine($\"Action (execution {i})\");\r\n}));\r\n```\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 10/21/2019, 02:48 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39433","RelatedDescription":"Open issue \"weird indentation for tuple literal ending with lambda csharp\" (#39433)"},{"Id":"510340188","IsPullRequest":true,"CreatedAt":"2019-10-21T22:54:37","Actor":"333fred","Number":"39432","RawContent":null,"Title":"Semantic model assert","State":"open","Body":"Fixed invalid assert in `GetRemappedSymbols` for `AttributeSemanticModel`s. Since attribute models don't have a root symbol, we can't perform any symbol remapping in that context. Additionally updated the IDE test with the current baseline. @dotnet/roslyn-compiler @ryzngard for review.\r\nFixes https://github.com/dotnet/roslyn/issues/39427.","Url":"https://github.com/dotnet/roslyn/pull/39432","RelatedDescription":"Open PR \"Semantic model assert\" (#39432)"},{"Id":"510234614","IsPullRequest":true,"CreatedAt":"2019-10-21T22:24:01","Actor":"jcouv","Number":"39421","RawContent":null,"Title":"Use LangVersion 8 in tests rather than Preview","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39421","RelatedDescription":"Closed or merged PR \"Use LangVersion 8 in tests rather than Preview\" (#39421)"},{"Id":"510327421","IsPullRequest":false,"CreatedAt":"2019-10-21T22:21:55","Actor":"vsfeedback","Number":"39429","RawContent":null,"Title":"When pasting json into a comment in C# code, an error is shown","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/773139/when-pasting-json-into-a-comment-in-c-code-an-erro.html)._\n\n---\nThis just happened to me, here is what I did:\n\n1: Create a comment section in some C# code, using /* and */\n2: Within the comment section, paste some json\n3: Watch it show an yellow error bar at the top with the following exception:\n\nStreamJsonRpc.RemoteMethodNotFoundException : Unable to find method 'SynchronizeTextAsync/3' on {no object} for the following reasons: An argument was not supplied for a required parameter.\n   at async StreamJsonRpc.JsonRpc.InvokeCoreAsync[TResult](&lt;Unknown Parameters&gt;)\n   at async Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.InvokeAsync(&lt;Unknown Parameters&gt;)\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/12/2019, 00:03 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39429","RelatedDescription":"Open issue \"When pasting json into a comment in C# code, an error is shown\" (#39429)"},{"Id":"510326102","IsPullRequest":true,"CreatedAt":"2019-10-21T22:18:57","Actor":"ryzngard","Number":"39428","RawContent":null,"Title":"Change inline rename dialog to be more uniquely identifiable","State":"open","Body":"Change the AutomationId of Inline Rename to be uniquely identifiable. This is to aid screen readers who need to work specifically around the behavior of inline rename, which has an unfriendly focus model for screen readers. ","Url":"https://github.com/dotnet/roslyn/pull/39428","RelatedDescription":"Open PR \"Change inline rename dialog to be more uniquely identifiable\" (#39428)"},{"Id":"510197564","IsPullRequest":true,"CreatedAt":"2019-10-21T21:06:37","Actor":"JoeRobich","Number":"39419","RawContent":null,"Title":"Remove shortcircuit of status query for commands with handlers.","State":"closed","Body":"Instead of intercepting QueryStatus in AbstractOleCommandTarget we will allow the request to bubble up for commands with command handlers.\r\n\r\nfixes #39416","Url":"https://github.com/dotnet/roslyn/pull/39419","RelatedDescription":"Closed or merged PR \"Remove shortcircuit of status query for commands with handlers.\" (#39419)"},{"Id":"510181105","IsPullRequest":false,"CreatedAt":"2019-10-21T21:06:37","Actor":"vsfeedback","Number":"39416","RawContent":null,"Title":"Right-Click Remove and Sort Text Glitched","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784377/right-click-remove-and-sort-text-glitched.html)._\n\n---\nRight clicking in a C# file has the third entry reading &quot;Remove and Sort&quot; rather than &quot;Remove and Sort **_Usings_&quot;.**  Is this intentional?\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/21/2019, 02:06 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 10/21/2019, 10:16 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39416","RelatedDescription":"Closed issue \"Right-Click Remove and Sort Text Glitched\" (#39416)"},{"Id":"510293426","IsPullRequest":false,"CreatedAt":"2019-10-21T21:06:06","Actor":"ryzngard","Number":"39427","RawContent":null,"Title":"Debug exception hit in TryGetSpeculativeSemanticModel","State":"open","Body":"```\r\nMessage:\r\n    System.InvalidOperationException :\r\n   \r\n  Stack Trace:\r\n    ThrowingTraceListener.Fail(String message, String detailMessage) line 24\r\n    TraceListener.Fail(String message)\r\n    TraceInternal.Fail(String message)\r\n    Debug.Assert(Boolean condition)\r\n    MemberSemanticModel.GetRemappedSymbols() line 160\r\n    SyntaxTreeSemanticModel.CreateSpeculativeAttributeSemanticModel(Int32 position, AttributeSyntax attribute, Binder binder, AliasSymbol aliasOpt, NamedTypeSymbol attributeType) line 746\r\n    CSharpSemanticModel.TryGetSpeculativeSemanticModel(Int32 position, AttributeSyntax attribute, SemanticModel& speculativeModel) line 2554\r\n```\r\n\r\nRepro can be found in test commited to [this branch](https://github.com/ryzngard/roslyn/tree/repro/compiler_getremappedsymbols_debug_throw)\r\n\r\ncc @333fred ","Url":"https://github.com/dotnet/roslyn/issues/39427","RelatedDescription":"Open issue \"Debug exception hit in TryGetSpeculativeSemanticModel\" (#39427)"},{"Id":"510284221","IsPullRequest":false,"CreatedAt":"2019-10-21T20:49:46","Actor":"sandyarmstrong","Number":"39426","RawContent":null,"Title":"Allow user to restrict scope of namespace rename changes","State":"open","Body":"From https://developercommunity.visualstudio.com/content/problem/738117/renaming-namespace-changes-namespaces-in-irreleven.html (and see also https://github.com/dotnet/roslyn/issues/3583):\r\n\r\n> I have a xamarin forms solution with the following projects,\r\n> \r\n> * Demo\r\n> * Demo.Android\r\n> * Demo.iOS\r\n> \r\n> I changed the default namespace of Demo from options to Demo.UI, renamed the Demo csproj into Demo.UI, renamed the directory Demo to Demo.UI and updated the .sln file to access the Demo project (now Demo.UI).\r\n> \r\n> Then I tried renaming the namespace in App.xaml.cs from Demo to Demo.UI, by right clicking on Demo namespace and chosing Rename. But this changed namespaces in other projects as well.\r\n> \r\n> Ex: AppDelegate.cs in Demo.iOs’s namespace changed to “Demo.UI.iOS”","Url":"https://github.com/dotnet/roslyn/issues/39426","RelatedDescription":"Open issue \"Allow user to restrict scope of namespace rename changes\" (#39426)"},{"Id":"510280660","IsPullRequest":false,"CreatedAt":"2019-10-21T20:43:43","Actor":"tmat","Number":"39425","RawContent":null,"Title":"Compiler server test failed in CI (KeepAliveAfterSingleConnection)","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=395678\r\n\r\n```  Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerApiTest.KeepAliveAfterSingleConnection [STARTING]\r\nSystem.NullReferenceException: Referencia a objeto no establecida como instancia de un objeto.\r\n   en Microsoft.CodeAnalysis.CompilerServer.UnitTests.Extensions.<>c__DisplayClass0_0.<ToTask>b__0(Object _, Boolean timedOut) en /_/src/Compilers/Server/VBCSCompilerTests/Extensions.cs:línea 26\r\n   en System.Threading._ThreadPoolWaitOrTimerCallback.WaitOrTimerCallback_Context(Object state, Boolean timedOut)\r\n   en System.Threading._ThreadPoolWaitOrTimerCallback.WaitOrTimerCallback_Context_f(Object state)\r\n   en System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   en System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   en System.Threading._ThreadPoolWaitOrTimerCallback.PerformWaitOrTimerCallback(Object state, Boolean timedOut)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39425","RelatedDescription":"Open issue \"Compiler server test failed in CI (KeepAliveAfterSingleConnection)\" (#39425)"},{"Id":"509949067","IsPullRequest":false,"CreatedAt":"2019-10-21T19:58:20","Actor":"vsfeedback","Number":"39410","RawContent":null,"Title":"Dialog asking to rename the class has inverted buttons","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784920/dialog-asking-to-rename-the-class-has-inverted-but.html)._\n\n---\n[regression] [worked-in:not sure the version]\r\nWhen renaming a source file for a class in any C# project, Visual Studio asks to rename the type name as well.\nAttached you can find the picture of the dialog box asking to rename the file.\n\nDialog text:\n&quot;You are renaming a file. Would you also like to perform a rename in this project of all references to the code element 'Class1'?&quot;\n\nIf I press Yes, the rename operation is **NOT** done.\nIf I press No, the type is renamed.\nThe Yes and No actions are inverted.\n\nPlease restore the old, correct behavior\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/20/2019, 10:42 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39410","RelatedDescription":"Closed issue \"Dialog asking to rename the class has inverted buttons\" (#39410)"},{"Id":"510238146","IsPullRequest":false,"CreatedAt":"2019-10-21T19:39:17","Actor":"sharwell","Number":"39423","RawContent":null,"Title":"CS8603 code fix should support default expressions and literals","State":"open","Body":"**Version Used**: 16.4 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nstring Method1()\r\n{\r\n  return default(string);\r\n}\r\n\r\nstring Method2()\r\n{\r\n  return default;\r\n}\r\n```\r\n\r\nApply a code fix on each `return` statement.\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nstring? Method1()\r\n{\r\n  return default(string);\r\n}\r\n\r\nstring? Method2()\r\n{\r\n  return default;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nNo code fix is provided.\r\n","Url":"https://github.com/dotnet/roslyn/issues/39423","RelatedDescription":"Open issue \"CS8603 code fix should support default expressions and literals\" (#39423)"},{"Id":"510236733","IsPullRequest":false,"CreatedAt":"2019-10-21T19:37:07","Actor":"sharwell","Number":"39422","RawContent":null,"Title":"CS8603 code fix should support conditional access operator","State":"open","Body":"**Version Used**: 16.4 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nstring Method(bool? value)\r\n{\r\n  return value?.ToString();\r\n}\r\n```\r\n\r\nApply a code fix for CS8603 on the conditional operator.\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nstring? Method(bool? value)\r\n{\r\n  return value?.ToString();\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nNo code fix is provided.\r\n\r\n📝 The code fix should use a unique Equivalence Key for this situation.","Url":"https://github.com/dotnet/roslyn/issues/39422","RelatedDescription":"Open issue \"CS8603 code fix should support conditional access operator\" (#39422)"},{"Id":"510234218","IsPullRequest":false,"CreatedAt":"2019-10-21T19:34:04","Actor":"sharwell","Number":"39420","RawContent":null,"Title":"CS8603 code fix should support ternary expressions with explicit null","State":"open","Body":"**Version Used**: 16.4 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nstring Method(bool value) {\r\n  return value ? \"text\" : null;\r\n}\r\n```\r\n\r\nApply a code fix for CS8603 on the return statement.\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nstring? Method(bool value) {\r\n  return value ? \"text\" : null;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nNo code fix is provided.","Url":"https://github.com/dotnet/roslyn/issues/39420","RelatedDescription":"Open issue \"CS8603 code fix should support ternary expressions with explicit null\" (#39420)"},{"Id":"510196544","IsPullRequest":false,"CreatedAt":"2019-10-21T18:40:22","Actor":"RealDotNetDave","Number":"39418","RawContent":null,"Title":"Visualizing Deferred Execution Calls in Visual Studio 2019","State":"open","Body":"I’d like to see somehow visualized in VS,  show the user that the line of code is “deferred execution”. Of course, this is done a lot in LINQ queries and other calls like AsParallel on a collection.\r\n \r\nFor example, doing collection.AsParallel() in a loop doesn’t do anything unless something comes after it like ForAll(). The same sort of idea for LINQ queries too. I am thinking that analyzers might be able to help with this too.\r\n\r\nNot sure the best way to visualize this in Visual Studio 2019. Always willing to discuss.\r\n","Url":"https://github.com/dotnet/roslyn/issues/39418","RelatedDescription":"Open issue \"Visualizing Deferred Execution Calls in Visual Studio 2019\" (#39418)"},{"Id":"510183658","IsPullRequest":false,"CreatedAt":"2019-10-21T18:23:10","Actor":"skarllot","Number":"39417","RawContent":null,"Title":"CS8600: Should report on methods that returns ConfiguredTaskAwaitable","State":"open","Body":"**Version Used**: Visual Studio 2019 Version 16.3.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nstatic class TaskExtensions\r\n{\r\n    public static ConfiguredTaskAwaitable<TResult> NoSync<TResult>(this Task<TResult> task)\r\n    {\r\n        return task.ConfigureAwait(false);\r\n    }\r\n}\r\n\r\nclass Request\r\n{\r\n    public string? Name { get; }\r\n    public Task<string?> GetName() => Task.FromResult(Name);\r\n}\r\n\r\nclass Handler\r\n{\r\n    public async Task Handle(Request request)\r\n    {\r\n        string a = request.Name;    // <-- CS8600\r\n        string b = await request.GetName().ConfigureAwait(false);    // <-- CS8600\r\n        string c = await request.GetName().NoSync();    // <-- No warning here\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n`CS8600` to be reported when using `NoSync` method extension.\r\n\r\n**Actual Behavior**:\r\n`CS8600` is not reported when using `NoSync` method extension.","Url":"https://github.com/dotnet/roslyn/issues/39417","RelatedDescription":"Open issue \"CS8600: Should report on methods that returns ConfiguredTaskAwaitable\" (#39417)"},{"Id":"510140107","IsPullRequest":false,"CreatedAt":"2019-10-21T17:25:00","Actor":"tmat","Number":"39415","RawContent":null,"Title":"BrowserHelper.GetHelpLink output is non-deterministic","State":"open","Body":"We use a new GUID per AppDomain. If this is actually needed it needs to be tied to a client session, for example.","Url":"https://github.com/dotnet/roslyn/issues/39415","RelatedDescription":"Open issue \"BrowserHelper.GetHelpLink output is non-deterministic\" (#39415)"},{"Id":"510122459","IsPullRequest":false,"CreatedAt":"2019-10-21T17:01:22","Actor":"mikadumont","Number":"39414","RawContent":null,"Title":"EditorConfig user interface ","State":"open","Body":"**Goal**:\r\nCreate a user interface to eliminate tension when configuring analyzer rules. This should also work for third-party analyzer packages.\r\n\r\n**Current Behavior**:\r\n\r\n1. Can configure the severity level of an analyzer through an EditorConfig file:\r\n![image](https://user-images.githubusercontent.com/46729679/67224795-d9959f80-f3e6-11e9-9c75-67365d8004ac.png)\r\n\r\n2. Can configure the severity level of an analyzer through the editor and error list:\r\n![analyzer-severity](https://user-images.githubusercontent.com/46729679/67225134-81ab6880-f3e7-11e9-96f5-43f8ff82bc96.PNG)\r\n\r\n3. Can configure the severity level of an analyzer through Tools Options:\r\n![image](https://user-images.githubusercontent.com/46729679/67225663-7c9ae900-f3e8-11e9-865e-c7f16d2dbcea.png)\r\n\r\n**Issues with current options**:\r\n\r\n- It is difficult to configure naming conventions. \r\n\r\n- It is difficult to remember and understand the EditorConfig syntax.\r\n\r\n- The current tools options UI is only for code style / IDE analyzers and should have one UI for every type of analyzer.\r\n\r\n- The current tools options UI is hard to use without a search bar. \r\n\r\n- The current tools options UI has to be manually updated each time a new analyzer is created. \r\n\r\n**Expected Behavior**:\r\n\r\nHave a dynamic EditorConfig settings UI similar to [VS Code’s Settings UI](https://code.visualstudio.com/docs/getstarted/settings):\r\n![image](https://user-images.githubusercontent.com/46729679/67225850-c5eb3880-f3e8-11e9-93ec-29824ef4db46.png)\r\n\r\nThe EditorConfig settings UI should work for third party analyzers:\r\nVS Code already supports this with extensions in their settings UI page by using [contribution points](https://code.visualstudio.com/api/references/contribution-points#contributes.commands). ","Url":"https://github.com/dotnet/roslyn/issues/39414","RelatedDescription":"Open issue \"EditorConfig user interface \" (#39414)"},{"Id":"510006584","IsPullRequest":true,"CreatedAt":"2019-10-21T16:23:14","Actor":"hraverkar","Number":"39412","RawContent":null,"Title":"Release/dev16.5 preview1","State":"closed","Body":"NA","Url":"https://github.com/dotnet/roslyn/pull/39412","RelatedDescription":"Closed or merged PR \"Release/dev16.5 preview1\" (#39412)"},{"Id":"510068447","IsPullRequest":false,"CreatedAt":"2019-10-21T15:49:02","Actor":"ondrejspilka","Number":"39413","RawContent":null,"Title":"Using dynamic on macOS .NET Core 3 results in CS0656 Missing compiler required member ","State":"open","Body":"**Version Used**: \r\nVS4MAC\r\nLatest .NET 3.0, 3.3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create compilation passing dynamic as a parameter\r\n``` C#\r\nprivate string generateCalculatorClass(string className, string formula)\r\n        {\r\n            var calculator = @$\"\r\n                using DatasetCalcul;\r\n                using System.Runtime;\r\n                using System.Dynamic;\r\n                using System.Collections.Generic;\r\n                namespace DatasetCalcul\r\n                {{\r\n                    public  class {className}\r\n                    {{\r\n                        public void Perform(dynamic _)\r\n                        {{\r\n                            {formula}\r\n                        }}\r\n                    }}\r\n                }}\";\r\n            return calculator;\r\n        }\r\n``` \r\n2. \r\nCompile like this for example...\r\n``` C#\r\n        private void CreateCompilation()\r\n        {\r\n            var syntaxTree = CSharpSyntaxTree.ParseText(_generatedCode,\r\n                CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp8)\r\n                .WithKind(SourceCodeKind.Regular));\r\n            string assemblyName = Guid.NewGuid().ToString();\r\n            var references = GetAssemblyReferences();\r\n            var compilation = CSharpCompilation.Create(\r\n                assemblyName,\r\n                new[] { syntaxTree },\r\n                references,\r\n                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));\r\n            _compilation = compilation;\r\n        }\r\n\r\n        private static IEnumerable<MetadataReference> GetAssemblyReferences()\r\n        {\r\n            var references = new MetadataReference[]\r\n            {\r\n                MetadataReference.CreateFromFile(typeof(object).GetTypeInfo().Assembly.Location),\r\n                MetadataReference.CreateFromFile(typeof(Object).GetTypeInfo().Assembly.Location),\r\n                MetadataReference.CreateFromFile(typeof(ExpandoObject).GetTypeInfo().Assembly.Location),\r\n                MetadataReference.CreateFromFile(typeof(Dictionary<string,object>).GetTypeInfo().Assembly.Location),\r\n                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName(\"Microsoft.CSharp\")).Location)\r\n                // A bit hacky, if you need it\r\n                //MetadataReference.CreateFromFile(Path.Combine(typeof(object).GetTypeInfo().Assembly.Location, \"..\", \"mscorlib.dll\")),\r\n            };\r\n            return references;\r\n        }\r\n\r\n        private void CompileAndLoadAssembly()\r\n        {\r\n            using (var ms = new MemoryStream())\r\n            {\r\n                var result = _compilation.Emit(ms);\r\n                ThrowExceptionIfCompilationFailure(result);\r\n                ms.Seek(0, SeekOrigin.Begin);\r\n                var assembly = System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromStream(ms);\r\n                _generatedAssembly = assembly;\r\n            }\r\n        }\r\n```\r\n3. Emit the compilation\r\n``` C#\r\n        public async Task<object> AddColumn(object instance, string name, string formula)\r\n        {\r\n\r\n            GenerateCode(name, formula);\r\n            CreateCompilation();\r\n            CompileAndLoadAssembly();\r\n\r\n            var calculatorType = _generatedAssembly.GetType($\"DatasetCalcul.{name}\");\r\n            var calculatorInstance = Activator.CreateInstance(calculatorType);\r\n            var calculateMethod = calculatorType.GetTypeInfo().GetDeclaredMethod(\"Perform\");\r\n            var calculationResult = calculateMethod.Invoke(calculatorInstance, new object[] { instance });\r\n            return instance;\r\n\r\n        }\r\n```\r\n\r\n\r\n**Expected Behavior**:\r\nModification of passed dpyamic object instance.\r\n\r\n**Actual Behavior**:\r\nCS0656: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo.Create\r\n","Url":"https://github.com/dotnet/roslyn/issues/39413","RelatedDescription":"Open issue \"Using dynamic on macOS .NET Core 3 results in CS0656 Missing compiler required member \" (#39413)"},{"Id":"509993399","IsPullRequest":false,"CreatedAt":"2019-10-21T14:17:32","Actor":"vsfeedback","Number":"39411","RawContent":null,"Title":"Incorrect concatenation of localized string fragments","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/603108/incomprehensible-warning-german.html)._\n\n---\nI know that the localisation quality of Visual Studio is constantly decreasing. Now it sometimes reaches the point of total incomprehensibility (does that word exist?).\n\nThe warning in German reads &quot;Erwartete Aufgabe wird zurückgegeben kein Wert.&quot; See attached screenshot.\n\nWhat is that warning trying to tell me? I don't get it.\n\nIf I try to translate this broken sentence into English, it might sound something like &quot;Expected task is being returned, no value.&quot; Do you know what that means?\n\nPlease tell your localisation team to do some work. And no, any kind of contextless automatic machine translation is the worst you can do. Really really bad. Machines don't have a clue what they're doing, but they're very certain about it!\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 6/12/2019, 02:03 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 6/12/2019, 02:20 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Visual Studio Feedback System on 8/7/2019, 02:35 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39411","RelatedDescription":"Open issue \"Incorrect concatenation of localized string fragments\" (#39411)"},{"Id":"509897932","IsPullRequest":false,"CreatedAt":"2019-10-21T11:19:53","Actor":"yahorsi","Number":"39409","RawContent":null,"Title":"Question/Suggestion: Optimize nullable bool & if check","State":"open","Body":"Hi Guys,\r\n\r\nI was surprised to see that when we have bool? and need to check if it's true in if statement then doing it using just like:\r\n```csharp\r\nif (v == true)\r\n{\r\n}\r\n```\r\nworks way slower than if we would explicitly do\r\n```csharp\r\nif (v.GetValueorDefault())\r\n{\r\n}\r\n```\r\n\r\n\r\nIn the first case, when we call it like if (v == true) I see compiler emits an unnecessary call to the HasValue\r\n```csharp\r\n        bool? flag = v;\r\n        bool flag2 = true;\r\n        if ((flag.GetValueOrDefault() == flag2) & flag.HasValue)\r\n        {\r\n        }\r\n```\r\n\r\nIs that something expected and made on purpose?\r\nHere is a link to the SharpLab to demonstrate the difference in the generated assembler.\r\n\r\n\r\nhttps://sharplab.io/#v2:C4LghgzgtgPgAgBgAQGUAWYBOAHAMmAIwDoAlAVwDtgBLKAUwG4BYAKDgCYBGV1uTgNiQckAYSQBvVkmlCBQgCxIAZggAUBAPYaANgH4kANwCUUmZJYzLSakqSqDRAOJ1gANTDaydAPKYAInRKYGTawKpGJhZW0ubR0XwAnKoARIQAxslGzFHRAL6m0vksBbKCcIpKnOpaeoaRlrFxNnYGSAC8bUjAmF71cY1xMokp6ZnZg0WWRblAA=\r\n","Url":"https://github.com/dotnet/roslyn/issues/39409","RelatedDescription":"Open issue \"Question/Suggestion: Optimize nullable bool & if check\" (#39409)"},{"Id":"510254783","IsPullRequest":false,"CreatedAt":"2019-10-14T01:03:54","Actor":"johnknoop","Number":"39424","RawContent":null,"Title":"Possible bug in the flow analysis of nullable reference types","State":"open","Body":"I've just enabled the new nullable reference types feature.\r\n\r\nIn this example, `myObj` is nullable. But shouldn't the compiler understand that myObj won't be null in this case, since I'm testing for it in the if clause?\r\n\r\n![image](https://user-images.githubusercontent.com/3394270/66725159-cc007880-ee2e-11e9-8720-04b72fd709b0.png)\r\n\r\nI'm using .NET Core 3.0 in VS 2019.","Url":"https://github.com/dotnet/roslyn/issues/39424","RelatedDescription":"Open issue \"Possible bug in the flow analysis of nullable reference types\" (#39424)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"509929616","IsPullRequest":false,"CreatedAt":"2019-10-22T05:20:51","Actor":"DardoTheMaster","Number":"7832","RawContent":null,"Title":"Unable to compile on Ubuntu 18.04 (WSL)","State":"closed","Body":"Hello, i'm just trying out to build a shared library from a dotnet project.\r\nUnfortunately i'm getting this error and i'm unable to build the underlined project.\r\n\r\n```\r\n$ dotnet publish /p:NativeLib=Shared -r linux-x64\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  Restore completed in 63.25 ms for /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj.\r\n/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj : warning NU1603: NativeLibrary depends on Microsoft.DotNet.ILCompiler (>= 1.0.0-alpha-27527-01) but Microsoft.DotNet.ILCompiler 1.0.0-alpha-27527-01 was not found. An approximate best match of Microsoft.DotNet.ILCompiler 1.0.0-alpha-27606-05 was resolved.\r\n  NativeLibrary -> /mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/bin/Debug/netcoreapp3.0/linux-x64/NativeLibrary.dll\r\n  /usr/bin/clang-6.0\r\n  Generating native code\r\nclang : warning : argument unused during compilation: '-exported_symbols_list obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports' [-Wunused-command-line-argument] [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n  /usr/bin/ld: obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o: relocation R_X86_64_PC32 against symbol `System_Console_System_Text_StringOrCharArray____GetFieldHelper' can not be used when making a shared object; recompile with -fPIC\r\n  /usr/bin/ld: final link failed: Bad value\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\n/home/dardo/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang-6.0 \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.o\" -o \"bin/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.so\" -exported_symbols_list \"obj/Debug/netcoreapp3.0/linux-x64/native/NativeLibrary.exports\" /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libbootstrapperdll.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libRuntime.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.CoreLib.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/sdk/libSystem.Private.TypeLoader.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Globalization.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.IO.Compression.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Net.Security.Native.a /home/dardo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27606-05/framework/System.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt -shared\" exited with code 1. [/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary/NativeLibrary.csproj]\r\ndardo@LAPTOP-TQ8D057I:/mnt/c/Users/Dardo/OneDrive/Progetti/DotNet/CoreRTDemo/NativeLibrary$\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7832","RelatedDescription":"Closed issue \"Unable to compile on Ubuntu 18.04 (WSL)\" (#7832)"},{"Id":"510326059","IsPullRequest":true,"CreatedAt":"2019-10-22T02:26:35","Actor":"Dotnet-GitSync-Bot","Number":"7833","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @eriawan @danmosemsft @AaronRobinsonMSFT @stephentoub @GrabYourPitchforks @delmyers @benaadams @tannergooding","Url":"https://github.com/dotnet/corert/pull/7833","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7833)"},{"Id":"509511071","IsPullRequest":true,"CreatedAt":"2019-10-20T14:04:45","Actor":"MichalStrehovsky","Number":"7830","RawContent":null,"Title":"Add AppContext switch to not throw for Type.Name","State":"closed","Body":"Makes simple WinForms apps work in reflection-free mode without crashing.\r\n\r\nhttps://github.com/dotnet/winforms/blob/5df2ebfe70f2eaa2733c7f21e7e9e20f0be7e766/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L4013","Url":"https://github.com/dotnet/corert/pull/7830","RelatedDescription":"Closed or merged PR \"Add AppContext switch to not throw for Type.Name\" (#7830)"},{"Id":"509511141","IsPullRequest":true,"CreatedAt":"2019-10-20T14:04:12","Actor":"MichalStrehovsky","Number":"7831","RawContent":null,"Title":"Scan for Marshal.SizeOf in reflection-disabled mode","State":"closed","Body":"I tacked scanning for `Marshal.SizeOf(typeof(SomeType))` on the reflection method body scanner. It felt a bit dirty, but it worked and we no longer had to worry about not having interop marshalling data for these types at runtime if we saw the pattern at compile time.\r\n\r\nBut we would like to scan for this even in the reflection disabled mode, which makes this whole business a bit messier.\r\n\r\nWe'll probably want to plug this into the RyuJIT scanner at some point, but we'll need to think about scanning some more (whether scanning is just an optimization, or whether scanning is needed for correctness, how/whether would RyuJIT report parameters, etc.).","Url":"https://github.com/dotnet/corert/pull/7831","RelatedDescription":"Closed or merged PR \"Scan for Marshal.SizeOf in reflection-disabled mode\" (#7831)"},{"Id":"509445042","IsPullRequest":true,"CreatedAt":"2019-10-20T02:03:38","Actor":"filipnavara","Number":"7828","RawContent":null,"Title":"Move portable thread pool to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7828","RelatedDescription":"Closed or merged PR \"Move portable thread pool to shared partition\" (#7828)"},{"Id":"509508420","IsPullRequest":false,"CreatedAt":"2019-10-19T20:52:49","Actor":"jkotas","Number":"7829","RawContent":null,"Title":"Compilation crashes with System.IndexOutOfRangeException","State":"open","Body":"```\r\n  Unhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n     at Internal.IL.Stubs.ILStubMethodIL.GetObject(Int32 token) in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\Stubs\\ILEmitter.cs:line 550\r\n     at Internal.IL.ILStackHelper.ComputeMaxStack(MethodIL methodIL) in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\ILStackHelper.cs:line 290\r\n     at Internal.IL.Stubs.ILStubMethodIL.get_MaxStack() in F:\\workspace\\_work\\1\\s\\src\\Common\\src\\TypeSystem\\IL\\Stubs\\ILEmitter.cs:line 527\r\n     at Internal.JitInterface.CorInfoImpl.Get_CORINFO_METHOD_INFO(MethodDesc method, MethodIL methodIL, CORINFO_METHOD_INFO* methodInfo) in F:\\workspace\\_work\\1\\s\\src\\JitInterface\\src\\CorInfoImpl.cs:line 413\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL) in F:\\workspace\\_work\\1\\s\\src\\JitInterface\\src\\CorInfoImpl.cs:line 154\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode) in F:\\workspace\\_work\\1\\s\\src\\ILCompiler.RyuJit\\src\\Compiler\\RyuJitCompilation.cs:line 139\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```","Url":"https://github.com/dotnet/corert/issues/7829","RelatedDescription":"Open issue \"Compilation crashes with System.IndexOutOfRangeException\" (#7829)"},{"Id":"508346108","IsPullRequest":true,"CreatedAt":"2019-10-17T18:57:35","Actor":"filipnavara","Number":"7825","RawContent":null,"Title":"Clean up portable thread pool for nullability and comment warnings","State":"closed","Body":"Also, use `EventWaitHandle.Set` instead of `WaitSubsystem.SetEvent`/`Interop.Kernel32.SetEvent` to make it easier to port.","Url":"https://github.com/dotnet/corert/pull/7825","RelatedDescription":"Closed or merged PR \"Clean up portable thread pool for nullability and comment warnings\" (#7825)"},{"Id":"508509256","IsPullRequest":false,"CreatedAt":"2019-10-17T14:18:24","Actor":"Const-me","Number":"7827","RawContent":null,"Title":"ARM32 Debug Info","State":"open","Body":"Unless ILC debug output is disabled in .csproj, CoreRT’s ilc program fails to compile stuff.\r\n\r\n[This assert fails.](https://github.com/dotnet/corert/blob/master/src/Native/ObjWriter/debugInfo/dwarf/dwarfGen.cpp#L436)\r\n\r\nI’ve added a bit more info and found out it’s VLT_FPSTK.\r\n\r\nUsing Debian 9.5, tried dotnet-sdk-2.1.802 and dotnet-sdk-2.2.402, same result.\r\n\r\nSteps to reproduce:\r\n\r\n`dotnet new console`\r\n\r\nPatch project file as [described there](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built) and also add `<DisableUnsupportedError>true</DisableUnsupportedError>`\r\n\r\nRun `dotnet publish --configuration Release --runtime linux-arm`\r\n\r\nNative stack at the time of failed assert. Stops at first managed frame ‘coz gdb can’t debug .NET, at least not by default.\r\n\r\n```\r\n#6  0xa352510c in EmitVarLocation(llvm::MCObjectStreamer*, ICorDebugInfo::NativeVarInfo const&, bool)\r\n#7  0xa3525ab2 in VarInfo::DumpLocsIfNeeded(llvm::MCObjectStreamer*, llvm::MCSection*, llvm::MCExpr const*)\r\n#8  0xa35260be in SubprogramInfo::DumpDebugLoc(llvm::MCObjectStreamer*, llvm::MCSection*)\r\n#9  0xa3525e3c in SubprogramInfo::Dump(UserDefinedDwarfTypesBuilder*, llvm::MCObjectStreamer*, llvm::MCSection*, llvm::MCSection*, llvm::MCSection*)\r\n#10 0xa3526b36 in DwarfGen::Finish()\r\n#11 0xa3501804 in ObjectWriter::EmitDebugModuleInfo()\r\n#12 0xa34fd5f0 in EmitDebugModuleInfo\r\ngdb can’t debug .net so the stack trace stops there.\r\n#13 0xa7bbe1ac in ?? ()\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n```\r\n\r\nStrangely enough, comments in ObjectWriter.EmitObject method, there\r\nhttps://github.com/dotnet/corert/blob/8153381fb8f3cf0ef627011fe2fe87fb4a857540/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/ObjectWriter.cs#L1044\r\nand a few other things\r\nhttps://github.com/dotnet/corert/blob/8153381fb8f3cf0ef627011fe2fe87fb4a857540/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/ObjectWriter.cs#L1094-L1095\r\nsuggest that code was running on ARM32 at some point.\r\n\r\nIs something wrong on my side? If it’s just not supported, how easy it is to support?","Url":"https://github.com/dotnet/corert/issues/7827","RelatedDescription":"Open issue \"ARM32 Debug Info\" (#7827)"},{"Id":"508505637","IsPullRequest":false,"CreatedAt":"2019-10-17T14:13:06","Actor":"Const-me","Number":"7826","RawContent":null,"Title":"ARM32 crash at startup due to misalignment","State":"open","Body":"Here’s output from gdb:\r\n```\r\nThread 1 \"MyApp\" received signal SIGBUS, Bus error.\r\nRhpLockCmpXchg64 () at /home/linaro/corert/src/Native/Runtime/arm/Interlocked.S:47\r\n47                cmp          r6, r4\r\n(gdb) bt\r\n#0  RhpLockCmpXchg64 () at /home/linaro/corert/src/Native/Runtime/arm/Interlocked.S:47\r\n#1  0x0049c5ee in S_P_CoreLib_System_IO_UnmanagedMemoryStream__get_PositionPointer ()\r\n```\r\ngdb probably has off by 1 bug, I think it’s the [previous instruction](https://github.com/dotnet/corert/blob/master/src/Native/Runtime/arm/Interlocked.S#L46) which crashed the app.\r\n\r\nThe failing line of C# code is probably this https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/IO/UnmanagedMemoryStream.cs#L329 but I’m not 100% sure, as there’s no debug information in the binary due to another CoreRT ARM32 bug.\r\n\r\nI wasn’t able to make minimal repro, when I wrote a class with a long field, Interlocked.Read(ref long) returned the value without crashing. Probably clang optimizes away.\r\n\r\nAny idea how to fix or workaround?","Url":"https://github.com/dotnet/corert/issues/7826","RelatedDescription":"Open issue \"ARM32 crash at startup due to misalignment\" (#7826)"},{"Id":"506685516","IsPullRequest":false,"CreatedAt":"2019-10-14T20:24:48","Actor":"imback82","Number":"7824","RawContent":null,"Title":"Debugger.Launch() on macOS","State":"closed","Body":"Is `Debugger.Launch()` supported on macOS? I tested on macOS 10.15 with .NET Core 3.0.100 and it doesn't appear to work.\r\n\r\nIf it is not supported, is there a plan to support?\r\n\r\nThanks!\r\n\r\ncc: @rapoth\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7824","RelatedDescription":"Closed issue \"Debugger.Launch() on macOS\" (#7824)"},{"Id":"506047436","IsPullRequest":true,"CreatedAt":"2019-10-12T15:06:11","Actor":"Dotnet-GitSync-Bot","Number":"7823","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7823","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7823)"},{"Id":"505621245","IsPullRequest":true,"CreatedAt":"2019-10-11T08:45:30","Actor":"Dotnet-GitSync-Bot","Number":"7822","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7822)"},{"Id":"504527034","IsPullRequest":true,"CreatedAt":"2019-10-09T12:42:07","Actor":"MichalStrehovsky","Number":"7821","RawContent":null,"Title":"Delete unused method","State":"closed","Body":"Supplements #7819.","Url":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Closed or merged PR \"Delete unused method\" (#7821)"},{"Id":"504357120","IsPullRequest":true,"CreatedAt":"2019-10-09T09:28:10","Actor":"Dotnet-GitSync-Bot","Number":"7820","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7820)"},{"Id":"504158790","IsPullRequest":true,"CreatedAt":"2019-10-09T09:27:34","Actor":"am11","Number":"7818","RawContent":null,"Title":"Fix exit code of build-native.sh","State":"closed","Body":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive).","Url":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Closed or merged PR \"Fix exit code of build-native.sh\" (#7818)"},{"Id":"504330608","IsPullRequest":true,"CreatedAt":"2019-10-09T01:16:45","Actor":"Dotnet-GitSync-Bot","Number":"7819","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7819)"},{"Id":"503784732","IsPullRequest":false,"CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Number":"7817","RawContent":null,"Title":"Call generated dll from cpp crash","State":"open","Body":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```","Url":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Open issue \"Call generated dll from cpp crash\" (#7817)"},{"Id":"503304688","IsPullRequest":false,"CreatedAt":"2019-10-07T08:30:51","Actor":"yunekit","Number":"7816","RawContent":null,"Title":"sched_yield infinite loop","State":"open","Body":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work.","Url":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Open issue \"sched_yield infinite loop\" (#7816)"},{"Id":"503145779","IsPullRequest":true,"CreatedAt":"2019-10-06T21:09:25","Actor":"Dotnet-GitSync-Bot","Number":"7815","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7815)"},{"Id":"503134823","IsPullRequest":true,"CreatedAt":"2019-10-06T19:30:50","Actor":"MichalStrehovsky","Number":"7814","RawContent":null,"Title":"Add support for multithreaded compilation to ILC","State":"closed","Body":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff).","Url":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Closed or merged PR \"Add support for multithreaded compilation to ILC\" (#7814)"},{"Id":"502963591","IsPullRequest":true,"CreatedAt":"2019-10-06T04:53:29","Actor":"MichalStrehovsky","Number":"7811","RawContent":null,"Title":"Port fixes from CoreCLR","State":"closed","Body":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793.","Url":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Closed or merged PR \"Port fixes from CoreCLR\" (#7811)"},{"Id":"502974204","IsPullRequest":true,"CreatedAt":"2019-10-05T16:06:41","Actor":"MichalStrehovsky","Number":"7812","RawContent":null,"Title":"Remove global state tracking in DynamicInvokeTemplateDataNode","State":"closed","Body":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable.","Url":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Closed or merged PR \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812)"},{"Id":"502974267","IsPullRequest":true,"CreatedAt":"2019-10-05T16:04:50","Actor":"MichalStrehovsky","Number":"7813","RawContent":null,"Title":"Cache helpers used in IL scanner","State":"closed","Body":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler.","Url":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Closed or merged PR \"Cache helpers used in IL scanner\" (#7813)"},{"Id":"502935521","IsPullRequest":true,"CreatedAt":"2019-10-05T12:47:51","Actor":"MichalStrehovsky","Number":"7810","RawContent":null,"Title":"Update ObjWriter","State":"closed","Body":"Picks up #7802.","Url":"https://github.com/dotnet/corert/pull/7810","RelatedDescription":"Closed or merged PR \"Update ObjWriter\" (#7810)"},{"Id":"502780858","IsPullRequest":true,"CreatedAt":"2019-10-05T06:01:27","Actor":"Dotnet-GitSync-Bot","Number":"7809","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @idlerboris @stephentoub","Url":"https://github.com/dotnet/corert/pull/7809","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7809)"},{"Id":"502527358","IsPullRequest":false,"CreatedAt":"2019-10-04T12:27:49","Actor":"kstreichergb","Number":"7808","RawContent":null,"Title":"dotnet.exe hangs during shutdown","State":"closed","Body":"A hosted application using `BackgroundService` is hanging infinetly on shutdown, in particular when the console application is killed with ctrl+z.\r\n\r\nThe \"finish\" log in the finally in Main will be seen, but the dotnet.exe process keeps running\r\n\r\n```\r\npublic class BaseBackgroundService: BackgroundService{\r\n  private readonly IHostLifetime _hostLifetime;\r\n  private readonly IHostApplicationLifetime _iHostApplicationLifetime;\r\n  \r\n  public BaseBackgroundService(IHostLifetime hostLifetime,\r\n\t\t                             IHostApplicationLifetime iHostApplicationLifetime){\r\n    _hostLifetime = hostLifetime;\r\n    _iHostApplicationLifetime = iHostApplicationLifetime;\r\n }\r\n\r\n  protected override async Task ExecuteAsync(CancellationToken ct)\r\n  {\r\n  try{\r\n        await DoSomething();\r\n  }catch(OperationCanceledException ex)\r\n{\r\n /** ... Reached on CTRL+Z .... **/\r\n}\r\nfinally{\r\n       _iHostApplicationLifetime.StopApplication();\r\n        await _hostLifetime.StopAsync(ct); // clean exit\r\n  \tConsole.WriteLine(\"Completes as expected\");    \r\n  }\r\n/*...*/\r\n}\r\n\r\n```\r\n\tProgram.cs \r\n\tpublic static async Task Main(string[] args){\r\n\ttry\r\n\t{\r\n\t\tIHostBuilder hostBuilder = CreateHostBuilder(args);\r\n\r\n\t\tusing (IHost host = hostBuilder.UseConsoleLifetime().Build())\r\n\t\t{\r\n\t\t\tawait host.RunAsync();\r\n\t\t}\r\n\t}\r\n\t}finally{\r\n\t\tConsole.WriteLine(\"Finished - will be seen. Therefore main exits, but dotnet.exe keeps running\");\r\n\t}\r\n\t}\r\n```\r\n\r\nThe hosted BackgroundService will finish (OperationCanceledException) but the host.RunAsync() will never finish.\r\n\r\nUsing visual and break all\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66196903-9ecb0200-e699-11e9-812f-d3773be75aa4.png)\r\n\r\nAnd repeating it shows the Task ID changes, but the structure remains the same\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66197013-cf12a080-e699-11e9-8529-6ee9df7266ee.png)","Url":"https://github.com/dotnet/corert/issues/7808","RelatedDescription":"Closed issue \"dotnet.exe hangs during shutdown\" (#7808)"},{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"510344503","IsPullRequest":false,"CreatedAt":"2019-10-21T23:08:32","Actor":"wli3","Number":"3768","RawContent":null,"Title":"Cannot build on ubuntu 18.04","State":"open","Body":"Should disable downloading 1.x runtime on later distros","Url":"https://github.com/dotnet/sdk/issues/3768","RelatedDescription":"Open issue \"Cannot build on ubuntu 18.04\" (#3768)"},{"Id":"509239619","IsPullRequest":false,"CreatedAt":"2019-10-21T21:17:54","Actor":"pinkfloydx33","Number":"3765","RawContent":null,"Title":"PublishSingleFile=true does not include Content files","State":"closed","Body":"I am working with a (non-web) .NET Core 3.0 console application and I am trying to use `PublishSingleFile=true`. While the single-file aspect does indeed work (I get one executable file), my application always crashes due to missing appsettings.json files. I've tried setting the files to Content/None, Copy Always/Newest. I also tried adding `<CopyToPublishDirectory>true</CopyToPublishDirectory>` and yet nothing seems to work.\r\n\r\nIf I create a brand new fresh _Web_-SDK project, the single file publish works and the content files are dropped right next to the published executable. I tried comparing the starter web project to my console application and I don't see a difference.  \r\n\r\nThe easiest reproduction I have is to create a blank console application project, add a text file to the project (as content or `none`) and then publish with the PublishSingleFile=true. The output does not contain the content files. \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"MyContentFile.txt\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n      <CopyToPublishDirectory>Always</CopyToPublishDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIs this supposed to work for non-Web projects?\r\n\r\n> .NET Core SDK (reflecting any global.json):\r\n>  Version:   3.0.100\r\n>  Commit:    04339c3a26\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.18362\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 3.0.0\r\n>   Commit:  95a0a61858\r\n> \r\n> .NET Core SDKs installed:\r\n>   3.0.100-rc1-014190 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]","Url":"https://github.com/dotnet/sdk/issues/3765","RelatedDescription":"Closed issue \"PublishSingleFile=true does not include Content files\" (#3765)"},{"Id":"508725481","IsPullRequest":false,"CreatedAt":"2019-10-20T16:55:20","Actor":"pranavkm","Number":"3762","RawContent":null,"Title":"The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized","State":"closed","Body":"_From @DataTables on Thursday, October 17, 2019 10:16:11 AM_\r\n\r\n### Describe the bug\r\n\r\nWhen adding .NET Core 3.0 to a multi-targeted project I'm getting the error:\r\n\r\n> error NETSDK1073: The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\r\n\r\nI've followed the [porting guide here](https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-2.2&tabs=visual-studio) but have been unable to resolve the issue. It looks like this also also been raised in [other issues](https://github.com/aspnet/AspNetCore/issues/4490), but the indications there are that this was an issue during the previews and should now be resolved.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1) Clone into [this repo](https://github.com/DataTables/Editor-NET) which is the one I'm trying to add .NET Core 3.0 build support to.\r\n2) Update the DataTables-Editor-Server.csproj file to target .NET Core 3.0:\r\n\r\n```\r\n<TargetFrameworks>netcoreapp2.1;netcoreapp3.0;net45;net46;net47</TargetFrameworks>\r\n```\r\n\r\nand add:\r\n\r\n```\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netcoreapp3.0'\">\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.CSharp\">\r\n      <Version>4.6.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n```\r\n\r\n3) Run `msbuild DataTables.sln` - observe errors for .NET Core 3.0 build.\r\n\r\nThe [documentation here](https://docs.microsoft.com/en-gb/dotnet/core/tools/csproj#implicit-package-references) notes that `Microsoft.AspNetCore.App\"` is implicit and doesn't need to be included, but the migration guide says it should if the SDK is `Microsoft.NET.Sdk` which I've been using.\r\n\r\n### Expected behavior\r\ndll targeting .NET Core 3.0 will be build along with the others.\r\n\r\n### Additional context\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  27\r\n OS Platform: Linux\r\n RID:         fedora.27-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  95a0a61858\r\n\r\n.NET Core SDKs installed:\r\n  2.1.505 [/usr/share/dotnet/sdk]\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nInstallation for .NET Core (and Framework via mono) build in Fedora was:\r\n\r\n```\r\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\r\nwget -q https://packages.microsoft.com/config/fedora/27/prod.repo\r\nsudo mv prod.repo /etc/yum.repos.d/microsoft-prod.repo\r\nsudo chown root:root /etc/yum.repos.d/microsoft-prod.repo\r\n\r\nsudo dnf install -y aspnetcore-runtime-2.1\r\nsudo dnf install -y dotnet-sdk-2.1-2.1.505\r\n\r\nsudo dnf install -y aspnetcore-runtime-3.0\r\nsudo dnf install -y dotnet-sdk-3.0\r\n\r\n# .NET Framework via Mono\r\nsudo rpm --import \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\"\r\nsudo curl https://download.mono-project.com/repo/centos7-stable.repo | sudo tee /etc/yum.repos.d/mono-centos7-stable.repo\r\nsudo dnf install -y mono-devel mono-complete xsp msbuild\r\n```\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#15107_","Url":"https://github.com/dotnet/sdk/issues/3762","RelatedDescription":"Closed issue \"The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\" (#3762)"},{"Id":"509441010","IsPullRequest":true,"CreatedAt":"2019-10-19T12:04:57","Actor":"dotnet-bot","Number":"3767","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3767","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3767)"},{"Id":"507542154","IsPullRequest":true,"CreatedAt":"2019-10-19T00:38:48","Actor":"dotnet-bot","Number":"3755","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3755","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3755)"},{"Id":"508065740","IsPullRequest":true,"CreatedAt":"2019-10-19T00:33:49","Actor":"swaroop-sridhar","Number":"3759","RawContent":null,"Title":"Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"closed","Body":"Trying to publish a `.net core 2.1` app as a single file fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n\r\nPublishing apps as a single file is only supported in `.net core 3` and higher.\r\nSo, this change adds a version check in the SDK.\r\n\r\nSimilarly, the check is also added for the `PublishReadyToRun` and `PublishTrimmed` options.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/3728","Url":"https://github.com/dotnet/sdk/pull/3759","RelatedDescription":"Closed or merged PR \"Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#3759)"},{"Id":"509364106","IsPullRequest":true,"CreatedAt":"2019-10-19T00:32:13","Actor":"swaroop-sridhar","Number":"3766","RawContent":null,"Title":"[release/3.1.1xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"open","Body":"The options `PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` are only supported when targetting netcoreapp3.0 or later.\r\n\r\nTrying to publish to a different target (say `.netcoreapp2.1`) today:\r\n* `PublishSingleFile` fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n* `PublishReadyToRun` and `PublishTrimmed` silently fail to turn on, but the `publish` itself suceeds.\r\n\r\nThis change adds an explicit TFM check to generate error/warnings for non-conforming targets.\r\n\r\n`PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` require the following conditions to be true:\r\n* `TargetFramework` is `netcoreapp`\r\n* `TargetFrameworkVersion` is at least `3.0`\r\n* The app is an executable (`OutputType=exe`)\r\n\r\nIf any of the conditions fail:\r\n* `PublishSingleFile` fails with an appropriate error\r\n* `PublishReadyToRun` and `PublishTrimmed` issue warnings, but publish itself succeeds.\r\n  This is because:\r\n    * The restriction against `classlibs` / `netstandard` frameworks may be relaxed in future releases\r\n    * The version check should ideally be a failure, but they are warnings for maximum compatibility with `3.0` release.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/3728","Url":"https://github.com/dotnet/sdk/pull/3766","RelatedDescription":"Open PR \"[release/3.1.1xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#3766)"},{"Id":"507479665","IsPullRequest":true,"CreatedAt":"2019-10-18T00:03:29","Actor":"vijayrkn","Number":"3752","RawContent":null,"Title":"Set the default publish profile only if the profile is not imported by NetSdk","State":"closed","Body":"Issue:\r\nWhen an SDK based WebJobs project is published without a profile, publish fails with missing Profile named 'FileSystem'.\r\n\r\nThis is because the default filesyste profile is shipped in WebSdk but is set in NetSdk.\r\n\r\nFix: Is to not default the publish profile to 'FileSystem' in NetSdk since NetSdk does not ship this default profile.\r\n\r\nImpact:\r\nThis breaks the Sdk based WebJobs publish scenarios.\r\n\r\nThere are 2 parts to this fix:\r\n\r\nRemoving the default publish profile from Netsdk\r\nIf the profile is not imported by NetSdk, setting the default publish profile in WebSdk & importing the default profile. This is the websdk part of the fix - aspnet/websdk#1006","Url":"https://github.com/dotnet/sdk/pull/3752","RelatedDescription":"Closed or merged PR \"Set the default publish profile only if the profile is not imported by NetSdk\" (#3752)"},{"Id":"508759665","IsPullRequest":true,"CreatedAt":"2019-10-17T22:50:12","Actor":"dotnet-maestro[bot]","Number":"3764","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191021.13\r\n- **Date Produced**: 10/22/2019 2:35 AM\r\n- **Commit**: 93b469074cd73445634feeb0032f7fcb75ef4bfb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19521.13\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3764","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3764)"},{"Id":"508207404","IsPullRequest":true,"CreatedAt":"2019-10-17T22:28:28","Actor":"dotnet-maestro[bot]","Number":"3761","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191017.4\r\n- **Date Produced**: 10/17/2019 6:49 PM\r\n- **Commit**: 78df3ddd8b40fbd93e10cea111b840c3ecfbb9fb\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19517.4\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3761","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3761)"},{"Id":"508734239","IsPullRequest":true,"CreatedAt":"2019-10-17T21:38:59","Actor":"dotnet-maestro[bot]","Number":"3763","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from nuget/nuget.client","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:eafa42d7-9e65-4d0e-b5a3-08d7219835fd)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.1.6268\r\n- **Date Produced**: 10/16/2019 6:20 AM\r\n- **Commit**: f2c670b0b7cdc018dc708666b2d58699d9654e42\r\n- **Branch**: refs/heads/release-5.3.x\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.1-rtm.6268\r\n\r\n[marker]: <> (End:eafa42d7-9e65-4d0e-b5a3-08d7219835fd)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3763","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from nuget/nuget.client\" (#3763)"},{"Id":"507966389","IsPullRequest":true,"CreatedAt":"2019-10-17T04:25:09","Actor":"dotnet-maestro[bot]","Number":"3758","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191016.12\r\n- **Date Produced**: 10/17/2019 12:27 AM\r\n- **Commit**: 32085cbc728e1016c9d6a7bc105845f0f9eb6b47\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3758","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3758)"},{"Id":"507820459","IsPullRequest":true,"CreatedAt":"2019-10-17T01:38:16","Actor":"dotnet-maestro[bot]","Number":"3757","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191016.1\r\n- **Date Produced**: 10/16/2019 11:22 AM\r\n- **Commit**: f8aac40612d167c5beff554f569897177e786d3a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19516.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3757","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3757)"},{"Id":"508178879","IsPullRequest":false,"CreatedAt":"2019-10-17T01:21:45","Actor":"syndicatedshannon","Number":"3760","RawContent":null,"Title":"FrameworkReference 'Microsoft.AspNetCore.App' was not recognized after downgrade","State":"open","Body":"Downgrade TargetFramework from netcoreapp3.0 to netcoreapp2.2 causes the following upon build:\r\n\r\n> The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\r\n\r\nClean/Rebuild All does not resolve. Deleting bin/obj folders in the specific projects reporting the FrameworkReference error does resolve. This causes unexpected failures when switching branches. Note the project also depends upon .NET Standard 2.1/2.0 projects, which have coincident upgrade/downgrades. However, cleaning those projects did not resolve.\r\n\r\nI can repro and try deleting something specific if it will help pin the problem down further.","Url":"https://github.com/dotnet/sdk/issues/3760","RelatedDescription":"Open issue \"FrameworkReference 'Microsoft.AspNetCore.App' was not recognized after downgrade\" (#3760)"},{"Id":"507542108","IsPullRequest":true,"CreatedAt":"2019-10-17T00:42:52","Actor":"dotnet-bot","Number":"3754","RawContent":null,"Title":"Merge release/2.2.4xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3754","RelatedDescription":"Closed or merged PR \"Merge release/2.2.4xx to release/3.0.1xx\" (#3754)"},{"Id":"507625049","IsPullRequest":true,"CreatedAt":"2019-10-16T08:11:16","Actor":"dotnet-maestro[bot]","Number":"3756","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191015.16\r\n- **Date Produced**: 10/16/2019 4:22 AM\r\n- **Commit**: 57ce1fec7a023a8e32cc64f8ce2637a0b3cdba35\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19515.16\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3756","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3756)"},{"Id":"507520224","IsPullRequest":true,"CreatedAt":"2019-10-15T23:32:25","Actor":"nguerrera","Number":"3753","RawContent":null,"Title":"Increase timeout and up ulimit -n","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3753","RelatedDescription":"Closed or merged PR \"Increase timeout and up ulimit -n\" (#3753)"},{"Id":"507453295","IsPullRequest":true,"CreatedAt":"2019-10-15T23:07:25","Actor":"vijayrkn","Number":"3750","RawContent":null,"Title":"Set the default publish profile only if the profile is not imported by NetSdk","State":"closed","Body":"Issue: \r\nWhen an SDK based WebJobs project is published without a profile, publish fails with missing Profile named 'FileSystem'.\r\n\r\nThis is because the default filesyste profile is shipped in WebSdk but is set in NetSdk. \r\n\r\nFix: Is to not default the publish profile to 'FileSystem' in NetSdk since NetSdk does not ship this default profile. \r\n\r\nImpact: \r\nThis breaks the Sdk based WebJobs publish scenarios. \r\n\r\nThere are 2 parts to this fix: \r\n1. Removing the default publish profile from Netsdk\r\n2. If the profile is not imported by NetSdk, setting the default publish profile in WebSdk & importing the default profile. This is the websdk part of the fix - https://github.com/aspnet/websdk/pull/1006\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3750","RelatedDescription":"Closed or merged PR \"Set the default publish profile only if the profile is not imported by NetSdk\" (#3750)"},{"Id":"505628347","IsPullRequest":true,"CreatedAt":"2019-10-15T22:58:19","Actor":"dotnet-maestro[bot]","Number":"3740","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/11/2019 9:07 PM\r\n- **Commit**: f15311bdc5e9fbf4026a3099c32c5ea6b50d6236\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19511.6\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3740","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3740)"},{"Id":"505812496","IsPullRequest":true,"CreatedAt":"2019-10-15T22:09:55","Actor":"dotnet-bot","Number":"3741","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.4xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3741","RelatedDescription":"Closed or merged PR \"Merge release/2.1.8xx to release/2.2.4xx\" (#3741)"},{"Id":"505812663","IsPullRequest":true,"CreatedAt":"2019-10-15T20:17:30","Actor":"dotnet-bot","Number":"3742","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3742","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3742)"},{"Id":"507458154","IsPullRequest":true,"CreatedAt":"2019-10-15T20:12:56","Actor":"nguerrera","Number":"3751","RawContent":null,"Title":"Delete tmp file that was accidentally checked in","State":"open","Body":"Found creeping into master via merge from 3.1\r\n","Url":"https://github.com/dotnet/sdk/pull/3751","RelatedDescription":"Open PR \"Delete tmp file that was accidentally checked in\" (#3751)"},{"Id":"507174167","IsPullRequest":false,"CreatedAt":"2019-10-15T11:09:48","Actor":"mjcheetham","Number":"3749","RawContent":null,"Title":"Incorrect AppHost binary is published for dependant projects","State":"open","Body":"**Version information**\r\n.NET Core SDK 3.0.100\r\n\r\n**Reproduction steps**\r\nOn a Mac...\r\n  1. dotnet new console -n App1\r\n  1. dotnet new console -n App2\r\n  1. dotnet add App2 reference App1\r\n  1. dotnet publish App2 -r win-x64\r\n\r\nor on Windows...\r\n  1. dotnet new console -n App1\r\n  1. dotnet new console -n App2\r\n  1. dotnet add App2 reference App1\r\n  1. dotnet publish App2 -r osx-x64\r\n\r\n**Expected behaviour**\r\nIn the publish directory there exists App2.exe and App1.exe (plus all the runtime bits for Windows 64-bit). Visa-versa for publishing for osx-x64 on a Windows machine.\r\n\r\n**Actual behaviour**\r\nIn the publish directory there exists App2.exe and **_App1 (not a Windows PE)_** (plus all the runtime bits for Windows 64-bit). Visa-versa for publishing for osx-x64 on a Windows machine.\r\n\r\nOn a Mac publishing win-x64:\r\n```shell\r\n$ dotnet --version\r\n3.0.100\r\n$ pwd\r\n/Users/<user>/scratch/xpublishbug/App2/bin/Debug/netcoreapp3.0/win-x64/publish\r\n$ ls -l App*\r\n-rwxr-xr-x  1 <user>  <group>   80860 15 Oct 12:05 App1\r\n-rw-r--r--  1 <user>  <group>    4608 15 Oct 12:05 App1.dll\r\n-rw-r--r--  1 <user>  <group>     440 15 Oct 12:05 App1.pdb\r\n-rw-r--r--  1 <user>  <group>   30026 15 Oct 12:05 App2.deps.json\r\n-rw-r--r--  1 <user>  <group>    4096 15 Oct 12:05 App2.dll\r\n-rwxr--r--  1 <user>  <group>  158208 15 Oct 12:05 App2.exe\r\n-rw-r--r--  1 <user>  <group>     440 15 Oct 12:05 App2.pdb\r\n-rw-r--r--  1 <user>  <group>      26 15 Oct 12:05 App2.runtimeconfig.json\r\n```\r\n\r\nOn Windows publishing osx-x64:\r\n```powershell\r\nPS> dotnet --version\r\n3.0.100\r\nPS> ls App*\r\n\r\n\r\n    Directory: C:\\Users\\<user>\\scratch\\xpublishtest\\App2\\bin\\Debug\\netcoreapp3.0\\osx-x64\\publish\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019-10-15  12:18 PM           4608 App1.dll\r\n-a----       2019-10-15  12:18 PM         159744 App1.exe\r\n-a----       2019-10-15  12:18 PM            444 App1.pdb\r\n-a----       2019-10-15  12:18 PM          80860 App2\r\n-a----       2019-10-15  12:18 PM          27495 App2.deps.json\r\n-a----       2019-10-15  12:18 PM           4096 App2.dll\r\n-a----       2019-10-15  12:18 PM            444 App2.pdb\r\n-a----       2019-10-15  12:18 PM             28 App2.runtimeconfig.json\r\n```","Url":"https://github.com/dotnet/sdk/issues/3749","RelatedDescription":"Open issue \"Incorrect AppHost binary is published for dependant projects\" (#3749)"},{"Id":"507060412","IsPullRequest":false,"CreatedAt":"2019-10-15T07:30:29","Actor":"josefblaha","Number":"3748","RawContent":null,"Title":"Build succeeds although a file was deleted in a referenced project","State":"open","Body":"In a specific situation, when a file is deleted, causing compile error, build still succeedes.\r\n1. Create a new .NET Standard library project ClassLibrary1 with public Class1.\r\n2. Add another library ClassLibrary2 to the solution.\r\n3. Add a project reference from ClassLibrary2 to ClassLibrary1.\r\n4. Create a new class Consumer1 in ClassLibrary2 with a field of type ClassLibrary1.Class1.\r\n5. dotnet build on solution succeeds (as expected).\r\n6. Delete ClassLibrary1.Class1 file.\r\n7. dotnet build on solution still succeeeds (although it shouldn't).\r\n\r\nPrepared solution in state of point 4:\r\n[FileDeleteTest.zip](https://github.com/dotnet/sdk/files/3727846/FileDeleteTest.zip)\r\n\r\ndotnet SDK 3.0.100\r\nVS 16.3.3\r\nWindows 10 1903\r\n","Url":"https://github.com/dotnet/sdk/issues/3748","RelatedDescription":"Open issue \"Build succeeds although a file was deleted in a referenced project\" (#3748)"},{"Id":"506814823","IsPullRequest":true,"CreatedAt":"2019-10-14T21:06:42","Actor":"dsplaisted","Number":"3747","RawContent":null,"Title":"Update branding to 3.1.100-preview2","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3747","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.100-preview2\" (#3747)"},{"Id":"506742575","IsPullRequest":false,"CreatedAt":"2019-10-14T15:59:55","Actor":"mwpowellhtx","Number":"3746","RawContent":null,"Title":"Build pipeline failed to resolve CLI tooling after VS2019 installation","State":"open","Body":"We got errors in our build pipeline related to our internal CLI tooling failing to resolve correctly, in our estimation, following VS2019 installation.\r\n\r\nRunning the latest NuGet: `Version: 5.3.0.6260`\r\n\r\nIf it helps, our `dotnet --info` looks like this:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.509 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3746","RelatedDescription":"Open issue \"Build pipeline failed to resolve CLI tooling after VS2019 installation\" (#3746)"},{"Id":"506392857","IsPullRequest":true,"CreatedAt":"2019-10-13T22:49:14","Actor":"wli3","Number":"3745","RawContent":null,"Title":"WIP helix","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3745","RelatedDescription":"Open PR \"WIP helix\" (#3745)"},{"Id":"505951909","IsPullRequest":true,"CreatedAt":"2019-10-11T23:43:10","Actor":"dotnet-maestro[bot]","Number":"3744","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.02\r\n- **Date Produced**: 10/11/2019 3:47 PM\r\n- **Commit**: 19942e71998242599a0b6d4496066eaa38588af5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3744","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3744)"},{"Id":"505950895","IsPullRequest":false,"CreatedAt":"2019-10-11T16:37:45","Actor":"AArnott","Number":"3743","RawContent":null,"Title":"NETSDK1085: SatelliteDllsProjectOutputGroupDependencies causes P2P build during pack","State":"open","Body":"The SatelliteDllsProjectOutputGroupDependencies target results in P2Ps doing a build even when NoBuild=true, as caught by the NETSDK1085 error.\r\n\r\nSimple repro sln: [NETSDK1085Bug.zip](https://github.com/dotnet/sdk/files/3718674/NETSDK1085Bug.zip)\r\n\r\nTo repro:\r\n```\r\ndotnet build\r\ndotnet pack --no-build\r\n```\r\n\r\nScenario: I'm building an analyzer package which includes code fixes in one assembly and analyzers in a P2P reference. I need to gather satellite assemblies from the analyzer project, which is exactly what the `SatelliteDllsProjectOutputGroupDependencies` target is for and what I've been using for years in many projects. But apparently it results in triggering a build in the analyzer project even when I'm using `dotnet pack --no-build`.\r\n\r\nThis came up in my upgrade from .NET Core SDK 2.2.401 to 3.0.100.","Url":"https://github.com/dotnet/sdk/issues/3743","RelatedDescription":"Open issue \"NETSDK1085: SatelliteDllsProjectOutputGroupDependencies causes P2P build during pack\" (#3743)"},{"Id":"505569333","IsPullRequest":true,"CreatedAt":"2019-10-11T00:05:30","Actor":"dotnet-bot","Number":"3739","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3739","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3739)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1186380026763194368","CreatedAt":"2019-10-21T20:33:34+00:00","UserScreenname":"dotnet","Text":"Get started with #dotNET using these quick and fun 101 video #tutorials! https://t.co/QgXucetiFt https://t.co/FSFMHGIl7y","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":40,"FavoriteCount":11,"RawContent":null},{"Id":"1184928601394671616","CreatedAt":"2019-10-17T20:26:08+00:00","UserScreenname":"dotnet","Text":"Take the Fall .NET Core Survey https://t.co/QoL9pUXuID","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":53,"RawContent":null},{"Id":"1184876458621095936","CreatedAt":"2019-10-17T16:58:56+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"1184446392829386752","CreatedAt":"2019-10-16T12:30:00+00:00","UserScreenname":"dotnet","Text":"🚀 Coding F# in Visual Studio Code with Ionide 🚀\n\nIn this episode, @_cartermp sits down with @cecilphillip to talk a… https://t.co/5AJoiFdoeK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":30,"RawContent":null},{"Id":"1184165499212423168","CreatedAt":"2019-10-15T17:53:50+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.1 Preview 1 https://t.co/HAD1JAsf3j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":206,"FavoriteCount":110,"RawContent":null},{"Id":"1184165405574586368","CreatedAt":"2019-10-15T17:53:28+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.1 Preview 1 https://t.co/Dho82BhBu1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":39,"RawContent":null},{"Id":"1184151270635921408","CreatedAt":"2019-10-15T16:57:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"1182709231746727941","CreatedAt":"2019-10-11T17:27:09+00:00","UserScreenname":"dotnet","Text":"We've been working hard to make IoT development on .NET a great experience.\n\nIn this episode of #OnDotNet… https://t.co/psNXS59gtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2019-10-22T05:30:41.3504301Z","RunDurationInMilliseconds":16917}