{"Data":{"GitHub":{"Issues":[{"Id":"392592656","IsPullRequest":true,"CreatedAt":"2018-12-19T13:09:18","Actor":"dotnet-maestro[bot]","Number":"193","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/193","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#193)"},{"Id":"391584785","IsPullRequest":false,"CreatedAt":"2018-12-19T11:57:41","Actor":"johannes-schmitt","Number":"183","RawContent":null,"Title":"[Question] Windows Platform Support","State":"closed","Body":"Which platforms will WPF support?\r\n\r\n.NET Core 3 will support Windows 7, 8.1, 10 (1607+) and Windows Server 2012 R2 SP1+ (see [official announcement](https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/)), but does this also hold true for WPF?","Url":"https://github.com/dotnet/wpf/issues/183","RelatedDescription":"Closed issue \"[Question] Windows Platform Support\" (#183)"},{"Id":"392409046","IsPullRequest":false,"CreatedAt":"2018-12-19T01:55:43","Actor":"John0King","Number":"192","RawContent":null,"Title":"Make WPF on .net core always have an  exposed entrypoint?","State":"open","Body":"*Copied from  https://github.com/dotnet/core/issues/2045*\r\n\r\nAFAIK `App.Xaml` hide the entry-point in WPF .\r\nCould the template of WPF always has the `public static void Main()` entry-point (Do not generate a entrypoint for `App.Xaml`)?\r\n```C#\r\npublic static void Main(string[] args)\r\n{\r\n    var app = new MyApp.App();\r\n    //app.InitializeComponent();  call this in App's constructor\r\n    app.Run();\r\n}\r\n```\r\nthis will let developer know how Xaml app start, and customize app start easily (control start as command line app or UI app).","Url":"https://github.com/dotnet/wpf/issues/192","RelatedDescription":"Open issue \"Make WPF on .net core always have an  exposed entrypoint?\" (#192)"},{"Id":"392341923","IsPullRequest":false,"CreatedAt":"2018-12-18T21:24:29","Actor":"hughbe","Number":"191","RawContent":null,"Title":"XamlLoadPermission.FromXml for element without `class` attribute throws NRE","State":"open","Body":"```cs\r\n\r\n\r\n[Fact]\r\npublic void FromXml_NoClassAttribute_ThrowsArgumentException()\r\n{\r\n    var permission = new XamlLoadPermission(PermissionState.None);\r\n    var elem = new SecurityElement(\"IPermission\");\r\n    Assert.Throws<ArgumentException>(\"elem\", () => permission.FromXml(elem));\r\n}\r\n```\r\n\r\nExpected: throws `ArgumentException`\r\nActual: throws `NullReferenceException`","Url":"https://github.com/dotnet/wpf/issues/191","RelatedDescription":"Open issue \"XamlLoadPermission.FromXml for element without `class` attribute throws NRE\" (#191)"},{"Id":"392273107","IsPullRequest":true,"CreatedAt":"2018-12-18T19:51:32","Actor":"rladuca","Number":"190","RawContent":null,"Title":"Adding d3d_compiler dependency to known issues","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/190","RelatedDescription":"Closed or merged PR \"Adding d3d_compiler dependency to known issues\" (#190)"},{"Id":"390799366","IsPullRequest":false,"CreatedAt":"2018-12-18T18:04:43","Actor":"l0hn","Number":"167","RawContent":null,"Title":"Core 3.0 WPF module not found crash for non-Win10 machines (d3d_compiler is missing)","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0 Preview1\r\n* Windows version: (`winver`)\r\n6.2 (Build 9200)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNo\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Attempting to run a .net core 3.0 WPF app (the default hello .net core app) on any Windows version other than Windows 10 causes a crash with the error \"module not found\" (c06d007e). Guessing this is due to attempting to use one of the newer dpi awareness methods that were added in win10 but not entirely sure.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nCrash dump output:\r\n```\r\n0:007> !analyze -v\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Exception Analysis                                   *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\n*** WARNING: Unable to verify checksum for wpfgfx_cor3.dll\r\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for wpfgfx_cor3.dll - \r\n*** WARNING: Unable to verify checksum for coretest.exe\r\nGetUrlPageData2 (WinHttp) failed: 12002.\r\n\r\nKEY_VALUES_STRING: 1\r\n\r\n\r\nSTACKHASH_ANALYSIS: 1\r\n\r\nTIMELINE_ANALYSIS: 1\r\n\r\nTimeline: !analyze.Start\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:31:00.140Z\r\n    Diff: 1708140 mSec\r\n\r\nTimeline: Dump.Current\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:02:32.0Z\r\n    Diff: 0 mSec\r\n\r\nTimeline: Process.Start\r\n    Name: <blank>\r\n    Time: 2018-12-13T15:02:25.0Z\r\n    Diff: 7000 mSec\r\n\r\nTimeline: OS.Boot\r\n    Name: <blank>\r\n    Time: 2018-12-13T12:45:50.0Z\r\n    Diff: 8202000 mSec\r\n\r\n\r\nDUMP_CLASS: 2\r\n\r\nDUMP_QUALIFIER: 400\r\n\r\nCONTEXT:  (.ecxr)\r\nrax=00000025c6741c00 rbx=0000000000000000 rcx=0000000000000000\r\nrdx=0000000000000000 rsi=000007f8451fdb8c rdi=0000000000000000\r\nrip=000007f8540f89cc rsp=00000025e27adcf0 rbp=00000025e27ade48\r\n r8=00000025e3082960  r9=0000000000000000 r10=0000000000000000\r\nr11=000007f7ee5cf000 r12=000007f845227000 r13=000007f8451fdc98\r\nr14=000007f845209cd0 r15=0000000000000000\r\niopl=0         nv up ei pl nz na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206\r\nKERNELBASE!RaiseException+0x68:\r\n000007f8`540f89cc 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h] ss:00000025`e27addb0=0000e6ffe326b63d\r\nResetting default scope\r\n\r\nFAULTING_IP: \r\nKERNELBASE!RaiseException+68\r\n000007f8`540f89cc 488b8c24c0000000 mov     rcx,qword ptr [rsp+0C0h]\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 000007f8540f89cc (KERNELBASE!RaiseException+0x0000000000000068)\r\n   ExceptionCode: c06d007e\r\n  ExceptionFlags: 00000000\r\nNumberParameters: 1\r\n   Parameter[0]: 00000025e27addf0\r\n\r\nERROR_CODE: (NTSTATUS) 0xc06d007e - <Unable to get error code text>\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc06d007e - <Unable to get error code text>\r\n\r\nEXCEPTION_CODE_STR:  c06d007e\r\n\r\nEXCEPTION_PARAMETER1:  00000025e27addf0\r\n\r\nWATSON_BKT_PROCSTAMP:  5bf60478\r\n\r\nWATSON_BKT_PROCVER:  1.0.0.0\r\n\r\nPROCESS_VER_PRODUCT:  coretest\r\n\r\nWATSON_BKT_MODULE:  KERNELBASE.dll\r\n\r\nWATSON_BKT_MODSTAMP:  5010ab2d\r\n\r\nWATSON_BKT_MODOFFSET:  189cc\r\n\r\nWATSON_BKT_MODVER:  6.2.9200.16384\r\n\r\nMODULE_VER_PRODUCT:  Microsoft® Windows® Operating System\r\n\r\nBUILD_VERSION_STRING:  6.2.9200.16384 (win8_rtm.120725-1247)\r\n\r\nMODLIST_WITH_TSCHKSUM_HASH:  2ab97307aab086ad6476e028060b7abe8bf6c20d\r\n\r\nMODLIST_SHA1_HASH:  fa2433f03f4ae8073e25bf736d39b590969c12da\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nPROCESS_BAM_CURRENT_THROTTLED: 0\r\n\r\nPROCESS_BAM_PREVIOUS_THROTTLED: 0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nPRODUCT_TYPE:  1\r\n\r\nSUITE_MASK:  272\r\n\r\nDUMP_FLAGS:  c07\r\n\r\nDUMP_TYPE:  3\r\n\r\nPROCESS_NAME:  unknown\r\n\r\nANALYSIS_SESSION_TIME:  12-13-2018 15:31:00.0140\r\n\r\nANALYSIS_VERSION: 10.0.17763.1 amd64fre\r\n\r\nMANAGED_CODE: 1\r\n\r\nMANAGED_ENGINE_MODULE:  coreclr\r\n\r\nMANAGED_ANALYSIS_PROVIDER:  SOS\r\n\r\nTHREAD_ATTRIBUTES: \r\nOS_LOCALE:  ENG\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH\r\n\r\nDEFAULT_BUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH\r\n\r\nPRIMARY_PROBLEM_CLASS:  APPLICATION_FAULT\r\n\r\nPROBLEM_CLASSES: \r\n\r\n    ID:     [0n320]\r\n    Type:   [APPLICATION_FAULT]\r\n    Class:  Primary\r\n    Scope:  DEFAULT_BUCKET_ID (Failure Bucket ID prefix)\r\n            BUCKET_ID\r\n    Name:   Add\r\n    Data:   Omit\r\n    PID:    [Unspecified]\r\n    TID:    [Unspecified]\r\n    Frame:  [0]\r\n\r\n    ID:     [0n121]\r\n    Type:   [CLRSETUP_MSCORLIBMISMATCH]\r\n    Class:  Addendum\r\n    Scope:  DEFAULT_BUCKET_ID (Failure Bucket ID prefix)\r\n            BUCKET_ID\r\n    Name:   Add\r\n    Data:   Omit\r\n    PID:    [0x8e4]\r\n    TID:    [0x13a8]\r\n    Frame:  [Unspecified]\r\n\r\nLAST_CONTROL_TRANSFER:  from 000007f84515cc37 to 000007f8540f89cc\r\n\r\nSTACK_TEXT:  \r\n00000025`e27adcf0 000007f8`4515cc37 : 00000000`00000008 000007f8`570465c2 00000025`c6610000 00000000`00000030 : KERNELBASE!RaiseException+0x68\r\n00000025`e27addd0 000007f8`4515c5d0 : 00000025`00000000 000007f8`4507132e 00000025`e27addf0 00000000`00000000 : wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+0x5c67\r\n00000025`e27ade90 000007f8`45070ca0 : 00000025`e3635f20 00000000`00000984 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+0x5600\r\n00000025`e27adf00 000007f8`4506d617 : 68636574`0a0a2f2f 30542065`7571696e 00000000`00000000 00000000`00000000 : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x5eaa0\r\n00000025`e27ae070 000007f8`450727ad : 00000000`00000000 000007f8`45087bd3 ffffffff`fffffffe 00000025`e27ae330 : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x5b417\r\n00000025`e27ae1d0 000007f8`4509031c : 00000000`00000000 000007f8`45085b73 0000b1f8`4ac001fe 00000025`4ac001fe : wpfgfx_cor3!SetDpiAwarenessForDisplayModeText+0x605ad\r\n00000025`e27ae260 000007f8`450a3714 : 00000000`00000000 00000000`00000000 00000025`e1f34648 00000025`e27ae430 : wpfgfx_cor3!MILAddRef+0x501c\r\n00000025`e27ae2b0 000007f8`4509a7c2 : 00000000`00000000 00000025`e1f34648 00000000`00000000 0000001f`00000001 : wpfgfx_cor3!MILAddRef+0x18414\r\n00000025`e27ae2e0 000007f8`450923a9 : 00000025`e27ae430 00000025`e27ae7a8 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0xf4c2\r\n00000025`e27ae3e0 000007f8`450922b8 : 00000000`3f800000 00000000`00000000 3f800000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0x70a9\r\n00000025`e27ae8f0 000007f8`45092a76 : 00000000`00000000 00000025`e27aeac8 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MILAddRef+0x6fb8\r\n00000025`e27ae940 000007f8`45092607 : 00000000`00000000 00000025`e36219a0 00000000`00000000 00000025`e36219a0 : wpfgfx_cor3!MILAddRef+0x7776\r\n00000025`e27aedd0 000007f8`45092d1b : 00000025`e1f56be8 00000000`00000000 00000025`e35367e8 00000025`e22cfe20 : wpfgfx_cor3!MILAddRef+0x7307\r\n00000025`e27af000 000007f8`45092eec : 00000025`e27af200 000007f8`450a86a9 00000025`c6740000 00000000`00000070 : wpfgfx_cor3!MILAddRef+0x7a1b\r\n00000025`e27af0e0 000007f8`45154c28 : 00000000`00000c40 00000000`00000000 00000000`00000002 0000b1f8`076a5394 : wpfgfx_cor3!MILAddRef+0x7bec\r\n00000025`e27af130 000007f8`450a6c0b : 000007f8`5161a810 00000025`e1f34ed0 00000000`00000000 00000025`e1f34e40 : wpfgfx_cor3!MilUtility_ArcToBezier+0xb8f8\r\n00000025`e27af180 000007f8`45112587 : 00000000`00000000 000007f8`00000000 00000000`00000000 00000000`0000000f : wpfgfx_cor3!MILAddRef+0x1b90b\r\n00000025`e27af320 000007f8`4511234d : 00000000`00000000 00000025`e3536730 00000025`e27af4c0 00000025`e27af4c0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x49517\r\n00000025`e27af3a0 000007f8`451119c3 : 00000000`00000000 00000025`e348f3d0 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x492dd\r\n00000025`e27af470 000007f8`450f8f78 : 00000000`00000000 00000000`00000000 00000000`00000000 3f800000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x48953\r\n00000025`e27af5c0 000007f8`450f6216 : 00000000`00000000 00000025`e3536a88 00000000`00000000 00000025`e22c90f0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x2ff08\r\n00000025`e27af720 000007f8`45117983 : 00000000`00000000 00000000`00000000 00000025`e27af819 00000025`e22c9094 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x2d1a6\r\n00000025`e27af750 000007f8`45122b0b : 00000025`e22c8ce0 00000000`00000000 00000000`00000000 00000025`e1f34ed0 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4e913\r\n00000025`e27af880 000007f8`45116992 : 00000025`e3536730 00000025`e3536730 00000025`e3536cc0 00000025`e3536730 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x59a9b\r\n00000025`e27af8f0 000007f8`45118deb : 00000000`00000000 00000000`00000000 00000000`00000000 00000025`e3536730 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4d922\r\n00000025`e27af9e0 000007f8`4511be2e : 00000000`00000001 00000025`e27afb28 00000000`00000000 00000025`e27afb30 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4fd7b\r\n00000025`e27afad0 000007f8`4511a3ef : 00000000`00000001 000007f8`45106e79 00000000`00000000 000007f8`4511c02f : wpfgfx_cor3!MilContent_DetachFromHwnd+0x52dbe\r\n00000025`e27afb80 000007f8`45109908 : 00000025`e1f40940 00000000`00000000 00000025`e27afce0 00000000`00000001 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x5137f\r\n00000025`e27afbf0 000007f8`45109769 : 00000000`00000000 00000000`00000001 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x40898\r\n00000025`e27afc20 000007f8`4510988a : 00000025`e07ed400 00000000`00000000 00000025`e1f40950 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x406f9\r\n00000025`e27afcb0 000007f8`450ca06e : 00000000`00000000 00000025`e1f40950 00000025`e1f10710 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x4081a\r\n00000025`e27afce0 000007f8`450ca1ef : 00000000`00000000 00000025`e1f10710 00000025`e1f10710 00000025`e1f10710 : wpfgfx_cor3!MilContent_DetachFromHwnd+0xffe\r\n00000025`e27afd20 000007f8`450c9ef3 : 00000025`e1f40950 00000000`00000000 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0x117f\r\n00000025`e27afd50 000007f8`54e5167e : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : wpfgfx_cor3!MilContent_DetachFromHwnd+0xe83\r\n00000025`e27afd80 000007f8`5704c3f1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x1a\r\n00000025`e27afdb0 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x1d\r\n\r\n\r\nTHREAD_SHA1_HASH_MOD_FUNC:  155fa38cf2af6205707181a85399980804e5e87c\r\n\r\nTHREAD_SHA1_HASH_MOD_FUNC_OFFSET:  0be82d0ecab0a42fb0219d2636ae21eaeddd07f8\r\n\r\nTHREAD_SHA1_HASH_MOD:  f35638c1728aa06cea589bedc3c2b7e3cd3558df\r\n\r\nFOLLOWUP_IP: \r\nwpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n000007f8`4515cc37 488b45e0        mov     rax,qword ptr [rbp-20h]\r\n\r\nFAULT_INSTR_CODE:  e0458b48\r\n\r\nSYMBOL_STACK_INDEX:  1\r\n\r\nSYMBOL_NAME:  wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: wpfgfx_cor3\r\n\r\nIMAGE_NAME:  wpfgfx_cor3.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  5bff0a8c\r\n\r\nSTACK_COMMAND:  ~7s ; .ecxr ; kb\r\n\r\nBUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_wpfgfx_cor3!MilVisualTarget_DetachFromHwnd+5c67\r\n\r\nFAILURE_EXCEPTION_CODE:  c06d007e\r\n\r\nFAILURE_IMAGE_NAME:  wpfgfx_cor3.dll\r\n\r\nBUCKET_ID_IMAGE_STR:  wpfgfx_cor3.dll\r\n\r\nFAILURE_MODULE_NAME:  wpfgfx_cor3\r\n\r\nBUCKET_ID_MODULE_STR:  wpfgfx_cor3\r\n\r\nFAILURE_FUNCTION_NAME:  MilVisualTarget_DetachFromHwnd\r\n\r\nBUCKET_ID_FUNCTION_STR:  MilVisualTarget_DetachFromHwnd\r\n\r\nBUCKET_ID_OFFSET:  5c67\r\n\r\nBUCKET_ID_MODTIMEDATESTAMP:  5bff0a8c\r\n\r\nBUCKET_ID_MODCHECKSUM:  0\r\n\r\nBUCKET_ID_MODVER_STR:  4.8.27128.4\r\n\r\nBUCKET_ID_PREFIX_STR:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_\r\n\r\nFAILURE_PROBLEM_CLASS:  APPLICATION_FAULT\r\n\r\nFAILURE_SYMBOL_NAME:  wpfgfx_cor3.dll!MilVisualTarget_DetachFromHwnd\r\n\r\nFAILURE_BUCKET_ID:  APPLICATION_FAULT_CLRSETUP_MSCORLIBMISMATCH_c06d007e_wpfgfx_cor3.dll!MilVisualTarget_DetachFromHwnd\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/unknown/1.0.0.0/5bf60478/KERNELBASE.dll/6.2.9200.16384/5010ab2d/c06d007e/000189cc.htm?Retriage=1\r\n\r\nTARGET_TIME:  2018-12-13T15:02:32.000Z\r\n\r\nOSBUILD:  9200\r\n\r\nOSSERVICEPACK:  16384\r\n\r\nSERVICEPACK_NUMBER: 0\r\n\r\nOS_REVISION: 0\r\n\r\nOSPLATFORM_TYPE:  x64\r\n\r\nOSNAME:  Windows 8\r\n\r\nOSEDITION:  Windows 8 WinNt SingleUserTS\r\n\r\nUSER_LCID:  0\r\n\r\nOSBUILD_TIMESTAMP:  2012-07-26 03:15:22\r\n\r\nBUILDDATESTAMP_STR:  120725-1247\r\n\r\nBUILDLAB_STR:  win8_rtm\r\n\r\nBUILDOSVER_STR:  6.2.9200.16384\r\n\r\nANALYSIS_SESSION_ELAPSED_TIME:  207a5\r\n\r\nANALYSIS_SOURCE:  UM\r\n\r\nFAILURE_ID_HASH_STRING:  um:application_fault_clrsetup_mscorlibmismatch_c06d007e_wpfgfx_cor3.dll!milvisualtarget_detachfromhwnd\r\n\r\nFAILURE_ID_HASH:  {c0d657cb-3086-b0b0-d86b-9d8f9df5dcfb}\r\n```\r\n **Expected behavior:**\r\nNot crash \r\n\r\n **Minimal repro:**\r\n This can be reproduced using any WPF .net core project ,the simplest way is to:\r\n```\r\ndotnet new wpf\r\ndotnet publish -c release -r win-x64\r\n```\r\nThen attempt to run the published app on any version of windows lower than win10. (making sure vc140 is installed on the target machine or copy the vc140 redist dlls to the publish folder)\r\n","Url":"https://github.com/dotnet/wpf/issues/167","RelatedDescription":"Closed issue \"Core 3.0 WPF module not found crash for non-Win10 machines (d3d_compiler is missing)\" (#167)"},{"Id":"392271757","IsPullRequest":false,"CreatedAt":"2018-12-18T18:02:13","Actor":"rladuca","Number":"189","RawContent":null,"Title":"Handle d3d_compiler.dll dependency","State":"open","Body":"Since .NET Framework 4.7, WPF has had a dependency on d3d_compiler.dll.  On Windows 7 SP1, Windows Server 2008 R2, and Windows Server 2008 R2 SP1, this is not necessarily installed.\r\n\r\nWe need to possibly redist d3d_compiler.dll with the WindowsDesktop SDK.  Installer chaining/blocking will probably not work here due to self contained application publishing.","Url":"https://github.com/dotnet/wpf/issues/189","RelatedDescription":"Open issue \"Handle d3d_compiler.dll dependency\" (#189)"},{"Id":"392156703","IsPullRequest":false,"CreatedAt":"2018-12-18T13:28:39","Actor":"dvdbot","Number":"188","RawContent":null,"Title":"When using Dotnet Core 3.0 Preview 1 \"Design in Blend...\" option missing from XAML file","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\nVersion:   3.0.100-preview-009812\r\n* Windows version: (`winver`)\r\nOS Version:  10.0.18298\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNot tested - only have dotNet Core workflow and dotNet Framework 4.7.x installed\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nIn dotNet Framework 4.7.x when you right click a XAML file you've got an option for \"Design in Blend...\"\r\nWhen using a dotNet Core 3.x based project (dotnet new WPF) this option is missing.\r\nAlso I'm unable to start any kind of graphical designer for any xaml window/page/user control \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nJust no option and no designer \r\n\r\n **Expected behavior:**\r\nHave the option and designer \r\n\r\n **Minimal repro:**\r\n it's as easy as creating a folder and running `dotnet new wpf` to create a project.\r\nOpen this project and try to use Blend or any other designer\r\n\r\nps: I just probably missed an announcement stating that the designers are not available yet but better to ask than to not\r\n","Url":"https://github.com/dotnet/wpf/issues/188","RelatedDescription":"Open issue \"When using Dotnet Core 3.0 Preview 1 \"Design in Blend...\" option missing from XAML file\" (#188)"},{"Id":"392147725","IsPullRequest":true,"CreatedAt":"2018-12-18T13:09:55","Actor":"dotnet-maestro[bot]","Number":"187","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/187","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#187)"},{"Id":"391831646","IsPullRequest":true,"CreatedAt":"2018-12-17T20:07:10","Actor":"rladuca","Number":"186","RawContent":null,"Title":"Set IsShipping as per Arcade guidance for XLIFF generation","State":"closed","Body":"Removing custom localization targets and setting IsShipping where app…ropriate to enable XLIFF generation.\r\n\r\nSee [Arcade issue](https://github.com/dotnet/arcade/issues/1591) for reasoning.\r\n\r\nFixes #171 ","Url":"https://github.com/dotnet/wpf/pull/186","RelatedDescription":"Closed or merged PR \"Set IsShipping as per Arcade guidance for XLIFF generation\" (#186)"},{"Id":"391293508","IsPullRequest":false,"CreatedAt":"2018-12-17T20:07:10","Actor":"rladuca","Number":"171","RawContent":null,"Title":"Start generating XLIFF data from System.Xaml","State":"closed","Body":"We are not currently setup to generate XLIFF data.\r\n\r\nWe need to configure the repo to do so as a first step in the localization pipeline.","Url":"https://github.com/dotnet/wpf/issues/171","RelatedDescription":"Closed issue \"Start generating XLIFF data from System.Xaml\" (#171)"},{"Id":"391819329","IsPullRequest":false,"CreatedAt":"2018-12-17T17:39:07","Actor":"hughbe","Number":"185","RawContent":null,"Title":"XamlLoadPermission(IEnumerable<XamlLoadAccess>) duplicates all items in the array","State":"open","Body":"```cs\r\n\r\npublic static IEnumerable<object[]> Ctor_XamlAccessLevels_TestData()\r\n{\r\n    yield return new object[] { new XamlAccessLevel[0] };\r\n    yield return new object[] { new XamlAccessLevel[] { XamlAccessLevel.PrivateAccessTo(typeof(int)) } };\r\n    yield return new object[] { new XamlAccessLevel[] { XamlAccessLevel.PrivateAccessTo(typeof(int)), XamlAccessLevel.PrivateAccessTo(typeof(int)) } };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(Ctor_XamlAccessLevels_TestData))]\r\npublic void Ctor_XamlAccessLevels(IEnumerable<XamlAccessLevel> allowedAccess)\r\n{\r\n    var permission = new XamlLoadPermission(allowedAccess);\r\n    Assert.False(permission.IsUnrestricted());\r\n    Assert.Equal(allowedAccess.Length, permission.AllowedAccess.Count);\r\n}\r\n```\r\n\r\nExpected: the count of `permission.AllowedAccess` is equal to the count of the input array.\r\nActual: the count of `permission.AllowedAccess` is *double* the count of the input array","Url":"https://github.com/dotnet/wpf/issues/185","RelatedDescription":"Open issue \"XamlLoadPermission(IEnumerable<XamlLoadAccess>) duplicates all items in the array\" (#185)"},{"Id":"391702939","IsPullRequest":true,"CreatedAt":"2018-12-17T13:09:22","Actor":"dotnet-maestro[bot]","Number":"184","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/184","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#184)"},{"Id":"391583531","IsPullRequest":false,"CreatedAt":"2018-12-17T07:10:30","Actor":"trodent83","Number":"182","RawContent":null,"Title":"Avaible size based DataTemplate selection","State":"open","Body":"It would be more then useful to be able to define a datatemplate depending on the avaible size, as in somecases the Region on which we want to display data can Change dramaticly.\r\nIf we could do something like this:\r\n\r\n`\r\n <MultiDisplayDataTemplate>\r\n            <MultiDisplayDataTemplate.DisplayModes>\r\n                <DisplayMode>\r\n                    <TextBox/>\r\n                </DisplayMode>\r\n                <DisplayMode MinWidth =\"50\"\r\n                             MinHeigh =\"50\">\r\n                    <DockPanel>\r\n                        <Label/>\r\n                        <TextBox/>\r\n                    </DockPanel>\r\n                </DisplayMode>\r\n            </MultiDisplayDataTemplate.DisplayModes>\r\n        </MultiDisplayDataTemplate>\r\n`\r\nThis would leave the current behaviour more or less intakt but would make it possible to make a more resiliant UI where I can use the place that I have quite optimal.","Url":"https://github.com/dotnet/wpf/issues/182","RelatedDescription":"Open issue \"Avaible size based DataTemplate selection\" (#182)"},{"Id":"391504160","IsPullRequest":false,"CreatedAt":"2018-12-16T20:55:28","Actor":"rladuca","Number":"181","RawContent":null,"Title":"Ensure explicit references in WPF product projects","State":"open","Body":"SDK projects generally bring in all the references for the particular SDK that is being used.  This presents an issue in WPF as there are some binaries we would not like to add as references (see #106).  Having these references available gives the wrong impression as to what types developers can use and what changes need to be considered very carefully.\r\n\r\nWe need to create a way of restricting the initial set of references so that they must be added explicitly.  This will server as a warning to developers and a red flag to reviewers that a deeper consideration of the change is needed.\r\n\r\n@vatsan-madhavan has some ideas on this that we can use to implement the change.\r\n","Url":"https://github.com/dotnet/wpf/issues/181","RelatedDescription":"Open issue \"Ensure explicit references in WPF product projects\" (#181)"},{"Id":"391497865","IsPullRequest":false,"CreatedAt":"2018-12-16T19:36:04","Actor":"rladuca","Number":"180","RawContent":null,"Title":"Create a public test plan","State":"open","Body":"We need a public test plan that includes the following:\r\n\r\n- A roadmap for test porting\r\n  - DRT porting\r\n  - Feature test porting\r\n  - Engineering system work (Helix, etc)\r\n- A description of the various test pieces in WPF and how they interact with the CI build\r\n  - DRTs and relation to CI\r\n  - Feature tests and relation to PR validation\r\n- Guidance on porting and adding new test pieces in DRT or Feature Tests\r\n- Guidance on utilizing the various tests in order to validate a PR\r\n- A test matrix including OS and general system requirements\r\n\r\n\r\nNot all of these pieces need to be fully described immediately, but we should at least have some semblance of a road map and contributing guide.  Work like #138 should be unblocked ASAP.","Url":"https://github.com/dotnet/wpf/issues/180","RelatedDescription":"Open issue \"Create a public test plan\" (#180)"},{"Id":"391490452","IsPullRequest":false,"CreatedAt":"2018-12-16T18:01:02","Actor":"Neme12","Number":"179","RawContent":null,"Title":"Visual styles are off by default","State":"open","Body":"The experience when creating a new WPF app and showing a message box is that we get the old-school UI because visual styles are off by default:\r\n![image](https://user-images.githubusercontent.com/11444821/50056931-d3e68200-0163-11e9-9570-5e47c2228a94.png)\r\n\r\ncompare that to the equivalent code from a new Windows Forms app:\r\n![image](https://user-images.githubusercontent.com/11444821/50056921-b5808680-0163-11e9-9876-5e844874c905.png)\r\n\r\nIt has always bothered me that the default experience when using WPF is *worse* than for Windows Forms even though WPF is the newer technology. It gives a really bad impression and makes WPF seem unpolished.\r\n\r\nNot only that, but it seems like the best workaround is adding some XML in an extra file: https://stackoverflow.com/questions/5289328/wpf-messagebox-window-style\r\n\r\nIn my opinion the best case scenario would be that this would just work by default, without any code required to opt-in; if anything, there would be an opt-out. However if compatibility is a concern, then there should be a new API introduced to enable this similar to Windows Forms' `Application.EnableVisualStyles` (perhaps a property on `Application`) which would be enabled for all new created projects by including this in the template, just like Windows Forms does.","Url":"https://github.com/dotnet/wpf/issues/179","RelatedDescription":"Open issue \"Visual styles are off by default\" (#179)"},{"Id":"391465324","IsPullRequest":true,"CreatedAt":"2018-12-16T13:08:25","Actor":"dotnet-maestro[bot]","Number":"178","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/178","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#178)"},{"Id":"391448609","IsPullRequest":false,"CreatedAt":"2018-12-16T09:10:34","Actor":"lindexi","Number":"177","RawContent":null,"Title":"Make the SplashScreen support Gif and custom image","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWe may use SplashScreen to show the advertisement. But the SplashScreen only support the Resource Image that we can not show the image download from the internet in SplashScreen.\r\n\r\nAnd the dynamic images make it easier to engage users that we want to show the gif in SplashScreen.\r\n\r\nhttps://github.com/Microsoft/WPF-Samples/issues/61","Url":"https://github.com/dotnet/wpf/issues/177","RelatedDescription":"Open issue \"Make the SplashScreen support Gif and custom image\" (#177)"},{"Id":"391431729","IsPullRequest":false,"CreatedAt":"2018-12-16T03:28:13","Actor":"a44281071","Number":"176","RawContent":null,"Title":"LinearGradientBrush in Multi-language text element bug.","State":"open","Body":"```xaml\r\n  <Window.Resources>\r\n    <LinearGradientBrush x:Key=\"brush1\" StartPoint=\"0,0.5\" EndPoint=\"1,0.5\">\r\n      <GradientStop Offset=\"0\" Color=\"Red\" />\r\n      <GradientStop Offset=\"1\" Color=\"blue\" />\r\n    </LinearGradientBrush>\r\n  </Window.Resources> \r\n  <TextBlock Foreground=\"{StaticResource brush1}\" Text=\"我是abcdefg文本わたしは\" /> \r\n```\r\nDisplay result in view ↓ (bad):\r\n![bad image](https://social.msdn.microsoft.com/Forums/getfile/1370019)\r\nThis is default font (MS YaHei) in zh-cn OS. ","Url":"https://github.com/dotnet/wpf/issues/176","RelatedDescription":"Open issue \"LinearGradientBrush in Multi-language text element bug.\" (#176)"},{"Id":"391376543","IsPullRequest":true,"CreatedAt":"2018-12-15T13:08:33","Actor":"dotnet-maestro[bot]","Number":"175","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/175","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#175)"},{"Id":"391334197","IsPullRequest":false,"CreatedAt":"2018-12-15T02:08:28","Actor":"lindexi","Number":"174","RawContent":null,"Title":"We can change the dispatcher in dependency property recursively.","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nSometime, we may write the code cross thread to improve performance. But we are hard to share the dependency property to other thread.\r\n\r\nAs we know the DependencyObject is inherited from DispatcherObject in WPF. And the WPF use DispatcherObject.CheckAccess to check the calling thread and the creating thread. Some of the dependency property will call the DispatcherObject.DetachFromDispatcher to set their dispatcher to null to share the dependency property to other threads.\r\n\r\nBut I need to change all of the DependencyObject in a control that I want to share it with other threads. I hope we can use some method like Freeze to freeze some control to share it with other threads. Or we can set the dispatcher in dependency property recursively.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/174","RelatedDescription":"Open issue \"We can change the dispatcher in dependency property recursively.\" (#174)"},{"Id":"391322913","IsPullRequest":true,"CreatedAt":"2018-12-15T00:30:01","Actor":"walterlv","Number":"173","RawContent":null,"Title":"Use nameof keyword instead of hard coded parameter names","State":"open","Body":"It's better for method refactoring.","Url":"https://github.com/dotnet/wpf/pull/173","RelatedDescription":"Open PR \"Use nameof keyword instead of hard coded parameter names\" (#173)"},{"Id":"391293884","IsPullRequest":true,"CreatedAt":"2018-12-14T22:09:56","Actor":"rladuca","Number":"172","RawContent":null,"Title":"Enabling XLIFF generation","State":"closed","Body":"Generates XLIFF files via a copy of the Arcade localization targets that doesn't require IsShipping to be true.\r\nFixes #171 ","Url":"https://github.com/dotnet/wpf/pull/172","RelatedDescription":"Closed or merged PR \"Enabling XLIFF generation\" (#172)"},{"Id":"391148006","IsPullRequest":false,"CreatedAt":"2018-12-14T15:10:07","Actor":"YannikZ12","Number":"170","RawContent":null,"Title":"Make MarkupExtension an interface","State":"open","Body":"I believe that making MarkupExtension an interface enables developers to work with (Static/Dynamic)Resources more flexibly. In my case it has hurt the creation of ResourceDictionaries with simple types like Double (e.g. font sizes or the like) or fonts in general. \r\n\r\nThe implementation of the class is already really close to that of an interface so it should not be too much work to make the change.\r\n\r\nExample:\r\n```\r\n<TypeOfIMarkupExtension x:Key=\"GlobalFontSize\" Value=\"{Binding BindingToMyClass}\"/>\r\n\r\n<TextBlock FontSize=\"{StaticResource GlobalFontSize}\"/>\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/170","RelatedDescription":"Open issue \"Make MarkupExtension an interface\" (#170)"},{"Id":"391103096","IsPullRequest":true,"CreatedAt":"2018-12-14T13:08:57","Actor":"dotnet-maestro[bot]","Number":"169","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/169","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#169)"},{"Id":"390844871","IsPullRequest":false,"CreatedAt":"2018-12-13T20:22:50","Actor":"legistek","Number":"168","RawContent":null,"Title":"Thread Safe DependencyProperty Setting/Getting","State":"open","Body":"I'm gonna say at the outset I don't pretend to know all the reasons why setting  `DependencyProperty`s is not threadsafe (in other words, they always must be set on the UI thread), but I do know that it can be a gigantic pain to build responsive multithreaded UIs while dealing with this issue .This is particularly true in the MVVM pattern where we have `DependencyProperty`'s data bound to view model properties, and we would like to change those view model properties in worker threads.\r\n\r\nI do realize one major problem is that you can't have properties that might affect layout / measure being changed by other threads during the layout pass, and using thread locking to prevent this would mean that worker threads could get blocked by UI updates, which tends to defeat the purpose of multithreading. \r\n\r\nOne possibility, however, might be to allow the `SetValue` (or more frequently binding source property updates) to succeed when triggered in a worker thread, but internally to use the dispatcher to handle the property change. _Basically do transparently what we now have to do manually._ Until the dispatcher gets to the actual change there would be a slight disconnect between what the viewmodel thinks the value is and what the UI thinks it is, but again we have to deal with this now when using the dispatcher (i.e. we don't know when the effect of property changes will actually propagate to the UI if they occur on a worker thread). \r\n\r\nI could easily be overlooking other difficulties, as well as other possible solutions. Either way I didn't see this among any of the issues opened since the open source announcement and thought I'd raise it to for discussion.","Url":"https://github.com/dotnet/wpf/issues/168","RelatedDescription":"Open issue \"Thread Safe DependencyProperty Setting/Getting\" (#168)"},{"Id":"390793366","IsPullRequest":false,"CreatedAt":"2018-12-13T17:58:33","Actor":"stevenbrix","Number":"166","RawContent":null,"Title":"Grid improvements","State":"open","Body":"Specifying Grid/ColumnDefinitions in markup is tedious. Avalonia came up with a really nice syntax that lets you specify them like this:\r\n\r\n```\r\n<Grid ColumnDefintions = \"Auto,*,*\" RowDefinitions=\"Auto,*,*\" >\r\n   ...\r\n</Grid>\r\n```\r\n\r\nInstead of the old syntax:\r\n```\r\n<Grid>\r\n   <Grid.ColumnDefinitions>\r\n     <ColumnDefintion Width=\"Auto\"/>\r\n     <ColumnDefintion Width=\"*\"/>\r\n     <ColumnDefintion Width=\"*\"/>\r\n   </Grid.ColumnDefinitions>\r\n   <Grid.RowDefinitions>\r\n     <RowDefinition Height=\"Auto\"/>\r\n     <RowDefinition Height=\"*\"/>\r\n     <RowDefinition Height=\"*\"/>\r\n   </Grid.RowDefinitions>\r\n…\r\n</Grid>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/166","RelatedDescription":"Open issue \"Grid improvements\" (#166)"},{"Id":"390722482","IsPullRequest":false,"CreatedAt":"2018-12-13T15:11:32","Actor":"danielmeza","Number":"165","RawContent":null,"Title":"Global namespace definition","State":"open","Body":"It will be grate if we can define namespaces to be used across all views like in Razor with the _ViewImports.cshtml\r\n","Url":"https://github.com/dotnet/wpf/issues/165","RelatedDescription":"Open issue \"Global namespace definition\" (#165)"},{"Id":"390669670","IsPullRequest":true,"CreatedAt":"2018-12-13T13:08:55","Actor":"dotnet-maestro[bot]","Number":"164","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/164","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#164)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-20T05:31:09.3448325Z","RunDurationInMilliseconds":1081}