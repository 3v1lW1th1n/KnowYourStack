{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11977856274","Type":"PullRequestEvent","CreatedAt":"2020-04-07T03:06:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7935","RelatedDescription":"Merged pull request \"Remove \"-staging\" suffix from cloud role name\" (#7935) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3105\r\n"},{"Id":"11976715557","Type":"PullRequestEvent","CreatedAt":"2020-04-06T23:29:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7935","RelatedDescription":"Opened pull request \"Remove \"-staging\" suffix from cloud role name\" (#7935) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3105\r\n"},{"Id":"11975752358","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:11:30","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7934","RelatedDescription":"Opened issue \"Improve ToU readability\" (#7934) at NuGet/NuGetGallery","RelatedBody":"“You acknowledge that code (object or source) and related technology available via the Services (collectively, “Code”) may be subject to export control and economic sanctions laws, regulations, or orders of the United States or any other applicable jurisdiction (collectively, “Export Laws”). In using the Services, you agree to comply with all applicable Export Laws **, including end-user, end use, and destination restrictions imposed by such Export Laws.** ”\r\n\r\nRemove the **bold** text."},{"Id":"11974255909","Type":"IssuesEvent","CreatedAt":"2020-04-06T17:49:47","Actor":"bbodenmiller","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7933","RelatedDescription":"Opened issue \"Download page showing incorrect latest version\" (#7933) at NuGet/NuGetGallery","RelatedBody":"### For issues regarding the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), file a bug on [NuGet Home](https://github.com/nuget/home/issues).\r\n\r\n### For issues connecting to NuGet.org, please refer to [this guide](https://docs.microsoft.com/en-us/nuget/faqs/nuget-faq#nugetorg-not-accessible).\r\n\r\n### For issues regarding your NuGet.org account, please refer to [this guide](https://docs.microsoft.com/en-us/nuget/faqs/nuget-faq#nugetorg-account-management).\r\n\r\n### Describe the bug\r\nhttps://www.nuget.org/downloads is showing 5.4 at top as latest when it is not the latest version 5.5.1 is\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. https://www.nuget.org/downloads\r\n\r\n### Expected behavior\r\nShow correct latest version at top\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/1192780/78588963-503b2380-77f4-11ea-8224-bfe142915b73.png)"},{"Id":"11974084537","Type":"IssuesEvent","CreatedAt":"2020-04-06T17:32:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7918","RelatedDescription":"Closed issue \"[C2R] Stop blocking on registration4\" (#7918) at NuGet/NuGetGallery","RelatedBody":"Releases:\r\n- [Instance B](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=631923)\r\n- [Instance A](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=632043)"},{"Id":"11973412152","Type":"IssuesEvent","CreatedAt":"2020-04-06T16:26:54","Actor":"markpiller","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7932","RelatedDescription":"Opened issue \"An administrator needs to claim ownership of the company by DNS validation of X before the application NuGet.Org can be provisioned\" (#7932) at NuGet/NuGetGallery","RelatedBody":"Trying to sign to my Nuget account and am getting this message:\r\n\r\n```\r\nAADSTS650051: Using application 'NuGet.Org' is currently not supported for your organization\r\n XXXX because it is in an unmanaged state. An administrator needs to claim ownership of the\r\n company by DNS validation of XXXX before the application NuGet.Org can be provisioned. \r\n\r\nTrace ID: 00a6abd7-0032-4e98-b22f-94d4026f4700 \r\nCorrelation ID: 3cda5e25-0c27-4c15-93df-166d1bfd9fe4 \r\nTimestamp: 2020-04-06 16:19:09Z\r\n```\r\nI was able to sign to this very account just last week. How do I go about claiming the ownership?"},{"Id":"11972371170","Type":"IssuesEvent","CreatedAt":"2020-04-06T14:57:27","Actor":"mihailmacarie","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7931","RelatedDescription":"Opened issue \"Incorrect syntax near the keyword 'IF'. returned while running 201904292139301_RemoveVulnerabilityDataFromPackageDeprecationModel.cs migration\" (#7931) at NuGet/NuGetGallery","RelatedBody":"I took the latest version master branch builded the solution configured the connection strings and ran: \r\n\r\n`Update-Database -ConfigurationTypeName MigrationsConfiguration`\r\n\r\nin Package Manager Console on NuGetGallery project.\r\n\r\nWhile running 201904292139301_RemoveVulnerabilityDataFromPackageDeprecationModel.cs migration the Incorrect syntax near the keyword 'IF'. \r\n\r\nThe fix this I had to replace :\r\n\r\n`Sql(\"ALTER TABLE [dbo].[PackageDeprecations] DROP CONSTRAINT IF EXISTS [dbo.PackageDeprecations_CVSSRating];\");`\r\n \r\nwith\r\n\r\n`Sql(\"IF EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'[dbo.PackageDeprecations_CVSSRating]') AND parent_object_id = OBJECT_ID(N'[dbo].[PackageDeprecations]')) ALTER TABLE dbo.PackageDeprecations DROP CONSTRAINT [dbo.PackageDeprecations_CVSSRating];\");`\r\n            "},{"Id":"11965083134","Type":"IssuesEvent","CreatedAt":"2020-04-05T21:58:24","Actor":"dariogriffo","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7930","RelatedDescription":"Closed issue \"Can't upload package, says Package name reserved.\" (#7930) at NuGet/NuGetGallery","RelatedBody":"Hi,\r\ni'm trying to upload package using \"Upload\" button at https://www.nuget.org/packages/upload, but i'm receiving \"The package ID 'NetCore.DependencyInjection.Modules' is not available.\". I checked that package name - it not used at nuget gallery.\r\n\r\nCan you help me with this?"},{"Id":"11959357290","Type":"PullRequestEvent","CreatedAt":"2020-04-04T21:38:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7929","RelatedDescription":"Merged pull request \"Update to latest ServerCommon\" (#7929) at NuGet/NuGetGallery","RelatedBody":"This brings in the NoWarn and the 3.0.0.0 assembly version for ServerCommon assemblies.\r\nDepends on https://github.com/NuGet/NuGet.Jobs/pull/880"},{"Id":"11956340135","Type":"IssuesEvent","CreatedAt":"2020-04-04T09:55:15","Actor":"dariogriffo","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7930","RelatedDescription":"Opened issue \"Can't upload package, says Package name reserved.\" (#7930) at NuGet/NuGetGallery","RelatedBody":"Hi,\r\ni'm trying to upload package using \"Upload\" button at https://www.nuget.org/packages/upload, but i'm receiving \"The package ID 'NetCore.DependencyInjection.Modules' is not available.\". I checked that package name - it not used at nuget gallery.\r\n\r\nCan you help me with this?"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11977311668","Type":"IssuesEvent","CreatedAt":"2020-04-07T01:20:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8133","RelatedDescription":"Reopened issue \"Pack targets extensibility - Make the project reference driven package references possible to overwrite\" (#8133) at NuGet/Home","RelatedBody":"This effectively means modifying the information usually processed through the assets file. \r\n\r\nThere's a related internal thread raised by @AArnott \r\n\r\nNuGet's behavior is undefined when the project reference target framework gets changed/stripped out. \r\n\r\nRelated threads for investigation: \r\n\r\nhttps://github.com/microsoft/vs-threading\r\nhttps://github.com/microsoft/vs-threading/issues/483\r\n\r\nOther scenarios are including references to native projects and making them packable through the targets. \r\n\r\nNote that this wouldn't be a recommended scenario, but there should be an escape hatch for special scenarios that are difficult to support natively. "},{"Id":"11977056839","Type":"IssuesEvent","CreatedAt":"2020-04-07T00:32:17","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9360","RelatedDescription":"Closed issue \"StockSharp 5.0.0 не доступен для скачивания через Nuget\" (#9360) at NuGet/Home","RelatedBody":""},{"Id":"11976308714","Type":"IssuesEvent","CreatedAt":"2020-04-06T22:23:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8133","RelatedDescription":"Closed issue \"Pack targets extensibility - Make the project reference driven package references possible to overwrite\" (#8133) at NuGet/Home","RelatedBody":"This effectively means modifying the information usually processed through the assets file. \r\n\r\nThere's a related internal thread raised by @AArnott \r\n\r\nNuGet's behavior is undefined when the project reference target framework gets changed/stripped out. \r\n\r\nRelated threads for investigation: \r\n\r\nhttps://github.com/microsoft/vs-threading\r\nhttps://github.com/microsoft/vs-threading/issues/483\r\n\r\nOther scenarios are including references to native projects and making them packable through the targets. \r\n\r\nNote that this wouldn't be a recommended scenario, but there should be an escape hatch for special scenarios that are difficult to support natively. "},{"Id":"11976292757","Type":"IssuesEvent","CreatedAt":"2020-04-06T22:21:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9153","RelatedDescription":"Closed issue \"We use the csproj to build the nuget package. So how do I extend the dependencies from csproj?\" (#9153) at NuGet/Home","RelatedBody":"having csproj and nuspec named the same and merging them is not explained at all\n\nTokens such as `$CommonMetadataElements$` and `$CommonFileElements$` are not documented and google searches are not great either for explaining them.\n\nI wonder if there are other special tokens I am not aware of.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 06a19d7d-253d-f17f-6421-624c9867473d\n* Version Independent ID: cc37eb17-f715-080c-7bfc-9eae868d50ba\n* Content: [.nuspec File Reference for NuGet](https://docs.microsoft.com/en-us/nuget/reference/nuspec#feedback)\n* Content Source: [docs/reference/nuspec.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/reference/nuspec.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"},{"Id":"11976067321","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:50:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7496","RelatedDescription":"Closed issue \"Imports and EnsureNuGetPackageBuildImports target not being added to project when installed\" (#7496) at NuGet/Home","RelatedBody":"I created a custom project type and when I add a NuGet package in Visual Studio, the imports and EnsureNuGetPackageBuildImports target is not being added to the project file. The project is using a packages.config file.\r\n\r\nI was debugging with dotPeek and found that in VsMSBuildProjectSystem, the imports were being added correctly and I could see it in the Xml property of MSBuildEvaluationProject. But once the install was complete, the project file was not updated and no changes were saved.\r\n\r\nI downloaded this repo and built commit version 5.0.0.5495 to debug. I added a save in MicrosoftBuildEvaluationProjectUtility.AddImportStatement\r\n`\r\n                AddEnsureImportedTarget(msBuildProject, targetsPath);\r\n                msBuildProject.ReevaluateIfNecessary();\r\n                msBuildProject.Save(); // Added this line\r\n`\r\n\r\nand the project is saved correctly with the imports!\r\n\r\nHowever, at the end of NuGetPackageManager.ExecuteNuGetProjectActionsAsync it calls\r\n`await nuGetProject.SaveAsync(token);`\r\nand the changes are reverted back.\r\n\r\nI checked the history of VsMSBuildProjectSystem and found that this commit fixes the problem!\r\nhttps://github.com/NuGet/NuGet.Client/commit/4102a9a95ed1d1da3b10391fdfdf3395b284ad56\r\nHowever, it appears it was reverted shortly after.\r\n\r\nI'm using Visual Studio Community 15.8.9\r\n\r\n_If you're wondering why I used that commit it's because the configure powershell script was not working. I reverted back until it did work. It appears it was trying to run MSBuild from the Enterprise folder, but I only have Community edition. Must have broke somewhere since 5.0.0.5495. Let me know if you would like me to create another issue for that._"},{"Id":"11975983260","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:39:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6693","RelatedDescription":"Closed issue \"Referencing multiple package versions within one project with extern aliases\" (#6693) at NuGet/Home","RelatedBody":"I need to reference multiple versions of the same package within one project and use extern aliases to use them in code.\r\n\r\nReason: I'm building a package which I want to support multiple versions of a dependency. Having just one package simplifies usage and versioning of the package, but complicates code and uh... project architecture in my solution. More background and reasoning can be found in StackOverflow question [Supporting multiple versions of NuGet package in one library / NuGet package](https://stackoverflow.com/questions/49307481/supporting-multiple-versions-of-nuget-package-in-one-library-nuget-package).\r\n\r\nIf I understand correctly, NuGet supports neither [referencing multiple versions of a package](http://web.archive.org/web/20150805044953/http://nuget.codeplex.com/workitem/964), nor [extern aliases](https://github.com/NuGet/Home/issues/4989). For extern aliases, there's a [workaround](https://github.com/NuGet/Home/issues/4989#issuecomment-311042085), but it doesn't work for me, as my references have the same name. So, I need to find workarounds for both issues.\r\n\r\nI kinda got it to work. However, I don't understand many details and receieve tons of warnings. So far, my architecture is:\r\n\r\n* `Alba.CsConsoleFormat.Ref.CommandLineParser-1.9.csproj` and `Alba.CsConsoleFormat.Ref.CommandLineParser-2.2.csproj` projects just to reference packages and force NuGet to cache them. Code:\r\n\r\n    ```xml\r\n    <ItemGroup>\r\n      <PackageReference Include=\"CommandLineParser\" Version=\"1.9.71\" ReferenceOutputAssembly=\"false\" ExcludeAssets=\"all\" />\r\n    </ItemGroup>\r\n    ```\r\n\r\n* `Alba.CsConsoleFormat.CommandLineParser.csproj` project with the actual code which uses two projects above as dependencies. Code:\r\n\r\n    ```xml\r\n    <PropertyGroup>\r\n      <VersionClp19>1.9.71</VersionClp19>\r\n      <VersionClp22>2.2.0</VersionClp22>\r\n      <DefineConstants Condition=\"'$(TargetFramework)' != 'netstandard1.5'\">$(DefineConstants);CLP_19;CLP_22</DefineConstants>\r\n      <DefineConstants Condition=\"'$(TargetFramework)' == 'netstandard1.5'\">$(DefineConstants);CLP_22</DefineConstants>\r\n      <NuGetClp19Dir>$(NuGetPackageRoot)commandlineparser\\$(VersionClp19)\\lib\\</NuGetClp19Dir>\r\n      <NuGetClp22Dir>$(NuGetPackageRoot)commandlineparser\\$(VersionClp22)\\lib\\</NuGetClp22Dir>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n      <PackageReference Condition=\"'$(TargetFramework)' != 'netstandard1.5'\" Include=\"CommandLineParser\" Version=\"$(VersionClp19)\" ReferenceOutputAssembly=\"false\" ExcludeAssets=\"compile\" />\r\n      <PackageReference Condition=\"'$(TargetFramework)' == 'netstandard1.5'\" Include=\"CommandLineParser\" Version=\"$(VersionClp22)\" ReferenceOutputAssembly=\"false\" ExcludeAssets=\"compile\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n      <ProjectReference Include=\"$(LibraryRefPathPrefix)CommandLineParser-1.9.csproj\" ReferenceOutputAssembly=\"false\" ExcludeAssets=\"all\" />\r\n      <ProjectReference Include=\"$(LibraryRefPathPrefix)CommandLineParser-2.2.csproj\" ReferenceOutputAssembly=\"false\" ExcludeAssets=\"all\" />\r\n      <Reference Include=\"$(NuGetClp19Dir)$(TargetFramework)\\CommandLine.dll\" Aliases=\"CommandLineParser_1_9\" />\r\n      <Reference Include=\"$(NuGetClp22Dir)$(TargetFramework)\\CommandLine.dll\" Aliases=\"CommandLineParser_2_2\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n      <Reference Include=\"$(NuGetClp19Dir)$(TargetFramework)\\CommandLine.dll\" Aliases=\"CommandLineParser_1_9\" />\r\n      <Reference Include=\"$(NuGetClp22Dir)$(TargetFramework)\\CommandLine.dll\" Aliases=\"CommandLineParser_2_2\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard1.5'\">\r\n      <Reference Include=\"$(NuGetClp22Dir)$(TargetFramework)\\CommandLine.dll\" Aliases=\"CommandLineParser_2_2\" />\r\n      <Compile Remove=\"Models/OptionInfo19.cs\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n      <Reference Include=\"$(NuGetClp19Dir)net45\\CommandLine.dll\" Aliases=\"CommandLineParser_1_9\" />\r\n      <Reference Include=\"$(NuGetClp22Dir)netstandard1.5\\CommandLine.dll\" Aliases=\"CommandLineParser_2_2\" />\r\n    </ItemGroup>\r\n    ```\r\n\r\nProblems I have:\r\n\r\n1. Projects I use for receiving specific versions of dependency still produce binaries. Ideally, I'd like some sort of project which supports `<PackageReference>`, but doesn't cause any compilation. Can this be done?\r\n\r\n1. Just `ExcludeAssets=\"all\"` should probably be enough, but without `ReferenceOutputAssembly=\"false\"` my build randomly fails (some of devenv build, dotnet build, msbuild, CI AppVeyor build fail, some don't, some always, some only if not incremental, just very inconsistent in general).\r\n\r\n1. I have to include `<PackageReference Include=\"CommandLineParser\" />` in the main project, otherwise I can't get NuGet to list the dependencies in .nuspec. If I understand correctly, .nuspec is generated based on `project.assets.json`, and there's no way to \"merge\" with manual .nuspec, so there's no other way.\r\n\r\n1. I have to put `ExcludeAssets=\"compile\"` on `<PackageReference>`, otherwise I get errors about missing extern aliases. This turns into `<dependency exclude=\"Compile,Build,Analyzers\">` in .nuspec, but I don't understand how it actually impacts anything.\r\n\r\n1. The actual range of versions I support is `[1.9.71],[2.2.0,)`, but looks like I can't specify anything like that.\r\n\r\n1. Even if I put `ReferenceOutputAssembly=\"false\" ExcludeAssets=\"all\"` on `<ProjectReference>`, it still checks for binary compatibility, so I have to put references into only one framework `Condition=\"'$(TargetFramework)' == 'net45'\"`.\r\n\r\n1. I receive tons of warning about versions:\r\n\r\n    * > warning **NU1701**: Package '**CommandLineParser 1.9.71**' was restored using '**.NETFramework,Version=v4.6.1**' instead of the project target framework '**.NETStandard,Version=v2.0**'. This package may not be fully compatible with your project.\r\n\r\n        I guess `<NoWarn>NU1701</NoWarn>` would solve that, but I'll leave it for now.\r\n\r\n    * > **C:\\Program Files\\dotnet\\sdk\\2.1.4\\Microsoft.Common.CurrentVersion.targets(2041,5)**: warning **MSB3243**: No way to resolve conflict between \"**CommandLine, Version=2.2.0.0, Culture=neutral, PublicKeyToken=de6f01bd326f8c32**\" and \"**CommandLine, Version=1.9.71.2, Culture=neutral, PublicKeyToken=de6f01bd326f8c32**\". Choosing \"**CommandLine, Version=2.2.0.0, Culture=neutral, PublicKeyToken=de6f01bd326f8c32**\" arbitrarily. *[C:\\Docs\\Projects\\CsConsoleFormat\\Alba.CsConsoleFormat.CommandLineParser\\Alba.CsConsoleFormat.CommandLineParser.csproj]*  \r\n        Consider app.config remapping of assembly \"**CommandLine, Culture=neutral, PublicKeyToken=de6f01bd326f8c32**\" from Version \"**1.9.71.2**\" *[C:\\Users\\Athari\\.nuget\\packages\\commandlineparser\\1.9.71\\lib\\net40\\CommandLine.dll]* to Version \"**2.2.0.0**\" *[C:\\Users\\Athari\\.nuget\\packages\\commandlineparser\\2.2.0\\lib\\net40\\CommandLine.dll]* to solve conflict and get rid of warning.\r\n\r\n        I'm confused on many levels:\r\n        * There's no need to solve any conflicts. The libraries are just references, nothing should be copied. Why do I get this?\r\n        * I can't add \"app.config\" to a library, can I? Why is it suggested?\r\n        * What does \"arbitrarily\" mean? It seems to consistently choose the highest version.\r\n\r\n    * > **C:\\Program Files\\dotnet\\sdk\\2.1.4\\Microsoft.Common.CurrentVersion.targets(2041,5)**: warning **MSB3277**: Found conflicts between different versions of \"**CommandLine**\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. *[C:\\Docs\\Projects\\CsConsoleFormat\\Alba.CsConsoleFormat.Sample.ProcessManager\\Alba.CsConsoleFormat.Sample.ProcessManager.csproj]*\r\n\r\n        This project references one specific version `CommandLine 1.9.17`, it references `Alba.CsConsoleFormat.CommandLineParser.csproj`, which for .NET 4.5 depends on `CommandLine >=1.9.17`. There's a second-level dependecy on `Alba.CsConsoleFormat.Ref.CommandLineParser-2.2.csproj`, but shouldn't all these `ReferenceOutputAssembly=\"false\" ExcludeAssets=\"all\"` make reference irrelevant?\r\n\r\n        One time I tried these \"verbose\" build logs, I got like 100 MB of unreadable logs, so if I don't know what to search for, it won't help me.\r\n\r\n[Whole CsConsoleFormat project](https://github.com/Athari/CsConsoleFormat) ([permalink to current commit](https://github.com/Athari/CsConsoleFormat/tree/29597813998aa9baa3739cc53252a8e62237afae)).\r\n\r\nAny suggestions on how I should approach my requirements? Any hints on how to resolve all issues I mentioned above?\r\n\r\nI guess this is the only place where I can get answers.\r\n\r\n----\r\n\r\n* VS: 15.5.6\r\n* dotnet: 2.1.4\r\n* OS: Windows 10 64-bit version 1709 build 16299.125"},{"Id":"11975965145","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:36:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8253","RelatedDescription":"Closed issue \"nuget pack packs NUnit test adapter\" (#8253) at NuGet/Home","RelatedBody":"If a project contains NUnit test adapter v2 and a `nuget pack myproject.csproj` is called, nuget does add the files to the content folder. Defining the dependency to `NUnitTestAdapter` as `developmentDependency` does not help since the package imports `.props` files.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.0.2.5988\r\n\r\ndotnet.exe --version (if appropriate): -\r\n\r\nVS version (if appropriate): - \r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Microsoft Windows [Version 10.0.17763.379]\r\n\r\nWorked before? If so, with which NuGet version: - \r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create an assembly and add `NUnitTestAdapter` NuGet package. \r\n\r\n2. Run `nuget pack myproject.csproj`\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n```\r\nWARNING: NU5100: The assembly 'content\\NUnit.VisualStudio.TestAdapter.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\Mono.Cecil.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\Mono.Cecil.Mdb.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\Mono.Cecil.Pdb.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\Mono.Cecil.Rocks.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\nunit.core.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\nunit.core.interfaces.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\nWARNING: NU5100: The assembly 'content\\nunit.util.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced.\r\n```\r\n\r\n### Sample Project\r\n\r\nSee https://github.com/pascalberger/nu5100-testadapter-repro \r\n\r\n"},{"Id":"11975891687","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:27:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9373","RelatedDescription":"Closed issue \"NU5123 (possibly other warnings) are not treated correctly with TreatWarningsAsErrors\" (#9373) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): **The \"Pack\" target from Microsoft.NET.Sdk** (dotnet\\sdk\\3.1.200\\Sdks\\NuGet.Build.Tasks.Pack)\r\n\r\nNuGet version (x.x.x.xxx): **5.5.0-rtm.6473+4ba7bfa82f894ec32a554ca8d2df143675c85735.4ba7bfa82f894ec32a554ca8d2df143675c85735**\r\n\r\ndotnet.exe --version (if appropriate): **3.1.200**\r\n\r\nVS version (if appropriate): n/a\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): n/a\r\n\r\nWorked before? If so, with which NuGet version: n/a\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n- Have `<TreatWarningsAsErrors>true</TreatWarningsAsErrors>` in an SDK-style csproj.\r\n- Simulate a `NU5123` warning (should be turned into error).\r\n- You can do so by using a code like this (create the `some-file.txt`, and then use this csproj snippet):\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n</PropertyGroup>\r\n\r\n<ItemGroup>\r\n  <None Include=\"some-file.txt\">\r\n    <Pack>true</Pack>\r\n    <PackagePath>content\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\very-long-path\\</PackagePath>\r\n  </None>\r\n</ItemGroup>\r\n```\r\n\r\n- Run `dotnet pack` on the project\r\n- The NU5123 will be propagated to error. But the package will **still be generated** and the `dotnet pack` **call will be successful**. The errors will be reported as errors though -- that makes it strange -- it's successful, but there are errors?\r\n- I expect that the package will not be generated, or at the very least that the result will be an error, not a success. Otherwise, even if an error happens, everything appears to be green (e.g. in CI environment). Basically the warning is still not treated as an error, it's only displayed in red and appears in the error section, but everything else still looks green and successful (program exit code is 0 to be specific).\r\n\r\n\r\n"},{"Id":"11975878040","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:26:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9375","RelatedDescription":"Closed issue \"Allow for a \"Debug\" or \"Developer\" mode of package\" (#9375) at NuGet/Home","RelatedBody":"Many times when dealing with local Nugets, it can be very easy to be in a state where someone tries to build your project, only to have different behavior, only to realize later that it's because the nuget was already restored and that's why behavior is different. It would be great if there was a concept of a \"Debug\" or \"Developer\" mode package that would always restore so that you know it's up to date. Having to update the version number is tedious/manual and can easily be forgotten. \r\n"},{"Id":"11975874431","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:25:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9273","RelatedDescription":"Closed issue \"Need nuget package priority for local debugging/testing\" (#9273) at NuGet/Home","RelatedBody":"## Cannot predictably get local debug bits using Nuget.config\r\n\r\nThe current spec says when there are multiple sources in your Nuget.config \"the fastest one wins\".  This results in unpredictable development experience.  For example, I'm developing a new nuget package, and I have a bunch of tests to test it.  But if my test projects want to reference my new local bits I tried this:\r\n```\r\n    <add key=\"Coyote\" value=\"../Coyote/bin\"/>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n```\r\n\r\nbut it doesn't work.  It sill picks up the version on nuget.org, even if I nuke all local \"packages\" caches.\r\n\r\nSo what I really need is a way to tell Nuget to just for now, please really use the local bits if you can, thanks.  If this is by priority great, but perhaps you could be even smarter and do it based on file timestamps.\r\n\r\nNuGet version; 5.4.0.6315\r\n\r\ndotnet.exe --version: 3.1.101\r\n\r\nVS version: 2019\r\n\r\nOS version: win10 1903 (18362.657)\r\n"},{"Id":"11975781798","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:14:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6079","RelatedDescription":"Closed issue \"NuGet restore failures in packaging projects (wapproj)\" (#6079) at NuGet/Home","RelatedBody":"VS2017 Update 4 includes a new project type to create APPX packages for Windows Desktop projects.\r\n\r\nCalling `msbuild /t:restore` at solution level generates the error:\r\n\r\n```\r\nerror NU1201: Project MyProject is not compatible with uap1\r\n0.0.14393 (UAP,Version=v10.0.14393). Project MyProject supports: net461 (.NETFramework,Version=v4.6.1) \r\n```\r\n\r\nReproduced in https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/pull/228 \r\n\r\n\r\n"},{"Id":"11975758604","Type":"IssuesEvent","CreatedAt":"2020-04-06T21:12:14","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5606","RelatedDescription":"Closed issue \"(UWP) Platform Dependent UWP Library fails due to Compile-Time Reference Assembly Missing\" (#5606) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuget Package Manager\r\n\r\nNuGet version:\r\nPackage Manager Console Host Version 4.3.0.4199\r\n\r\nVS version (if appropriate):\r\nVisual Studio Community 2017 + Preview\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nWindows 10 Pro Insider Preview 16237\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI'm trying to package and use my UWP Shared Code Library into NuGet so that I can use it on my apps. Since it references FFmpegInterop and the Microsoft Advertising SDK and other Platform Dependent Code, I can't use lib/uap10.0, so I have the 3 runtime folders and one folder for Reference (Here are my nuspec file references):\r\n```xml\r\n    <!-- Library -->\r\n    <file src=\"$binaries$\\Reference\\Lib-Core.dll\" target=\"ref\\uap10.0\" />\r\n    <file src=\"$binaries$\\Reference\\Lib-UWP.dll\" target=\"ref\\uap10.0\" />\r\n\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-Core.dll\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-Core.pdb\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-UWP.dll\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-UWP.pdb\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-UWP.pri\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-UWP\\**\\*.*\" target=\"runtimes\\win10-arm\\native\\Lib-UWP\" />\r\n\r\n    <file src=\"$binaries$\\x86\\Release\\Lib-Core.dll\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-Core.pdb\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\x86\\Release\\Lib-UWP.dll\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"$binaries$\\x86\\Release\\Lib-UWP.pdb\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"$binaries$\\x86\\Release\\Lib-UWP.pri\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"$binaries$\\x86\\Release\\Lib-UWP\\**\\*.*\" target=\"runtimes\\win10-x86\\native\\Lib-UWP\" />\r\n\r\n    <file src=\"$binaries$\\x64\\Release\\Lib-Core.dll\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\ARM\\Release\\Lib-Core.pdb\" target=\"runtimes\\win10-arm\\native\" />\r\n    <file src=\"$binaries$\\x64\\Release\\Lib-UWP.dll\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"$binaries$\\x64\\Release\\Lib-UWP.pdb\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"$binaries$\\x64\\Release\\Lib-UWP.pri\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"$binaries$\\x64\\Release\\Lib-UWP\\**\\*.*\" target=\"runtimes\\win10-x64\\native\\Lib-UWP\" />\r\n```\r\n\r\nI am aware of #1221, which is why I have Reference assemblies, (Both run through CorFlags before added to my package as a reference Assembly, all using a Cake Build Script).\r\n\r\nHowever,\r\nIf I try to add the Package to my UWP apps, I get:\r\n```\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-arm.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-arm.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-arm-aot.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-arm-aot.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x64.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x64.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x64-aot.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x64-aot.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x86.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x86.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-Core on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x86-aot.\r\nNU1203: WilliamABradley.Shared.UWP 1.0.0 provides a compile-time reference assembly for Lib-UWP on UAP,Version=v10.0.14393, but there is no run-time assembly compatible with win10-x86-aot.\r\n```\r\n\r\nI can force the Package by opening the Project.json file and adding the reference (I used to use Package Reference, but I switched back because I thought it might cause problems for my test app).\r\nIt seems to compile and run from Debug and Release on all Platform variants, so I'm not sure what is going on here, although Package Restore will always fail, and wont download anymore Packages with this Package here :(\r\n\r\nCould it be that the Output folder of the runtime assemblies don't match the reference assemblies, and it is getting confused?\r\n\r\n### Sample Project\r\nI can provide a link to anyone requiring my Library and the Test App via email if needed."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-04-07T05:30:39.4528653Z","RunDurationInMilliseconds":1666}