{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null},{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":72,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null},{"Title":"Announcing ML.NET 1.0","PublishedOn":"2019-05-06T18:51:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are excited to announce the release of ML.NET 1.0 today.  ML.NET is a free, cross-platform and open source machine learning framework designed to bring the power of machine learning (ML) into .NET...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 5","PublishedOn":"2019-05-06T16:01:05+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 5. It includes a new Json serializer, support for publishing single file executables, an update to runtime roll-forward, and changes in the BCL. If you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/","RawContent":null},{"Title":"Introducing .NET 5","PublishedOn":"2019-05-06T16:00:50+00:00","CommentsCount":137,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family.\nThere will be just one .NET going forward, and you will be...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-5/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2019 Update","PublishedOn":"2019-04-30T05:19:15+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"DockerCon 2019 is being held this week, in San Francisco. We posted a DockerCon 2018 update last year, and it is time to share how we&#8217;ve improved the experience of using .NET and Docker together...","Href":"https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/","RawContent":null},{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9590966306","Type":"IssuesEvent","CreatedAt":"2019-05-09T03:30:39","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/8465","RelatedDescription":"Closed issue \"SIGSEGV_libcoreclr.so!DomainFile::IsIntrospectionOnly\" (#8465) at dotnet/coreclr","RelatedBody":"\r\n**The notes  included in this bug refer tot the dump [20161130-11_001C.zip](https://dumpling.azurewebsites.net/api/dumplings/archived/17579a7c89ee0d476efd449eb9e79eaa5a6e2bf0).  A full list of all the dumps collected for this issue in the past 90 days can be found [here](https://dumpling.azurewebsites.net/90?FAILURE_HASH=SIGSEGV_libcoreclr.so%21DomainFile%3A%3AIsIntrospectionOnly).**\r\n\r\n        LAST_EXCEPTION:\r\n        There is no current managed exception on this thread\r\n\r\n\r\n        STOP_REASON:\r\n        SIGSEGV\r\n\r\n        FAULT_SYMBOL:\r\n        libcoreclr.so!DomainFile::IsIntrospectionOnly\r\n\r\n        FAILURE_HASH:\r\n        SIGSEGV_libcoreclr.so!DomainFile::IsIntrospectionOnly\r\n\r\n        FAULT_STACK:\r\n        libcoreclr.so!DomainFile::IsIntrospectionOnly()\r\n        libcoreclr.so!AppDomain::AssemblyIterator::Next_Unlocked(CollectibleAssemblyHolder<DomainAssembly*>*)\r\n        libcoreclr.so!AppDomain::AssemblyIterator::Next(CollectibleAssemblyHolder<DomainAssembly*>*)\r\n        libcoreclr.so!InstantiatedMethodDesc::NewInstantiatedMethodDesc(MethodTable*, MethodDesc*, MethodDesc*, Instantiation, int)\r\n        libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDesc(MethodDesc*, MethodTable*, int, Instantiation, int, int, int, ClassLoadLevel)\r\n        libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDesc(MethodDesc*, MethodTable*, int, Instantiation, int, int, int, ClassLoadLevel)\r\n        libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDescForReflection(MethodDesc*, TypeHandle, Instantiation)\r\n        libcoreclr.so!RuntimeMethodHandle::GetStubIfNeeded(MethodDesc*, ReflectClassBaseObject*, PtrArray*)\r\n        System.Private.CoreLib.ni.dll!System.Reflection.RuntimeMethodInfo.MakeGenericMethod(System.Type[])\r\n        System.Reflection.Emit.ILGeneration.Tests.dll!System.Reflection.Emit.Tests.ILGeneratorEmit1.PosTest5()\r\n        20161130-11_001C.exe!stress.generated.UnitTests.UT1C()\r\n        stress.execution.dll!stress.execution.UnitTest.Execute()\r\n        stress.execution.dll!stress.execution.DedicatedThreadWorkerStrategy.RunWorker(stress.execution.ITestPattern, System.Threading.CancellationToken)\r\n        stress.execution.dll!stress.execution.DedicatedThreadWorkerStrategy+<>c__DisplayClass1_0.<SpawnWorker>b__0()\r\n        System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.Execute()\r\n        System.Private.CoreLib.ni.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n        System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n        System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n        System.Private.CoreLib.ni.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n        libcoreclr.so!CallDescrWorkerInternal\r\n        libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int)\r\n        libcoreclr.so!ThreadNative::KickOffThread_Worker(void*)\r\n        libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)\r\n        libcoreclr.so!ManagedThreadBase::KickOff(ADID, void (*)(void*), void*)\r\n        libcoreclr.so!ThreadNative::KickOffThread(void*)\r\n        libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*)\r\n        libpthread.so.0!start_thread\r\n        libc.so.6!clone\r\n\r\n        FAULT_THREAD:\r\n        thread #1: tid = 53908, 0x00007f79fae6ff64 libcoreclr.so`DomainFile::IsIntrospectionOnly() + 4, name = 'corerun', stop reason = signal SIGSEGV\r\n        (lldb) clrstack -F\r\n        OS Thread Id: 0xd294 (1)\r\n                Child SP               IP Call Site\r\n        00007F796341DFA8 00007F79FAE6FF64 libcoreclr.so!DomainFile::IsIntrospectionOnly() + 4\r\n        00007F796341DFB0 00007F79FAE25402 libcoreclr.so!AppDomain::AssemblyIterator::Next_Unlocked(CollectibleAssemblyHolder<DomainAssembly*>*) + 114\r\n        00007F796341DFE0 00007F79FAE0F29D libcoreclr.so!AppDomain::AssemblyIterator::Next(CollectibleAssemblyHolder<DomainAssembly*>*) + 45\r\n        00007F796341E010 00007F79FAD573D3 libcoreclr.so!InstantiatedMethodDesc::NewInstantiatedMethodDesc(MethodTable*, MethodDesc*, MethodDesc*, Instantiation, int) + 707\r\n        00007F796341E3D0 00007F79FAD59087 libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDesc(MethodDesc*, MethodTable*, int, Instantiation, int, int, int, ClassLoadLevel) + 3799\r\n        00007F796341EBA0 00007F79FAD590D5 libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDesc(MethodDesc*, MethodTable*, int, Instantiation, int, int, int, ClassLoadLevel) + 3877\r\n        00007F796341F370 00007F79FAD593C1 libcoreclr.so!MethodDesc::FindOrCreateAssociatedMethodDescForReflection(MethodDesc*, TypeHandle, Instantiation) + 321\r\n        00007F796341F3E0 00007F79FADB59F3 libcoreclr.so!RuntimeMethodHandle::GetStubIfNeeded(MethodDesc*, ReflectClassBaseObject*, PtrArray*) + 723\r\n        00007F796341F448                  [HelperMethodFrame_2OBJ: 00007f796341f448] System.Private.CoreLib.ni.dll!System.RuntimeMethodHandle.GetStubIfNeeded(System.RuntimeMethodHandleInternal, System.RuntimeType, System.RuntimeType[])\r\n        00007F796341F580 00007F79815A5124 System.Private.CoreLib.ni.dll!System.Reflection.RuntimeMethodInfo.MakeGenericMethod(System.Type[]) + 324\r\n        00007F796341F5D0 00007F79821C8767 System.Reflection.Emit.ILGeneration.Tests.dll!System.Reflection.Emit.Tests.ILGeneratorEmit1.PosTest5() + 583\r\n        00007F796341F630 00007F79821C7F6A 20161130-11_001C.exe!stress.generated.UnitTests.UT1C() + 74\r\n        00007F796341F650 00007F7981AA8D26 stress.execution.dll!stress.execution.UnitTest.Execute() + 166\r\n        00007F796341F6E0 00007F7981AA8B5E stress.execution.dll!stress.execution.DedicatedThreadWorkerStrategy.RunWorker(stress.execution.ITestPattern, System.Threading.CancellationToken) + 110\r\n        00007F796341F730 00007F7981AA8ACC stress.execution.dll!stress.execution.DedicatedThreadWorkerStrategy+<>c__DisplayClass1_0.<SpawnWorker>b__0() + 108\r\n        00007F796341F770 00007F79816269D6 System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.Execute() + 70\r\n        00007F796341F7A0 00007F79815D6E71 System.Private.CoreLib.ni.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) + 113\r\n        00007F796341F7F0 00007F7981626FD7 System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) + 663\r\n        00007F796341F8B0 00007F7981626CF8 System.Private.CoreLib.ni.dll!System.Threading.Tasks.Task.ExecuteEntry(Boolean) + 152\r\n        00007F796341F8D0 00007F79815D6E71 System.Private.CoreLib.ni.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) + 113\r\n        00007F796341F920 00007F79FAE0D037 libcoreclr.so!CallDescrWorkerInternal + 124\r\n        00007F796341F940 00007F79FAD20ADC libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 876\r\n        00007F796341FB00 00007F79FAD2BA92 libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) + 482\r\n        00007F796341FB10                  [GCFrame: 00007f796341fb10]\r\n        00007F796341FCA0 00007F79FACF0B5E libcoreclr.so!ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 430\r\n        00007F796341FCF0                  [DebuggerU2MCatchHandlerFrame: 00007f796341fcf0]\r\n        00007F796341FDC0 00007F79FACF12B6 libcoreclr.so!ManagedThreadBase::KickOff(ADID, void (*)(void*), void*) + 70\r\n        00007F796341FE10 00007F79FAD2BCAB libcoreclr.so!ThreadNative::KickOffThread(void*) + 331\r\n        00007F796341FEC0 00007F79FB0A4789 libcoreclr.so!CorUnix::CPalThread::ThreadEntry(void*) + 297\r\n        00007F796341FEE0 00007F79FC090184 libpthread.so.0!start_thread + 196\r\n        00007F796341FF80 00007F79FB59D37D libc.so.6!clone + 109\r\n\r\n**The problem here appears to be that GetFile() (inlined method which just check returns a field) returns null which seems to be unexpected.**  \r\n\r\n        BOOL DomainFile::IsIntrospectionOnly()\r\n        {\r\n            WRAPPER_NO_CONTRACT;\r\n            return GetFile()->IsIntrospectionOnly();\r\n        }\r\n        \r\n        (lldb) dis -F intel\r\n        libcoreclr.so`DomainFile::IsIntrospectionOnly:\r\n            0x7f79fae6ff60 <+0>:  mov    rax, qword ptr [rdi + 0x10]\r\n        ->  0x7f79fae6ff64 <+4>:  mov    eax, dword ptr [rax + 0x60]\r\n            0x7f79fae6ff67 <+7>:  shr    eax, 0xa\r\n            0x7f79fae6ff6a <+10>: and    eax, 0x1\r\n            0x7f79fae6ff6d <+13>: ret\r\n\r\n        (lldb) reg read\r\n        General Purpose Registers:\r\n        rax = 0x0000000000000000\r\n        rdi = 0x00007f7920740350\r\n\r\n        (lldb) mem read -s8 -fx -c4 0x00007f7920740350+0x10\r\n        0x7f7920740360: 0x0000000000000000 0x00007f7914760478\r\n        0x7f7920740370: 0x00007f792073fc78 0x0000000000fe9088\r\n\r\n**Perhaps it is assumed this will be set before aquiring the critical seciontion in frame 3:**  *libcoreclr.so!AppDomain::AssemblyIterator::Next(CollectibleAssemblyHolder<DomainAssembly*>*) + 45*\r\n\r\n        AppDomain::AssemblyIterator::Next(\r\n            CollectibleAssemblyHolder<DomainAssembly *> * pDomainAssemblyHolder)\r\n        {\r\n            CONTRACTL {\r\n                NOTHROW;\r\n                WRAPPER(GC_TRIGGERS); // Triggers only in MODE_COOPERATIVE (by taking the lock)\r\n                MODE_ANY;\r\n            } CONTRACTL_END;\r\n            \r\n            CrstHolder ch(m_pAppDomain->GetAssemblyListLock());\r\n            return Next_Unlocked(pDomainAssemblyHolder);\r\n        }"},{"Id":"9590845168","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:55:30","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18405","RelatedDescription":"Closed issue \"Transition from .Net Framework to Coreclr : Moving from GACed Dlls\" (#18405) at dotnet/coreclr","RelatedBody":"We are porting our SDK from .NET Framework to Coreclr.\r\n\r\nAs a platform, we have SDK and runtime c# dlls. Most of them are nicely segregated. However, the bridge library between SDK and Runtime: A.dll is GACed in .Net Framework. Apps from SDK version X can run on cluster version Y where Y >=X. So, we get latest (Y) version of Dlls A always on cluster’s platform.\r\n\r\nProblem:\r\nThere are classes in sdk dlls like SDK_A.dll which inherit from types in A.dll. So, before even Main method is called, A.dll is searched and found in GAC in .Net Framework. Since there is no GAC in coreclr, we get FileNotFoundException for A.dll in coreclr. \r\n\r\nWhat we have tried:\r\n1. We have tried adding AssemblyResolver to load these A.dll from Runtime folder. That does not help as exception is thrown before any code (Program’s Main) is executed.\r\n2. We have looked at `dotnet strore` but it looks more complicated than GAC and it seems it was not designed as cross platform GAC. For e.g. we can't ask users to run `dotnet publish` with specific `manifest.xml`. It breaks development and packaging workflow for many developers.\r\n\r\nWhat are the guidelines for library and platform writers to move there Dlls from GAC when transitioning form .Net Framework to CoreClr?\r\n"},{"Id":"9590838789","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:53:37","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18692","RelatedDescription":"Closed issue \"Proposal: Re-introduce support for multi-module assemblies\" (#18692) at dotnet/coreclr","RelatedBody":"Is there a technical reason or downside to having multi-module assemblies in CoreCLR?\r\n\r\nhttps://github.com/dotnet/coreclr/commit/1aa7d6b8796f7e28a63162117c5bb16a207a472b removed the code associated with FEATURE_MULTIMODULE_ASSEMBLIES since it was never defined.\r\n\r\nIf there isn't, I'd like to propose we bring this feature back."},{"Id":"9590808966","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:44:59","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23564","RelatedDescription":"Closed issue \"Inconsistent behavior with Type.GetType compared to .NET Framework\" (#23564) at dotnet/coreclr","RelatedBody":"Given the the following program:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace GetTypeRepro\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Project is referencing Library.dll via PackageReference\r\n\r\n            //Uncomment this to see it work in netcoreapp3.0 (and netcoreapp2.2 if CopyLocalLockFileAssemblies is uncommented in the csproj)\r\n            //System.Reflection.Assembly.LoadFrom(\"GetTypeRepro.dll\");\r\n\r\n            var type1 = Type.GetType(\"Library.Class1, Library, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", true); // < package version\r\n            var type2 = Type.GetType(\"Library.Class1, Library, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null\", true); // == package version\r\n            var type3 = Type.GetType(\"Library.Class1, Library, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null\", true); // > package version\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThere appears to be inconsistent behavior between the .NET Framework and .NET Core.\r\n\r\nWhen run on `net472`, all three `Type.GetType` calls return the type from the referenced package.\r\n\r\nHowever, when run on `netcoreapp2.2` or `netcoreapp3.0`, the first two return the type as expected, but the third call throws an exception instead:\r\n```\r\n   System.IO.FileLoadException: Could not load file or assembly 'Library, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nFile name: 'Library, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   at System.RuntimeTypeHandle.GetTypeByName(String name, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMarkHandle stackMark, IntPtr pPrivHostBinder, Boolean loadTypeFromPartialName, ObjectHandleOnStack type, ObjectHandleOnStack keepalive)\r\n   at System.RuntimeTypeHandle.GetTypeByName(String name, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean loadTypeFromPartialName)\r\n   at System.RuntimeType.GetType(String typeName, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMark& stackMark)\r\n   at System.Type.GetType(String typeName, Boolean throwOnError)\r\n   at GetTypeRepro.Program.Main(String[] args) in C:\\Code\\GetTypeRepro\\GetTypeRepro\\Program.cs:line 18\r\n```\r\n\r\nOne discovery I've made while investigating this is that the exception can be avoided if the referenced assembly is located next to the application assembly. This is the default in `netcoreapp3.0`, and can be achieved on `netcoreapp2.2` as well be setting `CopyLocalLockFileAssemblies` to `true` in the project file.\r\n\r\nOnce that is done, if you first call  `Assembly.LoadFrom` on the application assembly, then the third `Type.GetType` stops throwing the exception and instead returns the type from the referenced assembly just like `net472` does. This doesn't prevent the exception if the assembly is still being referenced from the NuGet package cache, though.\r\n\r\nI have a runnable repro available at https://github.com/bording/GetTypeRepro\r\n\r\nThis behavior seems very strange to me. Have I come across a bug, or is this somehow working as intended?\r\n\r\n\r\n\r\n\r\n"},{"Id":"9590788370","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:39:09","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24445","RelatedDescription":"Closed issue \"Question on AssemblyLoadContext Proposal\" (#24445) at dotnet/coreclr","RelatedBody":"I'm referring to this proposal: https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/AssemblyLoadContext.ContextualReflection.md\r\n\r\nThe propose mechanism suggests that if an assembly cannot be loaded from the ALC set as the \"current\" context, then it would fallback to AssemblyLoadContext.Default.\r\n\r\nMay I suggest that it falls back to the predecessor ALC to enable patterns such as this:\r\n\r\n```\r\nvar alc1 = AssemblyLoadContext.Default\r\nvar alc2 = new AssemblyLoadContext();\r\nvar alc3 = new AssemblyLoadContext();\r\n\r\nUsing (var globalScope = alc1.EnterScope())\r\n{\r\n  Using (var commonScope = alc2.EnterScope())\r\n  {\r\n    Using (var vendorScope = alc3.EnterScope())\r\n  {\r\n  \r\n   }\r\n  }\r\n}\r\n```\r\nIn this situation, if assemblies cannot be resolved from the current scope they fallback for resolution from predecessor scope making it possible to define a hierarchy."},{"Id":"9590767598","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:33:11","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24450","RelatedDescription":"Merged pull request \"Remove premature throw\" (#24450) at dotnet/coreclr","RelatedBody":"ResolveUsingEvent is no longer the last resort for Assembly resolution\r\nand should not be throwing simply because the Assembly.Resolve event did\r\nnot find the Assembly"},{"Id":"9590707227","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:16:20","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22908","RelatedDescription":"Closed issue \"Runtime does not emit NativeCode Ids properly on ETW/EventPipe Rundown \" (#22908) at dotnet/coreclr","RelatedBody":"During the investigation of issue #22585, I discovered that the run is inconsistent about IDs that it generates that distinguish different versions of  native code for the same method (which you now routinely get with Tiered JITTing).  \r\n\r\nAs @noahfalk mentions, when Tiered JITTing was added the ReJitID in the Method/LoadVerbose and MethodUnloadVerbose has been changed.  Previously there the only time a method could have two version of the code was if the profiler had updated the IL of the method.   Thus the ReJitID identified both the native and IL version of the method.    However with Tiered JIT, the same IL of a method could have multiple version of native code.   \r\n\r\nIn the Method/LoadVerbose and MethodUnloadVerbose, the 'ReJitID' field of these events trace the number of NATIVE versions (thus increment for Tiering as well as Profiler IL update).   \r\n\r\nNote that there is code in PerfVIew that takes advantage of this new semantic to provide useful views about Tiered JIT.  \r\n\r\nHowever Related methods, done at Rundown (In particular DCStopVerbose) would either be a constant 0 (The only exception to this was when appdomains died),  or it used the IL Version number (that is the number of times the Profiler updated the IL), which is inconsistent with the other Method events.  \r\n\r\nIdeally this should be fixed so that the DCStopVerbose uniformly provide the Native version number (thus matching the Method/LoadVerbose and Method/UnloadVerbose events).  \r\n\r\nThe code that needs updating is in ETW::MethodLog::SendEventsForJitMethodsHelper.    However this rundown method currently has a fGETRejitIDs flag that is typically set to false (which is what forces the id to be 0.  \r\n\r\nNote that there is another ILToNativeMapDCStop that should continue to use the IL ID (in its ReJitID field).\r\n\r\nIdeally we should rename the ETW field to 'NativeCodeId' where we have changed its meaning.  Whether this is a breaking change is debatable (it would not break PerfView for example).  Having clear nomenclature is important, and frankly it is very unlikely to break people, so we should consider it.  \r\n\r\nFinally note that while having the ID field work properly is best, since it has been zeroed out in most cases already, rather than do nothing, simply zeroing it out is better than where we are today (and just changes two lines in ETW::MethodLog::SendEventsForJitMethodsHelper).  \r\n"},{"Id":"9590707198","Type":"IssuesEvent","CreatedAt":"2019-05-09T02:16:20","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22904","RelatedDescription":"Closed issue \"Tiered JIT compilation causes profilers to not allow source line profiling. \" (#22904) at dotnet/coreclr","RelatedBody":"This is a follow-on issue for issue #22585.    We have applied a patch which fixes the problem where method names are not resolved, but did not solve it completely (line level profiling is still broken),   This issue tracks fixing that. \r\n\r\nSYMPTOM:  If you collect a profile by attaching and detaching from a program, and Tiered JITTing is turned on (it is the default), and the methods of interest are reasonably hot (so that Tiered JIT is likely to have replaced them), then PerfVIew's 'goto Source' feature on those methods do not work.  \r\n\r\nThe workarounds in #22585 do work here as well. \r\n\r\nThe problem can be tested for more easily by running the following program [Program.txt](https://github.com/dotnet/coreclr/files/2912775/Program.txt)\r\n\r\nBuild with \r\n```\r\ndotnet build -c Release \r\n```\r\nso it is non-debug code, and then start collection with 'PerfView collect /maxCollectSec=10' and run the program.   PerfView will stop before the program ends. Then look at the data with \r\n```\r\nPerfView /keepAllEvents\r\n```\r\nAnd look at all the events\r\n```\r\nMicrosoft-Windows-DotNETRuntimeRundown/Method/DCStopVerbose\r\nMicrosoft-Windows-DotNETRuntimeRundown/Method/ILToNativeMapDCStop\r\n```\r\nIn the process you ran.  \r\nThere should be one ILToNativeMapDCStop  for ever DCStopVerbose but there is not.   WHen that is true it is fixed.\r\n\r\nYou can also do and end-to-end test where you start the program then collect a profile for 10 sec after the program has started but before it ended.   if you can then look at routines like 'Program.DoLocal1' and do 'GotoSource' then it works.  "},{"Id":"9590707005","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:16:20","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24422","RelatedDescription":"Merged pull request \"Fix ETL event rejit IDs and sending of the IL to native map event when code versioning is in use\" (#24422) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/22904\r\nFixes https://github.com/dotnet/coreclr/issues/22908\r\n- Method events now always send the native code ID for the rejit ID, and the IL to native map event continues to send the IL code ID\r\n- Took code versioning into account when sending rundown events for a method including the IL to native map"},{"Id":"9590571993","Type":"IssuesEvent","CreatedAt":"2019-05-09T01:37:19","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24489","RelatedDescription":"Opened issue \"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\" (#24489) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstress2_tst/66/\r\n\r\n**Failed tests:**\r\nSystem.Dynamic.Runtime.Tests\r\n\r\n**Log:**\r\n```\r\nStarting:    System.Dynamic.Runtime.Tests (parallel test collections = on, max threads = 8)\r\n\r\nAssert failure(PID 92 [0x0000005c], Thread: 8200 [0x2008]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: d:\\j\\workspace\\arm_cross_che---b006c545\\src\\vm\\object.cpp Line: 670\r\n    Image: C:\\j\\workspace\\arm_cross_che---6fedd1e9\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe\r\n\r\nexit code -1073740286\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9590054272","Type":"IssuesEvent","CreatedAt":"2019-05-08T23:13:03","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11264","RelatedDescription":"Closed issue \"https://aka.ms/missing-command is broken\" (#11264) at dotnet/cli","RelatedBody":"```\r\nC:\\WINDOWS\\System32>dotnet install -h\r\nNo executable found matching command \"dotnet-install\". See https://aka.ms/missing-command for more information.\r\n```"},{"Id":"9589821193","Type":"PullRequestEvent","CreatedAt":"2019-05-08T22:17:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11279","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/cli master 20190502\" (#11279) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"9589809278","Type":"PullRequestEvent","CreatedAt":"2019-05-08T22:15:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11302","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#11302) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190507.2\r\n- **Date Produced**: 5/7/2019 11:34 PM\r\n- **Commit**: 90e8a529be026d06fc8965d460927193aca5b005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19257.2\r\n\r\n"},{"Id":"9589806406","Type":"PullRequestEvent","CreatedAt":"2019-05-08T22:14:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11303","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11303) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.2.3xx branch"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9589633674","Type":"PullRequestEvent","CreatedAt":"2019-05-08T21:39:58","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Opened pull request \"Shimalimadingdong\" (#1180) at dotnet/standard","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs "},{"Id":"9588236261","Type":"PullRequestEvent","CreatedAt":"2019-05-08T17:55:45","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Merged pull request \"Update to the 3.0 SDK\" (#1173) at dotnet/standard","RelatedBody":"CC @ViktorHofer @ericstj. This also contains a maestro update of Arcade dependencies."},{"Id":"9582425722","Type":"IssuesEvent","CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Opened issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179) at dotnet/standard","RelatedBody":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9591332817","Type":"PullRequestEvent","CreatedAt":"2019-05-09T05:25:19","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37535","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27709-00, beta-27709-00, respectively (master)\" (#37535) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9591249868","Type":"IssuesEvent","CreatedAt":"2019-05-09T05:00:14","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/37534","RelatedDescription":"Opened issue \"Comparing Utf8JsonReader to default instance with the == operator\" (#37534) at dotnet/corefx","RelatedBody":"The `Utf8JsonReader` is a ref struct and it's possible that someone might pass around a default instance. Currently, there is no good way for the receiver to check if the `Utf8JsonReader` is default (equivalent to null for a class, or \"not set\").\r\n\r\nOne solution is for the reader to implement the == operator. However, this has concerns around what the semantics of \"equality\" mean here. What does comparing two non-default instances of the reader mean?\r\n\r\nAnother solution is for the reader to provide an `IsDefault` property that can be polled instead. This may be less discoverable, but has clear semantics tied to the usage scenario.\r\n\r\n## API Proposal:\r\n```C#\r\n    public ref partial struct Utf8JsonReader\r\n    {\r\n        public bool IsDefault { get; }\r\n\r\n        // OR the following, though the semantics need to be well-defined:\r\n       public static bool operator ==(Utf8JsonReader left, Utf8JsonReader right);\r\n       public static bool operator !=(Utf8JsonReader left, Utf8JsonReader right);\r\n    }\r\n```\r\n\r\nAs an aside, since `Utf8JsonReader` is a ref struct, it cannot implement `IEquatable`, like any ref struct.\r\n\r\n## Usage is relatively straightforward:\r\n```C#\r\nprivate static void ValidateAndReadOnce(ref Utf8JsonReader reader)\r\n{\r\n    if (reader.IsDefault)\r\n    {\r\n        throw new Exception(\"Reader was not set\");\r\n    }\r\n    reader.Read();\r\n}\r\n```\r\n\r\n**There is still a question whether such an API is absolutely necessary.** Calling `.Read()` on a default instance of `Utf8JsonReader` would return false, so it may not be necessary for the caller to guard against that. In that case, such an API wouldn't be necessary.\r\n\r\n\r\n```C#\r\n// Current behaviour of API calls to the Utf8JsonReader on a default instance.\r\n[Fact]\r\npublic static void DefaultUtf8JsonReader()\r\n{\r\n    Utf8JsonReader json = default;\r\n\r\n    Assert.Equal(0, json.BytesConsumed);\r\n    Assert.Equal(0, json.TokenStartIndex);\r\n    Assert.Equal(0, json.CurrentDepth);\r\n    Assert.Equal(JsonTokenType.None, json.TokenType);\r\n    Assert.Equal(default, json.Position);\r\n    Assert.False(json.HasValueSequence);\r\n    Assert.True(json.ValueSpan.SequenceEqual(default));\r\n    Assert.True(json.ValueSequence.IsEmpty);\r\n\r\n    Assert.Equal(0, json.CurrentState.BytesConsumed);\r\n    Assert.Equal(default, json.CurrentState.Position);\r\n    Assert.Equal(0, json.CurrentState.Options.MaxDepth);\r\n    Assert.False(json.CurrentState.Options.AllowTrailingCommas);\r\n    Assert.Equal(JsonCommentHandling.Disallow, json.CurrentState.Options.CommentHandling);\r\n\r\n    Assert.False(json.Read());\r\n\r\n    json = default;\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(\"\".AsSpan()));\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(default(ReadOnlySpan<char>)));\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(default(ReadOnlySpan<byte>)));\r\n}\r\n```\r\n\r\nWhat do others think? Folks from asp.net, would such an API be useful for you anywhere?\r\n- **Should we have such an API and if so which approach?**\r\n   - IsDefault or == operator?\r\n\r\nI know that you have guards on the `Read` method itself, which is a more appropriate solution since it guards against a default instance being passed in, for free. For example:\r\nhttps://github.com/aspnet/AspNetCore/blob/9fae14a92650175b2c9ef73d2ab605b52c2b18e4/src/SignalR/common/Shared/SystemTextJsonExtensions.cs#L11-L19\r\n\r\n\r\ncc @jeffschwMSFT, @bartonjs, @steveharter, @joshfree, @GrabYourPitchforks, @KrzysztofCwalina, @BrennanConroy, @rynowak "},{"Id":"9591017166","Type":"IssuesEvent","CreatedAt":"2019-05-09T03:46:13","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37506","RelatedDescription":"Closed issue \"System.Text.Json fails to parse enums with negative values\" (#37506) at dotnet/corefx","RelatedBody":"This is a regression from Newtonsoft that causes existing ASP.NET Core applications to fail when upgrading to .NET Core 3.0.\r\n\r\nReproduction:\r\n\r\n``` csharp\r\nusing System;\r\nusing System.Text.Json.Serialization;\r\n\r\nnamespace Sandbox\r\n{\r\n    public enum ReactionType\r\n    {\r\n        Neutral = 0,\r\n        Like = 1,\r\n        Dislike = -1,\r\n    }\r\n\r\n    public class Reaction\r\n    {\r\n        public ReactionType Value { get; set; }\r\n\r\n        public Reaction() { }\r\n\r\n        public Reaction(ReactionType value) => Value = value;\r\n    }\r\n\r\n    public class Program\r\n    {\r\n        public static void Main()\r\n        {\r\n            var values = new Reaction[]\r\n            {\r\n                new Reaction(ReactionType.Neutral),\r\n                new Reaction(ReactionType.Like),\r\n                new Reaction(ReactionType.Dislike),\r\n            };\r\n\r\n            foreach (var value in values)\r\n            {\r\n                var json = JsonSerializer.ToString(value);\r\n                Console.WriteLine(json);\r\n\r\n                try\r\n                {\r\n                    var obj = JsonSerializer.Parse<Reaction>(json);\r\n                    Console.WriteLine(obj.Value);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Console.WriteLine(ex);\r\n                }\r\n            }\r\n\r\n            Console.ReadKey(true);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\"Value\":0}\r\nNeutral\r\n{\"Value\":1}\r\nLike\r\n{\"Value\":-1}\r\nSystem.Text.Json.JsonReaderException: The JSON value from [Sandbox.Reaction].Value could not be converted to Sandbox.ReactionType.\r\n   at System.Text.Json.ThrowHelper.ThrowJsonReaderException_DeserializeUnableToConvertValue(Type propertyType, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonPropertyInfoNotNullable`3.Read(JsonTokenType tokenType, JsonSerializerOptions options, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse[TValue](String json, JsonSerializerOptions options)\r\n   at Sandbox.Program.Main() in C:\\Users\\paul\\source\\repos\\Sandbox\\Sandbox\\Program.cs:line 40\r\n```"},{"Id":"9591016425","Type":"PullRequestEvent","CreatedAt":"2019-05-09T03:46:00","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37508","RelatedDescription":"Merged pull request \"Fix #37506: System.Text.Json fails to parse enums with negative values\" (#37508) at dotnet/corefx","RelatedBody":""},{"Id":"9590776383","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:35:41","Actor":"sdmaclea","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37521","RelatedDescription":"Merged pull request \"Reenable tests\" (#37521) at dotnet/corefx","RelatedBody":"Reenable tests fixed by #37246"},{"Id":"9590736720","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:24:44","Actor":"JohnTortugo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37525","RelatedDescription":"Merged pull request \"Update Helix SDK Version - Release/3.0 branch\" (#37525) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9590650740","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:00:14","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35595","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#35595) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9590650329","Type":"PullRequestEvent","CreatedAt":"2019-05-09T02:00:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35596","RelatedDescription":"Merged pull request \"Merge master-vs-deps to features/razorSupport2\" (#35596) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9590477561","Type":"IssuesEvent","CreatedAt":"2019-05-09T01:09:20","Actor":"Cosifne","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35598","RelatedDescription":"Opened issue \"Semicolon is placed at wrong place\" (#35598) at dotnet/roslyn","RelatedBody":"**Version Used**:  16.1.0 Preivew 1\r\n\r\n**Steps to Reproduce**:\r\nCode:\r\n```using System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\n\r\nnamespace UnitTestProject7\r\n{\r\n    [TestClass]\r\n    public class UnitTest1\r\n    {\r\n        private List<int> l = new List<int>()\r\n\r\n        [TestMethod]\r\n        public void TestMethod1()\r\n        {\r\n        }\r\n    }\r\n}```\r\n\r\nWhen I trying to type semicolon at the end of \"private List<int> l = new List<int>()\",\r\nthen the  semicolon appears at the end of \"[TestMethod]\",\r\nwhich is very strange.\r\n"},{"Id":"9590375974","Type":"PullRequestEvent","CreatedAt":"2019-05-09T00:38:09","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35597","RelatedDescription":"Opened pull request \"Relax escape analysis rules for readonly methods\" (#35597) at dotnet/roslyn","RelatedBody":"Fixes #35146 but we'll need to create a new issue to track fixing escape analysis on properties where one accessor is readonly and the other is not."},{"Id":"9590226214","Type":"PullRequestEvent","CreatedAt":"2019-05-09T00:00:51","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35596","RelatedDescription":"Opened pull request \"Merge master-vs-deps to features/razorSupport2\" (#35596) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9590225801","Type":"PullRequestEvent","CreatedAt":"2019-05-09T00:00:45","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35595","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#35595) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9589950613","Type":"PullRequestEvent","CreatedAt":"2019-05-08T22:46:52","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Opened pull request \"Add SuperIlc compile-nuget command\" (#7411) at dotnet/corert","RelatedBody":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit."},{"Id":"9589506370","Type":"PullRequestEvent","CreatedAt":"2019-05-08T21:17:06","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Opened pull request \"SuperIlc support for the issues.targets file\" (#7410) at dotnet/corert","RelatedBody":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9589181337","Type":"IssuesEvent","CreatedAt":"2019-05-08T20:23:21","Actor":"danwalmsley","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7408","RelatedDescription":"Closed issue \"UWP .net Native Internal Compiler Error.\" (#7408) at dotnet/corert","RelatedBody":"Sorry if this is the wrong place for .net native and UWP compile errors.\r\n\r\nI have a UWP app, and we have been using debug mode during develop. We are trying to build in release mode with .net native toolchain (this is quite important for us to get the high performance.)\r\n\r\nHowever we get an internal compiler error:\r\n```\r\n8>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VisualStudio\\v16.0\\AppxPackage\\Microsoft.AppXPackage.Targets(3164,5): warning : APPX4001: Build property AppxBundlePlatforms is not explicitly set and is calculated based on currently building architecture. Use 'Create App Package' wizard or edit project file to set it.\r\n8>  Processing application code\r\n8>  Computing application closure and generating interop code\r\n8>    Loading 121 modules...\r\n8>    Generating code...\r\n8>    Interop code generated.\r\n8>  Generating serialization code\r\n8>  Compiling interop code\r\n8>  Generating System.Reflection.DispatchProxy proxy code.\r\n8>  Cleaning up unreferenced code\r\n8>  Generating native code\r\n8>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.3\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.3\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\dev\\repos\\ILMD\\ILMD.App\\ILMD.App\\ILMD.App.UWP\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ILMD.App.UWP.rsp\"' returned exit code 1\r\n========== Build: 7 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n\r\nI ran using msbuild and versbose and nutc_driver.exe gives internal compiler error but no more useful information.\r\n\r\n   I would be willing to send my source code for testing privately.\r\n\r\nThanks in advance\r\n\r\n"},{"Id":"9588709765","Type":"PullRequestEvent","CreatedAt":"2019-05-08T19:07:44","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7384","RelatedDescription":"Merged pull request \"Miscellaneous SuperIlc improvements\" (#7384) at dotnet/corert","RelatedBody":"1) Add support for release build (--release), for building\r\nand using the native framework (--framework) and just\r\nusing pre-built framework (--use-framework).\r\n\r\n2) Moved bucketing logic from CompileSubtreeCommand to a\r\nnew source file Buckets.cs and modify BuildFolderSet to\r\nautomatically create the bucketing.\r\n\r\n3) Simplified log emission logic, added new table with\r\nper folder error counts and added summary bucketing to the\r\noverall build log.\r\n\r\n4) I have added BuildOptions to CompilerRunner; this\r\nsimplified some methods that previously received various\r\nparts of the BuildOptions via separate parameters.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9588424789","Type":"PullRequestEvent","CreatedAt":"2019-05-08T18:24:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#7409) at dotnet/corert","RelatedBody":""},{"Id":"9588423081","Type":"PullRequestEvent","CreatedAt":"2019-05-08T18:24:01","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#7409) at dotnet/corert","RelatedBody":""},{"Id":"9587651129","Type":"IssuesEvent","CreatedAt":"2019-05-08T16:24:39","Actor":"ifew","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7333","RelatedDescription":"Closed issue \"I compiled Net Core with EFCore but waiting a long time\" (#7333) at dotnet/corert","RelatedBody":"I developing some native app and using MySql.Data.EntityFrameworkCore but waiting a long time for compile, I'm not sure to correct or not.\r\n\r\nand then I try another code from other (https://github.com/rubin55/dot-hello). it's same\r\n\r\nI don't know why?\r\n\r\nMy Code \r\nhttps://github.com/ifew/aws-lambda-lambdanative-db/tree/master/src/aws-lambda-lambdanative\r\n\r\nMy OS: MacOS Mojave\r\nCPU Intel Core i5 2.9 GHz\r\nMemory:\t8 GB\r\n\r\npx. sorry for bad English"},{"Id":"9587469414","Type":"IssuesEvent","CreatedAt":"2019-05-08T15:58:49","Actor":"danwalmsley","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7408","RelatedDescription":"Opened issue \"UWP .net Native Internal Compiler Error.\" (#7408) at dotnet/corert","RelatedBody":"Sorry if this is the wrong place for .net native and UWP compile errors.\r\n\r\nI have a UWP app, and we have been using debug mode during develop. We are trying to build in release mode with .net native toolchain (this is quite important for us to get the high performance.)\r\n\r\nHowever we get an internal compiler error:\r\n```\r\n8>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VisualStudio\\v16.0\\AppxPackage\\Microsoft.AppXPackage.Targets(3164,5): warning : APPX4001: Build property AppxBundlePlatforms is not explicitly set and is calculated based on currently building architecture. Use 'Create App Package' wizard or edit project file to set it.\r\n8>  Processing application code\r\n8>  Computing application closure and generating interop code\r\n8>    Loading 121 modules...\r\n8>    Generating code...\r\n8>    Interop code generated.\r\n8>  Generating serialization code\r\n8>  Compiling interop code\r\n8>  Generating System.Reflection.DispatchProxy proxy code.\r\n8>  Cleaning up unreferenced code\r\n8>  Generating native code\r\n8>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.3\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.3\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\dev\\repos\\ILMD\\ILMD.App\\ILMD.App\\ILMD.App.UWP\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ILMD.App.UWP.rsp\"' returned exit code 1\r\n========== Build: 7 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n\r\nI ran using msbuild and versbose and nutc_driver.exe gives internal compiler error but no more useful information.\r\n\r\n   I would be willing to send my source code for testing privately.\r\n\r\nThanks in advance\r\n\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9590396397","Type":"PullRequestEvent","CreatedAt":"2019-05-09T00:44:36","Actor":"fadimounir","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3219","RelatedDescription":"Opened pull request \"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines\" (#3219) at dotnet/sdk","RelatedBody":"Also fixing a path issue with native PDB creation on Linux: creating file under the R2R subdir"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"open","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Open PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"442010944","IsPullRequest":false,"CreatedAt":"2019-05-09T01:37:19","Actor":"VincentBu","Number":"24489","RawContent":null,"Title":"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstress2_tst/66/\r\n\r\n**Failed tests:**\r\nSystem.Dynamic.Runtime.Tests\r\n\r\n**Log:**\r\n```\r\nStarting:    System.Dynamic.Runtime.Tests (parallel test collections = on, max threads = 8)\r\n\r\nAssert failure(PID 92 [0x0000005c], Thread: 8200 [0x2008]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: d:\\j\\workspace\\arm_cross_che---b006c545\\src\\vm\\object.cpp Line: 670\r\n    Image: C:\\j\\workspace\\arm_cross_che---6fedd1e9\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe\r\n\r\nexit code -1073740286\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24489","RelatedDescription":"Open issue \"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\" (#24489)"},{"Id":"442006639","IsPullRequest":true,"CreatedAt":"2019-05-09T01:14:09","Actor":"echesakovMSFT","Number":"24488","RawContent":null,"Title":"Check for JitDisasmIncludeAssembliesList being non-empty before calling getClassModule","State":"open","Body":"If we run SuperPMI collection with COMPlus_JitDisasmAssemblies being set to some non-empty string value then SuperPMI replay is going to fail in https://github.com/dotnet/coreclr/blob/master/src/ToolBox/superpmi/superpmi/icorjitinfo.cpp#L525.\r\n\r\nTo avoid this we can try to run superpmi with `-jitoption force JitDisasmAssemblies=` but it's not going to help since s_pJitDisasmIncludeAssembliesList will be still initialized (but empty). \r\n\r\nTo fix this we can also check whether it's non-empty before calling getClassModule.\r\n\r\n@dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/24488","RelatedDescription":"Open PR \"Check for JitDisasmIncludeAssembliesList being non-empty before calling getClassModule\" (#24488)"},{"Id":"442005680","IsPullRequest":false,"CreatedAt":"2019-05-09T01:09:00","Actor":"VincentBu","Number":"24487","RawContent":null,"Title":"[x86] Test failed: tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_jitstress1_tiered/283/\r\n\r\n**Failed tests:**\r\ntracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\r\n\r\n**Log:**\r\n```\r\ntracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd [FAIL]\r\n        \r\n        Unhandled Exception: OutOfMemoryException.\r\n        \r\n        Return code:      1\r\n        Raw output file:      D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\tracing.eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe \r\n        \tStart: Enable tracing.\r\n        \tEnd: Enable tracing.\r\n        \r\n        \tStart: Messaging.\r\n        \tEnd: Messaging.\r\n        \r\n        \tStart: Disable tracing.\r\n        \tEnd: Disable tracing.\r\n        \r\n        \tStart: Processing events from file.\r\n        Expected: 100\r\n        Actual: -532462766\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n        > D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\tracing.eventsource\\tracing.eventsource.XUnitWrapper.cs(129,0): at tracing_eventsource._eventsourcetrace_eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_eventsourcetrace_cmd()\r\n        Output:\r\n          \r\n          Unhandled Exception: OutOfMemoryException.\r\n          \r\n          Return code:      1\r\n          Raw output file:      D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\tracing.eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n           \"D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe \r\n          \tStart: Enable tracing.\r\n          \tEnd: Enable tracing.\r\n          \r\n          \tStart: Messaging.\r\n          \tEnd: Messaging.\r\n          \r\n          \tStart: Disable tracing.\r\n          \tEnd: Disable tracing.\r\n          \r\n          \tStart: Processing events from file.\r\n          Expected: 100\r\n          Actual: -532462766\r\n          END EXECUTION - FAILED\r\n          FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n          > D:\\j\\workspace\\x86_checked_w---5cbe5e6f\\bin\\tests\\Windows_NT.x86.Checked\\tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24487","RelatedDescription":"Open issue \"[x86] Test failed: tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\" (#24487)"},{"Id":"441967747","IsPullRequest":true,"CreatedAt":"2019-05-08T23:01:25","Actor":"cshung","Number":"24486","RawContent":null,"Title":"Return the required padding size instead of the current position to avoid integer overflow.","State":"open","Body":"Fixes #24442 ","Url":"https://github.com/dotnet/coreclr/pull/24486","RelatedDescription":"Open PR \"Return the required padding size instead of the current position to avoid integer overflow.\" (#24486)"},{"Id":"441934299","IsPullRequest":false,"CreatedAt":"2019-05-08T22:55:43","Actor":"sdmaclea","Number":"24483","RawContent":null,"Title":"AppDomain.AssemblyResolve sometimes has null RequestingAssembly","State":"closed","Body":"There is a report of AppDomain.AssemblyResolve setting RequestingAssembly to null while running 3.0.100-preview5-011235. \r\n\r\n``` \r\n*** NULL RequestingAssembly\r\n...\r\n  at  System.Runtime.Loader.AssemblyLoadContext.InvokeResolveEvent(ResolveEventHandler eventHandler, RuntimeAssembly ass\r\nembly, String name)\r\n   at System.Runtime.Loader.AssemblyLoadContext.OnAssemblyResolve(RuntimeAssembly assembly, String assemblyFullName)\r\n   at System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ign\r\noreCase, ObjectHandleOnStack type, ObjectHandleOnStack keepAlive)\r\n   at System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ign\r\noreCase, ObjectHandleOnStack type, ObjectHandleOnStack keepAlive)\r\n   at System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)\r\n   at System.Reflection.Assembly.GetType(String name)\r\n```\r\n\r\nInitial assessment looks like this must be happening when `Assembly.GetType(string name)` is using a generic type.","Url":"https://github.com/dotnet/coreclr/issues/24483","RelatedDescription":"Closed issue \"AppDomain.AssemblyResolve sometimes has null RequestingAssembly\" (#24483)"},{"Id":"441964422","IsPullRequest":true,"CreatedAt":"2019-05-08T22:47:48","Actor":"jkoritzinsky","Number":"24485","RawContent":null,"Title":"Fix ComActivator typo.","State":"open","Body":"Change `ClassRegisterationScenarioForType` to `ClassRegistrationScenarioForType`.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24485","RelatedDescription":"Open PR \"Fix ComActivator typo.\" (#24485)"},{"Id":"441958828","IsPullRequest":true,"CreatedAt":"2019-05-08T22:29:32","Actor":"tannergooding","Number":"24484","RawContent":null,"Title":"Fixing the Dragon4 algorithm to correctly handle explicit digit counts","State":"open","Body":"This resolves (modulo tests that need to be added to corefx) https://github.com/dotnet/corefx/issues/37524.\r\n\r\nThe root issue is double-rounding. Both Dragon4/Grisu3 will take rounding into account when generating the digit stream. NumberToString will then try to round that number again according to the requested number of digits.\r\n\r\nIn a case where the first significant is directly after the requested number of digits, if it is a 4 and the following digit would cause that to round, we will cause the displayed digit to be 1 rather than 0.\r\n\r\nThe simplest fix is to just exhaust the digit stream in this case, which avoids the rounding done by Dragon4 (this fix).\r\n\r\nIt may also be possible to elide the rounding done by NumberToString for floating-point buffers, but that requires more thought/testing on my end before implementing...","Url":"https://github.com/dotnet/coreclr/pull/24484","RelatedDescription":"Open PR \"Fixing the Dragon4 algorithm to correctly handle explicit digit counts\" (#24484)"},{"Id":"441899416","IsPullRequest":true,"CreatedAt":"2019-05-08T22:29:28","Actor":"JohnTortugo","Number":"24479","RawContent":null,"Title":"Update Helix SDK Version - Master branch","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24479","RelatedDescription":"Closed or merged PR \"Update Helix SDK Version - Master branch\" (#24479)"},{"Id":"441903741","IsPullRequest":true,"CreatedAt":"2019-05-08T22:28:49","Actor":"JohnTortugo","Number":"24481","RawContent":null,"Title":"Update Helix SDK - Release/3.0 branch","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24481","RelatedDescription":"Closed or merged PR \"Update Helix SDK - Release/3.0 branch\" (#24481)"},{"Id":"441870044","IsPullRequest":true,"CreatedAt":"2019-05-08T22:12:12","Actor":"AaronRobinsonMSFT","Number":"24477","RawContent":null,"Title":"Fix scenarios where SPCL is not crossgen'd and the output is not in t…","State":"closed","Body":"…he bin directory\r\n\r\nFixes #24446 \r\n\r\ncc @jkoritzinsky ","Url":"https://github.com/dotnet/coreclr/pull/24477","RelatedDescription":"Closed or merged PR \"Fix scenarios where SPCL is not crossgen'd and the output is not in t…\" (#24477)"},{"Id":"441503056","IsPullRequest":true,"CreatedAt":"2019-05-08T22:07:13","Actor":"briansull","Number":"24462","RawContent":null,"Title":"Fix 24440","State":"closed","Body":" gtGetStructHandleIfPresent can return nullptr (NO_CLASS_HANDLE)","Url":"https://github.com/dotnet/coreclr/pull/24462","RelatedDescription":"Closed or merged PR \"Fix 24440\" (#24462)"},{"Id":"441846338","IsPullRequest":true,"CreatedAt":"2019-05-08T21:45:42","Actor":"mikem8361","Number":"24475","RawContent":null,"Title":"Change the GenerateCoreDump protocol to use UTF16 dump file name","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24475","RelatedDescription":"Closed or merged PR \"Change the GenerateCoreDump protocol to use UTF16 dump file name\" (#24475)"},{"Id":"441927845","IsPullRequest":true,"CreatedAt":"2019-05-08T20:55:19","Actor":"erozenfeld","Number":"24482","RawContent":null,"Title":"Mark local struct as having overlapping fields after struct reinterpretation","State":"open","Body":"Methods like System.Runtime.CompilerServices.Unsafe.As<TFrom, TTo> may\r\nhave struct reinterpretation when function signature specifies Struct1&\r\nand the method returns Struct2& where Struct1 and Struct2 are different\r\nstructs. This may confuse jit optimizations (in particular, value\r\nnumbering) because fields of a struct of type Struct1 may be accessed\r\nusing handles of Struct2. This fix marks the source local involved in\r\nsuch struct reinterpretation as having overlapping fields. That prevents\r\nSSA builder from inserting the local into SSA.\r\n\r\nFixes #24159.\r\n\r\nNo diffs in framework assemblies and coreclr benchmarks.","Url":"https://github.com/dotnet/coreclr/pull/24482","RelatedDescription":"Open PR \"Mark local struct as having overlapping fields after struct reinterpretation\" (#24482)"},{"Id":"441604470","IsPullRequest":true,"CreatedAt":"2019-05-08T19:54:25","Actor":"VSadov","Number":"24467","RawContent":null,"Title":"[NoMerge] Test001","State":"closed","Body":"Just to run tests.","Url":"https://github.com/dotnet/coreclr/pull/24467","RelatedDescription":"Closed or merged PR \"[NoMerge] Test001\" (#24467)"},{"Id":"441900099","IsPullRequest":false,"CreatedAt":"2019-05-08T19:45:03","Actor":"jkoritzinsky","Number":"24480","RawContent":null,"Title":"Support ReadyToRun on mixed-mode assemblies","State":"open","Body":"Right now we explicitly block crossgenning/ready-to-running any mixed mode assemblies (see #24451). We should take a look at enabling it depending on cost of implementation and the perf difference for our partners such as WPF.\r\n\r\nOriginally part of #18013.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24480","RelatedDescription":"Open issue \"Support ReadyToRun on mixed-mode assemblies\" (#24480)"},{"Id":"441879200","IsPullRequest":true,"CreatedAt":"2019-05-08T18:51:27","Actor":"jkoritzinsky","Number":"24478","RawContent":null,"Title":"Move EventProvider native layout to be driven by CMake configure","State":"open","Body":"Move the dynamic layout of the EventProvider infastructure (excluding the C# EventSource file generation) to be driven by CMake instead of by custom scripting in our build.cmd and build.sh scripts. \r\n\r\nFixes #2486","Url":"https://github.com/dotnet/coreclr/pull/24478","RelatedDescription":"Open PR \"Move EventProvider native layout to be driven by CMake configure\" (#24478)"},{"Id":"441863903","IsPullRequest":false,"CreatedAt":"2019-05-08T18:14:53","Actor":"AaronRobinsonMSFT","Number":"24476","RawContent":null,"Title":"Move some types from corefx into SPCL based on metrics","State":"open","Body":"Metrics:\r\n- Size of assembly in CoreFX - does it already forward types to SPCL?\r\n- Type dependencies - see `ComRegisterFunctionAttribute` and `ComUnregisterFunctionAttribute` which have none and are used directly by SPCL. As opposed to `System.ComponentModel.License*`\r\n\r\nSee discussion https://github.com/dotnet/coreclr/pull/24452#discussion_r281857286\r\n\r\ncc @davidwrighton ","Url":"https://github.com/dotnet/coreclr/issues/24476","RelatedDescription":"Open issue \"Move some types from corefx into SPCL based on metrics\" (#24476)"},{"Id":"441845920","IsPullRequest":true,"CreatedAt":"2019-05-08T17:30:28","Actor":"jkotas","Number":"24474","RawContent":null,"Title":"Fix Type.GetCustomAttributes for multiple instances of the same attribute","State":"open","Body":"Fixes dotnet/corefx#37261","Url":"https://github.com/dotnet/coreclr/pull/24474","RelatedDescription":"Open PR \"Fix Type.GetCustomAttributes for multiple instances of the same attribute\" (#24474)"},{"Id":"441529562","IsPullRequest":true,"CreatedAt":"2019-05-08T14:09:07","Actor":"cshung","Number":"24466","RawContent":null,"Title":"Handle the case when the SamplingProfiler thread is terminated prematurely","State":"closed","Body":"Fixes #24459 ","Url":"https://github.com/dotnet/coreclr/pull/24466","RelatedDescription":"Closed or merged PR \"Handle the case when the SamplingProfiler thread is terminated prematurely\" (#24466)"},{"Id":"441527194","IsPullRequest":false,"CreatedAt":"2019-05-08T13:21:46","Actor":"NinoFloris","Number":"24465","RawContent":null,"Title":"Nuget doesn't warn on import of older pre 3.0 aspnet dependencies resulting in TypeLoadExceptions","State":"closed","Body":"Running on dotnet core 3.0.100-preview5 sdk while firing off a first request to aspnetcore 3.0.\r\n\r\n```\r\n      Connection id \"0HLMJBP255QDV\", Request id \"0HLMJBP255QDV:00000001\": An unhandled exception was thrown by the application.\r\nSystem.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.\r\nMethod 'GetValidationVisitor' in type 'FluentValidation.AspNetCore.FluentValidationObjectModelValidator' from assembly 'FluentValidation.AspNetCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0' does not have an implementation.\r\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n   at System.Reflection.RuntimeAssembly.get_DefinedTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types()\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetControllerTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetDescriptors()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.Initialize()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.GetChangeToken()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.<>c__DisplayClass11_0.<Subscribe>b__0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.Subscribe()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource..ctor(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitDisposeCache(ServiceCallSite transientCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Routing.Matching.DfaMatcherFactory.<CreateMatcher>b__2_0()\r\n   at Microsoft.AspNetCore.Routing.Matching.DataSourceDependentMatcher.CreateMatcher(IReadOnlyList`1 endpoints)\r\n   at Microsoft.AspNetCore.Routing.DataSourceDependentCache`1.Initialize()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at System.Threading.LazyInitializer.EnsureInitialized[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Routing.Matching.DataSourceDependentMatcher..ctor(EndpointDataSource dataSource, Lifetime lifetime, Func`1 matcherBuilderFactory)\r\n   at Microsoft.AspNetCore.Routing.Matching.DfaMatcherFactory.CreateMatcher(EndpointDataSource dataSource)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.InitializeCoreAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.<Invoke>g__AwaitMatcher|6_0(EndpointRoutingMiddleware middleware, HttpContext httpContext, EndpointSelectorContext feature, Task`1 matcherTask)\r\n...our code\r\n\r\nSystem.TypeLoadException: Method 'GetValidationVisitor' in type 'FluentValidation.AspNetCore.FluentValidationObjectModelValidator' from assembly 'FluentValidation.AspNetCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0' does not have an implementation.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24465","RelatedDescription":"Closed issue \"Nuget doesn't warn on import of older pre 3.0 aspnet dependencies resulting in TypeLoadExceptions\" (#24465)"},{"Id":"441721893","IsPullRequest":true,"CreatedAt":"2019-05-08T12:57:40","Actor":"dotnet-maestro[bot]","Number":"24473","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190508.1\r\n- **Date Produced**: 5/8/2019 11:28 AM\r\n- **Commit**: e8748bcc9e80a48d339d76dca39a758459faceff\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190508.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190508.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24473","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24473)"},{"Id":"441643631","IsPullRequest":false,"CreatedAt":"2019-05-08T09:40:48","Actor":"jiangzeng01","Number":"24472","RawContent":null,"Title":"[EventPipe] Cancel test while writing events causing crash","State":"open","Body":"Test:\r\ncoreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs\r\nLine 28:\r\nSet messageIterations = 1000000;\r\n\r\nCancel the test while it's writing events, then it crashed with following exception:\r\n```\r\nF:\\TempRepo\\coreclr>bin\\tests\\Windows_NT.x64.Debug\\tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\r\nBEGIN EXECUTION\r\n \"F:\\TempRepo\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe\r\n        Start: Enable tracing.\r\n        End: Enable tracing.\r\n\r\n        Start: Messaging.\r\n\r\nAssert failure(PID 8920 [0x000022d8], Thread: 7780 [0x1e64]): Precondition failure: FAILED: HasDebuggerDataLock()\r\n\r\nCORECLR! CHECK::Trigger + 0x261 (0x00007ff8`7c12c3c1)\r\nCORECLR! Debugger::CreateMethodInfo + 0x184 (0x00007ff8`7ce9a1d4)\r\nCORECLR! Debugger::GetOrCreateMethodInfo + 0x1A6 (0x00007ff8`7cea7886)\r\nCORECLR! Debugger::GetJitInfoWorker + 0x1FE (0x00007ff8`7cea6c4e)\r\nCORECLR! Debugger::GetJitInfo + 0x272 (0x00007ff8`7cea6992)\r\nCORECLR! Debugger::GetILToNativeMappingIntoArrays + 0x20F (0x00007ff8`7cea564f)\r\nCORECLR! ETW::MethodLog::SendMethodILToNativeMapEvent + 0x2BF (0x00007ff8`7c330f2f)\r\nCORECLR! ETW::MethodLog::SendEventsForJitMethodsHelper + 0x277 (0x00007ff8`7c32ee17)\r\nCORECLR! ETW::MethodLog::SendEventsForJitMethods + 0x31D (0x00007ff8`7c32eb1d)\r\nCORECLR! ETW::EnumerationLog::IterateDomain + 0x302 (0x00007ff8`7c323862)\r\n    File: f:\\temprepo\\coreclr\\src\\debug\\ee\\debugger.cpp Line: 2543\r\n    Image: F:\\TempRepo\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\CoreRun.exe\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24472","RelatedDescription":"Open issue \"[EventPipe] Cancel test while writing events causing crash\" (#24472)"},{"Id":"441641186","IsPullRequest":false,"CreatedAt":"2019-05-08T09:34:50","Actor":"Cronan","Number":"24471","RawContent":null,"Title":"Crash dump using coreclr hosting","State":"open","Body":"Hi, I'm [initializing](https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/inc/coreclrhost.h#L40) the coreclr from Centos Linux, [using Cpp](https://github.com/Cronan/dotnetcorelinuxhosting/blob/77d38c2f5a438089cf3966d744b30a9ca945165c/src/pynetinit.cpp#L428).\r\n\r\nI get a hard crash dump - any tips on how to diagnose the crash, get more information, symbols etc?\r\n\r\nThis is using .NET Core 2.1","Url":"https://github.com/dotnet/coreclr/issues/24471","RelatedDescription":"Open issue \"Crash dump using coreclr hosting\" (#24471)"},{"Id":"441640938","IsPullRequest":false,"CreatedAt":"2019-05-08T09:34:14","Actor":"jiangzeng01","Number":"24470","RawContent":null,"Title":"[EventPipe] Event missing when long string as an event argument","State":"open","Body":"Test:\r\ncoreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs\r\n\r\nLine 28:\r\nSet messageIterations = 5000;\r\n\r\nLine 74:\r\nAdd following code:\r\n```\r\nfor (int j = 0; j < 10; j++)\r\n{\r\nformula = formula + formula;\r\n}\r\n```\r\n\r\nActual: 4999\r\nExpected: 5000;\r\nnetperf file size: 153497 KB\r\n","Url":"https://github.com/dotnet/coreclr/issues/24470","RelatedDescription":"Open issue \"[EventPipe] Event missing when long string as an event argument\" (#24470)"},{"Id":"441635672","IsPullRequest":false,"CreatedAt":"2019-05-08T09:21:58","Actor":"jiangzeng01","Number":"24469","RawContent":null,"Title":"[EventPipe] Null passed as an event argument causes crash","State":"open","Body":"Test: \r\ncoreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs\r\nLine 23: \r\nthis.WriteEvent(1, x, y, z, **null**);\r\n \r\n```\r\nF:\\TempRepo\\coreclr>bin\\tests\\Windows_NT.x64.Debug\\tracing\\eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.cmd\r\nBEGIN EXECUTION\r\n \"F:\\TempRepo\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe\r\n        Start: Enable tracing.\r\n        End: Enable tracing.\r\n\r\n        Start: Messaging.\r\n\r\nUnhandled Exception: System.Diagnostics.Tracing.EventSourceException: Null passed as a event argument.\r\n   at System.Diagnostics.Tracing.EventSource.ThrowEventSourceException(String eventName, Exception innerEx)\r\n   at System.Diagnostics.Tracing.EventSource.WriteEventVarargs(Int32 eventId, Guid* childActivityID, Object[] args)\r\n   at System.Diagnostics.Tracing.EventSource.WriteEvent(Int32 eventId, Object[] args)\r\n   at Tracing.Tests.SimpleEventSource.MathResult(Int32 x, Int32 y, Int32 z, String formula) in F:\\TempRepo\\coreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs:line 23\r\n   at Tracing.Tests.EventSourceTrace.Main(String[] args) in F:\\TempRepo\\coreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs:line 75\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/24469","RelatedDescription":"Open issue \"[EventPipe] Null passed as an event argument causes crash\" (#24469)"},{"Id":"441630263","IsPullRequest":false,"CreatedAt":"2019-05-08T09:09:36","Actor":"jiangzeng01","Number":"24468","RawContent":null,"Title":"[EventPipe] Event missing when multi-threading","State":"open","Body":"Test:\r\ncoreclr\\tests\\src\\tracing\\eventlistener\\EventListener.cs\r\n\r\nUsing the following code to write events instead of `eventSource.MathResult(x, y, x+y, formula)`\r\n\r\n```Thread.Sleep(50);\r\nTask task1 = Task.Factory.StartNew(() => eventSource.MathResult(x, y, x+y, formula));\r\nThread.Sleep(50);\r\nTask task2 = Task.Factory.StartNew(() => eventSource.MathResult(x, y, x+y, formula));\r\nThread.Sleep(50);\r\nTask task3 = Task.Factory.StartNew(() => eventSource.MathResult(x, y, x+y, formula));\r\nThread.Sleep(50);\r\n\r\nTask.WaitAll(task1, task2, task3);\r\n```\r\n\r\nActual: 298 events\r\nExpect: 300 events ","Url":"https://github.com/dotnet/coreclr/issues/24468","RelatedDescription":"Open issue \"[EventPipe] Event missing when multi-threading\" (#24468)"},{"Id":"441498075","IsPullRequest":true,"CreatedAt":"2019-05-08T07:46:51","Actor":"mikem8361","Number":"24460","RawContent":null,"Title":"Add generate crash dump command to diagnostics server","State":"closed","Body":"Add the DiagnosticProtocolHelper class to deserialize and dispatch\r\nthe new GenerateCoreDump command.\r\n\r\nRefactor the PAL createdump launch on unhandled exception code to\r\nused by a new PAL_GenerateCoreDump method that doesn't depend on\r\nthe complus dump environment variables.","Url":"https://github.com/dotnet/coreclr/pull/24460","RelatedDescription":"Closed or merged PR \"Add generate crash dump command to diagnostics server\" (#24460)"},{"Id":"441507106","IsPullRequest":true,"CreatedAt":"2019-05-08T04:22:56","Actor":"sandreenko","Number":"24463","RawContent":null,"Title":"Exclude MethodImplOptionsTests.","State":"closed","Body":"Exclude the test because the fix is postponed.\r\n\r\nRevert this when #23199 is fixed.","Url":"https://github.com/dotnet/coreclr/pull/24463","RelatedDescription":"Closed or merged PR \"Exclude MethodImplOptionsTests.\" (#24463)"},{"Id":"441507733","IsPullRequest":false,"CreatedAt":"2019-05-08T01:13:36","Actor":"echesakovMSFT","Number":"24464","RawContent":null,"Title":"[Linux arm64 gcstress0xc_zapdisable_heapverify] JIT/Methodical/ELEMENT_TYPE_IU/_il_relu_fld","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=182349&view=ms.vss-test-web.build-test-results-tab&runId=4391708&paneView=debug&resultId=104482\r\n```\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/Methodical/Reports/JIT.Methodical/ELEMENT_TYPE_IU/_il_relu_fld/_il_relu_fld.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun _il_relu_fld.exe ''\r\n-858993344\r\nfailed\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Methodical/ELEMENT_TYPE_IU/_il_relu_fld/_il_relu_fld.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24464","RelatedDescription":"Open issue \"[Linux arm64 gcstress0xc_zapdisable_heapverify] JIT/Methodical/ELEMENT_TYPE_IU/_il_relu_fld\" (#24464)"},{"Id":"441498222","IsPullRequest":true,"CreatedAt":"2019-05-08T00:22:03","Actor":"davmason","Number":"24461","RawContent":null,"Title":"Profiler API to request ReJIT with inliners","State":"open","Body":"This API is necessary for attaching profilers to be able to ReJIT methods and replace everything that uses the old IL.\r\n\r\nI still have to do perf testing to make sure when no profiler is attached we don't regress anything (besides the small impact to overall working set from the tracking), and there are a few more scenarios I want to test but overall it is ready for review/feedback.","Url":"https://github.com/dotnet/coreclr/pull/24461","RelatedDescription":"Open PR \"Profiler API to request ReJIT with inliners\" (#24461)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"439606725","IsPullRequest":true,"CreatedAt":"2019-05-08T22:17:30","Actor":"v-mdriml","Number":"11279","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master 20190502","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11279","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master 20190502\" (#11279)"},{"Id":"441701383","IsPullRequest":true,"CreatedAt":"2019-05-08T22:15:08","Actor":"dotnet-maestro[bot]","Number":"11302","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190507.2\r\n- **Date Produced**: 5/7/2019 11:34 PM\r\n- **Commit**: 90e8a529be026d06fc8965d460927193aca5b005\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19257.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11302","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11302)"},{"Id":"441924299","IsPullRequest":true,"CreatedAt":"2019-05-08T22:14:29","Actor":"nugetlurker","Number":"11303","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11303","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11303)"},{"Id":"441924333","IsPullRequest":true,"CreatedAt":"2019-05-08T20:46:04","Actor":"nugetlurker","Number":"11304","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6013 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11304","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6013 into cli\" (#11304)"},{"Id":"441400504","IsPullRequest":true,"CreatedAt":"2019-05-08T18:32:58","Actor":"johnbeisner","Number":"11298","RawContent":null,"Title":"Add support for Microsoft.WindowsDesktop.App","State":"closed","Body":"Addresses: https://github.com/dotnet/cli/issues/11115\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11298","RelatedDescription":"Closed or merged PR \"Add support for Microsoft.WindowsDesktop.App\" (#11298)"},{"Id":"441201235","IsPullRequest":true,"CreatedAt":"2019-05-08T12:53:52","Actor":"dotnet-maestro[bot]","Number":"11296","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 12:51 PM\r\n- **Commit**: cd674b5a80db00833c02a8832ab1e41df45bc97c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19256.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190507.1\r\n- **Date Produced**: 5/7/2019 1:09 PM\r\n- **Commit**: d4ad9da23e6ad6eab3bb71d1080da1120cf7d2cf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19257.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11296","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11296)"},{"Id":"441661078","IsPullRequest":false,"CreatedAt":"2019-05-08T10:22:28","Actor":"HassanHashemi","Number":"11301","RawContent":null,"Title":"dotnet publish prefers files from dependency over local file","State":"open","Body":"I am not sure if this is a bug or by design, though it looks like a bug.\r\n\r\n## Steps to reproduce\r\n1. Create two **exe** projects **A** and **B**\r\n2. Reference A from B\r\n3. Add a file with same name (eg. Dockerfile) to root of both projects and set build action to **Content** and Copy if newer\r\n4. publish project B\r\n\r\n## Expected  behavior\r\noutput folder should contain **B**`s Dockerfile which is the project being published.\r\n\r\n## Actual behavior\r\noutput folder contains **A**`s Dockerfile which is **B**'s dependency\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nVersion: 2.2.203\r\nOS: Ubuntu 18.04\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11301","RelatedDescription":"Open issue \"dotnet publish prefers files from dependency over local file\" (#11301)"},{"Id":"441421129","IsPullRequest":false,"CreatedAt":"2019-05-07T20:02:04","Actor":"wli3","Number":"11300","RawContent":null,"Title":"Global tools shim does not have PE bits","State":"open","Body":"in 2 places\r\n\r\n- [ ] https://github.com/dotnet/cli/blob/master/src/dotnet/ShellShim/AppHostShimMaker.cs#L46\r\n- [ ] https://github.com/dotnet/sdk/blob/ab0f40a205d29725e02db2de2b330059d1fb7272/src/Tasks/Microsoft.NET.Build.Tasks/GenerateShims.cs#L105\r\n\r\n1. https://github.com/dotnet/core-setup/issues/6338 move apphost creating logic to a central place\r\n2. remove the code in SDK and CLI\r\n2. let these 2 places call with intermediateAssembly param","Url":"https://github.com/dotnet/cli/issues/11300","RelatedDescription":"Open issue \"Global tools shim does not have PE bits\" (#11300)"},{"Id":"441400735","IsPullRequest":false,"CreatedAt":"2019-05-07T19:07:33","Actor":"KathleenDollard","Number":"11299","RawContent":null,"Title":"DotNet tools fail to with `dotnet run` or VS F5","State":"open","Body":"@wli3 \r\n\r\n## Steps to reproduce\r\n* Create a console application targeting .NET Core 3.0\r\nF5 in Visual Studio or dotnet run at the command line\r\nIt works\r\n* Add  `<PackAsTool>true</PackAsTool>`\r\nF5 or dotnet run\r\nFailure (\"... debug profile does not exist\" in VS, ...File not found... at command line\r\n* Change to  target 2.1\r\nIt works\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010050 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009768 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10663 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27117-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27119-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11299","RelatedDescription":"Open issue \"DotNet tools fail to with `dotnet run` or VS F5\" (#11299)"},{"Id":"440823219","IsPullRequest":true,"CreatedAt":"2019-05-07T17:41:05","Actor":"nugetlurker","Number":"11294","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11294","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11294)"},{"Id":"440823182","IsPullRequest":true,"CreatedAt":"2019-05-07T17:40:49","Actor":"nugetlurker","Number":"11293","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11293","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11293)"},{"Id":"441224668","IsPullRequest":false,"CreatedAt":"2019-05-07T13:11:29","Actor":"tplourdelincoln","Number":"11297","RawContent":null,"Title":"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly ","State":"open","Body":"We have an ASP.NET Core 2.1 application using the full framework (4.7) that references a .NET 4.6 class library that make SOAP calls (WebReference).  Since 2016 we've been able to run `dotnet publish` in our CI process with no issues with VS 2017.  Once we installed VS2019 on the same host this stopped working.  \r\n\r\nWe suspect it's a problem with the `dotnet` CLI deciding which version of MSBuild to run.\r\n\r\nWe understand that there are some work-arounds that seem to get past it such as setting `<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>` (which we don't want to do) and it seems that running MSBuild directly instead of `dotnet publish` works but we wanted to report this issue here.\r\n\r\n## Steps to reproduce\r\n* Use a windows machine with VS 2017 Pro (v15.9.11) and VS 2019 Pro (16.0.2) installed, both with web workloads\r\n* Create a solution with two projects:\r\n    * ASP.NET Core 2.1 with .NET Framework 4.7 which references a...\r\n    * .NET 4.6 Class Library Project\r\n* Add a Web Reference to the class library project (i.e.http://www.dneonline.com/calculator.asmx)\r\n* Run `dotnet publish --configuration Release -out c:\\temp\\foo`\r\n\r\nHere is a [repo with an example](https://github.com/tplourdelincoln/DotnetPublish2019BugDemo).\r\n\r\n## Expected  behavior\r\nThe publish operation works\r\n\r\n## Actual behavior\r\nThis error is thrown:\r\n```\r\nc:\\code\\sandbox\\PublishBugExample\\PublishBugExample>dotnet publish --configuration Release -o c:\\temp\\bug-demo\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 65.03 ms for c:\\code\\sandbox\\PublishBugExample\\PublishBugExample\\PublishBugExample.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.602\\Microsoft.Common.CurrentVersion.targets(3541,5): error MSB4062: The \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [c:\\code\\sandbox\\PublishBugExample\\ExampleWebServiceLib\\ExampleWebServiceLib.csproj]\r\n```\r\n\r\n## More info\r\n\r\nIt seems that running MSBuild works however and the publish output is almost identical compared to when `dotnet publish` was ran in the past:\r\n\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\msbuild\" /t:Publish /p:Configuration=Release;Out-Dir=C:\\temp\\foo`\r\n\r\nAccording to our build logs, the last successful time `dotnet publish` ran (before VS 2019 was installed), it reported using `Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core` you'll notice in the output above it reports using `16.0.450+ga8dc7f1d34 for .NET Core`.\r\n\r\nIf `dotnet publish` is not the recommended way of publishing such configurations please provide guidance.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11297","RelatedDescription":"Open issue \"dotnet publish returns Error MSB4062 \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly \" (#11297)"},{"Id":"441198515","IsPullRequest":true,"CreatedAt":"2019-05-07T12:12:36","Actor":"vagisha-nidhi","Number":"11295","RawContent":null,"Title":"TestPlatform insertion 16.0.2-preview-20190502-01","State":"open","Body":"Release : [https://github.com/microsoft/vstest/releases/tag/16.0.2-preview-20190502-01](https://github.com/microsoft/vstest/releases/tag/16.0.2-preview-20190502-01)\r\nRelease Notes here : [https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1602-preview-20190502-01](https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1602-preview-20190502-01)","Url":"https://github.com/dotnet/cli/pull/11295","RelatedDescription":"Open PR \"TestPlatform insertion 16.0.2-preview-20190502-01\" (#11295)"},{"Id":"440667634","IsPullRequest":true,"CreatedAt":"2019-05-07T12:07:59","Actor":"dotnet-maestro[bot]","Number":"11289","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 3:14 PM\r\n- **Commit**: d6485643ff1ffbed005f640ccd142c549422bb01\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11289)"},{"Id":"440171880","IsPullRequest":true,"CreatedAt":"2019-05-07T06:25:07","Actor":"brettfo","Number":"11286","RawContent":null,"Title":"[release/2.2.3xx] update F# for LOC changes","State":"closed","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179427?_a=overview).","Url":"https://github.com/dotnet/cli/pull/11286","RelatedDescription":"Closed or merged PR \"[release/2.2.3xx] update F# for LOC changes\" (#11286)"},{"Id":"440171576","IsPullRequest":true,"CreatedAt":"2019-05-07T06:25:02","Actor":"brettfo","Number":"11285","RawContent":null,"Title":"[release/2.1.7xx] update F# for LOC changes","State":"closed","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179427?_a=overview).","Url":"https://github.com/dotnet/cli/pull/11285","RelatedDescription":"Closed or merged PR \"[release/2.1.7xx] update F# for LOC changes\" (#11285)"},{"Id":"440812651","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:37","Actor":"rainersigwald","Number":"11292","RawContent":null,"Title":"MSBuild 16.1.73","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11292","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73\" (#11292)"},{"Id":"440812007","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:18","Actor":"rainersigwald","Number":"11291","RawContent":null,"Title":"MSBuild 16.1.73 (2.1.7xx)","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11291","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73 (2.1.7xx)\" (#11291)"},{"Id":"440637303","IsPullRequest":false,"CreatedAt":"2019-05-07T03:19:02","Actor":"YunWeiaa","Number":"11288","RawContent":null,"Title":"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.","State":"closed","Body":"## Steps to reproduce\r\n1. Create empty directory\r\n2. Copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n    \"version\": 1,\r\n    \"isRoot\": true,\r\n    \"tools\": {\r\n        \"t-rex\": {\r\n            \"version\": \"1.0.53\",\r\n            \"commands\": [\"t-rex\"]\r\n        },\r\n        \"dotnetsay\": {\r\n            \"version\": \"2.1.4\",\r\n            \"commands\": [\"dotnetsay\"]\r\n        }\r\n    }\r\n}\r\n\r\n3. cd to the directory with manifest file\r\n4. Run  dotnet tool run t-rex -- -h\r\n5. It should show error. Follow the instruction from the error\r\n6. Run dotnet tool run t-rex -- -h again\r\n\r\n## Expected  behavior\r\nIt should show help from t-rex\r\n\r\n\r\n## Actual behavior\r\nRun dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\r\n![image](https://user-images.githubusercontent.com/33921754/57220293-5f867f80-702d-11e9-8ae3-1f3e76372612.png)\r\n\r\n\r\n## Environment data\r\nD16.1/28902.138(16.1.0 preview3.0)+ CLI/SDK: 3.0.100-preview6-011765\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview6-011765\r\n Commit:    fffa58a7df\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011765\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27705-13\r\n  Commit:  ccea80903e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-011765 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19255-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11288","RelatedDescription":"Closed issue \"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\" (#11288)"},{"Id":"440410064","IsPullRequest":true,"CreatedAt":"2019-05-06T20:52:31","Actor":"dsychin","Number":"11287","RawContent":null,"Title":"Update warning message for dotnet tool update and uninstall","State":"closed","Body":"Fixes #9650\r\nChanged warning message when tool is not found to include more information about package Ids and tool names.","Url":"https://github.com/dotnet/cli/pull/11287","RelatedDescription":"Closed or merged PR \"Update warning message for dotnet tool update and uninstall\" (#11287)"},{"Id":"440670842","IsPullRequest":true,"CreatedAt":"2019-05-06T16:16:41","Actor":"dotnet-maestro[bot]","Number":"11290","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 12:46 PM\r\n- **Commit**: 588389e83475cb3d1fac5231103f5d08737cef8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11290","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11290)"},{"Id":"440016079","IsPullRequest":true,"CreatedAt":"2019-05-05T12:47:43","Actor":"dotnet-maestro[bot]","Number":"11283","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190502.4\r\n- **Date Produced**: 5/3/2019 4:03 AM\r\n- **Commit**: 231a861bd96b5e4fbe287956be76697f5f900680\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19252.4\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190503.3\r\n- **Date Produced**: 5/4/2019 12:00 AM\r\n- **Commit**: 6a8d9c303ad4eb6cfb86a467e992de8b0b4779ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19253.3\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 3:35 PM\r\n- **Commit**: 4cbbca75493efccdb57de63597e3e4ee452471ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19254.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11283","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11283)"},{"Id":"440021989","IsPullRequest":false,"CreatedAt":"2019-05-03T12:24:07","Actor":"LinchaiTheShinigami","Number":"11284","RawContent":null,"Title":"\"Dotnet New Console\" does not handle paths with \"%\" character ","State":"open","Body":"## Steps to reproduce\r\n1. Create a local folder path with the % symbol\r\n2. In the command line run \"Dotnet New Console\" under that folder path\r\n3. Once the console application has been built \"Dotnet Run\"\r\n\r\n## Expected  behavior\r\nConsole should print \"Hello World!\"\r\n\r\n## Actual behavior\r\ncs.proj path is not found (although it exists in the precise location as the mentioned by the error)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11284","RelatedDescription":"Open issue \"\"Dotnet New Console\" does not handle paths with \"%\" character \" (#11284)"},{"Id":"439806831","IsPullRequest":true,"CreatedAt":"2019-05-02T21:59:42","Actor":"mmitche","Number":"11282","RawContent":null,"Title":"[release/2.1.5xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)","Url":"https://github.com/dotnet/cli/pull/11282","RelatedDescription":"Open PR \"[release/2.1.5xx] Move to Azure DevOps\" (#11282)"},{"Id":"439805915","IsPullRequest":true,"CreatedAt":"2019-05-02T21:56:43","Actor":"mmitche","Number":"11281","RawContent":null,"Title":"[release/2.2.1xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)\r\n","Url":"https://github.com/dotnet/cli/pull/11281","RelatedDescription":"Open PR \"[release/2.2.1xx] Move to Azure DevOps\" (#11281)"},{"Id":"439714846","IsPullRequest":true,"CreatedAt":"2019-05-02T21:35:47","Actor":"mmitche","Number":"11280","RawContent":null,"Title":"[NOMERGE, WIP] Test automated move to AzDO","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11280","RelatedDescription":"Closed or merged PR \"[NOMERGE, WIP] Test automated move to AzDO\" (#11280)"},{"Id":"439570748","IsPullRequest":false,"CreatedAt":"2019-05-02T12:43:04","Actor":"hez2010","Number":"11278","RawContent":null,"Title":"How to disable assemblies referenced by project or nuget package?","State":"open","Body":"## Steps to reproduce\r\n```\r\ndotnet new classlib -f netstandard2.1\r\ndotnet add package SixLabors.ImageSharp --version 1.0.0-beta0006\r\n```\r\nadd a method using `Span<T>` in Class1.cs such as:\r\n```csharp\r\npublic void Test()\r\n{\r\n    Span<int> x;\r\n}\r\n```\r\n```\r\ndotnet build\r\n```\r\n\r\n## Expected  behavior\r\nSuccessfully built\r\n\r\n## Actual behavior\r\nI have no way to use `Span<T>`\r\n```\r\nerror CS0433: The type 'Span<T>' exists in both 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [C:\\Users\\hez20\\Desktop\\test\\test.csproj]\r\n```\r\nSystem.Memory (Version=2.1.0.0) was referenced by my .net standard 2.1 project, and System.Memory (Version=4.0.1.0) was referenced by SixLabors.ImageSharp which is a nuget package and I cannot modify its source code.\r\n\r\nHow can I specify the assembly I want to use in my source code? Is there any way to keep System.Memory (Version=4.0.1.0) only being used in SixLabors.ImageSharp, and not spreading to my project?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011223\r\n Commit:    118dd862c8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11278","RelatedDescription":"Open issue \"How to disable assemblies referenced by project or nuget package?\" (#11278)"},{"Id":"439556477","IsPullRequest":true,"CreatedAt":"2019-05-02T12:05:44","Actor":"dotnet-maestro[bot]","Number":"11277","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11277","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11277)"},{"Id":"439431556","IsPullRequest":false,"CreatedAt":"2019-05-02T05:26:14","Actor":"Leon99","Number":"11276","RawContent":null,"Title":"Support for appsetings.yml","State":"open","Body":"There is an increasing number of systems that adapt YAML as a configuration format. Unfortunately, .NET requires much more effort to use appsetings.yml than to use appsetings.json. One piece to it that is small but very annoying when put to scale is having to explicitly include the following code in a csproj:\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"appsettings.*\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n  </ItemGroup>\r\n```\r\nThis is a suggestion to adjust the build tool to handle appsettings.\\*.yml the same way appsettings.\\*.json are handled, which is, I guess, copying them to publish directory without having that piece in the csproj.","Url":"https://github.com/dotnet/cli/issues/11276","RelatedDescription":"Open issue \"Support for appsetings.yml\" (#11276)"},{"Id":"439293807","IsPullRequest":false,"CreatedAt":"2019-05-01T19:38:54","Actor":"mabead","Number":"11275","RawContent":null,"Title":"pre-jitting result of `dotnet publish`","State":"open","Body":"The [dotnet store](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-store) command has the ability to optimize the assemblies for the target platform:\r\n\r\n> By default, assemblies are optimized for the target runtime and framework. For more information, see the runtime package store topic.\r\n\r\nAs said in https://github.com/dotnet/cli/issues/11270, it is not clear what is optimized. But if I read between the lines of [this post](https://aws.amazon.com/blogs/developer/aws-lambda-layers-with-net-core/), it looks like the `dotnet store` command pre-jits the assemblies for the target environment. This is something quite usefull to speed-up the startup of applications.\r\n\r\nWould it be possible to provide the same optimizations through an `--optimize` option to `dotnet publish`? This would make it easier than having to manage runtime package stores to optimize assemblies for the target platform. \r\n\r\nI would use it for sure to pre-jit assemblies of AWS lambdas thus minimizing the cold start time overhead.\r\n","Url":"https://github.com/dotnet/cli/issues/11275","RelatedDescription":"Open issue \"pre-jitting result of `dotnet publish`\" (#11275)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"441943870","IsPullRequest":true,"CreatedAt":"2019-05-08T21:39:57","Actor":"wtgodbe","Number":"1180","RawContent":null,"Title":"Add shims to netstandard2.1 for types that used to have OOB packages","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs ","Url":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Open PR \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-08T17:55:44","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"closed","Body":"CC @ViktorHofer @ericstj. This also contains a maestro update of Arcade dependencies.","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Closed or merged PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"441500740","IsPullRequest":false,"CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Number":"1179","RawContent":null,"Title":"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework","State":"open","Body":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Open issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179)"},{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"open","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Open issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-02T22:31:53","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"open","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Open PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-02T21:23:04","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"open","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Open PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-01T12:03:40","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"438892784","IsPullRequest":false,"CreatedAt":"2019-04-30T17:32:25","Actor":"ericstj","Number":"1171","RawContent":null,"Title":"BaseNumberConverter should be effectively sealed","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik ","Url":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Open issue \"BaseNumberConverter should be effectively sealed\" (#1171)"},{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-30T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19229.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"442055044","IsPullRequest":true,"CreatedAt":"2019-05-09T05:25:18","Actor":"dotnet-maestro-bot","Number":"37535","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27709-00, beta-27709-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37535","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27709-00, beta-27709-00, respectively (master)\" (#37535)"},{"Id":"442050209","IsPullRequest":false,"CreatedAt":"2019-05-09T05:00:13","Actor":"ahsonkhan","Number":"37534","RawContent":null,"Title":"Comparing Utf8JsonReader to default instance with the == operator","State":"open","Body":"The `Utf8JsonReader` is a ref struct and it's possible that someone might pass around a default instance. Currently, there is no good way for the receiver to check if the `Utf8JsonReader` is default (equivalent to null for a class, or \"not set\").\r\n\r\nOne solution is for the reader to implement the == operator. However, this has concerns around what the semantics of \"equality\" mean here. What does comparing two non-default instances of the reader mean?\r\n\r\nAnother solution is for the reader to provide an `IsDefault` property that can be polled instead. This may be less discoverable, but has clear semantics tied to the usage scenario.\r\n\r\n## API Proposal:\r\n```C#\r\n    public ref partial struct Utf8JsonReader\r\n    {\r\n        public bool IsDefault { get; }\r\n\r\n        // OR the following, though the semantics need to be well-defined:\r\n       public static bool operator ==(Utf8JsonReader left, Utf8JsonReader right);\r\n       public static bool operator !=(Utf8JsonReader left, Utf8JsonReader right);\r\n    }\r\n```\r\n\r\nAs an aside, since `Utf8JsonReader` is a ref struct, it cannot implement `IEquatable`, like any ref struct.\r\n\r\n## Usage is relatively straightforward:\r\n```C#\r\nprivate static void ValidateAndReadOnce(ref Utf8JsonReader reader)\r\n{\r\n    if (reader.IsDefault)\r\n    {\r\n        throw new Exception(\"Reader was not set\");\r\n    }\r\n    reader.Read();\r\n}\r\n```\r\n\r\n**There is still a question whether such an API is absolutely necessary.** Calling `.Read()` on a default instance of `Utf8JsonReader` would return false, so it may not be necessary for the caller to guard against that. In that case, such an API wouldn't be necessary.\r\n\r\n\r\n```C#\r\n// Current behaviour of API calls to the Utf8JsonReader on a default instance.\r\n[Fact]\r\npublic static void DefaultUtf8JsonReader()\r\n{\r\n    Utf8JsonReader json = default;\r\n\r\n    Assert.Equal(0, json.BytesConsumed);\r\n    Assert.Equal(0, json.TokenStartIndex);\r\n    Assert.Equal(0, json.CurrentDepth);\r\n    Assert.Equal(JsonTokenType.None, json.TokenType);\r\n    Assert.Equal(default, json.Position);\r\n    Assert.False(json.HasValueSequence);\r\n    Assert.True(json.ValueSpan.SequenceEqual(default));\r\n    Assert.True(json.ValueSequence.IsEmpty);\r\n\r\n    Assert.Equal(0, json.CurrentState.BytesConsumed);\r\n    Assert.Equal(default, json.CurrentState.Position);\r\n    Assert.Equal(0, json.CurrentState.Options.MaxDepth);\r\n    Assert.False(json.CurrentState.Options.AllowTrailingCommas);\r\n    Assert.Equal(JsonCommentHandling.Disallow, json.CurrentState.Options.CommentHandling);\r\n\r\n    Assert.False(json.Read());\r\n\r\n    json = default;\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(\"\".AsSpan()));\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(default(ReadOnlySpan<char>)));\r\n    JsonTestHelper.AssertThrows<InvalidOperationException>(json, (jsonReader) => jsonReader.TextEquals(default(ReadOnlySpan<byte>)));\r\n}\r\n```\r\n\r\nWhat do others think? Folks from asp.net, would such an API be useful for you anywhere?\r\n- **Should we have such an API and if so which approach?**\r\n   - IsDefault or == operator?\r\n\r\nI know that you have guards on the `Read` method itself, which is a more appropriate solution since it guards against a default instance being passed in, for free. For example:\r\nhttps://github.com/aspnet/AspNetCore/blob/9fae14a92650175b2c9ef73d2ab605b52c2b18e4/src/SignalR/common/Shared/SystemTextJsonExtensions.cs#L11-L19\r\n\r\n\r\ncc @jeffschwMSFT, @bartonjs, @steveharter, @joshfree, @GrabYourPitchforks, @KrzysztofCwalina, @BrennanConroy, @rynowak ","Url":"https://github.com/dotnet/corefx/issues/37534","RelatedDescription":"Open issue \"Comparing Utf8JsonReader to default instance with the == operator\" (#37534)"},{"Id":"441550646","IsPullRequest":false,"CreatedAt":"2019-05-09T03:46:13","Actor":"Zenexer","Number":"37506","RawContent":null,"Title":"System.Text.Json fails to parse enums with negative values","State":"closed","Body":"This is a regression from Newtonsoft that causes existing ASP.NET Core applications to fail when upgrading to .NET Core 3.0.\r\n\r\nReproduction:\r\n\r\n``` csharp\r\nusing System;\r\nusing System.Text.Json.Serialization;\r\n\r\nnamespace Sandbox\r\n{\r\n    public enum ReactionType\r\n    {\r\n        Neutral = 0,\r\n        Like = 1,\r\n        Dislike = -1,\r\n    }\r\n\r\n    public class Reaction\r\n    {\r\n        public ReactionType Value { get; set; }\r\n\r\n        public Reaction() { }\r\n\r\n        public Reaction(ReactionType value) => Value = value;\r\n    }\r\n\r\n    public class Program\r\n    {\r\n        public static void Main()\r\n        {\r\n            var values = new Reaction[]\r\n            {\r\n                new Reaction(ReactionType.Neutral),\r\n                new Reaction(ReactionType.Like),\r\n                new Reaction(ReactionType.Dislike),\r\n            };\r\n\r\n            foreach (var value in values)\r\n            {\r\n                var json = JsonSerializer.ToString(value);\r\n                Console.WriteLine(json);\r\n\r\n                try\r\n                {\r\n                    var obj = JsonSerializer.Parse<Reaction>(json);\r\n                    Console.WriteLine(obj.Value);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Console.WriteLine(ex);\r\n                }\r\n            }\r\n\r\n            Console.ReadKey(true);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\"Value\":0}\r\nNeutral\r\n{\"Value\":1}\r\nLike\r\n{\"Value\":-1}\r\nSystem.Text.Json.JsonReaderException: The JSON value from [Sandbox.Reaction].Value could not be converted to Sandbox.ReactionType.\r\n   at System.Text.Json.ThrowHelper.ThrowJsonReaderException_DeserializeUnableToConvertValue(Type propertyType, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonPropertyInfoNotNullable`3.Read(JsonTokenType tokenType, JsonSerializerOptions options, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse[TValue](String json, JsonSerializerOptions options)\r\n   at Sandbox.Program.Main() in C:\\Users\\paul\\source\\repos\\Sandbox\\Sandbox\\Program.cs:line 40\r\n```","Url":"https://github.com/dotnet/corefx/issues/37506","RelatedDescription":"Closed issue \"System.Text.Json fails to parse enums with negative values\" (#37506)"},{"Id":"441569646","IsPullRequest":true,"CreatedAt":"2019-05-09T03:45:58","Actor":"Zenexer","Number":"37508","RawContent":null,"Title":"Fix #37506: System.Text.Json fails to parse enums with negative values","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37508","RelatedDescription":"Closed or merged PR \"Fix #37506: System.Text.Json fails to parse enums with negative values\" (#37508)"},{"Id":"441868767","IsPullRequest":true,"CreatedAt":"2019-05-09T02:35:40","Actor":"sdmaclea","Number":"37521","RawContent":null,"Title":"Reenable tests","State":"closed","Body":"Reenable tests fixed by #37246","Url":"https://github.com/dotnet/corefx/pull/37521","RelatedDescription":"Closed or merged PR \"Reenable tests\" (#37521)"},{"Id":"441902117","IsPullRequest":true,"CreatedAt":"2019-05-09T02:24:43","Actor":"JohnTortugo","Number":"37525","RawContent":null,"Title":"Update Helix SDK Version - Release/3.0 branch","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37525","RelatedDescription":"Closed or merged PR \"Update Helix SDK Version - Release/3.0 branch\" (#37525)"},{"Id":"441996861","IsPullRequest":true,"CreatedAt":"2019-05-09T00:20:08","Actor":"Marusyk","Number":"37533","RawContent":null,"Title":"Re-using the Utf8JsonWriter instance within the Serializer","State":"open","Body":"According to #37335\r\n\r\nI've added the similar class to reuse Utf8Json Writer with small changes. What do you think about that?\r\nShould it replace ReusableUtf8JsonWriter from Microsoft.AspNetCore.Http.Connections.Common in the future?\r\n\r\nPlease review.\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/37533","RelatedDescription":"Open PR \"Re-using the Utf8JsonWriter instance within the Serializer\" (#37533)"},{"Id":"441966188","IsPullRequest":true,"CreatedAt":"2019-05-09T00:18:05","Actor":"MattGal","Number":"37530","RawContent":null,"Title":"Update CI docker images","State":"closed","Body":"@wfurt FYI;  we may need to tweak permissions still on these images too.","Url":"https://github.com/dotnet/corefx/pull/37530","RelatedDescription":"Closed or merged PR \"Update CI docker images\" (#37530)"},{"Id":"441986574","IsPullRequest":true,"CreatedAt":"2019-05-08T23:31:16","Actor":"wtgodbe","Number":"37532","RawContent":null,"Title":"Mark System.Reflection.Emit* as inbox on netstandard2.1","State":"open","Body":"https://github.com/dotnet/standard/pull/1180 adds inbox shims for RefEmit, once we merge that PR we should mark RefEmit as inbox for netstandard2.1.\r\n\r\n@ericstj PTAL","Url":"https://github.com/dotnet/corefx/pull/37532","RelatedDescription":"Open PR \"Mark System.Reflection.Emit* as inbox on netstandard2.1\" (#37532)"},{"Id":"441982835","IsPullRequest":true,"CreatedAt":"2019-05-08T23:14:47","Actor":"dotnet-maestro[bot]","Number":"37531","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190508.72\r\n- **Date Produced**: 5/8/2019 11:12 PM\r\n- **Commit**: e330c2ce5b1af4e69cdcacb8254a5107586c68f8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27708-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27708-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27708-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37531","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#37531)"},{"Id":"441959704","IsPullRequest":true,"CreatedAt":"2019-05-08T22:32:49","Actor":"JeremyKuhne","Number":"37529","RawContent":null,"Title":"Add Guid serialization support.","State":"open","Body":"Add non IConvertable converters to dictionary for easier extensibility.\r\n\r\nFixes #37496 ","Url":"https://github.com/dotnet/corefx/pull/37529","RelatedDescription":"Open PR \"Add Guid serialization support.\" (#37529)"},{"Id":"441955137","IsPullRequest":false,"CreatedAt":"2019-05-08T22:15:58","Actor":"LaterStart","Number":"37528","RawContent":null,"Title":"System.Data.SqlClient is not supported on this platform","State":"open","Body":"Hi,\r\n\r\nMy persistance layer project has these dependencies:\r\n```\r\nMicrosoft.EntityFrameworkCore (3.0.0-preview5.19227.1)\r\nMicrosoft.EntityFrameworkCore.SqlServer (3.0.0-preview5.19227.1)\r\nMicrosoft.NETCore.Platforms (3.0.0-preview5.19224.8)\r\n```\r\n\r\nAnd I have encountered an error while trying to invoke `SaveChangesAsync(cancellationToken) `method.\r\n\r\nHere is the connection string:\r\n`Server=mypcname\\\\SQLEXPRESS;Database=testdb;Trusted_Connection=True;MultipleActiveResultSets=true;`\r\n\r\nContext constructor:\r\n```\r\n public Context(string connectionString) : base(new DbContextOptionsBuilder()\r\n            .UseSqlServer(connectionString)\r\n            .Options) { }\r\n```\r\n\r\nStack trace:\r\n```\r\nSystem.PlatformNotSupportedException: System.Data.SqlClient is not supported on this platform.\r\n   at System.Data.SqlClient.SqlConnection..ctor(String connectionString)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.CreateDbConnection()\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Vigab.Persistence.Handlers.Commands.RegisterUserHandler.Handle(RegisterUserCommand request, CancellationToken cancellationToken) in C:\\Vigab\\Vigab.Persistence\\Handlers\\Commands\\RegisterUserHandler.cs:line 36\r\n   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\r\n   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\r\n   at Vigab.Api.Controllers.UsersController.Create(RegisterUserCommand command) in C:\\Vigab\\Vigab.Api\\Controllers\\UsersController.cs:line 18\r\n   at lambda_method(Closure , Object )\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37528","RelatedDescription":"Open issue \"System.Data.SqlClient is not supported on this platform\" (#37528)"},{"Id":"441937086","IsPullRequest":false,"CreatedAt":"2019-05-08T21:20:44","Actor":"stephentoub","Number":"37527","RawContent":null,"Title":"NullableAttribute causing issues for reverse API compat","State":"open","Body":"I'm hitting this on https://github.com/dotnet/corefx/pull/36984, where we're adding nullable annotations into partial facade implementations (but not yet into refs), e.g.\r\n```\r\nC:\\Users\\stoub\\.nuget\\packages\\microsoft.dotnet.apicompat\\1.0.0-beta.19256.12\\build\\Microsoft.DotNet.ApiCompat.targets(143,5): error : CannotRemoveAttribute : Attribute 'System.Runtime.CompilerServices.NullableAttribute' exists on 'System.Lazy<T, TMetadata>' in the implementation but not the reference. [D:\\repos\\corefx\\src\\System.Runtime\\src\\System.Runtime.csproj]\r\nC:\\Users\\stoub\\.nuget\\packages\\microsoft.dotnet.apicompat\\1.0.0-beta.19256.12\\build\\Microsoft.DotNet.ApiCompat.targets(157,5): error : MatchingRefApiCompat failed - The reference assembly doesn't match all the APIs in the implementation for 'D:\\repos\\corefx\\artifacts\\bin\\System.Runtime\\netcoreapp-Windows_NT-Debug\\System.Runtime.dll'. To address either fix errors in the reference assembly (referenced as implementation in compat errors for this reverse compat check), add the issues to the baseline file 'D:\\repos\\corefx\\src\\System.Runtime\\src\\MatchingRefApiCompatBaseline.txt' or disable this check by setting RunMatchingRefApiCompat=false in this project. [D:\\repos\\corefx\\src\\System.Runtime\\src\\System.Runtime.csproj]\r\n```\r\nFor now I'm augmenting https://github.com/dotnet/corefx/blob/master/eng/DefaultGenApiDocIds.txt to ignore NullableAttribute (which is generated by the compiler as internal, so it's not clear why API compat would currently be paying attention to it).\r\n\r\ncc: @ericstj, @safern","Url":"https://github.com/dotnet/corefx/issues/37527","RelatedDescription":"Open issue \"NullableAttribute causing issues for reverse API compat\" (#37527)"},{"Id":"441936530","IsPullRequest":false,"CreatedAt":"2019-05-08T21:19:05","Actor":"KashMoneyMillionaire","Number":"37526","RawContent":null,"Title":"CompareInfo.IndexOf() returns different values on Linux and Windows","State":"open","Body":"The following code behaves differently on Linux and Windows. Windows returns 0 while Linux returns -1. I except 0 to be returned on both based on my understanding of the `IgnoreSymbols` flag.\r\n\r\n```csharp\r\nSystem.Globalization.CompareInfo info = System.Globalization.CultureInfo.CurrentCulture.CompareInfo;\r\nint index = info.IndexOf(\"Mary\", \"♪Mary\", System.Globalization.CompareOptions.IgnoreSymbols);\r\nSystem.Console.WriteLine(index);\r\n```\r\n\r\nI've looked at #31103 and I don't believe that using `CompareOptions.Ordinal` will work here (mostly because it is an invalid flag combination).\r\n\r\n`char.IsSymbol('♪')` returns true for both Windows and Linux.\r\n\r\n\r\nSystem Info:\r\nRuntime: .NET Core 2.1 on both\r\nOS: Windows 10 and Ubuntu 18.04","Url":"https://github.com/dotnet/corefx/issues/37526","RelatedDescription":"Open issue \"CompareInfo.IndexOf() returns different values on Linux and Windows\" (#37526)"},{"Id":"441890550","IsPullRequest":true,"CreatedAt":"2019-05-08T20:41:19","Actor":"JohnTortugo","Number":"37523","RawContent":null,"Title":"Update Helix SDK Version","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37523","RelatedDescription":"Closed or merged PR \"Update Helix SDK Version\" (#37523)"},{"Id":"441899823","IsPullRequest":false,"CreatedAt":"2019-05-08T19:44:22","Actor":"slozier","Number":"37524","RawContent":null,"Title":"double.ToString fixed-point formatting does unexpected rounding","State":"open","Body":"`(0.0046).ToString(\"F2\")` returns `0.01` instead of the expected `0.00`. @tannergooding","Url":"https://github.com/dotnet/corefx/issues/37524","RelatedDescription":"Open issue \"double.ToString fixed-point formatting does unexpected rounding\" (#37524)"},{"Id":"441882691","IsPullRequest":false,"CreatedAt":"2019-05-08T18:59:55","Actor":"NinoFloris","Number":"37522","RawContent":null,"Title":"TargetInvocationException System.Text.Json.Serialization","State":"open","Body":"Don't have a repro yet but this threw an exception during serialization.\r\nRunning on 3.0.100-preview5\r\n\r\n```\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentException: Cannot bind to the target method because its signature is not compatible with that of the delegate type.\r\n   at System.Delegate.CreateDelegate(Type type, MethodInfo method, Boolean throwOnBindFailure)\r\n   at System.Text.Json.Serialization.JsonPropertyInfoCommon`3..ctor(Type parentClassType, Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type elementType, JsonSerializerOptions options)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Text.Json.Serialization.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.Serialization.JsonSerializer.GetRuntimeClassInfo(Object value, JsonClassInfo& jsonClassInfo, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleDictionary(JsonClassInfo elementClassInfo, JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleObject(JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteObject(JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.Write(Utf8JsonWriter writer, Int32 flushThreshold, JsonSerializerOptions options, WriteStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteAsyncCore(Object value, Type type, Stream utf8Json, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|27_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n```","Url":"https://github.com/dotnet/corefx/issues/37522","RelatedDescription":"Open issue \"TargetInvocationException System.Text.Json.Serialization\" (#37522)"},{"Id":"441868151","IsPullRequest":false,"CreatedAt":"2019-05-08T18:24:57","Actor":"layomia","Number":"37520","RawContent":null,"Title":"Refactor System.Text.Json tests to remove redundancy","State":"open","Body":"The tests have a lot of copy/paste redundancy that could be cleaned up with some refactoring.","Url":"https://github.com/dotnet/corefx/issues/37520","RelatedDescription":"Open issue \"Refactor System.Text.Json tests to remove redundancy\" (#37520)"},{"Id":"441867806","IsPullRequest":true,"CreatedAt":"2019-05-08T18:24:05","Actor":"hughbe","Number":"37519","RawContent":null,"Title":"Add ServiceContainer tests and fix bugs","State":"open","Body":"Found some problems while writing tests in winforms\r\n\r\n- Fix debug assert NREs and failures\r\n- Fix `InvalidCastException` in `Container` (https://github.com/dotnet/winforms/issues/817)\r\n- Fix `NullReferenceException` in `GetService(null)`. Decided not to throw ANE but to be a `nop` to match other places across .NET where `GetService` for no such type returns `null`","Url":"https://github.com/dotnet/corefx/pull/37519","RelatedDescription":"Open PR \"Add ServiceContainer tests and fix bugs\" (#37519)"},{"Id":"441807615","IsPullRequest":false,"CreatedAt":"2019-05-08T17:49:37","Actor":"Eilon","Number":"37515","RawContent":null,"Title":"System.Text.Json serialize accurate DateTime incorrectly!","State":"closed","Body":"_From @kennywangjin on Wednesday, 08 May 2019 06:35:39_\r\n\r\naspnetcore3.0 preview5 using System.Text.Json as input- and outputformatter:\r\nif DateTime is too accurate (sqlserver datetime2), it will serialize it to invalid format like: **2019-05-08T00:00:5406760219**\r\nThis kind of result could not even be recognized by **DateTime.Parse**.\r\nI think it should be **2019-05-08T00:00:54.06760219** (with a dot between seconds number and others) which can be parsed by DateTime class.\r\n\r\n![批注 2019-05-08 143028](https://user-images.githubusercontent.com/3364218/57354392-e9edf100-719d-11e9-88b9-be9d2c86744a.png)\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#10070_","Url":"https://github.com/dotnet/corefx/issues/37515","RelatedDescription":"Closed issue \"System.Text.Json serialize accurate DateTime incorrectly!\" (#37515)"},{"Id":"441846123","IsPullRequest":true,"CreatedAt":"2019-05-08T17:31:02","Actor":"jkotas","Number":"37518","RawContent":null,"Title":"Regression test for multiple attributes on the same type","State":"open","Body":"Contributes to #37261","Url":"https://github.com/dotnet/corefx/pull/37518","RelatedDescription":"Open PR \"Regression test for multiple attributes on the same type\" (#37518)"},{"Id":"441844636","IsPullRequest":false,"CreatedAt":"2019-05-08T17:27:04","Actor":"JuditRose","Number":"37517","RawContent":null,"Title":"[.Net Core][LOC]The item '(Collection)' in PropertyGrid is not translated in .Net core","State":"open","Body":"@Jessie-Zhang01 commented on [Sun Apr 14 2019](https://github.com/dotnet/winforms/issues/775)\n\n**OS**: RS3 X64 JPN\r\n**VS**:  Dev16 16.1 d16.1 branch 28811.12 build JPN\r\n**.NET Core**: 3.0.100-preview4-011198 from Release branch\r\n\r\n**More info:**\r\nThis issue also can reproduce with all 13 local languages: CHS, CHT, CSY, DEU, ESN, ITA, JPN, KOR, PLK, PTB, RUS, TRK, FRA\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Install the .NET Core 3.0 SDK from https://github.com/dotnet/core-sdk for Release branch\r\n2. Open the .NET Core app from \\\\\\mlangfs1\\public\\Winforms\\CoreTest\\LocalValidation\\WindowsFormsApp4.zip in VS.\r\n3. Run it and observe the ‘Nodes’ component in PropertyGrid\r\n\r\n**Actual:** The item '(Collection)' in PropertyGrid is not translated in .Net core.\r\n![image](https://user-images.githubusercontent.com/45864649/56102740-8d623200-5f61-11e9-8002-0421f713754c.png)\r\n\r\n**Expected:** The item '(Collection)' in PropertyGrid should be translated in .Net core. Following is the screenshot of .Net framework, it is translated.\r\n![image](https://user-images.githubusercontent.com/45864649/56102780-bf739400-5f61-11e9-84ff-485917ffa315.png)\n\n---\n\n@dreddy-work commented on [Fri Apr 19 2019](https://github.com/dotnet/winforms/issues/775#issuecomment-484990308)\n\n@zsd4yr , can you please follow up on this?\n\n---\n\n@zsd4yr commented on [Mon Apr 22 2019](https://github.com/dotnet/winforms/issues/775#issuecomment-485459245)\n\nThere does not appear to be an entry for (Collection) in any resx file.\r\n\r\n![image](https://user-images.githubusercontent.com/10677481/56509902-0cfd7d00-64dd-11e9-8a01-7de6feccb1d1.png)\r\n\r\n@JuditRose did you miss this while porting the collection editor?\r\n\n\n---\n\n@JuditRose commented on [Wed May 08 2019](https://github.com/dotnet/winforms/issues/775#issuecomment-490576320)\n\nIt looks like the translation is coming from the CollectionConverterText translation key from corefx: https://github.com/dotnet/corefx/blob/c390ce7df50252e11f5d322276e9d19e046d1332/src/System.ComponentModel.TypeConverter/src/Resources/Strings.resx#L238\r\n@Tanya-Solyanik said that earlier there was a discussion about what to translate and what not to translate, and this was one of the areas that was agreed not to be translated. Maybe it worth to reevaluate.\n\n","Url":"https://github.com/dotnet/corefx/issues/37517","RelatedDescription":"Open issue \"[.Net Core][LOC]The item '(Collection)' in PropertyGrid is not translated in .Net core\" (#37517)"},{"Id":"441835359","IsPullRequest":false,"CreatedAt":"2019-05-08T17:02:25","Actor":"aseduto","Number":"37516","RawContent":null,"Title":"TLS Client Authentication fail on Linux","State":"open","Body":"Hi,\r\n\r\nI have a simple ClientTLS code that run fine in windows but always fail in linux.\r\n\r\nI have setup a repository with sample code here: https://github.com/aseduto/ClientTLS \r\n\r\nAnd a build here: https://ci.appveyor.com/project/aseduto/clienttls/builds/24399814\r\n\r\nThe build run exactly the same code in both win and linux and succeed in win but fail in linux.\r\nIn the linux build I test the same http call using openssl and succeed. So the problem is not in openssl.\r\n\r\nThe error is: Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL. ---> Interop+Crypto+OpenSslCryptographicException: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure\r\n\r\n ","Url":"https://github.com/dotnet/corefx/issues/37516","RelatedDescription":"Open issue \"TLS Client Authentication fail on Linux\" (#37516)"},{"Id":"441719353","IsPullRequest":true,"CreatedAt":"2019-05-08T12:51:50","Actor":"dotnet-maestro[bot]","Number":"37514","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190507.72\r\n- **Date Produced**: 5/8/2019 12:46 AM\r\n- **Commit**: 2e32f3b92f3a17b5821673babaa6883deb5ab209\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview6-27707-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6-27707-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6-27707-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37514","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#37514)"},{"Id":"441556481","IsPullRequest":true,"CreatedAt":"2019-05-08T12:50:28","Actor":"dotnet-maestro-bot","Number":"37507","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27708-01, beta-27708-01, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37507","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27708-01, beta-27708-01, respectively (master)\" (#37507)"},{"Id":"441711856","IsPullRequest":true,"CreatedAt":"2019-05-08T12:33:34","Actor":"dotnet-maestro[bot]","Number":"37513","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190507.8\r\n- **Date Produced**: 5/8/2019 7:30 AM\r\n- **Commit**: 2c75f5a09f770f3118e09abc35bdf88c1c7120b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19257.8\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19257.8\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37513","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#37513)"},{"Id":"441700256","IsPullRequest":true,"CreatedAt":"2019-05-08T12:03:30","Actor":"dotnet-maestro[bot]","Number":"37512","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19257.7\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19257.7\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19257.7\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37512","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#37512)"},{"Id":"441595180","IsPullRequest":false,"CreatedAt":"2019-05-08T07:39:59","Actor":"JamesNK","Number":"37511","RawContent":null,"Title":"HTTP2: Response trailers not loaded with some gRPC calls","State":"open","Body":"HttpClient is sometimes not loading response trailers into `HttpResponseMessage.TrailingHeaders`. I've confirmed that the server is returning trailers in Wireshark.\r\n\r\n```\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (  Expected: <Grpc.Core.RpcException>\r\n  But was:  <System.InvalidOperationException: Response did not have a grpc-status trailer.\r\n   at Grpc.NetCore.HttpClient.Internal.GrpcCall`2.GetStatusCore(HttpResponseMessage httpResponseMessage) in C:\\Development\\Source\\grpc-dotnet\\src\\Grpc.NetCore.HttpClient\\Internal\\GrpcCall.cs:line 426\r\n```\r\n\r\nThis exception comes from the managed gRPC client. The response content stream has been completely read yet the expected trailer is missing.\r\n\r\nRepo:\r\n\r\n1. git clone https://github.com/JamesNK/grpc-dotnet.git\r\n2. git checkout jamesnk/fix-interoptests\r\n3. dotnet run -p testassets\\InteropTestsNativeServer\r\n4. dotnet run -p testassets\\InteropTestsClient --server_port 8070 --test_case unimplemented_method\r\n\r\nThis failure effects 4 test cases (replace `--test_case XXX` with name):\r\n* empty_stream\r\n* unimplemented_method\r\n* unimplemented_service\r\n* status_code_and_message\r\n\r\nThe bug might be related to responses with an empty body.\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011799\r\n Commit:    3816213dde\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011799\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27707-07\r\n  Commit:  c9e7f134dc\r\n```\r\n\r\n// @wfurt @karelz ","Url":"https://github.com/dotnet/corefx/issues/37511","RelatedDescription":"Open issue \"HTTP2: Response trailers not loaded with some gRPC calls\" (#37511)"},{"Id":"441583396","IsPullRequest":false,"CreatedAt":"2019-05-08T07:06:24","Actor":"sywhang","Number":"37510","RawContent":null,"Title":"Add DisplayUnits property to EventCounter and friends","State":"open","Body":"`IncrementingEventCounter` and `IncrementingPollingCounter` were introduced as new types that tracks metrics that are always incrementing and therefore is better reported as a rate. We added the property `DisplayRateTimeScale`. \r\n\r\nThis proposal is to add one more property: `string DisplayUnits`.\r\n\r\nTo track rates, the units of the metric being tracked is often needed. For example, \"Allocated bytes per second\" could be any of \"bytes / sec\", \"KB / sec\", \"MB / sec\" or \"GB / sec\", so some kind of cue from the writer is needed for the reader. Having the `DisplayUnits` would allow the writer to create this counter as:\r\n```\r\nIncrementingEventCounter allocatedBytesCounter = new IncrementingEventCounter(\"Bytes Allocated\", myEventSource)\r\n{\r\n    DisplayName = \"Rate of Bytes Allocated\",\r\n    DisplayUnits = \"MB\",\r\n    DisplayRateTimeScale = TimeSpan.FromSeconds(1)\r\n};\r\n```\r\n\r\nas opposed to what needs to be done currently to implement such a counter:\r\n```\r\nIncrementingEventCounter allocatedBytesCounter = new IncrementingEventCounter(\"Bytes Allocated\", myEventSource)\r\n{\r\n    DisplayName = \"Rate of Bytes Allocated\",\r\n    DisplayRateTimeScale = TimeSpan.FromSeconds(1)\r\n};\r\nallocatedBytesCounter.AddMetadata(\"DisplayUnits\", \"MB\");\r\n```\r\n\r\ncc @noahfalk @tommcdon\r\n\r\n[EDIT] \r\nThis property would be useful to `EventCounter` and `PollingCounter` as well, so I'm now proposing that it be added to `DiagnosticCounter` which is the parent class for `EventCounter` and friends. \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37510","RelatedDescription":"Open issue \"Add DisplayUnits property to EventCounter and friends\" (#37510)"},{"Id":"441575495","IsPullRequest":true,"CreatedAt":"2019-05-08T06:40:48","Actor":"maryamariyan","Number":"37509","RawContent":null,"Title":"Adds more OleDb tests","State":"open","Body":"Adding some leftover tests not already included in the original PR that ported System.Data.OleDb (https://github.com/dotnet/corefx/pull/37101):\r\n\r\nRemove dead code: unused ctors from internal class FieldNameLookup.\r\nCode cleanup: sorts usings.\r\nAdd test: e.g. For `OleDbCommandBuilder.Quote/UnquoteIdentifer(..)` and `OleDbCommand.Prepare()`\r\n\r\n```\r\n  +---------+-------+---------------------+--------+\r\n  |         | Line  | Branch              | Method |\r\n  +---------+-------+---------------------+--------+\r\n  | Total   | 47.8% | 41.199999999999996% | 56.2%  |\r\n  +---------+-------+---------------------+--------+\r\n  | Average | 47.8% | 41.199999999999996% | 56.2%  |\r\n  +---------+-------+---------------------+--------+\r\n```\r\n\r\ncc: @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/37509","RelatedDescription":"Open PR \"Adds more OleDb tests\" (#37509)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"441992834","IsPullRequest":true,"CreatedAt":"2019-05-09T02:00:14","Actor":"dotnet-bot","Number":"35595","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35595","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35595)"},{"Id":"441992866","IsPullRequest":true,"CreatedAt":"2019-05-09T02:00:08","Actor":"dotnet-bot","Number":"35596","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35596","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#35596)"},{"Id":"442005736","IsPullRequest":false,"CreatedAt":"2019-05-09T01:09:20","Actor":"Cosifne","Number":"35598","RawContent":null,"Title":"Semicolon is placed at a wrong place","State":"open","Body":"**Version Used**:  16.1.0 Preivew 1\r\n\r\n**Steps to Reproduce**:\r\n```using System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\n\r\nnamespace UnitTestProject7\r\n{\r\n    [TestClass]\r\n    public class UnitTest1\r\n    {\r\n        private List<int> l = new List<int>()\r\n\r\n        [TestMethod]\r\n        public void TestMethod1()\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nWhen I trying to type semicolon at the end of \"private List<int> l = new List<int>()\",\r\nthen the semicolon appears at the end of \"[TestMethod]\".\r\nThe semicolon should be placed at the end of \"private List<int> l = new List<int>()\".","Url":"https://github.com/dotnet/roslyn/issues/35598","RelatedDescription":"Open issue \"Semicolon is placed at a wrong place\" (#35598)"},{"Id":"442000317","IsPullRequest":true,"CreatedAt":"2019-05-09T00:38:08","Actor":"RikkiGibson","Number":"35597","RawContent":null,"Title":"Relax escape analysis rules for readonly methods","State":"open","Body":"Fixes #35146 but we'll need to create a new issue to track fixing escape analysis on properties where one accessor is readonly and the other is not.","Url":"https://github.com/dotnet/roslyn/pull/35597","RelatedDescription":"Open PR \"Relax escape analysis rules for readonly methods\" (#35597)"},{"Id":"441992780","IsPullRequest":true,"CreatedAt":"2019-05-09T00:00:28","Actor":"dotnet-bot","Number":"35594","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35594","RelatedDescription":"Open PR \"Merge release/dev16.1-vs-deps to master-vs-deps\" (#35594)"},{"Id":"441974910","IsPullRequest":true,"CreatedAt":"2019-05-08T23:08:43","Actor":"sharwell","Number":"35593","RawContent":null,"Title":"Implement external access API for CodeLens","State":"open","Body":"Builds on #35499","Url":"https://github.com/dotnet/roslyn/pull/35593","RelatedDescription":"Open PR \"Implement external access API for CodeLens\" (#35593)"},{"Id":"441963887","IsPullRequest":false,"CreatedAt":"2019-05-08T22:45:39","Actor":"mengluwang121","Number":"35592","RawContent":null,"Title":"#nullable enable should detect nested initialization of fields","State":"open","Body":"**Version Used**: \r\nC# 8.0, .Net Core SDK 2.1.700\r\n\r\n**Steps to Reproduce**:\r\nWith #nullable enable, \"Non-nullable field is uninitialized\" warning will show up if some field is not initialized in constructor. But sometimes we want to initialize some thing in a function so that it can be well structured, or we need to call an abstract function on children class. So this is bug is filed as a suggestion to consider detect nested initialization for #nullable enable. Thank you so much!\r\nCode example: \r\n public PipeProgressEventArgs(Stream stream)​\r\n            : base(stream)​\r\n        {​\r\n            Initialize();​\r\n        }​\r\n​\r\n        private void Initialize()​\r\n        {​\r\n            Progress = new ProgressEventArgs(\"Package\", 12, ProgressType.Install);​\r\n        }​\r\n\r\n**Expected Behavior**:\r\nNo warning.\r\n**Actual Behavior**:\r\n \"Non-nullable field is uninitialized\" shows up around the constructor.","Url":"https://github.com/dotnet/roslyn/issues/35592","RelatedDescription":"Open issue \"#nullable enable should detect nested initialization of fields\" (#35592)"},{"Id":"441904943","IsPullRequest":true,"CreatedAt":"2019-05-08T19:57:22","Actor":"TIHan","Number":"35591","RawContent":null,"Title":"[WIP] F# Shim - Round 2","State":"open","Body":"This will actually remove F# IVTs from a lot of projects, except for `Microsoft.VisualStudio.LanguageServices`.\r\n\r\nI've added a new project, `Microsoft.CodeAnalysis.ExternalAccess.FSharp.UnitTests`, in a `FSharpTest` folder next to `FSharp` in the `ExternalAccess` folder. Currently, it is just testing enums that were shimmed over. I will add a test for the Glyph enum which is related to this issue: https://github.com/dotnet/roslyn/issues/34971\r\n\r\nCurrently work in progress, but making a PR in case anyone wants to start looking at it.","Url":"https://github.com/dotnet/roslyn/pull/35591","RelatedDescription":"Open PR \"[WIP] F# Shim - Round 2\" (#35591)"},{"Id":"441857252","IsPullRequest":true,"CreatedAt":"2019-05-08T19:30:17","Actor":"dotnet-bot","Number":"35586","RawContent":null,"Title":"Merge release/dev16.1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35586","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to master\" (#35586)"},{"Id":"441857338","IsPullRequest":true,"CreatedAt":"2019-05-08T19:30:12","Actor":"dotnet-bot","Number":"35587","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35587","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to master-vs-deps\" (#35587)"},{"Id":"441857484","IsPullRequest":true,"CreatedAt":"2019-05-08T19:30:06","Actor":"dotnet-bot","Number":"35588","RawContent":null,"Title":"Merge release/dev16.1 to release/dev16.1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-release/dev16.1-vs-deps\ngit reset --hard upstream/release/dev16.1-vs-deps\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35588","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to release/dev16.1-vs-deps\" (#35588)"},{"Id":"441881724","IsPullRequest":true,"CreatedAt":"2019-05-08T18:57:29","Actor":"jasonmalinowski","Number":"35590","RawContent":null,"Title":"Fix metadata to project reference conversion bugs","State":"open","Body":"Fix three different bugs around our handling of metadata reference to project reference conversion. Each fix is small but is divided up into separate commits for convenience.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nThis pull request has several bug fixes, all of which are necessary to unblock dogfooding for an internal customer trying to move to VS2019. In all cases, the effect to the user is they get error squiggles saying that types in their solution are missing, even though they have the projects loaded that contain those types. The user scenarios to get into this state would include (but aren't limited to):\r\n\r\n1. A customer opens a .NET Core project that they have previously opened, and pulled newer source code to their machine while Visual Studio was closed. If the changes changed which project and solution configurations exist, the project may not reload correctly and cause the error squiggles.\r\n2. A customer has a .NET Core project that sets TargetFrameworks, but not directly in the project file.\r\n3. A user has a project that sets `<TargetRefPath>` to the same value as `TargetPath`. Unloading this project may cause the project to not unload/refresh correctly, causing other references to break, causing squiggles.\r\n4. They have a \"classic\" .NET Project, and have generation of reference assemblies turned on. If you have a .NET Core project referencing this project, you will get missing types and stale IntelliSense.\r\n\r\n### Bugs this fixes\r\n\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/857595\r\n- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/835377 may be fixed as well. We don't have a root cause for that issue, but suspect it's happening because an exception is being thrown in a specific code path; this PR fixes a bug which would throw an exception in that area.\r\n\r\n### Workarounds, if any\r\n\r\nThe user could attempt to fix their projects but it's fairly tricky to do so. There's no way they could discover what the fixes are short of a debugging Roslyn.\r\n\r\n### Risk\r\n\r\nLow: each fix is straightforward.\r\n\r\n### Performance impact\r\n\r\nLow. Just some small logic changes.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes; these are bugs that were introduced during performance work in 16.0.\r\n\r\n### Root cause analysis\r\n\r\nThere are three commits for three bugs being fixed here (each one is one of those cases above); the first two are subtle logic issues that require certain projects to hit, and we didn't have enough unit tests to test the underlying system directly. The third issue is also a non-standard (but very much supported) configuration and we just missed it in testing, and also didn't have enough tests.\r\n\r\nUnit tests have been added for all the bugs.\r\n\r\n### How was the bug found?\r\n\r\nInternal customer report while trying to move from VS2017 to VS2019. The internal customer has been given privates and confirmed that the fixes fix their issue.\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/35590","RelatedDescription":"Open PR \"Fix metadata to project reference conversion bugs\" (#35590)"},{"Id":"441829798","IsPullRequest":true,"CreatedAt":"2019-05-08T18:30:20","Actor":"dotnet-bot","Number":"35585","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35585","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#35585)"},{"Id":"441863075","IsPullRequest":false,"CreatedAt":"2019-05-08T18:13:05","Actor":"kendrahavens","Number":"35589","RawContent":null,"Title":"Unneeded value assignment according to default constructor: Editorconfig rule and codefix","State":"open","Body":"[Original feedback from developer community](https://developercommunity.visualstudio.com/idea/536246/对editorconfig-的-net-编码约定设置增加默认值规则.html?childToView=559774#comment-559774)\r\n\r\n**Summary:**\r\nToday we have a fix to 'Remove redundant assignment'. This request is for a similar code analysis offering that would indicate (and offer a codefix to remove) an unneeded value assignment if the value assigned is the same as what is assigned by the default constructor. This rule should be included in our editorconfig rules.\r\n\r\n```csharp\r\npublic class Class3\r\n{\r\n    public int A { get; set; } = 0;\r\n}\r\npublic class Class2\r\n{\r\n    void M()\r\n    {\r\n        var test = new Class3 { A = 0 };\r\n    }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35589","RelatedDescription":"Open issue \"Unneeded value assignment according to default constructor: Editorconfig rule and codefix\" (#35589)"},{"Id":"441816906","IsPullRequest":false,"CreatedAt":"2019-05-08T16:15:21","Actor":"ojhall","Number":"35584","RawContent":null,"Title":"'Is' operator casts Int32 to null within constructor of generic type","State":"open","Body":"**Version Used**: Unsure - let me know how to determine, or if you need further information. Using VS2019 Enterprise, targeting .NET Framework 4.6.1, LangVersion 7.3, Microsoft.Net.Compilers 3.0.0.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\n[Test]\r\npublic void UnexpectedlyCastToNull_ViaIsOperator_WhenGeneric()\r\n{\r\n    var nonGenericfoo = new NonGenericFoo(0);  // no problem\r\n\r\n    var genericFoo = new GenericFoo<int>(0); // Kaboom exception thrown\r\n}\r\n\r\nprivate class NonGenericFoo\r\n{\r\n    public NonGenericFoo(int value)\r\n    {\r\n        if (value is object obj && obj == null)\r\n        {\r\n            throw new Exception(\"Kaboom!\");\r\n        }\r\n    }\r\n}\r\n\r\nprivate class GenericFoo<T>\r\n{\r\n    public GenericFoo(T value)\r\n    {\r\n        if (value is object obj && obj == null)\r\n        {\r\n            throw new Exception(\"Kaboom!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI believe that if the expression `value is object obj` evaluates to `true`, then `obj` should be a non-null object. As such, the subsequent `obj == null` expression in the `GenericFoo` constructor should evaluate to false, and not throw the exception.\r\n\r\n**Actual Behavior**:\r\n\r\nThe `is` operator in the `GenericFoo` constructor casts `value` to a null object, which then throws the \"Kaboom!\" exception.\r\n\r\nAlso relevant: if the value `1` is passed into the constructor instead of `0`, the test passes without any exception being thrown.","Url":"https://github.com/dotnet/roslyn/issues/35584","RelatedDescription":"Open issue \"'Is' operator casts Int32 to null within constructor of generic type\" (#35584)"},{"Id":"441796077","IsPullRequest":false,"CreatedAt":"2019-05-08T15:30:05","Actor":"AArnott","Number":"35583","RawContent":null,"Title":"CSharpSimplifyTypeNamesDiagnosticAnalyzer throws InvalidCastException","State":"open","Body":"#### Package Version\r\n\r\nLatest VS Int.Preview\r\n\r\n#### Diagnostic ID\r\n\r\nCSharpSimplifyTypeNamesDiagnosticAnalyzer\r\n\r\n#### Repro steps\r\n\r\nOn a line where not all the symbols are resolved (in this case due to a failed design-time build and assemblies are missing), we see analyzer exceptions, including this one:\r\n\r\n#### Actual behavior\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSource\tSuppression State\tTool\tDetail Description\r\nError\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.\t\t\t1\tIntelliSense\tActive\tMicrosoft.CodeAnalysis.CSharp.Features\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: Microsoft.VisualStudio.CMake.Package\r\nSyntaxTree: D:\\VS\\src\\vc\\projbld\\CMake\\Package\\Telemetry\\Telemetry.cs\r\nSyntaxNode: Microsoft.VisualStudio.Workspace ... [MemberAccessExpressionSyntax]@[35955..36052) (794,35)-(794,132)\r\n\r\nSystem.InvalidOperationException: Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)\r\n   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion, Conversion newConversion)\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel, CommonForEachStatementSyntax originalForEach, SemanticModel newModel, CommonForEachStatementSyntax newForEach)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement, TForEachStatementSyntax newForEachStatement)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, TypeSyntax& replacementNode, TextSpan& issueSpan, OptionSet optionSet, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax& replacementNode, TextSpan& issueSpan, OptionSet optionSet, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan& issueSpan, String& diagnosticId, Boolean& inDeclaration, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan& issueSpan, String& diagnosticId, Boolean& inDeclaration, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic& diagnostic, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.<>c__DisplayClass2_0.<AnalyzeNode>g__descendIntoChildren|1(SyntaxNode n)\r\n   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.PushChildren(SyntaxNode node, Func`2 descendIntoChildren)\r\n   at Microsoft.CodeAnalysis.SyntaxNode.<DescendantNodesOnly>d__167.MoveNext()\r\n   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__50`1.<ExecuteSyntaxNodeAction>b__50_0(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n-----\r\n'.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35583","RelatedDescription":"Open issue \"CSharpSimplifyTypeNamesDiagnosticAnalyzer throws InvalidCastException\" (#35583)"},{"Id":"441742156","IsPullRequest":false,"CreatedAt":"2019-05-08T13:42:48","Actor":"miloush","Number":"35582","RawContent":null,"Title":"Unknown software exception when filtering nameof candidate list","State":"open","Body":"**Version Used**: VisualStudio.16.Preview/16.1.0-pre.2.0+28822.285\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nnamespace Test16Bugs\r\n{\r\n    public class Program\r\n    {\r\n        private int _pointsPCA;\r\n        public int PointsPcaEllipses { get; }\r\n\r\n        static void Main()\r\n        {\r\n            M(nameof(|\r\n        }\r\n        static void M(params string[] s) { }\r\n    }\r\n}\r\n```\r\n(note that automatic brace completion is off)\r\n1. Type `PCA` in capital letters. Note that the property is not listed in the candidate list:\r\n![image](https://user-images.githubusercontent.com/10546952/57379542-66390200-71a7-11e9-89e4-5969ad1a2e0d.png)\r\n2. Press `Alt+P` to filter the candidate list for properties.\r\n\r\n**Expected Behavior**:\r\n1. I would argue the property should be in the list as a case insensitive match.\r\n2. Either way, if the list filter is not available, either pass they key to the VS (current behaviour when not crashing) or discard it (less annoying).\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/10546952/57379332-03e00180-71a7-11e9-942f-6aa867002c14.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35582","RelatedDescription":"Open issue \"Unknown software exception when filtering nameof candidate list\" (#35582)"},{"Id":"441699271","IsPullRequest":true,"CreatedAt":"2019-05-08T13:30:16","Actor":"dotnet-bot","Number":"35580","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35580","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35580)"},{"Id":"441699345","IsPullRequest":true,"CreatedAt":"2019-05-08T13:30:11","Actor":"dotnet-bot","Number":"35581","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35581","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#35581)"},{"Id":"441671897","IsPullRequest":false,"CreatedAt":"2019-05-08T10:49:26","Actor":"miloush","Number":"35579","RawContent":null,"Title":"Refactoring suggestion: encapsulate parameters in a class","State":"open","Body":"Probably not very often, but I could use a refactoring that would take parameters of a method and turn it into a class, similar to e.g. `XmlReaderSettings`:\r\n\r\n```C#\r\npublic class C\r\n{\r\n    private string _name;\r\n    private bool _flag;\r\n    ...\r\n    public static C Create(string name, bool flag)\r\n    {\r\n        _name = name;\r\n        _flag = flag;\r\n        ...\r\n    }\r\n}\r\n...\r\npublic void Callsite()\r\n{\r\n    C c = C.Create(\"Name\", flag: true);\r\n}\r\n```\r\nwould get refactored into\r\n```C#\r\npublic class CSettings // possibly in a new file\r\n{\r\n    public string Name { get; set; }\r\n    public bool Flag { get; set; }\r\n\r\n    // could even contain the same signature constructor:\r\n    public CSettings() { }\r\n    public CSettings(string name, bool flag)\r\n    {\r\n         Name = name;\r\n         Flag = flag;\r\n    }\r\n}\r\npublic class C\r\n{\r\n    private string _name;\r\n    private bool _flag;\r\n    ...\r\n    public static C Create(CSettings settings)\r\n    {\r\n        if (settings == null)\r\n            throw new ArgumentNullException(nameof(settings));\r\n\r\n        _name = settings.name;\r\n        _flag = settings.flag;\r\n        ...\r\n    }\r\n}\r\n...\r\npublic void Callsite()\r\n{\r\n    C c = C.Create(new CSettings(\"Name\", flag: true)); // in case the constructor is generated\r\n    // or\r\n    C c = C.Create(new CSettings { Name = \"Name\", Flag = true }); // no constructor generated\r\n}\r\n```\r\n\r\nThat's a lot of work that refactoring could do easily. The only issue is that - as is the case with `XmlReader` too - typically one of the parameter is the core one and rest is the configuration. \r\n\r\nOne option would be to make this part of the Change Signature (which it is): allow multiple selection in the parameter list and include a button to turn the selected parameters into a separate class.\r\n\r\nThe refactoring could end with the `CSettings` in rename mode.","Url":"https://github.com/dotnet/roslyn/issues/35579","RelatedDescription":"Open issue \"Refactoring suggestion: encapsulate parameters in a class\" (#35579)"},{"Id":"441582221","IsPullRequest":false,"CreatedAt":"2019-05-08T07:02:37","Actor":"chm-tm","Number":"35578","RawContent":null,"Title":"CS1070 stating incorrect field name with local function","State":"open","Body":"**Version Used**: \r\n- 2.9.0\r\n- 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\n- [d79e5f](https://github.com/dotnet/roslyn/commit/d79e5f2ce4d2d74d2c34afdfe40953d9c7caf69a)\r\n\r\n**Steps to Reproduce**:\r\nLet the following code be analyzed/compiled\r\n```C#\r\nusing System.Threading;\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tstatic void Foo()\r\n\t{\r\n\t\tCancellationTokenRegistration ctr;\r\n\t\tvoid h() => ctr.Dispose();\r\n\t\th();\r\n\t}\r\n}\r\n```\r\n**Expected Behavior**:\r\nerror CS0170: Use of possibly unassigned field 'ctr'\r\nin the body of the local function\r\n\r\n**Actual Behavior**:\r\nerror CS0170: Use of possibly unassigned field 'm_index'\r\nwhere h is called","Url":"https://github.com/dotnet/roslyn/issues/35578","RelatedDescription":"Open issue \"CS1070 stating incorrect field name with local function\" (#35578)"},{"Id":"441514113","IsPullRequest":false,"CreatedAt":"2019-05-08T01:47:47","Actor":"abock","Number":"35577","RawContent":null,"Title":"Move to namespace not supported on Visual Studio for Mac","State":"open","Body":"#34223 was recently merged, which leaves Visual Studio for Mac incomplete since we do not have a UI for the code fix.\r\n\r\n![image](https://user-images.githubusercontent.com/49539/57343429-6090dd00-7111-11e9-842b-d94c6b095033.png)\r\n\r\nWe end up with the code fix in the lightbulb menu, but we have no UI. Roslyn needs a mechanism to prevent populating the menu if there is no UI available to complete the fix.\r\n\r\nGoing forward we are aiming to move EditorFeatures.Cocoa to Roslyn itself for the new VS-Platform based editor, but in the mean time the ability to not populate the menu when we don't have the required UI is needed.","Url":"https://github.com/dotnet/roslyn/issues/35577","RelatedDescription":"Open issue \"Move to namespace not supported on Visual Studio for Mac\" (#35577)"},{"Id":"441500410","IsPullRequest":true,"CreatedAt":"2019-05-08T00:34:24","Actor":"chsienki","Number":"35576","RawContent":null,"Title":"Infer nested nullability for implicitly typed deconstruction variable:","State":"open","Body":"- Record the visited type of the right hand side in tuple deconstruction\r\n- When the left hand side is 'var', re-infer the type from the visited right hand side\r\n- Update test\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33019","Url":"https://github.com/dotnet/roslyn/pull/35576","RelatedDescription":"Open PR \"Infer nested nullability for implicitly typed deconstruction variable:\" (#35576)"},{"Id":"441499938","IsPullRequest":true,"CreatedAt":"2019-05-08T00:31:41","Actor":"CyrusNajmabadi","Number":"35575","RawContent":null,"Title":"Address many suggestions in the 'Features' projects.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35575","RelatedDescription":"Open PR \"Address many suggestions in the 'Features' projects.\" (#35575)"},{"Id":"441482695","IsPullRequest":true,"CreatedAt":"2019-05-08T00:30:11","Actor":"dotnet-bot","Number":"35573","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35573","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35573)"},{"Id":"441482721","IsPullRequest":true,"CreatedAt":"2019-05-08T00:30:06","Actor":"dotnet-bot","Number":"35574","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35574","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#35574)"},{"Id":"441479113","IsPullRequest":true,"CreatedAt":"2019-05-07T22:54:09","Actor":"cston","Number":"35572","RawContent":null,"Title":"Ignore 'this' parameter when checking nullability of extension method delegate","State":"open","Body":"Fixes #30287\r\nFixes #30563","Url":"https://github.com/dotnet/roslyn/pull/35572","RelatedDescription":"Open PR \"Ignore 'this' parameter when checking nullability of extension method delegate\" (#35572)"},{"Id":"441469958","IsPullRequest":true,"CreatedAt":"2019-05-07T22:18:51","Actor":"heejaechang","Number":"35571","RawContent":null,"Title":"moved error and todo list initialization to VS workspace.","State":"open","Body":"we used to initialize those when packages are loaded. but with CPS, those packages are no longer automatically loaded with a solution open (perf win)\r\n\r\nso now, it is moved to VSWorkspace ctor and it gets initialized when the workspace is created.\r\n\r\nconsidered making it on demand but due to reversed dependency (error reporting happening in lower layer), required some plumbing so looked into how expensive the initialization is. and it turns out due to previous work done in these areas, initialization was quite cheap. any expensive one was already lazy or consumed by CPSProjectFactory already.\r\n\r\nso, just moved initialization into VSWorkspace ctor and fixed MEF dependencies.\r\n\r\nthis partially handle this - https://github.com/dotnet/roslyn/issues/35514\r\n\r\nbut not FSA not running until file opened issue. that require a bit more work to move solution crawler inside of VSWorkspace ctor.","Url":"https://github.com/dotnet/roslyn/pull/35571","RelatedDescription":"Open PR \"moved error and todo list initialization to VS workspace.\" (#35571)"},{"Id":"441467306","IsPullRequest":true,"CreatedAt":"2019-05-07T22:09:35","Actor":"chborl","Number":"35570","RawContent":null,"Title":"Improve determination of starting node for Complete Statement","State":"open","Body":"Fixes #35260 and improves handling of Do statements.","Url":"https://github.com/dotnet/roslyn/pull/35570","RelatedDescription":"Open PR \"Improve determination of starting node for Complete Statement\" (#35570)"},{"Id":"441449150","IsPullRequest":false,"CreatedAt":"2019-05-07T21:13:51","Actor":"gghart","Number":"35569","RawContent":null,"Title":"nullability not applied properly for properties used in a constructor","State":"open","Body":"**Version Used**:\r\nVS 2019 16.0.3, C#8.0 in .Net Core 2.1\r\n\r\n**Steps to Reproduce**:\r\n#nullable enable\r\n\r\nnamespace TestApp\r\n{\r\n    class Class1\r\n    {\r\n        public string A { get; set; }\r\n\r\n        public Class1 (string a)\r\n        {\r\n            A = A.Trim();\r\n        }\r\n    }\r\n}\r\n\r\n**Expected Behavior**:\r\nNullability warning on A.Trim() for de-referencing a null value as A is definitely null at that point in the code.\r\n\r\n**Actual Behavior**:\r\nNo nullability warnings, but it does generate an unused parameter 'a' since the code should have been \"A = a.Trim();\"","Url":"https://github.com/dotnet/roslyn/issues/35569","RelatedDescription":"Open issue \"nullability not applied properly for properties used in a constructor\" (#35569)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"441964184","IsPullRequest":true,"CreatedAt":"2019-05-08T22:46:51","Actor":"nattress","Number":"7411","RawContent":null,"Title":"Add SuperIlc compile-nuget command","State":"open","Body":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit.","Url":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Open PR \"Add SuperIlc compile-nuget command\" (#7411)"},{"Id":"441935856","IsPullRequest":true,"CreatedAt":"2019-05-08T21:17:05","Actor":"trylek","Number":"7410","RawContent":null,"Title":"SuperIlc support for the issues.targets file","State":"open","Body":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Open PR \"SuperIlc support for the issues.targets file\" (#7410)"},{"Id":"441809686","IsPullRequest":false,"CreatedAt":"2019-05-08T20:23:21","Actor":"danwalmsley","Number":"7408","RawContent":null,"Title":"UWP .net Native Internal Compiler Error.","State":"closed","Body":"Sorry if this is the wrong place for .net native and UWP compile errors.\r\n\r\nI have a UWP app, and we have been using debug mode during develop. We are trying to build in release mode with .net native toolchain (this is quite important for us to get the high performance.)\r\n\r\nHowever we get an internal compiler error:\r\n```\r\n8>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VisualStudio\\v16.0\\AppxPackage\\Microsoft.AppXPackage.Targets(3164,5): warning : APPX4001: Build property AppxBundlePlatforms is not explicitly set and is calculated based on currently building architecture. Use 'Create App Package' wizard or edit project file to set it.\r\n8>  Processing application code\r\n8>  Computing application closure and generating interop code\r\n8>    Loading 121 modules...\r\n8>    Generating code...\r\n8>    Interop code generated.\r\n8>  Generating serialization code\r\n8>  Compiling interop code\r\n8>  Generating System.Reflection.DispatchProxy proxy code.\r\n8>  Cleaning up unreferenced code\r\n8>  Generating native code\r\n8>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.3\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.3\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\dev\\repos\\ILMD\\ILMD.App\\ILMD.App\\ILMD.App.UWP\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ILMD.App.UWP.rsp\"' returned exit code 1\r\n========== Build: 7 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n\r\nI ran using msbuild and versbose and nutc_driver.exe gives internal compiler error but no more useful information.\r\n\r\n   I would be willing to send my source code for testing privately.\r\n\r\nThanks in advance\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7408","RelatedDescription":"Closed issue \"UWP .net Native Internal Compiler Error.\" (#7408)"},{"Id":"439293633","IsPullRequest":true,"CreatedAt":"2019-05-08T19:07:44","Actor":"trylek","Number":"7384","RawContent":null,"Title":"Miscellaneous SuperIlc improvements","State":"closed","Body":"1) Add support for release build (--release), for building\r\nand using the native framework (--framework) and just\r\nusing pre-built framework (--use-framework).\r\n\r\n2) Moved bucketing logic from CompileSubtreeCommand to a\r\nnew source file Buckets.cs and modify BuildFolderSet to\r\nautomatically create the bucketing.\r\n\r\n3) Simplified log emission logic, added new table with\r\nper folder error counts and added summary bucketing to the\r\noverall build log.\r\n\r\n4) I have added BuildOptions to CompilerRunner; this\r\nsimplified some methods that previously received various\r\nparts of the BuildOptions via separate parameters.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7384","RelatedDescription":"Closed or merged PR \"Miscellaneous SuperIlc improvements\" (#7384)"},{"Id":"441867767","IsPullRequest":true,"CreatedAt":"2019-05-08T18:24:16","Actor":"MichalStrehovsky","Number":"7409","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7409)"},{"Id":"441270623","IsPullRequest":true,"CreatedAt":"2019-05-08T09:12:19","Actor":"MichalStrehovsky","Number":"7405","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7405","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7405)"},{"Id":"441376921","IsPullRequest":true,"CreatedAt":"2019-05-08T01:12:00","Actor":"jkotas","Number":"7406","RawContent":null,"Title":"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7406","RelatedDescription":"Closed or merged PR \"Port https://github.com/dotnet/coreclr/pull/24387 to CoreRT\" (#7406)"},{"Id":"441426037","IsPullRequest":false,"CreatedAt":"2019-05-07T20:14:25","Actor":"Fabi","Number":"7407","RawContent":null,"Title":"Tls callbacks","State":"open","Body":"Hey!\r\n\r\nI know that I can create native exports etc, but my question is if it's possible to use own tls callbacks in the current state?","Url":"https://github.com/dotnet/corert/issues/7407","RelatedDescription":"Open issue \"Tls callbacks\" (#7407)"},{"Id":"440221804","IsPullRequest":true,"CreatedAt":"2019-05-07T16:47:31","Actor":"nattress","Number":"7393","RawContent":null,"Title":"Fix inlined field access outside version bubble","State":"closed","Body":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle.","Url":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Closed or merged PR \"Fix inlined field access outside version bubble\" (#7393)"},{"Id":"441010437","IsPullRequest":true,"CreatedAt":"2019-05-07T04:17:53","Actor":"Dotnet-GitSync-Bot","Number":"7404","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7404)"},{"Id":"439802257","IsPullRequest":true,"CreatedAt":"2019-05-07T03:38:35","Actor":"Suchiman","Number":"7389","RawContent":null,"Title":"Port GC changes from coreclr - 7","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible.","Url":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 7\" (#7389)"},{"Id":"440872069","IsPullRequest":true,"CreatedAt":"2019-05-06T20:26:10","Actor":"trylek","Number":"7403","RawContent":null,"Title":"Initial CPAOT support for large version bubble","State":"open","Body":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Open PR \"Initial CPAOT support for large version bubble\" (#7403)"},{"Id":"440801223","IsPullRequest":true,"CreatedAt":"2019-05-06T17:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7402","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7402)"},{"Id":"440711963","IsPullRequest":true,"CreatedAt":"2019-05-06T15:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7400","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq","Url":"https://github.com/dotnet/corert/pull/7400","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7400)"},{"Id":"439939415","IsPullRequest":true,"CreatedAt":"2019-05-06T15:16:28","Actor":"ifew","Number":"7391","RawContent":null,"Title":"Add link to sample project working with database","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7391","RelatedDescription":"Closed or merged PR \"Add link to sample project working with database\" (#7391)"},{"Id":"440731576","IsPullRequest":false,"CreatedAt":"2019-05-06T15:15:36","Actor":"vadash","Number":"7401","RawContent":null,"Title":"Q: .managed section in PE file. Can someone extract source code from it ?","State":"closed","Body":"and what does it contain ? \r\n![die_SlSWWwH5nM](https://user-images.githubusercontent.com/1397582/57232467-52659280-7025-11e9-948e-ed7f4d55c1fe.png)\r\nThanks for amazing CoreRT\r\n","Url":"https://github.com/dotnet/corert/issues/7401","RelatedDescription":"Closed issue \"Q: .managed section in PE file. Can someone extract source code from it ?\" (#7401)"},{"Id":"440697846","IsPullRequest":true,"CreatedAt":"2019-05-06T13:24:01","Actor":"MichalStrehovsky","Number":"7399","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7399","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7399)"},{"Id":"440666948","IsPullRequest":true,"CreatedAt":"2019-05-06T12:05:21","Actor":"MichalStrehovsky","Number":"7398","RawContent":null,"Title":"Fix nullable analysis errors in ProjectN","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7398","RelatedDescription":"Closed or merged PR \"Fix nullable analysis errors in ProjectN\" (#7398)"},{"Id":"440649625","IsPullRequest":true,"CreatedAt":"2019-05-06T11:16:11","Actor":"dotnet-bot","Number":"7397","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7397","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7397)"},{"Id":"440644215","IsPullRequest":true,"CreatedAt":"2019-05-06T10:58:31","Actor":"MichalStrehovsky","Number":"7396","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7396","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7396)"},{"Id":"440483855","IsPullRequest":true,"CreatedAt":"2019-05-05T22:22:44","Actor":"Dotnet-GitSync-Bot","Number":"7395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7395)"},{"Id":"440209822","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:33","Actor":"MichalStrehovsky","Number":"7392","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7392)"},{"Id":"440231323","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:21","Actor":"Dotnet-GitSync-Bot","Number":"7394","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara","Url":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7394)"},{"Id":"439697709","IsPullRequest":true,"CreatedAt":"2019-05-03T15:26:37","Actor":"Dotnet-GitSync-Bot","Number":"7388","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern @stephentoub @jbhensley @danmosemsft @luhenry","Url":"https://github.com/dotnet/corert/pull/7388","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7388)"},{"Id":"439579442","IsPullRequest":false,"CreatedAt":"2019-05-03T07:43:18","Actor":"ifew","Number":"7386","RawContent":null,"Title":"Dynamic code generation is not supported on this platform.","State":"closed","Body":"Hi\r\n\r\nI using Dapper and NPoco for connecting database, and it's work on normal compile\r\nbut when I compile to native, I got the message ```Unhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.``` of both libraries\r\n\r\nBoth, I using \r\n```<TargetFramework>netcoreapp3.0</TargetFramework>```\r\n\r\n```\r\n<PackageReference Include=\"MySqlConnector\" Version=\"0.53.0\" />\r\n<PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview4.19212.13\" />\r\n```\r\n\r\nDapper\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nLog: ServerVersion After Open: 5.5.5-10.2.15-MariaDB-log\r\nLog: State: Open\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x38\r\n   at Dapper.SqlMapper.GetTypeDeserializerImpl(Type, IDataReader, Int32, Int32, Boolean) + 0xb5\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(IDataReader, Int32, Int32, Boolean) + 0x154\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(Type, IDataReader, Int32, Int32, Boolean) + 0x16c\r\n   at Dapper.SqlMapper.GetDeserializer(Type, IDataReader, Int32, Int32, Boolean) + 0x14f\r\n   at Dapper.SqlMapper.<QueryImpl>d__138`1.MoveNext() + 0x263\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x10c\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x43\r\n   at Dapper.SqlMapper.Query[T](IDbConnection, String, Object, IDbTransaction, Boolean, Nullable`1, Nullable`1) + 0x1c6\r\n   at Member.Program.Main() + 0x11c\r\n   at bootstrap!<BaseAddress>+0xa8959b\r\n\r\n```\r\n\r\nNPoco\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x43\r\n   at System.Reflection.Emit.DynamicMethod..ctor(String, Type, Type[], Type, Boolean) + 0x30\r\n   at NPoco.MemberAccessor.GetSetDelegate() + 0x225\r\n   at NPoco.MemberAccessor..ctor(Type, String) + 0x357\r\n   at NPoco.PocoDataBuilder.<>c.<GetMemberAccessors>b__32_0(MemberInfo) + 0x77\r\n   at System.Linq.Enumerable.SelectListIterator`2.MoveNext() + 0x141\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.GetMemberAccessors(IEnumerable`1) + 0xb7\r\n   at NPoco.PocoDataBuilder.<GetPocoMembers>d__28.MoveNext() + 0x708\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.Init() + 0xf5\r\n   at NPoco.PocoDataFactory.BaseClassFalbackPocoDataBuilder(Type) + 0x55\r\n   at NPoco.PocoDataFactory.<>c__DisplayClass3_0.<ForType>b__0() + 0x29\r\n   at NPoco.Cache`2.Get(TKey, Func`1) + 0xd6\r\n   at NPoco.PocoDataFactory.ForType(Type) + 0xc0\r\n   at NPoco.AutoSelectHelper.AddSelectClause(Database, Type, String) + 0x108\r\n   at NPoco.Database.<QueryImp>d__153`1.MoveNext() + 0x108\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.Database.Fetch[T](Sql) + 0x60\r\n   at NPoco.Database.Fetch[T](String, Object[]) + 0x67\r\n   at NPoco.Database.Fetch[T]() + 0x6d\r\n   at Member.Program.Main() + 0x16a\r\n   at corert-db-dapper!<BaseAddress>+0xfe4db9\r\n   at corert-db-dapper!<BaseAddress>+0xfe4e2c\r\n```","Url":"https://github.com/dotnet/corert/issues/7386","RelatedDescription":"Closed issue \"Dynamic code generation is not supported on this platform.\" (#7386)"},{"Id":"439814909","IsPullRequest":true,"CreatedAt":"2019-05-02T22:29:34","Actor":"Suchiman","Number":"7390","RawContent":null,"Title":"Fix AspNetCore Repo Link","State":"closed","Body":"aspnet/home now redirects aspnet/AspNetCore.\r\nPrimarily to check if CI works.","Url":"https://github.com/dotnet/corert/pull/7390","RelatedDescription":"Closed or merged PR \"Fix AspNetCore Repo Link\" (#7390)"},{"Id":"439510199","IsPullRequest":true,"CreatedAt":"2019-05-02T21:26:24","Actor":"MichalStrehovsky","Number":"7385","RawContent":null,"Title":"Assert that typical field is indeed typical","State":"closed","Body":"This assert would have saved Tomas some trouble in #7376.","Url":"https://github.com/dotnet/corert/pull/7385","RelatedDescription":"Closed or merged PR \"Assert that typical field is indeed typical\" (#7385)"},{"Id":"439245544","IsPullRequest":true,"CreatedAt":"2019-05-02T20:09:31","Actor":"Suchiman","Number":"7383","RawContent":null,"Title":"Port GC changes from coreclr - 6","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7362\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/56776b20f5902ef60d43cb502d734193b2521fca):**\r\n- https://github.com/dotnet/coreclr/commit/c9914b7ab9dfcc7ad8003368715a182d7cbbe289 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/edd23a10bc574058a42c62dc829973dc48449837 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/13812bfd0f6eda442c944f416e8c871b18d99e3f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/0bb12f6ffb876eb51a85f62f7b9967eb31e0b40c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/80ca6807369ff9fa468099a936072a121215d3dc (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ae75f5d540b7373743d3698d6e2c1e7be93fd821 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/fc5385ef9ce5303bc22638ac36e9ba04ed4a9c21 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/b560ecc73d1abaec17064d5318b74b5f2bb70bd4 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/02fa8ca0932d02ce369f6a7405128ab5b729fb8d (manual port)\r\n- https://github.com/dotnet/coreclr/commit/69d43a0f8cfe095336b286e7bb892fe49c702e30 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/8b1595b74c943b33fa794e63e440e6f4c9679478 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/b06509c4f35212f097345bba7404b47da86b96c5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/363206f312a73bbf6c2093d78acad58c060ca0c7 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/35f5c097986c53050225bc590c41fa55e5776d85 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nI suppose https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 is another case for https://github.com/dotnet/corert/issues/7339 ?","Url":"https://github.com/dotnet/corert/pull/7383","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 6\" (#7383)"},{"Id":"439692824","IsPullRequest":true,"CreatedAt":"2019-05-02T17:08:55","Actor":"Dotnet-GitSync-Bot","Number":"7387","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern","Url":"https://github.com/dotnet/corert/pull/7387","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7387)"},{"Id":"439215888","IsPullRequest":true,"CreatedAt":"2019-05-01T17:06:47","Actor":"jkotas","Number":"7382","RawContent":null,"Title":"Delete unnecessary ifdef","State":"closed","Body":"This ifdef is left over from before the async implementation was unified","Url":"https://github.com/dotnet/corert/pull/7382","RelatedDescription":"Closed or merged PR \"Delete unnecessary ifdef\" (#7382)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"442001391","IsPullRequest":true,"CreatedAt":"2019-05-09T00:44:36","Actor":"fadimounir","Number":"3219","RawContent":null,"Title":"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines","State":"open","Body":"Also fixing a path issue with native PDB creation on Linux: creating file under the R2R subdir","Url":"https://github.com/dotnet/sdk/pull/3219","RelatedDescription":"Open PR \"Enable ARM/ARM64 crossgen compilation on arm/arm64 hosted machines\" (#3219)"},{"Id":"441753051","IsPullRequest":true,"CreatedAt":"2019-05-08T22:34:12","Actor":"dsplaisted","Number":"3214","RawContent":null,"Title":"Don't require NuGetPackageId metadata for classic projects","State":"closed","Body":"- Don't require NuGetPackageId metadata for classic projects\r\n- Allow SDK-style projects to opt out of requirement for NuGetPackageId metadata by setting `RequirePackageIdMetadata` to false\r\n\r\nRelated: https://github.com/dotnet/core-sdk/issues/1904\r\n\r\nIn this PR, I've opted to keep the error by default for SDK-style projects, with a property to opt-out.  This is because I think it should be rare that SDK-style projects directly reference a DLL from a NuGet package, and the error could help catch issues where we should be setting the metadata but aren't, and hence would not handle conflict resolution correctly.\r\n\r\nOn the other hand, perhaps the error has served its purpose by now, and we should instead just remove it entirely.\r\n\r\nThoughts? @nguerrera @ericstj ","Url":"https://github.com/dotnet/sdk/pull/3214","RelatedDescription":"Closed or merged PR \"Don't require NuGetPackageId metadata for classic projects\" (#3214)"},{"Id":"441891063","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:54","Actor":"genifycom","Number":"3216","RawContent":null,"Title":"Razor Component onClick with arguments","State":"closed","Body":"In the sample FetchData.razor how does one call the onclick event with an object.\r\n\r\ne.g.\r\n\r\n  <tbody>\r\n        @foreach (var forecast in forecasts)\r\n        {\r\n            <tr>\r\n                <td onclick=\"@EditForecast(forecast)\">@forecast.Date.ToShortDateString()</td>\r\n                <td>@forecast.TemperatureC</td>\r\n                <td>@forecast.TemperatureF</td>\r\n                <td>@forecast.Summary</td>\r\n            </tr>\r\n        }\r\n    </tbody>\r\n...\r\n\r\n@functions {\r\n  private void EditForecast(WeatherForecast forecast)\r\n  {\r\n    //Do something with forecast\r\n  }\r\n}","Url":"https://github.com/dotnet/sdk/issues/3216","RelatedDescription":"Closed issue \"Razor Component onClick with arguments\" (#3216)"},{"Id":"441889479","IsPullRequest":false,"CreatedAt":"2019-05-08T20:51:45","Actor":"genifycom","Number":"3215","RawContent":null,"Title":"Razor Component write to console.log","State":"closed","Body":"Is there or will there be a way to write to the Browser console log from a Razor component running on the server?\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/3215","RelatedDescription":"Closed issue \"Razor Component write to console.log\" (#3215)"},{"Id":"441924321","IsPullRequest":true,"CreatedAt":"2019-05-08T20:46:02","Actor":"nugetlurker","Number":"3218","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3218","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3218)"},{"Id":"441924290","IsPullRequest":true,"CreatedAt":"2019-05-08T20:45:58","Actor":"nugetlurker","Number":"3217","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6013 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6013 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3217","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6013 into sdk\" (#3217)"},{"Id":"441418877","IsPullRequest":false,"CreatedAt":"2019-05-08T20:15:24","Actor":"MSLukeWest","Number":"3210","RawContent":null,"Title":"Self contained Publish of .Net Core 3 app for win-x86 is missing files","State":"closed","Body":"1. Create a .NET Core 3 WPF app\r\n2. Publish to folder, change \"Deployment Mode\" to \"Self-Contained\" and \"Target Runtime\" to \"win-x86\"\r\n3. Copy the created folder to a completely clean win10 machine (no VS or anything else installed)\r\n4. Attempt to run the app\r\n\r\nResult: It immediately crashes.  Here's the exception from the event log (full stack below):\r\n\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nWhen I debug this app on a machine with VS installed (where it works) I see two loaded assemblies that aren't present on the clean machine:\r\n\r\nWindows\\SysWOW64\\msvcp140.dll\r\nWindows\\SysWOW64\\vcruntime140.dll\r\n\r\nI'm guessing the vc runtime is required, if so these assemblies should be copied to the package folder when doing self-contained publishing.\r\n\r\nFull exception stack:\r\n\r\nApplication: WpfApp23.exe\r\nCoreCLR Version: 4.6.27622.75\r\n.NET Core Version: 3.0.0-preview5-27626-15\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.TypeInitializationException: The type initializer for '<Module>' threw an exception. ---> System.TypeLoadException: Could not load type 'System.Runtime.InteropServices.Marshal' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at ___CxxCallUnwindDtor(IntPtr pDtor, Void* pThis)\r\n   at .cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.UIElement.UpdateLayout()\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.set_RootVisual(Visual value)\r\n   at System.Windows.Window.SetRootVisual()\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.CreateSourceWindowDuringShow()\r\n   at System.Windows.Window.SafeCreateWindowDuringShow()\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at WpfApp23.App.Main()\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3210","RelatedDescription":"Closed issue \"Self contained Publish of .Net Core 3 app for win-x86 is missing files\" (#3210)"},{"Id":"440503432","IsPullRequest":false,"CreatedAt":"2019-05-08T17:27:01","Actor":"imsmart-tech","Number":"3204","RawContent":null,"Title":"Internal error: new deps file generation did not produce the same result as the old logic","State":"closed","Body":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Closed issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204)"},{"Id":"441429577","IsPullRequest":false,"CreatedAt":"2019-05-08T17:24:48","Actor":"dannyvv","Number":"3211","RawContent":null,"Title":"Internal error: new deps file generation logic did not produce the same result as the old logic.","State":"closed","Body":"The error message told me to file this issue:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tInternal error: new deps file generation logic did not produce the same result as the old logic.\r\n    Please file an issue for this at https://github.com/dotnet/sdk and include the following two files: \r\n    Deps file from old logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.json\r\n    Deps file from new logic: d:\\src\\b6\\public\\src\\Services\\Agent\\bin\\Debug\\netcoreapp3.0\\Agent.deps.new.json\r\n    You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old'\tAgent\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t145\t\r\n```\r\n\r\nRequested files:\r\n[depsfiles.zip](https://github.com/dotnet/sdk/files/3154414/depsfiles.zip)\r\n\r\nNote: This started happening after adding a few assembly references by file to the BuildXL netcoreapp2.2 output folder\r\n","Url":"https://github.com/dotnet/sdk/issues/3211","RelatedDescription":"Closed issue \"Internal error: new deps file generation logic did not produce the same result as the old logic.\" (#3211)"},{"Id":"441735831","IsPullRequest":false,"CreatedAt":"2019-05-08T13:29:16","Actor":"NinoFloris","Number":"3213","RawContent":null,"Title":"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions","State":"open","Body":"Running on dotnet core 3.0.100-preview5 sdk while firing off a first request to aspnetcore 3.0.\r\n\r\n`dotnet restore` issues zero warnings when you try to restore projects with dependencies that reference older AspNetCore (sdk backed PackageReference) versions. Ran across this while updating one of our solutions where we have a dependency on `FluentValidation.AspNetCore` which depends on `Microsoft.AspNetCore.Mvc 2.2.0`\r\n\r\nThis is what's referenced in the deps.json of a succesfully built preview5 project:\r\n```\r\n      \"FluentValidation.AspNetCore/8.3.0\": {\r\n        \"dependencies\": {\r\n          \"FluentValidation\": \"8.3.0\",\r\n          \"FluentValidation.DependencyInjectionExtensions\": \"8.3.0\",\r\n          \"Microsoft.AspNetCore.Mvc\": \"2.2.0\"\r\n        },\r\n```\r\n\r\nStacktrace snippet \r\n```\r\n      Connection id \"0HLMJBP255QDV\", Request id \"0HLMJBP255QDV:00000001\": An unhandled exception was thrown by the application.\r\nSystem.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.\r\nMethod 'GetValidationVisitor' in type 'FluentValidation.AspNetCore.FluentValidationObjectModelValidator' from assembly 'FluentValidation.AspNetCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7de548da2fbae0f0' does not have an implementation.\r\n   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n   at System.Reflection.RuntimeAssembly.get_DefinedTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types()\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetControllerTypes()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetDescriptors()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.Initialize()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.GetChangeToken()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.<>c__DisplayClass11_0.<Subscribe>b__0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.Subscribe()\r\n   at Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource..ctor(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n```\r\n\r\nI don't think this is what you want to RTM with right?","Url":"https://github.com/dotnet/sdk/issues/3213","RelatedDescription":"Open issue \"Restore doesn't warn when restoring older pre 3.0 aspnet dependencies on netcore 3.0 resulting in TypeLoadExceptions\" (#3213)"},{"Id":"441556194","IsPullRequest":true,"CreatedAt":"2019-05-08T05:22:35","Actor":"wli3","Number":"3212","RawContent":null,"Title":"Fix packasktool cannot run","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3212","RelatedDescription":"Open PR \"Fix packasktool cannot run\" (#3212)"},{"Id":"440823220","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:45","Actor":"nugetlurker","Number":"3207","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3207","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3207)"},{"Id":"440823183","IsPullRequest":true,"CreatedAt":"2019-05-07T22:57:32","Actor":"nugetlurker","Number":"3206","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3206","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3206)"},{"Id":"440938051","IsPullRequest":true,"CreatedAt":"2019-05-07T21:41:47","Actor":"nguerrera","Number":"3208","RawContent":null,"Title":"Extend default AssetTargetFallback up to net48","State":"closed","Body":"Before:\r\n```\r\nAssetTargetFallback=net461\r\n```\r\n\r\nAfter:\r\n```\r\nAssetTargetFallback=net461;net462;net47;net471;net472;net48\r\n```\r\n\r\nThis ensures that existing projects do not get different assets, and that the \"oldest\" available assets beyond net461 (deemed most compatible) are used.\r\n\r\nFix #2425 ","Url":"https://github.com/dotnet/sdk/pull/3208","RelatedDescription":"Closed or merged PR \"Extend default AssetTargetFallback up to net48\" (#3208)"},{"Id":"441195943","IsPullRequest":true,"CreatedAt":"2019-05-07T12:06:21","Actor":"dotnet-maestro[bot]","Number":"3209","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19257.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3209","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3209)"},{"Id":"440666847","IsPullRequest":true,"CreatedAt":"2019-05-07T12:05:50","Actor":"dotnet-maestro[bot]","Number":"3205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3205","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3205)"},{"Id":"440436970","IsPullRequest":true,"CreatedAt":"2019-05-05T13:39:55","Actor":"dotnet-maestro[bot]","Number":"3203","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3203)"},{"Id":"440316133","IsPullRequest":true,"CreatedAt":"2019-05-04T13:50:03","Actor":"dotnet-maestro[bot]","Number":"3202","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19253.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3202)"},{"Id":"440251525","IsPullRequest":false,"CreatedAt":"2019-05-03T22:57:23","Actor":"tmat","Number":"3201","RawContent":null,"Title":"GenerateBuildDependencyFile reads incorrect AssemblyVersion","State":"open","Body":"[`GenerateBuildDependencyFile`](https://github.com/dotnet/sdk/blob/7209eb0e66bfba58714af68ddef81115552a4a0c/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L151) target has parameter: `AssemblyVersion=\"$(Version)\"`, which is suspicious because `Version` is not necessarily the same as an `$(AssemblyVersion)`. The target should read `AssemblyVersion` property and add `GetAssemblyVersion` target to its DependsOnTargets.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3201","RelatedDescription":"Open issue \"GenerateBuildDependencyFile reads incorrect AssemblyVersion\" (#3201)"},{"Id":"440210201","IsPullRequest":true,"CreatedAt":"2019-05-03T22:17:04","Actor":"johnbeisner","Number":"3200","RawContent":null,"Title":"Use https://github.com/dotnet/sdk as the repository.","State":"closed","Body":"Moving the perf test to helix created a new branch for reporting because the repo is not in GitHub. If we put the GitHub repo on the command line to 'build.py' it should connect to the existing treadline.\r\n\r\n\r\n@jorive \r\n","Url":"https://github.com/dotnet/sdk/pull/3200","RelatedDescription":"Closed or merged PR \"Use https://github.com/dotnet/sdk as the repository.\" (#3200)"},{"Id":"440015542","IsPullRequest":true,"CreatedAt":"2019-05-03T13:51:01","Actor":"dotnet-maestro[bot]","Number":"3199","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19252.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3199)"},{"Id":"439830421","IsPullRequest":true,"CreatedAt":"2019-05-03T02:51:56","Actor":"dsplaisted","Number":"3198","RawContent":null,"Title":"Use FrameworkList from targeting packs","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3198","RelatedDescription":"Closed or merged PR \"Use FrameworkList from targeting packs\" (#3198)"},{"Id":"439397373","IsPullRequest":true,"CreatedAt":"2019-05-02T23:24:30","Actor":"dsplaisted","Number":"3195","RawContent":null,"Title":"Add reference to empty Microsoft.NETCore.App package","State":"closed","Body":"The reference to the Microsoft.NETCore.App package is specified via the PackagesToReference metadata on KnownFrameworkReference.  This metadata was added in https://github.com/dotnet/core-sdk/pull/1766, and the package was produced in https://github.com/dotnet/core-setup/pull/5893.\r\n\r\nOnce https://github.com/dotnet/core-setup/issues/6222 is done, this should fix #3044.  This PR also adds a test case for that issue, which is currently skipped.\r\n\r\nThis PR removes the implicit reference to the Microsoft.NETCore.Platforms package, as that will now come in as a dependency of the Microsoft.NETCore.App package.","Url":"https://github.com/dotnet/sdk/pull/3195","RelatedDescription":"Closed or merged PR \"Add reference to empty Microsoft.NETCore.App package\" (#3195)"},{"Id":"439817185","IsPullRequest":true,"CreatedAt":"2019-05-02T22:35:45","Actor":"mmitche","Number":"3197","RawContent":null,"Title":"[release/2*] Move to Azure DevOps","State":"open","Body":"- Autogenerated off of Jenkins configuration\r\n- Applies to release/2.1* and release/2.2* branches\r\n- Removed ubuntu 14.04 configuration","Url":"https://github.com/dotnet/sdk/pull/3197","RelatedDescription":"Open PR \"[release/2*] Move to Azure DevOps\" (#3197)"},{"Id":"439786676","IsPullRequest":false,"CreatedAt":"2019-05-02T21:01:54","Actor":"NinoFloris","Number":"3196","RawContent":null,"Title":"Better way of hooking into \"Before\" Publish","State":"open","Body":"So I was looking around to see if I could redefine some defaults to always be true iff we run a Publish action.\r\n\r\nI could only seem to get there by chaining msbuild gotchas, essentially having a project like:\r\n```proj\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\"  />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <Target Name=\"OldPublish\" DependsOnTargets=\"_PublishBuildAlternative;_PublishNoBuildAlternative\">\r\n    <!-- Ensure there is minimal verbosity output pointing to the publish directory and not just the\r\n         build step's minimal output. Otherwise there is no indication at minimal verbosity of where\r\n         the published assets were copied. -->\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))\" />\r\n  </Target>\r\n  \r\n  <Target Name=\"NewDefaults\">\r\n    <PropertyGroup>\r\n       ... Override defaults here\r\n    </PropertyGroup>\r\n  </Target>\r\n  \r\n  <Target Name=\"Publish\"\r\n          DependsOnTargets=\"NewDefaults\"\r\n          Condition=\"$(IsPublishable) == 'true'\">\r\n    \r\n    // We actually need NewDefaults as a separate target to set the props\r\n    // due to a long standing CallTarget bug https://github.com/Microsoft/msbuild/issues/1006\r\n    <CallTarget Targets=\"NewPublish\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe pain here is mainly that you cannot get any custom evalution in before `/t: Publish` —  without doing crazy stuff — there's only the indifferent InitialTargets. \r\n\r\nProblem there obviously is if you really need a Target to only run before Publish, not always.\r\n\r\nIs there anything we can do better here?\r\n\r\nIt looks I'm not the first either https://github.com/dotnet/sdk/issues/1039, although there it seems BeforePublish was still a thing.","Url":"https://github.com/dotnet/sdk/issues/3196","RelatedDescription":"Open issue \"Better way of hooking into \"Before\" Publish\" (#3196)"},{"Id":"439378991","IsPullRequest":true,"CreatedAt":"2019-05-02T14:41:25","Actor":"swaroop-sridhar","Number":"3193","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"closed","Body":"This change a non-detereministic test failure in the ILLink tests.\r\n\r\nThere are two changes:\r\n\r\n(1)\r\nWhen creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\n(2)\r\nThe tests create a test-library which is published self-contained.\r\nWhile the restore is given a rid, it was not marked as self-contained.\r\nThe SDK did not restore the platform specific NetCoreAPP likely because\r\nthe defaults are differnt for libraries vs executables.","Url":"https://github.com/dotnet/sdk/pull/3193","RelatedDescription":"Closed or merged PR \"Fix ILLink teset flakiness\" (#3193)"},{"Id":"439388061","IsPullRequest":false,"CreatedAt":"2019-05-02T00:41:00","Actor":"nguerrera","Number":"3194","RawContent":null,"Title":"net472 to netstandard1.3 -> extra diagnostics dll ","State":"open","Body":"Repro steps:\r\n\r\n* Extract [ds.zip](https://github.com/dotnet/sdk/files/3136412/ds.zip) somewhere\r\n* `dotnet build` the `app` project\r\n* Look at bin\\Debug\\net472, notice extra S.D.DiagnosticSource.dll\r\n\r\n![image](https://user-images.githubusercontent.com/75470/57051775-f622fd00-6c37-11e9-8144-d382f6a2511d.png)\r\n\r\nThis is coming transitively from the netstandard.library 1.6.1 implicit ref in lib.csproj. Recall that netstandard1.x projects don't get privateassets=\"all\" applied to that.\r\n\r\nBut, regardless, why does this assembly survive conflict resolution, etc. net472 should be able to consume netstandard1.x without app-local framework assemblies.\r\n\r\nI'm not sure if this is a regression, but I'm very surprised that I haven't heard about it before, so it may well have crept in.\r\n\r\ncc @dsplaisted @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3194","RelatedDescription":"Open issue \"net472 to netstandard1.3 -> extra diagnostics dll \" (#3194)"},{"Id":"439319446","IsPullRequest":true,"CreatedAt":"2019-05-01T20:50:49","Actor":"sbomer","Number":"3192","RawContent":null,"Title":"Locate dotnet host for illink on desktop","State":"open","Body":"When running on full framework MSBuild, the environment variable `DOTNET_HOST_PATH` is not set, causing the linker to fail. This was not caught by the SDK tests because they are started by a test process that uses the dotnet cli, so this includes a change to prevent `DOTNET_HOST_PATH` from propagating to the MSBuild process.\r\n\r\nFor the desktop MSBuild case, I believe the correct thing to do is to use the dotnet host that comes with the SDK that is being used to build the app, so I'm trying to explicitly pass the location of that host (rather than searching the `PATH`, for example). @dsplaisted and @nguerrera does that sound right to you, or should I be doing something else?\r\n\r\nThe current fix has a problem: the relative path from the targets file to the dotnet host is correct for an actual product SDK, but because the tests run against a different layout, the computed location is incorrect when tests are run. @dsplaisted, @nguerrera do you have any suggestions? Perhaps the SDK already has some information about the dotnet host location that I can reuse.","Url":"https://github.com/dotnet/sdk/pull/3192","RelatedDescription":"Open PR \"Locate dotnet host for illink on desktop\" (#3192)"},{"Id":"439242933","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:10","Actor":"nugetlurker","Number":"3191","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3191","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3191)"},{"Id":"439242915","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:07","Actor":"nugetlurker","Number":"3190","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3190","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3190)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1126254867708727296","CreatedAt":"2019-05-08T22:37:39+00:00","UserScreenname":"dotnet","Text":"Introducing the new https://t.co/YEWOJxOW2B.SqlClient #DOTNET #dotnetcore #build2019\nhttps://t.co/JhNYQ1GDni https://t.co/44c9wGLwsC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":79,"FavoriteCount":33,"RawContent":null},{"Id":"1126254256850231296","CreatedAt":"2019-05-08T22:35:14+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework 6.3 Preview with .NET Core Support #dotnetcore #entityframework #DOTNET… https://t.co/9jFIJBJRB4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":21,"RawContent":null},{"Id":"1125533180725907458","CreatedAt":"2019-05-06T22:49:56+00:00","UserScreenname":"dotnet","Text":".NET Core is the Future of .NET #dotnetcore #build2019\nhttps://t.co/43Zpcfa4Px https://t.co/496vlRtRSJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":215,"FavoriteCount":106,"RawContent":null},{"Id":"1125481613435949057","CreatedAt":"2019-05-06T19:25:01+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.0 #machinelearning #dotnet https://t.co/bZa9t3UnNq #build2019 https://t.co/noiQ59ZcnO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":130,"RawContent":null},{"Id":"1125434436114194432","CreatedAt":"2019-05-06T16:17:33+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5, the next step in our journey that unifies the #dotnet platform https://t.co/OT6A0KkL0i… https://t.co/2ldeFp5lHB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":837,"FavoriteCount":561,"RawContent":null},{"Id":"1125433519579119616","CreatedAt":"2019-05-06T16:13:55+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.0 Preview 5! https://t.co/9DB6M3rxNn #build2019 https://t.co/zLbcHvIN5P","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":72,"FavoriteCount":51,"RawContent":null},{"Id":"1125433224316899328","CreatedAt":"2019-05-06T16:12:44+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 5 https://t.co/1lswthCaj1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":194,"FavoriteCount":100,"RawContent":null},{"Id":"1125433206289756160","CreatedAt":"2019-05-06T16:12:40+00:00","UserScreenname":"dotnet","Text":".NET Core 3.0 Preview 5 now available! This #dotnetcore preview release includes new features, stability and improv… https://t.co/EbXcvuDPYI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":73,"RawContent":null},{"Id":"1125433039163539456","CreatedAt":"2019-05-06T16:12:00+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5 https://t.co/OT6A0KkL0i","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":1579,"FavoriteCount":1029,"RawContent":null},{"Id":"1123987822090780673","CreatedAt":"2019-05-02T16:29:14+00:00","UserScreenname":"dotnet","Text":"These are the fine folks that make all the .NET @ch9 videos with us. They are amazingly talented and fun to work wi… https://t.co/MLuwEHLR2T","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":6,"RawContent":null},{"Id":"1123980073076436992","CreatedAt":"2019-05-02T15:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnK9Pxg","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-05-09T05:30:30.5942273Z","RunDurationInMilliseconds":9681}