{"Data":{"GitHub":{"Issues":[{"Id":"569550100","IsPullRequest":false,"CreatedAt":"2020-02-23T20:07:33","Actor":"NVentimiglia","Number":"4880","RawContent":null,"Title":"ML.NET Model Builder Feedback","State":"open","Body":"I have been trying the ML.NET Model Builder Visual Studio Marketplace extension. I like it very much as I am able to jump into ML.NET and gain an understanding of the many moving parts with minimal effort. That said I have a few question.\r\n\r\n### Goal\r\nMy goal is to allow for the evaluation of text messages. I would like to score the message using multiple categorization and binary sentiment sets.  For instance I would like to give messages a emotional categorization, topic categorization, and N categorizations as I think of them.\r\n\r\nI would also like to do this with minimal code bloat, maximum code reuse, and support for future proofing (updating) my models without my current process of delete and create new-project.\r\n\r\nI understand this will take some work on my end refactoring the template projects, but I am struggling to envision what this refactor will look like. Additional resource links appreciated. \r\n\r\n### Solution Bloat / Model Reuse\r\nEvery time I go through the process of adding a new machine learning model, it produces two new projects. A model and a console app. The schema for some of these models are identical, and would like to consolidate them. Is this possible? What is the best strategy for consolidating this? \r\n\r\ne.g. A binary text model with csv for positive/negative sentiment and another csv for masculine/feminine sentiment?\r\n\r\n### Retraining / re-running the model\r\nWhen I run the console app that is generated, it completes really fast. The initial training for one of my data sets was 90 minutes long, but, the console when run on its own is only a second. \r\n\r\nI was thinking I could use this project for adding new / updated data to my model, but I am not so sure of that because it completes so fast. What is this project even doing? If I improve my data set, should I delete these template projects and restart the process!?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4880","RelatedDescription":"Open issue \"ML.NET Model Builder Feedback\" (#4880)"},{"Id":"569516659","IsPullRequest":false,"CreatedAt":"2020-02-23T16:02:10","Actor":"NVentimiglia","Number":"4879","RawContent":null,"Title":"Text Classification : Failed see more in Output Pane","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- 3.1.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am using the ML.NET Model builder tool for visual studio to add machine learning to an existing dot net core web application. Using the tool, I attempted to train a text classification data set. When training, the progress stops saying \r\n\r\n> Status Failed. See more in Output Pane. \r\n\r\nThe text in the output pane is \r\n\r\n> |     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\r\nMy data set can be found here : https://data.world/crowdflower/sentiment-analysis-in-text\r\n\r\n- **What did you expect?**\r\n\r\nEither for the training to succeed or for a actionable error message.\r\n\r\n### Source code / logs\r\n\r\nNo source code included, I am using the visual studio editor tool.","Url":"https://github.com/dotnet/machinelearning/issues/4879","RelatedDescription":"Open issue \"Text Classification : Failed see more in Output Pane\" (#4879)"},{"Id":"568566107","IsPullRequest":false,"CreatedAt":"2020-02-22T20:44:33","Actor":"srqdev","Number":"4864","RawContent":null,"Title":"Is there a way to get individual metrics from a binaryclassifier in a multiclass scenario","State":"closed","Body":"I'm using the averaged perceptron method in a mutliclas scenario. So my training data consists of predictions for more then one type, say types ABC, DEF and GHI. Once trained I can get the overall metrics but is there a way to get the metrics for ABC, DEF and GHI separately so that I can see where training was better or worse?","Url":"https://github.com/dotnet/machinelearning/issues/4864","RelatedDescription":"Closed issue \"Is there a way to get individual metrics from a binaryclassifier in a multiclass scenario\" (#4864)"},{"Id":"569312559","IsPullRequest":true,"CreatedAt":"2020-02-22T10:04:32","Actor":"harishsk","Number":"4878","RawContent":null,"Title":"Added multiple related fixes to enable automatic addition of KeyToValue","State":"open","Body":"This PR includes a number of fixes to enable automatic addition of KeyToValue in the Nimbus codepath. Specifically:\r\n* Fixed BinaryClassfierScorer to support exporting key types\r\n* Fixed PredictedLabelScorerBase to include the right types and shapes in the onnx graph\r\n* Fixed OneVersusAllTrainer to include shape information\r\n* Fixed SaveAsOnnxCommand to include type information in the last Identity node\r\n* Fixed OptionalColumnTransform to have the correct variable names and types. (This one is a preemptive fix. It fixes a crash that happens with the code in the ORT master branch)","Url":"https://github.com/dotnet/machinelearning/pull/4878","RelatedDescription":"Open PR \"Added multiple related fixes to enable automatic addition of KeyToValue\" (#4878)"},{"Id":"568557406","IsPullRequest":true,"CreatedAt":"2020-02-22T08:45:25","Actor":"frank-dong-ms","Number":"4863","RawContent":null,"Title":"enable BinaryClassifierSymSgdTest","State":"closed","Body":"enable BinaryClassifierSymSgdTest as this test infected by CNR and fixed in this PR: https://github.com/dotnet/machinelearning/pull/4569\r\n\r\nchecked the full test set pipeline, this test never failed since #4569 is merged so enable this test again.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4863","RelatedDescription":"Closed or merged PR \"enable BinaryClassifierSymSgdTest\" (#4863)"},{"Id":"569293979","IsPullRequest":true,"CreatedAt":"2020-02-22T08:45:07","Actor":"frank-dong-ms","Number":"4877","RawContent":null,"Title":"enable 2 tests but skip running from x86","State":"closed","Body":"TestOldSavingAndLoading and TestDnnImageFeaturizer uses too much memory and not suitable to run on x86 (which has 2 GB memory limit by default).\r\n\r\nRe-enable these 2 tests if memory usage has been optimized.","Url":"https://github.com/dotnet/machinelearning/pull/4877","RelatedDescription":"Closed or merged PR \"enable 2 tests but skip running from x86\" (#4877)"},{"Id":"569240344","IsPullRequest":true,"CreatedAt":"2020-02-21T23:50:39","Actor":"mstfbl","Number":"4876","RawContent":null,"Title":"Incorporating varying tolerances through VaryingToleranceAttribute","State":"open","Body":"In this PR we are adding the ability to have varying tolerances for tests through VaryingToleranceAttribute.","Url":"https://github.com/dotnet/machinelearning/pull/4876","RelatedDescription":"Open PR \"Incorporating varying tolerances through VaryingToleranceAttribute\" (#4876)"},{"Id":"569239764","IsPullRequest":true,"CreatedAt":"2020-02-21T23:48:02","Actor":"Lynx1820","Number":"4875","RawContent":null,"Title":"WIP: Alternate solution for ColumnConcatenatingTransformer","State":"open","Body":"- Added test isolating ColumnConcatenatingTransformer ","Url":"https://github.com/dotnet/machinelearning/pull/4875","RelatedDescription":"Open PR \"WIP: Alternate solution for ColumnConcatenatingTransformer\" (#4875)"},{"Id":"569234930","IsPullRequest":false,"CreatedAt":"2020-02-21T23:28:38","Actor":"mstfbl","Number":"4874","RawContent":null,"Title":"MatrixFactorizationSimpleTrainAndPredict() on MacOS is broken","State":"open","Body":"The test MatrixFactorizationSimpleTrainAndPredict() is run on MacOS, but its calculate MSE is not checked. It is denoted as \"broken\" on MacOS.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/fbd1b93065b451401b1e3276e5ac65b9f303f90b/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L135-L141","Url":"https://github.com/dotnet/machinelearning/issues/4874","RelatedDescription":"Open issue \"MatrixFactorizationSimpleTrainAndPredict() on MacOS is broken\" (#4874)"},{"Id":"568782497","IsPullRequest":true,"CreatedAt":"2020-02-21T22:42:02","Actor":"mstfbl","Number":"4869","RawContent":null,"Title":"Re-enabling disabled tests due to wrong nrBins value","State":"closed","Body":"Fixed case with erroneous SafeTrainingAndModelBuffer.nrBins value, where if _threads = 1, nrBins should also equal 1. This way, when thread count is 1, there is no need to divide the training matrix into multiple blocks as 1 will do fine. As a result, we can re-enable the following disabled tests:\r\n\r\n- MatrixFactorizationSimpleTrainAndPredict\r\n- MulticlassTreeFeaturizedLRTest\r\n- TestOvaMacroWithUncalibratedLearner\r\n- EntryPointPipelineEnsembleGetSummary","Url":"https://github.com/dotnet/machinelearning/pull/4869","RelatedDescription":"Closed or merged PR \"Re-enabling disabled tests due to wrong nrBins value\" (#4869)"},{"Id":"569157976","IsPullRequest":true,"CreatedAt":"2020-02-21T20:55:40","Actor":"mstfbl","Number":"4873","RawContent":null,"Title":"Disabling TestOldSavingAndLoading() and TestDnnImageFeaturizer()","State":"closed","Body":"Temporarily disabling 2 ONNX tests: TestOldSavingAndLoading() and TestDnnImageFeaturizer()","Url":"https://github.com/dotnet/machinelearning/pull/4873","RelatedDescription":"Closed or merged PR \"Disabling TestOldSavingAndLoading() and TestDnnImageFeaturizer()\" (#4873)"},{"Id":"569152780","IsPullRequest":false,"CreatedAt":"2020-02-21T19:52:55","Actor":"gvashishtha","Number":"4872","RawContent":null,"Title":"Update docs to remove mentions of GPU support in ApplyOnnxModel","State":"open","Body":"When Onnxruntime released 1.0, they changed the API and broke the interface from 0.5 so that now it is not possible to ever exercise the GPU code path unless someone compiles ML.NET privately and links it to Microsoft.ML.OnnxRuntime.Gpu specifically.\r\n\r\nRelated to #4478 and #4656 ","Url":"https://github.com/dotnet/machinelearning/issues/4872","RelatedDescription":"Open issue \"Update docs to remove mentions of GPU support in ApplyOnnxModel\" (#4872)"},{"Id":"568694862","IsPullRequest":true,"CreatedAt":"2020-02-21T18:36:06","Actor":"harishsk","Number":"4867","RawContent":null,"Title":"Fixed up dimensions to create known sized vectors","State":"closed","Body":"A recent PR (#4783) added support to run inferencing on an onnx model with multiple rows at a time. This made the output schema of OnnxTransformer to have variable size vectors which in turn broke some things in Nimbus. This PR fixes the dimensions back.","Url":"https://github.com/dotnet/machinelearning/pull/4867","RelatedDescription":"Closed or merged PR \"Fixed up dimensions to create known sized vectors\" (#4867)"},{"Id":"569016336","IsPullRequest":false,"CreatedAt":"2020-02-21T15:17:42","Actor":"actopozipc","Number":"4871","RawContent":null,"Title":"How to get information about the model (number of hidden layer)?","State":"open","Body":"Hi,  \r\nI've trained and saved my model and everything is working fine. I just wonder if its possible to access information about the model like the number of nods in the different layers or the values of the weights?","Url":"https://github.com/dotnet/machinelearning/issues/4871","RelatedDescription":"Open issue \"How to get information about the model (number of hidden layer)?\" (#4871)"},{"Id":"568952270","IsPullRequest":false,"CreatedAt":"2020-02-21T13:22:36","Actor":"santosh-gokul","Number":"4870","RawContent":null,"Title":"Unable to load DLL 'CpuMathNative' ","State":"open","Body":"### System information\r\n\r\n-  Windows 10\r\n- **.NET  Framework 4.7.2\r\n\r\n### Issue\r\nUnable to load DLL 'CpuMathNative'\r\n\r\n\r\nWhat did you do?:\r\n\r\nCreated a new .net standard project, added ML.NET from nuget and added the project to my existing solution (.net Framework 4.7.2). Set to Any x64.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4870","RelatedDescription":"Open issue \"Unable to load DLL 'CpuMathNative' \" (#4870)"},{"Id":"568000518","IsPullRequest":true,"CreatedAt":"2020-02-21T04:11:30","Actor":"Lynx1820","Number":"4861","RawContent":null,"Title":"Fix for ColumnConcatenatingTransformer","State":"closed","Body":"Used the Concat operator instead of FeatureVectorizer to avoid conflicting output type errors, since FeatureVectorizer outputs strictly floats, but some trainers expect double outputs. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4861","RelatedDescription":"Closed or merged PR \"Fix for ColumnConcatenatingTransformer\" (#4861)"},{"Id":"568613409","IsPullRequest":true,"CreatedAt":"2020-02-21T04:09:34","Actor":"Lynx1820","Number":"4866","RawContent":null,"Title":"Fix for KeytoValue transformer","State":"closed","Body":"Fix a small bug where the source variable name of an ONNX graph was mistakenly always the input variable name, which is not always the case. Other ONNX transformers don't explicitly test for this functionality, so I didn't add a test case. ","Url":"https://github.com/dotnet/machinelearning/pull/4866","RelatedDescription":"Closed or merged PR \"Fix for KeytoValue transformer\" (#4866)"},{"Id":"568711510","IsPullRequest":false,"CreatedAt":"2020-02-21T03:21:42","Actor":"Benknightdark","Number":"4868","RawContent":null,"Title":"Can not load model from local disk","State":"open","Body":"### System information\r\n\r\n- OS Version ：windows 10.0.18363\r\n- .NET Version Info:   3.1.101\r\n\r\n### Issue\r\nHi, I used ml.net to build a movie Recommendation System Model, and when I finished build my model, I saved it into my local disk . And then when I load the model from local disk to predict my test data , it appeared this error  .\r\n![image](https://user-images.githubusercontent.com/5799487/75001311-f973c780-549b-11ea-9310-2c5b153ffe11.png)\r\nHere is my source code ：https://github.com/Benknightdark/mlnet\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4868","RelatedDescription":"Open issue \"Can not load model from local disk\" (#4868)"},{"Id":"567823330","IsPullRequest":true,"CreatedAt":"2020-02-20T22:36:15","Actor":"frank-dong-ms","Number":"4858","RawContent":null,"Title":"make all tests inherit from BaseTestClass","State":"closed","Body":"RT\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4858","RelatedDescription":"Closed or merged PR \"make all tests inherit from BaseTestClass\" (#4858)"},{"Id":"567881761","IsPullRequest":true,"CreatedAt":"2020-02-20T22:35:19","Actor":"frank-dong-ms","Number":"4860","RawContent":null,"Title":"fix nightly-build","State":"closed","Body":"related to https://github.com/dotnet/machinelearning/pull/4859.\r\n\r\ncentos is building with netcore3.0 not netcore2.1, add targetFramework parameter to distinct that\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4860","RelatedDescription":"Closed or merged PR \"fix nightly-build\" (#4860)"},{"Id":"568608867","IsPullRequest":false,"CreatedAt":"2020-02-20T22:17:09","Actor":"frank-dong-ms","Number":"4865","RawContent":null,"Title":"move from net core 3.0 to 3.1 on CI test","State":"open","Body":"as net core 3.0 will be out of support soon\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4865","RelatedDescription":"Open issue \"move from net core 3.0 to 3.1 on CI test\" (#4865)"},{"Id":"568042070","IsPullRequest":true,"CreatedAt":"2020-02-20T22:11:43","Actor":"frank-dong-ms","Number":"4862","RawContent":null,"Title":"fix netfx test not running issue","State":"closed","Body":"related to PR: https://github.com/dotnet/machinelearning/pull/4854\r\n\r\nsetting CopyLocalLockFileAssemblies to false for netfx cause test not running on CI like below:\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=528701&view=logs&j=32952595-30e7-56fa-9b86-c4579b87f5d1\r\n\r\nrestrict CopyLocalLockFileAssemblies to false only for netcore 3.0\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4862","RelatedDescription":"Closed or merged PR \"fix netfx test not running issue\" (#4862)"},{"Id":"567776109","IsPullRequest":true,"CreatedAt":"2020-02-19T23:08:53","Actor":"harishsk","Number":"4857","RawContent":null,"Title":"Added slot names support for OnnxTransformer","State":"closed","Body":"This PR adds support for persisting the SlotNames annotations of a column during onnx export and reading those back in OnnxTransformer and adding the annotations back to the column when the onnx model is read from disk.\r\n\r\nOnnx natively does not have support for annotations. To work around this, we store some metadata in some unused portions of the graph. As an example, let us say we have an ML.NET model with an output column NGrams that outputs a vector of NGram counts. This column will have an Annotation in ML.NET named SlotNames. When this model is exported to onnx, we create an additional LabelEncoder node and store the SlotNames in the keys_strings attribute of the LabelEncoder.\r\n\r\nThe LabelEncoder is created with an input name of `$\"mlnet.{column.Name}.unusedInput\"`, an output name of $\"mlnet.{column.Name}.unusedOutput\" and a node name of `$\"mlnet.{column.Name}.SlotNames\"`. (All the actual output columns of the ML.NET model are suffixed with a `\".output\"` string)\r\n\r\nThen when OnnxTransformer loads the graph it goes through the list of output nodes and creates output columns for each of them in its output schema. For each column it searches the graph for a node named `$\"mlnet.{column.Name}.SlotNames\"`. If it finds it, it reads the keys_strings attributes from that node and adds those strings as SlotNames annotation to that column. \r\n\r\nThis SlotNames data should then be available as annotations on the column in both ML.NET and Nimbus.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4857","RelatedDescription":"Closed or merged PR \"Added slot names support for OnnxTransformer\" (#4857)"},{"Id":"567825309","IsPullRequest":true,"CreatedAt":"2020-02-19T21:23:33","Actor":"frank-dong-ms","Number":"4859","RawContent":null,"Title":"set library path for centos and ubuntu","State":"closed","Body":"set library path for centos as well as we are observing below error from NightlyBuild pipeline for CentOS:\r\n\r\nX Microsoft.ML.Functional.Tests.Training.ContinueTrainingSymbolicStochasticGradientDescent [121ms]\r\n  Error Message:\r\n   System.DllNotFoundException : Unable to load shared library 'SymSgdNative' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libSymSgdNative: cannot open shared object file: No such file or directory\r\n  Stack Trace:\r\n     at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(Int32 totalNumInstances, Int32* instSizes, Int32** instIndices, Single** instValues, Single* labels, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Single* weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, State* state, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Functional.Tests.Training.ContinueTrainingSymbolicStochasticGradientDescent() in /__w/1/s/test/Microsoft.ML.Functional.Tests/Training.cs:line 420\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=527464&view=logs&j=c83e03a9-ccae-58c2-be03-4a20d31c7f0e&t=c2d1124c-8b3e-5953-2f5c-b9febb7524be\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4859","RelatedDescription":"Closed or merged PR \"set library path for centos and ubuntu\" (#4859)"},{"Id":"567215056","IsPullRequest":true,"CreatedAt":"2020-02-19T18:58:45","Actor":"mstfbl","Number":"4853","RawContent":null,"Title":"Fix grammatical typos","State":"closed","Body":"Fix grammatical typos. Utilized [Visual Studio Spell Checker](https://marketplace.visualstudio.com/items?itemName=EWoodruff.VisualStudioSpellCheckerVS2017andLater) to quickly find and implement typo fixes.","Url":"https://github.com/dotnet/machinelearning/pull/4853","RelatedDescription":"Closed or merged PR \"Fix grammatical typos\" (#4853)"},{"Id":"566982604","IsPullRequest":false,"CreatedAt":"2020-02-19T09:17:14","Actor":"maximeozenne","Number":"4851","RawContent":null,"Title":"Extract MaximumEntropyModelParameters from MulticlassPredictionTransformer ITransformer model","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Enterprise\r\n- **.NET Version (eg., dotnet --info)**: .NET Framework 4.7.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI want to re-train multi-class (`LbfgsMaximumEntropyMulticlassTrainer`).\r\n- **What happened?**\r\nI train and load model, but i cannot extract `MaximumEntropyModelParameters`.\r\n- **What did you expect?**\r\nI want to extract `MaximumEntropyModelParameters` my pre-trained model.\r\nI want to retrain my model by using `LbfgsMaximumEntropyMulticlassTrainer.Fit(IDataView, MaximumEntropyModelParameters)` method.\r\n\r\nSimilar to #4099 but I'm using only one model\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n```\r\n//Create a ITransformer from my IDataView\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey()\r\n    .Append(mlContext.Transforms.Text.FeaturizeText())\r\n    .AppendCacheCheckpoint(mlContext);\r\nvar trainingPipeline = pipeline.Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy())\r\n    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\nITransformer trainedModel = trainingPipeline.Fit(splitTrainSet);\r\n\r\n//Try to retrain it by extracting the parameters\r\nvar originalModelParameters = ((MulticlassPredictionTransformer<object>)model).Model as MaximumEntropyModelParameters;\r\nmodel = mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy().Fit(transformedNewData, originalModelParameters);\r\n```\r\n\r\n### Logs\r\n\r\n> System.InvalidCastException: 'Unable to cast object of type 'Microsoft.ML.Data.TransformerChain`1[Microsoft.ML.ITransformer]' to type 'Microsoft.ML.Data.MulticlassPredictionTransformer`1[System.Object]'.'\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4851","RelatedDescription":"Closed issue \"Extract MaximumEntropyModelParameters from MulticlassPredictionTransformer ITransformer model\" (#4851)"},{"Id":"567371377","IsPullRequest":false,"CreatedAt":"2020-02-19T07:32:31","Actor":"cherrex","Number":"4856","RawContent":null,"Title":"Use ONNX model in ML.Net","State":"open","Body":"Hello,\r\nI created and trained a model in a keras.\r\nThe basis is a simple and standard task for the classification of irises. The CSV file looks like this\r\n\r\nSepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm, Species\r\n5.1,3.5,1.4,0.2, iris-setosa\r\n\r\nModel in keras\r\nmodel = Sequential ()\r\nmodel.add (Dense (128, input_dim = 4, activation = 'relu'))\r\nmodel.add (Dense (Y.shape [1], activation = 'softmax'))\r\nmodel.compile (loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['categorical_accuracy'])\r\n\r\nI understand that this problem can be solved without keras using ML.NET, but the principle of using keras models in ML.NET is important to me.\r\nNext I save the model to ONNX\r\nonnx_model = keras2onnx.convert_keras (model, model.name)\r\nonnx.save_model (onnx_model, 'model_.onnx')\r\n\r\nTell me how in the future, I can use this model in ML.NET, for predictions?\r\n\r\nThanks in advance.","Url":"https://github.com/dotnet/machinelearning/issues/4856","RelatedDescription":"Open issue \"Use ONNX model in ML.Net\" (#4856)"},{"Id":"567268035","IsPullRequest":true,"CreatedAt":"2020-02-19T04:23:18","Actor":"frank-dong-ms","Number":"4854","RawContent":null,"Title":"not copy nuget package to build output to save disk space","State":"closed","Body":"dotnet core 3.0 build use too much disk space (more than 16GB) and cause build failure on CI, this is  caused by below line of code from build tools (\\Tools\\dotnetcli\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets):\r\n\r\n\r\n<!-- Don't copy local for netstandard projects. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == '' and\r\n                                            '$(TargetFrameworkIdentifier)' == '.NETStandard'\">false</CopyLocalLockFileAssemblies>\r\n\r\n    <!-- Don't copy local for netcoreapp projects before 3.0 or non-exe and non-component projects. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == '' and\r\n                                            '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and\r\n                                            ('$(_TargetFrameworkVersionWithoutV)' &lt; '3.0' or\r\n                                             ('$(HasRuntimeOutput)' != 'true' and '$(EnableDynamicLoading)' != 'true'))\">false</CopyLocalLockFileAssemblies>\r\n\r\n    <!-- All other project types should copy local. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == ''\">true</CopyLocalLockFileAssemblies>\r\n\r\n\r\nOverride CopyLocalLockFileAssemblies setting to false to save disk space.\r\n\r\nAlso, change windows netcore 3.0 build to use hosted test agent.","Url":"https://github.com/dotnet/machinelearning/pull/4854","RelatedDescription":"Closed or merged PR \"not copy nuget package to build output to save disk space\" (#4854)"},{"Id":"567291206","IsPullRequest":true,"CreatedAt":"2020-02-19T03:26:06","Actor":"mstfbl","Number":"4855","RawContent":null,"Title":"Debugging for disabled tests","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4855","RelatedDescription":"Open PR \"Debugging for disabled tests\" (#4855)"},{"Id":"567137571","IsPullRequest":false,"CreatedAt":"2020-02-18T20:25:32","Actor":"mstfbl","Number":"4852","RawContent":null,"Title":"Varying prediction error tolerances for different builds & their notations","State":"open","Body":"In our codebase there are instances where differing error tolerance values are defined for our different builds. **It is currently difficult for us to track where we have set these differing error tolerance values.**\r\n\r\nHere is one instances where the error tolerance values are different for Windows and Linux builds (a value for MacOS is defined as well, but is currently commented out):\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L123-L146\r\n\r\nAlso in `MatrixFactorizationTests.cs`, there are 3 different cases (in addition to the example above) where varying prediction errors are asserted:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L356-L357\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L469-L470\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L609-L610\r\n\r\nIt would be a good idea to track these prediction error rates, as this way we can easily find where we've defined varying tolerances for different builds.\r\n\r\nThe best to do this seems to be making a static class (for example, called `TestingTolerance`) with data structures suitable for storing varying tolerances based on (1) build OS, (2) given unit test, and (3) exact assertion in a given unit test.\r\n\r\nAnother way to do this is by adding an extra trait to each function that has varying tolerances, and then adding logs stating varying tolerances are occurring:\r\n\r\n```\r\n[TestCategory(\"VaryingTolerances\")]\r\npublic void MatrixFactorizationSimpleTrainAndPredict() {\r\n...\r\nConsole.WriteLine(\"Tolerance values for Windows, MacOS, and Linux builds are different.\");\r\n...\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4852","RelatedDescription":"Open issue \"Varying prediction error tolerances for different builds & their notations\" (#4852)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-24T05:30:40.2404969Z","RunDurationInMilliseconds":693}