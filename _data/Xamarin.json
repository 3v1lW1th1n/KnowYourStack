{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null},{"Title":"Update Your Xamarin.Mac Apps for 64-bit Today!","PublishedOn":"2018-05-14T18:33:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last June, Apple announced that upcoming macOS releases would only support 32-bit applications “with compromises”. If your Mac application is not 64-bit, we strongly recommend taking action to avoid...","Href":"https://blog.xamarin.com/update-xamarinmac-apps/","RawContent":null},{"Title":"Podcast: Build 2018 Recap for Mobile Developers","PublishedOn":"2018-05-11T18:38:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the news for mobile developers from Build 2018, including Xamarin.Forms 3.0, Hyper-V support for the Android emulator,...","Href":"https://blog.xamarin.com/podcast-build-2018-recap-mobile-developers/","RawContent":null},{"Title":"All Things Xamarin at Build 2018","PublishedOn":"2018-05-09T15:07:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Build 2018 has finally arrived which means exciting news for developers about Microsoft products and technologies, including Xamarin. For those following along at home, we’ve rounded up all...","Href":"https://blog.xamarin.com/xamarin-build-2018/","RawContent":null},{"Title":"Try the Latest Release of Xamarin.Forms 3.0!","PublishedOn":"2018-05-07T19:05:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are overjoyed to bring you our latest stable release of Xamarin.Forms, version 3.0. This is our fastest, richest release to date coupled with fantastic improvements up and down the Xamarin stack...","Href":"https://blog.xamarin.com/xamarin-forms-3-0-released/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7768685524","Type":"IssuesEvent","CreatedAt":"2018-06-03T20:42:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1759","RelatedDescription":"Closed issue \"xamarin-android uses out-of-sync API generator from java.interop\" (#1759) at xamarin/xamarin-android","RelatedBody":"There is a big problem in xamarin-android API (Mono.Android) now. https://github.com/xamarin/xamarin-android/pull/1728 should have never been merged without merging https://github.com/xamarin/java.interop/pull/325 .\r\n\r\nNext time API generation will be simply impossible."},{"Id":"7765778095","Type":"IssuesEvent","CreatedAt":"2018-06-02T08:08:29","Actor":"xufeipyxis","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1760","RelatedDescription":"Closed issue \"`Build -> Archive` command hangs, \"Please ensure that you are using a release configuration and that \"Use Shared Mono Runtime\" option unchecked.\"\" (#1760) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Set a project to release and build, and then Build -> Archive\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nCreate an archive\r\n### Actual Behavior\r\nIt never completes.\r\n\r\n![capture](https://user-images.githubusercontent.com/33150084/40775792-82015028-64fb-11e8-9d21-cfe709a4d25e.PNG)\r\n\r\nI'm using release configuration and \"Use Shared Mono Runtime\" option is unchecked\r\n```\r\n    <BundleAssemblies>true</BundleAssemblies>\r\n    <AotAssemblies>false</AotAssemblies>\r\n```\r\nThis is my release configuration. I know this options are not available in the community verison of VS2017, but I can change it manually and reloade the project. It used to compile ok in April and earlier. I'm not sure if something changed in recent VS update.\r\n\r\n### Version Information\r\n15.7.1\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Community 2017  (VS2017)\r\nVersion 15.7.1\r\nVisualStudio.15.Release/15.7.1+27703.2000\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2017   00369-60000-00001-AA302\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40501.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nDotfuscator Community Edition   5.34.0.6830-9173b9a63\r\nPreEmptive Protection - Dotfuscator CE\r\n\r\nGorillaPlayerPackage Extension   1.0\r\nGorillaPlayerPackage Visual Studio Extension Detailed Info\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2017.2.2    Build 109.0.20171006.122324\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.11027.3\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nOzCode   1.0\r\nYour road to Magical Debugging. http://www.oz-code.com\r\n\r\nOzCodePackage Extension   1.0\r\nOzCodePackage Visual Studio Extension Detailed Info\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 16ecf5a30ad868d183c58e4a71a71c23d4ed3ba9.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Unity   3.7.0.1\r\nVisual Studio Tools for Unity\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWindows Machine Learning Generator Extension   1.0\r\nWindows Machine Learning Visual Studio Extension Detailed Info\r\n\r\nWiX Toolset Visual Studio Extension   0.9.21.62588\r\nWiX Toolset Visual Studio Extension version 0.9.21.62588\r\nCopyright (c) .NET Foundation and contributors. All rights reserved.\r\n\r\nXamarin   4.10.0.442 (396b18cef)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.264 (fc37cd02e)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.0.19 (HEAD/342b2ce96)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.10.1.177 (7e782c1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7762600506","Type":"IssuesEvent","CreatedAt":"2018-06-01T14:02:17","Actor":"plynkus","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1775","RelatedDescription":"Closed issue \"MSBuildWorkspace load failures (Microsoft.CodeAnalysis.*) for Xamarin.Android projects.\" (#1775) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a simple console app.  Add nuget packages: Microsoft.CodeAnalysis, Microsoft.Build.Locator.\r\n2. Add boilerplate code to load a project in a workspace, e.g.:\r\n\r\n```\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\n\r\nusing System.Threading.Tasks;\r\n\r\nnamespace AndroidRoslynFailure\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            var workspace = MSBuildWorkspace.Create();\r\n            workspace.WorkspaceFailed += WorkspaceFailed;\r\n            var project = await workspace.OpenProjectAsync(@\"C:\\path\\to\\android.csproj\");\r\n\r\n            return;\r\n        }\r\n\r\n        private static void WorkspaceFailed(object sender, WorkspaceDiagnosticEventArgs e)\r\n        {\r\n            return;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n3. Set breakpoints at both returns above (to catch the success/failure cases).\r\n\r\n### Expected Behavior\r\n\r\nSuccess.  (Works for other project types---iOS, UWP, etc.)\r\n\r\n### Actual Behavior\r\n\r\nFailure.  The WorkspaceFailed handler is called with diagnostic information of the form:\r\n\r\n```\r\n{[Failure] Msbuild failed when processing the file 'C:\\Temp\\AndroidRoslynFailure\\App\\App.csproj' with message: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets: (52, 5): The \"Csc\" task failed unexpectedly.\r\nSystem.InvalidOperationException: MSB3087: An incompatible host object was passed into the \"Csc\" task.  The host object for this task must implement the \"ICscHostObject\" interface.\r\n   at Microsoft.CodeAnalysis.BuildTasks.Csc.AddResponseFileCommands(CommandLineBuilderExtension commandLine)\r\n   at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.GenerateResponseFileCommands()\r\n   at Microsoft.Build.Utilities.ToolTask.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()}\r\n```\r\n\r\nThis issue began fairly recently (at least in the Visual studio 15.7.2+ timeframe).  We perform custom build tasks that do some of their work through code analysis and these steps now fail for Xamarin.Android projects only.\r\n\r\nIf you believe this is not due to some difference in the Xamarin.Android toolchain itself, I can kick this over to the Roslyn issues list as well.  I'll be taking a look at the repositories to try and understand from where ICscHostObject implementers are provided per platform.\r\n\r\n### Version Information\r\n\r\nCurrently stock Visual Studio 15.7.3, tip nuget packages for those cited above.\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7769300678","Type":"PullRequestEvent","CreatedAt":"2018-06-04T02:55:10","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2914","RelatedDescription":"Merged pull request \"[WPF] Implemented OpenUriAction in WPF Backend\" (#2914) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplemented OpenUriAction in WPF Backend.\r\n![2912-issue](https://user-images.githubusercontent.com/6755973/40886497-3c2c0a80-6739-11e8-9a0d-38701c7d2b43.gif)\r\n\r\n### Bugs Fixed ###\r\n\r\n- fixes #2912\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7769300673","Type":"IssuesEvent","CreatedAt":"2018-06-04T02:55:10","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2912","RelatedDescription":"Closed issue \"OpenUrl is not implemented for WPF\" (#2912) at xamarin/Xamarin.Forms","RelatedBody":"Steps to reproduce:\r\n1. Call method Device.OpenUri\r\n\r\nActual result:\r\nWorks on Android and iOS\r\nDoesn't work on WPF\r\n\r\nExpected result:\r\nDefault browser (from OS settings) opens url.\r\n\r\nCurrent method implementation for WPF:\r\npublic void OpenUriAction(Uri uri)\r\n    {\r\n    }"},{"Id":"7769220467","Type":"PullRequestEvent","CreatedAt":"2018-06-04T02:19:48","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2876","RelatedDescription":"Merged pull request \"[UWP,iOS] Enable screen readers to read non-interactive elements\" (#2876) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWe expect screen readers to be able to read content by default. On iOS and UWP, this was not true for non-interactive elements such as Labels.\r\n\r\n#### iOS\r\nWe create iOS views programmatically, in which case the `IsAccessibilityElement` value defaults to `false`. We expected it to default to `true`, as it states in the documentation, but this apparently is only the case when using storyboards. We are now explicitly setting `IsAccessibilityElement` to true for all controls.\r\n\r\n#### UWP\r\nThis functionality was originally working, but it was thwarted by a change made later for UI testing. Reverting that change for now until we can find a better alternative.\r\n\r\n### Bugs Fixed ###\r\n\r\n- fixes #1946\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\n- UWP UI Tests will probably fail\r\n- Anyone explicitly setting `UIView.IsAccessibilityElement` to `false` in custom renderers should ensure they do so after `SetNativeControl` is called. Otherwise, it will be overridden to `true`.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7769111828","Type":"IssuesEvent","CreatedAt":"2018-06-04T01:29:21","Actor":"ahmedalejo","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2920","RelatedDescription":"Opened issue \"Keys from preceding merged dictionaries off an Application isn´t immediately available in consequent dictionary\" (#2920) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nApplication.MargeDictiion\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create the following files\r\n```xaml\r\n<!--File A.cs-->\r\n<ResourceDictionary>\r\n    <Color x:Key=\"A\">Red</Color>\r\n</ResourceDictionary>\r\n<!--File B.cs-->\r\n<ResourceDictionary>\r\n    <Style TargetType=\"Label\">\r\n        <Setter Property=\"TextColor\" Value=\"{StaticResource A}\"/>\r\n    </Style>\r\n</ResourceDictionary>\r\n<!--File App.cs-->\r\n<App\r\n    xmlns:local=\"...\"\r\n    ...>\r\n    <App.MergedDictionaries>\r\n        <local:A/>\r\n        <local:B/>\r\n    </App.MergedDictionaries>    \r\n</App>\r\n```\r\n2. Execute the project\r\n\r\n### Expected Behavior\r\nThe project should run without errors\r\n### Actual Behavior\r\nThe exception below is raised\r\n```\r\n06-03 20:14:21.905 I/MonoDroid(23664): System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> Xamarin.Forms.Xaml.XamlParseException: Position 13:38. StaticResource not found for key A\r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.CreateValuesVisitor.Visit (Xamarin.Forms.Xaml.ElementNode node, Xamarin.Forms.Xaml.INode parentNode) [0x0024b] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\CreateValuesVisitor.cs:92 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.ElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) [0x000ab] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:149 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.ListNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) [0x00025] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:227 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.ElementNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) [0x00043] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:143 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.RootNode.Accept (Xamarin.Forms.Xaml.IXamlNodeVisitor visitor, Xamarin.Forms.Xaml.INode parentNode) [0x00043] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlNode.cs:201 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.XamlLoader.Visit (Xamarin.Forms.Xaml.RootNode rootnode, Xamarin.Forms.Xaml.HydrationContext visitorContext) [0x00054] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:138 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.XamlLoader.Load (System.Object view, System.String xaml) [0x0004b] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:89 \r\n06-03 20:14:21.905 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.XamlLoader.Load (System.Object view, System.Type callingType) [0x0002f] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:68 \r\n06-03 20:14:21.906 I/MonoDroid(23664):   at Xamarin.Forms.Xaml.Extensions.LoadFromXaml[TXaml] (TXaml view, System.Type callingType) [0x00000] in D:\\agent_work\\1\\s\\Xamarin.Forms.Xaml\\ViewExtensions.cs:36 \r\n06-03 20:14:21.906 I/MonoDroid(23664):   at ServiceApp.App.InitializeComponent () [0x00001] in C:\\ServiceApp\\ServiceApp\\obj\\Debug\\ServiceApp.obj.Debug.App.xaml.g.cs:20 \r\n06-03 20:14:21.906 I/MonoDroid(23664):   at ServiceApp.App..ctor () [0x00008] in C:\\ServiceApp\\ServiceApp\\App.xaml.cs:22 \r\n```\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: All\r\n  - iOS:  11.10.1.177 (7e782c1)\r\n  - Android: 8.3.0.19 (HEAD/342b2ce96)\r\n- Nuget Packages: Xamarin.Forms 2.5.0.280555\r\n"},{"Id":"7768276569","Type":"IssuesEvent","CreatedAt":"2018-06-03T16:15:37","Actor":"scastria","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2919","RelatedDescription":"Opened issue \"Why is Stepper Up button hardcoded to 10 pixels height on Android?\" (#2919) at xamarin/Xamarin.Forms","RelatedBody":"StepperRenderer for Android shows:\r\n\r\n`_upButton.SetHeight((int)Context.ToPixels(10.0));`\r\n\r\nWhy is this?  It causes the _downButton to be taller than the _upButton."},{"Id":"7768251856","Type":"IssuesEvent","CreatedAt":"2018-06-03T16:00:49","Actor":"scastria","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2918","RelatedDescription":"Opened issue \"Stepper alternate constructor NOT calling this() to initialize _platformConfigurationRegistry\" (#2918) at xamarin/Xamarin.Forms","RelatedBody":"If you look at Slider, it has 2 constructors, the default with no arguments and an alternate with min, max, and value.  The default constructor initializes _platformConfigurationRegistry and the alternate constructor extends the default with \": this()\".  This way the alternate constructor will still initialize the _platformConfigurationRegistry.\r\n\r\nStepper is NOT doing this.  The alternate constructor does NOT call this() so the _platformConfigurationRegistry is NOT being initialized so any app using the alternate constructor will crash with NPE."},{"Id":"7768250923","Type":"PullRequestEvent","CreatedAt":"2018-06-03T16:00:19","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2917","RelatedDescription":"Opened pull request \"[WPF] Fixed Images from Stream\" (#2917) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFixed Images from Stream.\r\n![imagen](https://user-images.githubusercontent.com/6755973/40888465-bc6b2636-6757-11e8-8066-b5d9bcaea702.png)\r\n_NOTE: Image from base64 to byte array, then use a Stream to create the ImageSource._\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixed Issue [2844: Images from Stream.](https://github.com/xamarin/Xamarin.Forms/issues/2844)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7767917253","Type":"PullRequestEvent","CreatedAt":"2018-06-03T12:30:30","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2916","RelatedDescription":"Opened pull request \"[GTK] Fixed Issue 2778: Apply transparent color in case of receive default color in GTK Entry\" (#2916) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nApply transparent color in case of receive default color in GTK Entry.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixed Issue [2778: [GTK] ControlGallery.Gtk: VisualStateManager validation example does not recover \"non-error\" state.](https://github.com/xamarin/Xamarin.Forms/issues/2778)\r\n\r\n![2778-issue](https://user-images.githubusercontent.com/6755973/40886569-a0706ed6-673a-11e8-8710-0938e7ae5f02.gif)\r\n\r\n### Behavioral Changes ###\r\n\r\nApply transparent color in case of receive default color in GTK Entry.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7767910912","Type":"PullRequestEvent","CreatedAt":"2018-06-03T12:26:02","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2915","RelatedDescription":"Opened pull request \"[GTK] Fixed Issue 2810: Wrong state in GTK Entry using Placeholder and Text\" (#2915) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFixed wrong state in GTK Entry using Placeholder and Text.\r\n![2810-issue](https://user-images.githubusercontent.com/6755973/40886522-c9994acc-6739-11e8-9cdf-4c56393ad7a0.gif)\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixed Issue [2810: [GTK] State of GTKEntry widget changes to 'insensitive' when user types in text.](https://github.com/xamarin/Xamarin.Forms/issues/2810)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7767904561","Type":"PullRequestEvent","CreatedAt":"2018-06-03T12:21:33","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2914","RelatedDescription":"Opened pull request \"Implemented OpenUriAction in WPF Backend\" (#2914) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplemented OpenUriAction in WPF Backend.\r\n![2912-issue](https://user-images.githubusercontent.com/6755973/40886497-3c2c0a80-6739-11e8-9a0d-38701c7d2b43.gif)\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixed Issue [2912: OpenUrl is not implemented for WPF](https://github.com/xamarin/Xamarin.Forms/issues/2912)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7767802800","Type":"IssuesEvent","CreatedAt":"2018-06-03T11:06:47","Actor":"mo-kml","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2913","RelatedDescription":"Opened issue \"use flex layout inside listview item\" (#2913) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nim using flex layout into listview item and listview wont render after that\r\nhow can i use flex in listview item template?\r\n- Version with issue:\r\n\r\n- Nuget Packages: 3.0.0.482510\r\n\r\n"},{"Id":"7767796609","Type":"IssuesEvent","CreatedAt":"2018-06-03T11:02:02","Actor":"VladislavAntonyuk","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2912","RelatedDescription":"Opened issue \"OpenUrl is not implemented for WPF\" (#2912) at xamarin/Xamarin.Forms","RelatedBody":"Steps to reproduce:\r\n1. Call method Device.OpenUri\r\n\r\nActual result:\r\nWorks on Android and iOS\r\nDoesn't work on WPF\r\n\r\nExpected result:\r\nDefault browser (from OS settings) opens url.\r\n\r\nCurrent method implementation for WPF:\r\npublic void OpenUriAction(Uri uri)\r\n    {\r\n    }"},{"Id":"7767569300","Type":"PullRequestEvent","CreatedAt":"2018-06-03T08:01:40","Actor":"pingzing","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2911","RelatedDescription":"Opened pull request \"[Core] Report binding failures\" (#2911) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAddresses #2639. Users can now enable the `Xamarin.Forms.Core.DebugSettings.IsBindingTracingEnabled` flag, and receive Debug output when a binding fails. For more advanced scenarios, they can subscribe to the `Xamarin.Forms.Core.BindingFailed` event, and get additional information about the failure.\r\n\r\nThis is something of an exploratory PR, as I'm looking for some feedback. Part of the issue here is that we're trying to unify three related, but distinct, failure modes:\r\n\r\n- Property Not Found\r\n- Converter Failed\r\n- Index Parsing Failed\r\n\r\nThe way I see it, we have probably three options:\r\n\r\n1. Stick to the simplest implementation where we just fire off an event with a string message. Easy to consume, easy to use.\r\n2.     Unify all the failures into a single event, but include the different failure mode information in the BindingFailureEventArgs class. (This is what this PR does)\r\n3.     Acknowledge the different failure modes, and split this all apart into three different events. I'm on the fence about this one--the vast majority of users will probably just turn on IsBindingTracingEnabled and be happy. But the remaining minority probably want all that extra information. If we take this option, they get it, but at the cost of a more complex implementation, and making it harder to intuitively understand how to use the DebugSettings class.\r\n\r\nObviously, I favor option 2, but I can see the drawbacks, and am open to feedback.\r\n\r\nNo tests yet until I have a better idea of whether or not this is the design that we'll be going with.\r\n\r\n### Bugs Fixed ###\r\n\r\n- #2639. Binding failures are now logged to Debug output, and fire events that the user can intercept.\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n- static class Xamarin.Forms.Core.DebugSettings\r\n    - static bool IsBindingTracingEnabled {get; set;}\r\n    - delegate void BindingFailedEventHandler(Object sender, BindingFailedEventArgs e);\r\n    - static event BindingFailedEventHandler BindingFailed;\r\n- class Xamarin.Forms.Core.BindingFailedEventArgs\r\n    - BindingPropertyNotFound PropertyNotFound { get; set; }\r\n    - BindingConverterFailed ConverterFailed { get; set; }\r\n    - BindingIndexParsingFailed IndexParsingFailed { get; set; } \r\n- class Xamarin.Forms.Core.BindingPropertyNotFound\r\n    - string BindingName { get; }\r\n     - string BindingContext { get; }\r\n    - Type TargetType { get; }\r\n    - string PropertyName { get; }\r\n- class Xamarin.Forms.Core.BindingConverterFailed\r\n    - object ConversionTarget { get; }\r\n    - Type TargetType { get; }\r\n- class  Xamarin.Forms.Core.BindingIndexParsingFailed\r\n    - string AttemptedIndexString { get; }\r\n    - Type SourceType { get; }\r\n\r\n### Behavioral Changes ###\r\n\r\nThis exposes a new static class called `DebugSettings` in Xamarin.Forms.Core.\r\n\r\n### PR Checklist ###\r\n\r\n- [] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7768366339","Type":"PullRequestEvent","CreatedAt":"2018-06-03T17:13:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4176","RelatedDescription":"Opened pull request \"[foundation] Override Message property in NSErrorException. Fixes #4133\" (#4176) at xamarin/xamarin-macios","RelatedBody":"The default `Message` property is not every helpful. Better information\nis available inside the `Error` property but it's not general (nor cross\nplatform) when dealing with exception.\n\nInclude unit tests (on an existing test checking NSError values)\n\nhttps://github.com/xamarin/xamarin-macios/issues/4133"},{"Id":"7767530817","Type":"IssuesEvent","CreatedAt":"2018-06-03T07:30:40","Actor":"marek-safar","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4175","RelatedDescription":"Opened issue \"Internal consistency error, please file a bug (http://bugzilla.xamarin.com). Additional data: found managed object 0x126028ea8=0x7fb3f9052880 (Linker.Sealer.Unsealable) in native object 0x60c000223540 (AppDelegate).\" (#4175) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significally more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. apply patch https://gist.github.com/marek-safar/e564ad5efdbe66387ae53b17ddea86a6\r\n2. make run-ios-sim64-linkall\r\n3. \r\n\r\n### Expected Behavior\r\n\r\nNo crash\r\n\r\n### Actual Behavior\r\n\r\n```\r\n2018-06-03 09:24:06.089 link all[65308:6402124] Xamarin.iOS: Internal consistency error, please file a bug (http://bugzilla.xamarin.com). Additional data: found managed object 0x126028ea8=0x7fb3f9052880 (Linker.Sealer.Unsealable) in native object 0x60c000223540 (AppDelegate).\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical: Stacktrace:\r\n\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical:   at <unknown> <0xffffffff>\r\n2018-06-03 09:24:06.091 link all[65308:6402124] critical:   at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain (int,string[],intptr,intptr) [0x0005c] in <fada7c48e0ed4641aa34baffb2274fed>:0\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at UIKit.UIApplication.Main (string[],intptr,intptr) [0x00005] in /Users/marek/git/xamarin/xamarin-macios/src/UIKit/UIApplication.cs:79\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at UIKit.UIApplication.Main (string[],string,string) [0x0002c] in /Users/marek/git/xamarin/xamarin-macios/src/UIKit/UIApplication.cs:63\r\n2018-06-03 09:24:06.092 link all[65308:6402124] critical:   at LinkAll.Application.Main (string[]) [0x00001] in /Users/marek/git/xamarin/xamarin-macios/tests/linker/ios/link all/Main.cs:19\r\n2018-06-03 09:24:06.093 link all[65308:6402124] critical:   at (wrapper runtime-invoke) <Module>.runtime_invoke_void_object (object,intptr,intptr,intptr) [0x00051] in <dec08c9bb76c4510a20ddda25bf09b70>:0\r\n2018-06-03 09:24:06.093 link all[65308:6402124] critical:\r\nNative stacktrace:\r\n\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t0   link all                            0x000000010c577394 mono_handle_native_crash + 244\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t1   libsystem_platform.dylib            0x000000011448ff5a _sigtramp + 26\r\n2018-06-03 09:24:06.149 link all[65308:6402124] critical: \t2   ???                                 0x000000000000ffff 0x0 + 65535\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t3   libsystem_c.dylib                   0x00000001140c5c97 abort + 127\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t4   link all                            0x000000010c74e5c9 xamarin_assertion_message + 425\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t5   link all                            0x000000010c74e405 xamarin_get_managed_object_for_ptr_fast + 213\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t6   link all                            0x000000010c49ce43 _ZL30native_to_managed_trampoline_5P11objc_objectP13objc_selectorPP11_MonoMethodP13UIApplicationP12NSDictionaryj + 291\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t7   link all                            0x000000010c49cd08 -[AppDelegate application:didFinishLaunchingWithOptions:] + 72\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t8   UIKit                               0x000000010e0f775b -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] + 278\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t9   UIKit                               0x000000010e0f91d2 -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 4123\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t10  UIKit                               0x000000010e0fe62b -[UIApplication _runWithMainScene:transitionContext:completion:] + 1677\r\n2018-06-03 09:24:06.150 link all[65308:6402124] critical: \t11  UIKit                               0x000000010e4c0e4a __111-[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:]_block_invoke + 866\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t12  UIKit                               0x000000010e893909 +[_UICanvas _enqueuePostSettingUpdateTransactionBlock:] + 153\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t13  UIKit                               0x000000010e4c0a86 -[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:] + 236\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t14  UIKit                               0x000000010e4c12a7 -[__UICanvasLifecycleMonitor_Compatability activateEventsOnly:withContext:completion:] + 675\r\n2018-06-03 09:24:06.151 link all[65308:6402124] critical: \t15  UIKit                               0x000000010ee324d4 __82-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:]_block_invoke + 299\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t16  UIKit                               0x000000010ee3236e -[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:] + 433\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t17  UIKit                               0x000000010eb1662d __125-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 221\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t18  UIKit                               0x000000010ed11387 _performActionsWithDelayForTransitionContext + 100\r\n2018-06-03 09:24:06.152 link all[65308:6402124] critical: \t19  UIKit                               0x000000010eb164f7 -[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 223\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t20  UIKit                               0x000000010e892fb0 -[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 392\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t21  UIKit                               0x000000010e0fcf0c -[UIApplication workspace:didCreateScene:withTransitionContext:completion:] + 515\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t22  UIKit                               0x000000010e6cfa97 -[UIApplicationSceneClientAgent scene:didInitializeWithEvent:completion:] + 361\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t23  FrontBoardServices                  0x00000001178042f3 -[FBSSceneImpl _didCreateWithTransitionContext:completion:] + 331\r\n2018-06-03 09:24:06.153 link all[65308:6402124] critical: \t24  FrontBoardServices                  0x000000011780ccfa __56-[FBSWorkspace client:handleCreateScene:withCompletion:]_block_invoke_2 + 225\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t25  libdispatch.dylib                   0x0000000113f85779 _dispatch_client_callout + 8\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t26  libdispatch.dylib                   0x0000000113f8a931 _dispatch_block_invoke_direct + 317\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t27  FrontBoardServices                  0x0000000117838470 __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 24\r\n2018-06-03 09:24:06.154 link all[65308:6402124] critical: \t28  FrontBoardServices                  0x000000011783812e -[FBSSerialQueue _performNext] + 439\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t29  FrontBoardServices                  0x000000011783868e -[FBSSerialQueue _performNextFromRunLoopSource] + 45\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t30  CoreFoundation                      0x0000000110f70bb1 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t31  CoreFoundation                      0x0000000110f554af __CFRunLoopDoSources0 + 271\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t32  CoreFoundation                      0x0000000110f54a6f __CFRunLoopRun + 1263\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t33  CoreFoundation                      0x0000000110f5430b CFRunLoopRunSpecific + 635\r\n2018-06-03 09:24:06.155 link all[65308:6402124] critical: \t34  GraphicsServices                    0x000000011648aa73 GSEventRunModal + 62\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t35  UIKit                               0x000000010e1000b7 UIApplicationMain + 159\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t36  ???                                 0x00000001273975e9 0x0 + 4953044457\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t37  ???                                 0x0000000127397483 0x0 + 4953044099\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t38  link all                            0x000000010c589654 mono_jit_runtime_invoke + 1428\r\n2018-06-03 09:24:06.156 link all[65308:6402124] critical: \t39  link all                            0x000000010c66f0df mono_runtime_invoke_checked + 127\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t40  link all                            0x000000010c6746fe mono_runtime_exec_main_checked + 110\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t41  link all                            0x000000010c4f6439 mono_jit_exec + 297\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t42  link all                            0x000000010c75e4e6 xamarin_main + 2726\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t43  link all                            0x000000010c4aed70 main + 80\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t44  libdyld.dylib                       0x0000000113ffa955 start + 1\r\n2018-06-03 09:24:06.157 link all[65308:6402124] critical: \t45  ???                                 0x0000000000000009 0x0 + 9\r\n2018-06-03 09:24:06.158 link all[65308:6402124] critical:\r\n=================================================================\r\nGot a SIGABRT while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries\r\nused by your application.\r\n=================================================================\r\n```\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7767279376","Type":"IssuesEvent","CreatedAt":"2018-06-03T03:34:13","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4014","RelatedDescription":"Closed issue \"ObjCRuntime.RuntimeException: An instance object is required to construct a closed generic method for the open generic method: Xamarin.Forms.Platform.iOS.VisualElementRenderer`1.LayoutSubviews (token reference: 0x10910).\" (#4014) at xamarin/xamarin-macios","RelatedBody":"_From @jordan-surveycom on April 23, 2018 13:59_\n\n### Steps to Reproduce\r\n\r\nShowing up intermittently on AppCenter Crashes. Says to file a bug report. Unsure of the steps to reproduce it as I haven't run into it while testing. Attached a crash log to this issue in case that helps.\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.4.3 (build 10)\r\nInstallation UUID: 4255a0d5-48c3-4e98-8894-69902da9081e\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.3\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.3\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3 (14154)\r\nBuild 9E145\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.1.29 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Community)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Community)\r\nAndroid SDK: /Users/jordan/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.4 (API level 19)\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 23.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704030010\r\nGit revision: 5af3e98549653fcc5335896ccc296343d08f31bb\r\nBuild date: 2018-04-12 12:32:07-04\r\nXamarin addins: fadb82fb0fe2668cb7789f8b524aec6fb8568ee7\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n```\r\n\r\n### Crash Log\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n[crash.txt](https://github.com/xamarin/Xamarin.Forms/files/1938501/crash.txt)\r\n\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#2527_"},{"Id":"7764477510","Type":"IssuesEvent","CreatedAt":"2018-06-01T20:29:17","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4174","RelatedDescription":"Opened issue \"Your mono runtime and class libraries are out of sync message while building unittest projects with XI master\" (#4174) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Update System with Xamarin.iOS project, XI version: 11.11.0.331 (master: 238eb94c) \r\n2. Build and Run any unit test on device.\r\n\r\n### Expected Behavior\r\nBuild Log should not contain any out of sync messages.\r\n\r\n### Actual Behavior\r\n\"Your mono runtime and class libraries are out of sync\" message is  present in build logs.\r\n\r\n### Environment\r\n\r\n```\r\nOperating System: Mac OS X 10.13.4\r\nBot Name: XQA-XI-Sierra-6\r\nMono version: 5.14.0.106 (820bff26b3b)  (2018-05-25 17:29:19 -04:00)\r\nXA version: 8.3.99.19 (HEAD/09df99bdc) \r\nXI version: 11.11.0.331 (master: 238eb94c) \r\nXM version: 4.5.0.331 (master: 238eb94c)  (2018-05-25 07:47:00 -04:00)\r\nXVS version: \r\nXS version: 7.6.0.971 (e936c76)  (2018-05-28 12:49:41 -04:00)\r\n```\r\n\r\n### Build Logs\r\n\r\nhttp://xqa.blob.core.windows.net/gist/report-c8b3a0e9db67473ebe1ff9df22e7c44d.txt, with mono 5.14\r\nhttp://xqa.blob.core.windows.net/gist/report-641ce6bd5c0545618ad5b7f981fcbbdf.txt with mono 5.12\r\n\r\n### Example Project (If Possible)\r\n\r\nAny unit test project in xamarin-macios/tests/ folder. \r\n\r\n## Additional Info:\r\nThis is not a new issue in master. It was happening for quite sometime. I confirmed that QA tests are checking out the correct external/mono and build logs are not giving false results, also checked manually. This issue is occurring in bots with either mono 5.14 or 5.12 installed.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1003397917103845376","CreatedAt":"2018-06-03T22:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":11,"RawContent":null},{"Id":"1003046627240751104","CreatedAt":"2018-06-02T22:52:06+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/XoB2rKP2XT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":35,"RawContent":null},{"Id":"1002614995031592963","CreatedAt":"2018-06-01T18:16:57+00:00","UserScreenname":"xamarinhq","Text":"Find #Xamarin and/or #dotNET events near you this June: https://t.co/sJpR7Xk130 https://t.co/PT5WAD4JIx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":11,"RawContent":null},{"Id":"1002572478076645378","CreatedAt":"2018-06-01T15:28:00+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/xM3dAE2jRZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"1002218901680377858","CreatedAt":"2018-05-31T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add @TizenProject to your #XamarinForms apps: https://t.co/pom9Nki4vo https://t.co/I2dYlz1Tfo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":27,"RawContent":null},{"Id":"1001900437233119234","CreatedAt":"2018-05-30T18:57:33+00:00","UserScreenname":"xamarinhq","Text":"We've got some great @XamarinU Guest Lectures coming up that you won't want to miss! Check them out, and make sure… https://t.co/REGhq5ZF12","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":17,"RawContent":null},{"Id":"1001568114855890945","CreatedAt":"2018-05-29T20:57:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/UH3gpAFFHj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":72,"FavoriteCount":40,"RawContent":null},{"Id":"1000859470057132032","CreatedAt":"2018-05-27T22:01:07+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/iNmDBtF3zX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":18,"RawContent":null},{"Id":"1000408472083673089","CreatedAt":"2018-05-26T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/t7b1GH4pMp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":10,"RawContent":null},{"Id":"1000081068660330497","CreatedAt":"2018-05-25T18:28:02+00:00","UserScreenname":"xamarinhq","Text":"Join our open source family and help make https://t.co/3QxhuBuvHc even better: https://t.co/6h1HH1dTAM https://t.co/5go35jCm9N","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":34,"RawContent":null},{"Id":"999682195089436672","CreatedAt":"2018-05-24T16:03:03+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/81dQ3CWoSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":13,"RawContent":null},{"Id":"999389007191728134","CreatedAt":"2018-05-23T20:38:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to secure and version your #Xamarin apps in this guest post on Mobile.BuildTools: https://t.co/NTtOmsdDTl https://t.co/ks5Q3K2joU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":17,"RawContent":null},{"Id":"998953429568573440","CreatedAt":"2018-05-22T15:47:11+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/2E1zBel6Cr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":21,"RawContent":null},{"Id":"998352195631435777","CreatedAt":"2018-05-20T23:58:06+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/tO3s7DT35f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":46,"RawContent":null},{"Id":"997143964397572096","CreatedAt":"2018-05-17T15:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/LeAoHXXaA6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"996824503241052160","CreatedAt":"2018-05-16T18:47:36+00:00","UserScreenname":"xamarinhq","Text":"Get started with #XamarinEssentials cross-platform APIs: https://t.co/sW5UgLfeGb https://t.co/Bw4ufWhGP8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":151,"FavoriteCount":80,"RawContent":null},{"Id":"996785351665463297","CreatedAt":"2018-05-16T16:12:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/UZ5l6JaWcB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":10,"RawContent":null},{"Id":"996750580969365506","CreatedAt":"2018-05-16T13:53:51+00:00","UserScreenname":"xamarinhq","Text":"Learn about some small changes coming as we integrate https://t.co/iLyxWYOFfj content into Microsoft sites: https://t.co/RcvPgvkPTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"996423969308921856","CreatedAt":"2018-05-15T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/2LzUatSvjX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":24,"RawContent":null},{"Id":"996420693481938944","CreatedAt":"2018-05-15T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/aiwQSbkh1B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2018-06-04T05:30:51.7262192Z","RunDurationInMilliseconds":4002}