{"Data":{"Sdk":{"Events":[{"Id":"7603686482","Type":"IssuesEvent","CreatedAt":"2018-04-29T17:02:57","Actor":"ThomasBarnekow","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/492","RelatedDescription":"Opened issue \"Worksheet class lacks most child element-related properties\" (#492) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nThe `DocumentFormat.OpenXml.Spreadsheet.Worksheet` class only has properties for 4 out of 38 child elements. For example, there is no property for the only mandatory child element, `x:sheetData`, which is likely among the most frequently referenced elements.\r\n\r\nAs per the schema, those child elements have to be in a defined order, which, in the absence of SDK support, needs to be ensured by the caller's code. That increases the size and complexity of the code.\r\n\r\n**Information**\r\n\r\n- .NET Target: all\r\n- DocumentFormat.OpenXml Version: 3cc26570f2964a5d56a5988f9464b2e4b29812c7\r\n\r\n**Observed**\r\n\r\nThe `Worksheet` class defines the following child elements:\r\n```csharp\r\n    [ChildElementInfo(typeof(SheetProperties))]\r\n    [ChildElementInfo(typeof(SheetDimension))]\r\n    [ChildElementInfo(typeof(SheetViews))]\r\n    [ChildElementInfo(typeof(SheetFormatProperties))]\r\n    [ChildElementInfo(typeof(Columns))]\r\n    [ChildElementInfo(typeof(SheetData))]\r\n    [ChildElementInfo(typeof(SheetCalculationProperties))]\r\n    [ChildElementInfo(typeof(SheetProtection))]\r\n    [ChildElementInfo(typeof(ProtectedRanges))]\r\n    [ChildElementInfo(typeof(Scenarios))]\r\n    [ChildElementInfo(typeof(AutoFilter))]\r\n    [ChildElementInfo(typeof(SortState))]\r\n    [ChildElementInfo(typeof(DataConsolidate))]\r\n    [ChildElementInfo(typeof(CustomSheetViews))]\r\n    [ChildElementInfo(typeof(MergeCells))]\r\n    [ChildElementInfo(typeof(PhoneticProperties))]\r\n    [ChildElementInfo(typeof(ConditionalFormatting))]\r\n    [ChildElementInfo(typeof(DataValidations))]\r\n    [ChildElementInfo(typeof(Hyperlinks))]\r\n    [ChildElementInfo(typeof(PrintOptions))]\r\n    [ChildElementInfo(typeof(PageMargins))]\r\n    [ChildElementInfo(typeof(PageSetup))]\r\n    [ChildElementInfo(typeof(HeaderFooter))]\r\n    [ChildElementInfo(typeof(RowBreaks))]\r\n    [ChildElementInfo(typeof(ColumnBreaks))]\r\n    [ChildElementInfo(typeof(CustomProperties))]\r\n    [ChildElementInfo(typeof(CellWatches))]\r\n    [ChildElementInfo(typeof(IgnoredErrors))]\r\n    [ChildElementInfo(typeof(Drawing))]\r\n    [ChildElementInfo(typeof(LegacyDrawing))]\r\n    [ChildElementInfo(typeof(LegacyDrawingHeaderFooter))]\r\n    [ChildElementInfo(typeof(DrawingHeaderFooter))]\r\n    [ChildElementInfo(typeof(Picture))]\r\n    [ChildElementInfo(typeof(OleObjects))]\r\n    [ChildElementInfo(typeof(Controls))]\r\n    [ChildElementInfo(typeof(WebPublishItems))]\r\n    [ChildElementInfo(typeof(TableParts))]\r\n    [ChildElementInfo(typeof(WorksheetExtensionList))]\r\n```\r\nHowever, the `Worksheet` class only provides the following properties:\r\n```csharp\r\n    /// <summary>\r\n    /// <para> SheetProperties.</para>\r\n    /// <para> Represents the following element tag in the schema: x:sheetPr </para>\r\n    /// </summary>\r\n    /// <remark>\r\n    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main\r\n    /// </remark>\r\n    public SheetProperties SheetProperties\r\n    {\r\n        get => GetElement<SheetProperties>(0);\r\n        set => SetElement(0, value);\r\n    }\r\n\r\n    /// <summary>\r\n    /// <para> SheetDimension.</para>\r\n    /// <para> Represents the following element tag in the schema: x:dimension </para>\r\n    /// </summary>\r\n    /// <remark>\r\n    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main\r\n    /// </remark>\r\n    public SheetDimension SheetDimension\r\n    {\r\n        get => GetElement<SheetDimension>(1);\r\n        set => SetElement(1, value);\r\n    }\r\n\r\n    /// <summary>\r\n    /// <para> SheetViews.</para>\r\n    /// <para> Represents the following element tag in the schema: x:sheetViews </para>\r\n    /// </summary>\r\n    /// <remark>\r\n    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main\r\n    /// </remark>\r\n    public SheetViews SheetViews\r\n    {\r\n        get => GetElement<SheetViews>(2);\r\n        set => SetElement(2, value);\r\n    }\r\n\r\n    /// <summary>\r\n    /// <para> SheetFormatProperties.</para>\r\n    /// <para> Represents the following element tag in the schema: x:sheetFormatPr </para>\r\n    /// </summary>\r\n    /// <remark>\r\n    /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main\r\n    /// </remark>\r\n    public SheetFormatProperties SheetFormatProperties\r\n    {\r\n        get => GetElement<SheetFormatProperties>(3);\r\n        set => SetElement(3, value);\r\n    }\r\n``` \r\n\r\n**Expected**\r\n\r\nGiven that the child elements must be in a defined order, the `Worksheet` class defines properties for all child elements."},{"Id":"7595093476","Type":"IssuesEvent","CreatedAt":"2018-04-27T03:07:03","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/485","RelatedDescription":"Closed issue \"OpenXmlSimpleType children do not implement equality\" (#485) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nClasses like `StringValue` and `HexBinaryValue` do not implement equality and you must use their `Value` properties to compare them. This is not handy and can lead to unexpected results.\r\n\r\n**Information**\r\n\r\n- .NET Target: Any\r\n- DocumentFormat.OpenXml Version: 2.8.1\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing DocumentFormat.OpenXml;\r\nusing Xunit;\r\n\r\nnamespace DocumantFormat.OpenXml.Tests\r\n{\r\n    public class OpenXmlSimpleValueTests\r\n    {\r\n        private const string HexBinary = \"12345678\";\r\n        private const string Value = \"Hello World\";\r\n\r\n        [Fact]\r\n        public void HexBinaryValue_ValuesAreEqual_HexBinaryValuesAreNotEqual()\r\n        {\r\n            var hexBinaryValue1 = new HexBinaryValue(HexBinary);\r\n            var hexBinaryValue2 = new HexBinaryValue(HexBinary);\r\n\r\n            Assert.Equal(hexBinaryValue1.Value, hexBinaryValue2.Value);\r\n\r\n            // Those two HexBinaryValue instances should be deemed equal.\r\n            Assert.NotEqual(hexBinaryValue1, hexBinaryValue2);\r\n        }\r\n\r\n        [Fact]\r\n        public void HexBinaryValue_ValueIsContainedInList_ListDoesNotContainHexBinaryValue()\r\n        {\r\n            var hexBinaryValues = new List<HexBinaryValue>\r\n            {\r\n                new HexBinaryValue(HexBinary),\r\n                new HexBinaryValue(\"ABCDEF00\")\r\n            };\r\n\r\n            var hexBinaryValue = new HexBinaryValue(HexBinary);\r\n\r\n            Assert.Contains(hexBinaryValue.Value, hexBinaryValues.Select(hbv => hbv.Value));\r\n\r\n            // The HexBinaryValue should be deemed contained in the list.\r\n            // The fact that this wasn't the case was a gotcha.\r\n            Assert.DoesNotContain(hexBinaryValue, hexBinaryValues);\r\n        }\r\n\r\n        [Fact]\r\n        public void StringValue_ValuesAreEqual_StringValuesAreNotEqual()\r\n        {\r\n            var stringValue1 = new StringValue(Value);\r\n            var stringValue2 = new StringValue(Value);\r\n\r\n            Assert.Equal(stringValue1.Value, stringValue2.Value);\r\n\r\n            // The two StringValue instances should be deemed equal.\r\n            Assert.NotEqual(stringValue1, stringValue2);\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\nTwo distinct instances of `HexBinaryValue` or `StringValue`, for example, will not be deemed equal even if their values are equal.\r\n\r\n**Expected**\r\n\r\nGiven two distinct instances of `HexBinaryValue`, when the `Value` properties of those instances are equal, then those `HexBinaryValue` instances should be deemed equal as well.\r\n\r\nThe same should apply to other child classes of `OpenXmlSimpleType` such as `StringValue`."},{"Id":"7575649742","Type":"IssuesEvent","CreatedAt":"2018-04-24T02:54:27","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/488","RelatedDescription":"Closed issue \"Unit tests failing due to missing CultureInfo.InvariantCulture in ToString()\" (#488) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nThe following unit tests fail on machines that do not use the US locale (invariant culture):\r\n\r\n- DecimalValueTest\r\n- DoubleValueTest\r\n- SingleValueTest\r\n\r\n**Information**\r\n\r\nThe issue can be observed on machines not configured to use the en-US locale (or similar locales with identical number formats).\r\n\r\n**Repro**\r\n\r\nSet your locale to de-DE, for example, making sure your local number format is different from the en-US format. For example, \"one thousand decimal 5\" would be formatted like:\r\n\r\n- 1,000.5 in the US (using a comma to separate thousands a point as the decimal separator) and\r\n- 1.000,5 in Germany (using a point to separate thousands and a comma as the decimal separator).\r\n\r\nSimply using `number.ToString()` will produce different results for different cultures. To get the same result when comparing numbers in string format on machines with different locale / culture settings, you must use `number.ToString(CultureInfo.InvariantCulture)`.\r\n\r\n**Observed**\r\n\r\nThe above-mentioned unit tests fail on machines using number formats different from those used in the US (invariant culture).\r\n\r\n**Expected**\r\n\r\nThe above-mentioned unit tests pass regardless of the local number formats."},{"Id":"7575649678","Type":"PullRequestEvent","CreatedAt":"2018-04-24T02:54:25","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/487","RelatedDescription":"Merged pull request \"Make simple types comparable and equatable\" (#487) at OfficeDev/Open-XML-SDK","RelatedBody":"In conjunction with #485, this commit introduces two base classes,\r\n`OpenXmlComparableReferenceType` and `OpenXmlComparableValueType`, which\r\nimplement the `IComparable`, `IComparable<T>`, and `IEquatable<T>`\r\ninterfaces. With the exception of `EnumValue` and `ListValue`, all children\r\nor descendants of `OpenXmlSimpleType` are changed to become subclasses of\r\none of those two base classes.\r\n\r\nThis commit further adds unit tests for the new behavior. The core\r\ntests are contained in the `OpenXmlComparableReferenceTypeTests` and\r\n`OpenXmlComparableValueTypeTests` base classes. For each concrete simple\r\ntype, subclasses of those base classes create the concrete values to be\r\nused in the generic unit tests.\r\n\r\nLastly, this commit fixes existing unit tests within the `SimpleTypeTest`\r\nand `OpenXmlSimpleValueTest` classes, because those unit tests asserted\r\nthat two instances with same value but constructed separately are NOT\r\nequal.\r\n\r\nNote that the implementation is not yet complete as it lacks comments\r\nfor some public methods, for example. We might also have to add further\r\nunit tests."}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"7597814639","Type":"IssuesEvent","CreatedAt":"2018-04-27T14:31:55","Actor":"kokhany","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/222","RelatedDescription":"Opened issue \"Add support for emf/wmf images conversion into html \" (#222) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"It's known issue that GDI consumes huge amounts of memory when dealing with emf/wmf.\r\n\r\nOn the other hand, image/x-emf, image/x-wmf are valid types of images in both OpenXML and RTF specs.\r\n\r\nWhile it still possible to replace these images with converted analogs using OpenXML SDK, it would be useful to allow convert a document with them into html (instead of just ignoring silently).\r\nIt's much simpler to convert them into another format in ImageHandler(png, for instance, because Chrome and Firefox don't understand emf/wmf formats), instead of replacing the ImagePart.\r\n\r\nMoreover, the changes are really small, and, as the benefit, give the responsibility to the consumer what to do with these formats (they can be ignored as well).\r\n\r\nThanks in advance"},{"Id":"7553623494","Type":"PullRequestEvent","CreatedAt":"2018-04-19T07:07:35","Actor":"haozhouxu","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/221","RelatedDescription":"Opened pull request \"fix W.tc Children W.sdt dosn't contain W.tc\" (#221) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"fix W.tc Children W.sdt dosn't contain W.tc , Only W.sdtContent contain W.tc ."}],"ResultType":"GitHubEvent"}},"RunOn":"2018-05-01T05:30:31.1709349Z","RunDurationInMilliseconds":1674}