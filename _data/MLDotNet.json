{"Data":{"GitHub":{"Issues":[{"Id":"364740644","IsPullRequest":true,"CreatedAt":"2018-09-28T04:53:22","Actor":"artidoro","Number":"1089","RawContent":null,"Title":"WIP: Char array for separators in word tokenizer","State":"open","Body":"Fixes #935.\r\n\r\nSwitched the string separator in word tokenizer by a character array. Each character in the array is taken as being a separator, instead of having a comma separated string. \r\n\r\nNeed to add tests.","Url":"https://github.com/dotnet/machinelearning/pull/1089","RelatedDescription":"Open PR \"WIP: Char array for separators in word tokenizer\" (#1089)"},{"Id":"364729436","IsPullRequest":true,"CreatedAt":"2018-09-28T03:36:54","Actor":"artidoro","Number":"1088","RawContent":null,"Title":"Added training method that accepts initial predictor for Symboli SGD estimator","State":"open","Body":"Fixes #1087.\r\n\r\nThis PR restores the ability to train SymbolicSGD estimator starting from the weights of a previously trained predictor.\r\n\r\nI added a  test to demonstrate that it works. ","Url":"https://github.com/dotnet/machinelearning/pull/1088","RelatedDescription":"Open PR \"Added training method that accepts initial predictor for Symboli SGD estimator\" (#1088)"},{"Id":"364729086","IsPullRequest":false,"CreatedAt":"2018-09-28T03:34:35","Actor":"artidoro","Number":"1087","RawContent":null,"Title":"Symbolic SGD should support training from initial predictor","State":"open","Body":"In the estimator conversion, the functionality of training with weights taken from a previously trained predictor was lost. It should be restored. This was identified by Tom in his comment: \r\n\r\nhttps://github.com/dotnet/machinelearning/pull/1012/files/f7f666615e8befc0cd8b6925efe0a4c1c5e14101#r220340515","Url":"https://github.com/dotnet/machinelearning/issues/1087","RelatedDescription":"Open issue \"Symbolic SGD should support training from initial predictor\" (#1087)"},{"Id":"364725899","IsPullRequest":true,"CreatedAt":"2018-09-28T03:14:46","Actor":"jignparm","Number":"1086","RawContent":null,"Title":"update ml.scoring library to stable version","State":"open","Body":"Bumping up version of dependencies from pre-release to stable\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1086","RelatedDescription":"Open PR \"update ml.scoring library to stable version\" (#1086)"},{"Id":"364665423","IsPullRequest":true,"CreatedAt":"2018-09-28T03:10:39","Actor":"shmoradims","Number":"1080","RawContent":null,"Title":"OnnxTransform: Fix 3 bugbash bugs","State":"closed","Body":"Fixes #1050 #1051 #1053 ","Url":"https://github.com/dotnet/machinelearning/pull/1080","RelatedDescription":"Closed or merged PR \"OnnxTransform: Fix 3 bugbash bugs\" (#1080)"},{"Id":"364721659","IsPullRequest":false,"CreatedAt":"2018-09-28T02:49:03","Actor":"TomFinley","Number":"1085","RawContent":null,"Title":"Expand PiGSTy's schema shape type support","State":"open","Body":"PiGSTy's (#632) schema propagation system relies on a static type that is currently restricted to be a value-tuple. There is, however, no fundamental reason for it to be value-tuples, or only value-tuples; my motivation was merely just that if we consider the C# syntax for declaring value-tuples vs. anonymous types:\r\n\r\n```csharp\r\nvar x = (a: 1, b: 2);\r\nvar y = new { A = 1, B = 2 };\r\n```\r\n\r\none clearly had more elegant syntax than the other. Yet there are reasons to *also* support classes with `PipelineColumn` properties. (This includes but is not limited to anonymous classes).\r\n\r\n1. Intellisense for value-tuples, especially in the context of generics and especially *especially* in the context of delegates, is currently not the best. [This may be addressed, or it may not.](https://github.com/dotnet/roslyn/issues/29949) At any rate even if addressed we would want our API to have a good experience in older versions of Visual Studio.\r\n\r\n2. My possibly imperfect understanding from @dsyme is that F# can work with anonymous types gracefully, but as far as I am aware cannot yet work with value-tuples at all. Considering that the intersection of F# developers and ML.NET potential users is high at least when compared to the general population of .NET developer, this may be viewed as a priority.\r\n\r\n3. For explicitly defined (i.e., non-anonymous) classes, it allows one to define something like `DataView<MyData>`, which has the advantage of being easily expressable as a return value and a parameter to a function. Could someone write something like `DataView<(Scalar<bool> label, Vector<float> features)>` as a return value or parameter? Yes, absolutely, I suppose, but it's not very pretty. Also one thing I learnt to my surprise is that, at least as of C# 7.3, one *cannot* merely do something like `using Foo = (int bar, float biz)`, so even a shorthand based on type aliases even within a single file is not possible.\r\n\r\nCurrently the set of allowed \"schema shape\" types is the following:\r\n\r\n1. Any of the public subclasses of `PipelineColumn`.\r\n2. A value-tuple whose items are of an allowed \"schema shape\" type.\r\n\r\nWhat I am proposing is that we expand this definition to include:\r\n\r\n3. Classes whose only publicly accessible members are properties that are one of the basic abstract subtypes of `PipelineColumn` and a single public constructor in one of the following two subtypes:\r\n\r\n    * The properties are get-only, and the single constructor has parameters where a one-to-one correspondence with each of the properties, where the parameter and property have identical types, and this constructor sets the properties, and no other work.\r\n\r\n    * The properties have get-set accessors, and the single construct has no arguments. (Note that this can be a default constructor.)\r\n\r\n    In each case, whether the property is set via constructor parameter or just by assigning it, the property should always be exactly the object that was either passed in or assigned.\r\n\r\nNote that due to the way the validation code works, and for several practical reasons, it is best and easiest to allow a mix of these types -- that is, just as you can have nested value-tuples, you could have, for example, a value-tuple  \r\n\r\nI am considering the wisdom of allowing fields. On the one hand, we allow fields on the classes for `PredictionEngine`. These of course cannot be the same object (one describes values of a column, whereas one describes the properties of the columns themselves and how they are meant to be configured), but it may be that allowing fields in one but not the other may lead to confusion. Not sure about this. For now I am thinking to only allow properties, and if someone complains we can consider adding it then.\r\n\r\n## Work\r\n\r\nWe might identify five things that should be done. The first three should probably be in one PR. The fourth \r\n\r\n1. The methods of `StaticPipeInternalUtils` should be expanded to also accommodate the aforementioned types.\r\n\r\n2. The code analyzer that checks the type parameters with `IsShapeAttribute` should be similarly expanded.\r\n\r\n3. In several places throughout the code base the generic type parameter has `Tuple` in its name, e.g., `TTupleShape`, `TTupleInShape`, and so forth. These ought to be changed to things like `TShape` or `TInShape` and the like to make them less specific to tuples.\r\n\r\n4. Part of the reasons why we are doing this is to make the structure work better in F#. F# support for value tuples is limited. This suggests that those so-called \"pigstentions\" where we return a set of columns (e.g., binary classification), where we currently have a value-tuple (e.g., `(Scalar<float> score, Scalar<float> probability, Scalar<bool> predictedLabel)`) we may be better served by instead having a definite type, `BinaryClassificationOutput` looking something like this:\r\n\r\n   ```csharp\r\n   public sealed BinaryClassificationOutput\r\n   {\r\n       public Scalar<float> Score { get; }\r\n       public Scalar<float> Probability { get; }\r\n       public Scalar<bool> PredictedLabel { get; }\r\n\r\n       public BinaryClassificationOutput(...) { ... }\r\n   }\r\n   ```\r\n\r\n5. Having a user responsible for defining the types is fairly obnoxious in its own right. So, we might imagine a code action through a Roslyn code-fix provider that can take an `Estimator<T>` where `T` is some sort of inline type (either value-tuple or anonymous class), based on that class defines an explicit type (by default perhaps some `private` nested class), and then uses it to provide `Estimator<T2>` over this new hypothetical type `T2`. This would be relatively easy for the user to call, and then they could modify it as they like. (E.g., make it public, move it somewhere else, add XML docs, and so forth.)","Url":"https://github.com/dotnet/machinelearning/issues/1085","RelatedDescription":"Open issue \"Expand PiGSTy's schema shape type support\" (#1085)"},{"Id":"364693722","IsPullRequest":true,"CreatedAt":"2018-09-27T23:57:27","Actor":"sfilipi","Number":"1084","RawContent":null,"Title":"More pigstensions","State":"open","Body":"ongoing work to address #754. \r\nThis PR adds the xtensions for AP, OGD, LR, Multi-LR, and Poisson Regression. ","Url":"https://github.com/dotnet/machinelearning/pull/1084","RelatedDescription":"Open PR \"More pigstensions\" (#1084)"},{"Id":"364692541","IsPullRequest":true,"CreatedAt":"2018-09-27T23:50:56","Actor":"artidoro","Number":"1083","RawContent":null,"Title":"Temporary fix for warning issue in KeyToValueTransform","State":"open","Body":"This is a temporary fix for the issue #1059.\r\n\r\nAs outlined by Tom, we suppress the warning temporarily. There will thus be no warning when a the KeyToValueTransform is used with types that don't support missing values (e.g. strings, int, bool).\r\n\r\nThe next steps are also outlined by Tom's comment, and will involve providing a default value to the KeyToValueTranform for missing values, as well as throwing when a missing value is encountered if a default value was not provided. ","Url":"https://github.com/dotnet/machinelearning/pull/1083","RelatedDescription":"Open PR \"Temporary fix for warning issue in KeyToValueTransform\" (#1083)"},{"Id":"364690998","IsPullRequest":true,"CreatedAt":"2018-09-27T23:41:57","Actor":"eerhardt","Number":"1082","RawContent":null,"Title":"Ensure all Microsoft.ML assemblies are loaded by the LearningPipeline API.","State":"open","Body":"This way, all components are registered before the Experiment tries to instantiate them.\r\n\r\nFix #1042\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1082","RelatedDescription":"Open PR \"Ensure all Microsoft.ML assemblies are loaded by the LearningPipeline API.\" (#1082)"},{"Id":"364645294","IsPullRequest":true,"CreatedAt":"2018-09-27T22:53:14","Actor":"abgoswam","Number":"1077","RawContent":null,"Title":"Updated documentation for TensorFlowTransform","State":"closed","Body":"Fixes #1038 \r\n\r\n1. modified sample code\r\n2. fixed links and description text \r\n3. updated doc to mention we now support TF SavedModel format\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1077","RelatedDescription":"Closed or merged PR \"Updated documentation for TensorFlowTransform\" (#1077)"},{"Id":"364668461","IsPullRequest":false,"CreatedAt":"2018-09-27T21:57:34","Actor":"justinormont","Number":"1081","RawContent":null,"Title":"TensorFlowTransform & ONNXTransform not displaying in command-line","State":"open","Body":"The `TensorFlowTransform` & `ONNXTransform` are not displayed in the command-line, and don't appear to be accessible.\r\n\r\nListed DataTransforms: (_note the missing `TensorFlowTransform`)_\r\n```bat\r\n$ dotnet bin/AnyCPU.Release/Microsoft.ML.Console/netcoreapp2.0/MML.dll ? kind=DataTransform\r\n\r\nAvailable components for kind 'DataTransform':\r\n  BinNormalizer: Binning Normalizer\r\n    Aliases: Bin\r\n  BootstrapSampleTransform: Bootstrap Sample Transform\r\n    Aliases: BootstrapSample\r\n  CategoricalHashTransform: Categorical Hash Transform\r\n    Aliases: CatHashTransform, CategoricalHash, CatHash\r\n  CategoricalTransform: Categorical Transform\r\n    Aliases: CatTransform, Categorical, Cat\r\n  CharTokenize: Character Tokenizer Transform\r\n    Aliases: CharToken\r\n  ChooseColumnsTransform: Choose Columns Transform\r\n    Aliases: ChooseColumns, Choose\r\n  Concat: Concat Transform\r\n    Aliases: ConcatTransform\r\n  Convert: Convert Transform\r\n    Aliases: ConvertTransform\r\n  CopyColumns: Copy Columns Transform\r\n    Aliases: CopyColumnsTransform, Copy\r\n  CountFeatureSelectionTransform: Count Feature Selection Transform\r\n    Aliases: CountFeatureSelection\r\n  CustomStopWordsRemoverTransform: Custom Stopwords Remover Transform\r\n    Aliases: CustomStopWords\r\n  DropColumns: Drop Columns Transform\r\n    Aliases: DropColumnsTransform, Drop\r\n  DropSlots: Drop Slots Transform\r\n    Aliases: DropSlotsTransform\r\n  Evaluate: Evaluate Predictor\r\n  GcnTransform: Global Contrast Normalization Transform\r\n    Aliases: Gcn\r\n  GenerateNumberTransform: Generate Number Transform\r\n    Aliases: GenerateNumber, Generate\r\n  Group: Group Transform\r\n  HashJoinTransform: Hash Join Transform\r\n    Aliases: HashJoin\r\n  HashTransform: Hash Transform\r\n    Aliases: Hash\r\n  ImageGrayscaleTransform: Image Greyscale Transform\r\n    Aliases: ImageGrayscale\r\n  ImageLoaderTransform: Image Loader Transform\r\n    Aliases: ImageLoader\r\n  ImagePixelExtractorTransform: Image Pixel Extractor Transform\r\n    Aliases: ImagePixelExtractor\r\n  ImageResizerTransform: Image Resizer Transform\r\n    Aliases: ImageResizer\r\n  KeepColumns: Keep Columns Transform\r\n    Aliases: KeepColumnsTransform, Keep\r\n  KeyToBinaryVectorTransform: Key To Binary Vector Transform\r\n    Aliases: KeyToBinary, ToBinaryVector\r\n  KeyToValueTransform: Key To Value Transform\r\n    Aliases: KeyToValue, KeyToVal, Unterm\r\n  KeyToVectorTransform: Key To Vector Transform\r\n    Aliases: KeyToVector, ToVector\r\n  LabelIndicatorTransform: Label Indicator Transform\r\n    Aliases: LabelIndicator\r\n  LdaTransform: Latent Dirichlet Allocation Transform\r\n    Aliases: LightLda\r\n  LearnerFeatureSelectionTransform: Learner Feature Selection Transform\r\n    Aliases: LearnerFeatureSelection\r\n  LoadTransform: Load Transform\r\n    Aliases: Load\r\n  LogMeanVarNormalizer: LogMeanVar Normalizer\r\n    Aliases: LogMeanVar, LogNormalNormalizer, LogNormal\r\n  LpNormNormalizer: Lp-Norm Normalizer\r\n    Aliases: lpnorm\r\n  MeanVarNormalizer: MeanVar Normalizer\r\n    Aliases: MeanVar, ZScoreNormalizer, ZScore, GaussianNormalizer, Gaussian\r\n  MinMaxNormalizer: Min-Max Normalizer\r\n    Aliases: MinMax\r\n  MutualInformationFeatureSelection: Mutual Information Feature Selection Transform\r\n    Aliases: MutualInformationFeatureSelectionTransform, MIFeatureSelection\r\n  NADrop: NA Drop Transform\r\n    Aliases: NADropTransform\r\n  NAFilter: NA Filter\r\n    Aliases: MissingValueFilter, MissingFilter\r\n  NAHandleTransform: NA Handle Transform\r\n    Aliases: NAHandle, NA\r\n  NAIndicatorTransform: NA Indicator Transform\r\n    Aliases: NAIndicator, NAInd\r\n  NAReplaceTransform: NA Replace Transform\r\n    Aliases: NAReplace, NARep\r\n  NgramHashTransform: Ngram Hash Transform\r\n    Aliases: NgramHash\r\n  NgramTransform: Ngram Transform\r\n    Aliases: Ngram\r\n  OptColTransform: Optional Column Transform\r\n    Aliases: optional\r\n  PcaTransform: Principal Component Analysis Transform\r\n    Aliases: Pca\r\n  RangeFilter: Range Filter\r\n  RffTransform: Random Fourier Features Transform\r\n    Aliases: Rff\r\n  Score: Score Predictor\r\n  SentimentAnalyzingTransform: Sentiment Analyzing Transform\r\n    Aliases: SentimentAnalyzer, Senti\r\n  ShuffleTransform: Shuffle Transform\r\n    Aliases: Shuffle, shuf\r\n  SkipFilter: Skip Filter\r\n    Aliases: Skip\r\n  SkipTakeFilter: Skip and Take Filter\r\n    Aliases: SkipTake\r\n  StopWordsRemoverTransform: Stopwords Remover Transform\r\n    Aliases: StopWordsRemover, StopWords\r\n  TakeFilter: Take Filter\r\n    Aliases: Take\r\n  Term: Term Transform\r\n    Aliases: AutoLabel, TermTransform, AutoLabelTransform\r\n  TermLookup: Term Lookup Transform\r\n    Aliases: Lookup, LookupTransform, TermLookupTransform\r\n  TextNormalizerTransform: Text Normalizer Transform\r\n    Aliases: TextNormalizer, TextNorm\r\n  TextTransform: Text Transform\r\n    Aliases: Text\r\n  TrainScore: Train and Score Predictor\r\n  TreeFeat: Tree Ensemble Featurization Transform\r\n    Aliases: TreeFeaturizationTransform\r\n  Ungroup: Un-group Transform\r\n  VectorToImageTransform: Vector To Image Transform\r\n    Aliases: VectorToImage\r\n  WhiteningTransform: Whitening Transform\r\n    Aliases: Whitening\r\n  WordBagTransform: Word Bag Transform\r\n    Aliases: WordBag\r\n  WordEmbeddingsTransform: Word Embeddings Transform\r\n    Aliases: WordEmbeddings\r\n  WordHashBagTransform: Word Hash Bag Transform\r\n    Aliases: WordHashBag\r\n  WordTokenizeTransform: Word Tokenizer Transform\r\n    Aliases: DelimitedTokenizeTransform, WordToken, DelimitedTokenize, Token\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1081","RelatedDescription":"Open issue \"TensorFlowTransform & ONNXTransform not displaying in command-line\" (#1081)"},{"Id":"364662553","IsPullRequest":true,"CreatedAt":"2018-09-27T21:35:52","Actor":"Ivanidzo4ka","Number":"1079","RawContent":null,"Title":"Cumulative changes based on 0.6 bag bash","State":"open","Body":"Fixes #1057 \r\nFixes #1044 \r\nFIxes #1056","Url":"https://github.com/dotnet/machinelearning/pull/1079","RelatedDescription":"Open PR \"Cumulative changes based on 0.6 bag bash\" (#1079)"},{"Id":"364657267","IsPullRequest":false,"CreatedAt":"2018-09-27T21:18:05","Actor":"ganik","Number":"1078","RawContent":null,"Title":" ML.Ensemble assembly is not part of any NuGet","State":"open","Body":"ML.NET 0.6\r\n\r\nML.Ensemble is not put into any of ML.NET NuGets","Url":"https://github.com/dotnet/machinelearning/issues/1078","RelatedDescription":"Open issue \" ML.Ensemble assembly is not part of any NuGet\" (#1078)"},{"Id":"364614616","IsPullRequest":true,"CreatedAt":"2018-09-27T19:10:29","Actor":"eerhardt","Number":"1076","RawContent":null,"Title":"Add a workaround for the tests hanging while loading MKL.","State":"open","Body":"The workaround is to ensure the MKL library is loaded very early in the test process, so it doesn't cause the deadlock.\r\n\r\nAlso, undoing the previous test workarounds now that we've narrowed this hang down.\r\n\r\nWorkaround #1073","Url":"https://github.com/dotnet/machinelearning/pull/1076","RelatedDescription":"Open PR \"Add a workaround for the tests hanging while loading MKL.\" (#1076)"},{"Id":"364587691","IsPullRequest":true,"CreatedAt":"2018-09-27T18:55:37","Actor":"TomFinley","Number":"1074","RawContent":null,"Title":"Finish the sentence in TextLoader static pipeline extension method","State":"closed","Body":"Fixes #1046.\r\n\r\nAlso given that the goal is to not have the shape parameters be exclusively value-tuples, I want to get out of the habit of calling them `TTupleShape` but instead `TShape`, which I just opportunistically did while I'm at it.\r\n\r\nI also noticed I had not written anything in the `env` parameter documentation. It's not a terribly helpful statement, but better than leaving it blank as I had.","Url":"https://github.com/dotnet/machinelearning/pull/1074","RelatedDescription":"Closed or merged PR \"Finish the sentence in TextLoader static pipeline extension method\" (#1074)"},{"Id":"364589918","IsPullRequest":true,"CreatedAt":"2018-09-27T18:00:04","Actor":"yaeldekel","Number":"1075","RawContent":null,"Title":"Change ML.NET to work with .NET Framework 4.6.1","State":"open","Body":"Fixes #1072 .\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1075","RelatedDescription":"Open PR \"Change ML.NET to work with .NET Framework 4.6.1\" (#1075)"},{"Id":"364573526","IsPullRequest":false,"CreatedAt":"2018-09-27T17:16:32","Actor":"eerhardt","Number":"1073","RawContent":null,"Title":"Tests hang due to MKL loading blocking all threads","State":"open","Body":"We are seeing some tests hanging randomly in CI on Windows.\r\n\r\nI was able to catch a few hangs (~10-15) on my machine as well. Every time the process was hung, it was during loading of MklImports, which was calling `LoadLibraryA(\"libittnotify\")`, and then on a different thread MklImports was also on the stack. I am unable to get debugging symbols for MKL, but the two stacks look like this:\r\n\r\nThread 1, calling into MKL from ML.NET:\r\n\r\n```\r\n0:024> kn\r\n # Child-SP          RetAddr           Call Site\r\n00 0000004f`828fb448 00007ffc`2af8c199 ntdll!NtWaitForSingleObject+0x14\r\n01 0000004f`828fb450 00007ffc`2af80e3e ntdll!LdrpDrainWorkQueue+0x15d\r\n02 0000004f`828fb490 00007ffc`2af84387 ntdll!LdrpLoadDllInternal+0xc2\r\n03 0000004f`828fb510 00007ffc`2af8a724 ntdll!LdrpLoadDll+0x10b\r\n04 0000004f`828fb6c0 00007ffc`27352a7b ntdll!LdrLoadDll+0xa4\r\n05 0000004f`828fb7c0 00007ffc`273814f1 KERNELBASE!LoadLibraryExW+0x17b [minkernel\\kernelbase\\module.c @ 1207] \r\n06 0000004f`828fb830 00007ffc`273814a9 KERNELBASE!LoadLibraryExA+0x31 [minkernel\\kernelbase\\module.c @ 1249] \r\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for MklImports.DLL - \r\n07 0000004f`828fb870 00007ffb`ba4b8854 KERNELBASE!LoadLibraryA+0x39 [minkernel\\kernelbase\\module.c @ 878] \r\n08 0000004f`828fb8a0 00007ffb`ba4b908b MklImports+0x8854\r\n09 0000004f`828fb8e0 00007ffb`ba4c64f1 MklImports+0x908b\r\n0a 0000004f`828fb9b0 00007ffb`ba4be343 MklImports!vslDeleteStream+0x4d91\r\n0b 0000004f`828fbbc0 00007ffb`823903d3 MklImports!cblas_sgemm+0x213\r\n0c 0000004f`828fbc60 00007ffb`8238f446 0x00007ffb`823903d3\r\n0d 0000004f`828fbd80 00007ffb`8238d91a 0x00007ffb`8238f446\r\n0e 0000004f`828fbf90 00007ffb`8238d330 0x00007ffb`8238d91a\r\n0f 0000004f`828fc0a0 00007ffb`8238d0b3 0x00007ffb`8238d330\r\n10 0000004f`828fc160 00007ffb`81e10837 0x00007ffb`8238d0b3\r\n11 0000004f`828fc1e0 00007ffb`81e0f88e 0x00007ffb`81e10837\r\n12 0000004f`828fc250 00007ffb`82389736 0x00007ffb`81e0f88e\r\n13 0000004f`828fc520 00007ffb`e0063ba3 0x00007ffb`82389736\r\n14 0000004f`828fc760 00007ffb`dff4f4fe coreclr!CallDescrWorkerInternal+0x83 [E:\\A\\_work\\164\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n15 0000004f`828fc7a0 00007ffb`dff4f9fb coreclr!CallDescrWorkerReflectionWrapper+0x1a [e:\\a\\_work\\164\\s\\src\\vm\\reflectioninvocation.cpp @ 740] \r\n16 0000004f`828fc7f0 00007ffb`d94ee791 coreclr!RuntimeMethodHandle::InvokeMethod+0x4bb [e:\\a\\_work\\164\\s\\src\\vm\\reflectioninvocation.cpp @ 1355] \r\n17 0000004f`828fce30 00007ffb`816c173b System_Private_CoreLib!System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)$##60034D3+0xb1\r\n18 0000004f`828fcea0 00007ffb`816c1000 0x00007ffb`816c173b\r\n19 0000004f`828fcee0 00007ffb`816c012f 0x00007ffb`816c1000\r\n1a 0000004f`828fcf70 00007ffb`816bfdd7 0x00007ffb`816c012f\r\n1b 0000004f`828fcff0 00007ffb`816bf9e4 0x00007ffb`816bfdd7\r\n1c 0000004f`828fd060 00007ffb`816bf4f9 0x00007ffb`816bf9e4\r\n1d 0000004f`828fd0d0 00007ffb`816bf47d 0x00007ffb`816bf4f9\r\n1e 0000004f`828fd140 00007ffb`816bec15 0x00007ffb`816bf47d\r\n1f 0000004f`828fd1b0 00007ffb`816be679 0x00007ffb`816bec15\r\n20 0000004f`828fd210 00007ffb`816be31d 0x00007ffb`816be679\r\n21 0000004f`828fd280 00007ffb`816bde59 0x00007ffb`816be31d\r\n22 0000004f`828fd2e0 00007ffb`816bd01f 0x00007ffb`816bde59\r\n23 0000004f`828fd3d0 00007ffb`816bccfc 0x00007ffb`816bd01f\r\n24 0000004f`828fd450 00007ffb`816ba722 0x00007ffb`816bccfc\r\n25 0000004f`828fd4d0 00007ffb`816ba2af 0x00007ffb`816ba722\r\n26 0000004f`828fd5d0 00007ffb`816ba1b7 0x00007ffb`816ba2af\r\n27 0000004f`828fd650 00007ffb`816b9f18 0x00007ffb`816ba1b7\r\n28 0000004f`828fd6d0 00007ffb`816b9da9 0x00007ffb`816b9f18\r\n29 0000004f`828fd780 00007ffb`816b9d2d 0x00007ffb`816b9da9\r\n2a 0000004f`828fd7f0 00007ffb`816b91f6 0x00007ffb`816b9d2d\r\n2b 0000004f`828fd850 00007ffb`816b8ff9 0x00007ffb`816b91f6\r\n2c 0000004f`828fd8e0 00007ffb`816b8f7d 0x00007ffb`816b8ff9\r\n2d 0000004f`828fd950 00007ffb`816b8cde 0x00007ffb`816b8f7d\r\n2e 0000004f`828fd9c0 00007ffb`816b89bf 0x00007ffb`816b8cde\r\n2f 0000004f`828fda30 00007ffb`816b88a9 0x00007ffb`816b89bf\r\n30 0000004f`828fdab0 00007ffb`816b83d7 0x00007ffb`816b88a9\r\n31 0000004f`828fdb30 00007ffb`816b78ef 0x00007ffb`816b83d7\r\n32 0000004f`828fdc20 00007ffb`816b77e7 0x00007ffb`816b78ef\r\n33 0000004f`828fdca0 00007ffb`816b629f 0x00007ffb`816b77e7\r\n34 0000004f`828fdd20 00007ffb`816b5eff 0x00007ffb`816b629f\r\n35 0000004f`828fdde0 00007ffb`816b5df7 0x00007ffb`816b5eff\r\n36 0000004f`828fde60 00007ffb`816b58b5 0x00007ffb`816b5df7\r\n37 0000004f`828fdee0 00007ffb`816b5518 0x00007ffb`816b58b5\r\n38 0000004f`828fdf60 00007ffb`816b4eef 0x00007ffb`816b5518\r\n39 0000004f`828fdfd0 00007ffb`816b4de7 0x00007ffb`816b4eef\r\n3a 0000004f`828fe050 00007ffb`816b4879 0x00007ffb`816b4de7\r\n3b 0000004f`828fe0d0 00007ffb`816b459f 0x00007ffb`816b4879\r\n3c 0000004f`828fe180 00007ffb`816b4497 0x00007ffb`816b459f\r\n3d 0000004f`828fe200 00007ffb`816b2917 0x00007ffb`816b4497\r\n3e 0000004f`828fe270 00007ffb`816b211f 0x00007ffb`816b2917\r\n3f 0000004f`828fe300 00007ffb`816b2017 0x00007ffb`816b211f\r\n40 0000004f`828fe380 00007ffb`816b0b29 0x00007ffb`816b2017\r\n41 0000004f`828fe410 00007ffb`816b039f 0x00007ffb`816b0b29\r\n42 0000004f`828fe4c0 00007ffb`816b0297 0x00007ffb`816b039f\r\n43 0000004f`828fe540 00007ffb`816afa66 0x00007ffb`816b0297\r\n44 0000004f`828fe5c0 00007ffb`816af6ef 0x00007ffb`816afa66\r\n45 0000004f`828fe650 00007ffb`816af5e7 0x00007ffb`816af6ef\r\n46 0000004f`828fe6d0 00007ffb`816ade30 0x00007ffb`816af5e7\r\n47 0000004f`828fe750 00007ffb`816ad61f 0x00007ffb`816ade30\r\n48 0000004f`828fe800 00007ffb`816ad427 0x00007ffb`816ad61f\r\n49 0000004f`828fe880 00007ffb`816acb85 0x00007ffb`816ad427\r\n4a 0000004f`828fe900 00007ffb`d9549e3c 0x00007ffb`816acb85\r\n4b 0000004f`828fe930 00007ffb`d945cda9 System_Private_CoreLib!System.Threading.Tasks.Task`1[System.__Canon].InnerInvoke()$##600286D+0x4c\r\n4c 0000004f`828fe980 00007ffb`d950f8e7 System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60027BC+0x89\r\n4d 0000004f`828fea00 00007ffb`d950f674 System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)$##600294B+0x197\r\n4e 0000004f`828feaa0 00007ffb`d957c4cb System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteEntry()$##6002948+0x84\r\n4f 0000004f`828feae0 00007ffb`816aca97 System_Private_CoreLib!System.Threading.Tasks.SynchronizationContextTaskScheduler+<>c.<.cctor>b__8_0(System.Object)$##6002AB3+0x2b\r\n50 0000004f`828feb10 00007ffb`d945cda9 0x00007ffb`816aca97\r\n51 0000004f`828feb60 00007ffb`816aabe7 System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60027BC+0x89\r\n52 0000004f`828febe0 00007ffb`8169bc34 0x00007ffb`816aabe7\r\n53 0000004f`828fec30 00007ffb`d945cda9 0x00007ffb`8169bc34\r\n54 0000004f`828fec80 00007ffb`d950f8e7 System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60027BC+0x89\r\n55 0000004f`828fed00 00007ffb`d945cda9 System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)$##600294B+0x197\r\n56 0000004f`828feda0 00007ffb`e0063ba3 System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60027BC+0x89\r\n57 0000004f`828fee20 00007ffb`dff29839 coreclr!CallDescrWorkerInternal+0x83 [E:\\A\\_work\\164\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101] \r\n58 (Inline Function) --------`-------- coreclr!CallDescrWorkerWithHandler+0x53 [e:\\a\\_work\\164\\s\\src\\vm\\callhelpers.cpp @ 78] \r\n59 0000004f`828fee60 00007ffb`e004fe03 coreclr!MethodDescCallSite::CallTargetWorker+0x2b5 [e:\\a\\_work\\164\\s\\src\\vm\\callhelpers.cpp @ 628] \r\n5a (Inline Function) --------`-------- coreclr!StressLog::InlinedStressLogOn+0x5 [e:\\a\\_work\\164\\s\\src\\utilcode\\stresslog.cpp @ 594] \r\n5b (Inline Function) --------`-------- coreclr!StressLog::LogOn+0x5 [e:\\a\\_work\\164\\s\\src\\utilcode\\stresslog.cpp @ 628] \r\n5c 0000004f`828fefb0 00007ffb`dff293d1 coreclr!ThreadNative::KickOffThread_Worker+0x143 [e:\\a\\_work\\164\\s\\src\\vm\\comsynchronizable.cpp @ 260] \r\n5d (Inline Function) --------`-------- coreclr!ManagedThreadBase_DispatchInner+0xf0 [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 8850] \r\n5e 0000004f`828ff120 00007ffb`dff291c3 coreclr!ManagedThreadBase_DispatchMiddle+0x179 [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 8901] \r\n5f 0000004f`828ff250 00007ffb`e005cbb7 coreclr!ManagedThreadBase_DispatchOuter+0xaf [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 9140] \r\n60 0000004f`828ff2f0 00007ffb`dff8c64a coreclr!ManagedThreadBase_FullTransitionWithAD+0x2f [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 9200] \r\n61 (Inline Function) --------`-------- coreclr!ManagedThreadBase::KickOff+0x20 [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 9234] \r\n62 0000004f`828ff350 00007ffb`dff8c516 coreclr!ThreadNative::KickOffThread+0x10a [e:\\a\\_work\\164\\s\\src\\vm\\comsynchronizable.cpp @ 380] \r\n63 0000004f`828ff430 00007ffc`2acd3034 coreclr!Thread::intermediateThreadProc+0x86 [e:\\a\\_work\\164\\s\\src\\vm\\threads.cpp @ 2255] \r\n64 0000004f`828ffdf0 00007ffc`2afc1461 kernel32!BaseThreadInitThunk+0x14\r\n65 0000004f`828ffe20 00000000`00000000 ntdll!RtlUserThreadStart+0x21\r\n```\r\n\r\nThread 2, what looks like a background thread running a `DllMain` (`ntdll!LdrpCallInitRoutine` is what invokes `DllMain`):\r\n\r\n```\r\n0:076> kn\r\n # Child-SP          RetAddr           Call Site\r\n00 0000004f`8487f268 00007ffc`27372f1d ntdll!NtYieldExecution+0x14\r\n01 0000004f`8487f270 00007ffb`ba4b882d KERNELBASE!SwitchToThread+0x1d [minkernel\\kernelbase\\thread.c @ 3327] \r\n02 0000004f`8487f2a0 00007ffb`ba4b69a8 MklImports+0x882d\r\n03 0000004f`8487f2e0 00007ffb`ba4b1132 MklImports+0x69a8\r\n04 0000004f`8487f7c0 00007ffb`be8679d4 MklImports+0x1132\r\n05 0000004f`8487f7f0 00007ffc`2af84053 MklImports!vslDeleteStream+0x43a6274\r\n06 0000004f`8487f850 00007ffc`2af8167f ntdll!LdrpCallInitRoutine+0x6b\r\n07 0000004f`8487f8c0 00007ffc`2afc14ce ntdll!LdrShutdownThread+0x16f\r\n08 0000004f`8487f9c0 00007ffc`2acd303c ntdll!RtlExitUserThread+0x3e\r\n09 0000004f`8487fa00 00007ffc`2afc1461 kernel32!BaseThreadInitThunk+0x1c\r\n0a 0000004f`8487fa30 00000000`00000000 ntdll!RtlUserThreadStart+0x21\r\n```\r\n\r\nNote that Thread 1 is calling `MklImports!cblas_sgemm`, and eventually MklImports is calling `LoadLibraryA`. Printing the variables at `LoadLibraryA`:\r\n\r\n```\r\n0:024> dv\r\n  lpLibFileName = 0x00007ffb`bea0eb2c \"libittnotify.dll\"\r\n      StrLength = <value unavailable>\r\n      pszBuffer = 0x00007ffb`bee40148 \"\"\r\n           hMod = 0x00000000`00000000\r\n```\r\n\r\nThere are other threads running at this point (and some of those threads are spawning new threads as well). I assume there is some race condition happening with MklImports loading while other threads are doing other work.\r\n\r\nTo attempt to fix this, I am loading `MklImports` very early in the tests (in the base test class static initializer, I am calling into MklImports to ensure it is loaded). This appears to fix the issue - I've run the tests 30 times without it hanging on my machine.\r\n\r\nI also have a few .dmp files, if anyone wants to investigate themselves, you can ping me.","Url":"https://github.com/dotnet/machinelearning/issues/1073","RelatedDescription":"Open issue \"Tests hang due to MKL loading blocking all threads\" (#1073)"},{"Id":"364560064","IsPullRequest":false,"CreatedAt":"2018-09-27T16:37:32","Actor":"yaeldekel","Number":"1072","RawContent":null,"Title":"The new API does not work on .NET Framework < 4.7.1","State":"open","Body":"It relies on the extension method in System.Linq \"Append\" that was added only in 4.7.1.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1072","RelatedDescription":"Open issue \"The new API does not work on .NET Framework < 4.7.1\" (#1072)"},{"Id":"364557520","IsPullRequest":false,"CreatedAt":"2018-09-27T16:30:11","Actor":"jignparm","Number":"1071","RawContent":null,"Title":"OnnxTransform: Add entrypoint","State":"open","Body":"Estimator and transform are available. \r\n\r\nNeed to make it an entrypoint for use in pytlc","Url":"https://github.com/dotnet/machinelearning/issues/1071","RelatedDescription":"Open issue \"OnnxTransform: Add entrypoint\" (#1071)"},{"Id":"364461836","IsPullRequest":true,"CreatedAt":"2018-09-27T15:42:13","Actor":"amiteshenoy","Number":"1070","RawContent":null,"Title":"Provided the version name for macOS 10.12.","State":"closed","Body":"Helps the user to relate to the macOS version faster as some users may know the version name instead of the version ID.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1070","RelatedDescription":"Closed or merged PR \"Provided the version name for macOS 10.12.\" (#1070)"},{"Id":"364334551","IsPullRequest":false,"CreatedAt":"2018-09-27T07:12:38","Actor":"justinormont","Number":"1069","RawContent":null,"Title":"SDCA (LinearClassificationTrainer) should be called SDCA in the codebase","State":"open","Body":"For historic reasons, `SDCA` is named [`LinearClassificationTrainer`](https://github.com/dotnet/machinelearning/blob/044a6d3cf35a8076ecbbcca5cdb61b2f722f94e1/src/Microsoft.ML.StandardLearners/Standard/LinearClassificationTrainer.cs#L1359) in the codebase.\r\n\r\nSDCA (Stochastic Dual Coordinate Ascent), while quite good at many datasets, isn't the final answer for linear classification tasks as implied by the `LinearClassificationTrainer` moniker. For example, [`AveragedPerceptron`](https://github.com/dotnet/machinelearning/blob/b88d3460398c5b95745b476e40dd836f8f788cf6/src/Microsoft.ML.StandardLearners/Standard/Online/AveragedPerceptron.cs) tends to win on NLP tasks (ngrams and/or chargrams). \r\n\r\nNow is a great time to break with history and call SDCA, simply, `SDCA`.","Url":"https://github.com/dotnet/machinelearning/issues/1069","RelatedDescription":"Open issue \"SDCA (LinearClassificationTrainer) should be called SDCA in the codebase\" (#1069)"},{"Id":"364310241","IsPullRequest":true,"CreatedAt":"2018-09-27T05:28:07","Actor":"sfilipi","Number":"1068","RawContent":null,"Title":"WIP - Ranker train context and FastTree ranking xtensions","State":"open","Body":"ongoing work to address #754 . \r\nThis PR adds the RankerContext, and the FastTree extension for the FastTreeRanker. \r\n\r\nStill not complete because it fails to retrieve the MaxDcg metric. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1068","RelatedDescription":"Open PR \"WIP - Ranker train context and FastTree ranking xtensions\" (#1068)"},{"Id":"364264009","IsPullRequest":false,"CreatedAt":"2018-09-27T00:47:03","Actor":"codemzs","Number":"1067","RawContent":null,"Title":"Update LightGBM nuget so that there is no dependency on GCC","State":"open","Body":"Currently lightgbm nuget depends on a binary for openmp that comes from gcc compiler but having to install gcc compiler on build machines causes slowdown. Update the nuget to the newest version that removes this dependency because lightgbm native code is compiled using clang.","Url":"https://github.com/dotnet/machinelearning/issues/1067","RelatedDescription":"Open issue \"Update LightGBM nuget so that there is no dependency on GCC\" (#1067)"},{"Id":"364263845","IsPullRequest":true,"CreatedAt":"2018-09-27T00:45:55","Actor":"codemzs","Number":"1066","RawContent":null,"Title":"Update lightgbm nuget version so that it does not depend on gcc.","State":"open","Body":"fixes #1067\r\nfixes #494","Url":"https://github.com/dotnet/machinelearning/pull/1066","RelatedDescription":"Open PR \"Update lightgbm nuget version so that it does not depend on gcc.\" (#1066)"},{"Id":"364248147","IsPullRequest":false,"CreatedAt":"2018-09-27T00:19:37","Actor":"Ivanidzo4ka","Number":"1064","RawContent":null,"Title":"File name collision during parallel tests execution.","State":"closed","Body":"In our routine shared across multiple tests we ask for test name and then create file based on it.\r\nWhere is no limitation on having tests with same name which leads to sporadic crashes on build machines like this:\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=24407&view=ms.vss-test-web.test-result-details  ","Url":"https://github.com/dotnet/machinelearning/issues/1064","RelatedDescription":"Closed issue \"File name collision during parallel tests execution.\" (#1064)"},{"Id":"364255963","IsPullRequest":false,"CreatedAt":"2018-09-26T23:59:56","Actor":"artidoro","Number":"1065","RawContent":null,"Title":"WeightColumn name defaults to \"Weights\" in one of the constructors of the estimators","State":"open","Body":"Estimators that are instantiated through MAML without specifying a weightcolumn are instead created with default weightcolumn named \"Weights\".\r\n\r\n**More details:**\r\nThe constructor for estimator objects that is used by MAML takes an Arguments object, which has a weight column name that defaults to \"Weights\". To be precise it defaults to an Optional<string> with implicit value of \"Weights\".\r\n\r\nWhen we instantiate the estimator through that constructor, we need to pass a SchemaShape.Column object to the base class TrainerEstimatorBase. This column is in most cases constructed with a method that takes the column name as specified in the Arguments object. As the default value in the Arguments object is not null, it is \"Weights\", this method does not return null, but returns a new SchemaShape.Column named Weights.\r\n\r\n\r\n**The rational:**\r\nThe new API's rational is as follows:\r\n1.  the user needs to specify a weight column name, if the name is not null we check the presence of the column\r\n2.  if the user does not define a weight column name (it is null), we assume there is no weight column\r\n\r\nThe old MAML's rational:\r\n1.  same as above\r\n2. if the user does not specify a weight column name:\r\n    -  if there is a column named \"Weights\" it will be taken as the weights column automatically\r\n    - if there is no column name \"Weights\", we assume that there is no weight column\r\n\r\n\r\n**What we have to do:**\r\nWe have to fix the current instantiation of estimators through MAML, and decide if we want to continue using a different behavior for the command line and the C# API. ","Url":"https://github.com/dotnet/machinelearning/issues/1065","RelatedDescription":"Open issue \"WeightColumn name defaults to \"Weights\" in one of the constructors of the estimators\" (#1065)"},{"Id":"364243775","IsPullRequest":false,"CreatedAt":"2018-09-26T23:31:12","Actor":"chris-lauren","Number":"1062","RawContent":null,"Title":"0.6: Legacy Entry point Transforms.TextFeaturizer not found","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran old sentiment analysis example, updated all using to use legacy namespace\r\n- **What happened?** Legacy Entry point Transforms.TextFeaturizer not found\r\n- **What did you expect?** Expected all entrypoints to work\r\n\r\n### Source code / logs\r\n/* This template shows the building blocks for training a machine learning model with ML.NET (https://aka.ms/mlnet).\r\n * This model predicts whether a sentence has a positive or negative sentiment. It is based on a sample that can be \r\n * found at https://aka.ms/mlnetsentimentanalysis, which provides a more detailed introduction to ML.NET and the scenario.*/\r\n\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Legacy;\r\nusing Microsoft.ML.Legacy.Data;\r\nusing Microsoft.ML.Legacy.Models;\r\nusing Microsoft.ML.Legacy.Trainers;\r\nusing Microsoft.ML.Legacy.Transforms;\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Trainers;\r\nusing Microsoft.ML.Transforms;\r\n\r\nnamespace MLNETConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n\r\n            //1. Build an ML.NET pipeline for training a sentiment analysis model\r\n            Console.WriteLine(\"Training a model for Sentiment Analysis using ML.NET\");\r\n            var pipeline = new LearningPipeline\r\n            {\r\n                // 1a. Load the training data using a TextLoader.\r\n                new TextLoader(@\"Data\\wikipedia-detox-250-line-data.tsv\").CreateFrom<SentimentData>(useHeader: true),\r\n\r\n                // 1b. Featurize the text into a numeric vector that can be used by the machine learning algorithm.\r\n                new TextFeaturizer(\"Features\", \"SentimentText\"),\r\n\r\n                // 1c. Add AveragedPerceptron (a linear learner) to the pipeline.\r\n                new AveragedPerceptronBinaryClassifier() { NumIterations = 10 }\r\n            };\r\n\r\n            // 1d. Get a model by training the pipeline that was built.\r\n            PredictionModel<SentimentData, SentimentPrediction> model = pipeline.Train<SentimentData, SentimentPrediction>();\r\n\r\n            // 2. Evaluate the model to see how well it performs on different data (output the percent of examples classified correctly).\r\n            Console.WriteLine(\"Training of model is complete \\nTesting the model with test data\");\r\n            var testData = new TextLoader(@\"Data\\wikipedia-detox-250-line-test.tsv\").CreateFrom<SentimentData>(useHeader: true);\r\n            var evaluator = new BinaryClassificationEvaluator();\r\n            BinaryClassificationMetrics metrics = evaluator.Evaluate(model, testData);\r\n            Console.WriteLine($\"Accuracy of trained model for test data is: {metrics.Accuracy:P2}\");\r\n\r\n            // 3. Save the model to file so it can be used in another app.\r\n            model.WriteAsync(\"sentiment_model.zip\");\r\n\r\n            // 4. Use the model for a single prediction.\r\n            SentimentData testInput = new SentimentData { SentimentText = \"ML.NET is fun, more samples at https://github.com/dotnet/machinelearning-samples\" };\r\n            var sentiment = model.Predict(testInput).Sentiment ? \"Positive\" : \"Negative\";\r\n\r\n            /* This template uses a minimal dataset to build a sentiment analysis model which leads to relatively low accuracy. \r\n             * Building good Machine Learning models require large volumes of data. This template comes with a minimal dataset (Data/wikipedia-detox) for sentiment analysis. \r\n             * In order to build a sentiment analysis model with higher accuracy please follow the walkthrough at https://aka.ms/mlnetsentimentanalysis*/\r\n            Console.WriteLine($\"Predicted sentiment for \\\"{testInput.SentimentText}\\\" is: {sentiment}\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Input class that tells ML.NET how to read the dataset (which columns are included)\r\n        /// </summary>\r\n        public class SentimentData\r\n        {\r\n            [Column(ordinal: \"0\", name: \"Label\")]\r\n            public float Sentiment;\r\n            [Column(ordinal: \"1\")]\r\n            public string SentimentText;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Output class for the prediction, in this case including only the predicted sentiment.\r\n        /// </summary>\r\n        public class SentimentPrediction\r\n        {\r\n            [ColumnName(\"PredictedLabel\")]\r\n            public bool Sentiment;\r\n        }\r\n    }\r\n}\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1062","RelatedDescription":"Closed issue \"0.6: Legacy Entry point Transforms.TextFeaturizer not found\" (#1062)"},{"Id":"364244442","IsPullRequest":true,"CreatedAt":"2018-09-26T22:59:48","Actor":"zeahmed","Number":"1063","RawContent":null,"Title":"Making TensorFlowTransform trainable.","State":"open","Body":"This PR addressed #951 where user can retrain TensorFlow models using TensorFlowTransform in ML.Net.\r\n\r\nThe implemented training functionality is an add-on feature on top of current implementation of TensorFlowTransform where model scoring using TensorFlowTransform is untouched.\r\n\r\nCurrent implementation includes\r\n- Retraining of un-frozen model (saved with simple_save method in python).\r\n- Support for batch training\r\n- Serializing retrained model into ML.Net stream\r\n\r\n#### ToDo\r\n- [SOLVED] ~~Serializing retrained model into ML.Net stream. <b>It seems like a big challenge right now because TensorFlow C-API does not support serialization of `TFSession` objects which contains all the retrained parameter.</b>~~\r\n- Turn TensorFlowEstimator from TrivialEstimator to NonTrivialEstimator. This is because TensorFlowTransform now trains model in one of the constructor call where `TrainingArguments` are passed (Will be done as separate PR).\r\n- Think about how we can get ride of data copying during creation of batches.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1063","RelatedDescription":"Open PR \"Making TensorFlowTransform trainable.\" (#1063)"},{"Id":"364241914","IsPullRequest":false,"CreatedAt":"2018-09-26T22:48:10","Actor":"Zruty0","Number":"1061","RawContent":null,"Title":"Our linear models are unbiased (at least in public)","State":"open","Body":"You can extract weights out of the `MulticlassLogisticRegressionPredictor` now:\r\n\r\n```c#\r\nMulticlassLogisticRegressionPredictor predictor;\r\nVBuffer<float>[] weights = null;\r\npredictor.GetWeights(ref weights, out int numClasses);\r\n```\r\n\r\nThere is no way to extract `_biases` out of the predictor though.  And we should have a way.\r\nThere's an `internal` method that accessed biases, but no `public` method to do so.","Url":"https://github.com/dotnet/machinelearning/issues/1061","RelatedDescription":"Open issue \"Our linear models are unbiased (at least in public)\" (#1061)"},{"Id":"364239221","IsPullRequest":false,"CreatedAt":"2018-09-26T22:36:04","Actor":"zeahmed","Number":"1060","RawContent":null,"Title":"TensorFlowTransform does not work on Scalar column...","State":"open","Body":"The following line throws exception when using with scalar columns (non-pigsty case).\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/759ac33ef064c75cb977bfd6e6081186b295c6f5/src/Microsoft.ML.TensorFlow/TensorflowTransform.cs#L419\r\n\r\n[I will add a concrete example here.]","Url":"https://github.com/dotnet/machinelearning/issues/1060","RelatedDescription":"Open issue \"TensorFlowTransform does not work on Scalar column...\" (#1060)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-28T05:30:37.5942338Z","RunDurationInMilliseconds":1035}