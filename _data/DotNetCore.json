{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7187465066","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:28:32","Actor":"mairaw","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16170","RelatedDescription":"Opened pull request \"update cla link\" (#16170) at dotnet/coreclr","RelatedBody":""},{"Id":"7187079714","Type":"PullRequestEvent","CreatedAt":"2018-02-02T02:48:35","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16130","RelatedDescription":"Merged pull request \"Add New EventPipe Tests\" (#16130) at dotnet/coreclr","RelatedBody":"Adds two new tests that validate EventPipe output.  The goal of this PR is to attempt to flush out any intermittency issues with respect to test execution.  Thus, I will also be running JIT stress.\r\n\r\nThis PR also contains a change to the existing Assert functions for tracing tests to improve diagnosis of failures."},{"Id":"7187037238","Type":"PullRequestEvent","CreatedAt":"2018-02-02T02:33:06","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16169","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26202-01 (master)\" (#16169) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7186935568","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:56:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16161","RelatedDescription":"Merged pull request \"Revert \"Disable some test cases to workaround compiler bug\"\" (#16161) at dotnet/coreclr","RelatedBody":"This reverts commit a0033795f551053cb199d85c77926f0840f5b583.\r\n\r\nFixes #12233"},{"Id":"7186935561","Type":"IssuesEvent","CreatedAt":"2018-02-02T01:56:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12233","RelatedDescription":"Closed issue \"JIT isinst tests hitting bug in compiler\" (#12233) at dotnet/coreclr","RelatedBody":"In order to unblock some other scenarios (https://github.com/dotnet/coreclr/pull/12175/) we needed to comment out some JIT tests because they were hitting this compiler https://github.com/dotnet/roslyn/issues/14785. Once we update the compiler to the latest version with the fix then these test should be re-enabled."},{"Id":"7186930043","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:54:48","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16168","RelatedDescription":"Merged pull request \"Fix detection of YMM registers presence\" (#16168) at dotnet/coreclr","RelatedBody":"It was found that we incorrectly try to restore YMM registers in RtlRestoreContext\r\nwhen the processor supports xstate, but doesn't have YMM registers. This change\r\nfixes that by testing the YMM presence flag too.\r\n\r\nCloses #16052 "},{"Id":"7186930039","Type":"IssuesEvent","CreatedAt":"2018-02-02T01:54:48","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16052","RelatedDescription":"Closed issue \"Illegal Instruction segfault in libcoreclr.so on CPU without AVX\" (#16052) at dotnet/coreclr","RelatedBody":"I have not found any requirements about the CPU so I assume that this is a bug.\r\n\r\nI have an ASP .NET Core 2 application running on an PC with an Intel N3450 CPU that does not support AVX. The application seems to work fine but crashes when a view containing the following HTML fragment is displayed.\r\n```html\r\n<p class=\"field control has-icon\">\r\n    <input class=\"input\" asp-for=\"Username\" placeholder=\"Benutzername\" >\r\n    <span class=\"icon is-small\"><i class=\"fa fa-user\"></i></span>\r\n    <span asp-validation-for=\"Username\" class=\"help is-danger\"></span>\r\n</p>\r\n```\r\nWhen that part (and the other inputs) are removed from the view, then it can be displayed.\r\n\r\nAttaching Visual Studio to the process I was able to obtain the following disassembly where it complained about an illegal `vinsertf128` instruction. This page http://www.felixcloutier.com/x86/VINSERTF128.html tells me that it is an AVX instruction.\r\n\r\n```asm\r\n0x00007efdbafca90e  je     0x7efdbafca9b4\r\n0x00007efdbafca914  vinsertf128 $0x1,0x300(%rdi),%ymm0,%ymm0 <--- Illegal Instruction\r\n0x00007efdbafca91e  vinsertf128 $0x1,0x310(%rdi),%ymm1,%ymm1\r\n0x00007efdbafca928  vinsertf128 $0x1,0x320(%rdi),%ymm2,%ymm2\r\n0x00007efdbafca932  vinsertf128 $0x1,0x330(%rdi),%ymm3,%ymm3\r\n0x00007efdbafca93c  vinsertf128 $0x1,0x340(%rdi),%ymm4,%ymm4\r\n0x00007efdbafca946  vinsertf128 $0x1,0x350(%rdi),%ymm5,%ymm5\r\n0x00007efdbafca950  vinsertf128 $0x1,0x360(%rdi),%ymm6,%ymm6\r\n0x00007efdbafca95a  vinsertf128 $0x1,0x370(%rdi),%ymm7,%ymm7\r\n0x00007efdbafca964  vinsertf128 $0x1,0x380(%rdi),%ymm8,%ymm8\r\n0x00007efdbafca96e  vinsertf128 $0x1,0x390(%rdi),%ymm9,%ymm9\r\n0x00007efdbafca978  vinsertf128 $0x1,0x3a0(%rdi),%ymm10,%ymm10\r\n0x00007efdbafca982  vinsertf128 $0x1,0x3b0(%rdi),%ymm11,%ymm11\r\n0x00007efdbafca98c  vinsertf128 $0x1,0x3c0(%rdi),%ymm12,%ymm12\r\n0x00007efdbafca996  vinsertf128 $0x1,0x3d0(%rdi),%ymm13,%ymm13\r\n0x00007efdbafca9a0  vinsertf128 $0x1,0x3e0(%rdi),%ymm14,%ymm14\r\n0x00007efdbafca9aa  vinsertf128 $0x1,0x3f0(%rdi),%ymm15,%ymm15\r\n0x00007efdbafca9b4  testb  $0x1,0x30(%rdi)\r\n```\r\nThis looks to be the following code fragment: https://github.com/dotnet/coreclr/blob/master/src/pal/src/arch/amd64/context2.S#L144\r\n\r\nError from dmesg: `[65504.474506] traps: dotnet[7146] trap invalid opcode ip:7fec90c76914 sp:7fec76ff6af0 error:0`\r\n\r\nIs this really a bug or it is currently expected that CPUs without AVX will cause problems? Can I compile the coreclr myself to work around the issue until there is a fix? I'm happy to provide more information if needed.\r\n\r\n### dotnet --info\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : fdf361624c1087ec874615382781754392e69118\r\n```\r\n\r\n### /proc/cpuinfo\r\n```\r\nprocessor\t: 0\r\nvendor_id\t: GenuineIntel\r\ncpu family\t: 6\r\nmodel\t\t: 92\r\nmodel name\t: Intel(R) Celeron(R) CPU N3450 @ 1.10GHz\r\nstepping\t: 9\r\nmicrocode\t: 0x18\r\ncpu MHz\t\t: 799.957\r\ncache size\t: 1024 KB\r\nphysical id\t: 0\r\nsiblings\t: 4\r\ncore id\t\t: 0\r\ncpu cores\t: 4\r\napicid\t\t: 0\r\ninitial apicid\t: 0\r\nfpu\t\t: yes\r\nfpu_exception\t: yes\r\ncpuid level\t: 21\r\nwp\t\t: yes\r\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 ds_cpl vmx est tm2 ssse3 sdbg cx16 xtpr pdcm sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave rdrand lahf_lm 3dnowprefetch intel_pt kaiser tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust smep erms mpx rdseed smap clflushopt sha_ni xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts\r\nbugs\t\t:\r\nbogomips\t: 2188.80\r\nclflush size\t: 64\r\ncache_alignment\t: 64\r\naddress sizes\t: 39 bits physical, 48 bits virtual\r\npower management:\r\n```\r\n"},{"Id":"7186728523","Type":"PullRequestEvent","CreatedAt":"2018-02-02T00:45:04","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16092","RelatedDescription":"Merged pull request \"Refactor RefPosition and Interval Building\" (#16092) at dotnet/coreclr","RelatedBody":"Move code for building `RefPosition`s and `Interval`s out of lsra.cpp into lsrabuild.cpp. Also, move common code from lsraarm*.cpp and lsraxarch.cpp to lsrabuild.cpp.\r\n\r\nMaintain the `ListNodePool` on the `LinearScan` object to be used by all the building methods.\r\n\r\nRename `TreeNodeInfoInit` methods to `Build`, to more accurately reflect the next round of changes where they will build the `RefPosition`s directly."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7187370663","Type":"IssuesEvent","CreatedAt":"2018-02-02T04:46:28","Actor":"giridharprakash","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8523","RelatedDescription":"Opened issue \"dotnet SomeAssembly.dll not loading appsettings.json\" (#8523) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ncreate new dotnet core web api project\r\nGet some configuration from appsettings.json in Startup.cs like eg connection string\r\ndotnet publish -c Release\r\nNow go to publish directory and run dotnet Assembly.dll\r\n\r\n## Expected  behavior\r\nWhile debugging in visual studio everything working fine\r\nbut when i run from command line then it's not loading appsettings.json\r\n\r\n## Actual behavior\r\nIn startup.cs connection string is coming as null\r\nvar connectionString = Configuration[\"AppSettings:ConnectionString\"];\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n dotnet --info\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7187255351","Type":"IssuesEvent","CreatedAt":"2018-02-02T03:55:54","Actor":"BroadSight","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8522","RelatedDescription":"Opened issue \"Poor error message on version mis-match\" (#8522) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nHave an asp.net core MVC project with a reference to `Microsoft.DotNet.Watcher.Tools` version 1.0.0.\r\n\r\nRun `dotnet watch run` on a Linux system.\r\n\r\n## Expected  behavior\r\n\r\nThe development server starts and recompiles on source file change.\r\n\r\n## Actual behavior\r\n\r\nThe following message is given:\r\n\r\n```\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '1.0.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /\r\n  - Alternatively, install the framework version '1.0.0'.\r\n```\r\n\r\nThis message says `Microsoft.NETCore.App` when it was really `Microsoft.DotNet.Watcher.Tools` that was the wrong version. Updating the version of `Microsoft.DotNet.Watcher.Tools` to 2.0.0 allows it to run correctly.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7187131840","Type":"IssuesEvent","CreatedAt":"2018-02-02T03:07:56","Actor":"BroadSight","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8521","RelatedDescription":"Opened issue \"Extensibility Tool search path different between Windows and Linux/OSX systems\" (#8521) at dotnet/cli","RelatedBody":"## Backstory\r\n\r\nI was aiming to write a quality of life script to help with the development of a particular project. This script (or rather the pair of scripts) would be included in the project's repository. Basically, I want a per-project based extensibility tool but in script format instead of NuGet package.\r\n\r\n## Steps to reproduce\r\n\r\n1. Write a pair of scripts `dotnet-hello.cmd` and `dotnet-hello` (contents below) and save them in the root of a project.\r\n\r\n```cmd\r\necho \"Hello World\"\r\n```\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\necho \"Hello World\"\r\n```\r\n\r\n2. Run `dotnet hello` in the project folder in on a Windows system and Linux/OSX system.\r\n\r\n## Expected  behavior\r\n\r\n`Hello World` should print in both systems\r\n\r\n## Actual behavior\r\n\r\n`Hello World` only prints on a Windows system\r\n\r\nA Linux/OSX system says `No executable found matching command \"dotnet-hello\"`\r\n\r\nThe Linux/OSX systems do not look in the CWD for extensibility tools while the Windows system does.\r\n\r\n## Environment data\r\n\r\nWindows `dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nLinux `dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n"},{"Id":"7187130605","Type":"IssuesEvent","CreatedAt":"2018-02-02T03:07:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8511","RelatedDescription":"Closed issue \"Update the first run message for the installation of the ASP.NET Core HTTPS development certificate\" (#8511) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall the CLI\r\nRun a command like dotnet new console\r\n\r\n## Expected  behavior\r\nAn up to date message with instructions on how to trust the ASP.NET Core HTTPS development certificate gets displayed.\r\n\r\n## Actual behavior\r\nAn out of date message is displayed.\r\n"},{"Id":"7187130239","Type":"PullRequestEvent","CreatedAt":"2018-02-02T03:07:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8512","RelatedDescription":"Merged pull request \"Update ASP.NET Core certificate installation message\" (#8512) at dotnet/cli","RelatedBody":"# Customer scenario\r\n\r\nFirst run reporting an out of date informational message for the ASP.NET Core developer certificate installation.\r\n\r\n# Bugs this fixes:\r\n\r\n#8511\r\n\r\n# Workarounds, if any\r\n\r\nNone\r\n\r\n# Risk\r\n\r\nLow\r\n\r\n# Performance impact\r\n\r\nNone, we are changing the content of a message that already comes from a resource file.\r\n\r\n# Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n# Root cause analysis:\r\n\r\nWe didn't have the final text that we wanted displayed to the users at the time the feature got in."},{"Id":"7186382526","Type":"PullRequestEvent","CreatedAt":"2018-02-01T22:59:17","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8520","RelatedDescription":"Opened pull request \"MSBuild 15.6.76\" (#8520) at dotnet/cli","RelatedBody":"This contains 4 fixes approved for 15.6 escrow.\r\n\r\nPR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/104554\r\n\r\nNote: Val build is not done so this will likely not go in officially until tonight depending on how long that takes.\r\n\r\nFixes:\r\nhttps://github.com/Microsoft/msbuild/pull/2913\r\nhttps://github.com/Microsoft/msbuild/pull/2925\r\nhttps://github.com/Microsoft/msbuild/pull/2935\r\nhttps://github.com/Microsoft/msbuild/pull/2931\r\n"},{"Id":"7181965282","Type":"PullRequestEvent","CreatedAt":"2018-02-01T08:00:52","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8519","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#8519) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180201-080051\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180201-080051 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7171898026","Type":"IssuesEvent","CreatedAt":"2018-01-30T15:18:32","Actor":"ditux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/637","RelatedDescription":"Closed issue \"ProjectInSolution class is not recognised in .Net Standard 2.0\" (#637) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am writing a c# automation application that requires \"ProjectInSolution\" class which i understand is only available on the .NET Framework. I am targeting the .NET Standard 2.0 and would like to know if there is an alternative?\r\n\r\nThanks"},{"Id":"7171668708","Type":"IssuesEvent","CreatedAt":"2018-01-30T14:40:23","Actor":"ditux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/637","RelatedDescription":"Opened issue \"ProjectInSolution class is not recognised in .Net Standard 2.0\" (#637) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am writing a c# automation application that requires \"ProjectInSolution\" class which i understand is only available on the .NET Framework. I am targeting the .NET Standard 2.0 and would like to know if there is an alternative?\r\n\r\nThanks"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7187307395","Type":"IssuesEvent","CreatedAt":"2018-02-02T04:18:26","Actor":"onyxmaster","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26335","RelatedDescription":"Closed issue \"The HttpClient.SendAsync throws WebException instead of wrapping it with HttpRequestException\" (#26335) at dotnet/corefx","RelatedBody":"The 4.6.1 framework version did not do this.\r\nWhen moving to .NET Standard 2.0 + .NET Framework 4.7.1, the same exception is no longer wrapped into an HttpRequestException (while the docs still state that it should).\r\nThis breaks robustness wrappers and retry mechanisms built around the HttpClient.SendAsync.\r\nConsider the following stacktrace (processed with the [AsyncFriendlyStackTrace](https://github.com/aelij/AsyncFriendlyStackTrace))\r\n```\r\nSystem.Net.WebException: The request was aborted: The request was canceled.\r\nSystem.Net.ConnectStream.BeginRead(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state)\r\nSystem.IO.Stream.<>c.<BeginEndReadAsync>b__43_0(Stream stream, ReadWriteParameters args, AsyncCallback callback, Object state)\r\nSystem.Threading.Tasks.TaskFactory`1.FromAsyncTrim[TInstance,TArgs](TInstance thisRef, TArgs args, Func`5 beginMethod, Func`3 endMethod)\r\nSystem.IO.Stream.BeginEndReadAsync(Byte[] buffer, Int32 offset, Int32 count)\r\nSystem.IO.Stream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\nasync System.IO.Stream.CopyToAsyncInternal(?)\r\nasync System.Net.Http.HttpContent.LoadIntoBufferAsyncCore(?)\r\nasync System.Net.Http.HttpClient.FinishSendAsyncBuffered(?)\r\nasync System.Net.Http.HttpClient.SendAsync(?)\r\n```"},{"Id":"7187122119","Type":"PullRequestEvent","CreatedAt":"2018-02-02T03:04:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26763","RelatedDescription":"Merged pull request \"Fix ManagedHandler env var / AppContext handling\" (#26763) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26466\r\ncc: @eerhardt, @wfurt, @geoffkizer "},{"Id":"7187122107","Type":"IssuesEvent","CreatedAt":"2018-02-02T03:04:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26466","RelatedDescription":"Closed issue \"Consolidate configuration for enabling ManagedHandler \" (#26466) at dotnet/corefx","RelatedBody":"This is part of  #23166 and primarily opened to address remaining concerns from #26403:\r\n\r\n- existing COMPlus_UseManagedHttpClientHandler is not compliant and shall use DOTNET_ prefix\r\n- configuration via AppContext should take precedence over environmental variable. Existing code would enable ManagedHandler if either one method is set to enable. \r\n\r\nThis possibly also opens option to retire environmental configurtion as it seems redundant to runtime configuration. \r\nWe can also updated tests as the context may be easier to manipulate\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7187419777","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:08:50","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24594","RelatedDescription":"Opened pull request \"Handle Do/While/Until loops in control flow graph\" (#24594) at dotnet/roslyn","RelatedBody":""},{"Id":"7187305485","Type":"PullRequestEvent","CreatedAt":"2018-02-02T04:17:34","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23949","RelatedDescription":"Merged pull request \"Improve diagnostic when decoding tuples but VT is missing\" (#23949) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nUse a type that implements an interface that involves named tuples, but don't reference the assembly which defines `ValueTuple` types. \r\nThe interface that involves named tuples will be substituted with an error type with no details. This results in confusing error, such as `error CS0648: '' is a type not supported by the language`\r\n\r\nBut in some cases, the compilation should not even fail (if the interface doesn't end-up being used). And in some cases it should fail, but with an error reporting the missing `ValueTuple` type.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/21727\r\n\r\n### Workarounds, if any\r\nAdd the missing reference. But the diagnostics don't offer much guidance...\r\n\r\n### Risk\r\n### Performance impact\r\nLow. When decoding tuple names fails, use the partially decoded type (which has errors) rather than making a blank error type.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nFairly edge case.\r\n\r\n### How was the bug found?\r\nReported by customer."},{"Id":"7187305476","Type":"IssuesEvent","CreatedAt":"2018-02-02T04:17:34","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21727","RelatedDescription":"Closed issue \"Incorrect diagnostic: error CS0648: '' is a type not supported by the language (tuple decoding issue)\" (#21727) at dotnet/roslyn","RelatedBody":"**Version Used**:\r\n\r\n- Visual Studio 15.3.2\r\n- Roslyn 2.3.2.62019 (b7354608)\r\n\r\n**Steps to Reproduce**:\r\n\r\n- Create a new solution with two *Class Library (.NET Framerwork)* projects ProjectA and ProjectB\r\n- Make sure the target framework of both projects is set to a .NET version prior to 4.7, the default v4.5.2 will do\r\n- Add the `System.ValueTuple` NuGet package to ProjectA\r\n- Reference ProjectA from ProjectB\r\n- Add the following class to ProjectA:\r\n\r\n```C#\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ProjectA\r\n{\r\n    public class ClassA : IEnumerable<(int foo, int bar)>\r\n    {\r\n        private readonly List<(int foo, int bar)> _values = new List<(int, int)>();\r\n\r\n        public void Add(int foo, int bar) => _values.Add((foo, bar));\r\n\r\n        public IEnumerator<(int foo, int bar)> GetEnumerator() => _values.GetEnumerator();\r\n        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\r\n    }\r\n}\r\n```\r\n\r\n- Add the following class to ProjectB:\r\n\r\n```C#\r\nusing ProjectA;\r\n\r\nnamespace ProjectB\r\n{\r\n    public class ClassB\r\n    {\r\n        public ClassB()\r\n        {\r\n            new ClassA { { 42, 10 } };\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n- Compile\r\n\r\n**Expected Behavior**:\r\n\r\nThe compilation of ProjectB should fail with an error message indicating that a reference to `System.ValueTuple` is required:\r\n\r\n> error CS0012: The type 'ValueTuple<,>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ValueTuple, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nAlternatively, the compilation could succeed, as we're *not* using the `GetEnumerator` function in ProjectB.\r\n\r\n**Actual Behavior**:\r\n\r\nThe compilation fails on the `new ClassA { { 42, 10 } };` statement with an unhelpful/incomplete error message:\r\n\r\n> error CS0648: '' is a type not supported by the language\r\n\r\nNot only [this error](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0648) looks like a bad fit for this situation, its *type* argument is missing, which makes it quite puzzling.\r\n"},{"Id":"7186794272","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:07:27","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24588","RelatedDescription":"Merged pull request \"set parent operation right away in non lazy IOperation implementation\" (#24588) at dotnet/roslyn","RelatedBody":"we have 2 implementation of IOperation. lazy and non-lazy one. we used to set Parent operation lazily in both case, but now we only set it lazily in lazy implementation. another implementation, we set it right away."},{"Id":"7186762449","Type":"PullRequestEvent","CreatedAt":"2018-02-02T00:56:46","Actor":"t-camaia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24593","RelatedDescription":"Opened pull request \"System.Runtime.CompilerServices.SkipLocalsInitAttribute recognized as…\" (#24593) at dotnet/roslyn","RelatedBody":"… a WellKnownType\r\n\r\nSystem_Runtime_CompilerServices_SkipLocalsInitAttribute entry was added to the WellKnownType enum, and its corresponding metadata name was added to the s_metadataNames array in WellKnownTypes class.\r\n\r\nThe implemented tests contemplate four possible scenarios:\r\n\r\n- SkipLocalsInitAttribute declared in source code: GetWellKnownType must return the requested type without further ado.\r\n\r\n- SkipLocalsInitAttribute declared in metadata: same as above.\r\n\r\n- SkipLocalsInitAttribute declared both in source code and in metadata: GetWellKnownType must return the one from source code.\r\n\r\n- SkipLocalsInitAttribute declared in metadata in two different assemblies: GetWellKnownType must return an error type symbol.\r\n\r\nThat's the expected behavior for types after C# 7."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7187319122","Type":"PullRequestEvent","CreatedAt":"2018-02-02T04:23:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5333","RelatedDescription":"Opened pull request \"Fix ProjectN build break\" (#5333) at dotnet/corert","RelatedBody":""},{"Id":"7187259234","Type":"PullRequestEvent","CreatedAt":"2018-02-02T03:57:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5332","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5332) at dotnet/corert","RelatedBody":""},{"Id":"7186986866","Type":"PullRequestEvent","CreatedAt":"2018-02-02T02:15:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5331","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5331) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7186903364","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:45:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5332","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5332) at dotnet/corert","RelatedBody":""},{"Id":"7186849606","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:26:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5330","RelatedDescription":"Closed pull request \"Merge nmirror to master\" (#5330) at dotnet/corert","RelatedBody":""},{"Id":"7186828498","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:19:25","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5331","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5331) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7186817927","Type":"PullRequestEvent","CreatedAt":"2018-02-02T01:15:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5323","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5323) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7186731470","Type":"PullRequestEvent","CreatedAt":"2018-02-02T00:46:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5330","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5330) at dotnet/corert","RelatedBody":""},{"Id":"7186684043","Type":"PullRequestEvent","CreatedAt":"2018-02-02T00:30:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5324","RelatedDescription":"Closed pull request \" Reduce Execution Context Save+Restore\" (#5324) at dotnet/corert","RelatedBody":"Update to https://github.com/dotnet/corert/pull/5323\r\n\r\nResolves: https://github.com/dotnet/corert/pull/5323\r\n\r\n/cc @jkotas "},{"Id":"7186679309","Type":"PullRequestEvent","CreatedAt":"2018-02-02T00:28:50","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5329","RelatedDescription":"Opened pull request \"[WIP] Enable CoreFX tests on CoreRT\" (#5329) at dotnet/corert","RelatedBody":"Dupe of #5287 - can't reopen the PR because of commit history. \r\nAddressed the comments on the last PR; Added Unix scripts.\r\n\r\nThe current blocker for is getting the CoreFX.Private.TestUtilities project published as a NuGet package.\r\nAdditionally - native assertions will cause the XUnit runner to crash - e.g. \r\n\r\nhttps://github.com/dotnet/corert/blob/3615b994ac4435bb77d865ef7ba2fd7ba8b09813/src/Native/Runtime/windows/CoffNativeCodeManager.cpp#L375\r\n\r\nwill be called when executing System.Runtime.Tests and freeze the executable until the user hits Ctrl-C. Do we need a way around errors like this? \r\n\r\n"},{"Id":"7186493818","Type":"PullRequestEvent","CreatedAt":"2018-02-01T23:30:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5328","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5328) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7186483208","Type":"PullRequestEvent","CreatedAt":"2018-02-01T23:27:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5328","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5328) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7186241581","Type":"PullRequestEvent","CreatedAt":"2018-02-01T22:24:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5327","RelatedDescription":"Merged pull request \"ajdust -> adjust\" (#5327) at dotnet/corert","RelatedBody":""},{"Id":"7186044169","Type":"PullRequestEvent","CreatedAt":"2018-02-01T21:41:42","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5327","RelatedDescription":"Opened pull request \"ajdust -> adjust\" (#5327) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7181965523","Type":"PullRequestEvent","CreatedAt":"2018-02-01T08:00:56","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1922","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1922) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180201-080054\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180201-080054 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7181965399","Type":"PullRequestEvent","CreatedAt":"2018-02-01T08:00:54","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1921","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1921) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180201-080053\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180201-080053 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7180436878","Type":"IssuesEvent","CreatedAt":"2018-01-31T23:17:24","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1116","RelatedDescription":"Reopened issue \"_ComputeLockFileReferences/RunResolvePackageDependencies should be faster when projects are up-to-date\" (#1116) at dotnet/sdk","RelatedBody":"Investigating up-to-date builds from ASP.NET, I've found that _ComputeLockFileReferences/RunResolvePackageDependencies is taking a non-trivial amount of time (> 17%) of the build time when a project is considered up-to-date.\r\n\r\n```\r\n109>        1 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n109>        1 ms  IncludeTransitiveProjectReferences         1 calls\r\n109>        1 ms  ExpandSDKReferences                        1 calls\r\n109>        1 ms  CoreCompile                                1 calls\r\n109>        2 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n109>        3 ms  _ComputeActiveTFMFileDependencies          1 calls\r\n109>        3 ms  CopyFilesToOutputDirectory                 1 calls\r\n109>        4 ms  ResolveLockFileReferences                  1 calls\r\n109>        7 ms  _ComputeActiveTFMPackageDependencies       1 calls\r\n109>       10 ms  _ComputeTFMOnlyFileDependencies            1 calls\r\n109>       15 ms  GetTargetFrameworkProperties              79 calls\r\n109>       19 ms  _GenerateCompileDependencyCache            1 calls\r\n109>       20 ms  _CopyFilesMarkedCopyLocal                  1 calls\r\n109>       25 ms  _ComputeTransitiveProjectReferences        1 calls\r\n109>       27 ms  AssignProjectConfiguration                 1 calls\r\n109>       27 ms  IncrementalClean                           1 calls\r\n109>       32 ms  _SplitProjectReferencesByFileExistence     1 calls\r\n109>       49 ms  GetCopyToOutputDirectoryItems              1 calls\r\n109>      122 ms  _CleanGetCurrentAndPriorFileWrites         1 calls\r\n109>      141 ms  ResolveProjectReferences                   1 calls\r\n109>      368 ms  RunResolvePackageDependencies              1 calls <-- This bug\r\n109>      912 ms  _ComputeLockFileReferences                 1 calls <-- This bug\r\n109>     1630 ms  ResolveAssemblyReferences                  1 calls\r\n109>     5970 ms  _GetProjectReferenceTargetFrameworkProperties  95 calls\r\n```\r\n\r\nWe should investigate ways of caching/making this faster."},{"Id":"7180432592","Type":"IssuesEvent","CreatedAt":"2018-01-31T23:16:11","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1116","RelatedDescription":"Closed issue \"_ComputeLockFileReferences/RunResolvePackageDependencies should be faster when projects are up-to-date\" (#1116) at dotnet/sdk","RelatedBody":"Investigating up-to-date builds from ASP.NET, I've found that _ComputeLockFileReferences/RunResolvePackageDependencies is taking a non-trivial amount of time (> 17%) of the build time when a project is considered up-to-date.\r\n\r\n```\r\n109>        1 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n109>        1 ms  IncludeTransitiveProjectReferences         1 calls\r\n109>        1 ms  ExpandSDKReferences                        1 calls\r\n109>        1 ms  CoreCompile                                1 calls\r\n109>        2 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n109>        3 ms  _ComputeActiveTFMFileDependencies          1 calls\r\n109>        3 ms  CopyFilesToOutputDirectory                 1 calls\r\n109>        4 ms  ResolveLockFileReferences                  1 calls\r\n109>        7 ms  _ComputeActiveTFMPackageDependencies       1 calls\r\n109>       10 ms  _ComputeTFMOnlyFileDependencies            1 calls\r\n109>       15 ms  GetTargetFrameworkProperties              79 calls\r\n109>       19 ms  _GenerateCompileDependencyCache            1 calls\r\n109>       20 ms  _CopyFilesMarkedCopyLocal                  1 calls\r\n109>       25 ms  _ComputeTransitiveProjectReferences        1 calls\r\n109>       27 ms  AssignProjectConfiguration                 1 calls\r\n109>       27 ms  IncrementalClean                           1 calls\r\n109>       32 ms  _SplitProjectReferencesByFileExistence     1 calls\r\n109>       49 ms  GetCopyToOutputDirectoryItems              1 calls\r\n109>      122 ms  _CleanGetCurrentAndPriorFileWrites         1 calls\r\n109>      141 ms  ResolveProjectReferences                   1 calls\r\n109>      368 ms  RunResolvePackageDependencies              1 calls <-- This bug\r\n109>      912 ms  _ComputeLockFileReferences                 1 calls <-- This bug\r\n109>     1630 ms  ResolveAssemblyReferences                  1 calls\r\n109>     5970 ms  _GetProjectReferenceTargetFrameworkProperties  95 calls\r\n```\r\n\r\nWe should investigate ways of caching/making this faster."},{"Id":"7180141026","Type":"IssuesEvent","CreatedAt":"2018-01-31T22:06:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1920","RelatedDescription":"Closed issue \"Package version\" (#1920) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/94a3f2856cb09e66ee7472820b4e26fb576b4686/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.DefaultAssemblyInfo.targets#L18-L22\r\n\r\nShouldn't it be:\r\n```\r\n <PropertyGroup Condition=\" '$(Version)' == '' \"> \r\n   <VersionPrefix Condition=\" '$(VersionPrefix)' == '' \">1.0.0</VersionPrefix> \r\n   <Version Condition=\" '$(VersionSuffix)' != '' \">$(VersionPrefix)-$(VersionSuffix)</Version>\r\n   <Version Condition=\" '$(VersionSuffix)' == '' \">$(VersionPrefix)</Version>\r\n </PropertyGroup> \r\n \r\n```\r\n\r\nor even:\r\n```\r\n <PropertyGroup>\r\n   <Version>1.0.0</Version> \r\n   <Version Condition=\" '$(VersionSuffix)' != '' \">$(Version)-$(VersionSuffix)</Version> \r\n </PropertyGroup> \r\n```"},{"Id":"7176389071","Type":"IssuesEvent","CreatedAt":"2018-01-31T09:52:54","Actor":"dbarwikowski","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1920","RelatedDescription":"Opened issue \"Package version\" (#1920) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/94a3f2856cb09e66ee7472820b4e26fb576b4686/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.DefaultAssemblyInfo.targets#L21\r\n\r\nShouldn't it be:\r\n```\r\n    <Version Condition=\" '$(VersionSuffix)' == '' \">$(VersionPrefix)</Version> \r\n```"},{"Id":"7175895356","Type":"PullRequestEvent","CreatedAt":"2018-01-31T08:00:49","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1919","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1919) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180131-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180131-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7175895271","Type":"PullRequestEvent","CreatedAt":"2018-01-31T08:00:47","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1918","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1918) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180131-080046\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180131-080046 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7174996457","Type":"IssuesEvent","CreatedAt":"2018-01-31T02:37:36","Actor":"yyjdelete","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1913","RelatedDescription":"Closed issue \"NU1605 by default treated as error instead of warning, breaks updating packages in solutions\" (#1913) at dotnet/sdk","RelatedBody":"See also https://github.com/NuGet/Home/issues/6141.\r\n\r\nAny attempt to try to update all PackageReference to the same version with NuGet will failed, and the any way is to edit .csproj directly."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":65,"FavoriteCount":21,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-02-02T05:30:20.3872675Z","RunDurationInMilliseconds":7997}