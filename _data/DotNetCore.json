{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2019 Security and Quality Rollup","PublishedOn":"2019-10-08T19:10:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the October 2019 Security and Quality Rollup and Cumulative Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":68,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":114,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10587763637","Type":"IssuesEvent","CreatedAt":"2019-10-08T23:14:12","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Opened issue \"Consolidated repo names\" (#127) at dotnet/announcements","RelatedBody":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions),\r\n\tand some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarify\r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarify\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096."},{"Id":"10587423911","Type":"IssuesEvent","CreatedAt":"2019-10-08T22:06:08","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Opened issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126) at dotnet/announcements","RelatedBody":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`"},{"Id":"10552065128","Type":"IssuesEvent","CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Opened issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125) at dotnet/announcements","RelatedBody":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n"},{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10588915655","Type":"PullRequestEvent","CreatedAt":"2019-10-09T03:58:05","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27100","RelatedDescription":"Opened pull request \"find src/jit -type f -exec sed -i -e 's/.*declspec.*isHfaArg.*//g' {} \\;\" (#27100) at dotnet/coreclr","RelatedBody":"@am11  @jkotas @janvorli @sandreenko "},{"Id":"10588627705","Type":"PullRequestEvent","CreatedAt":"2019-10-09T02:47:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27095","RelatedDescription":"Merged pull request \"Remove some unused code in binder\" (#27095) at dotnet/coreclr","RelatedBody":""},{"Id":"10588472410","Type":"PullRequestEvent","CreatedAt":"2019-10-09T02:09:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27099","RelatedDescription":"Opened pull request \"Ensure that GC suspension does not modify last error\" (#27099) at dotnet/coreclr","RelatedBody":"There are no known bugs that this is fixing. These fixes are based on codereview."},{"Id":"10588413110","Type":"IssuesEvent","CreatedAt":"2019-10-09T01:54:24","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27098","RelatedDescription":"Opened issue \"Test failed: GC\\LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.cmd\" (#27098) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-outerloop #20191008.1 Run Test Pri1 Windows_NT x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=381461)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/868a4360-6dc3-4ebd-b432-87b6a96fe7b0/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x64\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nGC\\LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\868a4360-6dc3-4ebd-b432-87b6a96fe7b0\\Work\\246a3912-c5e0-4477-b8bf-ccf70caaff41\\Exec\\GC\\LargeMemory\\Reports\\GC.LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\868a4360-6dc3-4ebd-b432-87b6a96fe7b0\\Payload\\corerun.exe\" largeexceptiontest.dll 2048 \r\n      Large Memory Machine required\r\n      Test failed\r\n      Expected: 100\r\n      Actual: 0\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```"},{"Id":"10588212422","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:02:22","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27097","RelatedDescription":"Opened pull request \"Replace lvArgReg with GetArgReg()\" (#27097) at dotnet/coreclr","RelatedBody":"@am11  @jkotas @janvorli @sandreenko "},{"Id":"10588013896","Type":"PullRequestEvent","CreatedAt":"2019-10-09T00:14:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27001","RelatedDescription":"Merged pull request \"cleanup: remove several redundant conditions found by cppcheck\" (#27001) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10589150087","Type":"PullRequestEvent","CreatedAt":"2019-10-09T05:00:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12851","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12851) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191008.20\r\n- **Date Produced**: 10/9/2019 4:10 AM\r\n- **Commit**: 84be18b1048236ad163d737b442a4ccf3b10d997\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19508.20\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"},{"Id":"10586879195","Type":"IssuesEvent","CreatedAt":"2019-10-08T20:43:43","Actor":"robborden","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12850","RelatedDescription":"Opened issue \"Compatibility errors between netcoreapp3.0 app and netstandard2.1 library when using MSBuild\" (#12850) at dotnet/cli","RelatedBody":"We have a dotnet codebase that contains a 4-5 dotnet core applications as well as around 20 dotnet standard libraries.  These are all separate projects in the same solution. The dotnet core app reference several of the dotnet standard libraries. We recently migrated everything to netcoreapp3.0 and netstandard2.1.  The other devs working on the project (one in windows, one on macos) are not having any issues.   I am trying to use MSBuild to build the application because that is what Rider uses when debugging.\r\n\r\nI have installed the sdks and `dotnet build` works.  I cannot run `msbuild`, because it produces errors.  I also cannot run `dotnet msbuild`, it also has the same errors.  These are an example of the errors:\r\n```\r\n\"error NU1201: Project MyDotnetStandard21Lib is not compatible with netcoreapp3.0 (.NETCoreApp,Version=v3.0). Project MyDotnetStandard21Lib supports: netstandard2.1 (.NETStandard,Version=v2.1)\"\r\n```\r\n\r\nWhen I run `msbuild`, I believe it is doing \r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /Library/Frameworks/Mono.framework/Versions/6.4.0/lib/mono/msbuild/Current/bin/MSBuild.dll\r\n```\r\n\r\nI'm not sure what `dotnet msbuild` runs.\r\n\r\n\r\nEDIT: I also tried to use the MSBuild from the dotnet core sdk like this:\r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /usr/local/share/dotnet/sdk/3.0.100/MSBuild.dll\r\n```\r\n\r\nbut I got a bunch of exceptions like these:\r\n```\r\n$msbuild\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"-m\" switch.\r\n\r\nUnhandled Exception:\r\nSystem.BadImageFormatException: Could not resolve field token 0x0400036b, due to: Could not load type of field 'Microsoft.Build.Execution.BuildManager:_workQueue' (33) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.6.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. assembly:/usr/local/share/dotnet/sdk/3.0.100/Microsoft.Build.dll type:BuildManager member:(null)\r\nFile name: 'Microsoft.Build'\r\n  at Microsoft.Build.CommandLine.MSBuildApp.BuildProject (System.String projectFile, System.String[] targets, System.String toolsVersion, System.Collections.Generic.Dictionary`2[TKey,TValue] globalProperties, System.Collections.Generic.Dictionary`2[TKey,TValue] restoreProperties, Microsoft.Build.Framework.ILogger[] loggers, Microsoft.Build.Framework.LoggerVerbosity verbosity, Microsoft.Build.CommandLine.DistributedLoggerRecord[] distributedLoggerRecords, System.Int32 cpuCount, System.Boolean enableNodeReuse, System.IO.TextWriter preprocessWriter, System.Boolean detailedSummary, System.Collections.Generic.ISet`1[T] warningsAsErrors, System.Collections.Generic.ISet`1[T] warningsAsMessages, System.Boolean enableRestore, Microsoft.Build.Logging.ProfilerLogger profilerLogger, System.Boolean enableProfiler, System.Boolean interactive, System.Boolean isolateProjects, System.Boolean graphBuild, System.String[] inputResultsCaches, System.String outputResultsCache) [0x005a0] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String[] commandLine) [0x00415] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Main (System.String[] args) [0x00029] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n```\r\n\r\nI'm trying to figure out what I'm doing wrong or how I should be running MSBuild for dotnetcore3.0 projects on MacOS.   Any help would be greatly appreciated!"},{"Id":"10586055086","Type":"IssuesEvent","CreatedAt":"2019-10-08T18:52:52","Actor":"voroninp","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12849","RelatedDescription":"Opened issue \"'dotnet publish' ignores file name casing.\" (#12849) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a project named with Pascal casing style and DO NOT set `<AssemblyName>` element explicitly.\r\nIn my case project's name is  `Luscii.Identity.Service.csproj`.\r\n\r\nThen call `dotnet publish Luscii.Identity.Service.csproj`\r\nYou'll end up with published application containing `Luscii.Identity.Service.dll` file.\r\n\r\nDelete `publish` folder !\r\n\r\nNow call `dotnet publish luscii.identity.service.csproj`\r\n\r\nYou'll end up with published application containing `luscii.identity.service.dll` file. lowercased!\r\n\r\nOn Linux you are going to have great fun because of that.\r\n\r\n\r\n## Expected  behavior\r\nI expect CLI to use the casing of the file, not the argument.\r\n\r\n## Actual behavior\r\nIt looks like CLI uses casing of the argument.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33"},{"Id":"10585586411","Type":"PullRequestEvent","CreatedAt":"2019-10-08T17:50:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12848","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12848) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.3\r\n- **Date Produced**: 10/8/2019 4:07 PM\r\n- **Commit**: 8d6a25d50e795a5425d0652f3e3031067a79516f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10588939571","Type":"IssuesEvent","CreatedAt":"2019-10-09T04:04:13","Actor":"2300070","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Opened issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598) at dotnet/standard","RelatedBody":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n"},{"Id":"10582817873","Type":"PullRequestEvent","CreatedAt":"2019-10-08T12:28:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1597) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10582709090","Type":"PullRequestEvent","CreatedAt":"2019-10-08T12:13:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1597) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10573652174","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1596) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10573576799","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:19:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1596) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10573521118","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1595) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10573450678","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:01:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1595) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10588989420","Type":"PullRequestEvent","CreatedAt":"2019-10-09T04:17:40","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/40692","RelatedDescription":"Closed pull request \"Remove direct reference from System.Runtime.WindowsRuntime to System.Private.CoreLib\" (#40692) at dotnet/corefx","RelatedBody":"Update System.Runtime.WindowsRuntime to not directly reference System.Private.CoreLib.\r\n\r\n- Move `Internal.Runtime.InteropServices.WindowsRuntime.ExceptionSupport` in S.P.CL to `System.Runtime.InteropServices.WindowsRuntime.ExceptionSupport` in S.R.WR\r\n- Expose `System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.GetUniqueObjectForIUnknownWithoutUnboxing(System.IntPtr)` and `System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, T)` from System.Runtime.InteropServices.WindowsRuntime facade assembly.\r\n- Expose `System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.ReportUnhandledError` from System.Runtime.InteropServices.WindowsRuntime facade assembly.\r\n- Redesign `System.Resources.WindowsRuntimeResourceManager` to be called from System.Private.CoreLib exclusively through reflection (see coreclr PR for more information)\r\n- Add local implementation of `Internal.Threading.Tasks.AsyncCausalitySupport` that calls the implementation in System.Private.CoreLib via reflection.\r\n- Expose `System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.ReportUnhandledError`.\r\n\r\ncc: @terrajobst for API review of the newly exposed APIs.\r\n\r\nDepends on dotnet/coreclr#26443"},{"Id":"10588895219","Type":"IssuesEvent","CreatedAt":"2019-10-09T03:52:32","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41633","RelatedDescription":"Closed issue \"Support for [JsonObject(MemberSerialization.OptIn)] attribute\" (#41633) at dotnet/corefx","RelatedBody":"Newtonsoft.Json supports a convenient way to serialize certain types of classes using attributes only, by specifying the [JsonObject(MemberSerialization.OptIn)] attribute on the class, and then picking the desired properties to serialize using the [JsonProperty] attribute on the. This does not seem to be supported yet?\r\n\r\nIs there a viable workaround other than writing custom converters for all those classes?"},{"Id":"10588712388","Type":"PullRequestEvent","CreatedAt":"2019-10-09T03:06:06","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41670","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corert\" (#41670) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"10588571312","Type":"IssuesEvent","CreatedAt":"2019-10-09T02:34:30","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41650","RelatedDescription":"Closed issue \"HTTP2: Drawbacks of setting HttpClient.Timeout = Timeout.InfiniteTimespan?\" (#41650) at dotnet/corefx","RelatedBody":"Query for HttpClient folks:\r\n\r\ngRPC can have long running streaming calls. A streaming call might not return any response for over 100 seconds, which then triggers a cancellation based on `HttpClient.Timeout`.\r\n\r\nI am considering setting `HttpClient.Timeout` to `Timeout.InfiniteTimespan` when the gRPC channel's internal HttpClient is created. What drawbacks to this that I should be aware of? Is this recommended?\r\n\r\nNote: gRPC has its own mechanism for timeouts called [deadlines](https://grpc.io/blog/deadlines/). Deadline is the standardized way of limiting the duration of unresponsive gRPC calls. I would like developers to only think about setting a deadline and not think about it AND `HttpClient.Timeout`. There is no deadline by default."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10589127114","Type":"IssuesEvent","CreatedAt":"2019-10-09T04:54:02","Actor":"Connect-a","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39149","RelatedDescription":"Opened issue \"Why 'await' causing compiler error when that in an interpolated string?\" (#39149) at dotnet/roslyn","RelatedBody":"The following code cannot be compiled:\r\n```C#\r\n        private static async Task Main()\r\n        {\r\n            // compiler error CS0103 : The name 'await' does not exist in the current context\r\n            var z = $\"{await (Task.FromResult(string.Empty))}\";\r\n\r\n            // allowed\r\n            var a = await Task.FromResult(string.Empty);\r\n            var b = await (Task.FromResult(string.Empty));\r\n            var c = $\"{await Task.FromResult(string.Empty)}\";\r\n\r\n            Console.ReadLine();\r\n        }\r\n```"},{"Id":"10588430763","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:59:01","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39034","RelatedDescription":"Merged pull request \"Pool analyzer diagnostic reporters\" (#39034) at dotnet/roslyn","RelatedBody":"This has shown up as a significant source of allocations. The design\r\nhere is that when an analyzer reports a diagnostic we may need to filter\r\nor alter it based on some configuration. Previously we stored the\r\nconfiguration information by closing over captured variables, but that\r\ncould be very expensive if it's being done for every analyzer\r\ninvocation. Since we can only really execute one analyzer per running\r\nthread on the machine, the actual number of concurrent objects we need\r\nto create is approximately the number of running threads. Pooling is a\r\ngood solution to this problem.\r\n\r\nBefore:\r\n```\r\n\r\n|                      Method |    Mean |   Error |  StdDev |  Median |     Min |     Max |       Gen 0 |      Gen 1 |     Gen 2 | Allocated |\r\n|---------------------------- |--------:|--------:|--------:|--------:|--------:|--------:|------------:|-----------:|----------:|----------:|\r\n| GetDiagnosticsWithAnalyzers | 16.28 s | 0.149 s | 0.268 s | 16.23 s | 15.76 s | 16.97 s | 200000.0000 | 59000.0000 | 2000.0000 |   1.48 GB |\r\n```\r\n\r\nAfter:\r\n```\r\n|                      Method |    Mean |   Error |  StdDev |  Median |     Min |     Max |       Gen 0 |      Gen 1 |     Gen 2 | Allocated |\r\n|---------------------------- |--------:|--------:|--------:|--------:|--------:|--------:|------------:|-----------:|----------:|----------:|\r\n| GetDiagnosticsWithAnalyzers | 15.77 s | 0.176 s | 0.519 s | 15.67 s | 14.96 s | 17.07 s | 184000.0000 | 55000.0000 | 2000.0000 |   1.36 GB |\r\n```\r\n\r\nNote: I don't think this is that much faster -- my machine wasn't completely quiet during the noise measurements, but I do believe that bytes allocated is accurate and a significant improvement."},{"Id":"10588011417","Type":"PullRequestEvent","CreatedAt":"2019-10-09T00:13:25","Actor":"tokarzkj","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39148","RelatedDescription":"Opened pull request \"Feature: Add wrap all elements for initializer expressions\" (#39148) at dotnet/roslyn","RelatedBody":"Users will now be offered wrapping refactor options similar to functions with multiple arguments and parameters. The following refactor options are available for initializer expressions:\r\n\r\n- Wrap every\r\n- Unwrap and indent\r\n- Wrap long list\r\n\r\nI added 3 unit tests to test:\r\n\r\n- Initializer that should offer no suggestion\r\n- Small initializer with a few values\r\n- Long initializer with 9 values\r\n\r\nThis implements the request from issue #37428"},{"Id":"10588003299","Type":"IssuesEvent","CreatedAt":"2019-10-09T00:11:23","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39147","RelatedDescription":"Opened issue \"ViewsOfAClassPublicFunctionsInC++C#VB\" (#39147) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/753971/viewsofaclasspublicfunctionsinccvb.html)._\n\n---\n<p></p><p>Hi there. This is just a suggestion to the Community and a request to engage with the Microsoft Development </p><p>Community. I am very keen to have your comments on this suggestion please. </p><p>My suggestion is to have a directive or tag along the lines of #region in C# in Visual Studio that groups sections of a class' public interface. </p> <p>Hence this could then be viewed in Intellisense when writing code. </p> <p>For example if you have a Car class that has different Drive functions </p><p>eg DriveFast, DriveSlow, DriveMedium and other public functions aswell. You could group the Drive functions under the Drive tag. Then in Intellisense in Visual Studio you </p><p>could drill down for example if you had a car variable aCar.</p> <p>It would appear in Inteliisense as acar. Drive.DriveSlow and when you selected the function </p><p>it would appear in code as acar. DriveSlow. </p><p>This could be optional with functions appearing under their categories in Intellisense if they were tagged, </p><p>or not if they weren't. </p> <p>So this would be a view of a class' public functions rather like a View of a database. </p> <p>This could help in documentation, understanding, and writing code in Visual Studio and maybe lessen </p><p>the need to have Interfaces.</p>\n\n---\n### Original Comments\n\n#### Fiona Niu[MSFT] on 9/30/2019, 00:11 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n\n#### Taher Hassan on 10/1/2019, 04:18 AM: \n\n<p>Hi Fiona,</p><p>Many thanks - that's excellent. I look forward to hearing what you think.</p><p>Many thanks and best regards, Taher Hassan</p>\n"},{"Id":"10587980375","Type":"IssuesEvent","CreatedAt":"2019-10-09T00:05:45","Actor":"kendrahavens","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39146","RelatedDescription":"Opened issue \"Object creation can be simplified suggestion should be more clever\" (#39146) at dotnet/roslyn","RelatedBody":"[Original Developer Community feedback ](https://developercommunity.visualstudio.com/content/idea/754229/object-creation-can-be-simplified-suggestion-shoul.html)copied to preserve code format.\r\n\r\nAfter applying object creation can be simplified refactoring suggestion, I moved some method calling code below so that more object.field/property = … could be grouped with the creation code block, however it seems I don’t get a newer suggestion to also place them in the simplified object creation block it created before\r\n\r\n```csharp\r\nMailMessage emailmessage = new MailMessage\r\n        {\r\n            SubjectEncoding = encoding, //...using Greek (ISO) encoding instead of UTF8 or other Unicode one, since mail clients at old XP machines usually can't show Unicode\r\n            BodyEncoding = encoding,\r\n\r\n            From = new MailAddress(EMAIL_FROM, EMAIL_FROM_NAME)\r\n        };\r\n\r\n        //*** moved code from this position (see *** below) that made the following 3 assignments not get refactored was here (however don't get new tip to refactor those 3 too inside the object creation block above, even though they all are of the form objectname.field/property = ...\r\n\r\n         emailmessage.Subject = subject;\r\n\r\n        // Plain text emails can't display images, so change body to HTML type\r\n        emailmessage.IsBodyHtml = true;\r\n\r\n        // public construct the alternate body as HTML \r\n        emailmessage.Body = EMAIL_HEADER + body + EMAIL_FOOTER;\r\n\r\n       //*** moved code is here now...\r\n\r\n        emailmessage.To.Add(toEmailAddress.Replace(';', ','));\r\n\r\n        if (!string.IsNullOrEmpty(ccEmailAddress))\r\n            emailmessage.CC.Add(ccEmailAddress.Replace(';', ','));\r\n\r\n        if (!string.IsNullOrEmpty(bccEmailAddress))\r\n            emailmessage.Bcc.Add(bccEmailAddress.Replace(';', ','));\r\n```"},{"Id":"10587968089","Type":"PullRequestEvent","CreatedAt":"2019-10-09T00:02:56","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39145","RelatedDescription":"Opened pull request \"Merge master to features/static-lambdas\" (#39145) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10587967132","Type":"PullRequestEvent","CreatedAt":"2019-10-09T00:02:43","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39144","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#39144) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10588290498","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:22:40","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7820) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10588267846","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:16:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7819) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux"},{"Id":"10587844333","Type":"PullRequestEvent","CreatedAt":"2019-10-08T23:32:55","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7819) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10585123655","Type":"PullRequestEvent","CreatedAt":"2019-10-08T16:48:09","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Opened pull request \"Fix exit code of build-native.sh\" (#7818) at dotnet/corert","RelatedBody":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive)."},{"Id":"10579340252","Type":"IssuesEvent","CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Opened issue \"Call generated dll from cpp crash\" (#7817) at dotnet/corert","RelatedBody":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10587375424","Type":"IssuesEvent","CreatedAt":"2019-10-08T21:57:48","Actor":"ds1709","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3730","RelatedDescription":"Opened issue \"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists\" (#3730) at dotnet/sdk","RelatedBody":"**Summary**:\r\nWe need to specify `CustomTool` attribute for resx files. Generally it's `ResXFileCodeGenerator`. If `CustomTool` not specified, then code generator is not working. Offer to make `ResXFileCodeGenerator` as default custom tool for resx files, whict has paired Designer.cs file (e.g. the most common Propertiest\\Resources.resx and Properties\\Resources.Designer.cs)."},{"Id":"10587195044","Type":"IssuesEvent","CreatedAt":"2019-10-08T21:28:47","Actor":"davidmatson","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3729","RelatedDescription":"Opened issue \"Process.Start on exe via ProjectReference no longer works in .NET Core\" (#3729) at dotnet/sdk","RelatedBody":"**Visual Studio Version**:\r\n16.2.5\r\n\r\n**Summary**:\r\nHaving a ProjectReference to an .exe was sufficient to have Process.Start work in .NET Framework (both old- and new-style csprojs). With .NET Core, it fails (with both SelfContained=true and false and with or without running Publish first).\r\n\r\n**Steps to Reproduce**:\r\n1. Create an exe project in a new solution.\r\n2. Create a second exe project in the same solution.\r\n3. Add a ProjectReference from the first project to the second project.\r\n4. Have the first project call Process.Start on the second project's exe.\r\n\r\n**Expected Behavior**:\r\nThe process runs successfully.\r\n\r\n**Actual Behavior**:\r\nProcess.Start fails with:\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet'.\r\n```\r\n\r\nor (if SelfContained=true):\r\n```\r\nCould not resolve CoreCLR path. For more details, enable tracing by setting COREHOST_TRACE environment variable to 1\r\n```\r\n\r\nor (after Publish):\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception: The system cannot find the file specified\r\n```\r\n\r\n**User Impact**:\r\nWe heavily use the pattern of a long-running exe (for a container service) calling short-lived exes to do work. Ctrl+F5 used to work in .NET Framework; it doesn't in .NET Core.\r\n\r\nNote also some odd behavior with SelfContained=false - NuGet package dependencies of the child project do not get placed in the bin directory of the referencing project (prior to Publish; they do after).\r\n\r\nSee the attached zip for repro projects for full .NET Framework with a traditional csproj, full .NET Framework with a new-style (Common Project System) csproj, and .NET Core.\r\n[repro.zip](https://github.com/dotnet/project-system/files/3703783/repro.zip)"},{"Id":"10587112272","Type":"IssuesEvent","CreatedAt":"2019-10-08T21:16:17","Actor":"Codex-","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Closed issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725) at dotnet/sdk","RelatedBody":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"504397488","IsPullRequest":true,"CreatedAt":"2019-10-09T03:58:05","Actor":"franksinankaya","Number":"27100","RawContent":null,"Title":"Replace isHfaArg with IsHfaArg()","State":"open","Body":"@am11  @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27100","RelatedDescription":"Open PR \"Replace isHfaArg with IsHfaArg()\" (#27100)"},{"Id":"504324540","IsPullRequest":true,"CreatedAt":"2019-10-09T02:47:44","Actor":"elinor-fung","Number":"27095","RawContent":null,"Title":"Remove some unused code in binder","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27095","RelatedDescription":"Closed or merged PR \"Remove some unused code in binder\" (#27095)"},{"Id":"504368440","IsPullRequest":true,"CreatedAt":"2019-10-09T02:09:29","Actor":"jkotas","Number":"27099","RawContent":null,"Title":"Ensure that GC suspension does not modify last error","State":"open","Body":"There are no known bugs that this is fixing. These fixes are based on codereview.","Url":"https://github.com/dotnet/coreclr/pull/27099","RelatedDescription":"Open PR \"Ensure that GC suspension does not modify last error\" (#27099)"},{"Id":"504364731","IsPullRequest":false,"CreatedAt":"2019-10-09T01:54:24","Actor":"VincentBu","Number":"27098","RawContent":null,"Title":"Test failed: GC\\LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.cmd","State":"open","Body":"**Job:**\r\n[coreclr-outerloop #20191008.1 Run Test Pri1 Windows_NT x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=381461)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/868a4360-6dc3-4ebd-b432-87b6a96fe7b0/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x64\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nGC\\LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\868a4360-6dc3-4ebd-b432-87b6a96fe7b0\\Work\\246a3912-c5e0-4477-b8bf-ccf70caaff41\\Exec\\GC\\LargeMemory\\Reports\\GC.LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\868a4360-6dc3-4ebd-b432-87b6a96fe7b0\\Payload\\corerun.exe\" largeexceptiontest.dll 2048 \r\n      Large Memory Machine required\r\n      Test failed\r\n      Expected: 100\r\n      Actual: 0\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27098","RelatedDescription":"Open issue \"Test failed: GC\\LargeMemory\\Allocation\\largeexceptiontest\\largeexceptiontest.cmd\" (#27098)"},{"Id":"504352542","IsPullRequest":true,"CreatedAt":"2019-10-09T01:02:21","Actor":"franksinankaya","Number":"27097","RawContent":null,"Title":"Replace lvArgReg with GetArgReg()","State":"open","Body":"@am11  @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27097","RelatedDescription":"Open PR \"Replace lvArgReg with GetArgReg()\" (#27097)"},{"Id":"504207146","IsPullRequest":true,"CreatedAt":"2019-10-08T23:23:07","Actor":"CoffeeFlux","Number":"27090","RawContent":null,"Title":"Replace InternalLoadUnmanagedDllFromPath with NativeLibrary.Load","State":"closed","Body":"Both just call into NDirect::LoadLibraryFromPath, so this simplifies the code by removing a superfluous QCall and clarifies potential interoperability concerns between AssemblyLoadContext.LoadUnmanagedDllFromPath and NativeLibrary.Load.\r\n\r\nThis will break Mono and presumably CoreRT, but it should be an easy fix in both cases (I'll deal with Mono).\r\n\r\nAdditionally, I think the docs pages need to be updated, as it lists different possible exceptions for AssemblyLoadContext.LoadUnmanagedDllFromPath and NativeLibrary.Load despite them both calling into NDirect::LoadLibraryFromPath. The checks for ArgumentException in LoadUnmanagedDllFromPath are in managed so it makes sense that's different, but the exceptions thrown by the runtime seem like they should be the same even before this PR. I assume NativeLibrary is the accurate one due to being newer, but if someone can clarify that for me I'm happy to PR the API docs repo with the appropriate changes.\r\n\r\ncc: @swaroop-sridhar @lambdageek ","Url":"https://github.com/dotnet/coreclr/pull/27090","RelatedDescription":"Closed or merged PR \"Replace InternalLoadUnmanagedDllFromPath with NativeLibrary.Load\" (#27090)"},{"Id":"504324931","IsPullRequest":false,"CreatedAt":"2019-10-08T23:11:49","Actor":"terrajobst","Number":"27096","RawContent":null,"Title":"Announcement: Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/coreclr/issues/26175\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity\r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!","Url":"https://github.com/dotnet/coreclr/issues/27096","RelatedDescription":"Open issue \"Announcement: Consolidated repo names\" (#27096)"},{"Id":"504015515","IsPullRequest":true,"CreatedAt":"2019-10-08T23:08:05","Actor":"franksinankaya","Number":"27086","RawContent":null,"Title":"Replace gtRegNum with GetRegNum()","State":"closed","Body":"@am11 @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27086","RelatedDescription":"Closed or merged PR \"Replace gtRegNum with GetRegNum()\" (#27086)"},{"Id":"504319644","IsPullRequest":false,"CreatedAt":"2019-10-08T22:54:39","Actor":"sandreenko","Number":"27094","RawContent":null,"Title":"Update ryujit-tutorial.md.","State":"open","Body":"The document references some nodes and construction that are not used anymore.\r\nMost dump examples are outdated and need to be generated again.\r\n\r\n_Originally posted by @CarolEidt in https://github.com/dotnet/coreclr/pull/26876_","Url":"https://github.com/dotnet/coreclr/issues/27094","RelatedDescription":"Open issue \"Update ryujit-tutorial.md.\" (#27094)"},{"Id":"504306556","IsPullRequest":true,"CreatedAt":"2019-10-08T22:13:18","Actor":"jkoritzinsky","Number":"27093","RawContent":null,"Title":"Run tests on Alpine 3.10.","State":"open","Body":"Run tests on our Alpine 3.10 docker build-tools prereqs images.\r\n\r\nContributes to #26661 for .NET 5.0\r\n\r\nTODO: Remove updates to public queues after validation to not waste resources.","Url":"https://github.com/dotnet/coreclr/pull/27093","RelatedDescription":"Open PR \"Run tests on Alpine 3.10.\" (#27093)"},{"Id":"504262188","IsPullRequest":false,"CreatedAt":"2019-10-08T20:28:36","Actor":"mikedn","Number":"27092","RawContent":null,"Title":"Do not create unnecessary LEA(b+0) nodes","State":"open","Body":"There's a piece of code in the XARCH emitter that attempts to remove `LEA reg, [reg+0]` instructions: https://github.com/dotnet/coreclr/blob/4c669eb9ed4400e636d1421412062aa99ccc0dda/src/jit/emitxarch.cpp#L5222\r\n\r\nThis works fine but such LEAs should not be generated in the first place.\r\n\r\nIn one such case I looked at, the LEA was generated by `Lowering::TryCreateAddrMode` from an `ADD x, 0`. How this `ADD` was created is another story but lowering should simply remove it, not create an address mode from it.\r\n\r\nInitially discussed in https://github.com/dotnet/coreclr/pull/27035#discussion_r332298892","Url":"https://github.com/dotnet/coreclr/issues/27092","RelatedDescription":"Open issue \"Do not create unnecessary LEA(b+0) nodes\" (#27092)"},{"Id":"504200927","IsPullRequest":true,"CreatedAt":"2019-10-08T18:19:44","Actor":"6opuc","Number":"27089","RawContent":null,"Title":"Changes in virtual.cpp to reduce coredump size(~20 times less)","State":"open","Body":"Changes in src/pal/src/map/virtual.cpp to reduce coredump size(~20 times less after these changes):\r\nmadvise(...MADV_DONTDUMP|MADV_DODUMP) calls were added in VIRTUALResetMemory, ReserveVirtualMemory, VIRTUALCommitMemory, VirtualFree and VirtualProtect methods.\r\n\r\nDetails were discussed here: #10524","Url":"https://github.com/dotnet/coreclr/pull/27089","RelatedDescription":"Open PR \"Changes in virtual.cpp to reduce coredump size(~20 times less)\" (#27089)"},{"Id":"504128122","IsPullRequest":true,"CreatedAt":"2019-10-08T15:49:09","Actor":"AndyAyersMS","Number":"27088","RawContent":null,"Title":"JIT: allow block cloning opt in methods with EH","State":"open","Body":"Update `fgOptimizeUncondBranchToSimpleCond` to handle methods with EH. Also\r\nrework the helpers a bit to make them more time-efficient.","Url":"https://github.com/dotnet/coreclr/pull/27088","RelatedDescription":"Open PR \"JIT: allow block cloning opt in methods with EH\" (#27088)"},{"Id":"504125761","IsPullRequest":true,"CreatedAt":"2019-10-08T15:45:18","Actor":"PeterSolMS","Number":"27087","RawContent":null,"Title":"Manually managed card bundles windows","State":"open","Body":"Port assembly changes for manually managed card bundles to Windows and enable it.","Url":"https://github.com/dotnet/coreclr/pull/27087","RelatedDescription":"Open PR \"Manually managed card bundles windows\" (#27087)"},{"Id":"503838657","IsPullRequest":false,"CreatedAt":"2019-10-08T05:41:14","Actor":"tamlin-mike","Number":"27085","RawContent":null,"Title":"ngen output too verbose","State":"open","Body":"ngen.exe 4.8.3752.0\r\n\r\nWhile attempting to ngen a (local bugfixed) VS dll, last step would be to ngen it. While it ultimately failed (even with strong name verification skipping it failed), it displayed a problem with the verbosity of ngen output on failure:\r\n\r\n```\r\n>ngen install Microsoft.VisualStudio.LanguageServices.dll\r\nMicrosoft (R) CLR Native Image Generator - Version 4.8.3752.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\nFailed to compile C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of the following error: Strong name validation failed. (Exception from HRESULT: 0x8013141A).\r\nUninstalling assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of an error during compilation: Failed to compile C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of the following error: Strong name validation failed. (Exception from HRESULT: 0x8013141A).\r\nStrong name validation failed. (Exception from HRESULT: 0x8013141A)\r\n```\r\n\r\nIt doesn't look extremely bad like this, when the lines are allowed to extend to column 557, but look at how it becomes in a console window where the output wraps:\r\n\r\n--- begin blob ---\r\nMicrosoft (R) CLR Native Image Generator - Version 4.8.3752.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\nFailed to compile C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of the following error: Strong name validation failed. (Exception from HRESULT: 0x8013141A).\r\nUninstalling assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of an error during compilation: Failed to compile C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll because of the following error: Strong name validation failed. (Exception from HRESULT: 0x8013141A).\r\nStrong name validation failed. (Exception from HRESULT: 0x8013141A)\r\n--- end blob ---\r\n\r\n\r\nThat blob of text is quite unreadable. Provided ngen is single-threaded in this scenario, or have a unique \"job id\" per assembly it's trying to install, would it perhaps make sense to display that job it (possibly prepended by process id) on the first mention of the file name (which, let's face it, can be of almost arbitrary length up to 32K), and after that only display that unique identifier?\r\n\r\nIt would still be uniquely identifying the very same file, but would be _way_ more readable.\r\n\r\nExample of cleaned up output, with stripping of redundant exception output added in for good measure:\r\n```\r\nMicrosoft (R) CLR Native Image Generator - Version 4.8.3752.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n1234/0123 ERR: Failed to compile C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageServices\\Microsoft.VisualStudio.LanguageServices.dll\r\n1234/0123 Strong name validation failed. (Exception from HRESULT: 0x8013141A)\r\n1234/0123 Uninstalling assembly because of an error during compilation.\r\n```\r\n\r\nComments?","Url":"https://github.com/dotnet/coreclr/issues/27085","RelatedDescription":"Open issue \"ngen output too verbose\" (#27085)"},{"Id":"503829117","IsPullRequest":true,"CreatedAt":"2019-10-08T05:07:05","Actor":"cshung","Number":"27084","RawContent":null,"Title":"[crossgen2] Attribute Presence Filter","State":"open","Body":"Fixes #27021 \r\n\r\nThe change allows `crossgen2` to produce the `READYTORUN_SECTION_ATTRIBUTEPRESENCE` section that is bit-by-bit identical with what `crossgen` produced.\r\n\r\n@dotnet/crossgen-contrib","Url":"https://github.com/dotnet/coreclr/pull/27084","RelatedDescription":"Open PR \"[crossgen2] Attribute Presence Filter\" (#27084)"},{"Id":"503797140","IsPullRequest":false,"CreatedAt":"2019-10-08T03:05:33","Actor":"VincentBu","Number":"27082","RawContent":null,"Title":"Test failed: tracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd","State":"open","Body":"**Job:**\r\n[coreclr-jitstress #20191006.1 Run Test Pri1 Windows_NT x86 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379860)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/63cfd2b1-0def-449f-b65e-c489f05ffb1b/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x86\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_ReadyToRun=0\r\nCOMPlus_ZapDisable=1\r\n\r\n**Note:**\r\nthis failure **doesn't repro** on our windows x86 machine\r\n\r\n**Log:**\r\n```\r\ntracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Work\\0889eae0-1417-465f-9153-85fe479475c0\\Exec\\tracing\\eventcounter\\Reports\\tracing.eventcounter\\incrementingeventcounter\\incrementingeventcounter.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Payload\\corerun.exe\" incrementingeventcounter.dll \r\n      Test Failed\r\n      Expected to see 100 events - saw 0\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27082","RelatedDescription":"Open issue \"Test failed: tracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd\" (#27082)"},{"Id":"503791626","IsPullRequest":false,"CreatedAt":"2019-10-08T02:44:55","Actor":"VincentBu","Number":"27081","RawContent":null,"Title":"Test failed: Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd","State":"open","Body":"**Job:**\r\n[coreclr-gcstress0x3-gcstress0xc #20191006.1 Run Test Pri1 Windows_NT x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379231)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/2670f608-f646-4388-9819-cf699ea0ecd9/workitems/Interop/console\r\n\r\n**OS & Arch:**\r\nwindows x64\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_GCStress=0x3\r\n\r\n**Note:**\r\nI try to repro this failure but get the following information:\r\n```\r\nTest Failure: System.Runtime.InteropServices.COMException (0x80040154): Retrieving the COM class factory for component with CLSID {0F8ACD0C-ECE0-4F2A-BD1B-6BFCA93A0726} failed due to the following error: 80040154 Class not registered (0x80040154 (REGDB_E_CLASSNOTREG)).     \r\n\r\nat NetClient.Program.Validate_Numeric_In_ReturnByRef()                                                                  \r\nat NetClient.Program.Main(String[] doNotUse)          \r\n                                                               \r\nExpected: 100                                                                                                           \r\nActual: 101                                                                                                             \r\nEND EXECUTION - FAILED                                                                                                  \r\nFAILED\r\n```\r\n\r\n**Log:**\r\n```\r\nInterop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3044 [0x00000be4], Thread: 7624 [0x1dc8]): !CREATE_CHECK_STRING(pMT && pMT->Validate())\r\n      \r\n      CORECLR! Object::ValidateInner + 0x14A (0x00007ff9`41d02bfa)\r\n      CORECLR! Object::Validate + 0x13A (0x00007ff9`41d02a6a)\r\n      CORECLR! WKS::GCHeap::Promote + 0x9F (0x00007ff9`4215368f)\r\n      CORECLR! GCFrame::GcScanRoots + 0x6C (0x00007ff9`41c77dec)\r\n      CORECLR! GcStackCrawlCallBack + 0x386 (0x00007ff9`420462b6)\r\n      CORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff9`41aa54ca)\r\n      CORECLR! Thread::StackWalkFramesEx + 0x17A (0x00007ff9`41aa7542)\r\n      CORECLR! Thread::StackWalkFrames + 0x184 (0x00007ff9`41aa7328)\r\n      CORECLR! ScanStackRoots + 0x28D (0x00007ff9`421daddd)\r\n      CORECLR! GCToEEInterface::GcScanRoots + 0x1DA (0x00007ff9`421d99a6)\r\n          File: f:\\workspace.10\\_work\\1\\s\\src\\vm\\object.cpp Line: 597\r\n          Image: C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Work\\d2a02d31-1a0f-4dec-bca1-2d30c4347b53\\Exec\\Interop\\COM\\Reports\\Interop.COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Payload\\corerun.exe\" NETClientIDispatch.dll \r\n      Calling DoubleNumeric_ReturnByRef ...\r\n      Call to DoubleNumeric_ReturnByRef complete\r\n      Calling Add_Float_ReturnAndUpdateByRef ...\r\n      Call to Add_Float_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.3; 0.3 == 0.3\r\n      Calling Add_Double_ReturnAndUpdateByRef ...\r\n      Call to Add_Double_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.30000000000000004; 0.30000000000000004 == 0.30000000000000004\r\n      Calling TriggerException with Disp 127...\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27081","RelatedDescription":"Open issue \"Test failed: Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd\" (#27081)"},{"Id":"503784028","IsPullRequest":true,"CreatedAt":"2019-10-08T02:14:11","Actor":"jkotas","Number":"27080","RawContent":null,"Title":"[release/3.1] Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only (#27014)","State":"open","Body":"Description\r\nRegression introduce as side-effect of refactoring for local GC. The GC uses incorrectly uses current processor count instead of total processor count to determine whether it is safe to use special uniprocessor allocation helpers.\r\n\r\nCustomer impact\r\nChanging process affinity from 1 processor to more processor after the process starts will lead to intermittent crashes.\r\n\r\nRegression?\r\nYes (2.0 -> 2.1,3.0)\r\n\r\nRisk\r\nSmall. Undo the bad change.\r\n\r\n----\r\n\r\nUse maximum number of processors the process may run on to determine whether it is ok to use\r\nsingle-proc allocation helpers. It is not sufficient to depend on current process affinity since\r\nthat can change during the process lifetime.\r\n\r\nAlso, the single-proc allocation helpers work well on x86/x64 systems only because of they depend\r\non atomic non-interlocked increment instruction for good performance. Such instruction is available\r\non x86/x64 only. Disable them everywhere else.\r\n\r\nFixes #26990","Url":"https://github.com/dotnet/coreclr/pull/27080","RelatedDescription":"Open PR \"[release/3.1] Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only (#27014)\" (#27080)"},{"Id":"503770706","IsPullRequest":true,"CreatedAt":"2019-10-08T01:17:43","Actor":"AndyAyersMS","Number":"27079","RawContent":null,"Title":"JIT: only tail recursive calls become loops","State":"open","Body":"Importer was a bit too liberal marking recursive calls as loop-inducing, at\r\nleast from the standpoint of enforcing backward-branch constraints. This would\r\nsometimes lead us to inline into cold paths like throws. Only tail-recursive\r\ncalls will turn into loops.\r\n\r\nAlso, future-proof the propagation of simple loopness the root compiler, in\r\ncase we ever decide to enable inlining at Tier0.","Url":"https://github.com/dotnet/coreclr/pull/27079","RelatedDescription":"Open PR \"JIT: only tail recursive calls become loops\" (#27079)"},{"Id":"503766205","IsPullRequest":true,"CreatedAt":"2019-10-08T00:59:07","Actor":"GrabYourPitchforks","Number":"27078","RawContent":null,"Title":"[WIP] Significantly improve performance of Utf8String / Utf8Span GetCharCount method","State":"open","Body":"This is marked __WIP__ because it's not yet fully tested, but I wanted to demonstrate what was possible due to the design of the `Utf8String` and `Utf8Span` types.\r\n\r\nSince these types are contracted to carry only well-formed UTF-8 data, we can make certain optimizations that wouldn't be allowable in more generalized APIs like `UTF8Encoding`. For example, when computing the number of `char`s that would result from a particular `Utf8String` or `Utf8Span` instance, we can suppress all error checking and go down highly optimized code paths.\r\n\r\nThe table below shows the comparison between the baseline `Encoding.UTF8.GetChars(ReadOnlySpan<byte>)` method and the `GetCharCount` methods introduced as part of this PR. The difference is substantial, especially for code paths which weren't previously vectorized.\r\n\r\n|            Method |      Corpus |       Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |------------ |-----------:|----------:|----------:|------:|--------:|------:|------:|------:|----------:|\r\n| **GetCharCount_Base** |    **11-0.txt** |  **41.112 us** | **0.7052 us** | **0.6596 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 |    11-0.txt |  10.576 us | 0.1957 us | 0.1831 us |  0.26 |    0.01 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** |      **11.txt** |   **3.574 us** | **0.0469 us** | **0.0439 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 |      11.txt |   3.446 us | 0.0598 us | 0.0530 us |  0.96 |    0.02 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **25249-0.txt** |  **74.032 us** | **1.3925 us** | **1.2344 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 25249-0.txt |  10.977 us | 0.2190 us | 0.2769 us |  0.15 |    0.00 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **30774-0.txt** |  **82.685 us** | **0.8982 us** | **0.8402 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 30774-0.txt |   6.412 us | 0.1154 us | 0.2080 us |  0.08 |    0.00 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **39251-0.txt** | **136.402 us** | **2.4733 us** | **2.3136 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 39251-0.txt |   8.044 us | 0.1570 us | 0.1392 us |  0.06 |    0.00 |     - |     - |     - |         - |\r\n\r\nEven small non-English texts see notable improvement. For example, pulling the word \"αδαμάντινης\" from one sample text and running the benchmark just on that one word results in around twice the throughput.\r\n\r\n|            Method |      Mean |     Error |    StdDev | Ratio | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |----------:|----------:|----------:|------:|------:|------:|------:|----------:|\r\n| GetCharCount_Base | 18.665 ns | 0.3949 ns | 0.5135 ns |  1.00 |     - |     - |     - |         - |\r\n| GetCharCount_Exp1 |  8.796 ns | 0.1680 ns | 0.1489 ns |  0.48 |     - |     - |     - |         - |\r\n\r\nThis PR only concerns itself with counting chars, not with performing the actual transcoding (creating the `string` instance) step. But it's not a giant leap to imagine having an optimized transcoder that gives `Utf8String.ToString()` markedly better performance than `Encoding.UTF8.GetString(ReadOnlySpan<byte>)`.","Url":"https://github.com/dotnet/coreclr/pull/27078","RelatedDescription":"Open PR \"[WIP] Significantly improve performance of Utf8String / Utf8Span GetCharCount method\" (#27078)"},{"Id":"503628905","IsPullRequest":true,"CreatedAt":"2019-10-08T00:05:32","Actor":"AaronRobinsonMSFT","Number":"27069","RawContent":null,"Title":"Remove SQL callout cookie from JIT.","State":"closed","Body":"See https://github.com/dotnet/coreclr/pull/26458#issuecomment-527286662 for issue.\r\nSee https://github.com/dotnet/coreclr/pull/26458#issuecomment-539145589 for separate PR.\r\n\r\nWill post `jit-diff` results presently.\r\n\r\n/cc @jkotas @AndyAyersMS ","Url":"https://github.com/dotnet/coreclr/pull/27069","RelatedDescription":"Closed or merged PR \"Remove SQL callout cookie from JIT.\" (#27069)"},{"Id":"503738039","IsPullRequest":true,"CreatedAt":"2019-10-07T23:11:32","Actor":"jkoritzinsky","Number":"27077","RawContent":null,"Title":"WIP: simplify native component build","State":"open","Body":"- Move tool locator functions from gen-buildsys-* into a configuretools.cmake file that is included as part of the build.\r\n- Split the compiler discovery from from gen-buildsys-* into separate `find-gcc.sh` and `find-clang.sh` scripts.\r\n- Combine the gen-buildsys-* scripts into one script for Windows and one for non-Windows.\r\n- Use new options on the CMake executable to not depend on the current working directory.\r\n- Update our build scripts to use `cmake --build` instead of invoking the underlying build system (except for when `scan-build` is enabled since that doesn't work with `cmake --build`).","Url":"https://github.com/dotnet/coreclr/pull/27077","RelatedDescription":"Open PR \"WIP: simplify native component build\" (#27077)"},{"Id":"503670516","IsPullRequest":true,"CreatedAt":"2019-10-07T22:27:57","Actor":"trylek","Number":"27073","RawContent":null,"Title":"Revert \"Preparatory changes for implementing Crossgen2 pipeline\"","State":"closed","Body":"Reverts dotnet/coreclr#26908","Url":"https://github.com/dotnet/coreclr/pull/27073","RelatedDescription":"Closed or merged PR \"Revert \"Preparatory changes for implementing Crossgen2 pipeline\"\" (#27073)"},{"Id":"503708606","IsPullRequest":true,"CreatedAt":"2019-10-07T21:47:29","Actor":"davmason","Number":"27075","RawContent":null,"Title":"Respect profiler provided IL maps in the DAC (Port #25802 to 3.1)","State":"open","Body":"Bug Description:\r\nWhen we implemented tiered compilation in 2.1 there was a typo that made it so we would ignore any profiler provided IL maps. This means that if a profiler modifies a function debugging is broken.\r\n\r\nBug Impact:\r\nThis was found because a profiler vendor who maintains a unit testing framework specifically needs this functionality and not having it blocks their product from running on coreclr.\r\n\r\nPR Risks:\r\nNone","Url":"https://github.com/dotnet/coreclr/pull/27075","RelatedDescription":"Open PR \"Respect profiler provided IL maps in the DAC (Port #25802 to 3.1)\" (#27075)"},{"Id":"503692361","IsPullRequest":true,"CreatedAt":"2019-10-07T21:09:07","Actor":"VSadov","Number":"27074","RawContent":null,"Title":"[WIP] temporarily enable  Windows ARM64 to run tests, just for this PR","State":"open","Body":"Do not merge. Just testing infrastructure.","Url":"https://github.com/dotnet/coreclr/pull/27074","RelatedDescription":"Open PR \"[WIP] temporarily enable  Windows ARM64 to run tests, just for this PR\" (#27074)"},{"Id":"503719772","IsPullRequest":false,"CreatedAt":"2019-10-07T20:35:21","Actor":"delmyers","Number":"27076","RawContent":null,"Title":"Tpl TaskWaitBegin always has \"ContinueWithTask\" set to 0 for synchronous continuations in dotnet Core 3","State":"open","Body":"**Repro steps:**\r\n1) Execute the code below in a dotnet core app.\r\n2) Execute the code below in a .NET framework app.\r\n3) Compare the outputs.\r\n\r\n**Expected:**\r\nOutputs are the same\r\n\r\n**Actual:**\r\nOutputs are different\r\n\r\n.NET framework output:\r\n```\r\n!!Continuation '0' waiting for operation '2!!\r\nRunTask a\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '4' waiting for operation '3!!\r\n!!Continuation '5' waiting for operation '4!!\r\n!!Continuation '6' waiting for operation '5!!\r\n!!Continuation '7' waiting for operation '6!!\r\n!!Stopped waiting for '3' !!\r\nRunSubTask2 b\r\n!!Continuation '4' waiting for operation '8!!\r\n!!Stopped waiting for '8' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '4' !!\r\nRunSubTask b\r\n!!Continuation '5' waiting for operation '9!!\r\n!!Stopped waiting for '9' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '11' waiting for operation '10!!\r\n!!Continuation '5' waiting for operation '11!!\r\n!!Stopped waiting for '10' !!\r\nRunSubTask2 b\r\n!!Continuation '11' waiting for operation '12!!\r\n!!Stopped waiting for '12' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '11' !!\r\nRunSubTask d\r\n!!Stopped waiting for '5' !!\r\nRunTask b\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '14' waiting for operation '13!!\r\n!!Continuation '15' waiting for operation '14!!\r\n!!Continuation '6' waiting for operation '15!!\r\n!!Stopped waiting for '13' !!\r\nRunSubTask2 b\r\n!!Continuation '14' waiting for operation '16!!\r\n!!Stopped waiting for '16' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '14' !!\r\nRunSubTask b\r\n!!Continuation '15' waiting for operation '17!!\r\n!!Stopped waiting for '17' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '19' waiting for operation '18!!\r\n!!Continuation '15' waiting for operation '19!!\r\n!!Stopped waiting for '18' !!\r\nRunSubTask2 b\r\n!!Continuation '19' waiting for operation '20!!\r\n!!Stopped waiting for '20' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '19' !!\r\nRunSubTask d\r\n!!Stopped waiting for '15' !!\r\nRunTask c\r\n!!Stopped waiting for '6' !!\r\n!!Stopped waiting for '2' !!\r\n```\r\ndotnet core output.\r\n```\r\n!!Continuation '0' waiting for operation '2!!\r\nRunTask a\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '3!!\r\n!!Continuation '0' waiting for operation '4!!\r\n!!Continuation '0' waiting for operation '5!!\r\n!!Continuation '0' waiting for operation '6!!\r\n!!Stopped waiting for '3' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '8!!\r\n!!Stopped waiting for '8' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '4' !!\r\nRunSubTask b\r\n!!Continuation '0' waiting for operation '9!!\r\n!!Stopped waiting for '9' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '10!!\r\n!!Continuation '0' waiting for operation '11!!\r\n!!Stopped waiting for '10' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '12!!\r\n!!Stopped waiting for '12' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '11' !!\r\nRunSubTask d\r\n!!Stopped waiting for '5' !!\r\nRunTask b\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '13!!\r\n!!Continuation '0' waiting for operation '14!!\r\n!!Continuation '0' waiting for operation '15!!\r\n!!Stopped waiting for '13' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '16!!\r\n!!Stopped waiting for '16' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '14' !!\r\nRunSubTask b\r\n!!Continuation '0' waiting for operation '17!!\r\n!!Stopped waiting for '17' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '18!!\r\n!!Continuation '0' waiting for operation '19!!\r\n!!Stopped waiting for '18' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '20!!\r\n!!Stopped waiting for '20' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '19' !!\r\nRunSubTask d\r\n!!Stopped waiting for '15' !!\r\nRunTask c\r\n!!Stopped waiting for '6' !!\r\n!!Stopped waiting for '2' !!\r\n```\r\n\r\nThis seems to only occur for continuations that will run synchronously after the operations that they are awaiting. Here is the C# code that repros the issue\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TplEventListener\r\n{\r\n    class TplEventListener : EventListener\r\n    {\r\n        private enum TplEventIds : int\r\n        {\r\n            // A task wait has started on the current thread. Occurs\r\n            // when control is about to be transfered from an await, just before\r\n            // the return of the method.\r\n            TaskWaitBegin = 10,\r\n\r\n            // A task that was awaited on another thread is transferring its continuation\r\n            // to this thread.\r\n            TaskWaitEnd = 11,\r\n        }\r\n\r\n        private static readonly Guid TplGuid = new Guid(\"2e5dba47-a3d2-4d16-8ee0-6671ffdcd7b5\");\r\n\r\n        public TplEventListener()\r\n        {\r\n        }\r\n\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Guid == TplGuid)\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Verbose, (EventKeywords)(0x43 | 0x28));\r\n            }\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            if (eventData.EventSource.Guid == TplGuid)\r\n            {\r\n                switch ((TplEventIds)eventData.EventId)\r\n                {\r\n\r\n                    case TplEventIds.TaskWaitBegin:\r\n                        OnWaitTask((int)eventData.Payload[2], (int)eventData.Payload[3], (int)eventData.Payload[4]);\r\n                        break;\r\n                    case TplEventIds.TaskWaitEnd:\r\n                        OnContinueTask((int)eventData.Payload[1], (int)eventData.Payload[2]);\r\n                        break;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        private void OnWaitTask(int originatingTask, int taskId, int continuation)\r\n        {\r\n            Console.WriteLine($\"!!Continuation '{continuation}' waiting for operation '{originatingTask}!!\");\r\n        }\r\n\r\n        private void OnContinueTask(int originatingTask, int taskId)\r\n        {\r\n            Console.WriteLine($\"!!Stopped waiting for '{taskId}' !!\");\r\n        }\r\n    }\r\n\r\n    public class ProgramImpl\r\n    {\r\n\r\n        public void Run()\r\n        {\r\n            using (new TplEventListener())\r\n            {\r\n                Task.Run(async () => await RunTask()).Wait(); ;\r\n            }\r\n\r\n            Console.WriteLine(\"Press a key\");\r\n            Console.ReadKey();\r\n        }\r\n\r\n        public async Task RunTask()\r\n        {\r\n            Console.WriteLine(\"RunTask a\");\r\n            await RunSubTask();\r\n            Console.WriteLine(\"RunTask b\");\r\n            await RunSubTask();\r\n            Console.WriteLine(\"RunTask c\");\r\n        }\r\n\r\n        private async Task RunSubTask()\r\n        {\r\n            Console.WriteLine(\"RunSubTask a\");\r\n\r\n            await RunSubTask2();\r\n\r\n            Console.WriteLine(\"RunSubTask b\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask c\");\r\n\r\n            await RunSubTask2();\r\n\r\n            Console.WriteLine(\"RunSubTask d\");\r\n        }\r\n\r\n        private async Task RunSubTask2()\r\n        {\r\n            Console.WriteLine(\"RunSubTask2 a\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask2 b\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask2 c\");\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27076","RelatedDescription":"Open issue \"Tpl TaskWaitBegin always has \"ContinueWithTask\" set to 0 for synchronous continuations in dotnet Core 3\" (#27076)"},{"Id":"503669546","IsPullRequest":false,"CreatedAt":"2019-10-07T20:20:38","Actor":"sdmaclea","Number":"27072","RawContent":null,"Title":"PerfMap race in destroy","State":"open","Body":"@janvorli noticed a potential segfault if PerfMap::Destroy is called while another thread is logging a method. https://github.com/dotnet/coreclr/pull/26897#discussion_r331679824 \r\n\r\nFix it.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27072","RelatedDescription":"Open issue \"PerfMap race in destroy\" (#27072)"},{"Id":"503647012","IsPullRequest":false,"CreatedAt":"2019-10-07T19:33:36","Actor":"sdmaclea","Number":"27071","RawContent":null,"Title":"FEATURE_PERFMAP missing stubs?","State":"open","Body":"While testing #26897, there were a handful of symbols missing.\r\n\r\nIt is presumed we are missing `FEATURE_PERFMAP` instrumentation for a few stub types.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27071","RelatedDescription":"Open issue \"FEATURE_PERFMAP missing stubs?\" (#27071)"},{"Id":"503646438","IsPullRequest":false,"CreatedAt":"2019-10-07T19:32:24","Actor":"sandreenko","Number":"27070","RawContent":null,"Title":"Get rid of unoptimal moves in a popular ML pattern.","State":"open","Body":"ML.Net code has several places where we do `a = a * const_int;`, for example, `MurmurHash` has 6 `imul` instructions in the final asm for x64 https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/Hashing.cs#L118\r\nand in some cases, we do them with one extra mov:\r\n```\r\nIN0054: 000127 mov      eax, r15d\r\nIN0055: 00012A imul     eax, eax, 0xFFFFFFFFCC9E2D51 (2 instructions, 9 bytes)\r\n```\r\ninstead of \r\n```\r\nIN0055: 00012A imul     eax, r15d, 0xFFFFFFFFCC9E2D51 (1 instruction, 7 bytes)\r\n```\r\n\r\nthe non-optimal codegen happens when we inline `MurmurRound` and create a temp LCL_VAR for `hash` argument: `hash = MurmurRound(hash, (uint)len);`\r\n\r\nIR looks like:\r\n```\r\n***** BB02\r\nSTMT00068 (IL   ???...  ???)\r\n[000363] -A------R---              *  ASG       long  \r\n[000361] D------N----              +--*  LCL_VAR   long   V04 loc1         d:3\r\n[000362] ------------              \\--*  PHI       long  \r\n[000385] ------------ pred BB04       +--*  PHI_ARG   long   V04 loc1         u:5\r\n[000364] ------------ pred BB08       \\--*  PHI_ARG   long   V04 loc1         u:2 $100\r\n\r\n***** BB03\r\nSTMT00030 (IL 0x010...  ???)\r\n[000125] -A------R---              *  ASG       int    $285\r\n[000124] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:2 $285\r\n[000030] C-----------              \\--*  LCL_VAR   int    V04 loc1         u:3 $285\r\n\r\n***** BB03\r\nSTMT00020 (IL 0x010...  ???)\r\n[000082] -A------R---              *  ASG       int    $286\r\n[000081] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:3 $286\r\n[000079] ------------              \\--*  MUL       int    $286\r\n[000077] ------------                 +--*  LCL_VAR   int    V08 tmp1         u:2 (last use) $285\r\n[000078] ------------                 \\--*  CNS_INT   int    0xffffffffcc9e2d51 $49\r\n```\r\n\r\nand we want to get rid of `STMT00030`.\r\n\r\nI have thought about 3 possible places where it could be done:\r\n1. copy propagation https://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L131;\r\n2. lowering set contained for mul https://github.com/dotnet/coreclr/blob/0a00ee7fdfd113c8c2d47c85ed210de78cab4bdd/src/jit/lowerxarch.cpp#L1644;\r\n3. where we create a lclVar for the argument,  `Compiler::fgInlinePrependStatements`, https://github.com/dotnet/coreclr/blob/master/src/jit/flowgraph.cpp#L23243.\r\n\r\nI have tried all of them and did not get a good result,\r\n\r\n3: `fgInlinePrependStatements` already can replace an argument that was single used with the original tree, I was able to teach it to replace an argument that was originally a lcl_var with this lcl_var loads (instead of creating a new one), but only if the argument was not modified inside the inline method (not our case). \r\nThat means it supports cases like \r\n```\r\ninline myMethod(lclVar0);\r\nwhere myMethod(arg)\r\n{\r\n  multiple uses of arg, but no defs.\r\n}\r\n```\r\nwe can support defs if we now that `inline myMethod(lclVar0);` is the last use of lclVar0 (our case, because we have `hash = call(hash)`), but it happens before we generate live information, so we don't know that `call(lclVar0)` is the last use of `lclVar0`.\r\n\r\n2: `ContainCheckMul` set contained on `IsContainableMemoryOp`, so it doesn't support moves from one register to another, forcing it to set contained on `[000077]` gave me many asserts.\r\n\r\n1: `Compiler::optCopyProp` looks like the best candidate to handle this extra move, but currently, it doesn't work because:\r\n1.1 `[000361] D------N----              +--*  LCL_VAR   long   V04 loc1         d:3` doesn't have a VN pair, because it is a phi statement that is processed here:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/valuenum.cpp#L5885-L5890\r\nand there we don't set `VNPair` for the tree, so `copyProp` ends on:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L203-L207\r\n\r\nif we change that and assign a VNPair for `[000361] ` then we would consider it as a candidate for `[000081] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:3 $286` replacement, but it would be declined, because `000361` is long and `000081` is int, so `copyProp` ends on:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L208-L211\r\n If we fix that we will still have different VN values so the copy propagation won't happen:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L212-L215\r\n\r\nbut if somehow we skip these checks (manually in a debugger for example) and do the propagation, then we have asm that we want without any asserts in later stages.\r\n\r\nNote: the moves are cheap but there are many of them so I expect it to give us at least measurable code size improvement.","Url":"https://github.com/dotnet/coreclr/issues/27070","RelatedDescription":"Open issue \"Get rid of unoptimal moves in a popular ML pattern.\" (#27070)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"504416224","IsPullRequest":true,"CreatedAt":"2019-10-09T05:00:12","Actor":"dotnet-maestro[bot]","Number":"12851","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191008.20\r\n- **Date Produced**: 10/9/2019 4:10 AM\r\n- **Commit**: 84be18b1048236ad163d737b442a4ccf3b10d997\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19508.20\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12851","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12851)"},{"Id":"504269437","IsPullRequest":false,"CreatedAt":"2019-10-08T20:43:43","Actor":"robborden","Number":"12850","RawContent":null,"Title":"Compatibility errors between netcoreapp3.0 app and netstandard2.1 library when using MSBuild","State":"open","Body":"We have a dotnet codebase that contains a 4-5 dotnet core applications as well as around 20 dotnet standard libraries.  These are all separate projects in the same solution. The dotnet core apps reference several of the dotnet standard libraries. We recently migrated everything to netcoreapp3.0 and netstandard2.1.  The other devs working on the project (one in windows, one on macos) are not having any issues.   I am trying to use MSBuild to build the application because that is what Rider uses when debugging.\r\n\r\nI have installed the sdks and `dotnet build` works.  I cannot run `msbuild`, because it produces errors.  I also cannot run `dotnet msbuild`, it also has the same errors.  These are an example of the errors:\r\n```\r\n\"error NU1201: Project MyDotnetStandard21Lib is not compatible with netcoreapp3.0 (.NETCoreApp,Version=v3.0). Project MyDotnetStandard21Lib supports: netstandard2.1 (.NETStandard,Version=v2.1)\"\r\n```\r\n\r\nWhen I run `msbuild`, I believe it is doing \r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /Library/Frameworks/Mono.framework/Versions/6.4.0/lib/mono/msbuild/Current/bin/MSBuild.dll\r\n```\r\n\r\nI'm not sure what `dotnet msbuild` runs.\r\n\r\n\r\nI also tried to use the MSBuild from the dotnet core sdk like this:\r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /usr/local/share/dotnet/sdk/3.0.100/MSBuild.dll\r\n```\r\n\r\nbut I got a bunch of exceptions like these:\r\n```\r\n$msbuild\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"-m\" switch.\r\n\r\nUnhandled Exception:\r\nSystem.BadImageFormatException: Could not resolve field token 0x0400036b, due to: Could not load type of field 'Microsoft.Build.Execution.BuildManager:_workQueue' (33) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.6.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. assembly:/usr/local/share/dotnet/sdk/3.0.100/Microsoft.Build.dll type:BuildManager member:(null)\r\nFile name: 'Microsoft.Build'\r\n  at Microsoft.Build.CommandLine.MSBuildApp.BuildProject (System.String projectFile, System.String[] targets, System.String toolsVersion, System.Collections.Generic.Dictionary`2[TKey,TValue] globalProperties, System.Collections.Generic.Dictionary`2[TKey,TValue] restoreProperties, Microsoft.Build.Framework.ILogger[] loggers, Microsoft.Build.Framework.LoggerVerbosity verbosity, Microsoft.Build.CommandLine.DistributedLoggerRecord[] distributedLoggerRecords, System.Int32 cpuCount, System.Boolean enableNodeReuse, System.IO.TextWriter preprocessWriter, System.Boolean detailedSummary, System.Collections.Generic.ISet`1[T] warningsAsErrors, System.Collections.Generic.ISet`1[T] warningsAsMessages, System.Boolean enableRestore, Microsoft.Build.Logging.ProfilerLogger profilerLogger, System.Boolean enableProfiler, System.Boolean interactive, System.Boolean isolateProjects, System.Boolean graphBuild, System.String[] inputResultsCaches, System.String outputResultsCache) [0x005a0] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String[] commandLine) [0x00415] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Main (System.String[] args) [0x00029] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n```\r\n\r\nI'm trying to figure out what I'm doing wrong or how I should be running MSBuild for dotnetcore3.0 projects on MacOS. I suspect I have some wires crossed somewhere. Any help would be greatly appreciated!","Url":"https://github.com/dotnet/cli/issues/12850","RelatedDescription":"Open issue \"Compatibility errors between netcoreapp3.0 app and netstandard2.1 library when using MSBuild\" (#12850)"},{"Id":"504216696","IsPullRequest":false,"CreatedAt":"2019-10-08T18:52:51","Actor":"voroninp","Number":"12849","RawContent":null,"Title":"'dotnet publish' ignores file name casing.","State":"open","Body":"## Steps to reproduce\r\nCreate a project named with Pascal casing style and DO NOT set `<AssemblyName>` element explicitly.\r\nIn my case project's name is  `Luscii.Identity.Service.csproj`.\r\n\r\nThen call `dotnet publish Luscii.Identity.Service.csproj`\r\nYou'll end up with published application containing `Luscii.Identity.Service.dll` file.\r\n\r\nDelete `publish` folder !\r\n\r\nNow call `dotnet publish luscii.identity.service.csproj`\r\n\r\nYou'll end up with published application containing `luscii.identity.service.dll` file. lowercased!\r\n\r\nOn Linux you are going to have great fun because of that.\r\n\r\n\r\n## Expected  behavior\r\nI expect CLI to use the casing of the file, not the argument.\r\n\r\n## Actual behavior\r\nIt looks like CLI uses casing of the argument.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33","Url":"https://github.com/dotnet/cli/issues/12849","RelatedDescription":"Open issue \"'dotnet publish' ignores file name casing.\" (#12849)"},{"Id":"504171096","IsPullRequest":true,"CreatedAt":"2019-10-08T17:50:29","Actor":"dotnet-maestro[bot]","Number":"12848","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.3\r\n- **Date Produced**: 10/8/2019 4:07 PM\r\n- **Commit**: 8d6a25d50e795a5425d0652f3e3031067a79516f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12848","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12848)"},{"Id":"504094664","IsPullRequest":false,"CreatedAt":"2019-10-08T17:02:35","Actor":"naricc","Number":"12846","RawContent":null,"Title":"dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0, dotnet-targeting-pack-5.0. Do those packages exist?","State":"closed","Body":"I am trying to install the latest build on unbutu, using dpkg, but there are some packages I can't find any where linked on the github page. Specifically otnet-apphost-pack-5.0, dotnet-targeting-pack-5.0.  Are these packages available somewhere?\r\n\r\nFor reference, here is the command I am using, and the output:\r\n\r\n$ sudo dpkg -i dotnet-sdk-latest-x64.deb \r\n(Reading database ... 115796 files and directories currently installed.)\r\nPreparing to unpack dotnet-sdk-latest-x64.deb ...\r\nUnpacking dotnet-sdk-5.0 (5.0.100-alpha1-014854-1) over (5.0.100-alpha1-014854-1) ...\r\ndpkg: dependency problems prevent configuration of dotnet-sdk-5.0:\r\n dotnet-sdk-5.0 depends on dotnet-targeting-pack-5.0 (>= 5.0.0~alpha1.19507.3); however:\r\n  Package dotnet-targeting-pack-5.0 is not installed.\r\n dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0 (>= 5.0.0~alpha1.19507.3); however:\r\n  Package dotnet-apphost-pack-5.0 is not installed.\r\n\r\ndpkg: error processing package dotnet-sdk-5.0 (--install):\r\n dependency problems - leaving unconfigured\r\nErrors were encountered while processing:\r\n dotnet-sdk-5.0\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12846","RelatedDescription":"Closed issue \"dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0, dotnet-targeting-pack-5.0. Do those packages exist?\" (#12846)"},{"Id":"504128729","IsPullRequest":true,"CreatedAt":"2019-10-08T16:25:31","Actor":"dotnet-maestro[bot]","Number":"12847","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.2\r\n- **Date Produced**: 10/8/2019 2:45 PM\r\n- **Commit**: 8d6a25d50e795a5425d0652f3e3031067a79516f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12847","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12847)"},{"Id":"503863517","IsPullRequest":true,"CreatedAt":"2019-10-08T07:30:39","Actor":"dotnet-maestro[bot]","Number":"12845","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.10\r\n- **Date Produced**: 10/8/2019 5:40 AM\r\n- **Commit**: 57ba280ee32511c6f5c2ebcd2bfaaf4a1db74648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12845","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12845)"},{"Id":"503851576","IsPullRequest":true,"CreatedAt":"2019-10-08T06:55:07","Actor":"dotnet-maestro[bot]","Number":"12844","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.9\r\n- **Date Produced**: 10/8/2019 5:13 AM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12844","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12844)"},{"Id":"503676522","IsPullRequest":true,"CreatedAt":"2019-10-08T01:27:23","Actor":"dotnet-maestro[bot]","Number":"12843","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.7\r\n- **Date Produced**: 10/7/2019 11:48 PM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12843","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12843)"},{"Id":"503631892","IsPullRequest":false,"CreatedAt":"2019-10-07T21:12:39","Actor":"bender2k14","Number":"12842","RawContent":null,"Title":"dotnet test has exit code 0 despite BadImageFormatException","State":"closed","Body":"## Steps to reproduce and Environment data\r\nWhen using the [pool](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pool) with VM image label [`windows-2019`](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent), the relevant part of the `dotnet --info` output is\r\n```\r\nRID: win10-x64\r\n```\r\n\r\nTherefore, it is no surprise that executing\r\n```\r\ndotnet test Tests\\Tests.fsproj --runtime win-x86\r\n```\r\ndoesn't work since the [RID](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)s are incompatible.  Specifically, the relevant part of the logs when \"Enable system diagnostics\" is checked is\r\n```\r\nTest run for D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:02.06] Exception discovering tests from Tests: System.BadImageFormatException: Could not load file or assembly 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\nFile name: 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   at // ... stack trace omitted\r\n\r\nNo test is available in D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.\r\nResults File: D:\\a\\_temp\\VssAdministrator_fv-az604_2019-10-07_18_48_39.trx\r\n\r\n##[debug]Exit code 0 received from tool 'C:\\Program Files\\dotnet\\dotnet.exe'\r\n```\r\n\r\n## Expected  behavior\r\nI expected `dotnet test` to return a nonzero exit code since it encountered a `BadImageFormatException`.\r\n\r\n## Actual behavior\r\n`dotnet test` to returned an exit code of 0 despite encountering a `BadImageFormatException`. ","Url":"https://github.com/dotnet/cli/issues/12842","RelatedDescription":"Closed issue \"dotnet test has exit code 0 despite BadImageFormatException\" (#12842)"},{"Id":"503595856","IsPullRequest":true,"CreatedAt":"2019-10-07T18:50:41","Actor":"dotnet-maestro[bot]","Number":"12841","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.3\r\n- **Date Produced**: 10/7/2019 5:00 PM\r\n- **Commit**: f88738a6c69ffcfad8784c4cd7080efb99d474a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12841","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12841)"},{"Id":"503182939","IsPullRequest":true,"CreatedAt":"2019-10-07T01:29:43","Actor":"dotnet-maestro[bot]","Number":"12840","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191006.2\r\n- **Date Produced**: 10/6/2019 11:40 PM\r\n- **Commit**: 1def7ea25d56d3c0cd8abdca2edd28346c9e688e\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19506.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12840","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12840)"},{"Id":"503164606","IsPullRequest":true,"CreatedAt":"2019-10-06T22:15:28","Actor":"dotnet-maestro[bot]","Number":"12839","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.5\r\n- **Date Produced**: 10/6/2019 8:31 PM\r\n- **Commit**: 3fccad76fc65967dc194983284c3a43de37e95a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12839","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12839)"},{"Id":"503143380","IsPullRequest":true,"CreatedAt":"2019-10-06T19:25:43","Actor":"dotnet-maestro[bot]","Number":"12838","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.3\r\n- **Date Produced**: 10/6/2019 5:17 PM\r\n- **Commit**: 7f265162d279b089aea37cbcd93ccf50c29c42b9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12838","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12838)"},{"Id":"503141994","IsPullRequest":true,"CreatedAt":"2019-10-06T19:10:26","Actor":"dotnet-maestro[bot]","Number":"12837","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 5:58 PM\r\n- **Commit**: f1d22fdf7095bf5a9ed5bec469109ee65d0fd8ca\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12837","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12837)"},{"Id":"503139315","IsPullRequest":true,"CreatedAt":"2019-10-06T18:50:16","Actor":"dotnet-maestro[bot]","Number":"12836","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/6/2019 5:03 PM\r\n- **Commit**: 7f265162d279b089aea37cbcd93ccf50c29c42b9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12836","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12836)"},{"Id":"503122489","IsPullRequest":true,"CreatedAt":"2019-10-06T16:45:28","Actor":"dotnet-maestro[bot]","Number":"12835","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.2\r\n- **Date Produced**: 10/6/2019 2:50 PM\r\n- **Commit**: 245060c4e2989b831f532facbe88ead3eaae879f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12835","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12835)"},{"Id":"503116902","IsPullRequest":true,"CreatedAt":"2019-10-06T16:00:30","Actor":"dotnet-maestro[bot]","Number":"12834","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 3:15 PM\r\n- **Commit**: 357126710492d620198a60ee340ebeca9070f133\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19506.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12834","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12834)"},{"Id":"503097567","IsPullRequest":true,"CreatedAt":"2019-10-06T13:30:27","Actor":"dotnet-maestro[bot]","Number":"12833","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12833","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12833)"},{"Id":"503063486","IsPullRequest":true,"CreatedAt":"2019-10-06T07:55:46","Actor":"dotnet-maestro[bot]","Number":"12832","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.3\r\n- **Date Produced**: 10/6/2019 7:05 AM\r\n- **Commit**: c3d91f04768a270fb742169e2db08664226f2c22\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.3\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12832","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12832)"},{"Id":"503054801","IsPullRequest":true,"CreatedAt":"2019-10-06T06:05:30","Actor":"dotnet-maestro[bot]","Number":"12831","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.6\r\n- **Date Produced**: 10/6/2019 4:22 AM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12831","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12831)"},{"Id":"503047096","IsPullRequest":true,"CreatedAt":"2019-10-06T04:07:53","Actor":"dotnet-maestro[bot]","Number":"12830","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12830","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12830)"},{"Id":"503046369","IsPullRequest":true,"CreatedAt":"2019-10-06T03:55:28","Actor":"dotnet-maestro[bot]","Number":"12829","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.2\r\n- **Date Produced**: 10/6/2019 3:12 AM\r\n- **Commit**: c5caf9406ccecd70bf6ebfe3d8bbeb7452df1995\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12829","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12829)"},{"Id":"503038467","IsPullRequest":true,"CreatedAt":"2019-10-06T02:04:43","Actor":"dotnet-maestro[bot]","Number":"12828","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12828","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12828)"},{"Id":"503002754","IsPullRequest":true,"CreatedAt":"2019-10-05T19:40:28","Actor":"dotnet-maestro[bot]","Number":"12827","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.3\r\n- **Date Produced**: 10/5/2019 5:57 PM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12827","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12827)"},{"Id":"502994320","IsPullRequest":true,"CreatedAt":"2019-10-05T18:20:28","Actor":"dotnet-maestro[bot]","Number":"12825","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.2\r\n- **Date Produced**: 10/5/2019 4:29 PM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12825","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12825)"},{"Id":"502994349","IsPullRequest":true,"CreatedAt":"2019-10-05T18:20:02","Actor":"dotnet-maestro[bot]","Number":"12826","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 5:03 PM\r\n- **Commit**: 3c62e9e751be0f27eff5e686d2e41e0ad41277c9\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19505.1\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12826","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12826)"},{"Id":"502982004","IsPullRequest":true,"CreatedAt":"2019-10-05T16:45:28","Actor":"dotnet-maestro[bot]","Number":"12824","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 2:52 PM\r\n- **Commit**: 97743697c47a50a8eec8669c24e2ae9ce78fefc8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12824","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12824)"},{"Id":"502969742","IsPullRequest":true,"CreatedAt":"2019-10-05T15:05:01","Actor":"dotnet-maestro[bot]","Number":"12823","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 2:11 PM\r\n- **Commit**: fc2c6f61b9bae9eb07e80ca11f9d12e20aa02bd3\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12823","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12823)"},{"Id":"502935188","IsPullRequest":true,"CreatedAt":"2019-10-05T09:08:41","Actor":"dotnet-maestro[bot]","Number":"12822","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.20\r\n- **Date Produced**: 10/5/2019 7:26 AM\r\n- **Commit**: 45f675b1acc38eaea182bf6ef284d1b13141d134\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19504.20\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview1.19504.10 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12822","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12822)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"504399207","IsPullRequest":false,"CreatedAt":"2019-10-09T04:04:12","Actor":"2300070","Number":"1598","RawContent":null,"Title":"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.","State":"open","Body":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n","Url":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Open issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598)"},{"Id":"504006427","IsPullRequest":true,"CreatedAt":"2019-10-08T12:28:23","Actor":"dotnet-maestro[bot]","Number":"1597","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1597)"},{"Id":"503415647","IsPullRequest":true,"CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Number":"1596","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1596)"},{"Id":"503407217","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1595)"},{"Id":"503093090","IsPullRequest":true,"CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Number":"1594","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1594)"},{"Id":"503091277","IsPullRequest":true,"CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1593","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1593)"},{"Id":"502956371","IsPullRequest":true,"CreatedAt":"2019-10-05T12:29:24","Actor":"dotnet-maestro[bot]","Number":"1592","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 3:05 AM\r\n- **Commit**: 99ea2b5aebf7361a5baa638c978cb6214fca5217\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19504.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1592)"},{"Id":"502954708","IsPullRequest":true,"CreatedAt":"2019-10-05T12:06:58","Actor":"dotnet-maestro[bot]","Number":"1591","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:24 AM\r\n- **Commit**: 380eaaf663b425943754a15b29e814df0bb1b078\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19504.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1591","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1591)"},{"Id":"502952894","IsPullRequest":false,"CreatedAt":"2019-10-05T11:42:25","Actor":"axanth","Number":"1590","RawContent":null,"Title":"Any specific date about support of Universal Windows Platform in .net Standard 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1590","RelatedDescription":"Open issue \"Any specific date about support of Universal Windows Platform in .net Standard 2.1?\" (#1590)"},{"Id":"502601357","IsPullRequest":true,"CreatedAt":"2019-10-04T12:26:51","Actor":"dotnet-maestro[bot]","Number":"1589","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191003.5\r\n- **Date Produced**: 10/4/2019 1:12 AM\r\n- **Commit**: eff9fbf446468ca411bf5e0475916f316eea7223\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19503.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1589","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1589)"},{"Id":"502231307","IsPullRequest":false,"CreatedAt":"2019-10-03T18:40:35","Actor":"lucbueno54","Number":"1588","RawContent":null,"Title":"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation","State":"open","Body":"Create references to two net462 projects in NETStandard and enable automatic nuget generation (GeneratePackageOnBuild = true). \r\n\r\nAn important detail that is AssemblyName is different from the csproj file. \r\n\r\nExample: \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>Nuget.NetStandardClassLibrary</id>\r\n    <version>19.9.0</version>\r\n    <authors>Nuget.NetStandardClassLibrary</authors>\r\n    <owners>Nuget.NetStandardClassLibrary</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"nuget.AnotherStandardClassLibrary\" version=\"198.0.0\" exclude=\"Build,Analyzers\" />    <= NETStandard\r\n        <dependency id=\"FrameworkClassLibrary\" version=\"1.0.0\" exclude=\"Build,Analyzers\" /> <= net462 \r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\n\r\n\r\nhttps://github.com/lucbueno54/dotnetStandardReferencesTest ","Url":"https://github.com/dotnet/standard/issues/1588","RelatedDescription":"Open issue \"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation\" (#1588)"},{"Id":"502031073","IsPullRequest":true,"CreatedAt":"2019-10-03T12:29:49","Actor":"dotnet-maestro[bot]","Number":"1587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191002.6\r\n- **Date Produced**: 10/3/2019 2:33 AM\r\n- **Commit**: c8c2917540a568869ba761afa6e4dba6edeb433b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19502.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1587)"},{"Id":"502022842","IsPullRequest":true,"CreatedAt":"2019-10-03T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1586","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191002.11\r\n- **Date Produced**: 10/2/2019 11:34 PM\r\n- **Commit**: da75c6547c64a91eb8a9cecf8c503331c2cc394a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19502.11\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1586","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1586)"},{"Id":"501454733","IsPullRequest":true,"CreatedAt":"2019-10-02T12:30:46","Actor":"dotnet-maestro[bot]","Number":"1585","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1585)"},{"Id":"501445824","IsPullRequest":true,"CreatedAt":"2019-10-02T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1584)"},{"Id":"500858343","IsPullRequest":true,"CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Number":"1583","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1583)"},{"Id":"500849552","IsPullRequest":true,"CreatedAt":"2019-10-01T12:11:41","Actor":"dotnet-maestro[bot]","Number":"1582","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1582","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1582)"},{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"},{"Id":"499762811","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Number":"1579","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1579)"},{"Id":"499412533","IsPullRequest":true,"CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Number":"1578","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1578)"},{"Id":"499405308","IsPullRequest":true,"CreatedAt":"2019-09-27T12:11:32","Actor":"dotnet-maestro[bot]","Number":"1577","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1577)"},{"Id":"498397654","IsPullRequest":true,"CreatedAt":"2019-09-26T15:09:19","Actor":"dotnet-maestro[bot]","Number":"1574","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1574","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1574)"},{"Id":"498433598","IsPullRequest":true,"CreatedAt":"2019-09-26T15:08:53","Actor":"mmitche","Number":"1575","RawContent":null,"Title":"Update to non prerelease","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1575","RelatedDescription":"Closed or merged PR \"Update to non prerelease\" (#1575)"},{"Id":"498844948","IsPullRequest":true,"CreatedAt":"2019-09-26T12:22:45","Actor":"dotnet-maestro[bot]","Number":"1576","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 9:11 AM\r\n- **Commit**: 0a1850cc370986c7348e09bcd1c1adcf522d6db3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1576)"},{"Id":"498249739","IsPullRequest":true,"CreatedAt":"2019-09-25T12:30:34","Actor":"dotnet-maestro[bot]","Number":"1573","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 7:06 PM\r\n- **Commit**: da147ece700c2502b91e57d99213feadcfb9c1f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19474.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1573)"},{"Id":"498239365","IsPullRequest":true,"CreatedAt":"2019-09-25T12:10:59","Actor":"dotnet-maestro[bot]","Number":"1572","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190923.5\r\n- **Date Produced**: 9/24/2019 4:15 AM\r\n- **Commit**: ef4b288de587f0b86e65b3950e9095f714808ade\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19473.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1572","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1572)"},{"Id":"498151562","IsPullRequest":false,"CreatedAt":"2019-09-25T09:07:45","Actor":"NicolasDorier","Number":"1571","RawContent":null,"Title":"Github does not render the diff files of netstandard2.1 correctly","State":"open","Body":"In the [diff for netstandard2.1](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.1_diff.md), Github is showing `(Sorry about that, but we can’t show files that are this big right now.)` instead of a nicely formatted diff.\r\n\r\nProposed workaround:\r\n\r\n* Ping the github team to increase the limit\r\n* Send the dotnet team in holiday during the development of netstandard2.2 so the diff file get smaller.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1571","RelatedDescription":"Open issue \"Github does not render the diff files of netstandard2.1 correctly\" (#1571)"},{"Id":"497649559","IsPullRequest":true,"CreatedAt":"2019-09-24T12:24:38","Actor":"dotnet-maestro[bot]","Number":"1570","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190923.4\r\n- **Date Produced**: 9/23/2019 10:04 PM\r\n- **Commit**: 485441f79ead7878af206a6af61a300e1458616a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19473.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1570)"},{"Id":"497622081","IsPullRequest":false,"CreatedAt":"2019-09-24T11:15:45","Actor":"GammaFour","Number":"1569","RawContent":null,"Title":"Massive problems with no support of UWP in .NET Standard 2.1","State":"open","Body":"How can you release .NET Standard 2.1 and not support UWP? I made the mistake of upgrading my NuGet packages yesterday to the recommended versions and I've been untangling this mess ever since. My server code wants to be .NET Standard 2.1. So I go through and retarget all my common libraries only to find that I've screwed the pooch on my UWP client. This is seriously a big miss.","Url":"https://github.com/dotnet/standard/issues/1569","RelatedDescription":"Open issue \"Massive problems with no support of UWP in .NET Standard 2.1\" (#1569)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"504359579","IsPullRequest":true,"CreatedAt":"2019-10-09T03:06:04","Actor":"Dotnet-GitSync-Bot","Number":"41670","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/41670","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#41670)"},{"Id":"504256747","IsPullRequest":false,"CreatedAt":"2019-10-09T02:34:30","Actor":"JamesNK","Number":"41650","RawContent":null,"Title":"HTTP2: Drawbacks of setting HttpClient.Timeout = Timeout.InfiniteTimespan?","State":"closed","Body":"Query for HttpClient folks:\r\n\r\ngRPC can have long running streaming calls. A streaming call might not return any response for over 100 seconds, which then triggers a cancellation based on `HttpClient.Timeout`.\r\n\r\nI am considering setting `HttpClient.Timeout` to `Timeout.InfiniteTimespan` when the gRPC channel's internal HttpClient is created. What drawbacks to this that I should be aware of? Is this recommended?\r\n\r\nNote: gRPC has its own mechanism for timeouts called [deadlines](https://grpc.io/blog/deadlines/). Deadline is the standardized way of limiting the duration of unresponsive gRPC calls. I would like developers to only think about setting a deadline and not think about it AND `HttpClient.Timeout`. There is no deadline by default.","Url":"https://github.com/dotnet/corefx/issues/41650","RelatedDescription":"Closed issue \"HTTP2: Drawbacks of setting HttpClient.Timeout = Timeout.InfiniteTimespan?\" (#41650)"},{"Id":"504330571","IsPullRequest":true,"CreatedAt":"2019-10-09T01:24:04","Actor":"Dotnet-GitSync-Bot","Number":"41666","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corefx/pull/41666","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#41666)"},{"Id":"504357112","IsPullRequest":false,"CreatedAt":"2019-10-09T01:22:37","Actor":"Alan-Lun","Number":"41669","RawContent":null,"Title":".Net Core 2.2 Memory","State":"open","Body":".Net Core 2.2 API\r\nMemory\r\nhttps://imgur.com/Gri252Z\r\n\r\n.Net Core 2.2 Console 安裝 https://www.nuget.org/packages/Quartz/\r\nMemory\r\nhttps://imgur.com/sZ2KSuX\r\n\r\n.Net Core 2.2 Razor Page 和 MVC\r\nMemory\r\nhttps://imgur.com/53J9bUg\r\n\r\n我有設定 csproj ，Memory 上漲速度有減緩但依舊無法停止每天上漲的 Memory，都不會降下來\r\n`\r\n<ServerGarbageCollection>false</ServerGarbageCollection>\r\n`\r\n\r\n.Net Core 3.0 初始API 也有此狀況 , 記憶體不會下降到原本\r\nhttps://imgur.com/lavFW6r\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41669","RelatedDescription":"Open issue \".Net Core 2.2 Memory\" (#41669)"},{"Id":"504354812","IsPullRequest":false,"CreatedAt":"2019-10-09T01:12:26","Actor":"componentspace","Number":"41668","RawContent":null,"Title":"XML signature fails to verify","State":"open","Body":"An XML signature in a SAML response fails to verify using System.Security.Cryptography.Xml.SignedXml.\r\n\r\nI believe the XML signature should verify as it does when using a Java application.\r\n\r\nThe attached zip includes:\r\n\r\nsamlresponse-fails.xml - signed XML that fails to verify\r\nsamlresponse-verifies.xml - signed XML that does verify, for comparison\r\n\r\nProgram.cs - .NET Core console application demonstrating the problem\r\nVerifySignature.java - Java application that can successfully verify the signatures for both files\r\n\r\nThe samlresponse-fails.xml includes a SAML response that's signed and a SAML assertion that's also signed. It's the SAML response signature that fails to verify in the .NET Core console application but does verify in the Java application.\r\n\r\nThe samlresponse-verifies.xml includes a SAML response that's signed and this verifies in both the .NET Core console application and the Java application.\r\n\r\nThe .NET Core console application was built using .NET Core 3.0 and System.Security.Cryptography.Xml v4.6.\r\n\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\n[xml-signature-issue.zip](https://github.com/dotnet/corefx/files/3705136/xml-signature-issue.zip)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41668","RelatedDescription":"Open issue \"XML signature fails to verify\" (#41668)"},{"Id":"504339633","IsPullRequest":false,"CreatedAt":"2019-10-09T00:08:26","Actor":"robinwilson16","Number":"41667","RawContent":null,"Title":"Suggestion: Give warning/error if model attribute will have no effect such as Newtonsoft [JsonIgnore] Being Replaced in .NET Core 3.0","State":"open","Body":"Is it possible to consider giving a warning if a Model Attribute is not valid?\r\n\r\nAn example is that `[JsonIgnore]` used `using Newtonsoft.Json;` in .NET Core 2.2 but in .NET Core 3.0 this was removed so the `[JsonIgnore]` attribute then had no effect but generates no errors or warnings.\r\n\r\nThe fix is to switch the using statement to:\r\n```\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n```\r\n\r\nHowever it would be good if the serializer could support attributes to check validity helping to track down issues and save having to debug the compiled program.","Url":"https://github.com/dotnet/corefx/issues/41667","RelatedDescription":"Open issue \"Suggestion: Give warning/error if model attribute will have no effect such as Newtonsoft [JsonIgnore] Being Replaced in .NET Core 3.0\" (#41667)"},{"Id":"504324066","IsPullRequest":true,"CreatedAt":"2019-10-08T23:08:55","Actor":"buyaa-n","Number":"41665","RawContent":null,"Title":"Annotate System.Net.WebHeaderCollection for nullable","State":"open","Body":"Contributes to #40623\r\ncc: @dotnet/nullablefc","Url":"https://github.com/dotnet/corefx/pull/41665","RelatedDescription":"Open PR \"Annotate System.Net.WebHeaderCollection for nullable\" (#41665)"},{"Id":"504312210","IsPullRequest":false,"CreatedAt":"2019-10-08T22:30:39","Actor":"tarekgh","Number":"41663","RawContent":null,"Title":"Support using ICU when running on Windows ","State":"open","Body":"Windows 10 now carrying a version of ICU. It will be good to allow .NET Core take advantage of that.","Url":"https://github.com/dotnet/corefx/issues/41663","RelatedDescription":"Open issue \"Support using ICU when running on Windows \" (#41663)"},{"Id":"504309761","IsPullRequest":false,"CreatedAt":"2019-10-08T22:22:43","Actor":"JeremyKuhne","Number":"41662","RawContent":null,"Title":"API Proposal: Add Mutex, Semaphore, and EventWaitHandle creation extension methods that take an ACL","State":"open","Body":"### Summary\r\n\r\nSimilar to #41614, we don't currently have a way to create a synchronization object with a given ACL in .NET Core. We can modify the ACL, but it would be more secure to have the proper ACL on the object from the start.\r\n\r\nThe related ACLs are already exposed in the `System.Threading.AccessControl` assembly , we should add creation extension methods to the existing `ThreadingAclExtensions`.\r\n\r\n### Proposal\r\n\r\nAdd the following three creation methods to the existing `ThreadingAclExtensions` class in the `System.Threading.AccessControl` assembly:\r\n\r\n``` C#\r\nnamespace System.Threading\r\n{\r\n    public static class ThreadingAclExtensions\r\n    {\r\n        // Add\r\n        public static EventWaitHandle CreateEventWaitHandle(\r\n            this EventWaitHandleSecurity eventSecurity\r\n            bool initialState,\r\n            EventResetMode mode,\r\n            string name,\r\n            out bool createdNew);\r\n\r\n        public static Mutex CreateMutex(\r\n            this MutexSecurity mutexSecurity,\r\n            bool initiallyOwned,\r\n            string name,\r\n            out bool createdNew);\r\n\r\n        public static Semaphore CreateSemaphore(\r\n            this SemaphoreSecurity semaphoreSecurity,\r\n            int initialCount,\r\n            int maximumCount,\r\n            string name,\r\n            out bool createdNew);\r\n\r\n        // Existing\r\n        public static EventWaitHandleSecurity GetAccessControl(this EventWaitHandle handle);\r\n        public static void SetAccessControl(this EventWaitHandle handle, EventWaitHandleSecurity eventSecurity);\r\n        public static MutexSecurity GetAccessControl(this Mutex mutex);\r\n        public static void SetAccessControl(this Mutex mutex, MutexSecurity mutexSecurity);\r\n        public static SemaphoreSecurity GetAccessControl(this Semaphore semaphore);\r\n        public static void SetAccessControl(this Semaphore semaphore, SemaphoreSecurity semaphoreSecurity);\r\n    }\r\n}\r\n```\r\n\r\n### Details\r\n\r\nThese primitives live in CoreLib.\r\n\r\nWe **can not** support creating unnamed objects without adding new constructors to the types. With names, we can create and then call the open existing methods. If we want to support unnamed I would suggest we add new `OpenExisting()` overloads that take the handle that our extension methods create. It may not be critical as you need the handle to the unnamed object, so discrete ACL setting should be ok...\r\n\r\n### Related Issues\r\n\r\n#41614 API Proposal: Add file and directory creation methods that take an ACL\r\n\r\nCC: @danmosemsft, @ericstj, @terrajobst, @kouvel","Url":"https://github.com/dotnet/corefx/issues/41662","RelatedDescription":"Open issue \"API Proposal: Add Mutex, Semaphore, and EventWaitHandle creation extension methods that take an ACL\" (#41662)"},{"Id":"504309093","IsPullRequest":true,"CreatedAt":"2019-10-08T22:20:42","Actor":"Jozkee","Number":"41661","RawContent":null,"Title":"(WIP of #41002) Add support for Reference Handling on Deserialization.","State":"open","Body":"Add support for metadata properties ($id, $ref and $values) used for reference handling on Deserialization.\r\n\r\nThis is a work in progress and as such, some things in the implementation are still missing, like correctly handling exception messages, property names, etc.\r\n\r\nThe main purpose of this PR for me is to validate with the area owners if I am on the right path on the prototype/implementation.\r\n\r\nThis PR only covers the Read or Deserializaiton part, I will address Write/Serialization in a separate PR.\r\n","Url":"https://github.com/dotnet/corefx/pull/41661","RelatedDescription":"Open PR \"(WIP of #41002) Add support for Reference Handling on Deserialization.\" (#41661)"},{"Id":"504307971","IsPullRequest":true,"CreatedAt":"2019-10-08T22:17:27","Actor":"bartonjs","Number":"41660","RawContent":null,"Title":"[release/3.0] Handle \"too small\" success from CNG and clear out decryption residuals.","State":"open","Body":"* When NCryptEncrypt or NCryptDecrypt reports success with a cbResult value that doesn't make sense, normalize the error to NTE_BUFFER_TOO_SMALL.\r\n* When resizing arrays for the array-returning implementation, clear out the temporary arrays to reduce the amount of time they're sitting in memory before the GC clears the memory for reissuance.\r\n\r\nPort of #41331 to release/3.0.\r\nUndoes #41360 (because it fixed the tests).","Url":"https://github.com/dotnet/corefx/pull/41660","RelatedDescription":"Open PR \"[release/3.0] Handle \"too small\" success from CNG and clear out decryption residuals.\" (#41660)"},{"Id":"504305494","IsPullRequest":true,"CreatedAt":"2019-10-08T22:10:12","Actor":"bartonjs","Number":"41659","RawContent":null,"Title":"[release/2.1] Handle \"too small\" success from CNG and clear out decryption residuals.","State":"open","Body":"* When NCryptEncrypt or NCryptDecrypt reports success with a cbResult value that doesn't make sense, normalize the error to NTE_BUFFER_TOO_SMALL.\r\n* When resizing arrays for the array-returning implementation, clear out the temporary arrays to reduce the amount of time they're sitting in memory before the GC clears the memory for reissuance.\r\n\r\nPort of #41331 to release/2.1.","Url":"https://github.com/dotnet/corefx/pull/41659","RelatedDescription":"Open PR \"[release/2.1] Handle \"too small\" success from CNG and clear out decryption residuals.\" (#41659)"},{"Id":"504300071","IsPullRequest":false,"CreatedAt":"2019-10-08T21:55:12","Actor":"matteo-prosperi","Number":"41658","RawContent":null,"Title":"HTTPS Proxy support feature requests","State":"open","Body":"Hello,\r\nAs the support of HTTPS proxies is becoming more common, we need to execute HTTP and HTTPS requests through an HTTPS proxy.\r\n\r\nTo be clear, this is not about executing an HTTPS request through an HTTP proxy (which works well), it is about connecting to the proxy itself using HTTPS.\r\n\r\nAs an additional requirement, we are also supposed to authenticate the client using client certificates.\r\n\r\nWhen I try to use a proxy created from an https URI\r\n```c#\r\n            HttpClientHandler handler = new HttpClientHandler();\r\n            handler.Proxy = new WebProxy(\"https://127.0.0.1\");\r\n            HttpClient client = new HttpClient(handler);\r\n```\r\nI receive an `Only the 'http' scheme is allowed for proxies.` `NotSupportedException`.\r\n\r\nI found some indication at https://github.com/dotnet/corefx/issues/20435 that this is not supported at all, so I am reopening this as a feature request.\r\n\r\nThanks","Url":"https://github.com/dotnet/corefx/issues/41658","RelatedDescription":"Open issue \"HTTPS Proxy support feature requests\" (#41658)"},{"Id":"504299059","IsPullRequest":false,"CreatedAt":"2019-10-08T21:52:43","Actor":"JeremyKuhne","Number":"41657","RawContent":null,"Title":"API Proposal: Add pipe creation extension methods that take an ACL","State":"open","Body":"### Summary\r\n\r\nSimilar to #41614, we don't currently have a way to create a pipe with a given ACL in .NET Core. We can modify the ACL, but it would be more secure to have the proper ACL on the pipe from the start.\r\n\r\nThe Pipe ACL `PipeSecurity` is already exposed in the `System.IO.Pipes` assembly , we should add creation extension methods to the existing `PipesAclExtensions`.\r\n\r\n### Proposal\r\n\r\nAdd the following two creation methods to the existing `PipesAclExtensions` class in the `System.IO.Pipes` assembly:\r\n\r\n``` C#\r\nnamespace System.IO.Pipes\r\n{\r\n    public static class PipesAclExtensions\r\n    {\r\n        // Add\r\n        public AnonymousPipeServerStream CreateAnonymousPipeServerStream(\r\n            this PipeSecurity pipeSecurity\r\n            PipeDirection direction,\r\n            HandleInheritability inheritability,\r\n            int bufferSize);\r\n\r\n        public NamedPipeServerStream CreateNamedPipeServerStream(\r\n            this PipeSecurity pipeSecurity\r\n            string pipeName,\r\n            PipeDirection direction,\r\n            int maxNumberOfServerInstances,\r\n            PipeTransmissionMode transmissionMode,\r\n            PipeOptions options,\r\n            int inBufferSize,\r\n            int outBufferSize,\r\n            HandleInheritability inheritability = HandleInheritability.None,\r\n            PipeAccessRights additionalAccessRights = default);\r\n\r\n        // Existing\r\n        public static PipeSecurity GetAccessControl(this PipeStream stream);\r\n        public static void SetAccessControl(this PipeStream stream, PipeSecurity pipeSecurity);\r\n    }\r\n}\r\n```\r\n\r\n### Details\r\n\r\nSince these are already in the same assembly as the modified types it should be pretty straight-forward to implement.\r\n\r\n### Related Issues\r\n\r\n#41614 API Proposal: Add file and directory creation methods that take an ACL\r\n\r\nCC: @danmosemsft, @ericstj, @terrajobst","Url":"https://github.com/dotnet/corefx/issues/41657","RelatedDescription":"Open issue \"API Proposal: Add pipe creation extension methods that take an ACL\" (#41657)"},{"Id":"504290499","IsPullRequest":true,"CreatedAt":"2019-10-08T21:31:18","Actor":"Marusyk","Number":"41656","RawContent":null,"Title":"Fix NRE when context value is null in method Save from Principal class","State":"open","Body":"Related to #41655\r\n\r\nPlease review.\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/41656","RelatedDescription":"Open PR \"Fix NRE when context value is null in method Save from Principal class\" (#41656)"},{"Id":"504287521","IsPullRequest":false,"CreatedAt":"2019-10-08T21:24:30","Actor":"Marusyk","Number":"41655","RawContent":null,"Title":"NullReferenceException in System.DirectoryServices.AccountManagement","State":"open","Body":"In method `Save` from `Principal` class, the `context` object was used before it was verified against null:\r\n\r\nhttps://github.com/dotnet/corefx/blob/7c586d32edce94c910fc8b402f4adedaa3cf05fd/src/System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/Principal.cs#L340-L350\r\n\r\nThe null value for the context parameter is invalid and we are expecting InvalidOperationException.\r\n\r\nThis code will generate `NullReferenceException` when\r\n\r\n```csharp\r\nGroupPrincipal groupPrincipal \r\n  = new GroupPrincipal(new PrincipalContext(ContextType.Machine));\r\ngroupPrincipal.Save(null);\r\n```\r\nContext:\r\nSystem.DirectoryServices.AccountManagement v4.6.0","Url":"https://github.com/dotnet/corefx/issues/41655","RelatedDescription":"Open issue \"NullReferenceException in System.DirectoryServices.AccountManagement\" (#41655)"},{"Id":"504286429","IsPullRequest":false,"CreatedAt":"2019-10-08T21:21:55","Actor":"JeremyKuhne","Number":"41654","RawContent":null,"Title":"API Proposal: Port `MemoryMappedFileSecurity` and add extensions for `MemoryMappedFile`","State":"open","Body":"### Summary\r\n\r\nWe did not port `System.IO.MemoryMappedFiles.MemoryMappedFileSecurity` to Core as it wasn't cross-plat. There is still a need to set security on memory mapped files for Windows, just as there is for files/directories/etc. We should port these to `System.IO.FileSystem.AccessControl` and add extension methods for `MemoryMappedFile` there so Windows specific codebases can be ported and retain their security model.\r\n\r\n### Proposal\r\n\r\nPort the following types from .NET Framework to Core and add them to `System.IO.FileSystem.AccessControl`:\r\n\r\n``` C#\r\nnamespace System.IO.MemoryMappedFiles\r\n{\r\n    // See enum's full definition in .NET Framework\r\n    [Flags]\r\n    public enum MemoryMappedFileRights;\r\n\r\n    public class MemoryMappedFileSecurity : ObjectSecurity<MemoryMappedFileRights> \r\n    {\r\n        public MemoryMappedFileSecurity();\r\n    }\r\n}\r\n```\r\n\r\nAdd the following extension methods for  `MemoryMappedFile` to System.IO.FileSystemAclExtensions:\r\n\r\n``` C#\r\nnamespace System.IO\r\n{\r\n    public static class FileSystemAclExtensions\r\n    {\r\n        public static MemoryMappedFile CreateFromFile(\r\n            this MemoryMappedFileSecurity memoryMappedFileSecurity,\r\n            FileStream fileStream,\r\n            string mapName,\r\n            long capacity,\r\n            MemoryMappedFileAccess access,\r\n            HandleInheritability inheritability,\r\n            bool leaveOpen);\r\n\r\n        public static MemoryMappedFile CreateNew(\r\n            this MemoryMappedFileSecurity memoryMappedFileSecurity,\r\n            string mapName,\r\n            long capacity,\r\n            MemoryMappedFileAccess access,\r\n            MemoryMappedFileOptions options,\r\n            HandleInheritability inheritability);\r\n\r\n        public static MemoryMappedFile CreateOrOpenMappedFile(\r\n            this MemoryMappedFileSecurity memoryMappedFileSecurity,\r\n            string mapName,\r\n            long capacity,\r\n            MemoryMappedFileAccess access,\r\n            MemoryMappedFileOptions options,\r\n            HandleInheritability inheritability);\r\n\r\n        public static MemoryMappedFileSecurity GetAccessControl(\r\n            this MemoryMappedFile memoryMappedFile);\r\n\r\n        public static void SetAccessControl(\r\n            this MemoryMappedFile memoryMappedFile,\r\n            MemoryMappedFileSecurity memoryMappedFileSecurity);\r\n    }\r\n}\r\n```\r\n\r\n### Details\r\n\r\nWe could create a new extensions class, but this still can logically fit with \"file system\". Same goes for the assembly- there isn't enough value in creating a new assembly for this.\r\n\r\nCreating a non-extension static class is also possible, but I'd rather try to come up with a more generic security model that can abstract platform differences and add a more x-plat friendly model. Hanging platform specific helpers off of platform specific types contains this somewhat.\r\n\r\nI didn't make more descriptive names as these match exactly with what is missing on `MemoryMappedFile`. Theory is it helps discovery.\r\n\r\nNote that the implementation of `MemoryMappedFileSecurity` is trivial, it adds nothing to `ObjectSecurity<T>` other than the `T`. Implementing the extension methods is a little more complicated- we may want to try and factor out a more generic set of `CreateFile` helpers that take `NativeObjectSecurity` to reduce duplication.\r\n\r\n### Related Issues\r\n\r\n#29546 MemoryMappedFile is missing CreateFromFile overload that takes MemoryMappedFileSecurity\r\n#41614 API Proposal: Add file and directory creation methods that take an ACL\r\n\r\nCC: @danmosemsft, @ericstj, @terrajobst","Url":"https://github.com/dotnet/corefx/issues/41654","RelatedDescription":"Open issue \"API Proposal: Port `MemoryMappedFileSecurity` and add extensions for `MemoryMappedFile`\" (#41654)"},{"Id":"504286144","IsPullRequest":true,"CreatedAt":"2019-10-08T21:21:16","Actor":"steveharter","Number":"41653","RawContent":null,"Title":"Support JsonConverterAttribute on enumerable properties","State":"open","Body":"Addresses issue where the `JsonConverterAttribute` doesn't work when applied to an enumerable property. See https://github.com/dotnet/corefx/issues/41425.\r\n\r\nThis is expected to be ported to 3.1 since it is blocking scenarios.","Url":"https://github.com/dotnet/corefx/pull/41653","RelatedDescription":"Open PR \"Support JsonConverterAttribute on enumerable properties\" (#41653)"},{"Id":"504243011","IsPullRequest":false,"CreatedAt":"2019-10-08T20:58:18","Actor":"stkash","Number":"41649","RawContent":null,"Title":"Creating custom TimeZoneInfo from existing TimeZoneInfo in Ubuntu fails","State":"closed","Body":"I was trying to create custom time zones from the time zones returned by `TimeZoneInfo.GetSystemTimeZones()` in Ubuntu. I got \"System.InvalidTimeZoneException: The elements of the AdjustmentRule array must be in chronological order and must not overlap.\" exception.\r\n\r\nThis is the simplified version of my code:\r\n```csharp\r\nIList<TimeZoneInfo> customТimeZones = new List<TimeZoneInfo>();\r\nforeach (var timezone in TimeZoneInfo.GetSystemTimeZones())\r\n{\r\n\tcustomТimeZones.Add(\r\n\t\tTimeZoneInfo.CreateCustomTimeZone(\r\n\t\t\ttimezone.Id,\r\n\t\t\ttimezone.BaseUtcOffset,\r\n\t\t\ttimezone.DisplayName,\r\n\t\t\ttimezone.DisplayName,\r\n\t\t\ttimezone.DaylightName,\r\n\t\t\ttimezone.GetAdjustmentRules()));\r\n}\r\n```\r\n\r\nI see two potential problems:\r\n1. In Windows `AdjustmentRule.DateStart` of the next rule is always one day after `AdjustmentRule.DateEnd` of the last rule. In Ubuntu they are the same.\r\nWindows:\r\n![Mountain Standard Time Windows](https://user-images.githubusercontent.com/7841361/66427552-373aec80-e9e2-11e9-8d1f-8d95fc4fe824.jpg)\r\n\r\nUbuntu:\r\n![Mountain Standard Time Ubuntu1](https://user-images.githubusercontent.com/7841361/66427562-3bffa080-e9e2-11e9-8a44-0dc2647031c5.jpg)\r\n\r\n2. Some of the rules in Ubuntu are messy. For example, \"America/Phoenix\" has 12 adjustment rules, but there is no continuity after zone with DateEnd = {1/1/1944 12:00:00 AM}. Next zones overlap each other:\r\n![Mountain Standard Time Ubuntu](https://user-images.githubusercontent.com/7841361/66427589-4e79da00-e9e2-11e9-94b7-c7b28d970253.jpg)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41649","RelatedDescription":"Closed issue \"Creating custom TimeZoneInfo from existing TimeZoneInfo in Ubuntu fails\" (#41649)"},{"Id":"504264988","IsPullRequest":true,"CreatedAt":"2019-10-08T20:34:18","Actor":"cocowalla","Number":"41651","RawContent":null,"Title":"Simple HKDF implementation","State":"open","Body":"Simple, non-spanified HKDF implementation as a starting point for #29660 ","Url":"https://github.com/dotnet/corefx/pull/41651","RelatedDescription":"Open PR \"Simple HKDF implementation\" (#41651)"},{"Id":"504323265","IsPullRequest":false,"CreatedAt":"2019-10-08T19:23:44","Actor":"kekekeks","Number":"41664","RawContent":null,"Title":"[Feature request] A way to customize the line separator in StringBuilder","State":"open","Body":"Right now it's impossible to get consistent behavior across platforms. Which is kind of important when working with file formats or network protocols that are sensitive to the line separator.\r\n\r\nA commonly used workaround is an extension method like:\r\n```cs\r\npublic static StringBuilder AppendLineLf(this StringBuilder sb, string line)\r\n   => sb.Append(line).Append('\\n');\r\n```\r\nbut this approach can't be used when we are passing the StringBuilder to a library from nuget.\r\n\r\nThe proposal is to add a separate constructor that accepts a line separator.","Url":"https://github.com/dotnet/corefx/issues/41664","RelatedDescription":"Open issue \"[Feature request] A way to customize the line separator in StringBuilder\" (#41664)"},{"Id":"504219579","IsPullRequest":true,"CreatedAt":"2019-10-08T18:58:57","Actor":"CodeBlanch","Number":"41648","RawContent":null,"Title":"EnumMemberAttribute support","State":"open","Body":"1. Added support for using EnumMemberAttribute with JsonStringEnumConverter to change the value written/read from JSON when processing enums.\r\n\r\nExample:\r\n```csharp\r\n        [JsonConverter(typeof(JsonStringEnumConverter))]\r\n        public enum MyCustomEnum\r\n        {\r\n            First = 1,\r\n            Second = 2,\r\n            [EnumMember(Value = \"third value\")]\r\n            Third = 3\r\n        }\r\n```\r\nIn that example MyCustomEnum.Third will round-trip as \"third value\" in JSON.\r\n\r\nThis gives System.Text.Json parity with Json.Net wrt Enums.\r\n\r\n2. Fixed JsonNamingPolicy round-trip issue.\r\n\r\nIf for some reason you define a JsonNamingPolicy that builds values Enum.Parse won't understand, than enums won't round-trip.\r\n\r\nExample:\r\n```csharp\r\n        internal class JsonUpperInvariantWithUnderscoreNamingPolicy : JsonNamingPolicy\r\n        {\r\n            public override string ConvertName(string name) => $\"_{name.ToUpperInvariant()}\";\r\n        }\r\n```\r\n\r\nThat JsonNamingPolicy will create values during serialization that won't be understood during deserialization.\r\n\r\n# Issues\r\nResolves https://github.com/dotnet/corefx/issues/41578","Url":"https://github.com/dotnet/corefx/pull/41648","RelatedDescription":"Open PR \"EnumMemberAttribute support\" (#41648)"},{"Id":"504206312","IsPullRequest":true,"CreatedAt":"2019-10-08T18:31:11","Actor":"josalem","Number":"41647","RawContent":null,"Title":"Prevent ImplicitTransform of index getter method (#41418)","State":"open","Body":"Cherry-pick of #41418 to release/3.1\r\n\r\nFix for the exception thrown in dotnet/coreclr#26890 that is a fallout of the issue being fixed in `DiagnosticSourceEventSource` in conjunction with aspnet/AspNetCore#11730.\r\n\r\n<details>\r\n    <summary>small repro (click to expand)</summary>\r\n\r\n---\r\nAttach `dotnet trace` to this app and turn on the `Microsoft-Diagnostics-DiagnosticSource` provider.\r\n\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"PID: {System.Diagnostics.Process.GetCurrentProcess().Id}\");\r\n            var diagnosticListener = new DiagnosticListener(\"MySource\");\r\n            while (true)\r\n            {\r\n                Console.Write(\">\");\r\n                var input = Console.ReadLine();\r\n                if (input == \"exit\")\r\n                    break;\r\n\r\n                diagnosticListener.Write(\"MyEvent\", new List<int> { 1, 2, 3 });\r\n            }\r\n        }\r\n    }\r\n```\r\n---\r\n</details>\r\n\r\n### Root Cause of Exception:\r\nThe getter for the implicit `Item` property for the index operator takes an argument, and `DiagnosticSourceEventSource` makes the assumption that property getters don't take arguments.  It tries to bind the resulting delegate of type `[retval] get_Item(int32 index)` to the type `Func<TObject, TProperty>` so the binding fails and we get the exception you see in dotnet/coreclr#26890.\r\n\r\nThis change prevents `DiagnosticSourceEventSource` from attempting to serialize the implicit `Item` property by blocking index getters.\r\n\r\nASP.NET Core has used `DiagnosticSourceEventSource` for their eventing.  Since they changed their event types to inherit from `IReadOnlyCollection` in 3.0, they will all hit the exception in dotnet/coreclr#26890 when turned on causing a bad diagnostic experience if you do not explicitly specify a transform.\r\n\r\nThere is minimal risk in this change since we are only preventing a bad code path from being hit.\r\n\r\nCC - @tommcdon @noahfalk ","Url":"https://github.com/dotnet/corefx/pull/41647","RelatedDescription":"Open PR \"Prevent ImplicitTransform of index getter method (#41418)\" (#41647)"},{"Id":"504183637","IsPullRequest":false,"CreatedAt":"2019-10-08T17:42:39","Actor":"Varorbc","Number":"41645","RawContent":null,"Title":"Http/2 support for HttpWebRequest","State":"open","Body":"Http/2 has been supported in HttpClient. The underlying implementation of HttpWebRequest is HttpClient. However, HttpWebRequest does not support Http/2.\r\n\r\nhttps://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/\r\n\r\n![image](https://user-images.githubusercontent.com/5714438/66382556-052f8780-e9ee-11e9-852c-e704c516b1b9.png)\r\n\r\nhttps://github.com/dotnet/corefx/blob/5ad15fcb189a9c232051d03c1e889f985f62232b/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L1156-L1243\r\n\r\nhttps://github.com/dotnet/corefx/blob/5ad15fcb189a9c232051d03c1e889f985f62232b/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs#L816-L844\r\n\r\nhttps://github.com/dotnet/corefx/blob/5ad15fcb189a9c232051d03c1e889f985f62232b/src/System.Net.HttpListener/src/System/Net/Windows/HttpListenerResponse.Windows.cs#L80-L97\r\n","Url":"https://github.com/dotnet/corefx/issues/41645","RelatedDescription":"Open issue \"Http/2 support for HttpWebRequest\" (#41645)"},{"Id":"504183054","IsPullRequest":false,"CreatedAt":"2019-10-08T17:41:23","Actor":"cedemax","Number":"41644","RawContent":null,"Title":"NullReferenceException when Deserializing with null PropertyNamingPolicy option","State":"open","Body":"Deserializing a complex object (I could not replicate the error with a dummy object) with a null PropertyNamingPolicy throws NullReferenceException.\r\n\r\nMy code : \r\n```C#\r\nvar a = JsonSerializer.Deserialize<T>(jsonString,options);  // options.PropertyNamingPolicy = null\r\n```\r\nStack trace:\r\n\r\n```\r\nSystem.NullReferenceException\r\n  HResult=0x80004003\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.JsonPropertyInfo.Read(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfo.cs:line 345\r\n   at System.Text.Json.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.HandleValue.cs:line 28\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.cs:line 50\r\n   at System.Text.Json.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.Helpers.cs:line 22\r\n   at System.Text.Json.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.String.cs:line 73\r\n   at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options) in /_/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.String.cs:line 28\r\n```\r\n\r\nThe jsonString \r\n```javascript\r\n{\"General\":{\"InnerRegionMode\":\"Hole\"},\"File\":{\"Format\":\"svg\",\"PreferZip\":false,\"PreferOneFile\":false,\"SupportedFormats\":[[\"svg\"]]},\"Coordinates\":{\"System\":{\"Projection\":{\"Name\":\"ETRS-TM35FIN\"},\"Scale\":1000.0,\"Origin\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Unit\":{\"UnitOf\":2,\"Name\":\"millimetre\",\"Scale\":0.001,\"Symbol\":\"mm\"}},\"Flatten\":false,\"Centering\":false,\"Grids\":null,\"OneMetre\":1.0,\"OneMillimetre\":0.001,\"OneCentimetre\":0.01},\"Terrain\":{\"Exaggerate\":2.5,\"Contours\":{\"Closed\":true,\"Delta\":0.5,\"Reduce\":0.1,\"Smooth\":0.0,\"MinArea\":9.0,\"Highlights\":{\"N\":10,\"OutlineColor\":\"rgba(0,0,0,0.54)\",\"FillColor\":null,\"StrokeWidth\":0.9,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Labels\":1,\"LabelSpacing\":50.0,\"IndividualLayers\":false,\"OutlineColor\":\"rgba(0,0,0,0.29)\",\"FillColor\":null,\"StrokeWidth\":0.5,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Mesh\":null,\"Compression\":{\"InnerDensity\":1.0,\"OuterDensity\":1.0,\"DensityProfile\":\"Flat\",\"InnerRegionTemplateId\":null,\"Enabled\":false,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Texture\":{\"Colors\":[\"rgba(69,114,45,1)\",\"rgba(144,160,110,1)\",\"rgba(195,160,105,1)\",\"rgba(243,243,243,1)\"],\"ColorMap\":{\"Colors\":[\"69, 114, 45\",\"144, 160, 110\",\"195, 160, 105\",\"243, 243, 243\"],\"WaterColor\":\"\",\"Contrast\":0.0,\"Min\":0.0,\"Max\":1.0,\"IsClear\":false},\"FlatColor\":\"DarkGray\",\"Style\":\"ColorMap\",\"SupportedStyles\":null,\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"CellLimit\":0.0,\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Shores\":{\"GuessDepth\":false,\"OutlineColor\":\"rgba(0,100,200,0.59)\",\"FillColor\":\"rgba(66,164,194,0.48)\",\"StrokeWidth\":1.0,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Roads\":{\"DefaultWidth\":3.0,\"ExtraWidth\":0.0,\"OutlineColor\":\"rgba(53,51,51,0.92)\",\"FillColor\":\"rgba(184,167,167,1)\",\"StrokeWidth\":1.0,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Buildings\":{\"GuessHeight\":false,\"ManualHeight\":0.0,\"ShowID\":false,\"OutlineColor\":\"rgba(0,0,0,1)\",\"FillColor\":\"rgba(138,138,138,1)\",\"StrokeWidth\":1.0,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Properties\":{\"Text\":{\"ProportionalSize\":true,\"MinSize\":1.0,\"MaxSize\":50.0,\"OutlineColor\":\"rgba(0,0,0,1)\",\"FillColor\":\"rgba(255,255,255,1)\",\"StrokeWidth\":4.0,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"Markers\":{\"ShowAccuracyBounds\":true,\"ShowID\":false,\"OutlineColor\":\"rgba(255,0,255,1)\",\"FillColor\":null,\"StrokeWidth\":0.3,\"DataStyle\":\"Outline2D\",\"Enabled\":false,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0},\"OutlineColor\":\"rgba(132,35,221,0.79)\",\"FillColor\":null,\"StrokeWidth\":1.0,\"DataStyle\":\"Outline2D\",\"Enabled\":true,\"Layer\":null,\"Flatten\":false,\"ClipMode\":0}}\r\n```\r\n\r\nThe type it maps to has a lot of code so I won't be posting it here. The deserialization 'works', but everything is null after deserialization when using JsonNamingPolicy.CamelCase.\r\nIf using PropertyNameCaseInsensitive = true and JsonNamingPolicy.CamelCase then it will again throw NullReferenceException on the same line as before...\r\n\r\nEDIT:\r\n-------------------------------------\r\n\r\nThis seemed to be caused by having a custom JsonConverter<System.Drawing.Color?>, but no JsonConverter<System.Drawing.Color> defined... The complex class contained both Color and Color? objects. Adding the non-nullable version fixed the issue. The error was quite unhelpful however.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41644","RelatedDescription":"Open issue \"NullReferenceException when Deserializing with null PropertyNamingPolicy option\" (#41644)"},{"Id":"504177884","IsPullRequest":true,"CreatedAt":"2019-10-08T17:29:45","Actor":"eiriktsarpalis","Number":"41643","RawContent":null,"Title":"Httpstress: add max execution time argument","State":"open","Body":"Makes the following changes to the stress suite app:\r\n\r\n* Adds a `-maxExecutionTime` argument. Need this to enable running the stress suite for a predetermined amount of time on Azure pipelines.\r\n* Return nonzero exit code if there are errors.\r\n* Also adds nullable reference type annotations.","Url":"https://github.com/dotnet/corefx/pull/41643","RelatedDescription":"Open PR \"Httpstress: add max execution time argument\" (#41643)"},{"Id":"504174662","IsPullRequest":false,"CreatedAt":"2019-10-08T17:23:02","Actor":"Tornhoof","Number":"41642","RawContent":null,"Title":"Async XmlWriter is calling sync Stream Write/Flush","State":"open","Body":"### Describe the bug\r\nI originally opened the bug in ASPNET repo https://github.com/aspnet/AspNetCore/issues/14811. In ASP.NET Core 3.x it is not possible to directly write data into a HTTP Response, because SyncIO is now disabled by default.\r\n**Unfortunately, even if the user does not do any sync calls (see repo below), the code in corefx does sync calls on closing the writer.**\r\n\r\nhttps://github.com/dotnet/corefx/blob/c1092870c306b8da256e455cec0814486255d0c1/src/System.Private.Xml/src/System/Xml/Core/XmlWellFormedWriter.cs#L1266\r\nIf you take a look at the flush implementation in ``XmlUtf8RawTextWriter``.\r\nhttps://github.com/dotnet/corefx/blob/c1092870c306b8da256e455cec0814486255d0c1/src/System.Private.Xml/src/System/Xml/Core/XmlUtf8RawTextWriter.cs#L674\r\nYou see that it writes to stream regardless of the bufPos, a few lines below the bufPos is set to 1 https://github.com/dotnet/corefx/blob/c1092870c306b8da256e455cec0814486255d0c1/src/System.Private.Xml/src/System/Xml/Core/XmlUtf8RawTextWriter.cs#L701\r\nThat means even if the bufPos is 1, the write method is called with length 0.\r\n\r\nUnfortunately this poses a problem in ``HttpResponseStream`` (Kestrel/IIS):\r\nhttps://github.com/aspnet/AspNetCore/blob/354d859d50f252526be5a6264434d1765df86450/src/Servers/Kestrel/Core/src/Internal/Http/HttpResponseStream.cs#L80-L83\r\nThere the SyncIO Check is done without checking for the count argument, meaning it always throws.\r\n\r\nPossible solutions:\r\n1. Make the writers proper Async Dispose, implementing ``IAsyncDisposable`` and doing async close/flush.\r\n\r\n2. Change XmlUtf8RawTextWriter in ``FlushBuffer`` to only write to the stream if length > 0, unfortunately this still leaves the flush stream in both ``Close`` and ``Flush``. For that ``bufPos`` needs to be tracked in there too (making that idea kinda ugly).\r\n\r\n3. Add another setting to XmlWriterSettings, e.g. ``FlushOnClose`` similar to the ``WriteEndDocumentOnClose`` and put the writer.Flush behind a check for it in ``XmlWellFormedWriter``\r\n\r\n4. Change those SyncIO Checks to only throw on count > 0 (I tried with that solution in the other repo, but @davidfowl  was not in favor of it)\r\n\r\nMay I suggest that you consider adding the first solution to the backlog for 5.0, I know it's too late for any of the solutions for 3.1, but atleast there are multiple workarounds documented.\r\n\r\nThe 4th way is currently what I'm trying in my solution, instead of using bodystream directly, I use a wrapperstream checking for the count == 0 case and make the flush a NOP, because in my code I know I flushed the data.\r\n\r\n```csharp\r\n        public override void Write(byte[] buffer, int offset, int count)\r\n        {\r\n            if (count > 0)\r\n            {\r\n                _input.Write(buffer, offset, count);\r\n            }\r\n        }\r\n```\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0'\r\n2. Run this code (see repro below)\r\n3. With these arguments: none\r\n4. See error\r\n\r\n\r\n### Expected behavior\r\nNo exception, it works.\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n\r\n### Additional context\r\n\r\nRepro:\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace XmlWriterRepro\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); });\r\n    }\r\n\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.UseRouting();\r\n\r\n            app.UseEndpoints(endpoints => { endpoints.MapGet(\"/\", async context => { await WriteXmlAsync(context.Response.Body, \"Hello World\"); }); });\r\n        }\r\n\r\n        private static async Task WriteXmlAsync(Stream output, string text)\r\n        {\r\n            using (var xmlWriter = XmlWriter.Create(output, new XmlWriterSettings {Async = true, CloseOutput = false, WriteEndDocumentOnClose = false, CheckCharacters = false}))\r\n            {\r\n                await xmlWriter.WriteStartDocumentAsync().ConfigureAwait(false);\r\n                await xmlWriter.WriteElementStringAsync(null, \"Value\", null, text).ConfigureAwait(false);\r\n                await xmlWriter.WriteEndDocumentAsync().ConfigureAwait(false);\r\n                await xmlWriter.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nWith wrapper stream, just fyi:\r\n<details>\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace XmlWriterRepro\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); });\r\n    }\r\n\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.UseRouting();\r\n\r\n            app.UseEndpoints(endpoints => { endpoints.MapGet(\"/\", async context => { await WriteXmlAsync(new WriteCheckWrapperStream(context.Response.Body), \"Hello World\"); }); });\r\n        }\r\n\r\n        private static async Task WriteXmlAsync(Stream output, string text)\r\n        {\r\n            using (var xmlWriter = XmlWriter.Create(output, new XmlWriterSettings {Async = true, CloseOutput = false, WriteEndDocumentOnClose = false, CheckCharacters = false}))\r\n            {\r\n                await xmlWriter.WriteStartDocumentAsync().ConfigureAwait(false);\r\n                await xmlWriter.WriteElementStringAsync(null, \"Value\", null, text).ConfigureAwait(false);\r\n                await xmlWriter.WriteEndDocumentAsync().ConfigureAwait(false);\r\n                await xmlWriter.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class WriteCheckWrapperStream : Stream\r\n    {\r\n        private readonly Stream _input;\r\n\r\n        public WriteCheckWrapperStream(Stream input)\r\n        {\r\n            _input = input;\r\n        }\r\n\r\n        public override Task FlushAsync(CancellationToken cancellationToken)\r\n        {\r\n            return _input.FlushAsync(cancellationToken);\r\n        }\r\n\r\n        public override void Flush()\r\n        {\r\n        }\r\n\r\n        public override int Read(byte[] buffer, int offset, int count)\r\n        {\r\n            return _input.Read(buffer, offset, count);\r\n        }\r\n\r\n        public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken)\r\n        {\r\n            return _input.CopyToAsync(destination, bufferSize, cancellationToken);\r\n        }\r\n\r\n        public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\r\n        {\r\n            return _input.ReadAsync(buffer, offset, count, cancellationToken);\r\n        }\r\n\r\n        public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default)\r\n        {\r\n            return _input.ReadAsync(buffer, cancellationToken);\r\n        }\r\n\r\n        public override long Seek(long offset, SeekOrigin origin)\r\n        {\r\n            return _input.Seek(offset, origin);\r\n        }\r\n\r\n        public override void SetLength(long value)\r\n        {\r\n            _input.SetLength(value);\r\n        }\r\n\r\n        public override void Write(byte[] buffer, int offset, int count)\r\n        {\r\n            if (count > 0)\r\n            {\r\n                _input.Write(buffer, offset, count);\r\n            }\r\n        }\r\n\r\n        public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\r\n        {\r\n            return _input.WriteAsync(buffer, offset, count, cancellationToken);\r\n        }\r\n\r\n        public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = new CancellationToken())\r\n        {\r\n            return _input.WriteAsync(buffer, cancellationToken);\r\n        }\r\n\r\n        public override bool CanRead => _input.CanRead;\r\n\r\n        public override bool CanSeek => _input.CanSeek;\r\n\r\n        public override bool CanWrite => _input.CanWrite;\r\n\r\n        public override long Length => _input.Length;\r\n\r\n        public override long Position\r\n        {\r\n            get => _input.Position;\r\n            set => _input.Position = value;\r\n        }\r\n    }\r\n}\r\n```\r\n</details>\r\n","Url":"https://github.com/dotnet/corefx/issues/41642","RelatedDescription":"Open issue \"Async XmlWriter is calling sync Stream Write/Flush\" (#41642)"},{"Id":"504171793","IsPullRequest":true,"CreatedAt":"2019-10-08T17:16:42","Actor":"davidsh","Number":"41641","RawContent":null,"Title":"[release/uwp6.2] Clean up some tests and move to new Azure endpoint","State":"open","Body":"**Test only fixes**\r\n\r\nPort PR #36018 from master branch (and similar #41603 from release/2.1 branch)\r\n\r\nThis PR changes the Azure test endpoint to use Azure App Service instead of the classic Azure\r\nCloud Service endpoint. The use of the classic Azure Cloud Service is no longer recommended\r\nsince it is harder to maintain.\r\n\r\nOnce all remaining branches are converted, we will shut down the corefx-net.cloudapp.net\r\nendpoint.\r\n\r\nThis PR also includes some other test fixes and tests disabled due to active issues.","Url":"https://github.com/dotnet/corefx/pull/41641","RelatedDescription":"Open PR \"[release/uwp6.2] Clean up some tests and move to new Azure endpoint\" (#41641)"},{"Id":"504196471","IsPullRequest":false,"CreatedAt":"2019-10-08T14:15:10","Actor":"khteh","Number":"41646","RawContent":null,"Title":".Net Core 3.0 TimeSpan (de)serialization error","State":"open","Body":"I am using .Net Core 3.0 and have the following string which I need to deserialize with Newtonsoft.Json:\r\n```\r\n{\r\n\t\"userId\": null,\r\n\t\"accessToken\": null,\r\n\t\"refreshToken\": null,\r\n\t\"sessionId\": null,\r\n\t\"cookieExpireTimeSpan\": {\r\n\t\t\"ticks\": 0,\r\n\t\t\"days\": 0,\r\n\t\t\"hours\": 0,\r\n\t\t\"milliseconds\": 0,\r\n\t\t\"minutes\": 0,\r\n\t\t\"seconds\": 0,\r\n\t\t\"totalDays\": 0,\r\n\t\t\"totalHours\": 0,\r\n\t\t\"totalMilliseconds\": 0,\r\n\t\t\"totalMinutes\": 0,\r\n\t\t\"totalSeconds\": 0\r\n\t},\r\n\t\"claims\": null,\r\n\t\"success\": false,\r\n\t\"errors\": [\r\n\t\t{\r\n\t\t\t\"code\": \"Forbidden\",\r\n\t\t\t\"description\": \"Invalid username unknown!\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\nand bump into the following error:\r\n```\r\n   Newtonsoft.Json.JsonSerializationException : Cannot deserialize the current JSON object (e.g. {\"name\":\"value\"}) into type 'System.TimeSpan' because the type requires a JSON primitive value (e.g. string, number, boolean, null) to deserialize correctly.\r\nTo fix this error either change the JSON to a JSON primitive value (e.g. string, number, boolean, null) or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object.\r\nPath 'cookieExpireTimeSpan.ticks', line 1, position 103.\r\n```\r\nThe error string actually happens when reading the content of HttpResponseMessage:\r\n```\r\nvar httpResponse = await _client.PostAsync(\"/api/auth/login\", new StringContent(JsonConvert.SerializeObject(new API.Models.Request.LoginRequest()), Encoding.UTF8, \"application/json\"));\r\nvar stringResponse = await httpResponse.Content.ReadAsStringAsync();\r\n```\r\nThe server controller method returns:\r\n```\r\nreturn new JsonResult(result) { StatusCode = whatever; };\r\n```\r\nhttps://stackoverflow.com/questions/58283761/net-core-3-0-timespan-deserialization-error","Url":"https://github.com/dotnet/corefx/issues/41646","RelatedDescription":"Open issue \".Net Core 3.0 TimeSpan (de)serialization error\" (#41646)"},{"Id":"504270286","IsPullRequest":false,"CreatedAt":"2019-10-08T10:13:09","Actor":"Cronan","Number":"41652","RawContent":null,"Title":"AuthenticationException in Centos 7 using WCF from .NET Core 2.1.13","State":"open","Body":"**Describe the bug**\r\nI use the WCF client from .NET Core to access Windows WCF services from Linux.\r\nEverything works correctly using .NET Core 2.1.3\r\n\r\nUpgrading to 2.1.13 results in the exception below when calling the WCF client.\r\nI also see the same problem with .NET Core 2.2 latest or 3.0 latest.\r\n\r\n**Expected behavior**\r\nI use the WCF client from .NET Core to access Windows WCF services from Linux.\r\nEverything works correctly using .NET Core 2.1.3\r\n\r\nI expected this to continue working in newer versions of .NET Core.\r\n\r\n**Additional context**\r\nI use `kinit` before making this call to ensure that I'm authenticated correctly.\r\nAm I missing some dependencies, or could this be something else?\r\n\r\n**Linux Version**\r\n```\r\ncat /etc/os-release\r\nNAME=\"CentOS Linux\"\r\nVERSION=\"7 (Core)\"\r\nID=\"centos\"\r\nID_LIKE=\"rhel fedora\"\r\nVERSION_ID=\"7\"\r\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\r\nANSI_COLOR=\"0;31\"\r\nCPE_NAME=\"cpe:/o:centos:centos:7\"\r\nHOME_URL=\"https://www.centos.org/\"\r\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\r\n\r\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\r\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\r\nREDHAT_SUPPORT_PRODUCT=\"centos\"\r\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\r\n```\r\n\r\n**.NET Core Version**\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.802\r\n Commit:    177d0b2525\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.802/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.13\r\n  Commit:  1a165a1588\r\n\r\n.NET Core SDKs installed:\r\n  2.1.802 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n```\r\n\r\n**Full Stack trace**\r\n```\r\nSystem.ComponentModel.Win32Exception: GSSAPI operation failed with error - Unspecified GSS failure.  Minor code may provide more information (Server not found in Kerberos database).\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nSystem.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n   at System.Net.Security.NegoState.StartSendAuthResetSignal(LazyAsyncResult lazyResult, Byte[] message, Exception exception)\r\n   at System.Net.Security.NegoState.StartSendBlob(Byte[] message, LazyAsyncResult lazyResult)\r\n   at System.Net.Security.NegoState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, String targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential credential, String targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.NegotiateStream.<>c__DisplayClass27_0.<AuthenticateAsClientAsync>b__0(AsyncCallback callback, Object state)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl(Func`3 beginMethod, Func`2 endFunction, Action`1 endAction, Object state, TaskCreationOptions creationOptions)\r\n   at System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential credential, String targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel)\r\n   at System.ServiceModel.Channels.WindowsStreamSecurityUpgradeProvider.WindowsStreamSecurityUpgradeInitiator.OnInitiateUpgradeAsync(Stream stream, OutWrapper`1 remoteSecurity)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nSystem.ServiceModel.Security.SecurityNegotiationException: Authentication failed, see inner exception.\r\n   at System.ServiceModel.Channels.WindowsStreamSecurityUpgradeProvider.WindowsStreamSecurityUpgradeInitiator.OnInitiateUpgradeAsync(Stream stream, OutWrapper`1 remoteSecurity)\r\n   at System.ServiceModel.Channels.StreamSecurityUpgradeInitiatorBase.InitiateUpgradeAsync(Stream stream)\r\n   at System.ServiceModel.Channels.ConnectionUpgradeHelper.InitiateUpgradeAsync(StreamUpgradeInitiator upgradeInitiator, OutWrapper`1 connectionWrapper, ClientFramingDecoder decoder, IDefaultCommunicationTimeouts defaultTimeouts, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ClientFramingDuplexSessionChannel.SendPreambleAsync(IConnection connection, ArraySegment`1 preamble, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ConnectionPoolHelper.EstablishConnectionAsync(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ClientFramingDuplexSessionChannel.OnOpenAsync(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.OnOpenAsyncInternal(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.System.ServiceModel.IAsyncCommunicationObject.OpenAsync(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.OpenAsyncInternal(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)\r\n   at System.Runtime.TaskHelpers.CallActionAsync[TArg](Action`1 action, TArg argument)\r\n   at System.ServiceModel.Channels.CommunicationObject.OpenOtherAsync(ICommunicationObject other, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannel.OnOpenAsync(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.OnOpenAsyncInternal(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.System.ServiceModel.IAsyncCommunicationObject.OpenAsync(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.CommunicationObject.OpenAsyncInternal(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannel.CallOpenOnce.System.ServiceModel.Channels.ServiceChannel.ICallOnce.Call(ServiceChannel channel, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannel.CallOnceManager.CallOnce(TimeSpan timeout, CallOnceManager cascade)\r\n   at System.ServiceModel.Channels.ServiceChannel.EnsureOpened(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannel.Call(String action, Boolean oneway, ProxyOperationRuntime operation, Object[] ins, Object[] outs, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannelProxy.InvokeService(MethodCall methodCall, ProxyOperationRuntime operation)\r\n   at System.ServiceModel.Channels.ServiceChannelProxy.Invoke(MethodInfo targetMethod, Object[] args)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Reflection.DispatchProxyGenerator.Invoke(Object[] args)\r\n   at generatedProxy_1.GetById(Int32 )\r\n   at MyApp.Client.Connections.BaseConnection`1.ExecuteOnSingleUseChannel[T](Func`2 activity)\r\n```","Url":"https://github.com/dotnet/corefx/issues/41652","RelatedDescription":"Open issue \"AuthenticationException in Centos 7 using WCF from .NET Core 2.1.13\" (#41652)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"504340888","IsPullRequest":true,"CreatedAt":"2019-10-09T00:13:25","Actor":"tokarzkj","Number":"39148","RawContent":null,"Title":"Feature: Add wrap all elements for initializer expressions","State":"open","Body":"Users will now be offered wrapping refactor options similar to functions with multiple arguments and parameters. The following refactor options are available for initializer expressions:\r\n\r\n- Wrap every\r\n- Unwrap and indent\r\n- Wrap long list\r\n\r\nI added 3 unit tests to test:\r\n\r\n- Initializer that should offer no suggestion\r\n- Small initializer with a few values\r\n- Long initializer with 9 values\r\n\r\nThis implements the request from issue #37428","Url":"https://github.com/dotnet/roslyn/pull/39148","RelatedDescription":"Open PR \"Feature: Add wrap all elements for initializer expressions\" (#39148)"},{"Id":"504340409","IsPullRequest":false,"CreatedAt":"2019-10-09T00:11:23","Actor":"vsfeedback","Number":"39147","RawContent":null,"Title":"ViewsOfAClassPublicFunctionsInC++C#VB","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/753971/viewsofaclasspublicfunctionsinccvb.html)._\n\n---\n<p></p><p>Hi there. This is just a suggestion to the Community and a request to engage with the Microsoft Development </p><p>Community. I am very keen to have your comments on this suggestion please. </p><p>My suggestion is to have a directive or tag along the lines of #region in C# in Visual Studio that groups sections of a class' public interface. </p> <p>Hence this could then be viewed in Intellisense when writing code. </p> <p>For example if you have a Car class that has different Drive functions </p><p>eg DriveFast, DriveSlow, DriveMedium and other public functions aswell. You could group the Drive functions under the Drive tag. Then in Intellisense in Visual Studio you </p><p>could drill down for example if you had a car variable aCar.</p> <p>It would appear in Inteliisense as acar. Drive.DriveSlow and when you selected the function </p><p>it would appear in code as acar. DriveSlow. </p><p>This could be optional with functions appearing under their categories in Intellisense if they were tagged, </p><p>or not if they weren't. </p> <p>So this would be a view of a class' public functions rather like a View of a database. </p> <p>This could help in documentation, understanding, and writing code in Visual Studio and maybe lessen </p><p>the need to have Interfaces.</p>\n\n---\n### Original Comments\n\n#### Fiona Niu[MSFT] on 9/30/2019, 00:11 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n\n#### Taher Hassan on 10/1/2019, 04:18 AM: \n\n<p>Hi Fiona,</p><p>Many thanks - that's excellent. I look forward to hearing what you think.</p><p>Many thanks and best regards, Taher Hassan</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39147","RelatedDescription":"Open issue \"ViewsOfAClassPublicFunctionsInC++C#VB\" (#39147)"},{"Id":"504338890","IsPullRequest":false,"CreatedAt":"2019-10-09T00:05:45","Actor":"kendrahavens","Number":"39146","RawContent":null,"Title":"Object creation can be simplified suggestion should be more clever","State":"open","Body":"[Original Developer Community feedback ](https://developercommunity.visualstudio.com/content/idea/754229/object-creation-can-be-simplified-suggestion-shoul.html)copied to preserve code format.\r\n\r\nAfter applying object creation can be simplified refactoring suggestion, I moved some method calling code below so that more object.field/property = … could be grouped with the creation code block, however it seems I don’t get a newer suggestion to also place them in the simplified object creation block it created before\r\n\r\n```csharp\r\nMailMessage emailmessage = new MailMessage\r\n        {\r\n            SubjectEncoding = encoding, //...using Greek (ISO) encoding instead of UTF8 or other Unicode one, since mail clients at old XP machines usually can't show Unicode\r\n            BodyEncoding = encoding,\r\n\r\n            From = new MailAddress(EMAIL_FROM, EMAIL_FROM_NAME)\r\n        };\r\n\r\n        //*** moved code from this position (see *** below) that made the following 3 assignments not get refactored was here (however don't get new tip to refactor those 3 too inside the object creation block above, even though they all are of the form objectname.field/property = ...\r\n\r\n         emailmessage.Subject = subject;\r\n\r\n        // Plain text emails can't display images, so change body to HTML type\r\n        emailmessage.IsBodyHtml = true;\r\n\r\n        // public construct the alternate body as HTML \r\n        emailmessage.Body = EMAIL_HEADER + body + EMAIL_FOOTER;\r\n\r\n       //*** moved code is here now...\r\n\r\n        emailmessage.To.Add(toEmailAddress.Replace(';', ','));\r\n\r\n        if (!string.IsNullOrEmpty(ccEmailAddress))\r\n            emailmessage.CC.Add(ccEmailAddress.Replace(';', ','));\r\n\r\n        if (!string.IsNullOrEmpty(bccEmailAddress))\r\n            emailmessage.Bcc.Add(bccEmailAddress.Replace(';', ','));\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39146","RelatedDescription":"Open issue \"Object creation can be simplified suggestion should be more clever\" (#39146)"},{"Id":"504338110","IsPullRequest":true,"CreatedAt":"2019-10-09T00:02:54","Actor":"dotnet-bot","Number":"39145","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"open","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39145","RelatedDescription":"Open PR \"Merge master to features/static-lambdas\" (#39145)"},{"Id":"504338051","IsPullRequest":true,"CreatedAt":"2019-10-09T00:02:41","Actor":"dotnet-bot","Number":"39144","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39144","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#39144)"},{"Id":"504337609","IsPullRequest":true,"CreatedAt":"2019-10-09T00:00:59","Actor":"dotnet-bot","Number":"39143","RawContent":null,"Title":"Merge master to release/dev16.5-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39143","RelatedDescription":"Open PR \"Merge master to release/dev16.5-preview1\" (#39143)"},{"Id":"504337023","IsPullRequest":false,"CreatedAt":"2019-10-08T23:58:40","Actor":"vsfeedback","Number":"39142","RawContent":null,"Title":"Refactoring \"Compute constant value\" not available on constant-only-values.","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/759053/refactoring-compute-constant-value-not-available-o.html)._\n\n---\n<p>Hi,</p><p>Today, there is a refactoring available to <em>Compute constant value</em> if you have an expression like below:</p><pre>var foo = Some.Namespace.With.A.Constant + &quot;my own string&quot;;</pre> <p>However, this does not appear on the simpler variant like this:</p><pre>var foo = Some.Namespace.With.A.Constant;</pre> <p>In practice, I can just append <strong>+&quot;&quot;</strong> to the value and then use the refactoring, but it should not be necessary.</p> <p>Best regards, he who tries to get rid of some inter-solution dependencies in old stuff and wants to save some time next time.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 10/8/2019, 05:29 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39142","RelatedDescription":"Open issue \"Refactoring \"Compute constant value\" not available on constant-only-values.\" (#39142)"},{"Id":"504336716","IsPullRequest":false,"CreatedAt":"2019-10-08T23:57:25","Actor":"vsfeedback","Number":"39141","RawContent":null,"Title":"Add ability to customize the xml comments format","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/406779/add-ability-to-customize-the-xml-comments-format.html)._\n\n---\n<p>I am using /// to generate documentation but would like to alter the template / snippet that is inserted.  I see there might be a way to do it with custom snippets, but seems like it should be a built in option.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 12/13/2018, 05:51 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;You will hear from us in about a week on our next steps.</p>\n#### Dinakar Nethi [MSFT] on 1/4/2019, 03:28 PM: \n\n<p>Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39141","RelatedDescription":"Open issue \"Add ability to customize the xml comments format\" (#39141)"},{"Id":"504335961","IsPullRequest":false,"CreatedAt":"2019-10-08T23:54:37","Actor":"vsfeedback","Number":"39140","RawContent":null,"Title":"<code> tags in XML comments should render as monospaced, syntax highlighted code in the IntelliSense popups.","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/721265/tags-in-xml-comments-should-render-as-monospaced-s.html)._\n\n---\nWhat it says on the tin :)\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/3/2019, 07:50 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39140","RelatedDescription":"Open issue \"<code> tags in XML comments should render as monospaced, syntax highlighted code in the IntelliSense popups.\" (#39140)"},{"Id":"504335870","IsPullRequest":false,"CreatedAt":"2019-10-08T23:54:12","Actor":"vsfeedback","Number":"39139","RawContent":null,"Title":"<see> tags in XML docs should be clickable links in the IntelliSense popups.","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/721266/tags-in-xml-docs-should-be-clickable-links-in-the.html)._\n\n---\nWhat it says on the tin :)\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/3/2019, 07:50 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39139","RelatedDescription":"Open issue \"<see> tags in XML docs should be clickable links in the IntelliSense popups.\" (#39139)"},{"Id":"504335736","IsPullRequest":false,"CreatedAt":"2019-10-08T23:53:34","Actor":"vsfeedback","Number":"39138","RawContent":null,"Title":"Refactoring -> Rename should rename fields/variables/parameters","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/762598/refactoring-rename-should-rename-fieldsvariablespa.html)._\n\n---\nOften using DI we have things like\n\npublic MyClass(IFirstInterface firstInterface, ISecondInterface secondInterface)\n{\n    _firstInterface = firstInterface;\n    _secondInterface = secondInterface;\n}\n\nCurrently, if i rename IFirstInterface -&gt; ISomethingElse it only renames the interface, not the fields, variables and parameters.\n\npublic MyClass(ISomethingElse firstInterface, ISecondInterface secondInterface)\n{\n    _firstInterface = firstInterface;\n    _secondInterface = secondInterface;\n}\n\nReally it should go further and do the same as Resharper:\n\npublic MyClass(ISomethingElse somethingElse, ISecondInterface secondInterface)\n{\n    _somethingElse= somethingElse;\n    _secondInterface = secondInterface;\n}\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 10/8/2019, 05:26 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39138","RelatedDescription":"Open issue \"Refactoring -> Rename should rename fields/variables/parameters\" (#39138)"},{"Id":"504331784","IsPullRequest":true,"CreatedAt":"2019-10-08T23:37:58","Actor":"agocke","Number":"39137","RawContent":null,"Title":"Require MSBuild 16.3 in compiler NuGet packages","State":"open","Body":"Fixes #38312","Url":"https://github.com/dotnet/roslyn/pull/39137","RelatedDescription":"Open PR \"Require MSBuild 16.3 in compiler NuGet packages\" (#39137)"},{"Id":"503752335","IsPullRequest":true,"CreatedAt":"2019-10-08T22:39:02","Actor":"dotnet-bot","Number":"39123","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39123","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#39123)"},{"Id":"504303182","IsPullRequest":true,"CreatedAt":"2019-10-08T22:03:30","Actor":"ivanbasov","Number":"39136","RawContent":null,"Title":"Include source files w/o method bodies in the PDB documents","State":"open","Body":"Fixes #38954\r\n\r\nCurrently the compiler does not list source files in the debug documents in the PDB that are part of the compilation but do not have any method body. These documents are only added in order to support sequence points.","Url":"https://github.com/dotnet/roslyn/pull/39136","RelatedDescription":"Open PR \"Include source files w/o method bodies in the PDB documents\" (#39136)"},{"Id":"503731282","IsPullRequest":false,"CreatedAt":"2019-10-08T19:23:57","Actor":"heejaechang","Number":"39120","RawContent":null,"Title":"IntroduceVariableCondeRefactoringProvider threw an exception","State":"closed","Body":"```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: position\r\n   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)\r\n   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39120","RelatedDescription":"Closed issue \"IntroduceVariableCondeRefactoringProvider threw an exception\" (#39120)"},{"Id":"504205138","IsPullRequest":true,"CreatedAt":"2019-10-08T18:28:42","Actor":"RikkiGibson","Number":"39135","RawContent":null,"Title":"Local function GetAttributes","State":"open","Body":"- LangVersion errors on all local function attributes (incl. parameters and type parameters)\r\n- GetAttributes()\r\n- Attribute binding, rejecting attributes on invalid targets\r\n\r\nPTAL @dotnet/roslyn-compiler @cston","Url":"https://github.com/dotnet/roslyn/pull/39135","RelatedDescription":"Open PR \"Local function GetAttributes\" (#39135)"},{"Id":"504198327","IsPullRequest":true,"CreatedAt":"2019-10-08T18:14:09","Actor":"ryzngard","Number":"39134","RawContent":null,"Title":"Fix converted nullability on extract method","State":"open","Body":"Fixes #39075 \r\n\r\n* Remove the IsObjectType check since it caused incorrect behavior when selecting an identifier of type Object. See TestExtractNullableObjectWithExplicitCast \r\n* Fix extension methods to correctly use converted nullability \r\n* Add some tests to show expected behavior with nullable reference types\r\n* Work around #39122 by calling GetTypeInfo on the CastExpressionSyntax  directly","Url":"https://github.com/dotnet/roslyn/pull/39134","RelatedDescription":"Open PR \"Fix converted nullability on extract method\" (#39134)"},{"Id":"504196595","IsPullRequest":false,"CreatedAt":"2019-10-08T18:10:33","Actor":"pavinan","Number":"39133","RawContent":null,"Title":"System.Runtime.CompilerServices.NullableAttribute is not returning if there are no even properties with null and without null.","State":"open","Body":"**Version Used**:  netcoreapp3.0, sdk - 3.0.100\r\n\r\n**Steps to Reproduce**:\r\nIf a class has 3 nullable props and 3 non-nullable props ``NullableAttribute`` is **returned**.\r\nBut if a class has 3 nullable and 2 non nullable ''NullableAttribute'' is **not returned**.\r\n\r\nBelow program will work fine. \r\nBut if you un-comment ``Content2`` or comment out ``dummy`` this will give 0 attrs.\r\n\r\nThat is everything must be even.\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var props = typeof(Todo).GetProperties();\r\n\r\n        foreach (var propItem in props)\r\n        {\r\n            var attrs = propItem.GetCustomAttributes();\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic class Todo\r\n{\r\n    public string? Content { get; set; }\r\n    //public string? Content2 { get; set; }\r\n    public Test? MyProperty { get; set; }\r\n\r\n    public string dummy { get; set; } = string.Empty;\r\n    public Test dummy2 { get; set; } = default!;\r\n}\r\n\r\npublic class Test\r\n{\r\n    public int MyProperty { get; set; }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n``System.Runtime.CompilerServices.NullableAttribute`` must be returned for nullable properties.\r\n\r\n**Actual Behavior**:\r\n``System.Runtime.CompilerServices.NullableAttribute`` is not returned for nullable properties.\r\n","Url":"https://github.com/dotnet/roslyn/issues/39133","RelatedDescription":"Open issue \"System.Runtime.CompilerServices.NullableAttribute is not returning if there are no even properties with null and without null.\" (#39133)"},{"Id":"504166053","IsPullRequest":false,"CreatedAt":"2019-10-08T17:03:53","Actor":"nvmkpk","Number":"39132","RawContent":null,"Title":"[Proposal] String interpolation","State":"open","Body":"An option to expand the string interpolation to a call other than string.Format would be nice to have.\r\n\r\nFor example, I want\r\n`logger.LogInformation($\"Hello {name}\")`\r\nto be expanded to\r\n`logger.LogInformation(\"Hello {0}\", name)`\r\nrather than\r\n`logger.LogInformation(string.Format(\"Hello {0}\", name))`\r\n\r\nCompiler can require the method to have a specific signature and annotated with an attribute for this.","Url":"https://github.com/dotnet/roslyn/issues/39132","RelatedDescription":"Open issue \"[Proposal] String interpolation\" (#39132)"},{"Id":"504001116","IsPullRequest":true,"CreatedAt":"2019-10-08T16:47:06","Actor":"dotnet-bot","Number":"39129","RawContent":null,"Title":"Merge master to release/dev16.5-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39129","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.5-preview1\" (#39129)"},{"Id":"504414516","IsPullRequest":false,"CreatedAt":"2019-10-08T14:43:59","Actor":"Connect-a","Number":"39149","RawContent":null,"Title":"Why 'await' causing compiler error when that in an interpolated string?","State":"open","Body":"The following code cannot be compiled:\r\n```C#\r\n        private static async Task Main()\r\n        {\r\n            // compiler error CS0103 : The name 'await' does not exist in the current context\r\n            var z = $\"{await (Task.FromResult(string.Empty))}\";\r\n\r\n            // allowed\r\n            var a = await Task.FromResult(string.Empty);\r\n            var b = await (Task.FromResult(string.Empty));\r\n            var c = $\"{await Task.FromResult(string.Empty)}\";\r\n\r\n            Console.ReadLine();\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39149","RelatedDescription":"Open issue \"Why 'await' causing compiler error when that in an interpolated string?\" (#39149)"},{"Id":"504054387","IsPullRequest":false,"CreatedAt":"2019-10-08T13:46:07","Actor":"hivanov","Number":"39131","RawContent":null,"Title":"Support Generic Methods in Expression Trees","State":"open","Body":"Currently, S.L.Expressions.Expression and subclasses cannot infer the types of generic methods. This makes the generated lambdas unsuitable for dealing with code-generation not available at run-time. \r\n\r\nGiven the following:\r\n```c#\r\nstatic class Class1\r\n{\r\n  public static T MethodName<T>(T instance)\r\n  {\r\n    return instance;\r\n  }\r\n}\r\n```\r\nOne cannot create a lambda that invokes MethodName, without knowing the binding parameter first, like this:\r\n```c#\r\nvar method = typeof(Class1).GetMethod(nameof(Class1.MethodName), BindgingFlags.Public | BindingFlags.Static);\r\nvar parameter = Expression.Parameter(typeof(??));\r\nvar lambda = Expression.Lambda(Expression.Call(method, parameter), parameter), parameter);\r\n```\r\nTo do so, one must know the generic type first (in the double question marks). Unfortunately, this makes a whole class of code generation strategies very cumbersome, since, in order to compile (and invoke) the methods, one must do expression generation, compilation, etc., at every first unique binding at least:\r\n```c#\r\nExpression<Lambda<Func<T, T>> MakeLambda<T>()\r\n{\r\n  var compiledLambdas = new ConcurrentDictionary<Type, Delegate>();\r\n  var method = typeof(Class1).GetMethod(nameof(Class1.MethodName), BindgingFlags.Public | BindingFlags.Static);\r\n\r\n  var parameter = Expression.Parameter(typeof(T));\r\n  var lambda = Expression.Lambda(Expression.Call(method, parameter), parameter), parameter);\r\n}\r\n\r\nprivate readonly ConcurrentDictionary<Type, Func<object, object>> m_Lambdas;\r\n\r\nExpression<Func<object, object>> MakeGenericLambda(Type type)\r\n{\r\n  return m_Lambdas.TryGetValue(type,\r\n    key => \r\n    {\r\n      var parameter = Expression.Parameter(typeof(object));\r\n      return Expression.Lambda<Func<object, object>>(\r\n        Expression.Convert(\r\n          Expression.Invoke(\r\n            typeof(this)\r\n              .GetMethod(nameof(MakeLambda), BindingFlags.NonPublic | BindingFlags.Instance)\r\n              .MakeGenericMethod(type)\r\n              .Invoke(this, null),\r\n            parameter),\r\n          typeof(object)), parameter);\r\n   });\r\n}\r\n```\r\nIt gets worse if one considers more complex scenarios, with multiple generic type arguments.\r\n\r\nThe proposition:\r\n1. Add GenericTypeParameterExpression, created with Expression.GenericTypeParameter(string typeName);\r\n2. Change Expression.Parameter, Expression.Variable, to accept also a variant with GenericTypeParameterExpression as well;\r\n3. Change Expression.Lambda to support GenericTypeParameterExpression:\r\n```c#\r\nExpression.Lambda(body, GenericTypeParameter[] genericTypeArguments, params ParameterExpression parameters);\r\n```\r\n4. Add Expression.Lambda<TDelegate, T1, T2, ...> variants, with type binding.\r\nThis would be especially useful in combination with Expression.CompileToMethod (which would be a nice addition to .net core as well), and would greatly eliminate the need to write complex boxing/unboxing, cached lambdas, etc.","Url":"https://github.com/dotnet/roslyn/issues/39131","RelatedDescription":"Open issue \"Support Generic Methods in Expression Trees\" (#39131)"},{"Id":"504013799","IsPullRequest":false,"CreatedAt":"2019-10-08T12:28:49","Actor":"NetTecture","Number":"39130","RawContent":null,"Title":"CS0618 shown in error when method uses obsolete element internally","State":"open","Body":"Visual Studio 16.3.2\r\n\r\nI have a method using an obsolete element INTERANALLY - it is not used as parameter, nor is it actually returned.\r\n\r\nI am getting offered to add the obsolete attribute to the method:\r\n\r\n![image](https://user-images.githubusercontent.com/909612/66395471-c7276900-e9d7-11e9-9fbb-08edc63e501d.png)\r\n\r\nThis is factually incorrect. While the warning on the obsolete element is sensible, adding obsolete to the method would mark this method as obsolete - which is wrong. It may need rework, but it is not obsolete - it is still to be used.\r\n\r\nThis would be different if the obsolete element would be part of input or output parameters. But in this case, it is not - it is defined within the method body and then discarded.\r\n","Url":"https://github.com/dotnet/roslyn/issues/39130","RelatedDescription":"Open issue \"CS0618 shown in error when method uses obsolete element internally\" (#39130)"},{"Id":"503884455","IsPullRequest":false,"CreatedAt":"2019-10-08T07:49:16","Actor":"jkears","Number":"39128","RawContent":null,"Title":"SyntaxFactory.MethodDeclaration no longer accepts SyntaxKind.EndOfFileToken for semicolonToken","State":"open","Body":"Previous to upgrading to 3.3.1 (was on 3.1.0) I was able to pass a SyntaxKind.EndofFileToken into semicolon parameter on the SyntaxFactory.MethodDeclaration method but after the upgrade to 3.3.1  now receive a runtime exception … System.ArgumentException: 'semicolonToken'. \r\n\r\n\r\n**Steps to Reproduce**:\r\n \r\n SyntaxFactory.MethodDeclaration(attributeLists: SyntaxFactory.List<AttributeListSyntax>(),\r\n              modifiers: modifiers,\r\n              returnType: SyntaxFactory.ParseTypeName(\"void\"),\r\n              explicitInterfaceSpecifier: interfaceSpecifier,\r\n              identifier: SyntaxFactory.Identifier(\"On\" + method.Name.Replace(\" \", \"\")),\r\n              typeParameterList: null,\r\n              parameterList: parameterList,\r\n              constraintClauses: SyntaxFactory.List<TypeParameterConstraintClauseSyntax>(),\r\n              body: SyntaxFactory.Block()\r\n            .WithOpenBraceToken(\r\n                SyntaxFactory.Token(SyntaxKind.OpenBraceToken))\r\n            .WithCloseBraceToken(\r\n                SyntaxFactory.Token(SyntaxKind.CloseBraceToken)),                \r\n                semicolonToken: SyntaxFactory.Token(SyntaxKind.EndOfFileToken)).NormalizeWhitespace();\r\n\r\n2. Runs perfectly on 3.1.0\r\n\r\n3. Switch to 3.3.1 to receive an argument exception \"SemiColon\"\r\n \r\n\r\n**Expected Behavior**:\r\n3.1.0 sample generation...\r\n\r\npartial void OnInitializeConstructorParameters(RoleId roleId, ApplicationId appId, string name, string description, List<Permission> permissions)\r\n        {\r\n        }\r\n**Actual Behavior**:\r\nRuntime Argument Exception \"SemiColon\"","Url":"https://github.com/dotnet/roslyn/issues/39128","RelatedDescription":"Open issue \"SyntaxFactory.MethodDeclaration no longer accepts SyntaxKind.EndOfFileToken for semicolonToken\" (#39128)"},{"Id":"503788004","IsPullRequest":true,"CreatedAt":"2019-10-08T02:31:03","Actor":"mavasani","Number":"39127","RawContent":null,"Title":"Enable detection and addition of solution level .editorconfig as solu…","State":"open","Body":"…tion item\r\n\r\n1. IDE code fix that adds new editorconfig for configuring code style/severity has been updated to create the file at root of the solution, instead of the project. Additionally, the code fix also automatically adds the file as a solution item.\r\n2. We now detect if a new editorconfig is created at the root of the solution and provide an info bar to make it a solution item with a single click. User can choose to silence this suggestion so it never shows up again (workspace option).","Url":"https://github.com/dotnet/roslyn/pull/39127","RelatedDescription":"Open PR \"Enable detection and addition of solution level .editorconfig as solu…\" (#39127)"},{"Id":"503759468","IsPullRequest":true,"CreatedAt":"2019-10-08T00:30:11","Actor":"genlu","Number":"39126","RawContent":null,"Title":"[WIP] Completion for unimported extension methods","State":"open","Body":"Still a work-in-pregress, but tests for common scenarios in C# are passing, so I think it's at least ready for a design review.\r\n\r\nTODO:\r\n- Tests for VB \r\n- Determine the bail condition (e.g. if any of the filter items isn't calculated? And/Or a timebox? )\r\n- Perf analysis (still some cleanup to do before this)\r\n- Telemetry\r\n\r\n@CyrusNajmabadi Could you please give this a quick look and let me know if the implementation of  the filter makes sense? Thanks!","Url":"https://github.com/dotnet/roslyn/pull/39126","RelatedDescription":"Open PR \"[WIP] Completion for unimported extension methods\" (#39126)"},{"Id":"503756065","IsPullRequest":true,"CreatedAt":"2019-10-08T00:17:47","Actor":"chsienki","Number":"39125","RawContent":null,"Title":"Using declaration ioperation","State":"open","Body":"IOperation and CFG support for using declarations","Url":"https://github.com/dotnet/roslyn/pull/39125","RelatedDescription":"Open PR \"Using declaration ioperation\" (#39125)"},{"Id":"503752385","IsPullRequest":true,"CreatedAt":"2019-10-08T00:02:42","Actor":"dotnet-bot","Number":"39124","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"open","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39124","RelatedDescription":"Open PR \"Merge master to features/local-function-attributes\" (#39124)"},{"Id":"503747647","IsPullRequest":false,"CreatedAt":"2019-10-07T23:44:20","Actor":"ryzngard","Number":"39122","RawContent":null,"Title":"Calling GetTypeInfo on CastExpressionSyntax.Type returns wrong nullable information","State":"open","Body":"```c#\r\n#nullable enable\r\n\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        object? o = null;\r\n        var s = [|(string?)o|];\r\n        Console.WriteLine(s);\r\n    }\r\n}\r\n```\r\n\r\nwhere `[||]` shows the CastExpressionSyntax being used. \r\n\r\n![image](https://user-images.githubusercontent.com/475144/66356903-a00e6000-e921-11e9-8cfd-ee7fb41f72a9.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/39122","RelatedDescription":"Open issue \"Calling GetTypeInfo on CastExpressionSyntax.Type returns wrong nullable information\" (#39122)"},{"Id":"503739283","IsPullRequest":true,"CreatedAt":"2019-10-07T23:15:45","Actor":"CyrusNajmabadi","Number":"39121","RawContent":null,"Title":"Add support for static lambdas.","State":"open","Body":"WIP:\r\n\r\nAdds impl support for https://github.com/dotnet/csharplang/issues/275.\r\n\r\nThis should be reviewed with whitespace diffs off.\r\n\r\nFollowup to https://github.com/dotnet/roslyn/pull/39118\r\n\r\n- [x] Update syntax model to support a modifiers list for lambdas (https://github.com/dotnet/roslyn/pull/39118).\r\n- [x] Add parsing support for static lambdas (simple and parenthesized).\r\n- [x] Add binding checking that static lambdas do not capture anything.\r\n- [x] Tests.","Url":"https://github.com/dotnet/roslyn/pull/39121","RelatedDescription":"Open PR \"Add support for static lambdas.\" (#39121)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"504357120","IsPullRequest":true,"CreatedAt":"2019-10-09T01:22:39","Actor":"Dotnet-GitSync-Bot","Number":"7820","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7820)"},{"Id":"504330608","IsPullRequest":true,"CreatedAt":"2019-10-09T01:16:45","Actor":"Dotnet-GitSync-Bot","Number":"7819","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7819)"},{"Id":"504158790","IsPullRequest":true,"CreatedAt":"2019-10-08T16:48:08","Actor":"am11","Number":"7818","RawContent":null,"Title":"Fix exit code of build-native.sh","State":"open","Body":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive).","Url":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Open PR \"Fix exit code of build-native.sh\" (#7818)"},{"Id":"503784732","IsPullRequest":false,"CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Number":"7817","RawContent":null,"Title":"Call generated dll from cpp crash","State":"open","Body":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```","Url":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Open issue \"Call generated dll from cpp crash\" (#7817)"},{"Id":"503304688","IsPullRequest":false,"CreatedAt":"2019-10-07T08:30:51","Actor":"yunekit","Number":"7816","RawContent":null,"Title":"sched_yield infinite loop","State":"open","Body":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work.","Url":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Open issue \"sched_yield infinite loop\" (#7816)"},{"Id":"503145779","IsPullRequest":true,"CreatedAt":"2019-10-06T21:09:25","Actor":"Dotnet-GitSync-Bot","Number":"7815","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7815)"},{"Id":"503134823","IsPullRequest":true,"CreatedAt":"2019-10-06T19:30:50","Actor":"MichalStrehovsky","Number":"7814","RawContent":null,"Title":"Add support for multithreaded compilation to ILC","State":"closed","Body":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff).","Url":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Closed or merged PR \"Add support for multithreaded compilation to ILC\" (#7814)"},{"Id":"502963591","IsPullRequest":true,"CreatedAt":"2019-10-06T04:53:29","Actor":"MichalStrehovsky","Number":"7811","RawContent":null,"Title":"Port fixes from CoreCLR","State":"closed","Body":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793.","Url":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Closed or merged PR \"Port fixes from CoreCLR\" (#7811)"},{"Id":"502974204","IsPullRequest":true,"CreatedAt":"2019-10-05T16:06:41","Actor":"MichalStrehovsky","Number":"7812","RawContent":null,"Title":"Remove global state tracking in DynamicInvokeTemplateDataNode","State":"closed","Body":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable.","Url":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Closed or merged PR \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812)"},{"Id":"502974267","IsPullRequest":true,"CreatedAt":"2019-10-05T16:04:50","Actor":"MichalStrehovsky","Number":"7813","RawContent":null,"Title":"Cache helpers used in IL scanner","State":"closed","Body":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler.","Url":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Closed or merged PR \"Cache helpers used in IL scanner\" (#7813)"},{"Id":"502935521","IsPullRequest":true,"CreatedAt":"2019-10-05T12:47:51","Actor":"MichalStrehovsky","Number":"7810","RawContent":null,"Title":"Update ObjWriter","State":"closed","Body":"Picks up #7802.","Url":"https://github.com/dotnet/corert/pull/7810","RelatedDescription":"Closed or merged PR \"Update ObjWriter\" (#7810)"},{"Id":"502780858","IsPullRequest":true,"CreatedAt":"2019-10-05T06:01:27","Actor":"Dotnet-GitSync-Bot","Number":"7809","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @idlerboris @stephentoub","Url":"https://github.com/dotnet/corert/pull/7809","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7809)"},{"Id":"502527358","IsPullRequest":false,"CreatedAt":"2019-10-04T12:27:49","Actor":"kstreichergb","Number":"7808","RawContent":null,"Title":"dotnet.exe hangs during shutdown","State":"closed","Body":"A hosted application using `BackgroundService` is hanging infinetly on shutdown, in particular when the console application is killed with ctrl+z.\r\n\r\nThe \"finish\" log in the finally in Main will be seen, but the dotnet.exe process keeps running\r\n\r\n```\r\npublic class BaseBackgroundService: BackgroundService{\r\n  private readonly IHostLifetime _hostLifetime;\r\n  private readonly IHostApplicationLifetime _iHostApplicationLifetime;\r\n  \r\n  public BaseBackgroundService(IHostLifetime hostLifetime,\r\n\t\t                             IHostApplicationLifetime iHostApplicationLifetime){\r\n    _hostLifetime = hostLifetime;\r\n    _iHostApplicationLifetime = iHostApplicationLifetime;\r\n }\r\n\r\n  protected override async Task ExecuteAsync(CancellationToken ct)\r\n  {\r\n  try{\r\n        await DoSomething();\r\n  }catch(OperationCanceledException ex)\r\n{\r\n /** ... Reached on CTRL+Z .... **/\r\n}\r\nfinally{\r\n       _iHostApplicationLifetime.StopApplication();\r\n        await _hostLifetime.StopAsync(ct); // clean exit\r\n  \tConsole.WriteLine(\"Completes as expected\");    \r\n  }\r\n/*...*/\r\n}\r\n\r\n```\r\n\tProgram.cs \r\n\tpublic static async Task Main(string[] args){\r\n\ttry\r\n\t{\r\n\t\tIHostBuilder hostBuilder = CreateHostBuilder(args);\r\n\r\n\t\tusing (IHost host = hostBuilder.UseConsoleLifetime().Build())\r\n\t\t{\r\n\t\t\tawait host.RunAsync();\r\n\t\t}\r\n\t}\r\n\t}finally{\r\n\t\tConsole.WriteLine(\"Finished - will be seen. Therefore main exits, but dotnet.exe keeps running\");\r\n\t}\r\n\t}\r\n```\r\n\r\nThe hosted BackgroundService will finish (OperationCanceledException) but the host.RunAsync() will never finish.\r\n\r\nUsing visual and break all\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66196903-9ecb0200-e699-11e9-812f-d3773be75aa4.png)\r\n\r\nAnd repeating it shows the Task ID changes, but the structure remains the same\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66197013-cf12a080-e699-11e9-8529-6ee9df7266ee.png)","Url":"https://github.com/dotnet/corert/issues/7808","RelatedDescription":"Closed issue \"dotnet.exe hangs during shutdown\" (#7808)"},{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"},{"Id":"499907137","IsPullRequest":true,"CreatedAt":"2019-09-29T14:16:14","Actor":"MichalStrehovsky","Number":"7803","RawContent":null,"Title":"Delete ReadyToRun portions of the compiler and test tree","State":"closed","Body":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably.","Url":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Closed or merged PR \"Delete ReadyToRun portions of the compiler and test tree\" (#7803)"},{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"closed","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Closed or merged PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"},{"Id":"494589847","IsPullRequest":true,"CreatedAt":"2019-09-17T14:13:36","Actor":"Dotnet-GitSync-Bot","Number":"7794","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7794","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7794)"},{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"},{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T07:35:11","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"503817875","IsPullRequest":false,"CreatedAt":"2019-10-08T21:16:17","Actor":"Codex-","Number":"3725","RawContent":null,"Title":"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified","State":"closed","Body":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated","Url":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Closed issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725)"},{"Id":"504289407","IsPullRequest":false,"CreatedAt":"2019-10-08T17:33:19","Actor":"davidmatson","Number":"3729","RawContent":null,"Title":"Process.Start on exe via ProjectReference no longer works in .NET Core","State":"open","Body":"**Visual Studio Version**:\r\n16.2.5\r\n\r\n**Summary**:\r\nHaving a ProjectReference to an .exe was sufficient to have Process.Start work in .NET Framework (both old- and new-style csprojs). With .NET Core, it fails (with both SelfContained=true and false and with or without running Publish first).\r\n\r\n**Steps to Reproduce**:\r\n1. Create an exe project in a new solution.\r\n2. Create a second exe project in the same solution.\r\n3. Add a ProjectReference from the first project to the second project.\r\n4. Have the first project call Process.Start on the second project's exe.\r\n\r\n**Expected Behavior**:\r\nThe process runs successfully.\r\n\r\n**Actual Behavior**:\r\nProcess.Start fails with:\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet'.\r\n```\r\n\r\nor (if SelfContained=true):\r\n```\r\nCould not resolve CoreCLR path. For more details, enable tracing by setting COREHOST_TRACE environment variable to 1\r\n```\r\n\r\nor (after Publish):\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception: The system cannot find the file specified\r\n```\r\n\r\n**User Impact**:\r\nWe heavily use the pattern of a long-running exe (for a container service) calling short-lived exes to do work. Ctrl+F5 used to work in .NET Framework; it doesn't in .NET Core.\r\n\r\nNote also some odd behavior with SelfContained=false - NuGet package dependencies of the child project do not get placed in the bin directory of the referencing project (prior to Publish; they do after).\r\n\r\nSee the attached zip for repro projects for full .NET Framework with a traditional csproj, full .NET Framework with a new-style (Common Project System) csproj, and .NET Core.\r\n[repro.zip](https://github.com/dotnet/project-system/files/3703783/repro.zip)","Url":"https://github.com/dotnet/sdk/issues/3729","RelatedDescription":"Open issue \"Process.Start on exe via ProjectReference no longer works in .NET Core\" (#3729)"},{"Id":"504072077","IsPullRequest":true,"CreatedAt":"2019-10-08T14:25:49","Actor":"nguerrera","Number":"3727","RawContent":null,"Title":" Pinned host model 3.0.0 for 3.0.x servicing","State":"closed","Body":"@mmitche  @livarcocc ","Url":"https://github.com/dotnet/sdk/pull/3727","RelatedDescription":"Closed or merged PR \" Pinned host model 3.0.0 for 3.0.x servicing\" (#3727)"},{"Id":"504301070","IsPullRequest":false,"CreatedAt":"2019-10-08T14:23:27","Actor":"ds1709","Number":"3730","RawContent":null,"Title":"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists","State":"open","Body":"**Summary**:\r\nWe need to specify `CustomTool` attribute for resx files. Generally it's `ResXFileCodeGenerator`. If `CustomTool` not specified, then code generator is not working. Offer to make `ResXFileCodeGenerator` as default custom tool for resx files, whict has paired Designer.cs file (e.g. the most common Propertiest\\Resources.resx and Properties\\Resources.Designer.cs).","Url":"https://github.com/dotnet/sdk/issues/3730","RelatedDescription":"Open issue \"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists\" (#3730)"},{"Id":"503850577","IsPullRequest":false,"CreatedAt":"2019-10-08T06:17:11","Actor":"davidwengier","Number":"3726","RawContent":null,"Title":"Review translation of \"Assets file\" for portuguese","State":"open","Body":"tag @tmeschter\r\n\r\nThis is just one person, but they speak portuguese better than me, so thought I'd report it. Not sure if there is some way to get the LOC team to verify that translations make sense? It looks like in this case the translation is technically correct, but perhaps not helpful.\r\n\r\nFrom the C# discord today:\r\n\r\n\r\n-----\r\n\r\n@marcussacana : \r\nI got a error\r\nit's in portuguese, a sec to me translate\r\n\"The file of active '....' don't have the same destination to '.netcoreapp,ver=v3/win-x86' verify if the restoration has executed and if you included the 'netcoreapp3.0' in the TargetFrameworks of the project, Maybe you will need include the 'win-x86' in the RuntimeIdentifiers of the project.\"\r\nI don't get this 'actives' anyway\r\n \r\n@davidwengier : \r\nit would be \"file of assets\" i guess? the english version of the message just says \"Assets file\"\r\n \r\n@marcussacana : \r\nthen the portuguese message is wrong, because don't make much sense to me...\r\nas far I know 'ativos' can be translated only to 'active/enabled'... the english version said assets, right?\r\n \r\n@davidwengier : \r\nyes\r\nand in this case \"assets\" is a technical term, so i think the translation should be reviewed\r\nlike its literally \"project.assets.json\"\r\n \r\n@marcussacana : \r\nwell, I never see a translation to assets before, usually here we speak 'assets' too, but isn't a word recognized in our dictionary\r\n\r\nthe google translate said it's rigth\r\n![image](https://user-images.githubusercontent.com/754264/66371253-6fe0c300-e9ee-11e9-8854-ccfdaeb5ce7e.png)\r\n\r\nbut well\r\n![image](https://user-images.githubusercontent.com/754264/66371266-7707d100-e9ee-11e9-909d-91b86725586d.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3726","RelatedDescription":"Open issue \"Review translation of \"Assets file\" for portuguese\" (#3726)"},{"Id":"503747398","IsPullRequest":false,"CreatedAt":"2019-10-07T23:43:25","Actor":"wli3","Number":"3724","RawContent":null,"Title":"BuildWebLarge and similar perf test have wrong snapshot folder","State":"open","Body":"https://github.com/dotnet/sdk/blob/260f37383a4974b478cba2ba67ac7908578f5b07/src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs#L68\r\n\r\nAnd possibly other similar tests. We use the same folder to find the csproj (which is correct), and to do snapshot (not correct). As a result, in BuildWebLarge, only the mvc folder is under snapshot/restore while there are many other projects in the solution are not properly cleaned between test runs. \r\n\r\nHowever, the perf lab has different infra to do this. So once we moved to perf lab, this will no longer be a problem.\r\n\r\nI think this is a low priority issue.","Url":"https://github.com/dotnet/sdk/issues/3724","RelatedDescription":"Open issue \"BuildWebLarge and similar perf test have wrong snapshot folder\" (#3724)"},{"Id":"502980437","IsPullRequest":false,"CreatedAt":"2019-10-07T21:49:49","Actor":"smoothdeveloper","Number":"3718","RawContent":null,"Title":"dotnet build --help failing due to sdk version","State":"closed","Body":"When I attempt a command with the `--help` argument, it fails due to mismatch of SDK version \r\n\r\nWould making it work disregarding potential mismatch be more user friendly / sensible?\r\n\r\nCurrently:\r\n\r\n```console\r\nC:\\tmp\\testdotnetnew>dotnet build --help\r\nA compatible installed .NET Core SDK for global.json version [4.2.100] from [C:\\tmp\\testdotnetnew\\global.json] was not found\r\nInstall the [4.2.100] .NET Core SDK or update [C:\\tmp\\testdotnetnew\\global.json] with an installed .NET Core SDK:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nAlso, is there a way to force the sdk to \"go ahead\"? if so, it would be good to be pointed at that in the mismatch error message (with a bit of caution).","Url":"https://github.com/dotnet/sdk/issues/3718","RelatedDescription":"Closed issue \"dotnet build --help failing due to sdk version\" (#3718)"},{"Id":"503665613","IsPullRequest":true,"CreatedAt":"2019-10-07T20:12:15","Actor":"sfoslund","Number":"3723","RawContent":null,"Title":"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue","State":"open","Body":"Add test for #3615 to ensure the DisableImplicitNamespaceImports property solves inferred type variable name issue","Url":"https://github.com/dotnet/sdk/pull/3723","RelatedDescription":"Open PR \"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue\" (#3723)"},{"Id":"503097561","IsPullRequest":true,"CreatedAt":"2019-10-06T14:55:57","Actor":"dotnet-maestro[bot]","Number":"3722","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3722","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3722)"},{"Id":"503047091","IsPullRequest":true,"CreatedAt":"2019-10-06T06:46:26","Actor":"dotnet-maestro[bot]","Number":"3721","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3721","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3721)"},{"Id":"503038463","IsPullRequest":true,"CreatedAt":"2019-10-06T02:50:44","Actor":"dotnet-maestro[bot]","Number":"3720","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3720","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3720)"},{"Id":"502982974","IsPullRequest":false,"CreatedAt":"2019-10-05T16:18:41","Actor":"megakid","Number":"3719","RawContent":null,"Title":"*.pp contentFiles not copied to output directory in 3.0 SDK","State":"open","Body":"I've been digging into this issue whereby a `.pp` file inside a package `contentFiles` (with `copyToOutput=\"true\"`) via `PackageReference` is not copied into the output directory during a `dotnet publish` / `dotnet build`.  This works fine with .NET Core SDK `2.2.*` but is broken in `3.0.100`.  Non-`.pp` files work fine.\r\n\r\nI have debugged the MSBuild process and can see that the files are transformed successfully but they do not get copied to the output unlike non-`.pp` files.\r\n\r\nMy test project/package structure is basic and looks like this:\r\n\r\n`[Library A (TestAbc)] <== (PackageReference) == [Exe B]`\r\n\r\nLibrary A's `.nuspec`:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>TestAbc</id>\r\n    <version>160.0.0</version>\r\n    <authors>TestAbc</authors>\r\n    <owners>TestAbc</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.1\" />\r\n    </dependencies>\r\n    <contentFiles>\r\n      <files include=\"any/any/Test.ps1.pp\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n      <files include=\"any/any/NonTransformed.ps1\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n    </contentFiles>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nExe B's `csproj` (I've also tried targeting `netcoreapp3.0`)\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net472</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"TestAbc\" Version=\"163.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nMy dotnet version:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --version\r\n3.0.100\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --list-sdks\r\n3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nMy build command - I couldn't figure out how to get binlogs from msbuild via the dotnet publish command so I used the `CopyLocalLockFileAssemblies` property workaround although I'm not sure this is required with 3.0 SDK (see [here](https://github.com/dotnet/sdk/pull/2646)):\r\n\r\n`C:/Program Files/dotnet/dotnet.exe --diagnostics msbuild /target:Build /property:PackageOutputPath=C:/Projects/test/bin/packages /property:IncludeSymbols=true /property:IncludeSource=true /property:CopyLocalLockFileAssemblies=true /property:Version=1.0.0 /property:configuration=Release \"C:/Projects/squid2/src/ExeA/ExeA.csproj\" -restore /bl:build.binlog -v:diag`\r\n\r\nAfter this command I see `NonTransformed.ps1` in the output folder but not `Test.ps1` (or `Test.ps1.pp`).\r\nI would expect to see both `.ps1`s in my output folder at that point.\r\n\r\nHere's my debugging so far:\r\n\r\nI see the .pp file getting picked up:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257599-1d579a80-e793-11e9-9f82-74730dc52175.png)\r\n\r\nIt gets copied to a temp directory without the .pp extension (`obj\\Release\\net472\\NuGet\\9374D6CD1CF741AA241FA0906DC657D57C8CB116\\TestAbc\\165.0.0\\Test.ps1` in this case).\r\n\r\nThen I see the preprocessor task running and see that the file has now been overwritten/updated with the template tokens replaced.\r\n \r\n![image](https://user-images.githubusercontent.com/1478003/66257582-f600cd80-e792-11e9-8a0b-9a481c9bab8a.png)\r\n\r\nI notice later in the process that the 2 files are listed side by side but the `TargetPath` looks wrong (to my untrained eye) under the `Test.ps1` element - first difference is the content path is an absolute path for the `NonTransformed.ps1` but a relative path for `Test.ps1`.  The task `AssignTargetPath` is used to generate a `TargetPath` (see [here](https://github.com/microsoft/msbuild/blob/vs16.3/src/Tasks/AssignTargetPath.cs)) which generates the correct one on `NonTransformed.ps1` but not `Test.ps1`.  **UPDATE** From tracing the 2.2 build, I can see it is the same in 2.2 so this is fine.\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257667-fd74a680-e793-11e9-9b07-28edda0a4a23.png)\r\n\r\nI can't figure out where `Test.ps1` is being dropped but later on I clearly see `NonTransformed.ps1` alone in the copy task:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257561-c94cb600-e792-11e9-8f5d-f8bd7aed22e6.png)\r\n\r\nMy output dir afterwards:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258015-0e271b80-e798-11e9-919b-c90d8b39c2bf.png)\r\n\r\nExact same build but with `SDK 2.2.402`:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258002-e46df480-e797-11e9-9d34-cdae57598bac.png)\r\n\r\nI've included my 2.2 and 3.0 binlogs here for comparison:\r\n\r\n[msbuild-binlogs.zip](https://github.com/dotnet/sdk/files/3693524/msbuild-binlogs.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3719","RelatedDescription":"Open issue \"*.pp contentFiles not copied to output directory in 3.0 SDK\" (#3719)"},{"Id":"502925465","IsPullRequest":true,"CreatedAt":"2019-10-05T13:52:03","Actor":"dotnet-maestro[bot]","Number":"3717","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.20\r\n- **Date Produced**: 10/5/2019 7:26 AM\r\n- **Commit**: 45f675b1acc38eaea182bf6ef284d1b13141d134\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.20\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3717","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3717)"},{"Id":"502911797","IsPullRequest":true,"CreatedAt":"2019-10-05T06:45:22","Actor":"dotnet-maestro[bot]","Number":"3716","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.15\r\n- **Date Produced**: 10/5/2019 2:41 AM\r\n- **Commit**: ea8a25eb0679dc4d940623688189885086286adc\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.15\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3716","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3716)"},{"Id":"502901854","IsPullRequest":true,"CreatedAt":"2019-10-05T03:46:00","Actor":"dotnet-maestro[bot]","Number":"3715","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.13\r\n- **Date Produced**: 10/5/2019 12:20 AM\r\n- **Commit**: fd1162d3db7db9c79bf01d32604862f4bee25b96\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.13\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3715","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3715)"},{"Id":"502887934","IsPullRequest":true,"CreatedAt":"2019-10-04T23:56:34","Actor":"wli3","Number":"3714","RawContent":null,"Title":"Update stage0","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3714","RelatedDescription":"Open PR \"Update stage0\" (#3714)"},{"Id":"502887592","IsPullRequest":true,"CreatedAt":"2019-10-04T23:55:16","Actor":"wli3","Number":"3713","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3713","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3713)"},{"Id":"502640875","IsPullRequest":true,"CreatedAt":"2019-10-04T17:16:48","Actor":"dotnet-maestro[bot]","Number":"3712","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/4/2019 12:23 PM\r\n- **Commit**: 50de4c0d1f33599adc6d71ae6d5b8783140c0b83\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.2\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3712","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3712)"},{"Id":"502523605","IsPullRequest":true,"CreatedAt":"2019-10-04T11:16:08","Actor":"dotnet-maestro[bot]","Number":"3711","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191003.14\r\n- **Date Produced**: 10/4/2019 8:06 AM\r\n- **Commit**: 36e40e331b31d9c220fd2553a0a8784d59985c47\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19503.14\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3711","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3711)"},{"Id":"501147875","IsPullRequest":true,"CreatedAt":"2019-10-03T19:31:50","Actor":"dotnet-maestro[bot]","Number":"3702","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.24\r\n- **Date Produced**: 10/2/2019 8:04 AM\r\n- **Commit**: 0b3fcd7a02fd29017f01f01a36ea562c5fda1eec\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.24\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3702","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3702)"},{"Id":"502234506","IsPullRequest":false,"CreatedAt":"2019-10-03T18:47:32","Actor":"wli3","Number":"3710","RawContent":null,"Title":"Use Helix to distribute tests","State":"open","Body":"- [x] Use existing Helix xunit SDK runner to distribute tests\r\n- [ ] Run full framework tests.\r\n  - [ ] Use docker to run full framework tests https://github.com/microsoft/dotnet-framework-docker/issues/313\r\n  - [ ] Check in docker file and get a image \r\n  - [ ] Separate few tests that cannot run in docker. Like C++/CLI tests require VS \r\n- [ ] Run Linux and mac tests\r\n- [ ] Run test as tool tests\r\n- [ ] Split Build tests, there are too many tests in it\r\n","Url":"https://github.com/dotnet/sdk/issues/3710","RelatedDescription":"Open issue \"Use Helix to distribute tests\" (#3710)"},{"Id":"502188632","IsPullRequest":true,"CreatedAt":"2019-10-03T17:09:02","Actor":"crummel","Number":"3709","RawContent":null,"Title":"Use ref-only msbuild packages for tasks","State":"open","Body":"These MSBuild packages used to build tasks are used as references only, and don't need to pick up the versions produced by source-build.\r\n\r\ncc @NikolaMilosavljevic","Url":"https://github.com/dotnet/sdk/pull/3709","RelatedDescription":"Open PR \"Use ref-only msbuild packages for tasks\" (#3709)"},{"Id":"501864414","IsPullRequest":false,"CreatedAt":"2019-10-03T05:40:17","Actor":"christophwille","Number":"3708","RawContent":null,"Title":"Build Order Bug with app.config/BeforeBuild","State":"open","Body":"Please see https://github.com/icsharpcode/ILSpy/issues/1731\r\n\r\nEffectively, only Visual Studio gets the build order wrong, but both of our build servers don't (msbuild). The cause seems that app.config for ILSpy.csproj is built from a template.","Url":"https://github.com/dotnet/sdk/issues/3708","RelatedDescription":"Open issue \"Build Order Bug with app.config/BeforeBuild\" (#3708)"},{"Id":"501756629","IsPullRequest":false,"CreatedAt":"2019-10-02T22:23:15","Actor":"DamianEdwards","Number":"3706","RawContent":null,"Title":"Support ability for FrameworkReference to import analyzers","State":"open","Body":"Request came out of https://github.com/aspnet/AspNetCore/issues/14675\r\n\r\nASP.NET Core app projects today target the Web SDK which auto-imports a set of \"default\" analyzers. There are scenarios however where parts of an ASP.NET Core app are split into class libraries and then referenced from the main app project, but these class libraries use the base SDK, and manually add a `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />` to indicate their reliance on ASP.NET Core features. This, however, results in none of the default analyzers. And given the analyzers are only available via the Web SDK (they literally ship only as part of it) there is no first-class way to enable them.\r\n\r\nThe proposal here is to allow the base SDK to support a `FrameworkReference` declaring it also imports some analyzers, so that class libraries can use them.","Url":"https://github.com/dotnet/sdk/issues/3706","RelatedDescription":"Open issue \"Support ability for FrameworkReference to import analyzers\" (#3706)"},{"Id":"501750161","IsPullRequest":true,"CreatedAt":"2019-10-02T22:03:31","Actor":"tlakollo","Number":"3705","RawContent":null,"Title":"Improve Error Experience","State":"open","Body":"As part of the improve error experience linker issue (see issue https://github.com/mono/linker/issues/653) we find out that an additional flag was needed in order to print warning messages.\r\nThis change mades possible for the linker to print valuable information like warnings when an assembly is unresolved and is going to be skipped. Likely this feature could also work to warning the user when it's using patterns that could break their application.","Url":"https://github.com/dotnet/sdk/pull/3705","RelatedDescription":"Open PR \"Improve Error Experience\" (#3705)"},{"Id":"501446031","IsPullRequest":true,"CreatedAt":"2019-10-02T12:02:07","Actor":"dotnet-maestro[bot]","Number":"3704","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3704","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3704)"},{"Id":"501395765","IsPullRequest":true,"CreatedAt":"2019-10-02T10:05:15","Actor":"dotnet-maestro[bot]","Number":"3703","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.06\r\n- **Date Produced**: 10/7/2019 1:35 AM\r\n- **Commit**: f8bfa4242fb299c1d1a635c069dbfec7870a023b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3703","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3703)"},{"Id":"500849733","IsPullRequest":true,"CreatedAt":"2019-10-01T13:32:38","Actor":"dotnet-maestro[bot]","Number":"3701","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3701","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3701)"},{"Id":"501830295","IsPullRequest":false,"CreatedAt":"2019-10-01T05:41:13","Actor":"EatonZ","Number":"3707","RawContent":null,"Title":"PreBuild event/target runs twice - during Build and Publish","State":"open","Body":"**Visual Studio Version**: 16.3.1\r\n\r\n**Summary / Steps to Reproduce / Behavior**:\r\nI have a .NET Core 3.0 WinForms application and I have added a prebuild event to my project. It gets added to the csproj like this:\r\n```\r\n<Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\">\r\n  <Exec Command=\"$(ProjectDir)PreBuildTasks.exe\" />\r\n</Target>\r\n```\r\nIt basically launches my prebuild exe, which does a few things, like increment the version in AssemblyInfo. This has always worked fine until I started experimenting with .NET Core and publishing.\r\n\r\nFor context, I am going to add this right before the `Exec Command`:\r\n`<Message Importance=\"high\" Text=\"This is a message\" />`\r\n\r\nWhen I publish the project (right click project, Publish), this is what I see:\r\n![2019-10-01_1-25-35](https://user-images.githubusercontent.com/3020941/65936781-cac15b80-e3eb-11e9-93cf-d41efb6adc93.png)\r\n\r\nIt's clear the prebuild task is running twice. I spent a while researching a way to resolve this problem. The closest solution I found was [this](https://developercommunity.visualstudio.com/content/problem/30395/aspnet-publish-process-runs-build-3-times.html). I added `Condition=\"'$(DeployOnBuild)' != 'true'\"` as directed, but unfortunately it did not do anything. The other solution in that thread says the issue is fixed, so what is happening here?\r\n\r\nThis behavior may be by design, but I decided to open this issue in case it is not, and because I'd like some guidance on the correct way to solve this problem if I am going at this the wrong way. I only want my prebuild task to run on **Build**, not **Publish**.","Url":"https://github.com/dotnet/sdk/issues/3707","RelatedDescription":"Open issue \"PreBuild event/target runs twice - during Build and Publish\" (#3707)"},{"Id":"504235087","IsPullRequest":false,"CreatedAt":"2019-09-30T15:55:55","Actor":"genifycom","Number":"3728","RawContent":null,"Title":"How to debug \"GenerateBundle\" task failed unexpectedly","State":"open","Body":"# Issue Title\r\n\r\ndotnet publish xxx.csproj -r win-x64 -c Release /p:PublishSingleFile=true\r\n\r\ngives me the following:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: The \"GenerateBundle\" task failed unexpectedly. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException: Exception of type 'Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException' was thrown. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(MemoryMappedViewAccessor accessor, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(String filePath, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.<>c__DisplayClass3_0.<SetAsBundle>b__0() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.RetryUtil.RetryOnIOError(Action func) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.SetAsBundle(String appHostPath, Int64 bundleHeaderOffset) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.Bundle.Bundler.GenerateBundle(IReadOnlyList`1 fileSpecs) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateBundle.ExecuteCore() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\xxx.csproj]\r\n\r\n# General\r\n\r\nWould love to be able to provide more info, but how?\r\n\r\nIs there a debug publish switch?\r\n","Url":"https://github.com/dotnet/sdk/issues/3728","RelatedDescription":"Open issue \"How to debug \"GenerateBundle\" task failed unexpectedly\" (#3728)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1181701006347735040","CreatedAt":"2019-10-08T22:40:49+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1181691179663949824","CreatedAt":"2019-10-08T22:01:46+00:00","UserScreenname":"dotnet","Text":"We're developing documentation for the new System.Text.Json serializer. See the first installment at… https://t.co/aHX6GMXqSz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1181036647447580672","CreatedAt":"2019-10-07T02:40:54+00:00","UserScreenname":"dotnet","Text":"Nice! 😀 https://t.co/EzPOxi6RQM","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":30,"FavoriteCount":2,"RawContent":null},{"Id":"1179886895251148801","CreatedAt":"2019-10-03T22:32:11+00:00","UserScreenname":"dotnet","Text":"Thank you to all who participated in #dotNETConf! Please help us improve the event next year by providing your feed… https://t.co/pik2pOve9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"1179802961238585344","CreatedAt":"2019-10-03T16:58:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"1179116521290960902","CreatedAt":"2019-10-01T19:31:00+00:00","UserScreenname":"dotnet","Text":"ICYMI: @nopCommerce published a step-by-step guide on migrating to https://t.co/iOiV9r53NV Core. Check it out: https://t.co/oAy68vNBJw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null},{"Id":"1178341418064138245","CreatedAt":"2019-09-29T16:11:01+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is now available on demand!\n👍 83 speakers\n👍 77 sessions\n👍 40+ hours\n👍 200+ local events around the glob… https://t.co/c5lz2EkS4C","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":305,"FavoriteCount":166,"RawContent":null},{"Id":"1178059427242377217","CreatedAt":"2019-09-28T21:30:29+00:00","UserScreenname":"dotnet","Text":"Hi 👋 @timheuer. Welcome back in @dotnet land. 😀 https://t.co/85GRHHLARg","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":87,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2019-10-09T05:30:41.1761154Z","RunDurationInMilliseconds":17172}