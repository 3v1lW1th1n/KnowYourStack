{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12199175395","Type":"PullRequestEvent","CreatedAt":"2020-04-30T00:51:04","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7974","RelatedDescription":"Merged pull request \"FI master to dev\" (#7974) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12198514849","Type":"PullRequestEvent","CreatedAt":"2020-04-29T23:03:47","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7974","RelatedDescription":"Opened pull request \"FI master to dev\" (#7974) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12197714777","Type":"PullRequestEvent","CreatedAt":"2020-04-29T21:17:40","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7964","RelatedDescription":"Merged pull request \"[Rename] Display rename information on package detail page\" (#7964) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/41028779/80194230-e762f200-85ce-11ea-9bcf-accefa84e8f7.png)\r\n![image](https://user-images.githubusercontent.com/41028779/80300443-c1198f80-8751-11ea-87c4-c4b8736bd888.png)\r\n\r\n1. Eager loading the \"ToPackageRegistration\" info.\r\n2. Reuse CSS template from deprecations;\r\n3. Feature Flag.\r\n"},{"Id":"12197235815","Type":"PullRequestEvent","CreatedAt":"2020-04-29T20:24:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7973","RelatedDescription":"Opened pull request \"Add build hook to AccountDeleter and GitHubVulnerabilities2Db\" (#7973) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2891"},{"Id":"12196991044","Type":"IssuesEvent","CreatedAt":"2020-04-29T19:58:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7972","RelatedDescription":"Opened issue \"Stats page - NuGet Client Usage shows \"1B\" for multiple ticks\" (#7972) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nNuGet Client Usage shows \"1B\" for multiple ticks on the Y axis. This is not very helpful.\r\n\r\n### To Reproduce\r\n\r\n1. Go to https://www.nuget.org/stats\r\n2. Look at the chart under \"NuGet Client Usage (Last 6 Weeks)\"\r\n\r\n### Expected behavior\r\n\r\nIt should show something like \"1.21B\", \"1.39B\" etc. \r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/80640957-ff94a000-8a18-11ea-8ddb-d97cf72d0d4b.png)\r\n"},{"Id":"12196887447","Type":"PullRequestEvent","CreatedAt":"2020-04-29T19:47:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7942","RelatedDescription":"Merged pull request \"Improved link functionality for nuget.org\" (#7942) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\nSupport for packages/{id}/latest, packages/{id}/latest/prerelease and packages/{id}/latest/prerelease/{tagName}\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7835\r\n\r\nThis PR fixes #7835"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12213036880","Type":"IssuesEvent","CreatedAt":"2020-05-01T05:27:26","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9326","RelatedDescription":"Closed issue \"Improve the patching CLI on Linux and Mac\" (#9326) at NuGet/Home","RelatedBody":"In order to manual test on Linux and Mac, we need to patch CLI on Linux and Mac.\r\nHowever, the patching console I wrote still need improving in the following two ways:\r\n1.the patched CLI is very slow when running dotnet command.\r\n2.the patching code needs to be simplified.\r\n"},{"Id":"12212947806","Type":"IssuesEvent","CreatedAt":"2020-05-01T05:07:50","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9315","RelatedDescription":"Closed issue \"Test ExecuteCommandAsync_WithAmbiguousMatch_ThrowsAsync runs 10-40 mins on Linux.\" (#9315) at NuGet/Home","RelatedBody":"A test runs 10-40 mins on Linux\r\nExecuteCommandAsync_WithAmbiguousMatch_ThrowsAsync\r\nNeed to investigate the test. "},{"Id":"12211953519","Type":"IssuesEvent","CreatedAt":"2020-05-01T01:25:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3159","RelatedDescription":"Closed issue \"Feature: Consider adding -dependencyVersion support for project.json/package reference install and update\" (#3159) at NuGet/Home","RelatedBody":"Today we have the `-dependencyVersion` option on PMC install and update as well as the `dependencyVersion` option in the config. It only applies to packages.config.\r\n\r\nWe could introduce support to project.json world by lifting transitive dependencies to the parent project.\r\n## Example\r\n\r\nConsider you have a project.json and you want to install WindowsAzure.Storage 6.2.0. This package depends on Newtonsoft.Json 6.0.8. Today if you install WindowsAzure.Storage, you will get a project.json like this:\r\n\r\n``` json\r\n{\r\n  \"dependencies\": {\r\n    \"WindowsAzure.Storage\": \"6.2.0\"\r\n  }\r\n}\r\n```\r\n\r\nIn the lock file, NuGet would have resolved the lowest version that meets the dependency's spec, which means that Newtonsoft.Json 6.0.8 would be restored.\r\n\r\nWith `DependencyBehavior.Highest`, the highest version of Newtonsoft.Json should be picked (which is 9.0.1 today). Since project.json default behavior is taking the lowest, we could observe this `DependencyBehavior.Highest` option by lifting Newtonsoft.Json 9.0.1 to the project.json automatically, resulting in a project.json that looks like this:\r\n\r\n``` json\r\n{\r\n  \"dependencies\": {\r\n    \"WindowsAzure.Storage\": \"6.2.0\",\r\n    \"Newtonsoft.Json\": \"9.0.1\"\r\n  }\r\n}\r\n```\r\n## -dependencyVersion in restore?\r\n\r\nLifting dependencies to the parent is one possibility, but this causes the user's project to become crowded with a potentially huge number of transitive dependencies (just look at the full graph of NETStandard.Library metapackage).\r\n\r\nAnother approach would be to support -dependencyVersion in restore itself so that, as NuGet walks transitive dependencies, it picks Highest instead of Lowest as it goes. This is a significant behavior change in project.json and, as @emgarten notes, this can lead to wacky results especially with CoreFX packages that change a lot from one minor release to the next.\r\n\r\nMore thought and design needed.\r\n"},{"Id":"12211653821","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:25:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6201","RelatedDescription":"Closed issue \"NuGet chooses incorrect references for System.Reflection.TypeExtensions.dll for .NET Core for UWP 5.2.2 if Windows SDK Target version is 10.0.16299\" (#6201) at NuGet/Home","RelatedBody":"NuGet chooses incorrect references for System.Reflection.TypeExtensions.dll for .NET Core for UWP 5.2.2 if Windows SDK Target version is 10.0.16299 causing types like System.Reflection.BindingFlags to fail to resolve and consequently build failures.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe via MSBuild called from Visual Studio F5.\r\n\r\nNuGet version (x.x.x.xxx): 4.4.0\r\n\r\nVS version: 2017 15.4.0\r\n\r\nOS version: Windows 10.0.15063\r\n\r\nWorked before? If so, with which NuGet version: Yes. Unclear.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new Windows Universal Class Library\r\n\r\n2. Choose Windows 10 Fall Creators Update (10.0; Build 16299) for target version and min version.\r\n\r\n3. Add the following method: `public System.Reflection.BindingFlags GetBindingFlags() => System.Reflection.BindingFlags.Static;` to `Class1`\r\n\r\n4. Compiles successfully.\r\n\r\n5. Change the NuGet reference for `Microsoft.NETCore.UniversalWindowsPlatform` from 6.0.1 to 5.2.2 (or anything between 5.2.2 and 5.4.1)\r\n\r\n6. Clean and recompile. Compilation fails with: `Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.` and `error CS1069: The type name 'BindingFlags' could not be found in the namespace 'System.Reflection'. This type has been forwarded to assembly 'System.Reflection, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' Consider adding a reference to that assembly.`\r\n\r\n7. Diagnostic output (and project.lock.json) shows that `System.Reflection.TypeExtensions.dll` was referenced from `%USERPROFILE%\\.nuget\\packages\\system.reflection.typeextensions\\4.1.0\\ref\\netstandard1.5\\System.Reflection.TypeExtensions.dll`\r\n\r\n8. Switch the project from Windows SDK Target Version 16299 to 15063 (Creators Update) or lower.\r\n\r\n9. Recompile and it builds successfully.\r\n\r\n10. Diagnostic output shows that `System.Reflection.TypeExtensions.dll` was referenced from `%USERPROFILE%\\.nuget\\packages\\system.reflection.typeextensions\\4.1.0\\ref\\netstandard1.3\\System.Reflection.TypeExtensions.dll` instead, which has the correct redirects for `BindingFlags`.\r\n\r\n## Other suggested things\r\nThis appears to be a mapping issue where 16299 is mapped such that .netstandard 1.5 is incorrectly chosen for `Microsoft.NETCore.UniversalWindowsPlatform`\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n[Failing16299.txt](https://github.com/NuGet/Home/files/1486755/Failing16299.txt)\r\n[Working15063.txt](https://github.com/NuGet/Home/files/1486756/Working15063.txt)\r\n\r\n### Sample Project\r\n\r\n[BrokenReflection.zip](https://github.com/NuGet/Home/files/1486754/BrokenReflection.zip)\r\n"},{"Id":"12211646903","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:24:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8781","RelatedDescription":"Closed issue \"retryingFindpackagesbyIdAsynccore issue in visual studio 2019\" (#8781) at NuGet/Home","RelatedBody":"I am working fine with one windows 10 machinewith grial UI kit for xamarin by using visual studio 2019, but one windows 10 machine making poblems with the retryingFindpackagesbyIdAsynccore and trying to download nuget packages but it fails to restore packages, wich leads to so many build errors, it also says in the out put that issue with \"Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\tSuppression State Error\tNETSDK1004\tC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t234\t\"tried cleaning the solution and rebuilding the solution it keeps giving errors .\r\nThank you in-advance for your support \t\r\n"},{"Id":"12211644044","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:23:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7956","RelatedDescription":"Closed issue \"Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.0.0.6)\" (#7956) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\nNuGet version (x.x.x.xxx): tested in 4.5.1.4879 and 5.0.0.5923 (affects both)\r\ndotnet.exe --version (if appropriate): 2.1.602 (it was working fine in 2.1.505)\r\nOS version: Ubuntu Linux 18.04\r\nWorked before?: yes, but with previous .NET Core SDK version\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. Install mono from Microsoft deb packages\r\n2. Install .NET Core SDK 2.1.602 from Microsoft deb packages\r\n3. Try to build a .NET Standard library that has nuget dependencies.\r\nResult:\r\n```\r\nError MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [/builds/DiginexGlobal/geewallet/src/GWallet.Backend.NetStandard/GWallet.Backend.NetStandard.fsproj]\r\n/usr/share/dotnet/sdk/2.1.602/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) due to: Could not resolve type with token 01000025 from typeref (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.0.0.6, Culture=neutral, PublicKeyToken=31bf3856ad364e35') assembly:NuGet.Packaging, Version=5.0.0.6, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:NuGet.Packaging.Core.PackageIdentity member:(null) \r\n```\r\n\r\n### Verbose Logs\r\n\r\nverbosity=detail logs: https://gitlab.com/DiginexGlobal/geewallet/-/jobs/190353486\r\n\r\n### Sample Project\r\n\r\nclone https://gitlab.com/knocte/geewallet , switch to the frontend branch, edit the file `./scripts/install_dotnet_sdk_from_microsoft_deb_packages.sh` to remove the workaround to install an older version of .NET Core (replacing `dotnet-sdk-2.1=2.1.505-1` with just `dotnet-sdk-2.1`) and compile it with `./configure.sh && make`.\r\n\r\n"},{"Id":"12211641485","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:23:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4005","RelatedDescription":"Closed issue \"[Mono issue] long password will get 400 bad request error\" (#4005) at NuGet/Home","RelatedBody":"Repro Step:\r\n1. send a put request to nuget server without any credential\r\n2. got 401, add credentials like NetworkCredential(\"test\", new string(â€˜aâ€™,10000));\r\n3. resend the request, got 400 bad request Invalid request line (parts).\r\n\r\nif set the password to short one, like new string('a', 20), it works well.\r\n\r\nLooks like it's following error message:\r\nhttps://github.com/mono/mono/blob/master/mcs/class/System/System.Net/HttpListenerRequest.cs#L90\r\n\r\n"},{"Id":"12211640416","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:23:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4004","RelatedDescription":"Closed issue \"[Mono issue] process errorDataReceived event is still triggered after call process.CancelErrorRead\" (#4004) at NuGet/Home","RelatedBody":"This issue only happens on mono 4.8\r\nRepro step:\r\n\r\n1. start a process to write any output, redirect standard output and error output by using OutputDataReceived Event and ErrorDataReceived event.\r\nprocess.OutputDataReceived += (object o, DataReceivedEventArgs e) => { outBuffer.AppendLine(e.Data); };\r\n            process.ErrorDataReceived += (object o, DataReceivedEventArgs e) =>\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(e?.Data))\r\n                {\r\n                    _logger.LogInformation($\"{process.ProcessName}: {e.Data}\");\r\n                }\r\n            };\r\n\r\n2. start to read output and wait for exit, then cancel read\r\nprocess.BeginOutputReadLine();\r\nprocess.BeginErrorReadLine();\r\nprocess.WatiForExit(1000);\r\nprocess.CancelOutputRead();\r\nprocess.CancelErrorRead();\r\n\r\n3. return process.ExitCode\r\n\r\nthe issue is after the return, it will get invalidOperationException, because errorDataReceived event is triggered and that event try to get process.ProcessName but the process is already exited.\r\n\r\n\r\n"},{"Id":"12211633478","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:21:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7702","RelatedDescription":"Closed issue \"Rethink suggesting Bower as front-end package manager\" (#7702) at NuGet/Home","RelatedBody":"I think it's not a good idea to suggest Bower as front-end package manager from the NuGet dialog. I totally agree NuGet should not be used for front-end packages, but don' agree on Bower. Even the Bower project suggest people use npm as package repo, either via npm or yarn as a tool. It's not that Bower is dead, but it is in maintenance mode only. Do we want to lead people on a path that we know will be obsolete in the near future?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/400136/rethink-suggesting-bower-as-front-end-package-mana.html\nVSTS ticketId: 740485_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 12/6/2018, 06:13 PM (41 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  You will hear from us in about a week on our next steps.</p><p><strong></strong><u></u><sub></sub><sup></sup></p>\n"},{"Id":"12211628467","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:20:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3762","RelatedDescription":"Closed issue \"[Mono Issue] Got \"Error getting response stream(ReadDone2): Receive Failure\" when retry credential three times\" (#3762) at NuGet/Home","RelatedBody":"Mono Version: 4.4.2\nRepro Step:  \n1. set up a nuget server with credential, for example: username: user, password: pass\n2. try to restore one package from that server\n3. type wrong username and password twice, for example, first time: a:b, second time: c:d\n4. type right username and password at the third time.\n\nExpected: restore works well\nActual: Got error message: Error getting response stream(ReadDone2): Receive Failure\n\nLooks like this is a mono library bug, I will file a bug against them and add link here\n"},{"Id":"12211615809","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:18:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7751","RelatedDescription":"Closed issue \"If one project contains errors, nuget.exe stops the restore of all new-style projects and only restores packages from packages.config (even when the project in question is itself an old-style project)\" (#7751) at NuGet/Home","RelatedBody":"Scenario: I have a solution containing a number of projects, some of them being old-style csproj projects (packages in packages.config), others new-style (packages defined in csproj file itself). One of the projects is a Wix installer project (wixproj), which cannot be converted to the new style.\r\n\r\nThe Wix project references the NuGet package [Wix 3.11.1](https://www.nuget.org/packages/WiX/3.11.1), so that the project can be built on a build machine without needing to install Wix tools there.\r\n\r\nRun `nuget restore` on the solution with Wix tools not installed locally, and Wix package not existing in solution packages directory. The error can also be simulated with Wix installed by directly editing the wixproj file and changing the following elements to a bogus path:\r\n\r\n    <WixTargetsPath Condition=\" '$(WixTargetsPath)' == '' AND '$(MSBuildExtensionsPath32)' != '' \">$(MSBuildExtensionsPath32)\\Microsoft\\WiX\\v3.x\\Wix.targets</WixTargetsPath>\r\n    <WixTargetsPath Condition=\" '$(WixTargetsPath)' == '' \">$(MSBuildExtensionsPath)\\Microsoft\\WiX\\v3.x\\Wix.targets</WixTargetsPath>\r\n\r\n\r\nObserved behavior:\r\n* nuget reports the following error: \r\n> C:\\Work\\Norway\\Device-agents\\DeviceAgentSetup\\DeviceAgentSetup.wixproj(95,3): error MSB4019: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\WiX\\v3.x\\Wix.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n> \r\n> WARNING: Error reading msbuild project information, ensure that your input solution or project file is valid. NETCore and UAP projects will be skipped, only packages.config files will be restored.\r\n* Even though the failing project is an old-style project (and even though the build target is not at all relevant for package restoration), this error breaks package restoration for all new-style projects.\r\n\r\nExpected behavior:\r\n* If nuget encounters an error in one of the projects, it should ignore the error in old-style projects, and only skip that project in new-style projects. (Arguably, it should ignore missing build targets completely.)\r\n\r\nWorkaround:\r\n* Run `nuget restore` separately on the wixproj project before running `nuget restore` on solution.\r\n\r\nTested with nuget version 4.9.2.5706"},{"Id":"12211530495","Type":"IssuesEvent","CreatedAt":"2020-05-01T00:03:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8947","RelatedDescription":"Closed issue \"Port the dev guide to GitHub\" (#8947) at NuGet/Home","RelatedBody":"Right now it's a One Note. \r\nIt's more useful in the repo in some sort of a doc. \r\n\r\n\r\nIdeas from NuGet/NuGet.Client#3180\r\n\r\n- NuGet and target frameworks\r\n\r\n- NuGet + dependencies, how to add a new dependency in the NuGet client. Think source-build.\r\n\r\n- All NuGet to NuGet dependencies are via a ProjectReference (implied via all NuGet assemblies version the same :) )\r\n\r\n- How to add a new assembly section.\r\n\r\n- We need a section for NuGet Error codes"},{"Id":"12211370366","Type":"IssuesEvent","CreatedAt":"2020-04-30T23:34:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5724","RelatedDescription":"Closed issue \"Tool restore fails with an exception when the tool is not found in any sources\" (#5724) at NuGet/Home","RelatedBody":"Found while analyzing/fixing https://github.com/NuGet/Home/issues/5716.\r\nTool restore fails badly with an exception when the tool is not found in any sources.\r\nBasically we fail to build the assets file path because we don't have the version. \r\n4.1.0\r\n```\r\nUnable to resolve 'Microsoft.NETCore.App (>= 2.0.0)' for '.NETCoreApp,Version=v2.0'.\r\nUnable to resolve 'dotnet-xunit' for '.NETCoreApp,Version=v2.0'.\r\nSystem.AggregateException: One or more errors occurred. ---> System.ArgumentNullException: Value cannot be null.\r\nParameter name: path\r\n   at System.IO.Path.GetFullPathInternal(String path)\r\n   at NuGet.Commands.RestoreCommand.GetAssetsFilePath(LockFile lockFile)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAndCommitAsync>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<Run>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__30.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n---> (Inner Exception #0) System.ArgumentNullException: Value cannot be null.\r\nParameter name: path\r\n   at System.IO.Path.GetFullPathInternal(String path)\r\n   at NuGet.Commands.RestoreCommand.GetAssetsFilePath(LockFile lockFile)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAndCommitAsync>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<Run>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__30.MoveNext()<---\r\n\r\n```\r\n\r\n4.3.0\r\n```\r\nNU1103: Unable to find a stable package dotnet-xunit with version\r\n  - Found 3 version(s) in nuget.org [ Nearest version: 2.3.0-beta1-build3642 ]\r\n  - Found 0 version(s) in NuGet.Org INT\r\nValue cannot be null.\r\nParameter name: path\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: path\r\n   at System.IO.Path.GetFullPathInternal(String path)\r\n   at NuGet.Commands.RestoreCommand.GetAssetsFilePath(LockFile lockFile) in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreCommand.cs:line 296\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__8.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreCommand.cs:line 151\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 262\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAndCommitAsync>d__6.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 237\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__9.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 312\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunAsync>d__2.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 92\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunAsync>d__0.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 29\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunAsync>d__1.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\RestoreRunner.cs:line 41\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__34.MoveNext() in F:\\NuGet.Client\\src\\NuGet.Clients\\NuGet.CommandLine\\Commands\\RestoreCommand.cs:line 148\r\n```"},{"Id":"12211367884","Type":"IssuesEvent","CreatedAt":"2020-04-30T23:33:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5717","RelatedDescription":"Closed issue \"Investigate adding timestamps to logs in PMC/ PackageManager Output\" (#5717) at NuGet/Home","RelatedBody":"This would make the logging more meaningful. \r\n\r\n/cc\r\n@emgarten "},{"Id":"12211276651","Type":"IssuesEvent","CreatedAt":"2020-04-30T23:18:45","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9478","RelatedDescription":"Closed issue \"NuGet command line times out on bad internet connection while other services operate correctly.\" (#9478) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI live out in the boonies and have an internet connection that has a very unique problem.  If my internet reaches peak bandwidth usage on upload connections it will effectively drop to basically no bandwidth available.  This is 100% reproducible by uploading a large file, *or using dotnet command line tools that interact with nuget*.  I will go from 12Mbps down, 3Mbps up, to less than 1Mbps down and up.  \r\nNow that I am working from home, this has caused me a unique problem when running my team's Docker compose files, which builds 10+ services using `dotnet test` and `dotnet restore` on OSX.  \r\nWhat runs in 30 seconds for my teammates, ran for over an hour on my machine without reaching the end.\r\n\r\nIt's very worth noting that this problem with my internet only occurs *when uploading a large file or using `dotnet restore`* and not at any other time.  It *does not occur from reaching my peak download speeds*.\r\n\r\n## Example errors: \r\n\r\n> Failed to download package 'Microsoft.NetCore.Analyzers.2.9.8' from 'https://api.nuget.org/v3-flatcontainer/microsoft.netcore.analyzers/2.9.8/microsoft.netcore.analyzers.2.9.8.nupkg'.\r\n>    Received an unexpected EOF or 0 bytes from the transport stream.\r\n>   Failed to download package 'runtime.native.System.4.0.0' from 'https://api.nuget.org/v3-flatcontainer/runtime.native.system/4.0.0/runtime.native.system.4.0.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/runtime.native.system/4.0.0/runtime.native.system.4.0.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n>   Failed to download package 'System.Xml.ReaderWriter.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.xml.readerwriter/4.3.0/system.xml.readerwriter.4.3.0.nupkg'.\r\n>    Received an unexpected EOF or 0 bytes from the transport stream.\r\n>   Failed to download package 'System.Runtime.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.runtime/4.3.0/system.runtime.4.3.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/system.runtime/4.3.0/system.runtime.4.3.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n>   Failed to download package 'System.Reflection.Primitives.4.3.0' from 'https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.3.0/system.reflection.primitives.4.3.0.nupkg'.\r\n>   The download of 'https://api.nuget.org/v3-flatcontainer/system.reflection.primitives/4.3.0/system.reflection.primitives.4.3.0.nupkg' timed out because no data was received for 60000ms.\r\n>     Exception of type 'System.TimeoutException' was thrown.\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet restore\r\n\r\nNuGet version (x.x.x.xxx): 5.5.0.4\r\n\r\ndotnet.exe --version (if appropriate): 3.1.201\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS Mojave 10.14.6\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Have my internet connection.\r\n\r\n2. run `dotnet restore` on a project in an environment that does not have any nuget packages cached.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"},{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org â€“ Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-05-01T05:30:42.8509765Z","RunDurationInMilliseconds":2404}