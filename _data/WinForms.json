{"Data":{"GitHub":{"Issues":[{"Id":"455562765","IsPullRequest":true,"CreatedAt":"2019-06-14T02:18:46","Actor":"RussKie","Number":"1125","RawContent":null,"Title":"Streamline local dev configuration","State":"closed","Body":"Add a PowerShell script that simplifies and streamlines the UX around installing a new version of SDK and getting VS to pick it up.\r\n\r\nOur local build scripts download and install a required version of SDK into a local folder (.\\.dotnet\\sdk). This is done to accommodate build infrastructure requirement.\r\n\r\nVS is only loading SDKs from under C:\\Program Files\\dotnet\\sdk folder. This folder is also protected and requires an elevation to write into it.\r\n\r\nThe script can be run as follows:\r\n\r\n    PS> .\\build-local.ps1                   # to simply build and launch the solution in VS\r\n    PS> .\\build-local.ps1 -FullClean        # resets the SDK and the local dev environment\r\n\r\nThe new script does a number of things:\r\n\r\n  - Checks whether the version of SDK required in global.json is installed both locally and system-wide. If it isn't the script is re-run in an elevated mode to establish a symlink from the local SDK copy to the system-wide;\r\n  - If a full cleanup is required,\r\n      * kills all running instances of dotnet.exe and MSBuild.exe, because they can lock SDK files and prevent removal of the SDK folders,\r\n      * deletes the systen-wide SDK installation, and\r\n      * cleans the local repository;\r\n  - Kicks off `build.cmd` to downloads the required SDK, build the solution and run tests;\r\n  - Restores necessary packages;\r\n  - Launches the solution in Visual Studio\r\n\r\nAfter running the script once, the solution can now be opened in VS by simply clicking on the solution file in Windows Explorer. ðŸŽ‰ ","Url":"https://github.com/dotnet/winforms/pull/1125","RelatedDescription":"Closed or merged PR \"Streamline local dev configuration\" (#1125)"},{"Id":"455912666","IsPullRequest":true,"CreatedAt":"2019-06-13T19:23:55","Actor":"AdamYoblick","Number":"1129","RawContent":null,"Title":"disable helix dialog handler in ci builds","State":"open","Body":"The dialog handler is most likely responsible for sporadically causing our unit tests to time out, since many of our tests open UI windows. The suggestion from dnceng was to disable it in this way.","Url":"https://github.com/dotnet/winforms/pull/1129","RelatedDescription":"Open PR \"disable helix dialog handler in ci builds\" (#1129)"},{"Id":"455702182","IsPullRequest":true,"CreatedAt":"2019-06-13T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190612.21\r\n- **Date Produced**: 6/13/2019 7:23 AM\r\n- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19312.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19312.21\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1128","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"455625986","IsPullRequest":true,"CreatedAt":"2019-06-13T09:14:43","Actor":"rookie0jnr","Number":"1127","RawContent":null,"Title":"System.Windows.Forms.Design.Tests.FolderNameEditorTests+FolderBrowserâ€¦","State":"open","Body":"Currently this test is failing. Please check the attached screenshot. \r\nIt seems that it is failing because of the use of Assert.Same().\r\n\r\nReplacing it with Assert.Equal() as in other tests fixes it.\r\n\r\n![FailingTest](https://user-images.githubusercontent.com/48907761/59420134-fbe23580-8dd4-11e9-97a9-65dccd585c58.JPG)\r\n","Url":"https://github.com/dotnet/winforms/pull/1127","RelatedDescription":"Open PR \"System.Windows.Forms.Design.Tests.FolderNameEditorTests+FolderBrowserâ€¦\" (#1127)"},{"Id":"455572110","IsPullRequest":true,"CreatedAt":"2019-06-13T07:11:35","Actor":"RussKie","Number":"1126","RawContent":null,"Title":"Rename DataGridView partial files to increase discoverability","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/1126","RelatedDescription":"Open PR \"Rename DataGridView partial files to increase discoverability\" (#1126)"},{"Id":"453992311","IsPullRequest":false,"CreatedAt":"2019-06-12T23:36:53","Actor":"RussKie","Number":"1113","RawContent":null,"Title":"Possible layout issues after Control.Defaultfont changes","State":"closed","Body":"\r\n**Problem description:**\r\n\r\nAs a result of the `Control.Defaultfont` changes introduced in #656 we *may* have a possible breaking experience for customer who had pixel-perfect layouts.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n| .NET 4.7.2 | .NET Core 3.0 |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/4403806/59082950-a6bba500-8938-11e9-8d07-cdae09a5e24b.png) |  ![image](https://user-images.githubusercontent.com/4403806/59082924-8be93080-8938-11e9-8d98-11eea254bb1f.png) |\r\n\r\nIf you look closely with the new font we have a greater vertical space requirements.\r\n\r\nI have also create a fixed layout test, and it displays a possible issue - some text may get clipped or covered:\r\n\r\n| .NET 4.7.2 | .NET Core 3.0 |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/4403806/59083935-973e5b00-893c-11e9-9c12-395e830d1c60.png) | ![image](https://user-images.githubusercontent.com/4403806/59083909-8261c780-893c-11e9-82ae-ae0476f1b417.png) |\r\n\r\n\r\n**Expected behavior:**\r\n\r\nFew options:\r\n* We could note the new behaviour in release notes and be done with it.\r\n* We could also add some sort of a switch or an opt-in behaviour that would allow customers to retain the original font. \r\nAs discussed with @KlausLoeffelmann in https://github.com/dotnet/winforms/pull/656#issuecomment-499839663 would could add `Application.SetDefaultFont(Font)` method to allow affected customers to set to which ever font works for them.\r\n\r\n**Minimal repro:**\r\n\r\nRun `WinformsControlsTest` and `WinFormsControlsClassicTests` and compare.","Url":"https://github.com/dotnet/winforms/issues/1113","RelatedDescription":"Closed issue \"Possible layout issues after Control.Defaultfont changes\" (#1113)"},{"Id":"455114171","IsPullRequest":false,"CreatedAt":"2019-06-12T23:28:48","Actor":"Olina-Zhang","Number":"1122","RawContent":null,"Title":"Font size of Form and controls are changed a little bigger by default","State":"closed","Body":"* .NET Core Version: .Net Core 3.0 Preview7 3.0.100.12367 build from master branch\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n1.\tCreate 2 apps, one is  a .Net Core Winforms app and another is a .Net framework Winforms app, which have same designer code with some controls added.\r\n[FrameworkApp.zip](https://github.com/dotnet/winforms/files/3280698/FrameworkApp.zip)\r\n[CoreApp.zip](https://github.com/dotnet/winforms/files/3280699/CoreApp.zip)\r\n\r\n2.\tBuild and run these 2 apps, and compare size of forms and controls \r\n\r\n**Actual behavior:** \r\nSize of Form and controls are different for .Net Core and .Net framework, .Net Core app is a little bigger. This is a regression issue in Core.\r\n![image](https://user-images.githubusercontent.com/26474449/59341037-f5ac6600-8cbb-11e9-92c2-dfb72f7040d9.png)\r\n\r\n**Expected behavior:**\r\nThey should have same size.\r\n","Url":"https://github.com/dotnet/winforms/issues/1122","RelatedDescription":"Closed issue \"Font size of Form and controls are changed a little bigger by default\" (#1122)"},{"Id":"455174765","IsPullRequest":true,"CreatedAt":"2019-06-12T12:31:23","Actor":"dotnet-maestro[bot]","Number":"1124","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190611.2\r\n- **Date Produced**: 6/11/2019 12:55 PM\r\n- **Commit**: dfc41299b9aadb1ca98093d660df81811eca901b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19311.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19311.2\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1124","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1124)"},{"Id":"455123838","IsPullRequest":false,"CreatedAt":"2019-06-12T10:05:03","Actor":"Zheng-Li01","Number":"1123","RawContent":null,"Title":"Winforms controls diaplay as V5 mode for Visual Basic project in runtime ","State":"open","Body":"* .NET Core Version: .Net Core 3.0 Preview7 3.0.100.12367 build from master branch\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\t\r\n1. Create a Winforms .Net Core VB application with some controls\r\n2.  Build and run it\r\n\r\n**Actual behavior:\r\nWinforms controls in Core VB app display as V5 mode in runtime\r\n![Actual](https://user-images.githubusercontent.com/38325459/59342137-bde50300-8d3b-11e9-965c-601919379f75.PNG)\r\n\r\n**Expected behavior:**\r\nWinforms controls should display as V6 mode, like Winforms framework app by default.\r\n![Expected](https://user-images.githubusercontent.com/38325459/59342233-f2f15580-8d3b-11e9-8faa-3e9a6fa2b1dd.PNG)","Url":"https://github.com/dotnet/winforms/issues/1123","RelatedDescription":"Open issue \"Winforms controls diaplay as V5 mode for Visual Basic project in runtime \" (#1123)"},{"Id":"455069962","IsPullRequest":false,"CreatedAt":"2019-06-12T08:09:26","Actor":"RussKie","Number":"1121","RawContent":null,"Title":"PropertyGrid: FontEditor not working?","State":"open","Body":"\r\n**Problem description:**\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/59334140-254f8280-8d3d-11e9-8f6d-535cd614e636.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe rendering should be the same as in .NET Fx\r\n\r\n**Minimal repro:**\r\n\r\n* build and launch WinFormsControlsClassicTests and WinformsControlsTest\r\n* click `FontNameEditor` button in both and align opened windows side-by-side\r\n* expand any of Font properties\r\n","Url":"https://github.com/dotnet/winforms/issues/1121","RelatedDescription":"Open issue \"PropertyGrid: FontEditor not working?\" (#1121)"},{"Id":"455067764","IsPullRequest":false,"CreatedAt":"2019-06-12T08:03:48","Actor":"RussKie","Number":"1120","RawContent":null,"Title":"PropertyGrid: colors are not rendered / ColorEditor not working?","State":"open","Body":"\r\n**Problem description:**\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/59333203-2da6be00-8d3b-11e9-9a39-368bf67df39c.png)\r\n![image](https://user-images.githubusercontent.com/4403806/59333754-5bd8cd80-8d3c-11e9-875d-99fbe68a523f.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe rendering should be the same as in .NET Fx\r\n\r\n**Minimal repro:**\r\n\r\n* build and launch WinFormsControlsClassicTests and WinformsControlsTest\r\n* click `FontNameEditor` button in both and align opened windows side-by-side\r\n* expand any of Font properties","Url":"https://github.com/dotnet/winforms/issues/1120","RelatedDescription":"Open issue \"PropertyGrid: colors are not rendered / ColorEditor not working?\" (#1120)"},{"Id":"455065437","IsPullRequest":false,"CreatedAt":"2019-06-12T07:58:13","Actor":"RussKie","Number":"1119","RawContent":null,"Title":"PropertyGrid: images are not rendered / ImageEditor not working?","State":"open","Body":"\r\n**Problem description:**\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/59333395-92621880-8d3b-11e9-9d2f-228d5f6be70d.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe rendering should be the same as in .NET Fx\r\n\r\n**Minimal repro:**\r\n\r\n* build and launch WinFormsControlsClassicTests and WinformsControlsTest\r\n* click `FontNameEditor` button in both and align opened windows side-by-side\r\n* expand any of Font properties\r\n","Url":"https://github.com/dotnet/winforms/issues/1119","RelatedDescription":"Open issue \"PropertyGrid: images are not rendered / ImageEditor not working?\" (#1119)"},{"Id":"455043374","IsPullRequest":false,"CreatedAt":"2019-06-12T06:59:40","Actor":"RussKie","Number":"1118","RawContent":null,"Title":"PropertyGrid: different order for Font properties","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Have you experienced this same bug with .NET Framework?: Yes/No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/59329728-f207f600-8d32-11e9-81f3-80cd6c2ae893.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe order should be the same as in .NET Fx\r\n\r\n**Minimal repro:**\r\n\r\n* build and launch WinFormsControlsClassicTests and WinformsControlsTest\r\n* click `FontNameEditor` button in both and align opened windows side-by-side\r\n* expand any of `Font` properties","Url":"https://github.com/dotnet/winforms/issues/1118","RelatedDescription":"Open issue \"PropertyGrid: different order for Font properties\" (#1118)"},{"Id":"454939720","IsPullRequest":true,"CreatedAt":"2019-06-11T22:59:54","Actor":"AdamYoblick","Number":"1117","RawContent":null,"Title":"Proof of concept for porting a single Maui test to xUnit","State":"open","Body":"The way maui works is there's a single exe with multiple scenarios. Maui runs the scenarios and writes information to a log file. This is no good for our current test process.\r\n\r\nMy work consisted of:\r\n- Adding the source for the maui button tests to our codebase and making sure it builds\r\n- Cleaning up the maui button test source and csproj\r\n- Creating some helper classes to handle executing the maui test exe and deserializing the results log\r\n- Creating inline data for each maui scenario so each one would be discovered by xUnit, instead of all the button scenarios being one giant pass/fail.\r\n\r\nNote that when testing locally, you MUST use /m:1 to tell xUnit to only execute one test assembly at a time (like this: .\\build -integrationTest /m:1). Otherwise you'll run into race conditions where two UI windows are open at once and Maui is sending commands to the wrong window, which can cause false failures. The CI yaml has been updated to use /m:1 for integration tests, so this shouldn't happen in the automated build.","Url":"https://github.com/dotnet/winforms/pull/1117","RelatedDescription":"Open PR \"Proof of concept for porting a single Maui test to xUnit\" (#1117)"},{"Id":"454650254","IsPullRequest":true,"CreatedAt":"2019-06-11T12:31:29","Actor":"dotnet-maestro[bot]","Number":"1116","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190610.24\r\n- **Date Produced**: 6/11/2019 12:59 AM\r\n- **Commit**: f268510de7a7bcf800a6966830f8d11ff8d24e0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19310.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19310.24\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1116","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1116)"},{"Id":"454137575","IsPullRequest":true,"CreatedAt":"2019-06-11T12:05:24","Actor":"dotnet-maestro[bot]","Number":"1114","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 12:42 PM\r\n- **Commit**: 45361625125cdd3119050a852bd73163ca4b73f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19309.1\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1114","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1114)"},{"Id":"454490623","IsPullRequest":false,"CreatedAt":"2019-06-11T05:44:06","Actor":"RussKie","Number":"1115","RawContent":null,"Title":"Review: all editors derived from UITypeEditor ported","State":"open","Body":"As suggested in https://github.com/dotnet/winforms/issues/892#issuecomment-495455585 review whether [all editors derived from `UITypeEditor`](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor?view=netframework-4.8) have been ported:\r\n\r\n### Ported:\r\n* [x] AnchorEditor\r\n* [x] BorderSidesEditor\r\n* [x] CollectionEditor\r\n* [x] ColorEditor\r\n* [x] CursorEditor\r\n* [x] DockEditor\r\n* [x] FileNameEditor\r\n* [x] FolderNameEditor\r\n* [x] FontEditor\r\n* [x] FontNameEditor\r\n* [x] ImageEditor\r\n* [x] MultilineStringEditor\r\n* [x] ObjectSelectorEditor\r\n* [x] ShortcutKeysEditor\r\n\r\n### Missing:\r\n* [ ] **BinaryEditor** System.ComponentModel.Design, System.Design.dll\r\n* [ ] **ContentAlignmentEditor** System.Drawing.Design, System.Drawing.Design.dll\r\n* [ ] **DateTimeEditor** System.ComponentModel.Design, System.Design.dll\r\n* [ ] **IconEditor** System.Drawing.Design, System.Drawing.Design.dll\r\n\r\nMessaging\r\n* [ ] **QueuePathEditor** System.Messaging.Design, System.Messaging.dll\r\n\r\nWeb\r\n* [ ] **ConnectionStringEditor** System.Web.UI.Design, System.Design.dll\r\n* [ ] **DataControlFieldTypeEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **DataGridColumnCollectionEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **DataPagerFieldTypeEditor** System.Web.UI.Design.WebControls, System.Web.Extensions.Design.dll\r\n* [ ] **ExpressionsCollectionEditor** System.Web.UI.Design, System.Design.dll\r\n* [ ] **MenuBindingsEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **MenuItemCollectionEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **ParameterCollectionEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **RegexTypeEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **TreeNodeCollectionEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **TreeViewBindingsEditor** System.Web.UI.Design.WebControls, System.Design.dll\r\n* [ ] **UrlEditor** System.Web.UI.Design, System.Design.dll\r\n* [ ] **XmlFileEditor** System.Web.UI.Design, System.Design.dll\r\n\r\n### Obsolete\r\n* [x] **BindUITypeEditor** System.Workflow.ComponentModel.Design, System.Workflow.ComponentModel.dll\r\n* [x] **DataBindingCollectionEditor** System.Web.UI.Design, System.Design.dll\r\n* [x] **TypeBrowserEditor** System.Workflow.ComponentModel.Design, System.Workflow.ComponentModel.dll\r\n","Url":"https://github.com/dotnet/winforms/issues/1115","RelatedDescription":"Open issue \"Review: all editors derived from UITypeEditor ported\" (#1115)"},{"Id":"453900704","IsPullRequest":true,"CreatedAt":"2019-06-09T14:02:40","Actor":"OliaG","Number":"1112","RawContent":null,"Title":"Updated Feature Backlog in Roadmap doc","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/1112","RelatedDescription":"Open PR \"Updated Feature Backlog in Roadmap doc\" (#1112)"},{"Id":"453891216","IsPullRequest":true,"CreatedAt":"2019-06-09T12:30:32","Actor":"dotnet-maestro[bot]","Number":"1111","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190608.1\r\n- **Date Produced**: 6/8/2019 12:50 PM\r\n- **Commit**: 747a1bdf2a74a486fb075045cb2384fa89a7983c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19308.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19308.1\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1111","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1111)"},{"Id":"453479765","IsPullRequest":true,"CreatedAt":"2019-06-08T12:30:21","Actor":"dotnet-maestro[bot]","Number":"1108","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190606.12\r\n- **Date Produced**: 6/6/2019 9:47 PM\r\n- **Commit**: a1805103791e43031355e11c0d037bca803a9593\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19306.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19306.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190607.62\r\n- **Date Produced**: 6/8/2019 3:43 AM\r\n- **Commit**: 29999b2846623e2d96733577165968d09bc2bcc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19307.62\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19307.62\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1108","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1108)"},{"Id":"453769361","IsPullRequest":false,"CreatedAt":"2019-06-08T08:07:51","Actor":"weltkante","Number":"1110","RawContent":null,"Title":"PlaceholderText not virtual","State":"open","Body":"While commenting #1109 I noticed that `TextBox.PlaceholderText` [is not virtual](https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System/Windows/Forms/TextBox.cs#L909). Is this intentional or an oversight? Other properties like `Text` are virtual, presumably to allow subclasses customization control. Making `PlaceholderText` not virtual means subclasses can't \"turn off\" this feature and are at the mercy of the caller not trying to set the property.\r\n\r\nMight be worth fixing before 3.0 RTM if it is indeed an oversight.","Url":"https://github.com/dotnet/winforms/issues/1110","RelatedDescription":"Open issue \"PlaceholderText not virtual\" (#1110)"},{"Id":"453689487","IsPullRequest":false,"CreatedAt":"2019-06-07T20:52:35","Actor":"madewokherd","Number":"1109","RawContent":null,"Title":"TextBox.Text accessed when handle is not being created","State":"open","Body":"* .NET Core Version: N/A\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nDue to the addition of the PlaceholderText attribute, the virtual TextBox.Text property is read when handling WM_PAINT.  VMWare infrastructure client, which was designed for .NET 4.x, expects that TextBox.Text is read only when creating the handle for the control. When running with current winforms, this application throws an exception.\r\n\r\nRef: https://bugs.winehq.org/show_bug.cgi?id=25703\r\n\r\nNot sure if you actually want this level of compatibility with .NET, but I figured I'd file it just in case. We could fix it for now by checking PlaceholderText before Text (figuring that if an application actually sets PlaceholderText, it's targeting the current version anyway and can expect Text to be accessed), but avoiding similar changes in behavior during future development may be an unreasonable burden.\r\n\r\n**Actual behavior:**\r\n\r\nSystem.Exception: get_Text shouldn't be called now\r\n  at SensitiveTextBox.get_Text () [0x0000b] in <38501e67847d405c943d47fcb89757b0>:0 \r\n  at System.Windows.Forms.TextBox.WndProc (System.Windows.Forms.Message& m) [0x0009e] in <b34bc0b1a0ad46edab19a97c25136586>:0 \r\n  at System.Windows.Forms.Control+ControlNativeWindow.OnMessage (System.Windows.Forms.Message& m) [0x00001] in <b34bc0b1a0ad46edab19a97c25136586>:0 \r\n  at System.Windows.Forms.Control+ControlNativeWindow.WndProc (System.Windows.Forms.Message& m) [0x000b3] in <b34bc0b1a0ad46edab19a97c25136586>:0 \r\n  at System.Windows.Forms.NativeWindow.Callback (System.IntPtr hWnd, System.Int32 msg, System.IntPtr wparam, System.IntPtr lparam) [0x00030] in <b34bc0b1a0ad46edab19a97c25136586>:0 \r\n\r\n**Expected behavior:**\r\n\r\nNo exception.\r\n\r\n**Minimal repro:**\r\n\r\n```\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nclass SensitiveTextBox : TextBox\r\n{\r\n    public override string Text {\r\n        get {\r\n            if (!RecreatingHandle)\r\n                throw new Exception(\"get_Text shouldn't be called now\");\r\n            return base.Text;\r\n        }\r\n    }\r\n}\r\n\r\nclass TextBoxTest : Form\r\n{\r\n    TextBox textbox;\r\n\r\n    public TextBoxTest()\r\n    {\r\n        this.textbox = new SensitiveTextBox();\r\n        this.textbox.ClientSize = new System.Drawing.Size(300, 300);\r\n        this.ClientSize = new System.Drawing.Size(300, 300);\r\n        this.Controls.Add(this.textbox);\r\n    }\r\n\r\n    public static void Main()\r\n    {\r\n        Application.Run(new TextBoxTest());\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/1109","RelatedDescription":"Open issue \"TextBox.Text accessed when handle is not being created\" (#1109)"},{"Id":"453474866","IsPullRequest":false,"CreatedAt":"2019-06-07T11:52:22","Actor":"hughbe","Number":"1107","RawContent":null,"Title":"Enable nullability across winforms","State":"open","Body":"Once CoreFx and CoreCLR fully support nullability it would be great to do this in winforms\r\n\r\nProbably a large project...","Url":"https://github.com/dotnet/winforms/issues/1107","RelatedDescription":"Open issue \"Enable nullability across winforms\" (#1107)"},{"Id":"453352840","IsPullRequest":false,"CreatedAt":"2019-06-07T06:09:14","Actor":"RussKie","Number":"1106","RawContent":null,"Title":"FontNameEditor rendering artifact - *just* the blue box","State":"open","Body":"\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\n`FontNameEditor` font preview is showing less characters.\r\nFor example on the below screenshots:\r\n\r\n| Font | .NET 4.7.2 | .NET Core 3.0 |\r\n|---|---|---|\r\n| Arial Black | ab | a |\r\n| Forte | abc | ab |\r\n| Lucida Handwriting | ab | a |\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n| .NET 4.7.2 | .NET Core 3.0 |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/4403806/59082950-a6bba500-8938-11e9-8d07-cdae09a5e24b.png) |  ![image](https://user-images.githubusercontent.com/4403806/59082924-8be93080-8938-11e9-8d98-11eea254bb1f.png) |\r\n\r\nðŸ¤” ink It is possible the change may related to the change of the default font in #656.\r\n\r\n**Expected behavior:**\r\n\r\nWe show the same amount of characters as with .NET FX.\r\n\r\nIt looks like we can achieve the same render by reducing the `fontSize` in `DrawFontSample`:\r\n```\r\n        private static void DrawFontSample(PaintValueEventArgs e, FontFamily fontFamily, FontStyle fontStyle)\r\n        {\r\n            float fontSize = (float)(e.Bounds.Height / 1.2);\r\n            using (var font = new Font(fontFamily, fontSize, fontStyle, GraphicsUnit.Pixel))\r\n            {\r\n                e.Graphics.DrawString(\"abcd\", font, SystemBrushes.ActiveCaptionText, e.Bounds);\r\n            }\r\n        }\r\n```\r\n\r\n\r\n**Minimal repro:**\r\n\r\n* Run WinformsControlsTest in .NET 4.7.2 and .NET 3\r\n* Compare","Url":"https://github.com/dotnet/winforms/issues/1106","RelatedDescription":"Open issue \"FontNameEditor rendering artifact - *just* the blue box\" (#1106)"},{"Id":"453156459","IsPullRequest":true,"CreatedAt":"2019-06-06T19:56:47","Actor":"AdamYoblick","Number":"1105","RawContent":null,"Title":"commented out flaky test that is failing internal CI builds","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/1105","RelatedDescription":"Closed or merged PR \"commented out flaky test that is failing internal CI builds\" (#1105)"},{"Id":"453155655","IsPullRequest":false,"CreatedAt":"2019-06-06T17:37:46","Actor":"AdamYoblick","Number":"1104","RawContent":null,"Title":"Flaky Test: BindingContext_KeyEquals_Invoke_ReturnsExpected","State":"open","Body":"BindingContextTests.cs","Url":"https://github.com/dotnet/winforms/issues/1104","RelatedDescription":"Open issue \"Flaky Test: BindingContext_KeyEquals_Invoke_ReturnsExpected\" (#1104)"},{"Id":"452742166","IsPullRequest":true,"CreatedAt":"2019-06-06T17:15:55","Actor":"AdamYoblick","Number":"1100","RawContent":null,"Title":"allow integration tests to work with machine-wide installed dotnet sdk","State":"closed","Body":"- The integration tests were failing locally when there was no private sdk install (.dotnet folder) which happens when the version specified in the global.json is already installed machine-wide.\r\n- This fixes the code to check for a private .dotnet install first, then look for a matching machine-wide one if a private one is not found.","Url":"https://github.com/dotnet/winforms/pull/1100","RelatedDescription":"Closed or merged PR \"allow integration tests to work with machine-wide installed dotnet sdk\" (#1100)"},{"Id":"452992926","IsPullRequest":true,"CreatedAt":"2019-06-06T12:15:59","Actor":"dotnet-maestro[bot]","Number":"1103","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190605.13\r\n- **Date Produced**: 6/6/2019 5:54 AM\r\n- **Commit**: d05c046913964e880be08b804e7249f297617c2f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19305.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19305.13\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/1103","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1103)"},{"Id":"452786469","IsPullRequest":false,"CreatedAt":"2019-06-06T01:19:46","Actor":"RussKie","Number":"1102","RawContent":null,"Title":"Review: correctness of VS visualizers","State":"open","Body":"As it was discovered in https://github.com/dotnet/corefx/issues/38130 a number of type visualizers are defined in VS repo instead of near types.\r\n\r\nWe need to review correctness of definitions for WinForms types:\r\n```\r\n// System.Windows.Forms\r\n[assembly: DebuggerDisplay(@\"\\{ExecutablePath = {executablePath}}\", Target = typeof(WinForms::Application))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target = typeof(WinForms::Button))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text} CheckState = {checkState}}\", Target = typeof(WinForms::CheckBox))]\r\n[assembly: DebuggerDisplay(@\"\\{SelectedItem = {Text}}\", Target = typeof(WinForms::CheckedListBox))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target = typeof(WinForms::DataGrid))]\r\n[assembly: DebuggerDisplay(@\"\\{Type = {type} Column = {col} Row = {row}}\", Target = typeof(WinForms::DataGrid.HitTestInfo))]\r\n[assembly: DebuggerDisplay(@\"\\{HeaderText = {headerName}}\", Target = typeof(WinForms::DataGridColumnStyle))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target = typeof(WinForms::DataGridTextBox))]\r\n[assembly: DebuggerDisplay(@\"\\{HeaderText = {headerName}}\", Target = typeof(WinForms::DataGridTextBoxColumn))]\r\n[assembly: DebuggerDisplay(@\"\\{Font = {font} Color = {color}}\", Target = typeof(WinForms::FontDialog))]\r\n[assembly: DebuggerDisplay(@\"\\{Value = {value} Min = {minimum} Max = {maximum}}\", Target = typeof(WinForms::HScrollBar))]\r\n[assembly: DebuggerDisplay(@\"\\{InvalidRect = {invalidRect}}\", Target = typeof(WinForms::InvalidateEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{Index = {index}}\", Target = typeof(WinForms::ItemChangedEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{Index = {index} NewValue = {newValue} CurrentValue = {currentValue}}\", Target = typeof(WinForms::ItemCheckEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{KeyData = {keyData}}\", Target = typeof(WinForms::KeyEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{KeyChar = {keyChar}}\", Target = typeof(WinForms::KeyPressEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{LinkText = {linkText}}\", Target = typeof(WinForms::LinkClickedEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{SelectedItem = {Text}}\", Target = typeof(WinForms::ListBox))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target= typeof(WinForms::ListViewItem))]\r\n[assembly: DebuggerDisplay(@\"\\{X = {x} Y = {y} Button = {button}}\", Target = typeof(WinForms::MouseEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{Value = {currentValue} Min = {minimum} Max = {maximum}}\", Target = typeof(WinForms::NumericUpDown))]\r\n[assembly: DebuggerDisplay(@\"\\{ClipRectangle = {clipRect}}\", Target = typeof(WinForms::PaintEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{Value = {value} Min = {minimum} Max = {maximum}}\", Target = typeof(WinForms::ProgressBar))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text} Checked = {isChecked}}\", Target = typeof(WinForms::RadioButton))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target = typeof(WinForms::RichTextBox))]\r\n[assembly: DebuggerDisplay(@\"\\{Bounds = {bounds} WorkingArea = {workingArea} Primary = {primary} DeviceName = {deviceName}}\", Target = typeof(WinForms::Screen))]\r\n[assembly: DebuggerDisplay(@\"\\{Start = {start} End = {end}}\", Target = typeof(WinForms::SelectionRange))]\r\n[assembly: DebuggerDisplay(@\"\\{SplitPosition = {splitSize} MinExtra = {minExtra} MinSize = {minSize}}\", Target = typeof(WinForms::Splitter))]\r\n[assembly: DebuggerDisplay(@\"\\{SplitX = {splitX} SplitY = {splitY}}\", Target = typeof(WinForms::SplitterEventArgs))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {Text}}\", Target = typeof(WinForms::TextBox))]\r\n[assembly: DebuggerDisplay(@\"\\{Interval = {interval}}\", Target = typeof(WinForms::Timer))]\r\n[assembly: DebuggerDisplay(@\"\\{Value = {Value} Min = {minimum} Max = {maximum}}\", Target = typeof(WinForms::TrackBar))]\r\n[assembly: DebuggerDisplay(@\"\\{Text = {text}}\", Target = typeof(WinForms::TreeNode))]\r\n[assembly: DebuggerDisplay(@\"\\{Value = {value} Min = {minimum} Max = {maximum}}\", Target = typeof(WinForms::VScrollBar))]\r\n```\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_git/VS?path=%2Fsrc%2Fcsharp%2Fautoexp%2Fautoexp.cs&version=GBmaster&line=58&lineStyle=plain&lineEnd=91&lineStartColumn=1&lineEndColumn=122\r\n\r\nFor any changes required liaise with @r-ramesh.\r\n","Url":"https://github.com/dotnet/winforms/issues/1102","RelatedDescription":"Open issue \"Review: correctness of VS visualizers\" (#1102)"},{"Id":"452769724","IsPullRequest":false,"CreatedAt":"2019-06-06T00:01:29","Actor":"zsd4yr","Number":"1101","RawContent":null,"Title":"Support Inherited Form item and Inherited User Control items","State":"open","Body":"OS: RS4 + .Net 4.8 03239.00  \r\n\r\nSteps to reproduce:\r\n\r\n1. Install .NET Core 3.0 SDK alpha available in the dotnet/code-sdk repo.\r\n2. Create a new WinForms .NET Core 3.0 app using the CML:\r\n```cmd\r\ndotnet new winforms -o MyWinFormsApp\r\n```\r\n3. Open the .csproj file from the app folder using Visual Studio.\r\n4. Build the app, then add the Inherited Form/Inherited User Control items to the project.\r\n\r\nActual:\r\nAn error pops up, click OK then the warning dialog pops up.\r\n\r\n![image](https://user-images.githubusercontent.com/10677481/58997854-42230d80-87b3-11e9-9d7f-60d4c7d95771.png)\r\n\r\nAssembly Load Error\r\n\r\nUnable to load assembly '\\\\mlangfs1\\public\\Winforms\\NETCore30\\BugReproApps\\InheritedIssue\\obj\\Debug\\netcoreapp3.0\\InheritedIssue.dll'.  Ensure that the file is a valid .Net Framework assembly.\r\n\r\nOK  \r\n \r\nClick OK button:\r\n![image](https://user-images.githubusercontent.com/10677481/58997903-667eea00-87b3-11e9-8789-5782fb2ea94a.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/1101","RelatedDescription":"Open issue \"Support Inherited Form item and Inherited User Control items\" (#1101)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-14T05:31:00.4122332Z","RunDurationInMilliseconds":856}