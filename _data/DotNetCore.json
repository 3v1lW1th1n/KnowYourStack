{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6980928894","Type":"PullRequestEvent","CreatedAt":"2017-12-13T04:57:56","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15498","RelatedDescription":"Merged pull request \" Revert \"[Local GC] Move knowledge of overlapped I/O objects to the EE through four callbacks (#14982)\"\" (#15498) at dotnet/coreclr","RelatedBody":"These two associated PRs are causing test instability in CoreFX and are blocking a Maestro update (https://github.com/dotnet/corefx/pull/25872). I'm reverting them here so that I have time to fully investigate the root cause.\r\n\r\nI'm currently running the affected CoreFX test suites locally on this change to ensure that the issue is actually fixed by reverting these commits.\r\n\r\ncc @ahsonkhan @jkotas @sergiy-k"},{"Id":"6980808478","Type":"PullRequestEvent","CreatedAt":"2017-12-13T04:02:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15499","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-26013-03 (master)\" (#15499) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6980796036","Type":"PullRequestEvent","CreatedAt":"2017-12-13T03:57:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15486","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to prerelease-02312-02, preview1-26013-01, preview1-26012-03, respectively (master)\" (#15486) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6980786261","Type":"PullRequestEvent","CreatedAt":"2017-12-13T03:53:09","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15134","RelatedDescription":"Merged pull request \"Make RyuJIT/arm32 the default arm32 JIT\" (#15134) at dotnet/coreclr","RelatedBody":"RyuJIT/arm32 JIT is now named clrjit.dll (was named protojit.dll).\r\n\r\narm32 LEGACY_BACKEND JIT is now named legacyjit.dll (was named clrjit.dll)."},{"Id":"6980701648","Type":"PullRequestEvent","CreatedAt":"2017-12-13T03:19:10","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15498","RelatedDescription":"Opened pull request \" Revert \"[Local GC] Move knowledge of overlapped I/O objects to the EE through four callbacks (#14982)\"\" (#15498) at dotnet/coreclr","RelatedBody":"These two associated PRs are causing test instability in CoreFX and are blocking a Maestro update (https://github.com/dotnet/corefx/pull/25872). I'm reverting them here so that I have time to fully investigate the root cause.\r\n\r\nI'm currently running the affected CoreFX test suites locally on this change to ensure that the issue is actually fixed by reverting these commits.\r\n\r\ncc @ahsonkhan @jkotas @sergiy-k"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6980810342","Type":"IssuesEvent","CreatedAt":"2017-12-13T04:03:24","Actor":"EncoderPtd","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8228","RelatedDescription":"Opened issue \".net core code metrics\" (#8228) at dotnet/cli","RelatedBody":"As we know there's a useful function for .net projects:\r\nAnalyze -> Calculate Code Metrics\r\nIt can give out some detailed information of the project.\r\n\r\nMay i ask if it is now supported for .net core projects? I can't find it. :)\r\nWhich repository should this issue be placed in?"},{"Id":"6980209088","Type":"PullRequestEvent","CreatedAt":"2017-12-13T00:23:22","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8223","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26012-06 (master)\" (#8223) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6980183791","Type":"PullRequestEvent","CreatedAt":"2017-12-13T00:14:38","Actor":"janvorli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8227","RelatedDescription":"Opened pull request \"Enable Alpine 3.6 CLI build\" (#8227) at dotnet/cli","RelatedBody":"This change enables CLI build for Alpine 3.6 and also adds CI job for\r\nit. It is mostly based on changes that were necessary to\r\nenable building of rhel.6 CLI\r\n\r\n"},{"Id":"6980107549","Type":"PullRequestEvent","CreatedAt":"2017-12-12T23:49:38","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8225","RelatedDescription":"Merged pull request \"Bump stage0 to 2.2.0-preview1-007799.\" (#8225) at dotnet/cli","RelatedBody":"Need to remove some unnecessary dependencies in dotnet-cli-build.csproj because the NuGet.CommandLine.XPlat reference was bringing in an old MSBuild version, which was breaking restore. I didn't see any usages of this reference, so I'm removing it since it is not needed.\r\n\r\n```JSON\r\n \"code\": \"NU1608\",\r\n      \"level\": \"Error\",\r\n      \"message\": \"Detected package version outside of dependency constraint: Microsoft.Build.Runtime 15.1.1012 requires Microsoft.Build (= 15.1.1012) but version Microsoft.Build 15.4.8 was resolved.\",\r\n      \"libraryId\": \"Microsoft.Build\",\r\n      \"targetGraphs\": [\r\n        \".NETCoreApp,Version=v2.1\"\r\n      ] \r\n```\r\n\r\nThis was caused because\r\n\r\n```JSON\r\n\"NuGet.CommandLine.XPlat/4.4.0-preview3-4475\": {\r\n       \"dependencies\": {\r\n          \"Microsoft.Build.Runtime\": \"15.1.1012\", \r\n```\r\n\r\nand\r\n\r\n```JSON\r\n\"Microsoft.Build.Runtime/15.1.1012\": {\r\n        \"type\": \"package\",\r\n        \"dependencies\": {\r\n          \"Microsoft.Build\": \"[15.1.1012]\", \r\n```\r\n\r\nNotice the `[15.1.1012]` version there, meaning that exact version - no higher, no lower.\r\n\r\nThis unblocks @janvorli's work to bootstrap alpine, since he is putting his locally built alpine SDK in Azure for that version."},{"Id":"6980087708","Type":"IssuesEvent","CreatedAt":"2017-12-12T23:43:02","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8226","RelatedDescription":"Opened issue \"Add support for --source on `dotnet install tool`\" (#8226) at dotnet/cli","RelatedBody":"Currently, `dotnet install tool` only accepts a `--configfile` parameter. This means I have to create a NuGet.config file if I want to install a global tool from a local nupkg.\r\n\r\nKeeping in-line with many other dotnet verbs, it seems like `dotnet install tool` should add support for the `--source` flag that takes as a value any valid NuGet feed.\r\n\r\nThe goal is that users could install looks like this:\r\n```\r\ndotnet install tool --source https://dotnet.myget.org/F/aspnetcore-dev Microsoft.DotNet.Watcher.Tools\r\n```\r\n\r\nUsing: 2.2.0-preview1-007796\r\n\r\ncc @wli3 \r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6979850506","Type":"PullRequestEvent","CreatedAt":"2017-12-12T22:37:00","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/600","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02312-02 (master)\" (#600) at dotnet/standard","RelatedBody":""},{"Id":"6964037348","Type":"IssuesEvent","CreatedAt":"2017-12-08T19:53:15","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/601","RelatedDescription":"Opened issue \"Understanding NETStandard.Library as a dependancy in my nuspec\" (#601) at dotnet/standard","RelatedBody":"Should a NETStandard.Library dependency appear in a nuspec?\r\n\r\nWhat does it do to projects that reference the nupkg versus not having it in the nuspec? If my netstandard1.6 library chooses to depend on 1.6.1, doesn't that force any dependent library to also depend on 1.6.1+? Is that a good thing and is that why you'd put it in a nuspec?\r\n\r\nOut of 1.6.0, 1.6.1, 2.0.0, and 2.0.1, the SDK picks 1.6.1 and 2.0.0 to reference for netstandard1.6 and netstandard2.0. Why not 2.0.1 for both?\r\n\r\nIs there a changelog that summarizes the differences in 1.6.1, 2.0.0 and 2.0.1?\r\n\r\nAre there docs that answer these questions? This is the only information I've been able to glean so far which hints that keeping it in the nuspec is correct, but it doesn't answer any of my other questions: \r\n![image](https://user-images.githubusercontent.com/8040367/33782541-21670bc0-dc27-11e7-9071-ac023a71c840.png)\r\n(https://docs.microsoft.com/en-us/nuget/guides/create-net-standard-packages-vs2017#package-the-component)\r\n"},{"Id":"6963685770","Type":"PullRequestEvent","CreatedAt":"2017-12-08T18:25:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/600","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02308-01 (master)\" (#600) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6980788391","Type":"PullRequestEvent","CreatedAt":"2017-12-13T03:54:05","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25881","RelatedDescription":"Merged pull request \"Temporarily removing use of ReadOnlySpan indexer.\" (#25881) at dotnet/corefx","RelatedBody":"Related to https://github.com/dotnet/corefx/pull/25326\r\n\r\nRemoving the use of the ReadOnlySpan indexer to help the implementation change go through with the least disabling of tests.\r\n\r\nThis is a temporary workaround that is required to reduce the number of failing tests that would need to be disabled due to the change to ReadOnlySpan indexer to return ref readonly (in coreclr and in .NET Native)\r\n\r\ncc @weshaggard, @stephentoub, @KrzysztofCwalina, @jkotas, @botaberg, @zamont \r\n\r\n**This change should be reverted once the change propagates**"},{"Id":"6980706885","Type":"IssuesEvent","CreatedAt":"2017-12-13T03:21:09","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25884","RelatedDescription":"Opened issue \".NET does not have async file enumerators\" (#25884) at dotnet/corefx","RelatedBody":"This presents a problem when enumerating slow/remote or offline/asleep volumes.\r\n\r\nThings to consider:\r\n\r\n- Work being done around extensibility https://github.com/dotnet/designs/blob/master/accepted/file-enumeration.md\r\n- Potential `IAsyncEnumerable<T>` https://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md\r\n- Lack of low-level OS support (at least on Windows, not sure about Unix)\r\n\r\nRelated issue: #25863 \r\n\r\n@danmosemsft, @pjanotti "},{"Id":"6980543728","Type":"IssuesEvent","CreatedAt":"2017-12-13T02:20:23","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25883","RelatedDescription":"Opened issue \"Match connect timeout values between curlhandler and winhttphandler.\" (#25883) at dotnet/corefx","RelatedBody":"refer discussion \r\n\r\nhttps://github.com/dotnet/corefx/pull/25879#discussion_r156539561\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6980666551","Type":"IssuesEvent","CreatedAt":"2017-12-13T03:05:45","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23754","RelatedDescription":"Opened issue \"Cannot rename a tuple element in a declaration\" (#23754) at dotnet/roslyn","RelatedBody":"``` C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var input = GetInput();\r\n\r\n            Console.WriteLine(input.time);\r\n        }\r\n\r\n        private static (DateTime time, string path) GetInput()\r\n        {\r\n            return default((DateTime, string));\r\n        }\r\n    }\r\n```\r\n\r\n1. Attempt to rename \"time\" in GetInput and all consumptions to be renamed\r\n\r\nExpected: To be able to rename\r\nActual:\r\n\r\n```\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nYou cannot rename this element.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n```"},{"Id":"6980645028","Type":"IssuesEvent","CreatedAt":"2017-12-13T02:57:34","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23753","RelatedDescription":"Opened issue \"Don't get offered to deconstruct tuples if there's a clash of names\" (#23753) at dotnet/roslyn","RelatedBody":"``` C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            (DateTime time, string path) = GetInput();\r\n            (DateTime time, string path) output = GetOutput();\r\n        }\r\n\r\n        private static (DateTime time, string path) GetInput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n\r\n        private static (DateTime time, string path) GetOutput()\r\n        {\r\n            return default((DateTime time, string path));\r\n        }\r\n    }\r\n```\r\n\r\nExpected: Get offered to deconstruct `(DateTime time, string path) output = GetOutput();`\r\nActual: Not offered to deconstruct\r\n\r\nEither we still offer but show there's a conflict or pick a different name. This confused me because the declarations were not next to each other in my case.\r\n\r\n"},{"Id":"6980604266","Type":"IssuesEvent","CreatedAt":"2017-12-13T02:42:35","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23752","RelatedDescription":"Opened issue \"\"Use explicit type instead of 'var'\" doesn't fire for deconstructed tuples\" (#23752) at dotnet/roslyn","RelatedBody":"``` C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var (foo, bar) = GetFooBar();\r\n        }\r\n\r\n        private static (DateTime foo, DateTime bar) GetFooBar()\r\n        {\r\n            return default((DateTime foo, DateTime Bar));\r\n        }\r\n    }\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/33919165-42494082-e00b-11e7-98dd-9d328e387152.png)\r\n\r\n**Expected:** \r\n```\r\nMessage\tIDE0008\tUse explicit type instead of 'var'\r\n```\r\n**Actual:** No message\r\n\r\nNote: It does fire for:\r\n\r\n``` C#\r\nvar fooBar = GetFooBar();\r\n```"},{"Id":"6980484590","Type":"PullRequestEvent","CreatedAt":"2017-12-13T01:59:26","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23733","RelatedDescription":"Merged pull request \"Merge master into features/vs-for-mac-refactorings\" (#23733) at dotnet/roslyn","RelatedBody":"Just bringing the branch up to date."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6979914445","Type":"PullRequestEvent","CreatedAt":"2017-12-12T22:53:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5091","RelatedDescription":"Merged pull request \"[ObjWriter/Linux] Integration into build process\" (#5091) at dotnet/corert","RelatedBody":"\t- now it downloads llvm 5 release and uses it in the building objwriter\r\n\t- add [objwriter] option into build.sh\r\n\t- only Linux platform support\r\n\t- cross building support(x86/x64 -> ARM32)\r\n\r\nLater I'm going to add the following:\r\n- [ ] Documentation with the work's logic.\r\n- [ ] Additional trick related to the fact that the cross building for arm32 is x86, not the x64 host.\r\n- [ ] Integration ObjWriter build and general build to use the locally built ObjWriter.\r\n- [ ] Support for other platforms.\r\n\r\n@dotnet/arm32-contrib please review"},{"Id":"6979098318","Type":"PullRequestEvent","CreatedAt":"2017-12-12T19:47:39","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5092","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5092) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6979096127","Type":"PullRequestEvent","CreatedAt":"2017-12-12T19:47:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5098","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5098) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6979080709","Type":"PullRequestEvent","CreatedAt":"2017-12-12T19:43:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5098","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5098) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6978000423","Type":"PullRequestEvent","CreatedAt":"2017-12-12T16:13:34","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5097","RelatedDescription":"Opened pull request \"[ILVerify] Fix leave from catch into enclosing try and assignability of readonly ByRefs\" (#5097) at dotnet/corert","RelatedBody":"This fixes two bugs discovered in course of the [prototyped](https://github.com/dotnet/roslyn/pull/23210/files#diff-21f74235fa50cbcb57190284b2578455) Roslyn test integration:\r\n- When checking a leave from a catch into an enclosing try, the validation of leave targets used the wrong index to get the source region information.\r\n- IsAssignable was not checking for the readonlyness of ByRefs.\r\n\r\n@jcouv FYI: this should fix the `LeaveIntoTry` and `UnexpectedTypeOnStack` flags of [your prototype](https://github.com/dotnet/roslyn/pull/23210/files#diff-21f74235fa50cbcb57190284b2578455). I have also had a quick look over all other flags; many are related to ILVerify not supporting TypedReferences / ArgIterators, and there are also a lot of special cases which are not implemented by ILVerify yet. I will have to look up how PEVerify implements those first.\r\nFor some of the other flags I have to actually debug the Roslyn tests, but I am still working on getting that to run."},{"Id":"6977856812","Type":"IssuesEvent","CreatedAt":"2017-12-12T15:49:37","Actor":"Fabi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5096","RelatedDescription":"Opened issue \"Can not open input file if spaces in assembly name\" (#5096) at dotnet/corert","RelatedBody":"Part of my PropertyGroup:\r\n\r\n>   <PropertyGroup>\r\n    <AssemblyName>Arctium WoW Client Launcher</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n    <ApplicationIcon>arctium.ico</ApplicationIcon>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <Platforms>x64</Platforms>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\nAs you can see I use spaces in AssemblyName, but when build with \r\n`dotnet publish /t:LinkNative -r win-x64 /p:Configuration=Release /p:platform=\"x64\"`\r\n\r\nI'll get an error:\r\n\r\n> LINK : fatal error LNK1181: cannot open input file 'obj\\x64\\Release\\netcoreapp2.0\\win-x64\\native\\Arctium.obj' [D:\\source\\repos\\WoW-Tools\\src\\Arctium.WoW.Launcher\\Arctium.WoW.Launcher.Windows\\Arctium.WoW.Launcher.Windows.csproj]\r\nC:\\Users\\fkoen\\corert\\bin\\Windows_NT.x64.Release\\build\\Microsoft.NETCore.Native.targets(184,5): error MSB3073: The command \"link  @\"obj\\x64\\Release\\netcoreapp2.0\\win-x64\\native\\link.rsp\"\" exited with code 1181. [D:\\source\\repos\\WoW-Tools\\src\\Arctium.WoW.Launcher\\Arctium.WoW.Launcher.Windows\\Arctium.WoW.Launcher.Windows.csproj]\r\n\r\nIt seems that it cuts the name after the first space and searches for `Arctium.obj` then."},{"Id":"6977832353","Type":"IssuesEvent","CreatedAt":"2017-12-12T15:45:36","Actor":"Fabi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5095","RelatedDescription":"Opened issue \"No app icon when set over ApplicationIcon in csproj file\" (#5095) at dotnet/corert","RelatedBody":"Right now there is no application icon when building a native binary on windows.\r\n\r\nI set it with:\r\n\r\n>   <PropertyGroup>\r\n    <AssemblyName>ArctiumWoWClientLauncher</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n    <ApplicationIcon>arctium.ico</ApplicationIcon>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <Platforms>x64</Platforms>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\nAnd run it with \r\n`dotnet publish /t:LinkNative -r win-x64 /p:Configuration=Release /p:platform=\"x64\"`\r\n\r\nThe file `arctium.ico` is placed in the same directory than the csproj file."},{"Id":"6977744756","Type":"IssuesEvent","CreatedAt":"2017-12-12T15:31:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5094","RelatedDescription":"Closed issue \"Errors on finding entry points from [DllImport...]\" (#5094) at dotnet/corert","RelatedBody":"Hey,\r\n\r\nright now I'm playing around with corert and got some errors while running an application that uses dll imports.\r\n\r\nOne sample is\r\n\r\n`        [DllImport(\"kernel32.dll\", EntryPoint = \"CreateProcess\", SetLastError = true)]\r\n        public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, ref StartupInfo lpStartupInfo, out ProcessInformation lpProcessInformation);\r\n`\r\n\r\nRight now it gives an exception on execution:\r\n`Unhandled Exception: System.EntryPointNotFoundException: Unable to find an entry point named 'CreateProcess' in DLL 'kernel32.dll'.`\r\n\r\nAre imports not handled yet? Do i need to use other signatures?\r\n\r\nI just built the latest source and tested it with this command line:\r\n`dotnet build /t:LinkNative -r win-x64 /p:Configuration=Release /p:platform=\"Any CPU\"`"},{"Id":"6977492578","Type":"IssuesEvent","CreatedAt":"2017-12-12T14:49:17","Actor":"Fabi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5094","RelatedDescription":"Opened issue \"Errors on finding entry points from [DllImport...]\" (#5094) at dotnet/corert","RelatedBody":"Hey,\r\n\r\nright now I'm playing around with corert and got some errors while running an application that uses dll imports.\r\n\r\nOne sample is\r\n\r\n`        [DllImport(\"kernel32.dll\", EntryPoint = \"CreateProcess\", SetLastError = true)]\r\n        public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, ref StartupInfo lpStartupInfo, out ProcessInformation lpProcessInformation);\r\n`\r\n\r\nRight now it gives an exception on execution:\r\n`Unhandled Exception: System.EntryPointNotFoundException: Unable to find an entry point named 'CreateProcess' in DLL 'kernel32.dll'.`\r\n\r\nAre imports not handled yet? Do i need to use other signatures?\r\n\r\nI just built the latest source and tested it with this command line:\r\n`dotnet build /t:LinkNative -r win-x64 /p:Configuration=Release /p:platform=\"Any CPU\"`"},{"Id":"6975177765","Type":"IssuesEvent","CreatedAt":"2017-12-12T05:26:23","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5093","RelatedDescription":"Opened issue \"[Cross] CMake Toolchain compile flags loop\" (#5093) at dotnet/corert","RelatedBody":"Just not to forget [discussion](https://github.com/dotnet/corert/pull/5091#discussion_r156154156)"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6980543477","Type":"PullRequestEvent","CreatedAt":"2017-12-13T02:20:17","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1815","RelatedDescription":"Merged pull request \"Update RepoToolset to 1.0.0-beta-62412-04\" (#1815) at dotnet/sdk","RelatedBody":""},{"Id":"6980058297","Type":"PullRequestEvent","CreatedAt":"2017-12-12T23:33:41","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1816","RelatedDescription":"Opened pull request \"Updating the DotNetCliVersion to 2.2.0-preview1-007799\" (#1816) at dotnet/sdk","RelatedBody":""},{"Id":"6979424014","Type":"PullRequestEvent","CreatedAt":"2017-12-12T20:59:27","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1815","RelatedDescription":"Opened pull request \"Update RepoToolset to 1.0.0-beta-62412-03\" (#1815) at dotnet/sdk","RelatedBody":""},{"Id":"6978837971","Type":"IssuesEvent","CreatedAt":"2017-12-12T18:59:33","Actor":"sbomer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1814","RelatedDescription":"Opened issue \"Remove interdependency between crossgen and store targets\" (#1814) at dotnet/sdk","RelatedBody":"The crossgen targets (in Microsoft.NET.CrossGen.targets) should be decoupled from the store targets (in Microsoft.NET.ComposeStore.targets) to allow them to be used independently. I came across this while trying to reuse crossgen targets in https://github.com/mono/linker/pull/192 to enable a crossgen step in the publish pipeline. I was able to reuse the targets that restore crossgen with some [workarounds](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R76), but not those that actually run crossgen.\r\n\r\nSpecifically, in the following dependency graph (I've outlined the crossgen-related targets), the following dependencies should be removed or replaced with targets not related to the store:\r\n- _RestoreCrossgen -> PrepforRestoreForComposeStore\r\n- _RunOptimizer -> _ComputeResolvedFilesToStoreTypes\r\n\r\nThere are also some implicit data dependencies between crossgen and store targets, which cause crossgen-related targets to break if they are called as dependencies of external targets (instead of as dependencies of ComposeStore). Here are the ones I've noticed:\r\n- _RestoreCrossgen depends on _TFM, which is set by PrepareForComposeStore, requiring this [workaround](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R81).\r\n- _GetCrossgenProps depends on ComposeWorkingDir, which is computed by PrepareForComposeStore, requiring this [workaround](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R92).\r\n\r\n\r\n![img_20171130_110834](https://user-images.githubusercontent.com/787361/33902203-265b5032-df29-11e7-9129-799cbe13bee0.jpg)\r\n\r\n"},{"Id":"6974169677","Type":"IssuesEvent","CreatedAt":"2017-12-11T23:20:42","Actor":"yaakov-h","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1813","RelatedDescription":"Opened issue \"Improve compilation symbols when multi-targeting\" (#1813) at dotnet/sdk","RelatedBody":"The SDK defines a bunch of compilation symbols when multi-targeting.\r\n\r\nFor example, when targeting .NET Standard 1.3, developers can use `#if NETSTANDARD1_3` to conditionally use APIs that are available with that target framework.\r\n\r\nHowever, when multi-targeting across different versions, developers have to use multiple of these. For example:\r\n\r\n```\r\n#if NETSTANDARD1_3 || NETSTANDARD1_6 || NETSTANDARD2_0\r\n```\r\n\r\nIt would be nice to have more inclusive compilation symbols, so that a developer could, for example, use:\r\n\r\n```\r\n#if NETSTANDARD1_3_OR_GREATER\r\n```\r\n\r\nThis would be defined when targeting .NET Standard 1.3, 1.4, 1.5, 1.6. 2.0, 2.1, etc., but not when targeting .NET Standard 1.0, 1.1, 1.2, or .NET Framework, Xamarin, .NET Core etc.\r\n\r\nDoing so would decrease the friction when introducing a newer platform (e.g. .NET Standard 3.0 one day) to a multi-targeting library that aims to keep backwards compatibility for older runtimes, but also taking advantage of newer APIs where they are available.\r\n\r\nInspired by https://github.com/dotnet/csharplang/issues/1182"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":30,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":155,"RawContent":null}]}},"RunOn":"2017-12-13T05:30:23.704772Z","RunDurationInMilliseconds":8707}