{"Data":{"GitHub":{"Issues":[{"Id":"369334498","IsPullRequest":true,"CreatedAt":"2018-10-12T01:16:08","Actor":"montebhoover","Number":"1234","RawContent":null,"Title":"Update to version of Lightgbm with no runtime dependency on GCC.","State":"closed","Body":"Update to version of Lightgbm with no runtime dependency on GCC.\r\n\r\nRequires adding installation of libomp to Mac build phase. (It now has a runtime dependency on the standard OpenMP (libomp) instead of the GCC implementation (libgomp)).\r\n\r\nFixes #1067 and #494.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1234","RelatedDescription":"Closed or merged PR \"Update to version of Lightgbm with no runtime dependency on GCC.\" (#1234)"},{"Id":"369319822","IsPullRequest":false,"CreatedAt":"2018-10-11T22:49:37","Actor":"Anipik","Number":"1233","RawContent":null,"Title":"Dead Matrix Multiplication Code","State":"closed","Body":"We are not currently using  Some of the matrix multiplication code anywhere\r\nparticularly \r\n```C#\r\npublic static void MatTimesSrc(bool tran, bool add, AlignedArray mat, int[] rgposSrc, AlignedArray srcValues, int posMin, int iposMin, int iposLim, AlignedArray dst, int crun)\r\n```\r\nwhich is the sparse matrix multiplication. Is it okay to remove it ?\r\n Another thing we are not using the ```add = true``` flag in any of the existing implementations.\r\n\r\nCan I go ahead and remove that too ?\r\n\r\ncc @eerhardt @danmosemsft @shauheen @codemzs \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1233","RelatedDescription":"Closed issue \"Dead Matrix Multiplication Code\" (#1233)"},{"Id":"368973553","IsPullRequest":true,"CreatedAt":"2018-10-11T22:09:20","Actor":"sfilipi","Number":"1224","RawContent":null,"Title":"exposing the biases for multi-class logistic regression","State":"closed","Body":"Resolves #1061\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1224","RelatedDescription":"Closed or merged PR \"exposing the biases for multi-class logistic regression\" (#1224)"},{"Id":"369313040","IsPullRequest":false,"CreatedAt":"2018-10-11T21:30:42","Actor":"vaeksare","Number":"1232","RawContent":null,"Title":"Pretrained DNN Image Featurization","State":"open","Body":"Support for a DNN Image Featurizer Transform is to be added to ML.NET. This will allow users to use 1 of 4 pretrained DNN models (ResNet18, ResNet50, ResNet101, and AlexNet) trained on ImageNet in order to featurize an input image. \r\n\r\nThis transform will use the ONNX Transform as the backbone of doing input preprocessing and applying the pretrained DNN model.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1232","RelatedDescription":"Open issue \"Pretrained DNN Image Featurization\" (#1232)"},{"Id":"369299546","IsPullRequest":false,"CreatedAt":"2018-10-11T20:49:47","Actor":"wschin","Number":"1231","RawContent":null,"Title":"Factorization Machine Better to Support Regression","State":"open","Body":"ML.NET's (field-aware) factorization machine doesn't support regression problems while SageMaker [does](https://docs.aws.amazon.com/sagemaker/latest/dg/fact-machines.html). Rating prediction is an important application about this.","Url":"https://github.com/dotnet/machinelearning/issues/1231","RelatedDescription":"Open issue \"Factorization Machine Better to Support Regression\" (#1231)"},{"Id":"369260354","IsPullRequest":true,"CreatedAt":"2018-10-11T20:40:35","Actor":"seemantsagar","Number":"1230","RawContent":null,"Title":"Release/preview","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1230","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1230)"},{"Id":"369230433","IsPullRequest":true,"CreatedAt":"2018-10-11T17:38:55","Actor":"eerhardt","Number":"1229","RawContent":null,"Title":"Refactor CpuMathUtils","State":"open","Body":"- Allow it to take Spans instead of arrays.\r\n- Remove redundant overloads\r\n- When multiple spans are accepted, always use an explicit count parameter instead of one being chosen as having the right length.\r\n\r\nWorking towards #608","Url":"https://github.com/dotnet/machinelearning/pull/1229","RelatedDescription":"Open PR \"Refactor CpuMathUtils\" (#1229)"},{"Id":"369229133","IsPullRequest":false,"CreatedAt":"2018-10-11T17:35:44","Actor":"vaeksare","Number":"1228","RawContent":null,"Title":"ONNX Transform Crashing or Freezing","State":"open","Body":"ONNX Transform occasionally crashes or freezes when running certain onnx models (currently found with the Split operator). \r\n\r\n- The error is non deterministic and varies based on different machines\r\n- On some machines, the ML.NET process will freeze, while on others it will simply silently crash without producing any output\r\n- The larger the input, the more likely the issue seems to occur - almost never happens with <100 inputs, sometimes happens with 100-300 inputs, and almost always happens with >300 inputs\r\n- When ML.NET is built in debug mode, the error will never occur. It only happens if it is built in release mode\r\n- The issue is not tied to any specific input. Smaller inputs will never produce an error, while larger ones almost always will (in release mode)","Url":"https://github.com/dotnet/machinelearning/issues/1228","RelatedDescription":"Open issue \"ONNX Transform Crashing or Freezing\" (#1228)"},{"Id":"369030470","IsPullRequest":true,"CreatedAt":"2018-10-11T17:18:57","Actor":"harshsaver","Number":"1227","RawContent":null,"Title":"Grammar corrected in README.md","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1227","RelatedDescription":"Closed or merged PR \"Grammar corrected in README.md\" (#1227)"},{"Id":"369013823","IsPullRequest":false,"CreatedAt":"2018-10-11T08:44:55","Actor":"rauhs","Number":"1226","RawContent":null,"Title":"SelectFeaturesBasedOnCount is extremely slow","State":"open","Body":"I'm using the new static pipeline and adding a `SelectFeaturesBasedOnCount(2)` slows down the pipeline by orders of magnitude.\r\n\r\nJust using ~8000 samples and doing some simple One hot encoding will prepare my data ready for learning in about 200ms. If I just add `SelectFeaturesBasedOnCount(2)` on a single one hot encoded feature it will run in 4 seconds. Adding another one to a second feature will run it in 12 seconds. I'd like to add it to about 7 features but this will run for hours and never finish.\r\n\r\nAlso, just pressing \"Brake all\" while it runs it will often stop in the `RepositoryWriter`/`Reader` and thousands of temporary folders/files are create in my temp directory. In case that helps.","Url":"https://github.com/dotnet/machinelearning/issues/1226","RelatedDescription":"Open issue \"SelectFeaturesBasedOnCount is extremely slow\" (#1226)"},{"Id":"369000530","IsPullRequest":false,"CreatedAt":"2018-10-11T08:08:36","Actor":"rauhs","Number":"1225","RawContent":null,"Title":"Pigsty for VarVector doesn't have hash one hot","State":"open","Body":"I'm trying to convert my `LearningPipeline` to 0.6 static pipeline. I have some *variable* length features in my input instances.\r\n\r\nWith the pipeline I did:\r\n\r\n```C#\r\nnew CategoricalHashOneHotVectorizer(nameof(TransportOrderInstance.PosAmount)) { OutputKind = CategoricalTransformOutputKind.Bag, Ordered = false, HashBits = 5},\r\n```\r\n\r\nWhat is the equivalent in the new static pipeline? The `VarVector` doesn't have a whole lot of extension functions. Shouldn't it also have `OneHotEncoding`? Though, it's not \"One\" necessarily.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1225","RelatedDescription":"Open issue \"Pigsty for VarVector doesn't have hash one hot\" (#1225)"},{"Id":"368957195","IsPullRequest":false,"CreatedAt":"2018-10-11T05:22:18","Actor":"mjannet","Number":"1223","RawContent":null,"Title":"Error MSB4019 when adding package Microsoft.ML","State":"open","Body":"### System information\r\n\r\n- **Windows 10**:\r\n- **MS Visual Studio Community 2017 Preview**: \r\n\r\n### error MSB4019: The imported project \"C:\\Users\\Owner\\source\\repos\\machinelearning\\tools\\clean.target\" was not found.\r\n\r\n- **Clone package from github: https://github.com/dotnet/machinelearning.git using Visual Studio Preview\r\n- **From CLI executed: dotnet add package Microsoft.ML**\r\n- **Got the error message referenced above**\r\n- **This is one of my first projects I am trying to download from github, and I am not sure where to find information to be able to download this project correctly.  I appreciate any assistance I could get.  Thank you**\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1223","RelatedDescription":"Open issue \"Error MSB4019 when adding package Microsoft.ML\" (#1223)"},{"Id":"368777115","IsPullRequest":false,"CreatedAt":"2018-10-11T04:05:10","Actor":"wschin","Number":"1211","RawContent":null,"Title":"Export Kmeans to ONNX","State":"closed","Body":"Kmeans is a series of matrix operations in prediction phase, so it's onnxable. Due to Kmeans' popularity, ONNX exporter might want to cover it.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1211","RelatedDescription":"Closed issue \"Export Kmeans to ONNX\" (#1211)"},{"Id":"368779593","IsPullRequest":true,"CreatedAt":"2018-10-11T04:04:58","Actor":"wschin","Number":"1212","RawContent":null,"Title":"Save Kmeans in ONNX ","State":"closed","Body":"Address #1211 .  This PR implements a converter for ML.NET Kmeans predictor. Detailed explanation and a visualization of the conversion code is inlined in the source file.\r\n\r\nHere is a Kmeans in ONNX example (ArgMax should be ArgMin though):\r\n![image](https://user-images.githubusercontent.com/3524474/46757244-74a95480-cc7e-11e8-968a-e0fffa4f93b9.png)","Url":"https://github.com/dotnet/machinelearning/pull/1212","RelatedDescription":"Closed or merged PR \"Save Kmeans in ONNX \" (#1212)"},{"Id":"368772398","IsPullRequest":true,"CreatedAt":"2018-10-10T23:36:04","Actor":"elbruno","Number":"1210","RawContent":null,"Title":"Adding missing parenthesis, line 91","State":"closed","Body":"Adding missing parenthesis in sample code, line 91\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1210","RelatedDescription":"Closed or merged PR \"Adding missing parenthesis, line 91\" (#1210)"},{"Id":"368894895","IsPullRequest":false,"CreatedAt":"2018-10-10T23:32:58","Actor":"Zruty0","Number":"1222","RawContent":null,"Title":"Debugger views of estimators","State":"open","Body":"We are already committed to improving how our data looks like in the debugger.\r\n\r\nFor instance, #1167 will turn the schema into an 'eagerly computed' object, so you can look at it in the debugger:\r\n![schema](https://user-images.githubusercontent.com/41337831/46771152-2c525c80-cca7-11e8-949e-b728eda5b5b3.PNG)\r\n\r\nNow a different question is: how do we make `Estimators` somehow 'debugger-inspectable'?\r\n\r\nWe cannot really inspect 'the algorithm'. But we can inspect 'how the algorithm will transform data'. In the world of `LearningPipeline`, every pipeline was 'duct-taped' to a specific data file. That was a mistake, of course, but it did allow for nice debugger views of pipeline steps.\r\n\r\nWith the new API, the pipeline is no longer bound to any data. It can be 'fitted' on any data of 'reasonable' shape. But now the debugger view is useless.\r\n\r\nOne possible suggestion is to add an extension method to our estimators, called something along the lines of `Preview`. It would have a signature `IDataView Preview(IDataView data)` in case of a transformer or an estimator, or `IDataView Preview(T source)` in case of an `IDataReader<T>`.\r\n\r\nThis method would return some form 'lazy approximation of `Fit`':\r\n```csharp\r\nIDataView Preview(IDataView data) => Fit(data.Take(100)).Transform(data.Take(100))\r\n```\r\n\r\nThen, at least, we can have the watch window experience more or less palatable: you just add `pipeline.Preview(trainData)` and you can see an approximation of how the pipeline would transform `trainData`.\r\n\r\ncc: @GalOshri @CESARDELATORRE @TomFinley @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1222","RelatedDescription":"Open issue \"Debugger views of estimators\" (#1222)"},{"Id":"368892947","IsPullRequest":false,"CreatedAt":"2018-10-10T23:22:58","Actor":"tannergooding","Number":"1221","RawContent":null,"Title":"Update CI to support building and testing x86","State":"open","Body":"The support for building against x86 was added on https://github.com/dotnet/machinelearning/pull/1008.\r\n\r\nWe still need to update CI to ensure that it is tested on a regular basis and update the `-RunTests` command to pull down the appropriate test host.","Url":"https://github.com/dotnet/machinelearning/issues/1221","RelatedDescription":"Open issue \"Update CI to support building and testing x86\" (#1221)"},{"Id":"368892543","IsPullRequest":false,"CreatedAt":"2018-10-10T23:20:58","Actor":"tannergooding","Number":"1220","RawContent":null,"Title":"Clean up `[ConditionalFact(typeof(Environment), nameof(Environment.Is64BitProcess))]`","State":"open","Body":"It was suggested that creating explicit attributes for the various cases (Such as Onnx, TensorFlow, LightGBM, etc) may be a better long term solution to manage these tests across the various platforms.\r\n\r\nSee https://github.com/dotnet/machinelearning/pull/1008#discussion_r221985876 for more details.","Url":"https://github.com/dotnet/machinelearning/issues/1220","RelatedDescription":"Open issue \"Clean up `[ConditionalFact(typeof(Environment), nameof(Environment.Is64BitProcess))]`\" (#1220)"},{"Id":"368890071","IsPullRequest":false,"CreatedAt":"2018-10-10T23:08:50","Actor":"codemzs","Number":"1219","RawContent":null,"Title":"Time Series predictors need to be stateful","State":"open","Body":"We need to make components such as SSA spike and changepoint detector stateful so that when we do predictions using them the state is updated with the new observations that are seen at prediction phase.\r\n\r\nMore details on the design to come here.","Url":"https://github.com/dotnet/machinelearning/issues/1219","RelatedDescription":"Open issue \"Time Series predictors need to be stateful\" (#1219)"},{"Id":"368873170","IsPullRequest":true,"CreatedAt":"2018-10-10T22:01:07","Actor":"Anipik","Number":"1218","RawContent":null,"Title":"Common Implemenatation for MatMul and MatMulTran for both aligned and unaligned arrays","State":"open","Body":"For inputs that are not naturally aligned (the alignment is not a multiple of 4), it does exclusively unaligned loads\r\nFor all other inputs, it will do at most two unaligned loads (one each for any leading/trailing unaligned elements) and all other loads will be aligned.\r\n\r\ncc @tannergooding @eerhardt @danmosemsft @TomFinley ","Url":"https://github.com/dotnet/machinelearning/pull/1218","RelatedDescription":"Open PR \"Common Implemenatation for MatMul and MatMulTran for both aligned and unaligned arrays\" (#1218)"},{"Id":"368869162","IsPullRequest":true,"CreatedAt":"2018-10-10T21:48:03","Actor":"artidoro","Number":"1217","RawContent":null,"Title":"Conversion of NAIndicatorTransform to estimator with related pigstensions","State":"open","Body":"Ongoing work on converting the transformers to estimators (#754). This PR converts the NA Indicator transform to estimator and adds the relative pigsty extensions. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1217","RelatedDescription":"Open PR \"Conversion of NAIndicatorTransform to estimator with related pigstensions\" (#1217)"},{"Id":"368868254","IsPullRequest":false,"CreatedAt":"2018-10-10T21:45:13","Actor":"tannergooding","Number":"1216","RawContent":null,"Title":"Investigate why two predictor tests fail with \"Unknown command: 'train'\" on x86","State":"open","Body":"There are currently two `TestPredictors` tests disabled on x86 due to: `[ConditionalFact(typeof(Environment), nameof(Environment.Is64BitProcess))] // x86 fails with \"Unknown command: 'train'; Format error at (83,3)-(83,4011): Illegal quoting\"`.\r\n\r\nThis issue needs further investigation.","Url":"https://github.com/dotnet/machinelearning/issues/1216","RelatedDescription":"Open issue \"Investigate why two predictor tests fail with \"Unknown command: 'train'\" on x86\" (#1216)"},{"Id":"368867582","IsPullRequest":false,"CreatedAt":"2018-10-10T21:43:04","Actor":"tannergooding","Number":"1215","RawContent":null,"Title":"Investigate and deal with the remaining x86 baseline differences","State":"open","Body":"The x86 build of ML.NET has some remaining baseline differences that need investigation and fixing.\r\n\r\nFrom initial investigation, the remaining differences have fewer than 4 matching significant digits and this may be caused by known bugs in the double parsing code (which have already been fixed or are actively being fixed in .NET Core). Other differences are due to the implementation (between x86 and x64) of some floating-point Math functions that the tests depend on.","Url":"https://github.com/dotnet/machinelearning/issues/1215","RelatedDescription":"Open issue \"Investigate and deal with the remaining x86 baseline differences\" (#1215)"},{"Id":"368855979","IsPullRequest":false,"CreatedAt":"2018-10-10T21:09:25","Actor":"pictos","Number":"1214","RawContent":null,"Title":"Is there a way to train my model with multiple coaches?","State":"open","Body":"### System information\r\nIs there a way to train my model with multiple coaches?\r\n\r\nSo, for example, i want to create a model to calculate a salary based in years of experience. To do this i used Regression, but has more than one trainers. I want to test all of this trainers and compare the results. \r\nI researched a lot, but i don't finded one way to do this with the ML.NET.\r\n\r\n- **What did you do?**\r\nFor did that  I execute one time, change the trainers and execute again... It's not very good.\r\n\r\n- **What did you expect?**\r\n\r\nCreate a way to initialize a array of ILearningPipelineItem and train my model with each one and show the results\r\n\r\n### Source code / logs\r\nI do some experiments using the version 0.3, and I think this could be something native to this api, if it does not already exist.\r\nhttps://github.com/pictos/MLParalel\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1214","RelatedDescription":"Open issue \"Is there a way to train my model with multiple coaches?\" (#1214)"},{"Id":"368803504","IsPullRequest":true,"CreatedAt":"2018-10-10T18:52:16","Actor":"utkarsh-42","Number":"1213","RawContent":null,"Title":"updating_files_with_LinearClassificationTrainer","State":"open","Body":"Fix #1069 \r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1213","RelatedDescription":"Open PR \"updating_files_with_LinearClassificationTrainer\" (#1213)"},{"Id":"368762937","IsPullRequest":false,"CreatedAt":"2018-10-10T17:04:18","Actor":"sfilipi","Number":"1209","RawContent":null,"Title":"Documentation samples for the transforms of the new API","State":"open","Body":"We need to add samples on how to use the new transforms, than reference those samples from the XML documentation so that in docs.microsoft.com users can copy/paste the sample and have a head-starts. \r\n\r\nMot of the tests that got added as part of the transformer work are a good start for creating a sample.  \r\n\r\nList of transformers:\r\n\r\n| Transform | Category | Priority | Has entry point | Transformer PR| Sample PR|\r\n| --------- | -------- | -------- | --------------- | ----- | -----|\r\n| Key To Value Transform | Categorical | 0 | 1 | #856 | |\r\n| Concat Transform | Schema manipulation | 0 | 1 | #896 | |\r\n| Term Transform | Categorical | 0 | 1 | #759 | |\r\n| Text Transform | Text processing | 0 | 1 | #801 | |\r\n| Image Greyscale Transform | Image | 0 | 0 | #753 | |\r\n| Image Loader Transform | Image | 0 | 0 | #753 | |\r\n| Image Pixel Extractor Transform | Image | 0 | 0 | #753 | |\r\n| Image Resizer Transform | Image | 0 | 0 | #753 | |\r\n| Tensorflow Scoring Transform | Image | 0 | 1 |#840 #877 | |\r\n| Min-Max Normalizer | Normalizer | 0 | 1 | #797 | |\r\n| NA Handle Transform | Missing values | 1 | 1 | no need | |\r\n| NA Indicator Transform | Missing values | 1 | 1 | | |\r\n| NA Replace Transform | Missing values | 1 | 1 |#917 | |\r\n| Categorical Transform | Categorical | 1 | 1 | #899 | |\r\n| Categorical Hash Transform | Categorical | 1 | 1 | #1033 | |\r\n| Hash Transform | Categorical | 1 | 0 | #944 | |\r\n| Copy Columns Transform | Schema manipulation | 1 | 1 | #706 | |\r\n| Word Embeddings Transform | Text processing | 1 | 1 | #928 | |\r\n| Key To Vector Transform | Categorical | 1 | 0 | #858 | |\r\n| Character Tokenizer Transform | Text processing | 2 | 1 | #931 | |\r\n| Ngram Hash Transform | Text processing | 2 | 0 |#953| |\r\n| Ngram Transform | Text processing | 2 | 1 | #953| |\r\n| Stopwords Remover Transform | Text processing | 2 | 0 | #953| |\r\n| Text Normalizer Transform | Text processing | 2 | 0 |#953| |\r\n| Word Bag Transform | Text processing | 2 | 0 |#953| |\r\n| Word Hash Bag Transform | Text processing | 2 | 0 |#953| |\r\n| Word Tokenizer Transform | Text processing | 2 | 1 | #931 | |\r\n| Convert Transform | Column mapper | 2 | 1 | | |\r\n| Drop Slots Transform | Feature selection | 2 | 0 | no need | |\r\n| LogMeanVar Normalizer | Normalizer | 2 | 1 | #797 | |\r\n| MeanVar Normalizer | Normalizer | 2 | 1 | #797 | |\r\n| Latent Dirichlet Allocation Transform | Projection | 2 | 1 |#972| |\r\n| Tree Ensemble Featurization Transform | Projection | 2 | 1 | | |\r\n| NA Filter | Row manipulation | 2 | 1 | | |\r\n| Count Feature Selection Transform | Feature selection | 2 | 1 |#991 | |\r\n| Mutual Information Feature Selection Transform | Feature selection | 2 | 1 |#991| |\r\n| NA Drop Transform | Missing values | 2 | 1 | | |\r\n| Binning Normalizer | Normalizer | 2 | 1 | #797 | |\r\n| Global Contrast Normalization Transform | Normalizer | 2 | 1 |#961| |\r\n| Principal Component Analysis Transform | Projection | 2 | 1 | | |\r\n| Random Fourier Features Transform | Projection | 2 | 0 |#1122 | |\r\n| Bootstrap Sample Transform | Row manipulation | 2 | 1 | | |\r\n| Shuffle Transform | Row manipulation | 2 | 0 | | |\r\n| Custom Stopwords Remover Transform | Text processing | 2 | 0 | | |\r\n| Learner Feature Selection Transform | Feature selection | 3 | 0 | | |\r\n| Lp-Norm Normalizer | Normalizer | 3 | 1 |#961| |\r\n| Supervised Binning Normalizer | Normalizer | 3 | 1 | | |\r\n| Whitening Transform | Normalizer | 3 | 0 |#961| |\r\n| Choose Columns Transform | Schema manipulation | 3 | 0 | | |\r\n| Drop Columns Transform | Schema manipulation | 3 | 1 | | |\r\n| Generate Number Transform | Schema manipulation | 3 | 1 | | |\r\n| Keep Columns Transform | Schema manipulation | 3 | 0 | | |\r\n| Key To Binary Vector Transform | Categorical | 3 | 0 | #858| |\r\n| Term Lookup Transform | Categorical | 3 | 0 || |\r\n| Label Indicator Transform | Column mapper | 3 | 1 | | |\r\n| Group Transform | Relational operation | 3 | 1 | | |\r\n| Un-group Transform | Relational operation | 3 | 1 | | |\r\n| Range Filter | Row manipulation | 3 | 1 | | |\r\n| Skip Filter | Row manipulation | 3 | 1 | | |\r\n| Skip and Take Filter | Row manipulation | 3 | 1 | | |\r\n| Take Filter | Row manipulation | 3 | 1 | | |\r\n| Evaluate Predictor | Re-evaluate | 4 | 0 | | |\r\n| Hash Join Transform | Re-evaluate | 4 | 1 | | |\r\n| Load Transform | Re-evaluate | 4 | 0 | | |\r\n| Optional Column Transform | Re-evaluate | 4 | 1 | | |\r\n| Score Predictor | Re-evaluate | 4 | 0 | | |\r\n| Sentiment Analyzing Transform | Re-evaluate | 4 | 1 | | |\r\n| Train and Score Predictor | Re-evaluate | 4 | 0 | | |\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1209","RelatedDescription":"Open issue \"Documentation samples for the transforms of the new API\" (#1209)"},{"Id":"368446866","IsPullRequest":true,"CreatedAt":"2018-10-10T00:18:06","Actor":"zeahmed","Number":"1208","RawContent":null,"Title":"Removed shuffling from TensorFlowTransform.","State":"open","Body":"Removed the shuffling of data that was being done internally in TensorFlowTransform (was commented out due to #1106). The idea is to give user more control over the shuffling by allowing them to use the ShuffleTransform in their pipeline explicit.\r\n\r\nThis also reduces the number of parameters in TensorFlowTransform.Argument class. Please see the modified tests for use-cases. Tests with shuffling are currently disabled due to #1106.\r\n\r\n### Update\r\nUsing ShuffleTransform only during the training explicitly. The test code is no longer commented out.","Url":"https://github.com/dotnet/machinelearning/pull/1208","RelatedDescription":"Open PR \"Removed shuffling from TensorFlowTransform.\" (#1208)"},{"Id":"368445821","IsPullRequest":false,"CreatedAt":"2018-10-10T00:12:33","Actor":"zeahmed","Number":"1207","RawContent":null,"Title":"FastTreeBinaryClassificationCategoricalSplitTest taking very long to execute...","State":"open","Body":"The following test is taking 15-25mins (depending on system) alone to execute.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/8ca1c9386587aa4ef77c56f605f8244debefce93/test/Microsoft.ML.Predictor.Tests/TestPredictors.cs#L711\r\n\r\nIs there any policy for test execution time in ML.Net build system?","Url":"https://github.com/dotnet/machinelearning/issues/1207","RelatedDescription":"Open issue \"FastTreeBinaryClassificationCategoricalSplitTest taking very long to execute...\" (#1207)"},{"Id":"368420526","IsPullRequest":true,"CreatedAt":"2018-10-09T22:17:31","Actor":"sfilipi","Number":"1206","RawContent":null,"Title":"WIP: Enabling FFM tests","State":"open","Body":"Addresses part of #404 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1206","RelatedDescription":"Open PR \"WIP: Enabling FFM tests\" (#1206)"},{"Id":"368403656","IsPullRequest":false,"CreatedAt":"2018-10-09T21:22:25","Actor":"yaeldekel","Number":"1205","RawContent":null,"Title":"Logistic Regression doesn't work with training stats","State":"open","Body":"Stats that are being computed at training time aren't passed to the predictor.","Url":"https://github.com/dotnet/machinelearning/issues/1205","RelatedDescription":"Open issue \"Logistic Regression doesn't work with training stats\" (#1205)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-12T05:30:36.1342647Z","RunDurationInMilliseconds":1008}