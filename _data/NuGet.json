{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10205405030","Type":"PullRequestEvent","CreatedAt":"2019-08-13T22:54:27","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7453","RelatedDescription":"Opened pull request \"GitHub Usage expander should be tabbable\" (#7453) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/nugetgallery/issues/7452\r\n\r\nThis was the only difference between the other expanders on the page and this one."},{"Id":"10205383944","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:49:37","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7452","RelatedDescription":"Opened issue \"Can't tab to the GitHub Usage expander\" (#7452) at NuGet/NuGetGallery","RelatedBody":"Users that rely on keyboard navigation won't be able to use the feature."},{"Id":"10205273376","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:24:22","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7388","RelatedDescription":"Closed issue \"Add page for managing site admins\" (#7388) at NuGet/NuGetGallery","RelatedBody":"Site admins should be able to manage the list of site admins. Previously, we had a database editor that could be used to add/remove admins. After it was removed, adding or removing an admin requires database access. We should be able to do this from the UI."},{"Id":"10205157645","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:00:29","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7451","RelatedDescription":"Opened issue \"When creating an API Key the form is not cleared correctly\" (#7451) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWhen creating an API Key the \"Create\" form is not cleared correctly\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create an API Key\r\n2. Try to create a second API Key: go to \"Create\" form \r\n3. The \"selected scopes\" are empty\r\n\r\n### Expected behavior\r\n\"Selected scopes\" are defaulting to the same values as on page load (\"Push\", \"Push new packages and package versions\")\r\n\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n![image](https://user-images.githubusercontent.com/16807822/62980318-150a6100-bddb-11e9-895e-1b4889bbefc8.png)\r\n"},{"Id":"10204546055","Type":"PullRequestEvent","CreatedAt":"2019-08-13T20:20:13","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7450","RelatedDescription":"Opened pull request \"Icon validation\" (#7450) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/7063.\r\n\r\nTime to reopen https://github.com/NuGet/Engineering/issues/1883 ?"},{"Id":"10204365511","Type":"PullRequestEvent","CreatedAt":"2019-08-13T19:52:42","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7449","RelatedDescription":"Opened pull request \"Add API for deprecating packages\" (#7449) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/nugetgallery/issues/6852\r\n\r\nAs part of adding end-to-end tests for deprecate, we need a programmatic way to deprecate/undeprecate packages. I felt that adding a public API that is simply a mirror of the web's API would be the best approach for dealing with this rather than trying to create a hidden or less-functional API.\r\n\r\nI'll be scheduling a short design meeting to discuss this work, but basically:\r\n- I added a `package:deprecate` scope for API keys, so that API keys with that scope are allowed to deprecate packages.\r\n![image](https://user-images.githubusercontent.com/18014088/62966633-3f98f180-bdbc-11e9-8213-8f08812955b3.png)\r\n- I added `ApiController.DeprecatePackage`, which responds to `/api/v2/package/{id}/deprecate` and expects the following JSON data, where everything except `versions` is optional:\r\n```\r\n{\r\n    \"versions\": [ ...some list of versions... ],\r\n    \"isLegacy\": false/true,\r\n    \"hasCriticalBugs\": false/true,\r\n    \"isOther\": false/true,\r\n    \"alternatePackageId\": \"alternate-package-ID\",\r\n    \"alternatePackageVersion\": \"1.0.0-alternate-package-version\",\r\n    \"message\": \"customMessage\"\r\n}\r\n```\r\n- I moved most of the code from `ManageDeprecationJsonApiController` into `PackageDeprecationManagementService` so it can be shared by both controllers."},{"Id":"10203870250","Type":"IssuesEvent","CreatedAt":"2019-08-13T18:37:07","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7414","RelatedDescription":"Closed issue \"500 Internal Server Error with UNC URLs in package metadata\" (#7414) at NuGet/NuGetGallery","RelatedBody":"We are using NuGet.Server v3.2.1.0. During startup the server returns \"500 Internal Server Error\" to every client which wants to access the nuget server. The Server needs about a minute to start up.\r\n\r\nI did disable FileSystemMonitoring in Webconfig and set initialCacheRebuildAfterSeconds =1. Now the \"500 Internal Server Error\" is returned for only about 10 Secondes.\r\n\r\nIs this by design or a bug? Everyone thinks the server is broken but it is only waking up.\r\n"},{"Id":"10203858329","Type":"PullRequestEvent","CreatedAt":"2019-08-13T18:35:18","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7424","RelatedDescription":"Merged pull request \"[Azure Search] Split traffic for hijack by percentage\" (#7424) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/7400\r\n\r\nTest build: https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2936530\r\nTest release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=413946"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10205994197","Type":"PullRequestEvent","CreatedAt":"2019-08-14T01:37:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/8455","RelatedDescription":"Opened pull request \"Prep the Home repo for the designs. \" (#8455) at NuGet/Home","RelatedBody":"Cleaning up the home repo to prep it to become the home for all the designs. \r\n\r\nI don't think my proposed structure is any good right now. \r\n\r\nThis PR is just a way to start the discussion. \r\n\r\nI'll come up with a better proposal soon. "},{"Id":"10205383198","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:49:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8454","RelatedDescription":"Opened issue \"Invalid options message outdated/deprecated for list package should be the same for dotnet cli and dotnet nuget\" (#8454) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/pull/3003/files#diff-0bcb0e6b25126ef631b9e118f853abebL213\r\n\r\nListPkg_InvalidOptionsOutdatedAndDeprecated and it's cli counterpart should be the exact same string. \r\n\r\n//cc @xavierdecoster @donnie-msft "},{"Id":"10205369235","Type":"IssuesEvent","CreatedAt":"2019-08-13T22:46:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8453","RelatedDescription":"Opened issue \"Recursively touch all SDK files to fix the PackCommand_PackTarget_IsIncremental flakiness\" (#8453) at NuGet/Home","RelatedBody":"TBD"},{"Id":"10204505237","Type":"IssuesEvent","CreatedAt":"2019-08-13T20:13:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6229","RelatedDescription":"Closed issue \"NuGet Pack is not deterministic\" (#6229) at NuGet/Home","RelatedBody":"**Background**\r\nSome environments require build to be deterministic, meaning that each tool involved in the build process must produce exactly the same output given the same inputs. Furthermore the build should not depend on the ambient state of the environment such as the current time, a global random number generator state, the machine name the build is running on, the root directory the repository is built from, etc.\r\n\r\nFor example, Roslyn compilers support deterministic builds by implementing ```/deterministic``` switch. This is also supported by csc/vbc msbuild tasks via property ```Deterministic```. \r\n\r\n**Issue**\r\n```NuGet pack``` is not deterministic in the above sense. I identified several non-deterministic properties, but there might be more:\r\n\r\n1) ```ZipArchive.CreateEntry``` API is used for creating zip parts and the call is not followed by setting ```ZipArchiveEntry.LastWriteTime``` to a deterministic value. The ```CreateEntry``` API initializes this property to the current time. As a result the current time is written to the .nupkg for some parts:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L556\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L770\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L797\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L839\r\n\r\n2) ```PhysicalPackageFile``` uses ```File.GetLastWriteTimeUtc``` or ```DateTimeOffset.UtcNow``` to determine what value to set to ```ZipArchiveEntry.LastWriteTime```.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PhysicalPackageFile.cs#L82\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PhysicalPackageFile.cs#L87\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L576\r\n\r\nIf this is a required feature there should be a switch to disable it: e.g. adding nuget.exe command line argument ```/deterministic``` and respecting msbuild property ```Deterministic``` in PackTask.\r\n\r\n3) Random GUIDs are used for named entities written to the .nupkg: \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L340,\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L876.\r\n"},{"Id":"10204059569","Type":"IssuesEvent","CreatedAt":"2019-08-13T19:05:14","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8427","RelatedDescription":"Closed issue \"OptProfV2:  enable optimization\" (#8427) at NuGet/Home","RelatedBody":""},{"Id":"10203177388","Type":"IssuesEvent","CreatedAt":"2019-08-13T16:55:44","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8452","RelatedDescription":"Opened issue \"Remove .NET Framework TFM from NuGet.CommandLine.XPlat\" (#8452) at NuGet/Home","RelatedBody":"NuGet.CommandLine.XPlat is intended to be used only by the dotnet cli, although searching github we can find multiple customers who use it and call our `Program.Main()` in their code. I can't verify that all existing usage is used by netcoreapp projects, so we'll wait until the next major release before removing the .NET Framework TFM."},{"Id":"10203102582","Type":"IssuesEvent","CreatedAt":"2019-08-13T16:44:42","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8426","RelatedDescription":"Closed issue \"OptProfV2:  write test for internal bug 890791\" (#8426) at NuGet/Home","RelatedBody":""},{"Id":"10202885979","Type":"IssuesEvent","CreatedAt":"2019-08-13T16:13:49","Actor":"wrightsonm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8451","RelatedDescription":"Opened issue \"dotnet nuget push to network drive\" (#8451) at NuGet/Home","RelatedBody":"\r\n\r\n## Details about Problem\r\n\r\nI have built a netstandard2.0 project using the following ps command\r\ndotnet pack $csproj --include-symbols -p:SymbolPackageFormat=snupkg -o artifacts\r\n\r\nThe result is:\r\nartifacts/Library.1.0.4-alpha.nupkg (164kB)\r\nartifacts/Library.1.0.4-alpha.snupkg (59kB)\r\n\r\nI then wish to push these to my nuget repository which is currently a shared network drive:\r\n\r\ndotnet nuget push artifacts/ --source D:\\nuget\r\n\r\nThe end result is:\r\n\r\nD:\\nuget\\Scifa.Utils.1.0.4-alpha.nupkg 59kB\r\n\r\nThe original nupkg didn't get uploaded to the shared drive & the snupkg appears to have been renamed to nupkg\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nVisual Studio 2017 15.9.6\r\nNuGet version (x.x.x.xxx):\r\n\"%userprofile%\\.nuget\\packages\\nuget.commandline\\4.3.0\\tools\\NuGet.exe\"\r\nNuGet Version: 4.3.0.4406\r\ndotnet.exe --version (if appropriate):\r\n2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nWin 10 v1607\r\nWorked before? If so, with which NuGet version:\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\ndotnet nuget push artifacts/ --source D:\\nuget\r\ninfo : Pushing Library.1.0.4-alpha.nupkg to 'D:\\nuget'...\r\ninfo : Your package was pushed.\r\ninfo : Pushing Library.1.0.4-alpha.snupkg to 'D:\\nuget'...\r\ninfo : Your package was pushed.\r\n\r\n"},{"Id":"10198966818","Type":"IssuesEvent","CreatedAt":"2019-08-13T07:15:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8424","RelatedDescription":"Closed issue \"NU1403 improvements - validate all packages, include the expected/actual sha values\" (#8424) at NuGet/Home","RelatedBody":"The current NU1403 message looks something like this: \r\n\r\n```\r\nerror NU1403: The package System.Collections.4.0.11 sha512 validation failed. The package is different than the last restore\r\n```\r\n\r\nI have a couple of ideas for improvements.\r\n\r\n- [x] Don't say sha512, use hash. \r\n\r\n- [x] Validate all packages when encountering this error. \r\nCurrently we fail fast and we don't validate all the packages. We should validate all the packages and add a message for every single offending package. These errors shouldn't be a moving target for the customer. \r\n\r\n- [x] Include the expected and actual values of the hash. I think there's potential value in this, but I also think that we shouldn't bloat the messages with unneeded info. \r\n\r\nThoughts @anangaur @NuGet/nuget-client \r\n"},{"Id":"10198506108","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:37:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8334","RelatedDescription":"Closed issue \"Should vcxproj be in the approved list for the nuget.targets\" (#8334) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/f5916a527c442f896f787c593252b37a345da835/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L239\r\n\r\nC++ projects do not support PR yet so not sure why this is necessary. \r\n\r\nThere could be some weird reason such as enabling nuget.exe restore to work. \r\n\r\nThis needs investigated.\r\n\r\nIdeally, C++ just supports PR, but that's out of NuGet's hands. "},{"Id":"10198417989","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Reopened issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198417880","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Closed issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198417713","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Closed issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198412831","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:10:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8450","RelatedDescription":"Opened issue \"Remove Sha512HashFunction \" (#8450) at NuGet/Home","RelatedBody":"We should investigate removing the SHA512HashFunction. \r\nSHA512Managed is supported in both net472 and netstandard2.0. \r\nI'd imagine the motivation behind having our own function was the fact that .NETStandard did not have the APIs needed yet. \r\n\r\nNote that we might want to have a hashing wrapper, so this is just a blind code removal."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-08-14T05:30:42.1318336Z","RunDurationInMilliseconds":1909}