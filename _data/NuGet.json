{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12073103363","Type":"IssuesEvent","CreatedAt":"2020-04-16T22:03:09","Actor":"lilith","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7951","RelatedDescription":"Closed issue \"curl no longer works with nuget.org\" (#7951) at NuGet/NuGetGallery","RelatedBody":"Previously, the following curl command would permit a package to be uploaded:\r\n\r\n`curl -L \"https://www.nuget.org/api/v2/package\" -H \"X-NuGet-ApiKey: [redacted] -H \"X-NuGet-Client-Version: 4.1.0\" -A \"NuGet Command Line/3.4.4.1321 (Unix 4.4.0.92)\" --upload-file Imageflow.NativeRuntime.ubuntu_18_04-x86_64.1.2.0-rc25.nupkg`\r\n\r\nNow, it produces this (incorrect) error: \r\n`The specified API key is invalid, has expired, or does not have permission to access the specified package.The specified API key is invalid, has expired, or does not have permission to access the specified package.`\r\n\r\nThe API key is for *, is 1 day old, and 3 different api keys have to tried to reduce the possibility of human error. \r\n\r\nGiven the state of nuget on linux, curl support is very important. Please help!"},{"Id":"12068240554","Type":"IssuesEvent","CreatedAt":"2020-04-16T14:30:28","Actor":"lilith","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7951","RelatedDescription":"Opened issue \"curl no longer works with nuget.org\" (#7951) at NuGet/NuGetGallery","RelatedBody":"Previously, the following curl command would permit a package to be uploaded:\r\n\r\n`curl -L \"https://www.nuget.org/api/v2/package\" -H \"X-NuGet-ApiKey: [redacted] -H \"X-NuGet-Client-Version: 4.1.0\" -A \"NuGet Command Line/3.4.4.1321 (Unix 4.4.0.92)\" --upload-file Imageflow.NativeRuntime.ubuntu_18_04-x86_64.1.2.0-rc25.nupkg`\r\n\r\nNow, it produces this (incorrect) error: \r\n`The specified API key is invalid, has expired, or does not have permission to access the specified package.The specified API key is invalid, has expired, or does not have permission to access the specified package.`\r\n\r\nThe API key is for *, is 1 day old, and 3 different api keys have to tried to reduce the possibility of human error. \r\n\r\nGiven the state of nuget on linux, curl support is very important. Please help!"},{"Id":"12061379170","Type":"IssuesEvent","CreatedAt":"2020-04-15T23:36:38","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7950","RelatedDescription":"Opened issue \"[A11y] \"Skip to content\" prompt prevents clicking links\" (#7950) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWhen \"Skip to content\" prompt is active, clicking links on a page does nothing.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Go to https://www.nuget.org\r\n2. Press Shift+Tab a bunch of time until \"Skip to content\" link appears on top of the page.\r\n3. Click any link on a page.\r\n\r\nThe \"Skip to content\" link disappears when anything is clicked, content shifts and click ends up in wrong location.\r\n\r\n### Expected behavior\r\nExpected navigation occurs.\r\n"},{"Id":"12060342944","Type":"IssuesEvent","CreatedAt":"2020-04-15T21:01:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7946","RelatedDescription":"Closed issue \"Waiting for validation. 2 days have passed.\" (#7946) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWaiting for validation. 2 days have passed.\r\n\r\n### Expected behavior\r\nTypically after submitting a new version it's approved within several minutes, not days.\r\n\r\n### Additional context\r\nhttps://www.nuget.org/packages/Memory.dll/"},{"Id":"12055317907","Type":"IssuesEvent","CreatedAt":"2020-04-15T12:48:02","Actor":"raczeja","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7949","RelatedDescription":"Opened issue \"Error while publishing snupkg package\" (#7949) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI'm receiving following email while publishing snupkg package\r\n[NuGet Gallery] Symbol package validation failed - OcarambaLite 3.2.9\r\nThe symbol package OcarambaLite 3.2.9 failed validation because of the following reason(s):\r\n•\tThe uploaded symbols package contains pdb(s) for a corresponding dll(s) not found in the nuget package.\r\nYour symbol package was not published on NuGet Gallery and is not available for consumption.\r\nYou can reupload your symbol package once you've fixed the issue with it.\r\n\r\nlink to csproj file https://github.com/ObjectivityLtd/Ocaramba/blob/master/OcarambaLite/OcarambaLite.csproj \r\n\r\nnuget package of version 3.2.9 was published https://www.nuget.org/packages/OcarambaLite/\r\n\r\n I set:\r\n\r\n<IncludeSymbols>true</IncludeSymbols>\r\n<SymbolPackageFormat>snupkg</SymbolPackageFormat>\r\n<DebugType>portable</DebugType>\r\n\r\n\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On this URL '...'\r\n2. Perform this operation '...'\r\n3. See error\r\n\r\n### Expected behavior\r\nA clear and concise description of what you expected to happen.\r\n\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n### Additional context\r\nAdd any other context about the problem here."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12074527765","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:55:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8870","RelatedDescription":"Closed issue \"How to show the Toolbox control after install the NuGet package in Xamarin platform\" (#8870) at NuGet/Home","RelatedBody":"Hi \r\n\r\nI am trying to add the Toolbox controls along with default Microsoft Visual Studio toolbox window for Xamarin, after install the Custom NuGet packages instead of install the custom Tool Box Extension since the toolbox has been enable for the Xaml pages. \r\n\r\nI have tried add the tools folder with the VisualStudioToolSDKmanifest.xml file along with my sample NuGet package. But don't have luck. The controls are showing in the default Visual Studio Xamarin Toolbox. But I can't drag and Drop the control in the XAML file since the controls are disabled in the toolbox window.\r\n\r\nThe above method has been worked on the WPF and UWP Xaml pages. But not working in the Xamarin project xaml pages. \r\n\r\nIs there any problem in xamarin XAML file to show the toolbox control through the NuGet packages?\r\nCould you please any one suggestion to achieve this?\r\n\r\nThanks,\r\nGanesan R."},{"Id":"12074502079","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:51:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9052","RelatedDescription":"Closed issue \"PackageReference and transitive dependencies\" (#9052) at NuGet/Home","RelatedBody":"A while back you [changed the default behavior of build dependency asset to transitive](https://github.com/NuGet/Home/issues/6091). I was reading discussions, as well as [spec](https://github.com/NuGet/Home/wiki/Allow-package--authors-to-define-build-assets-transitive-behavior), but cannot find anything about potential [issue with transitive dependencies](https://curia.me/net-core-transitive-references-and-how-to-block-them/). I will sum it up here:\r\n\r\n- Project DAL: references the Json.NET NuGet package and defines the class ClassDB;\r\n- Project BLL: references the DAL project;\r\n- Project UI: references the BLL project.\r\n\r\nIn this case, UI is able to access both the Json.NET package and the ClassDB class, which is quite dangerous, because it could let the developers to skip the architectural layers set up during design phase.\r\n\r\nIs there something I am missing?"},{"Id":"12074498518","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:50:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5953","RelatedDescription":"Closed issue \"Add a link to NuGet warning properties doc to the restore warnings and error page\" (#5953) at NuGet/Home","RelatedBody":"NuGet warnings and errors page: https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings\r\n\r\nThe page lists out all the restore warnings and errors correctly. But I do not see a link to warning properties except the [compiler option page](https://docs.microsoft.com/en-us/visualstudio/ide/how-to-suppress-compiler-warnings), which is not very helpful to the users.\r\n\r\nCan we please have a similar page for NuGet warning properties which merges the following specs - \r\n\r\nhttps://github.com/NuGet/Home/wiki/%5BSpec%5D-Transitive-Warning-Properties\r\nhttps://github.com/NuGet/Home/wiki/Improved-NuGet-warnings"},{"Id":"12074451110","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:41:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8574","RelatedDescription":"Closed issue \"error NU1403: Package content hash validation failed\" (#8574) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.3\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100-preview9-014004\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1803 (17134.950)\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Find an existing solution (I'll continue to try to narrow this down)\r\n\r\n2. Add the following to Directory.Build.props (in the solution folder)\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n</PropertyGroup>\r\n```\r\n\r\n3. Run locally\r\n\r\n```\r\ndotnet restore solution.sln --force-evaluate\r\ndotnet restore solution.sln --locked-mode\r\n```\r\n\r\n4. Run in CI\r\n\r\n```\r\ndotnet restore solution.sln --locked-mode\r\n```\r\n\r\nEXPECTED: CI resolves all packages successfully, just like it does locally.\r\n\r\nACTUAL: CI generates lots of errors:\r\n\r\n```\r\nPackage content hash validation failed for Microsoft.NETCore.Platforms.1.1.0. Expected: IQkwtWGo0vpmpAY1gGxZaRNaIZGVtT8AuMXxn5VkseSiAJA+p05mLcjHjvrr9OGdEe/5KhKVbJpZ1sjEVPYNVg== Actual: kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==\r\nPackage content hash validation failed for Microsoft.NETCore.Targets.1.1.0. Expected: 9ElOT7IzAq0d6x8oj4cA4EGLSArQM9bMhWNEcZcdSMM6WKogm2WApVYVStwbIqJrsp5xDeMEyC0ilMiz8IfVvA== Actual: aOZA3BWfz9RXjpzt0sRJJMjAscAUm3Hoa4UWAfceV9UTYxgwZ1lZt5nO2myFf+/jetYQo4uTP7zS8sJY67BBxg==\r\nPackage content hash validation failed for runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl.4.3.0. Expected: vhYwlEkWIj58SyPvGnvao2N3/SkSjGRo9ENRSANfkAyi4HpFmERIB9TqPvXX09iAn0YtbmEPzbuqh+DfB5Buog== Actual: HdSSp5MnJSsg08KMfZThpuLPJpPwE5hBXvHwoKWosyHHfe8Mh5WKT0ylEOf6yNzX6Ngjxe4Whkafh5q7Ymac4Q==\r\nPackage content hash validation failed for runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl.4.3.0. Expected: aio5JNQATXURQ3utPAvOZ3fuvNJCoOrPZemmfEK/SDDFbs8DVZesKxVHGVnGBGMy9pGChT5KWny6leCkcfwzHA== Actual: +yH1a49wJMy8Zt4yx5RhJrxO/DBDByAiCzNwiETI+1S4mPdCu0OY4djdciC7Vssk0l22wQaDLrXxXkp+3+7bVA==\r\nPackage content hash validation failed for Microsoft.NETCore.Platforms.1.1.0. Expected: IQkwtWGo0vpmpAY1gGxZaRNaIZGVtT8AuMXxn5VkseSiAJA+p05mLcjHjvrr9OGdEe/5KhKVbJpZ1sjEVPYNVg== Actual: kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==\r\nPackage content hash validation failed for runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl.4.3.0. Expected: JYLc6/TV7Z9IrKQY8YP6xfXI3Xb8yJJ138mQ2SNIkRcnsRo+s5D4GFt+xZySVrRHOng9KVQWhekr8MGS9hqY1A== Actual: c3YNH1GQJbfIPJeCnr4avseugSqPrxwIqzthYyZDN6EuOyNOzq+y2KSUfRcXauya1sF4foESTgwM5e1A8arAKw==\r\n```\r\n\r\nThe error seems to be due to the fallback folder, so I added the following to `Directory.Build.prop`.\r\n\r\n```xml\r\n  <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>\r\n```\r\n\r\nNo change.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nCan include privately\r\n"},{"Id":"12074435819","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:38:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8880","RelatedDescription":"Closed issue \"\"Package Restore\" doesn't take effect in vs2017 NuGet Package Manager configuration\" (#8880) at NuGet/Home","RelatedBody":"Reproduce steps:\r\nAccording to https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore-troubleshooting\r\nSelect the Tools > NuGet Package Manager > Package Manager Settings menu command.\r\nSet both options under Package Restore.\r\nSelect OK.\r\nClose the VS2017 and open it again, the two options are still unset. \r\nHowever, the file NuGet.Config was changed to:\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n```\r\n<configuration>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <bindingRedirects>\r\n    <add key=\"skip\" value=\"False\" />\r\n  </bindingRedirects>\r\n  <packageManagement>\r\n    <add key=\"format\" value=\"0\" />\r\n    <add key=\"disabled\" value=\"False\" />\r\n  </packageManagement>\r\n</configuration>\r\n```\r\n\r\nbut still met the error:\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tThis project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is ..\\..\\..\\..\\..\\.nuget\\packages\\boost.1.64.0.0\\build\\native\\boost.targets.\tlibbitcoin\tC:\\cppWorkspace\\libbitcoin\\builds\\msvc\\vs2017\\libbitcoin\\libbitcoin.vcxproj\t553\t\r\n"},{"Id":"12074422180","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:35:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9305","RelatedDescription":"Closed issue \"Fakes assembly is not generating with PackageReference\" (#9305) at NuGet/Home","RelatedBody":"I have created one nuget package. Name of that nuget package is MyFirstOne. Inside that package one dll is there named abc.dll\r\n\r\nI have created 2 WPF projects. One with packages.config(WPFPackageConfigProject) and the other one with PackageReference((WPFPackageReferenceProject).\r\n\r\nI have added MyFirstOne package to both projects. I tried to create fakes assembly for that in WPFPackageConfigProject. Fakes assembly created successfully. I tried to create fakes assembly in WPFPackageReferenceProject. Fakes assembly didn't created. It failed stating that Fakes doesnot support this assembly.\r\n\r\nNow I renamed my nuget package to abc. Which means both package and dll names are same. Now I referred this in both projects. Now fakes assembly is created fine in both projects.\r\n\r\nIs there any issue with PackageReference to create fakes assembly? When my package name and dll name are different it is failing to create fakes assembly with package reference.\r\n![FakesIssue](https://user-images.githubusercontent.com/49900591/76591825-759b8100-6517-11ea-8f53-e2f5f4d7f8ee.PNG)\r\n"},{"Id":"12074414801","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:34:23","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9191","RelatedDescription":"Closed issue \"<Library>.runtimeconfig.json is not copied from lib to output\" (#9191) at NuGet/Home","RelatedBody":"## Details about Problem\r\nActual issue -only dotnet-swagger.dll is ocpied, dotnet-swagger.runtimeconfig.json is not copied as assets from nuget to output folder.\r\n\r\nIt's actually required to run dll with this file as well.\r\n\r\n[RuntimeConfigNugetIssue.zip](https://github.com/NuGet/Home/files/4224768/RuntimeConfigNugetIssue.zip)\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\n\r\ndotnet.exe --version (if appropriate):\r\n3.1.101\r\n\r\nVS version (if appropriate):\r\nVS 16.4.3\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nwin10 v1909\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open solution and run rebuild\r\n...\r\n\r\n### Sample Project\r\n\r\nSample attached.\r\n\r\n"},{"Id":"12074376561","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:26:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9066","RelatedDescription":"Closed issue \"Missing Full path on linked content\" (#9066) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS SDK package builder\r\n\r\nNuGet version (x.x.x.xxx): 5.4\r\n\r\ndotnet.exe --version (if appropriate): 3.1.101\r\n\r\nVS version (if appropriate): 2019 16.4.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): windows 10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create 2 projects\r\n\r\n2. Add a linked file (Must be bested in folder) reference from A to B\r\n\r\n3. Build B the generated nuget spec removed the folder path for the linked file and just uses the filename.\r\n\r\n...\r\n\r\n"},{"Id":"12074371492","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:25:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8319","RelatedDescription":"Closed issue \"Content files in Nuget package do not wind up in bin folder and get treated as C# files\" (#8319) at NuGet/Home","RelatedBody":"I need to distribute 2 .dll files along with 2 .xml files to various .Net Core projects targeting net47. Both the .dll and .xml files have to wind up in the bin folder of the projects.\r\n\r\nI created the .nuspec file below. I'm copying all files to lib\\net47. I'm also copying the .xml files to contentFiles\\any\\any.\r\n\r\nI'm using a PackageReference to include this Nuget package into my projects:\r\n`<PackageReference Include=\"Decideware.Spire.Xls\" Version=\"*\" />`\r\n\r\nProblem is that when I build the project, the .xml files wind up amongst my source files. Also the build action has been changed from \"None\" in my .nuspec to \"C# Compiler\" and copyToOutput has been changed from \"true\" to \"Do Not Copy\". Visual Studio then tries to build the .xml files as if they were C# files, leading to lots of error messages.\r\n\r\nHow do I structure my .nuspec so the .xml files are copied to my bin directory?\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package>\r\n    <metadata>\r\n        <id>Decideware.Spire.Xls</id>\r\n        <version>7.12.3</version>\r\n\t\t<!-- required for .Net Core style PackageReferences -->\r\n\t\t<contentFiles>\r\n\t\t\t<files include=\"Spire.XLS.xml\" buildAction=\"None\" copyToOutput=\"true\" />\r\n\t\t\t<files include=\"license.elic.xml\" buildAction=\"None\" copyToOutput=\"true\" />\r\n\t\t</contentFiles>\r\n    </metadata>\r\n\t<files>\r\n\t\t<file src=\"Spire.License.dll\" target=\"lib\\net47\\Spire.License.dll\" />\r\n\t\t<file src=\"Spire.XLS.dll\" target=\"lib\\net47\\Spire.XLS.dll\" />\r\n\t\t\r\n\t\t<file src=\"Spire.XLS.xml\" target=\"lib\\net47\\Spire.XLS.xml\" />\r\n\t\t<file src=\"license.elic.xml\" target=\"lib\\net47\\license.elic.xml\" />\r\n\t\t\r\n\t\t<file src=\"Spire.XLS.xml\" target=\"contentFiles\\any\\any\\Spire.XLS.xml\" />\r\n\t\t<file src=\"license.elic.xml\" target=\"contentFiles\\any\\any\\license.elic.xml\" />\r\n\t</files>\r\n</package>\r\n\r\n```\r\n\r\n"},{"Id":"12074368230","Type":"IssuesEvent","CreatedAt":"2020-04-17T01:24:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8864","RelatedDescription":"Closed issue \"nuget restore sln really slow\" (#8864) at NuGet/Home","RelatedBody":"Hi guys,\r\n\r\nI have an issue with the nuget 5.x version.\r\n\r\nWhen i make a nuget restore from a sln file (packages are downloaded the first time and the second time they are copy from the cache)\r\n\r\nThats strange but when the copy come from cache it is really slow. I have that on several server (Windows Server 2016). With my user account it look fine ~ 1mn to restore 70 package. It take ~10mpn with other account.\r\n\r\nAny idea ?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-04-17T05:30:40.1250614Z","RunDurationInMilliseconds":1930}