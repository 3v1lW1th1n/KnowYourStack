{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":64,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":109,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null},{"Title":"Finalization implementation details","PublishedOn":"2019-09-16T17:43:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Years ago I wrote a document on making finalization scanning concurrent. At the time there was an internal team that was using finalization as a way to resurrect objects and putting them back in their...","Href":"https://devblogs.microsoft.com/dotnet/finalization-implementation-details/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10552065128","Type":"IssuesEvent","CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Opened issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125) at dotnet/announcements","RelatedBody":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n"},{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"},{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10580002916","Type":"PullRequestEvent","CreatedAt":"2019-10-08T05:07:06","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27084","RelatedDescription":"Opened pull request \"[wip] [crossgen2] Attribute Presence Filter\" (#27084) at dotnet/coreclr","RelatedBody":"Fixes #27021 \r\n\r\n- [ ] Debug difference with crossgen - right now it doesn't generate the identical bits and fails `R2RDump -sc`, it has to be fixed. Given the algorithm, I believe we should be getting exactly the same bits as in `crossgen`.\r\n\r\n@dotnet/crossgen-contrib"},{"Id":"10579647706","Type":"IssuesEvent","CreatedAt":"2019-10-08T03:31:47","Actor":"MaddoxDevelopment","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27083","RelatedDescription":"Opened issue \"Allow circular reference support for the new dotnet core 3 json api's\" (#27083) at dotnet/coreclr","RelatedBody":"# Issue Title\r\n\r\nThe new System.Text.Json API's do not support ignoring circular references while serializing.\r\nThis is an issue because EF Core produces circular references by default when using navigation properties."},{"Id":"10579540776","Type":"IssuesEvent","CreatedAt":"2019-10-08T03:05:33","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27082","RelatedDescription":"Opened issue \"Test failed: tracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd\" (#27082) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-jitstress #20191006.1 Run Test Pri1 Windows_NT x86 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379860)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/63cfd2b1-0def-449f-b65e-c489f05ffb1b/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x86\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_ReadyToRun=0\r\nCOMPlus_ZapDisable=1\r\n\r\n**Note:**\r\nthis failure **doesn't repro** on our windows x86 machine\r\n\r\n**Log:**\r\n```\r\ntracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Work\\0889eae0-1417-465f-9153-85fe479475c0\\Exec\\tracing\\eventcounter\\Reports\\tracing.eventcounter\\incrementingeventcounter\\incrementingeventcounter.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Payload\\corerun.exe\" incrementingeventcounter.dll \r\n      Test Failed\r\n      Expected to see 100 events - saw 0\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```"},{"Id":"10579453019","Type":"IssuesEvent","CreatedAt":"2019-10-08T02:44:55","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27081","RelatedDescription":"Opened issue \"Test failed: Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd\" (#27081) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-gcstress0x3-gcstress0xc #20191006.1 Run Test Pri1 Windows_NT x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379231)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/2670f608-f646-4388-9819-cf699ea0ecd9/workitems/Interop/console\r\n\r\n**OS & Arch:**\r\nwindows x64\r\n"},{"Id":"10579328931","Type":"PullRequestEvent","CreatedAt":"2019-10-08T02:14:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27080","RelatedDescription":"Opened pull request \"[release/3.1] Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only (#27014)\" (#27080) at dotnet/coreclr","RelatedBody":"Description\r\nRegression introduce as side-effect of refactoring for local GC. The GC uses incorrectly uses current processor count instead of total processor count to determine whether it is safe to use special uniprocessor allocation helpers.\r\n\r\nCustomer impact\r\nChanging process affinity from 1 processor to more processor after the process starts will lead to intermittent crashes.\r\n\r\nRegression?\r\nYes (2.0 -> 2.1,3.0)\r\n\r\nRisk\r\nSmall. Undo the bad change.\r\n\r\n----\r\n\r\nUse maximum number of processors the process may run on to determine whether it is ok to use\r\nsingle-proc allocation helpers. It is not sufficient to depend on current process affinity since\r\nthat can change during the process lifetime.\r\n\r\nAlso, the single-proc allocation helpers work well on x86/x64 systems only because of they depend\r\non atomic non-interlocked increment instruction for good performance. Such instruction is available\r\non x86/x64 only. Disable them everywhere else.\r\n\r\nFixes #26990"},{"Id":"10579312801","Type":"IssuesEvent","CreatedAt":"2019-10-08T02:10:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26990","RelatedDescription":"Reopened issue \"Changing process affinity from 1 to N cores causes memory corruption and deadlocks\" (#26990) at dotnet/coreclr","RelatedBody":"**To reproduce the problem**\r\n- Launch a process with its initial thread affinity pinned to 1 core.\r\n- Process unpins itself from 1 core to multiple cores.\r\n- Process runs several asynchronous Tasks.\r\n- Process will randomly experience memory corruption (including deadlocks and spurious exceptions).\r\n\r\nWe suspect the problem has been introduced in .NET 4.8 as well as .NET Core 2.1 (or earlier).\r\n\r\n**Notes**\r\n- Confirmed to happen on Windows 7, Windows 10.\r\n- Confirmed to happen on .NET Framework 4.8, .NET Core 2.1, .NET Core 3.0.\r\n- Confirmed not to happen on .NET Framework 4.7 (as long as .NET Framework 4.8 has not been installed on the machine).\r\n- The more tasks are started, the more likely it will go wrong.\r\n- Setting initial affinity to 0x0001 (rather than 0x0002) fails to reproduce the problem.\r\n- Subsequent affinity needs to be any number of cores other than 1 (0x0FFF being used here as the test machine had 12 cores, you will need to switch to a smaller mask if your machine has less cores).\r\n\r\n**How come we are doing this**\r\nWhen submitting a job to our internal compute farm, its process gets assigned to the specific CPU cores allocated for the job to run on. Most jobs only request one CPU core, therefore their affinity mask gets set to one core.\r\n\r\nIn the case of our GPU compute farm, the CPUs are not the limiting resource. Instead we want to pin the process to the CPU cores closest to the GPU we've been assigned to. Because our farm scheduler does not seem to be able to understand the complexity of GPU and NUMA node topologies., we apply the logic above once the job has started from within the job process itself."},{"Id":"10579288035","Type":"PullRequestEvent","CreatedAt":"2019-10-08T02:04:20","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27014","RelatedDescription":"Merged pull request \"Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only\" (#27014) at dotnet/coreclr","RelatedBody":"Use maximum number of processors the process may run on to determine whether it is ok to use\r\nsingle-proc allocation helpers. It is not sufficient to depend on current process affinity since\r\nthat can change during the process lifetime.\r\n\r\nAlso, the single-proc allocation helpers work well on x86/x64 systems only because of they depend\r\non atomic non-interlocked increment instruction for good performance. Such instruction is available\r\non x86/x64 only. Disable them everywhere else.\r\n\r\nFixes #26990"},{"Id":"10579288020","Type":"IssuesEvent","CreatedAt":"2019-10-08T02:04:20","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26990","RelatedDescription":"Closed issue \"Changing process affinity from 1 to N cores causes memory corruption and deadlocks\" (#26990) at dotnet/coreclr","RelatedBody":"**To reproduce the problem**\r\n- Launch a process with its initial thread affinity pinned to 1 core.\r\n- Process unpins itself from 1 core to multiple cores.\r\n- Process runs several asynchronous Tasks.\r\n- Process will randomly experience memory corruption (including deadlocks and spurious exceptions).\r\n\r\nWe suspect the problem has been introduced in .NET 4.8 as well as .NET Core 2.1 (or earlier).\r\n\r\n**Notes**\r\n- Confirmed to happen on Windows 7, Windows 10.\r\n- Confirmed to happen on .NET Framework 4.8, .NET Core 2.1, .NET Core 3.0.\r\n- Confirmed not to happen on .NET Framework 4.7 (as long as .NET Framework 4.8 has not been installed on the machine).\r\n- The more tasks are started, the more likely it will go wrong.\r\n- Setting initial affinity to 0x0001 (rather than 0x0002) fails to reproduce the problem.\r\n- Subsequent affinity needs to be any number of cores other than 1 (0x0FFF being used here as the test machine had 12 cores, you will need to switch to a smaller mask if your machine has less cores).\r\n\r\n**How come we are doing this**\r\nWhen submitting a job to our internal compute farm, its process gets assigned to the specific CPU cores allocated for the job to run on. Most jobs only request one CPU core, therefore their affinity mask gets set to one core.\r\n\r\nIn the case of our GPU compute farm, the CPUs are not the limiting resource. Instead we want to pin the process to the CPU cores closest to the GPU we've been assigned to. Because our farm scheduler does not seem to be able to understand the complexity of GPU and NUMA node topologies., we apply the logic above once the job has started from within the job process itself."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10579137992","Type":"PullRequestEvent","CreatedAt":"2019-10-08T01:27:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12843","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12843) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.7\r\n- **Date Produced**: 10/7/2019 11:48 PM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n"},{"Id":"10578008152","Type":"IssuesEvent","CreatedAt":"2019-10-07T21:26:31","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12808","RelatedDescription":"Closed issue \"dotnet restore fails on Ubuntu 16.04\" (#12808) at dotnet/cli","RelatedBody":"I have updated my site to dotnet core 3.0, but it fails to restore the packages.  Dotnet restore just hangs.  Reverting back to my old core 2.2 version worked.  I tried using a brand new Ubuntu Server 16.04 image and it restored just fine.  It looks like a similar issue to this https://github.com/dotnet/cli/issues/11560 however setting MSBUILDDISABLENODEREUSE=1 made no difference\r\n\r\n## Steps to reproduce\r\ngit clone https://github.com/luhis/CodeGolf.git\r\ncd CodeGolf\r\ndotnet restore\r\n\r\n## Expected  behavior\r\nnuget packages would be restored\r\n\r\n## Actual behavior\r\nProcess hangs and never completes\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  95a0a61858\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.                                                              App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"},{"Id":"10577915681","Type":"IssuesEvent","CreatedAt":"2019-10-07T21:12:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12842","RelatedDescription":"Closed issue \"dotnet test has exit code 0 despite BadImageFormatException\" (#12842) at dotnet/cli","RelatedBody":"## Steps to reproduce and Environment data\r\nWhen using the [pool](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pool) with VM image label [`windows-2019`](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent), the relevant part of the `dotnet --info` output is\r\n```\r\nRID: win10-x64\r\n```\r\n\r\nTherefore, it is no surprise that executing\r\n```\r\ndotnet test Tests\\Tests.fsproj --runtime win-x86\r\n```\r\ndoesn't work since the [RID](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)s are incompatible.  Specifically, the relevant part of the logs when \"Enable system diagnostics\" is checked is\r\n```\r\nTest run for D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:02.06] Exception discovering tests from Tests: System.BadImageFormatException: Could not load file or assembly 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\nFile name: 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   at // ... stack track omitted\r\n\r\nNo test is available in D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.\r\nResults File: D:\\a\\_temp\\VssAdministrator_fv-az604_2019-10-07_18_48_39.trx\r\n\r\n##[debug]Exit code 0 received from tool 'C:\\Program Files\\dotnet\\dotnet.exe'\r\n```\r\n\r\n## Expected  behavior\r\nI expected `dotnet test` to return a nonzero exit code since it encountered a `BadImageFormatException`.\r\n\r\n## Actual behavior\r\n`dotnet test` to returned an exit code of 0 despite encountering a `BadImageFormatException`."},{"Id":"10577780175","Type":"PullRequestEvent","CreatedAt":"2019-10-07T20:53:23","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12787","RelatedDescription":"Merged pull request \"Update branding to 2.2.207\" (#12787) at dotnet/cli","RelatedBody":""},{"Id":"10577648583","Type":"PullRequestEvent","CreatedAt":"2019-10-07T20:35:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12843","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12843) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.5\r\n- **Date Produced**: 10/7/2019 7:19 PM\r\n- **Commit**: 536ee53cd1a0cc677e700387305538542aeeb2b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10573652174","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1596) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10573576799","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:19:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1596) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10573521118","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1595) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10573450678","Type":"PullRequestEvent","CreatedAt":"2019-10-07T12:01:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1595) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10568348386","Type":"PullRequestEvent","CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1594) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10568336717","Type":"PullRequestEvent","CreatedAt":"2019-10-06T12:18:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1594) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10568320886","Type":"PullRequestEvent","CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1593) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10568298585","Type":"PullRequestEvent","CreatedAt":"2019-10-06T12:01:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1593) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10580036411","Type":"PullRequestEvent","CreatedAt":"2019-10-08T05:16:19","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41624","RelatedDescription":"Merged pull request \"Fix copy&paste globalization test bug\" (#41624) at dotnet/corefx","RelatedBody":""},{"Id":"10579430332","Type":"PullRequestEvent","CreatedAt":"2019-10-08T02:39:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41626","RelatedDescription":"Merged pull request \"Update ReportGenerator global repo tool version to 4.3.0\" (#41626) at dotnet/corefx","RelatedBody":"Contains fixes such as https://github.com/danielpalme/ReportGenerator/issues/284 amongst others\r\n\r\nhttps://github.com/danielpalme/ReportGenerator/blob/57b12cb92f245c0b085bf10f4e1054fda4d9854a/src/Readme.txt#L64-L72\r\n\r\ncc @ViktorHofer, @danielpalme "},{"Id":"10579090841","Type":"PullRequestEvent","CreatedAt":"2019-10-08T01:15:36","Actor":"Marusyk","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41627","RelatedDescription":"Opened pull request \"Fix serialization of elements with an empty-string child text node\" (#41627) at dotnet/corefx","RelatedBody":"Related to #41574\r\n\r\nAfter this change output will be\r\n```\r\n<root>\r\n  <Elem></Elem>\r\n</root>\r\n```\r\n\r\nCan we skip Lenght check?\r\n\r\nPlease review.\r\nThank you in advance"},{"Id":"10579050028","Type":"PullRequestEvent","CreatedAt":"2019-10-08T01:04:58","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41625","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#41625) at dotnet/corefx","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @davidsh\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"10578968030","Type":"PullRequestEvent","CreatedAt":"2019-10-08T00:44:20","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41626","RelatedDescription":"Opened pull request \"Update ReportGenerator global repo tool version to 4.3.0\" (#41626) at dotnet/corefx","RelatedBody":"Contains fixes such as https://github.com/danielpalme/ReportGenerator/issues/284 amongst others\r\n\r\nhttps://github.com/danielpalme/ReportGenerator/blob/57b12cb92f245c0b085bf10f4e1054fda4d9854a/src/Readme.txt#L64-L72\r\n\r\ncc @ViktorHofer "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10579396012","Type":"PullRequestEvent","CreatedAt":"2019-10-08T02:31:04","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39127","RelatedDescription":"Opened pull request \"Enable detection and addition of solution level .editorconfig as solu…\" (#39127) at dotnet/roslyn","RelatedBody":"…tion item\r\n\r\n1. IDE code fix that adds new editorconfig for configuring code style/severity has been updated to create the file at root of the solution, instead of the project. Additionally, the code fix also automatically adds the file as a solution item.\r\n2. We now detect if user opens a solution with editorconfig at the root of the solution and provide an info bar to make it a solution item with a single click. User can choose to silence this suggestion for the current solution (solution user option) OR silence it for all solutions for the user (workspace option)."},{"Id":"10579363429","Type":"PullRequestEvent","CreatedAt":"2019-10-08T02:23:05","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38611","RelatedDescription":"Merged pull request \"Clean up FIPS settings in Interactive\" (#38611) at dotnet/roslyn","RelatedBody":"Follow up to #38527 \r\n\r\nI didn't find an app.config for InteractiveHost, so I added one.\r\n\r\nI looked for all the instances of `<OutputType>Exe</OutputType>` in app.config, and decided ad-hoc which ones are shipping projects or not. I didn't bother updating internal-only projects. Projects in **bold** in the list below have had the config setting added.\r\n\r\n<details>\r\n    <summary>list of projects</summary>\r\n\r\n- **`roslyn\\src\\Compilers\\CSharp\\csc\\csc.csproj`**\r\n- **`roslyn\\src\\Compilers\\Server\\VBCSCompiler\\VBCSCompiler.csproj`**\r\n- **`roslyn\\src\\Compilers\\VisualBasic\\vbc\\vbc.csproj`**\r\n- **`roslyn\\src\\Interactive\\csi\\csi.csproj`**\r\n- **`roslyn\\src\\Interactive\\DesktopHost\\InteractiveHost32.csproj`**\r\n- **`roslyn\\src\\Interactive\\DesktopHost\\InteractiveHost64.csproj`**\r\n- **`roslyn\\src\\Interactive\\vbi\\vbi.vbproj`**\r\n- `roslyn\\src\\Test\\Perf\\StackDepthTest\\StackDepthTest.csproj`\r\n- `roslyn\\src\\Tools\\AnalyzerRunner\\AnalyzerRunner.csproj`\r\n- `roslyn\\src\\Tools\\BuildBoss\\BuildBoss.csproj`\r\n- `roslyn\\src\\Tools\\CompilerBenchmarks\\CompilerBenchmarks.csproj`\r\n- `roslyn\\src\\Tools\\IdeBenchmarks\\IdeBenchmarks.csproj`\r\n- `roslyn\\src\\Tools\\RoslynPublish\\RoslynPublish.csproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\BoundTreeGenerator\\CompilersBoundTreeGenerator.csproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\CSharpErrorFactsGenerator\\CSharpErrorFactsGenerator.csproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\CSharpSyntaxGenerator\\CSharpSyntaxGenerator.csproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\IOperationGenerator\\CompilersIOperationGenerator.csproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\VisualBasicErrorFactsGenerator\\VisualBasicErrorFactsGenerator.vbproj`\r\n- `roslyn\\src\\Tools\\Source\\CompilerGeneratorTools\\Source\\VisualBasicSyntaxGenerator\\VisualBasicSyntaxGenerator.vbproj`\r\n- `roslyn\\src\\Tools\\Source\\RunTests\\RunTests.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreApp2\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreApp2AndLibrary\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreApp2AndTwoLibraries\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreMultiTFM\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreMultiTFM_ProjectReference\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\NetCoreMultiTFM_ProjectReferenceWithReversedTFMs\\Project.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\AllOptions.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\AnalyzerReference.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\DuplicateProjectReference.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\ProjectLoadErrorOnMissingDebugType.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\ProjectReference.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\ReferencesPortableProject.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\WithDiscoverEditorConfigFiles.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\WithLink.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\WithoutPrefer32Bit.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\CSharp\\WithPrefer32Bit.csproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\VisualBasic\\WithoutPrefer32Bit.vbproj`\r\n- `roslyn\\src\\Workspaces\\MSBuildTest\\Resources\\ProjectFiles\\VisualBasic\\WithPrefer32Bit.vbproj`\r\n\r\n</details>"},{"Id":"10578909142","Type":"PullRequestEvent","CreatedAt":"2019-10-08T00:30:12","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39126","RelatedDescription":"Opened pull request \"[WIP] Completion for unimported extension methods\" (#39126) at dotnet/roslyn","RelatedBody":""},{"Id":"10578859182","Type":"PullRequestEvent","CreatedAt":"2019-10-08T00:17:48","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39125","RelatedDescription":"Opened pull request \"Using declaration ioperation\" (#39125) at dotnet/roslyn","RelatedBody":""},{"Id":"10578849885","Type":"PullRequestEvent","CreatedAt":"2019-10-08T00:15:24","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38960","RelatedDescription":"Merged pull request \"Allow conversion of GetAwaiter extension method this arg\" (#38960) at dotnet/roslyn","RelatedBody":"Fixes #30956"},{"Id":"10578849878","Type":"IssuesEvent","CreatedAt":"2019-10-08T00:15:24","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30956","RelatedDescription":"Closed issue \"await struct that implements IObservable throws EntryPointNotFoundException\" (#30956) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft Visual Studio Professional 2017 Version 15.8.7\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new C# Console App(.NET Framework) project\r\n2. Add `System.Reactive` package from NuGet(latest, `4.1.2`)\r\n3. Copy and paste following code\r\n4. Run on Debug Mode\r\n\r\n```csharp\r\nusing System;\r\nusing System.Reactive.Linq;\r\nusing System.Threading.Tasks;\r\n\r\npublic struct StructObservable<T> : IObservable<T>\r\n{\r\n    public IDisposable Subscribe(IObserver<T> observer)\r\n    {\r\n        observer.OnNext(default(T));\r\n        observer.OnCompleted();\r\n        return null;\r\n    }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"BEGIN ------\");\r\n        Foo.BarAsync().GetAwaiter().GetResult(); // System.EntryPointNotFoundException\r\n        Console.WriteLine(\"END ------\");\r\n    }\r\n}\r\n\r\npublic static class Foo\r\n{\r\n    public static async Task BarAsync()\r\n    {\r\n        await new StructObservable<int>();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nDisplay shows\r\n\r\n```\r\nBEGIN ------\r\nEND ------\r\n```\r\n\r\n\r\n**Actual Behavior**:\r\nDisplay shows\r\n\r\n```\r\nBEGIN ------\r\n\r\nハンドルされていない例外: System.EntryPointNotFoundException: エントリ ポイントが見つかりませんでした。\r\n   場所 System.IObservable`1.Subscribe(IObserver`1 observer)\r\n   場所 System.ObservableExtensions.SubscribeSafe[T](IObservable`1 source, IObserver`1 observer)\r\n--- 直前に例外がスローされた場所からのスタック トレースの終わり ---\r\n   場所 System.Reactive.PlatformServices.ExceptionServicesImpl.Rethrow(Exception exception)\r\n   場所 System.Reactive.ExceptionHelpers.ThrowIfNotNull(Exception exception)\r\n   場所 System.Reactive.Subjects.AsyncSubject`1.GetResult()\r\n   場所 Foo.<BarAsync>d__0.MoveNext() 場所 C:\\Users\\S04451\\source\\repos\\ConsoleApp4\\ConsoleApp4\\Program.cs:行 29\r\n--- 直前に例外がスローされた場所からのスタック トレースの終わり ---\r\n   場所 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   場所 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   場所 System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   場所 Program.Main(String[] args) 場所 C:\\Users\\S04451\\source\\repos\\ConsoleApp4\\ConsoleApp4\\Program.cs:行 20\r\n```\r\n\r\n(log is run on Japanese Windows, this means unhandled exception: System.EntryPointNotFoundException.)\r\n\r\n---\r\n\r\nIf chainging `public struct StructObservable<T>` -> `public class StructObservable<T>`\r\nor `await new StructObservable<int>()` -> `await new StructObservable<int>().AsObservable()` works fine.\r\nIf run on Release Mode, display shows `BEGIN ------` only. \r\nIf run on Unity Editor, shows `InvalidProgramException: Invalid IL code in HogeMoge/<OnClick>d__3:MoveNext (): IL_0021: call      0x2b0000be`."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10579340252","Type":"IssuesEvent","CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Opened issue \"Call generated dll from cpp crash\" (#7817) at dotnet/corert","RelatedBody":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```"},{"Id":"10571960710","Type":"IssuesEvent","CreatedAt":"2019-10-07T08:30:53","Actor":"yunekit","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Opened issue \"sched_yield infinite loop\" (#7816) at dotnet/corert","RelatedBody":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work."},{"Id":"10569679862","Type":"PullRequestEvent","CreatedAt":"2019-10-06T21:09:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7815) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"10569431674","Type":"PullRequestEvent","CreatedAt":"2019-10-06T19:30:51","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Merged pull request \"Add support for multithreaded compilation to ILC\" (#7814) at dotnet/corert","RelatedBody":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff)."},{"Id":"10569379004","Type":"PullRequestEvent","CreatedAt":"2019-10-06T19:11:06","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7815) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10569159401","Type":"PullRequestEvent","CreatedAt":"2019-10-06T17:45:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Opened pull request \"Add support for multithreaded compilation to ILC\" (#7814) at dotnet/corert","RelatedBody":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too)."},{"Id":"10567497851","Type":"PullRequestEvent","CreatedAt":"2019-10-06T04:53:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Merged pull request \"Port fixes from CoreCLR\" (#7811) at dotnet/corert","RelatedBody":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793."},{"Id":"10566063017","Type":"PullRequestEvent","CreatedAt":"2019-10-05T16:06:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Merged pull request \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812) at dotnet/corert","RelatedBody":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable."},{"Id":"10566058643","Type":"PullRequestEvent","CreatedAt":"2019-10-05T16:04:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Merged pull request \"Cache helpers used in IL scanner\" (#7813) at dotnet/corert","RelatedBody":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler."},{"Id":"10565909417","Type":"PullRequestEvent","CreatedAt":"2019-10-05T15:03:25","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Opened pull request \"Cache helpers used in IL scanner\" (#7813) at dotnet/corert","RelatedBody":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Notice this when running the compiler under a profiler."},{"Id":"10565908196","Type":"PullRequestEvent","CreatedAt":"2019-10-05T15:02:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Opened pull request \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812) at dotnet/corert","RelatedBody":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable."},{"Id":"10565690384","Type":"PullRequestEvent","CreatedAt":"2019-10-05T13:28:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Opened pull request \"Port fixes from CoreCLR\" (#7811) at dotnet/corert","RelatedBody":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10579850469","Type":"IssuesEvent","CreatedAt":"2019-10-08T04:25:45","Actor":"Codex-","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Opened issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725) at dotnet/sdk","RelatedBody":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated"},{"Id":"10578785898","Type":"IssuesEvent","CreatedAt":"2019-10-07T23:59:52","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3626","RelatedDescription":"Closed issue \"Block build on TFM lower than netcoreapp3.1\" (#3626) at dotnet/sdk","RelatedBody":""},{"Id":"10578719193","Type":"IssuesEvent","CreatedAt":"2019-10-07T23:43:25","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3724","RelatedDescription":"Opened issue \"BuildWebLarge and similar perf test have wrong snapshot folder\" (#3724) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/260f37383a4974b478cba2ba67ac7908578f5b07/src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs#L68\r\n\r\nAnd possibly other similar tests. We use the same folder to find the csproj (which is correct), and to do snapshot (not correct). As a result, in BuildWebLarge, only the mvc folder is under snapshot/restore while there are many other projects in the solution is not properly cleaned between test runs. \r\n\r\nHowever, the perf lab has different infra to do this. So once we moved to perf lab, this will no longer be a problem.\r\n\r\nI think this is a low priority issue."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"503829117","IsPullRequest":true,"CreatedAt":"2019-10-08T05:07:05","Actor":"cshung","Number":"27084","RawContent":null,"Title":"[wip] [crossgen2] Attribute Presence Filter","State":"open","Body":"Fixes #27021 \r\n\r\n- [ ] Debug difference with crossgen - right now it doesn't generate the identical bits and fails `R2RDump -sc`, it has to be fixed. Given the algorithm, I believe we should be getting exactly the same bits as in `crossgen`.\r\n\r\n@dotnet/crossgen-contrib","Url":"https://github.com/dotnet/coreclr/pull/27084","RelatedDescription":"Open PR \"[wip] [crossgen2] Attribute Presence Filter\" (#27084)"},{"Id":"503803835","IsPullRequest":false,"CreatedAt":"2019-10-08T03:31:46","Actor":"MaddoxDevelopment","Number":"27083","RawContent":null,"Title":"Allow circular reference support for the new dotnet core 3 json api's","State":"open","Body":"The new System.Text.Json API's do not support ignoring circular references while serializing.\r\nThis is an issue because EF Core produces circular references by default when using navigation properties.\r\n\r\nThis results in an exception being thrown when you serialize a result set from EF Core.","Url":"https://github.com/dotnet/coreclr/issues/27083","RelatedDescription":"Open issue \"Allow circular reference support for the new dotnet core 3 json api's\" (#27083)"},{"Id":"503797140","IsPullRequest":false,"CreatedAt":"2019-10-08T03:05:33","Actor":"VincentBu","Number":"27082","RawContent":null,"Title":"Test failed: tracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd","State":"open","Body":"**Job:**\r\n[coreclr-jitstress #20191006.1 Run Test Pri1 Windows_NT x86 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379860)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/63cfd2b1-0def-449f-b65e-c489f05ffb1b/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x86\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_ReadyToRun=0\r\nCOMPlus_ZapDisable=1\r\n\r\n**Note:**\r\nthis failure **doesn't repro** on our windows x86 machine\r\n\r\n**Log:**\r\n```\r\ntracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Work\\0889eae0-1417-465f-9153-85fe479475c0\\Exec\\tracing\\eventcounter\\Reports\\tracing.eventcounter\\incrementingeventcounter\\incrementingeventcounter.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\63cfd2b1-0def-449f-b65e-c489f05ffb1b\\Payload\\corerun.exe\" incrementingeventcounter.dll \r\n      Test Failed\r\n      Expected to see 100 events - saw 0\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27082","RelatedDescription":"Open issue \"Test failed: tracing\\eventcounter\\incrementingeventcounter\\incrementingeventcounter.cmd\" (#27082)"},{"Id":"503791626","IsPullRequest":false,"CreatedAt":"2019-10-08T02:44:55","Actor":"VincentBu","Number":"27081","RawContent":null,"Title":"Test failed: Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd","State":"open","Body":"**Job:**\r\n[coreclr-gcstress0x3-gcstress0xc #20191006.1 Run Test Pri1 Windows_NT x64 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=379231)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/2670f608-f646-4388-9819-cf699ea0ecd9/workitems/Interop/console\r\n\r\n**OS & Arch:**\r\nwindows x64\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_GCStress=0x3\r\n\r\n**Note:**\r\nI try to repro this failure but get the following information:\r\n```\r\nTest Failure: System.Runtime.InteropServices.COMException (0x80040154): Retrieving the COM class factory for component with CLSID {0F8ACD0C-ECE0-4F2A-BD1B-6BFCA93A0726} failed due to the following error: 80040154 Class not registered (0x80040154 (REGDB_E_CLASSNOTREG)).     \r\n\r\nat NetClient.Program.Validate_Numeric_In_ReturnByRef()                                                                  \r\nat NetClient.Program.Main(String[] doNotUse)          \r\n                                                               \r\nExpected: 100                                                                                                           \r\nActual: 101                                                                                                             \r\nEND EXECUTION - FAILED                                                                                                  \r\nFAILED\r\n```\r\n\r\n**Log:**\r\n```\r\nInterop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3044 [0x00000be4], Thread: 7624 [0x1dc8]): !CREATE_CHECK_STRING(pMT && pMT->Validate())\r\n      \r\n      CORECLR! Object::ValidateInner + 0x14A (0x00007ff9`41d02bfa)\r\n      CORECLR! Object::Validate + 0x13A (0x00007ff9`41d02a6a)\r\n      CORECLR! WKS::GCHeap::Promote + 0x9F (0x00007ff9`4215368f)\r\n      CORECLR! GCFrame::GcScanRoots + 0x6C (0x00007ff9`41c77dec)\r\n      CORECLR! GcStackCrawlCallBack + 0x386 (0x00007ff9`420462b6)\r\n      CORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff9`41aa54ca)\r\n      CORECLR! Thread::StackWalkFramesEx + 0x17A (0x00007ff9`41aa7542)\r\n      CORECLR! Thread::StackWalkFrames + 0x184 (0x00007ff9`41aa7328)\r\n      CORECLR! ScanStackRoots + 0x28D (0x00007ff9`421daddd)\r\n      CORECLR! GCToEEInterface::GcScanRoots + 0x1DA (0x00007ff9`421d99a6)\r\n          File: f:\\workspace.10\\_work\\1\\s\\src\\vm\\object.cpp Line: 597\r\n          Image: C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Work\\d2a02d31-1a0f-4dec-bca1-2d30c4347b53\\Exec\\Interop\\COM\\Reports\\Interop.COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\2670f608-f646-4388-9819-cf699ea0ecd9\\Payload\\corerun.exe\" NETClientIDispatch.dll \r\n      Calling DoubleNumeric_ReturnByRef ...\r\n      Call to DoubleNumeric_ReturnByRef complete\r\n      Calling Add_Float_ReturnAndUpdateByRef ...\r\n      Call to Add_Float_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.3; 0.3 == 0.3\r\n      Calling Add_Double_ReturnAndUpdateByRef ...\r\n      Call to Add_Double_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.30000000000000004; 0.30000000000000004 == 0.30000000000000004\r\n      Calling TriggerException with Disp 127...\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27081","RelatedDescription":"Open issue \"Test failed: Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd\" (#27081)"},{"Id":"503784028","IsPullRequest":true,"CreatedAt":"2019-10-08T02:14:11","Actor":"jkotas","Number":"27080","RawContent":null,"Title":"[release/3.1] Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only (#27014)","State":"open","Body":"Description\r\nRegression introduce as side-effect of refactoring for local GC. The GC uses incorrectly uses current processor count instead of total processor count to determine whether it is safe to use special uniprocessor allocation helpers.\r\n\r\nCustomer impact\r\nChanging process affinity from 1 processor to more processor after the process starts will lead to intermittent crashes.\r\n\r\nRegression?\r\nYes (2.0 -> 2.1,3.0)\r\n\r\nRisk\r\nSmall. Undo the bad change.\r\n\r\n----\r\n\r\nUse maximum number of processors the process may run on to determine whether it is ok to use\r\nsingle-proc allocation helpers. It is not sufficient to depend on current process affinity since\r\nthat can change during the process lifetime.\r\n\r\nAlso, the single-proc allocation helpers work well on x86/x64 systems only because of they depend\r\non atomic non-interlocked increment instruction for good performance. Such instruction is available\r\non x86/x64 only. Disable them everywhere else.\r\n\r\nFixes #26990","Url":"https://github.com/dotnet/coreclr/pull/27080","RelatedDescription":"Open PR \"[release/3.1] Enable optimized single-proc allocation helpers for single-proc x86/x64 systems only (#27014)\" (#27080)"},{"Id":"503770706","IsPullRequest":true,"CreatedAt":"2019-10-08T01:17:43","Actor":"AndyAyersMS","Number":"27079","RawContent":null,"Title":"JIT: only tail recursive calls become loops","State":"open","Body":"Importer was a bit too liberal marking recursive calls as loop-inducing, at\r\nleast from the standpoint of enforcing backward-branch constraints. This would\r\nsometimes lead us to inline into cold paths like throws. Only tail-recursive\r\ncalls will turn into loops.\r\n\r\nAlso, future-proof the propagation of simple loopness the root compiler, in\r\ncase we ever decide to enable inlining at Tier0.","Url":"https://github.com/dotnet/coreclr/pull/27079","RelatedDescription":"Open PR \"JIT: only tail recursive calls become loops\" (#27079)"},{"Id":"503766205","IsPullRequest":true,"CreatedAt":"2019-10-08T00:59:07","Actor":"GrabYourPitchforks","Number":"27078","RawContent":null,"Title":"[WIP] Significantly improve performance of Utf8String / Utf8Span GetCharCount method","State":"open","Body":"This is marked __WIP__ because it's not yet fully tested, but I wanted to demonstrate what was possible due to the design of the `Utf8String` and `Utf8Span` types.\r\n\r\nSince these types are contracted to carry only well-formed UTF-8 data, we can make certain optimizations that wouldn't be allowable in more generalized APIs like `UTF8Encoding`. For example, when computing the number of `char`s that would result from a particular `Utf8String` or `Utf8Span` instance, we can suppress all error checking and go down highly optimized code paths.\r\n\r\nThe table below shows the comparison between the baseline `Encoding.UTF8.GetChars(ReadOnlySpan<byte>)` method and the `GetCharCount` methods introduced as part of this PR. The difference is substantial, especially for code paths which weren't previously vectorized.\r\n\r\n|            Method |      Corpus |       Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |------------ |-----------:|----------:|----------:|------:|--------:|------:|------:|------:|----------:|\r\n| **GetCharCount_Base** |    **11-0.txt** |  **41.112 us** | **0.7052 us** | **0.6596 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 |    11-0.txt |  10.576 us | 0.1957 us | 0.1831 us |  0.26 |    0.01 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** |      **11.txt** |   **3.574 us** | **0.0469 us** | **0.0439 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 |      11.txt |   3.446 us | 0.0598 us | 0.0530 us |  0.96 |    0.02 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **25249-0.txt** |  **74.032 us** | **1.3925 us** | **1.2344 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 25249-0.txt |  10.977 us | 0.2190 us | 0.2769 us |  0.15 |    0.00 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **30774-0.txt** |  **82.685 us** | **0.8982 us** | **0.8402 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 30774-0.txt |   6.412 us | 0.1154 us | 0.2080 us |  0.08 |    0.00 |     - |     - |     - |         - |\r\n|                   |             |            |           |           |       |         |       |       |       |           |\r\n| **GetCharCount_Base** | **39251-0.txt** | **136.402 us** | **2.4733 us** | **2.3136 us** |  **1.00** |    **0.00** |     **-** |     **-** |     **-** |         **-** |\r\n| GetCharCount_Exp1 | 39251-0.txt |   8.044 us | 0.1570 us | 0.1392 us |  0.06 |    0.00 |     - |     - |     - |         - |\r\n\r\nEven small non-English texts see notable improvement. For example, pulling the word \"αδαμάντινης\" from one sample text and running the benchmark just on that one word results in around twice the throughput.\r\n\r\n|            Method |      Mean |     Error |    StdDev | Ratio | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |----------:|----------:|----------:|------:|------:|------:|------:|----------:|\r\n| GetCharCount_Base | 18.665 ns | 0.3949 ns | 0.5135 ns |  1.00 |     - |     - |     - |         - |\r\n| GetCharCount_Exp1 |  8.796 ns | 0.1680 ns | 0.1489 ns |  0.48 |     - |     - |     - |         - |\r\n\r\nThis PR only concerns itself with counting chars, not with performing the actual transcoding (creating the `string` instance) step. But it's not a giant leap to imagine having an optimized transcoder that gives `Utf8String.ToString()` markedly better performance than `Encoding.UTF8.GetString(ReadOnlySpan<byte>)`.","Url":"https://github.com/dotnet/coreclr/pull/27078","RelatedDescription":"Open PR \"[WIP] Significantly improve performance of Utf8String / Utf8Span GetCharCount method\" (#27078)"},{"Id":"503628905","IsPullRequest":true,"CreatedAt":"2019-10-08T00:05:32","Actor":"AaronRobinsonMSFT","Number":"27069","RawContent":null,"Title":"Remove SQL callout cookie from JIT.","State":"closed","Body":"See https://github.com/dotnet/coreclr/pull/26458#issuecomment-527286662 for issue.\r\nSee https://github.com/dotnet/coreclr/pull/26458#issuecomment-539145589 for separate PR.\r\n\r\nWill post `jit-diff` results presently.\r\n\r\n/cc @jkotas @AndyAyersMS ","Url":"https://github.com/dotnet/coreclr/pull/27069","RelatedDescription":"Closed or merged PR \"Remove SQL callout cookie from JIT.\" (#27069)"},{"Id":"503738039","IsPullRequest":true,"CreatedAt":"2019-10-07T23:11:32","Actor":"jkoritzinsky","Number":"27077","RawContent":null,"Title":"WIP: simplify native component build","State":"open","Body":"- Move tool locator functions from gen-buildsys-* into a configuretools.cmake file that is included as part of the build.\r\n- Split the compiler discovery from from gen-buildsys-* into separate `find-gcc.sh` and `find-clang.sh` scripts.\r\n- Combine the gen-buildsys-* scripts into one script for Windows and one for non-Windows.\r\n- Use new options on the CMake executable to not depend on the current working directory.\r\n- Update our build scripts to use `cmake --build` instead of invoking the underlying build system (except for when `scan-build` is enabled since that doesn't work with `cmake --build`).","Url":"https://github.com/dotnet/coreclr/pull/27077","RelatedDescription":"Open PR \"WIP: simplify native component build\" (#27077)"},{"Id":"503670516","IsPullRequest":true,"CreatedAt":"2019-10-07T22:27:57","Actor":"trylek","Number":"27073","RawContent":null,"Title":"Revert \"Preparatory changes for implementing Crossgen2 pipeline\"","State":"closed","Body":"Reverts dotnet/coreclr#26908","Url":"https://github.com/dotnet/coreclr/pull/27073","RelatedDescription":"Closed or merged PR \"Revert \"Preparatory changes for implementing Crossgen2 pipeline\"\" (#27073)"},{"Id":"503708606","IsPullRequest":true,"CreatedAt":"2019-10-07T21:47:29","Actor":"davmason","Number":"27075","RawContent":null,"Title":"Respect profiler provided IL maps in the DAC (Port #25802 to 3.1)","State":"open","Body":"Bug Description:\r\nWhen we implemented tiered compilation in 2.1 there was a typo that made it so we would ignore any profiler provided IL maps. This means that if a profiler modifies a function debugging is broken.\r\n\r\nBug Impact:\r\nThis was found because a profiler vendor who maintains a unit testing framework specifically needs this functionality and not having it blocks their product from running on coreclr.\r\n\r\nPR Risks:\r\nNone","Url":"https://github.com/dotnet/coreclr/pull/27075","RelatedDescription":"Open PR \"Respect profiler provided IL maps in the DAC (Port #25802 to 3.1)\" (#27075)"},{"Id":"503692361","IsPullRequest":true,"CreatedAt":"2019-10-07T21:09:07","Actor":"VSadov","Number":"27074","RawContent":null,"Title":"[WIP] temporarily enable  Windows ARM64 to run tests, just for this PR","State":"open","Body":"Do not merge. Just testing infrastructure.","Url":"https://github.com/dotnet/coreclr/pull/27074","RelatedDescription":"Open PR \"[WIP] temporarily enable  Windows ARM64 to run tests, just for this PR\" (#27074)"},{"Id":"503719772","IsPullRequest":false,"CreatedAt":"2019-10-07T20:35:21","Actor":"delmyers","Number":"27076","RawContent":null,"Title":"Tpl TaskWaitBegin always has \"ContinueWithTask\" set to 0 for synchronous continuations in dotnet Core 3","State":"open","Body":"**Repro steps:**\r\n1) Execute the code below in a dotnet core app.\r\n2) Execute the code below in a .NET framework app.\r\n3) Compare the outputs.\r\n\r\n**Expected:**\r\nOutputs are the same\r\n\r\n**Actual:**\r\nOutputs are different\r\n\r\n.NET framework output:\r\n```\r\n!!Continuation '0' waiting for operation '2!!\r\nRunTask a\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '4' waiting for operation '3!!\r\n!!Continuation '5' waiting for operation '4!!\r\n!!Continuation '6' waiting for operation '5!!\r\n!!Continuation '7' waiting for operation '6!!\r\n!!Stopped waiting for '3' !!\r\nRunSubTask2 b\r\n!!Continuation '4' waiting for operation '8!!\r\n!!Stopped waiting for '8' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '4' !!\r\nRunSubTask b\r\n!!Continuation '5' waiting for operation '9!!\r\n!!Stopped waiting for '9' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '11' waiting for operation '10!!\r\n!!Continuation '5' waiting for operation '11!!\r\n!!Stopped waiting for '10' !!\r\nRunSubTask2 b\r\n!!Continuation '11' waiting for operation '12!!\r\n!!Stopped waiting for '12' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '11' !!\r\nRunSubTask d\r\n!!Stopped waiting for '5' !!\r\nRunTask b\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '14' waiting for operation '13!!\r\n!!Continuation '15' waiting for operation '14!!\r\n!!Continuation '6' waiting for operation '15!!\r\n!!Stopped waiting for '13' !!\r\nRunSubTask2 b\r\n!!Continuation '14' waiting for operation '16!!\r\n!!Stopped waiting for '16' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '14' !!\r\nRunSubTask b\r\n!!Continuation '15' waiting for operation '17!!\r\n!!Stopped waiting for '17' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '19' waiting for operation '18!!\r\n!!Continuation '15' waiting for operation '19!!\r\n!!Stopped waiting for '18' !!\r\nRunSubTask2 b\r\n!!Continuation '19' waiting for operation '20!!\r\n!!Stopped waiting for '20' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '19' !!\r\nRunSubTask d\r\n!!Stopped waiting for '15' !!\r\nRunTask c\r\n!!Stopped waiting for '6' !!\r\n!!Stopped waiting for '2' !!\r\n```\r\ndotnet core output.\r\n```\r\n!!Continuation '0' waiting for operation '2!!\r\nRunTask a\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '3!!\r\n!!Continuation '0' waiting for operation '4!!\r\n!!Continuation '0' waiting for operation '5!!\r\n!!Continuation '0' waiting for operation '6!!\r\n!!Stopped waiting for '3' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '8!!\r\n!!Stopped waiting for '8' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '4' !!\r\nRunSubTask b\r\n!!Continuation '0' waiting for operation '9!!\r\n!!Stopped waiting for '9' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '10!!\r\n!!Continuation '0' waiting for operation '11!!\r\n!!Stopped waiting for '10' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '12!!\r\n!!Stopped waiting for '12' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '11' !!\r\nRunSubTask d\r\n!!Stopped waiting for '5' !!\r\nRunTask b\r\nRunSubTask a\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '13!!\r\n!!Continuation '0' waiting for operation '14!!\r\n!!Continuation '0' waiting for operation '15!!\r\n!!Stopped waiting for '13' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '16!!\r\n!!Stopped waiting for '16' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '14' !!\r\nRunSubTask b\r\n!!Continuation '0' waiting for operation '17!!\r\n!!Stopped waiting for '17' !!\r\nRunSubTask c\r\nRunSubTask2 a\r\n!!Continuation '0' waiting for operation '18!!\r\n!!Continuation '0' waiting for operation '19!!\r\n!!Stopped waiting for '18' !!\r\nRunSubTask2 b\r\n!!Continuation '0' waiting for operation '20!!\r\n!!Stopped waiting for '20' !!\r\nRunSubTask2 c\r\n!!Stopped waiting for '19' !!\r\nRunSubTask d\r\n!!Stopped waiting for '15' !!\r\nRunTask c\r\n!!Stopped waiting for '6' !!\r\n!!Stopped waiting for '2' !!\r\n```\r\n\r\nThis seems to only occur for continuations that will run synchronously after the operations that they are awaiting. Here is the C# code that repros the issue\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TplEventListener\r\n{\r\n    class TplEventListener : EventListener\r\n    {\r\n        private enum TplEventIds : int\r\n        {\r\n            // A task wait has started on the current thread. Occurs\r\n            // when control is about to be transfered from an await, just before\r\n            // the return of the method.\r\n            TaskWaitBegin = 10,\r\n\r\n            // A task that was awaited on another thread is transferring its continuation\r\n            // to this thread.\r\n            TaskWaitEnd = 11,\r\n        }\r\n\r\n        private static readonly Guid TplGuid = new Guid(\"2e5dba47-a3d2-4d16-8ee0-6671ffdcd7b5\");\r\n\r\n        public TplEventListener()\r\n        {\r\n        }\r\n\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Guid == TplGuid)\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Verbose, (EventKeywords)(0x43 | 0x28));\r\n            }\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            if (eventData.EventSource.Guid == TplGuid)\r\n            {\r\n                switch ((TplEventIds)eventData.EventId)\r\n                {\r\n\r\n                    case TplEventIds.TaskWaitBegin:\r\n                        OnWaitTask((int)eventData.Payload[2], (int)eventData.Payload[3], (int)eventData.Payload[4]);\r\n                        break;\r\n                    case TplEventIds.TaskWaitEnd:\r\n                        OnContinueTask((int)eventData.Payload[1], (int)eventData.Payload[2]);\r\n                        break;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        private void OnWaitTask(int originatingTask, int taskId, int continuation)\r\n        {\r\n            Console.WriteLine($\"!!Continuation '{continuation}' waiting for operation '{originatingTask}!!\");\r\n        }\r\n\r\n        private void OnContinueTask(int originatingTask, int taskId)\r\n        {\r\n            Console.WriteLine($\"!!Stopped waiting for '{taskId}' !!\");\r\n        }\r\n    }\r\n\r\n    public class ProgramImpl\r\n    {\r\n\r\n        public void Run()\r\n        {\r\n            using (new TplEventListener())\r\n            {\r\n                Task.Run(async () => await RunTask()).Wait(); ;\r\n            }\r\n\r\n            Console.WriteLine(\"Press a key\");\r\n            Console.ReadKey();\r\n        }\r\n\r\n        public async Task RunTask()\r\n        {\r\n            Console.WriteLine(\"RunTask a\");\r\n            await RunSubTask();\r\n            Console.WriteLine(\"RunTask b\");\r\n            await RunSubTask();\r\n            Console.WriteLine(\"RunTask c\");\r\n        }\r\n\r\n        private async Task RunSubTask()\r\n        {\r\n            Console.WriteLine(\"RunSubTask a\");\r\n\r\n            await RunSubTask2();\r\n\r\n            Console.WriteLine(\"RunSubTask b\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask c\");\r\n\r\n            await RunSubTask2();\r\n\r\n            Console.WriteLine(\"RunSubTask d\");\r\n        }\r\n\r\n        private async Task RunSubTask2()\r\n        {\r\n            Console.WriteLine(\"RunSubTask2 a\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask2 b\");\r\n\r\n            await Task.Delay(50);\r\n\r\n            Console.WriteLine(\"RunSubTask2 c\");\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27076","RelatedDescription":"Open issue \"Tpl TaskWaitBegin always has \"ContinueWithTask\" set to 0 for synchronous continuations in dotnet Core 3\" (#27076)"},{"Id":"503669546","IsPullRequest":false,"CreatedAt":"2019-10-07T20:20:38","Actor":"sdmaclea","Number":"27072","RawContent":null,"Title":"PerfMap race in destroy","State":"open","Body":"@janvorli noticed a potential segfault if PerfMap::Destroy is called while another thread is logging a method. https://github.com/dotnet/coreclr/pull/26897#discussion_r331679824 \r\n\r\nFix it.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27072","RelatedDescription":"Open issue \"PerfMap race in destroy\" (#27072)"},{"Id":"503647012","IsPullRequest":false,"CreatedAt":"2019-10-07T19:33:36","Actor":"sdmaclea","Number":"27071","RawContent":null,"Title":"FEATURE_PERFMAP missing stubs?","State":"open","Body":"While testing #26897, there were a handful of symbols missing.\r\n\r\nIt is presumed we are missing `FEATURE_PERFMAP` instrumentation for a few stub types.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27071","RelatedDescription":"Open issue \"FEATURE_PERFMAP missing stubs?\" (#27071)"},{"Id":"503646438","IsPullRequest":false,"CreatedAt":"2019-10-07T19:32:24","Actor":"sandreenko","Number":"27070","RawContent":null,"Title":"Get rid of unoptimal moves in a popular ML pattern.","State":"open","Body":"ML.Net code has several places where we do `a = a * const_int;`, for example, `MurmurHash` has 6 `imul` instructions in the final asm for x64 https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/Hashing.cs#L118\r\nand in some cases, we do them with one extra mov:\r\n```\r\nIN0054: 000127 mov      eax, r15d\r\nIN0055: 00012A imul     eax, eax, 0xFFFFFFFFCC9E2D51 (2 instructions, 9 bytes)\r\n```\r\ninstead of \r\n```\r\nIN0055: 00012A imul     eax, r15d, 0xFFFFFFFFCC9E2D51 (1 instruction, 7 bytes)\r\n```\r\n\r\nthe non-optimal codegen happens when we inline `MurmurRound` and create a temp LCL_VAR for `hash` argument: `hash = MurmurRound(hash, (uint)len);`\r\n\r\nIR looks like:\r\n```\r\n***** BB02\r\nSTMT00068 (IL   ???...  ???)\r\n[000363] -A------R---              *  ASG       long  \r\n[000361] D------N----              +--*  LCL_VAR   long   V04 loc1         d:3\r\n[000362] ------------              \\--*  PHI       long  \r\n[000385] ------------ pred BB04       +--*  PHI_ARG   long   V04 loc1         u:5\r\n[000364] ------------ pred BB08       \\--*  PHI_ARG   long   V04 loc1         u:2 $100\r\n\r\n***** BB03\r\nSTMT00030 (IL 0x010...  ???)\r\n[000125] -A------R---              *  ASG       int    $285\r\n[000124] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:2 $285\r\n[000030] C-----------              \\--*  LCL_VAR   int    V04 loc1         u:3 $285\r\n\r\n***** BB03\r\nSTMT00020 (IL 0x010...  ???)\r\n[000082] -A------R---              *  ASG       int    $286\r\n[000081] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:3 $286\r\n[000079] ------------              \\--*  MUL       int    $286\r\n[000077] ------------                 +--*  LCL_VAR   int    V08 tmp1         u:2 (last use) $285\r\n[000078] ------------                 \\--*  CNS_INT   int    0xffffffffcc9e2d51 $49\r\n```\r\n\r\nand we want to get rid of `STMT00030`.\r\n\r\nI have thought about 3 possible places where it could be done:\r\n1. copy propagation https://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L131;\r\n2. lowering set contained for mul https://github.com/dotnet/coreclr/blob/0a00ee7fdfd113c8c2d47c85ed210de78cab4bdd/src/jit/lowerxarch.cpp#L1644;\r\n3. where we create a lclVar for the argument,  `Compiler::fgInlinePrependStatements`, https://github.com/dotnet/coreclr/blob/master/src/jit/flowgraph.cpp#L23243.\r\n\r\nI have tried all of them and did not get a good result,\r\n\r\n3: `fgInlinePrependStatements` already can replace an argument that was single used with the original tree, I was able to teach it to replace an argument that was originally a lcl_var with this lcl_var loads (instead of creating a new one), but only if the argument was not modified inside the inline method (not our case). \r\nThat means it supports cases like \r\n```\r\ninline myMethod(lclVar0);\r\nwhere myMethod(arg)\r\n{\r\n  multiple uses of arg, but no defs.\r\n}\r\n```\r\nwe can support defs if we now that `inline myMethod(lclVar0);` is the last use of lclVar0 (our case, because we have `hash = call(hash)`), but it happens before we generate live information, so we don't know that `call(lclVar0)` is the last use of `lclVar0`.\r\n\r\n2: `ContainCheckMul` set contained on `IsContainableMemoryOp`, so it doesn't support moves from one register to another, forcing it to set contained on `[000077]` gave me many asserts.\r\n\r\n1: `Compiler::optCopyProp` looks like the best candidate to handle this extra move, but currently, it doesn't work because:\r\n1.1 `[000361] D------N----              +--*  LCL_VAR   long   V04 loc1         d:3` doesn't have a VN pair, because it is a phi statement that is processed here:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/valuenum.cpp#L5885-L5890\r\nand there we don't set `VNPair` for the tree, so `copyProp` ends on:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L203-L207\r\n\r\nif we change that and assign a VNPair for `[000361] ` then we would consider it as a candidate for `[000081] D------N----              +--*  LCL_VAR   int    V08 tmp1         d:3 $286` replacement, but it would be declined, because `000361` is long and `000081` is int, so `copyProp` ends on:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L208-L211\r\n If we fix that we will still have different VN values so the copy propagation won't happen:\r\nhttps://github.com/dotnet/coreclr/blob/c8ad76dd8169238c085ee6e3f03d074aed4b76b2/src/jit/copyprop.cpp#L212-L215\r\n\r\nbut if somehow we skip these checks (manually in a debugger for example) and do the propagation, then we have asm that we want without any asserts in later stages.\r\n\r\nNote: the moves are cheap but there are many of them so I expect it to give us at least measurable code size improvement.","Url":"https://github.com/dotnet/coreclr/issues/27070","RelatedDescription":"Open issue \"Get rid of unoptimal moves in a popular ML pattern.\" (#27070)"},{"Id":"503628615","IsPullRequest":true,"CreatedAt":"2019-10-07T18:54:23","Actor":"SrivastavaAnubhav","Number":"27068","RawContent":null,"Title":"Preparation to introduce parallelism into CrossGen2","State":"open","Body":"**This change does not introduce any parallelism, that (and tests for determinism) will come in the next PR.**\r\n\r\n- Change dictionaries in ReadyToRunCodegenNodeFactory and ReadyToRunSymbolNodeFactory to NodeCaches (i.e. ConcurrentDictionary, at the moment)\r\n- Add structs to act as keys for the above NodeCaches (MethodFixupKey, DynamicHelperKey, ReadyToRunHelperKey)\r\n- Synchronize logger\r\n- Update some Dictionaries to ConcurrentDictionary","Url":"https://github.com/dotnet/coreclr/pull/27068","RelatedDescription":"Open PR \"Preparation to introduce parallelism into CrossGen2\" (#27068)"},{"Id":"503610239","IsPullRequest":true,"CreatedAt":"2019-10-07T18:20:04","Actor":"SrivastavaAnubhav","Number":"27067","RawContent":null,"Title":"Update data structures in preparation for JIT parallelism","State":"closed","Body":"**This change does not introduce any parallelism, that (and tests for determinism) will come in the next PR.**\r\n\r\n- Change dictionaries in ReadyToRunCodegenNodeFactory and ReadyToRunSymbolNodeFactory to NodeCaches (i.e. ConcurrentDictionary, at the moment)\r\n- Add structs to act as keys for the above NodeCaches (MethodFixupKey, DynamicHelperKey, ReadyToRunHelperKey)\r\n- Synchronize logger\r\n- Update some Dictionaries to ConcurrentDictionary","Url":"https://github.com/dotnet/coreclr/pull/27067","RelatedDescription":"Closed or merged PR \"Update data structures in preparation for JIT parallelism\" (#27067)"},{"Id":"503609405","IsPullRequest":false,"CreatedAt":"2019-10-07T18:13:24","Actor":"sdmaclea","Number":"27066","RawContent":null,"Title":"Extend Linux perf jitdump functionality","State":"open","Body":"#26842 Added basic support for generating the Linux `perf jitdump` format.  The initial implementation did not include support for adding:\r\n\r\n- Debug info - `JIT_CODE_DEBUG_INFO`. Provide assembly to line number info to improve annotation.\r\n- Unwinding info - `JIT_CODE_UNWINDING_INFO`. Adds dwarf unwind info. This allows/improves recording with the `--callgraph dwarf` option.\r\n\r\nConsider adding these records to improve value of `perf jitdump` support.\r\n\r\nImplementation Notes:\r\n\r\n- `JIT_CODE_DEBUG_INFO` & `JIT_CODE_UNWINDING_INFO` each apply to the next `JIT_CODE_LOAD` record. This means to properly support multithreading, the information needs to be provide when generating the `JIT_CODE_LOAD` record\r\n\r\n- The `FEATURE_GDBJIT` probably already needs similar info to construct the elf files it passes to gdb. `src/vm/gdbjit.cpp` may be instructive.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27066","RelatedDescription":"Open issue \"Extend Linux perf jitdump functionality\" (#27066)"},{"Id":"503583910","IsPullRequest":false,"CreatedAt":"2019-10-07T17:19:04","Actor":"sdmaclea","Number":"27065","RawContent":null,"Title":"Enable on demand Linux perf profiling","State":"open","Body":"Current usage of Linux `perf` requires defining the `COMPlus_PerfMapEnabled` before starting the application.\r\n\r\nThere are scenarios were it would be idael to be able to profile an application instance is performing poorly.\r\n\r\n@brianrob Suggested adding a mechanism to trigger this. Perhaps through the diagnostics port.\r\n\r\n/cc @brianrob @dotnet/dotnet-diag \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27065","RelatedDescription":"Open issue \"Enable on demand Linux perf profiling\" (#27065)"},{"Id":"503556499","IsPullRequest":false,"CreatedAt":"2019-10-07T16:21:17","Actor":"josalem","Number":"27064","RawContent":null,"Title":"Directly Encode Filter String Key-Value Pairs in Diagnostics IPC Protocol","State":"open","Body":"The `CollectTrace` commands in the Diagnostics IPC Protocol currently pass the entire filter string as a single length-prefixed string.  This should be modified so that it is sent as an array of key-value pairs of strings.  This more closely maps to the APIs used in the runtime for communicating these values into `EventSource`s, and moves the burden of encoding these values to outside tools, thus removing unneeded complexity in the runtime implementation.\r\n\r\nCompatibility Considerations:\r\nThis change would be the first major change in behavior for the protocol, so we will need to consider how we handle different client versions.  The 3.X versions of the runtime will be expecting a single string and any values containing `;` or `=` to be escaped with `\"`.  If we change this to consume a bag of key-value pairs, we will no longer require the escaping via `\"`.  This will require us to formalize our versioning strategy for the IPC protocol, as we will need to make sure a client gets the expected parsing behavior.  My expectation is that it will play out something like this:\r\n\r\n* a client sends a v2 protocol collect command\r\n  * if the target runtime is using a v2 protocol, continue\r\n  * if the target runtime is using a v1, send back a \"incorrect version\" response and fall back the v1 protocol on the client side.\r\n\r\ndotnet/diagnostics#539\r\n\r\nCC - @davidfowl @sywhang @noahfalk @tommcdon ","Url":"https://github.com/dotnet/coreclr/issues/27064","RelatedDescription":"Open issue \"Directly Encode Filter String Key-Value Pairs in Diagnostics IPC Protocol\" (#27064)"},{"Id":"503412023","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:31","Actor":"dotnet-maestro[bot]","Number":"27063","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27063","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#27063)"},{"Id":"503315159","IsPullRequest":true,"CreatedAt":"2019-10-07T08:53:00","Actor":"chrisnas","Number":"27062","RawContent":null,"Title":"Port fix done in pre 2.1 version to show managed type names in dump files instead of UNKNOWN","State":"open","Body":"Fix for https://github.com/dotnet/coreclr/issues/27061\r\nShould be back-ported to 2.1.x, 2.2.x and 3.0.x","Url":"https://github.com/dotnet/coreclr/pull/27062","RelatedDescription":"Open PR \"Port fix done in pre 2.1 version to show managed type names in dump files instead of UNKNOWN\" (#27062)"},{"Id":"503305138","IsPullRequest":false,"CreatedAt":"2019-10-07T08:31:44","Actor":"chrisnas","Number":"27061","RawContent":null,"Title":"Fix for https://github.com/dotnet/coreclr/issues/19762 has been lost in 2.1.x and 3.0.x","State":"open","Body":"It seems that https://github.com/dotnet/coreclr/pull/19761 has been \"lost\" in 2.1.x, 2.2.x and 3.0.x.\r\nA new PR for \"3.0 master\" is on its way and it should be back-ported or no managed type name will be visible (UNKNOWN) in the dumps generated by createdump.exe","Url":"https://github.com/dotnet/coreclr/issues/27061","RelatedDescription":"Open issue \"Fix for https://github.com/dotnet/coreclr/issues/19762 has been lost in 2.1.x and 3.0.x\" (#27061)"},{"Id":"503193358","IsPullRequest":true,"CreatedAt":"2019-10-07T01:32:42","Actor":"EgorBo","Number":"27060","RawContent":null,"Title":"Improve Math(F).FusedMultiplyAdd codegen","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/25829 (currently `Math(F).FusedMultiplyAdd` always emits `vfmadd213ss\\d` and `xor`s if there are negations)\r\n\r\nTest cases:\r\n```csharp\r\nstatic float Test1(float a, float b, float c) => MathF.FusedMultiplyAdd( a,  b,  c);\r\nstatic float Test2(float a, float b, float c) => MathF.FusedMultiplyAdd( a, -b,  c);\r\nstatic float Test3(float a, float b, float c) => MathF.FusedMultiplyAdd(-a,  b,  c);\r\nstatic float Test4(float a, float b, float c) => MathF.FusedMultiplyAdd(-a, -b,  c);\r\nstatic float Test5(float a, float b, float c) => MathF.FusedMultiplyAdd( a,  b, -c);\r\nstatic float Test6(float a, float b, float c) => MathF.FusedMultiplyAdd( a, -b, -c);\r\nstatic float Test7(float a, float b, float c) => MathF.FusedMultiplyAdd(-a,  b, -c);\r\nstatic float Test8(float a, float b, float c) => MathF.FusedMultiplyAdd(-a, -b, -c);\r\n```\r\n\r\nWas:\r\n```asm\r\n; Method FmaFTests:Test1(float,float,float):float\r\nG_M46841_IG01:\r\n       vzeroupper \r\nG_M46841_IG02:\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46841_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test2(float,float,float):float\r\nG_M46842_IG01:\r\n       vzeroupper \r\nG_M46842_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm1, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46842_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 21\r\n\r\n\r\n; Method FmaFTests:Test3(float,float,float):float\r\nG_M46843_IG01:\r\n       vzeroupper \r\nG_M46843_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm0, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46843_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 21\r\n\r\n\r\n; Method FmaFTests:Test4(float,float,float):float\r\nG_M46844_IG01:\r\n       vzeroupper \r\nG_M46844_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm0, xmm3\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm1, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46844_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 33\r\n\r\n\r\n; Method FmaFTests:Test5(float,float,float):float\r\nG_M46845_IG01:\r\n       vzeroupper \r\nG_M46845_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm2, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46845_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 21\r\n\r\n\r\n; Method FmaFTests:Test6(float,float,float):float\r\nG_M46846_IG01:\r\n       vzeroupper \r\nG_M46846_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm1, xmm3\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm2, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46846_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 33\r\n\r\n\r\n; Method FmaFTests:Test7(float,float,float):float\r\nG_M46847_IG01:\r\n       vzeroupper \r\nG_M46847_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm0, xmm3\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm2, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46847_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 33\r\n\r\n\r\n; Method FmaFTests:Test8(float,float,float):float\r\nG_M46832_IG01:\r\n       vzeroupper \r\nG_M46832_IG02:\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm0, xmm3\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm1, xmm3\r\n       vmovss   xmm3, dword ptr [reloc @RWD00]\r\n       vxorps   xmm2, xmm3\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46832_IG03:\r\n       ret      \r\nRWD00  dd\t80000000h\r\n; Total bytes of code: 45\r\n```\r\nNow:\r\n```asm\r\n; Method FmaFTests:Test1(float,float,float):float\r\nG_M46841_IG01:\r\n       vzeroupper \r\nG_M46841_IG02:\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46841_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test2(float,float,float):float\r\nG_M46842_IG01:\r\n       vzeroupper \r\nG_M46842_IG02:\r\n       vfmnadd213ss xmm0, xmm1, xmm2\r\nG_M46842_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test3(float,float,float):float\r\nG_M46843_IG01:\r\n       vzeroupper \r\nG_M46843_IG02:\r\n       vfmnadd213ss xmm0, xmm1, xmm2\r\nG_M46843_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test4(float,float,float):float\r\nG_M46844_IG01:\r\n       vzeroupper \r\nG_M46844_IG02:\r\n       vfmadd213ss xmm0, xmm1, xmm2\r\nG_M46844_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test5(float,float,float):float\r\nG_M46845_IG01:\r\n       vzeroupper \r\nG_M46845_IG02:\r\n       vfmsub213ss xmm0, xmm1, xmm2\r\nG_M46845_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test6(float,float,float):float\r\nG_M46846_IG01:\r\n       vzeroupper \r\nG_M46846_IG02:\r\n       vfmnsub213ss xmm0, xmm1, xmm2\r\nG_M46846_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test7(float,float,float):float\r\nG_M46847_IG01:\r\n       vzeroupper \r\nG_M46847_IG02:\r\n       vfmnsub213ss xmm0, xmm1, xmm2\r\nG_M46847_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n\r\n\r\n; Method FmaFTests:Test8(float,float,float):float\r\nG_M46832_IG01:\r\n       vzeroupper \r\nG_M46832_IG02:\r\n       vfmsub213ss xmm0, xmm1, xmm2\r\nG_M46832_IG03:\r\n       ret      \r\n; Total bytes of code: 9\r\n```\r\n[Diff](https://www.diffchecker.com/G8nkn2ur).\r\n/cc @tannergooding ","Url":"https://github.com/dotnet/coreclr/pull/27060","RelatedDescription":"Open PR \"Improve Math(F).FusedMultiplyAdd codegen\" (#27060)"},{"Id":"503098562","IsPullRequest":true,"CreatedAt":"2019-10-07T00:29:31","Actor":"trylek","Number":"27055","RawContent":null,"Title":"WIP: Skip build of managed test components for CoreFX tests","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27055","RelatedDescription":"Closed or merged PR \"WIP: Skip build of managed test components for CoreFX tests\" (#27055)"},{"Id":"503157159","IsPullRequest":true,"CreatedAt":"2019-10-07T00:24:29","Actor":"trylek","Number":"27058","RawContent":null,"Title":"WIP: Refactoring the ReadyToRun flag to allow reuse of managed artifacts","State":"closed","Body":"Today, R2R compilation of test MSIL using Crossgen happens during\r\ntest execution in Helix. This means that both the managed and\r\nnative artifacts for a given OS / architecture / config combo\r\nare identical for a R2R / non-R2R job. We can exploit this fact\r\nto further reduce the number of test build jobs.\r\n\r\nTo achieve this goal, I have paired up platform-matrix expansions\r\nfor test-job.yml treating with JIT-ted (non-R2R) vs. ReadyToRun\r\njobs for the same build configuration. What typically happens is\r\nthat R2R testing is a subset of the JIT testing (PR runs), both\r\ntest the same thing (internal.yml) or there's only R2R testing\r\nin a R2R-specific test pipeline (r2r.yml, r2r-extra.yml).\r\n\r\nFor these expansions, I have modified test-job so that, instead\r\nof the readyToRun flag it accepts subsets of the entire build\r\nset to use for R2R / non-R2R execution. (To simplify the scripts\r\na special combo value 'all' is accepted as meaning all platforms\r\nin the expansion.)\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/27058","RelatedDescription":"Closed or merged PR \"WIP: Refactoring the ReadyToRun flag to allow reuse of managed artifacts\" (#27058)"},{"Id":"503173543","IsPullRequest":true,"CreatedAt":"2019-10-06T23:01:21","Actor":"trylek","Number":"27059","RawContent":null,"Title":"CoreCLR pipeline optimizations","State":"open","Body":"Today, R2R compilation of test MSIL using Crossgen happens during\r\ntest execution in Helix. This means that the managed artifacts for a\r\ngiven OS / architecture / config combo are identical for a R2R /\r\nnon-R2R job. Additionally, we need very few artifacts for running\r\nthe CoreFX tests. In practice it turns out we only need to build the\r\ntest host. We can exploit these facts to further reduce the number\r\nof test build jobs in CoreCLR pipelines.\r\n\r\nI have used two strategies to achieve that goal. For R2R runs, I have\r\npaired up platform-matrix expansions for test-job.yml handling\r\nJIT-ted (non-R2R) vs. ReadyToRun jobs for the same build\r\nconfiguration. What typically happens is that R2R testing is a\r\nsubset of the JIT testing (PR runs), both test the same thing\r\n(internal.yml) or there's only R2R testing in a R2R-specific test\r\npipeline (r2r.yml, r2r-extra.yml).\r\n\r\nIn the new paired-up expansions, test-job newly accepts two\r\nsequences \"jitPlatforms\" and \"r2rPlatforms\" representing the\r\nsubsets of the complete matrix to run in the respective modes.\r\nI needed to conjure a bit of magic about declaring the parameters\r\nas strings in order to be able to check them for emptiness but\r\nheck that's the beauty of Azure Pipelines.\r\n\r\nFor CoreFX testing, I have modified the pipeline so that the run\r\njobs no longer need the managed build jobs and just build the\r\ntest host using the appropriate command-line argument. We\r\ncan also skip the magic around native test artifacts. I suspect there\r\nare additional wins to be had for a fervent seeker.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/27059","RelatedDescription":"Open PR \"CoreCLR pipeline optimizations\" (#27059)"},{"Id":"503154207","IsPullRequest":false,"CreatedAt":"2019-10-06T20:16:22","Actor":"grahamehorner","Number":"27057","RawContent":null,"Title":"Unable to retrieve types from a referenced Assembly","State":"open","Body":"I'm attempting to use reflection to identify classes marked with a given attribute in an assembly that is referenced but no type in the assembly seems to show up unless a type in the assembly is first created/used? can someone please advise how I may find classes with a given attribute in a referenced assembly without first used a type in the same assembly?","Url":"https://github.com/dotnet/coreclr/issues/27057","RelatedDescription":"Open issue \"Unable to retrieve types from a referenced Assembly\" (#27057)"},{"Id":"503137225","IsPullRequest":true,"CreatedAt":"2019-10-06T18:03:29","Actor":"EgorBo","Number":"27056","RawContent":null,"Title":"Optimize ToString() for byte, ushort, uint and ulong","State":"open","Body":"E.g. `byte.ToString()` currently calls `Number.FormatUInt32(m_value, null, null);` method which for `ToString()` just [redirects](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Number.Formatting.cs#L783-L786) it to [UInt32ToDecStr](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Number.Formatting.cs#L1228-L1260) so it's better to call it directly.\r\nSame for `ushort`, `uint` and `ulong`.\r\n\r\nExample:\r\n```csharp\r\nstatic string Test(byte b) => b.ToString();\r\n```\r\nWas:\r\n```asm\r\nG_M64984_IG01:\r\n       sub      rsp, 56\r\n       xor      rax, rax\r\n       mov      qword ptr [rsp+28H], rax\r\n       mov      dword ptr [rsp+40H], ecx\r\nG_M64984_IG02:\r\n       movzx    rcx, byte  ptr [rsp+40H]\r\n       xor      rdx, rdx\r\n       xor      r8d, r8d\r\n       lea      rax, bword ptr [rsp+28H]\r\n       mov      bword ptr [rax], rdx\r\n       mov      dword ptr [rax+8], r8d\r\n       lea      rdx, bword ptr [rsp+28H]\r\n       xor      r8, r8\r\n       call     System.Number:FormatUInt32(int,struct,ref):ref\r\n       nop      \r\nG_M64984_IG03:\r\n       add      rsp, 56\r\n       ret      \r\n; Total bytes of code: 56\r\n```\r\nNow:\r\n```asm\r\nG_M64982_IG01:\r\n       sub      rsp, 40\r\n       mov      dword ptr [rsp+30H], ecx\r\nG_M64982_IG02:\r\n       movzx    rcx, byte  ptr [rsp+30H]\r\n       mov      edx, -1\r\n       call     System.Number:UInt32ToDecStr(int,int):ref\r\n       nop      \r\nG_M64982_IG03:\r\n       add      rsp, 40\r\n       ret      \r\n; Total bytes of code: 29\r\n```\r\n(because passing `null` to Span/ReadOnlySpan argument is not cheap)\r\n\r\n### What else can be improved:\r\n1) [UInt32ToDecStr](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Number.Formatting.cs#L1228-L1260) looks a bit overkill for `byte` (which is just a 1,2 or 3 chars string)\r\n2) I'd add a branchless internal `Math.MaxFast` for various BCL scenarious like [this](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Number.Formatting.cs#L1230).\r\n3) `<const>.ToString()` can be replaced with string literals in JIT for positive constants (I have a prototype) \r\n4) [Redundant](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Number.Formatting.cs#L1235) bounds check","Url":"https://github.com/dotnet/coreclr/pull/27056","RelatedDescription":"Open PR \"Optimize ToString() for byte, ushort, uint and ulong\" (#27056)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"503676522","IsPullRequest":true,"CreatedAt":"2019-10-08T01:27:23","Actor":"dotnet-maestro[bot]","Number":"12843","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.7\r\n- **Date Produced**: 10/7/2019 11:48 PM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12843","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12843)"},{"Id":"503631892","IsPullRequest":false,"CreatedAt":"2019-10-07T21:12:39","Actor":"bender2k14","Number":"12842","RawContent":null,"Title":"dotnet test has exit code 0 despite BadImageFormatException","State":"closed","Body":"## Steps to reproduce and Environment data\r\nWhen using the [pool](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pool) with VM image label [`windows-2019`](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent), the relevant part of the `dotnet --info` output is\r\n```\r\nRID: win10-x64\r\n```\r\n\r\nTherefore, it is no surprise that executing\r\n```\r\ndotnet test Tests\\Tests.fsproj --runtime win-x86\r\n```\r\ndoesn't work since the [RID](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)s are incompatible.  Specifically, the relevant part of the logs when \"Enable system diagnostics\" is checked is\r\n```\r\nTest run for D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:02.06] Exception discovering tests from Tests: System.BadImageFormatException: Could not load file or assembly 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\nFile name: 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   at // ... stack trace omitted\r\n\r\nNo test is available in D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.\r\nResults File: D:\\a\\_temp\\VssAdministrator_fv-az604_2019-10-07_18_48_39.trx\r\n\r\n##[debug]Exit code 0 received from tool 'C:\\Program Files\\dotnet\\dotnet.exe'\r\n```\r\n\r\n## Expected  behavior\r\nI expected `dotnet test` to return a nonzero exit code since it encountered a `BadImageFormatException`.\r\n\r\n## Actual behavior\r\n`dotnet test` to returned an exit code of 0 despite encountering a `BadImageFormatException`. ","Url":"https://github.com/dotnet/cli/issues/12842","RelatedDescription":"Closed issue \"dotnet test has exit code 0 despite BadImageFormatException\" (#12842)"},{"Id":"503595856","IsPullRequest":true,"CreatedAt":"2019-10-07T18:50:41","Actor":"dotnet-maestro[bot]","Number":"12841","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.3\r\n- **Date Produced**: 10/7/2019 5:00 PM\r\n- **Commit**: f88738a6c69ffcfad8784c4cd7080efb99d474a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12841","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12841)"},{"Id":"502929797","IsPullRequest":false,"CreatedAt":"2019-10-07T07:05:22","Actor":"MarcoRossignoli","Number":"12821","RawContent":null,"Title":"Strange Included value passed to `dotnet test`","State":"closed","Body":"Hi I'm Marco from Coverlet.\r\n\r\nI've a question about the verb test.\r\nIn coverlet we allow to users to pass some parameters to specify an \"include\" filter(globbing).\r\nSometime for some project I found that also if user doesn't pass anything I find some strange filter, for instance:\r\n```\r\nF:\\git\\coverletissues\\Xunit.StaFact\\src (HEAD detached at 6d1a5e6 -> origin)\r\nλ dotnet test --filter \"TestCategory!=FailureExpected\" -v:m /p:CollectCoverage=true\r\n```\r\nI get this \"Include\" filter(the switch to pass to coverlet include is for instance `/p:Include:[asm*]*` https://github.com/tonerdo/coverlet/blob/master/src/coverlet.msbuild.tasks/InstrumentationTask.cs#L33)\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.24.28117\\ATLMFC\\include;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.24.28117\\include;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\include\\um;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\shared;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\um;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\winrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\cppwinrt\r\n```\r\nMy suspect is that `Include` is already used by some build part so it's an unhappy name choice, can you confirm?\r\n\r\ncc: @tonerdo @petli","Url":"https://github.com/dotnet/cli/issues/12821","RelatedDescription":"Closed issue \"Strange Included value passed to `dotnet test`\" (#12821)"},{"Id":"503182939","IsPullRequest":true,"CreatedAt":"2019-10-07T01:29:43","Actor":"dotnet-maestro[bot]","Number":"12840","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191006.2\r\n- **Date Produced**: 10/6/2019 11:40 PM\r\n- **Commit**: 1def7ea25d56d3c0cd8abdca2edd28346c9e688e\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19506.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12840","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12840)"},{"Id":"503164606","IsPullRequest":true,"CreatedAt":"2019-10-06T22:15:28","Actor":"dotnet-maestro[bot]","Number":"12839","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.5\r\n- **Date Produced**: 10/6/2019 8:31 PM\r\n- **Commit**: 3fccad76fc65967dc194983284c3a43de37e95a0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12839","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12839)"},{"Id":"503143380","IsPullRequest":true,"CreatedAt":"2019-10-06T19:25:43","Actor":"dotnet-maestro[bot]","Number":"12838","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.3\r\n- **Date Produced**: 10/6/2019 5:17 PM\r\n- **Commit**: 7f265162d279b089aea37cbcd93ccf50c29c42b9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12838","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12838)"},{"Id":"503141994","IsPullRequest":true,"CreatedAt":"2019-10-06T19:10:26","Actor":"dotnet-maestro[bot]","Number":"12837","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 5:58 PM\r\n- **Commit**: f1d22fdf7095bf5a9ed5bec469109ee65d0fd8ca\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12837","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12837)"},{"Id":"503139315","IsPullRequest":true,"CreatedAt":"2019-10-06T18:50:16","Actor":"dotnet-maestro[bot]","Number":"12836","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/6/2019 5:03 PM\r\n- **Commit**: 7f265162d279b089aea37cbcd93ccf50c29c42b9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12836","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12836)"},{"Id":"503122489","IsPullRequest":true,"CreatedAt":"2019-10-06T16:45:28","Actor":"dotnet-maestro[bot]","Number":"12835","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.2\r\n- **Date Produced**: 10/6/2019 2:50 PM\r\n- **Commit**: 245060c4e2989b831f532facbe88ead3eaae879f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19506.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19506.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12835","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12835)"},{"Id":"503116902","IsPullRequest":true,"CreatedAt":"2019-10-06T16:00:30","Actor":"dotnet-maestro[bot]","Number":"12834","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 3:15 PM\r\n- **Commit**: 357126710492d620198a60ee340ebeca9070f133\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19506.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12834","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12834)"},{"Id":"503097567","IsPullRequest":true,"CreatedAt":"2019-10-06T13:30:27","Actor":"dotnet-maestro[bot]","Number":"12833","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19506.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12833","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12833)"},{"Id":"503063486","IsPullRequest":true,"CreatedAt":"2019-10-06T07:55:46","Actor":"dotnet-maestro[bot]","Number":"12832","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.3\r\n- **Date Produced**: 10/6/2019 7:05 AM\r\n- **Commit**: c3d91f04768a270fb742169e2db08664226f2c22\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.3\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12832","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12832)"},{"Id":"503054801","IsPullRequest":true,"CreatedAt":"2019-10-06T06:05:30","Actor":"dotnet-maestro[bot]","Number":"12831","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.6\r\n- **Date Produced**: 10/6/2019 4:22 AM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12831","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12831)"},{"Id":"503047096","IsPullRequest":true,"CreatedAt":"2019-10-06T04:07:53","Actor":"dotnet-maestro[bot]","Number":"12830","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19505.5\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12830","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12830)"},{"Id":"503046369","IsPullRequest":true,"CreatedAt":"2019-10-06T03:55:28","Actor":"dotnet-maestro[bot]","Number":"12829","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.2\r\n- **Date Produced**: 10/6/2019 3:12 AM\r\n- **Commit**: c5caf9406ccecd70bf6ebfe3d8bbeb7452df1995\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12829","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12829)"},{"Id":"503038467","IsPullRequest":true,"CreatedAt":"2019-10-06T02:04:43","Actor":"dotnet-maestro[bot]","Number":"12828","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19505.4\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12828","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12828)"},{"Id":"503002754","IsPullRequest":true,"CreatedAt":"2019-10-05T19:40:28","Actor":"dotnet-maestro[bot]","Number":"12827","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.3\r\n- **Date Produced**: 10/5/2019 5:57 PM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12827","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12827)"},{"Id":"502994320","IsPullRequest":true,"CreatedAt":"2019-10-05T18:20:28","Actor":"dotnet-maestro[bot]","Number":"12825","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.2\r\n- **Date Produced**: 10/5/2019 4:29 PM\r\n- **Commit**: 575362a5705c749dce2eb4797f9d23fe4731884a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12825","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12825)"},{"Id":"502994349","IsPullRequest":true,"CreatedAt":"2019-10-05T18:20:02","Actor":"dotnet-maestro[bot]","Number":"12826","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 5:03 PM\r\n- **Commit**: 3c62e9e751be0f27eff5e686d2e41e0ad41277c9\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19505.1\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12826","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12826)"},{"Id":"502982004","IsPullRequest":true,"CreatedAt":"2019-10-05T16:45:28","Actor":"dotnet-maestro[bot]","Number":"12824","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 2:52 PM\r\n- **Commit**: 97743697c47a50a8eec8669c24e2ae9ce78fefc8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19505.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19505.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12824","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12824)"},{"Id":"502969742","IsPullRequest":true,"CreatedAt":"2019-10-05T15:05:01","Actor":"dotnet-maestro[bot]","Number":"12823","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 2:11 PM\r\n- **Commit**: fc2c6f61b9bae9eb07e80ca11f9d12e20aa02bd3\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19505.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12823","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12823)"},{"Id":"502935188","IsPullRequest":true,"CreatedAt":"2019-10-05T09:08:41","Actor":"dotnet-maestro[bot]","Number":"12822","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.20\r\n- **Date Produced**: 10/5/2019 7:26 AM\r\n- **Commit**: 45f675b1acc38eaea182bf6ef284d1b13141d134\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19504.20\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19504.20\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview1.19504.10 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12822","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12822)"},{"Id":"502928917","IsPullRequest":true,"CreatedAt":"2019-10-05T08:26:17","Actor":"dotnet-maestro[bot]","Number":"12820","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 7:09 AM\r\n- **Commit**: cd1c25c76c39d54a5e9040cc4ed193b39f9a161e\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19504.9\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12820","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12820)"},{"Id":"502921522","IsPullRequest":true,"CreatedAt":"2019-10-05T07:22:11","Actor":"dotnet-maestro[bot]","Number":"12819","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.18\r\n- **Date Produced**: 10/5/2019 4:50 AM\r\n- **Commit**: 27610507ac04a478c225054699afb20e86cc7881\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.18\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19504.18\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19504.18\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19504.18\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19504.18\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview1.19504.8 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12819","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12819)"},{"Id":"502914624","IsPullRequest":true,"CreatedAt":"2019-10-05T05:32:57","Actor":"dotnet-maestro[bot]","Number":"12817","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191004.8\r\n- **Date Produced**: 10/5/2019 4:09 AM\r\n- **Commit**: 683f7f7102131ec623409c9fae4c17bcc261d986\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19504.8\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12817","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12817)"},{"Id":"502916432","IsPullRequest":true,"CreatedAt":"2019-10-05T05:25:25","Actor":"dotnet-maestro[bot]","Number":"12818","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.16\r\n- **Date Produced**: 10/5/2019 3:32 AM\r\n- **Commit**: 96ed7d1ffb1a3662751bc650a8d6bd09511f11e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19504.16\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19504.16\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19504.16\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19504.16\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19504.16\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12818","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12818)"},{"Id":"502911801","IsPullRequest":true,"CreatedAt":"2019-10-05T04:27:34","Actor":"dotnet-maestro[bot]","Number":"12816","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.15\r\n- **Date Produced**: 10/5/2019 2:41 AM\r\n- **Commit**: ea8a25eb0679dc4d940623688189885086286adc\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.15\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19504.15\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19504.15\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19504.15\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19504.15\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview1.19504.6 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12816","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12816)"},{"Id":"502905185","IsPullRequest":true,"CreatedAt":"2019-10-05T03:15:05","Actor":"dotnet-maestro[bot]","Number":"12815","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:35 AM\r\n- **Commit**: a92f8ffa177a5f4d1189f211049f094fe09e76c5\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19504.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12815","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12815)"},{"Id":"502902943","IsPullRequest":true,"CreatedAt":"2019-10-05T02:45:29","Actor":"dotnet-maestro[bot]","Number":"12814","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.14\r\n- **Date Produced**: 10/5/2019 12:31 AM\r\n- **Commit**: b903a6e815dbcec7acfeef39db1e9189fef7ed69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19504.14\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19504.14\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19504.14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19504.14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19504.14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12814","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12814)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"503415647","IsPullRequest":true,"CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Number":"1596","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1596)"},{"Id":"503407217","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1595)"},{"Id":"503093090","IsPullRequest":true,"CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Number":"1594","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1594)"},{"Id":"503091277","IsPullRequest":true,"CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1593","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1593)"},{"Id":"502956371","IsPullRequest":true,"CreatedAt":"2019-10-05T12:29:24","Actor":"dotnet-maestro[bot]","Number":"1592","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 3:05 AM\r\n- **Commit**: 99ea2b5aebf7361a5baa638c978cb6214fca5217\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19504.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1592)"},{"Id":"502954708","IsPullRequest":true,"CreatedAt":"2019-10-05T12:06:58","Actor":"dotnet-maestro[bot]","Number":"1591","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:24 AM\r\n- **Commit**: 380eaaf663b425943754a15b29e814df0bb1b078\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19504.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1591","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1591)"},{"Id":"502952894","IsPullRequest":false,"CreatedAt":"2019-10-05T11:42:25","Actor":"axanth","Number":"1590","RawContent":null,"Title":"Any specific date about support of Universal Windows Platform in .net Standard 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1590","RelatedDescription":"Open issue \"Any specific date about support of Universal Windows Platform in .net Standard 2.1?\" (#1590)"},{"Id":"502601357","IsPullRequest":true,"CreatedAt":"2019-10-04T12:26:51","Actor":"dotnet-maestro[bot]","Number":"1589","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191003.5\r\n- **Date Produced**: 10/4/2019 1:12 AM\r\n- **Commit**: eff9fbf446468ca411bf5e0475916f316eea7223\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19503.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1589","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1589)"},{"Id":"502231307","IsPullRequest":false,"CreatedAt":"2019-10-03T18:40:35","Actor":"lucbueno54","Number":"1588","RawContent":null,"Title":"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation","State":"open","Body":"Create references to two net462 projects in NETStandard and enable automatic nuget generation (GeneratePackageOnBuild = true). \r\n\r\nAn important detail that is AssemblyName is different from the csproj file. \r\n\r\nExample: \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>Nuget.NetStandardClassLibrary</id>\r\n    <version>19.9.0</version>\r\n    <authors>Nuget.NetStandardClassLibrary</authors>\r\n    <owners>Nuget.NetStandardClassLibrary</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"nuget.AnotherStandardClassLibrary\" version=\"198.0.0\" exclude=\"Build,Analyzers\" />    <= NETStandard\r\n        <dependency id=\"FrameworkClassLibrary\" version=\"1.0.0\" exclude=\"Build,Analyzers\" /> <= net462 \r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\n\r\n\r\nhttps://github.com/lucbueno54/dotnetStandardReferencesTest ","Url":"https://github.com/dotnet/standard/issues/1588","RelatedDescription":"Open issue \"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation\" (#1588)"},{"Id":"502031073","IsPullRequest":true,"CreatedAt":"2019-10-03T12:29:49","Actor":"dotnet-maestro[bot]","Number":"1587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191002.6\r\n- **Date Produced**: 10/3/2019 2:33 AM\r\n- **Commit**: c8c2917540a568869ba761afa6e4dba6edeb433b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19502.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1587)"},{"Id":"502022842","IsPullRequest":true,"CreatedAt":"2019-10-03T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1586","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191002.11\r\n- **Date Produced**: 10/2/2019 11:34 PM\r\n- **Commit**: da75c6547c64a91eb8a9cecf8c503331c2cc394a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19502.11\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1586","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1586)"},{"Id":"501454733","IsPullRequest":true,"CreatedAt":"2019-10-02T12:30:46","Actor":"dotnet-maestro[bot]","Number":"1585","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1585)"},{"Id":"501445824","IsPullRequest":true,"CreatedAt":"2019-10-02T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1584)"},{"Id":"500858343","IsPullRequest":true,"CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Number":"1583","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1583)"},{"Id":"500849552","IsPullRequest":true,"CreatedAt":"2019-10-01T12:11:41","Actor":"dotnet-maestro[bot]","Number":"1582","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1582","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1582)"},{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"},{"Id":"499762811","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Number":"1579","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1579)"},{"Id":"499412533","IsPullRequest":true,"CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Number":"1578","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1578)"},{"Id":"499405308","IsPullRequest":true,"CreatedAt":"2019-09-27T12:11:32","Actor":"dotnet-maestro[bot]","Number":"1577","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1577)"},{"Id":"498397654","IsPullRequest":true,"CreatedAt":"2019-09-26T15:09:19","Actor":"dotnet-maestro[bot]","Number":"1574","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1574","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1574)"},{"Id":"498433598","IsPullRequest":true,"CreatedAt":"2019-09-26T15:08:53","Actor":"mmitche","Number":"1575","RawContent":null,"Title":"Update to non prerelease","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1575","RelatedDescription":"Closed or merged PR \"Update to non prerelease\" (#1575)"},{"Id":"498844948","IsPullRequest":true,"CreatedAt":"2019-09-26T12:22:45","Actor":"dotnet-maestro[bot]","Number":"1576","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 9:11 AM\r\n- **Commit**: 0a1850cc370986c7348e09bcd1c1adcf522d6db3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1576)"},{"Id":"498249739","IsPullRequest":true,"CreatedAt":"2019-09-25T12:30:34","Actor":"dotnet-maestro[bot]","Number":"1573","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 7:06 PM\r\n- **Commit**: da147ece700c2502b91e57d99213feadcfb9c1f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19474.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1573)"},{"Id":"498239365","IsPullRequest":true,"CreatedAt":"2019-09-25T12:10:59","Actor":"dotnet-maestro[bot]","Number":"1572","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190923.5\r\n- **Date Produced**: 9/24/2019 4:15 AM\r\n- **Commit**: ef4b288de587f0b86e65b3950e9095f714808ade\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19473.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1572","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1572)"},{"Id":"498151562","IsPullRequest":false,"CreatedAt":"2019-09-25T09:07:45","Actor":"NicolasDorier","Number":"1571","RawContent":null,"Title":"Github does not render the diff files of netstandard2.1 correctly","State":"open","Body":"In the [diff for netstandard2.1](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.1_diff.md), Github is showing `(Sorry about that, but we can’t show files that are this big right now.)` instead of a nicely formatted diff.\r\n\r\nProposed workaround:\r\n\r\n* Ping the github team to increase the limit\r\n* Send the dotnet team in holiday during the development of netstandard2.2 so the diff file get smaller.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1571","RelatedDescription":"Open issue \"Github does not render the diff files of netstandard2.1 correctly\" (#1571)"},{"Id":"497649559","IsPullRequest":true,"CreatedAt":"2019-09-24T12:24:38","Actor":"dotnet-maestro[bot]","Number":"1570","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190923.4\r\n- **Date Produced**: 9/23/2019 10:04 PM\r\n- **Commit**: 485441f79ead7878af206a6af61a300e1458616a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19473.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1570)"},{"Id":"497622081","IsPullRequest":false,"CreatedAt":"2019-09-24T11:15:45","Actor":"GammaFour","Number":"1569","RawContent":null,"Title":"Massive problems with no support of UWP in .NET Standard 2.1","State":"open","Body":"How can you release .NET Standard 2.1 and not support UWP? I made the mistake of upgrading my NuGet packages yesterday to the recommended versions and I've been untangling this mess ever since. My server code wants to be .NET Standard 2.1. So I go through and retarget all my common libraries only to find that I've screwed the pooch on my UWP client. This is seriously a big miss.","Url":"https://github.com/dotnet/standard/issues/1569","RelatedDescription":"Open issue \"Massive problems with no support of UWP in .NET Standard 2.1\" (#1569)"},{"Id":"497566465","IsPullRequest":false,"CreatedAt":"2019-09-24T09:24:09","Actor":"nikolay-dimitrov","Number":"1568","RawContent":null,"Title":"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found","State":"open","Body":"I have custom method over DbContext(EF 6.3) with class library targeting .NET Framework 4.7.1\r\nIm trying to migrate to .NET Standart 2.1 but into the both cases i got this error when im calling the method above from any places(the example is calling from .NET Standart 2.1 library with installed EF 6.3)\r\n\r\n    public static async Task<IList<T>> SqlQueryAsync<T>(this DbContext db, CommandType type, string sql, List<SqlParameter> parameters) where T : new()\r\n        {\r\n            var conn = db.Database.Connection.State;\r\n\r\n            if (conn == ConnectionState.Closed)\r\n                await db.Database.Connection.OpenAsync();\r\n            using (var command =  db.Database.Connection.CreateCommand())\r\n            {\r\n                command.CommandText = sql;\r\n                command.CommandType = type;\r\n                if (parameters != null && parameters.Count() > 0)\r\n                {\r\n                    foreach (var item in parameters)\r\n                    {\r\n                        DbParameter p = command.CreateParameter();\r\n                        p.DbType = item.DbType;\r\n                        p.ParameterName = item.ParameterName;\r\n                        p.Value = item.Value;\r\n                        command.Parameters.Add(p);\r\n                    }\r\n                }\r\n                var propts = typeof(T).GetProperties();\r\n                var rtnList = new List<T>();\r\n                T model;\r\n                object val;\r\n                using (var reader = await command.ExecuteReaderAsync())\r\n                {\r\n                    while (await reader.ReadAsync())\r\n                    {\r\n                        model = new T();\r\n                        foreach (var l in propts)\r\n                        {\r\n\r\n                            if (Enumerable.Range(0, reader.FieldCount).Any(i => string.Equals(reader.GetName(i), l.Name, StringComparison.OrdinalIgnoreCase)))\r\n                            {\r\n                                val = reader[l.Name];\r\n                                if (val == DBNull.Value)\r\n                                    l.SetValue(model, null);\r\n                                else\r\n                                    l.SetValue(model, val);\r\n                            }\r\n                            \r\n                        }\r\n                        rtnList.Add(model);\r\n                    }\r\n                }\r\n                return rtnList;\r\n            }\r\n        }\r\n\r\nI found simular issue https://github.com/dotnet/corefx/issues/27247# but the proposals there do not resolve the error","Url":"https://github.com/dotnet/standard/issues/1568","RelatedDescription":"Open issue \"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found\" (#1568)"},{"Id":"497516549","IsPullRequest":false,"CreatedAt":"2019-09-24T07:46:11","Actor":"YZahringer","Number":"1567","RawContent":null,"Title":".NET Standard 2.1 support on Universal Windows Platform","State":"open","Body":"Regarding the support of `.NET Standard 2.1` in UWP projects, it is written that it will be supported in the upcoming version.\r\n\r\nThis means that there will be the same problem as with the `.NET Standard 2.0` version and that we will not be able to target older versions of Windows 10? `.NET Standard 2.0` requires as min target version Windows 10 Fall Creators Update `16299`.\r\n\r\nThis is a big problem for my projects and backward compatibility. I can't remove support for older versions of Windows 10, especially `LTSC` editions. This means that my projects are blocked in `.NET Standard 1.4` and it also blocks any dependency updates:\r\n- `Xamarin.Forms 2.5` because version `>=3.0` requires `.NET Standard 2.0`\r\n- `Microsoft.EntityFrameworkCore 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n- `.NET Core 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n\r\nI can't ask my users to have the latest version installed, especially in business applications and Windows `LTSC` editions. I have to wait several years before removing the support of an old version.\r\n\r\nIs it planned to continue support the min target version `16299` of UWP projects with `.NET Standard 2.1`? I understand the constraints, but with Xcode I can still min target `iOS 7` and with Android I can still min target `4.4 KitKat`, still with the latest version of frameworks. And with Windows I can only support the latest version? That doesn't make much sense.","Url":"https://github.com/dotnet/standard/issues/1567","RelatedDescription":"Open issue \".NET Standard 2.1 support on Universal Windows Platform\" (#1567)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"503743447","IsPullRequest":true,"CreatedAt":"2019-10-08T05:16:19","Actor":"jkotas","Number":"41624","RawContent":null,"Title":"Fix copy&paste globalization test bug","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41624","RelatedDescription":"Closed or merged PR \"Fix copy&paste globalization test bug\" (#41624)"},{"Id":"503762801","IsPullRequest":true,"CreatedAt":"2019-10-08T02:39:29","Actor":"ahsonkhan","Number":"41626","RawContent":null,"Title":"Update ReportGenerator global repo tool version to 4.3.0","State":"closed","Body":"Contains fixes such as https://github.com/danielpalme/ReportGenerator/issues/284 amongst others\r\n\r\nhttps://github.com/danielpalme/ReportGenerator/blob/57b12cb92f245c0b085bf10f4e1054fda4d9854a/src/Readme.txt#L64-L72\r\n\r\ncc @ViktorHofer, @danielpalme ","Url":"https://github.com/dotnet/corefx/pull/41626","RelatedDescription":"Closed or merged PR \"Update ReportGenerator global repo tool version to 4.3.0\" (#41626)"},{"Id":"503770118","IsPullRequest":true,"CreatedAt":"2019-10-08T01:15:35","Actor":"Marusyk","Number":"41627","RawContent":null,"Title":"Fix serialization of elements with an empty-string child text node","State":"open","Body":"Related to #41574\r\n\r\nOutput after change\r\n```\r\n<root>\r\n  <Elem></Elem>\r\n</root>\r\n```\r\n\r\nCan we skip the length check?\r\n\r\nPlease review.\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/41627","RelatedDescription":"Open PR \"Fix serialization of elements with an empty-string child text node\" (#41627)"},{"Id":"503750045","IsPullRequest":true,"CreatedAt":"2019-10-08T01:04:57","Actor":"dotnet-maestro-bot","Number":"41625","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @davidsh\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/41625","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#41625)"},{"Id":"503600648","IsPullRequest":true,"CreatedAt":"2019-10-07T23:50:58","Actor":"davidsh","Number":"41603","RawContent":null,"Title":"[release/2.1] Clean up some tests and move to new Azure endpoint","State":"closed","Body":"**Test only fixes**\r\n\r\nPort PR #36018 from master branch\r\n\r\nThis PR changes the Azure test endpoint to use Azure App Service instead of the classic Azure\r\nCloud Service endpoint. The use of the classic Azure Cloud Service is no longer recommended\r\nsince it is harder to maintain.\r\n\r\nOnce all remaining branches are converted, we will shut down the corefx-net.cloudapp.net\r\nendpoint.\r\n\r\nThis PR also includes some other test fixes and tests disabled due to active issues.","Url":"https://github.com/dotnet/corefx/pull/41603","RelatedDescription":"Closed or merged PR \"[release/2.1] Clean up some tests and move to new Azure endpoint\" (#41603)"},{"Id":"503684745","IsPullRequest":true,"CreatedAt":"2019-10-07T23:15:44","Actor":"ViktorHofer","Number":"41609","RawContent":null,"Title":"Disable arm64 tests on Win and limit UWP testing","State":"closed","Body":"Limit UWP testing to a bare minimum (x64) and disable arm64 testing as we currently don't have enough machines and it's not officially supported.","Url":"https://github.com/dotnet/corefx/pull/41609","RelatedDescription":"Closed or merged PR \"Disable arm64 tests on Win and limit UWP testing\" (#41609)"},{"Id":"503695082","IsPullRequest":true,"CreatedAt":"2019-10-07T23:14:23","Actor":"ViktorHofer","Number":"41613","RawContent":null,"Title":"Disable flaky member descriptor test","State":"closed","Body":"Failed multiple times in CI: https://github.com/dotnet/corefx/issues/40948\r\n\r\nThe issue itself could be a product bug and @stephentoub set the milestone and label to track it accordingly. This should not hinder us disabling the test in CI.","Url":"https://github.com/dotnet/corefx/pull/41613","RelatedDescription":"Closed or merged PR \"Disable flaky member descriptor test\" (#41613)"},{"Id":"503600764","IsPullRequest":true,"CreatedAt":"2019-10-07T23:10:22","Actor":"jkotas","Number":"41604","RawContent":null,"Title":"Ignore ERROR_NOT_FOUND in File.Encrypt test","State":"closed","Body":"Makes the test pass when EFS (Encrypted File System) is not available.\r\n\r\nI have also fixed the interop definition for Encrypt/DecryptFile P/Invokes while I was on it.\r\n\r\nFixes #39211","Url":"https://github.com/dotnet/corefx/pull/41604","RelatedDescription":"Closed or merged PR \"Ignore ERROR_NOT_FOUND in File.Encrypt test\" (#41604)"},{"Id":"503734293","IsPullRequest":true,"CreatedAt":"2019-10-07T22:59:24","Actor":"Anipik","Number":"41623","RawContent":null,"Title":"Bumping the version of OOB packages to match product version","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/40544","Url":"https://github.com/dotnet/corefx/pull/41623","RelatedDescription":"Open PR \"Bumping the version of OOB packages to match product version\" (#41623)"},{"Id":"503693715","IsPullRequest":false,"CreatedAt":"2019-10-07T22:33:10","Actor":"ftlsoft","Number":"41611","RawContent":null,"Title":"DateTime.Date ToString() - .net core 2.2. - console/windowsservice differences","State":"closed","Body":"# Issue Title\r\n\r\nDateTime.Date ToString() - .net core 2.2. - console/windowsservice differences\r\n# General\r\n\r\nHi, i`v found an issue with DateTime.Date in app runned as a console and as a windows service (Local System user)\r\n\r\nLog:\r\nAs a console app:\r\n2019/10/07 10:59:32.864|DEBUG|: DateTime.Now: 2019-10-07 10:59:32 DateTime.Now.Date: **2019-10-07 0:00:00** \r\nAs a windows service:\r\n2019/10/07 10:59:36.370|DEBUG|: DateTime.Now: 10/7/2019 10:59:36 AM DateTime.Now.Date: **10/7/2019 12:00:00 AM** \r\n\r\nArythmethic operations are calulated ok (from the midnight), but returned time part is wrong\r\n2019/10/07 10:59:36.372|DEBUG|: DateTime.Now.AddHours(-11): 10/6/2019 11:59:36 PM DateTime.Now.AddHours(-11).Date: **10/6/2019 12:00:00 AM** \r\n\r\nBoth tests have:\r\n2019/10/07 10:59:32.872|DEBUG|: CultureInfo.CurrentCulture: en-US \r\n2019/10/07 10:59:32.872|DEBUG|: TimeZoneInfo.Local.GetUtcOffset(02:00:00)\r\n","Url":"https://github.com/dotnet/corefx/issues/41611","RelatedDescription":"Closed issue \"DateTime.Date ToString() - .net core 2.2. - console/windowsservice differences\" (#41611)"},{"Id":"503722303","IsPullRequest":false,"CreatedAt":"2019-10-07T22:23:41","Actor":"avparuch","Number":"41622","RawContent":null,"Title":"Kestrel support for Client negotiation on a per hostname basis.","State":"open","Body":"Hello,\r\n\r\nOur service is a reverse proxy running on IIS (on top of HttpSys). We are moving to .NET core and while running on Kestrel, ran into a scenario blocker with client certificates.\r\n\r\nIn our current application, we use HttpSys APIs to configure client certificate negotiation per hostname and also to set up CTL stores.\r\n\r\nThe specific API we use is : https://docs.microsoft.com/en-us/windows/win32/http/add-sslcert\r\n\r\nExamples of usage:\r\n1) netsh http add sslcert hostnameport=a.b.microsoftonline.com:443 \r\ncerthash=EC9CA6E0E645AAB24F8AD890DF75A448824D2C37 appid='{4dc3e181-e14b-4a21-b022-59fc669b0914}' certstorename=MY \r\nverifyclientcertrevocation=disable\r\n\r\n2) netsh http add sslcert hostnameport=c.windows.net:443 \r\ncerthash=EB3C3B94F10E948463929BCF4C7000C1E7BD0AC1 appid='{4dc3e181-e14b-4a21-b022-59fc669b0914}' certstorename=MY \r\nclientcertnegotiation=enable verifyclientcertrevocation=disable\r\n\r\n3) netsh http add sslcert hostnameport=device.a.b.microsoftonline.com:443 \r\ncerthash=963B55D3E94101B70F1654FBF90D6006BAFAD513 appid='{4dc3e181-e14b-4a21-b022-59fc669b0914}' certstorename=MY \r\nclientcertnegotiation=enable verifyclientcertrevocation=disable sslctlstorename=DeviceLoginCTLStore\r\n\r\nWe want the ability to perform these operations in the Kestrel webserver. (The workaround of using the HttpSysServer does not work for us, I will not go into the reasons in this issue, I will create a separate one for that).\r\n\r\nKestrel already provides SNI support (ability to select server certificate on a per hostname basis). However, the problem is that the client certificate negotiation (and CTL store) support is application wide and not per hostname. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.kestrel.https.clientcertificatemode?view=aspnetcore-2.2#Microsoft_AspNetCore_Server_Kestrel_Https_ClientCertificateMode_NoCertificate.\r\n\r\nTo be specific: \r\n1) When a SNI binding is set up in Kestrel, provide the ability to enable/disable client certificate negotiation. (an equivalent to the \"clientcertnegotiation\" property in HttpSys.)\r\n2) When a SNI binding is set up in Kestrel, provide the ability to select the exact CTL store for this binding. (an equivalent to the \"sslctlstorename\" property in HttpSys)\r\n3) When a SNI binding is set up in Kestrel, provide the ability to turn on or off the verification of revocation of client certificates. \r\n (an equivalent to the \"verifyclientcertrevocation\" property in HttpSys.)\r\n\r\nThis is a major blocker for us to migrate to .NET core. \r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41622","RelatedDescription":"Open issue \"Kestrel support for Client negotiation on a per hostname basis.\" (#41622)"},{"Id":"503698573","IsPullRequest":true,"CreatedAt":"2019-10-07T22:22:27","Actor":"ViktorHofer","Number":"41615","RawContent":null,"Title":"Update issue-guide.md","State":"closed","Body":"Now I finally now why I never got emails for the infra area.","Url":"https://github.com/dotnet/corefx/pull/41615","RelatedDescription":"Closed or merged PR \"Update issue-guide.md\" (#41615)"},{"Id":"503714470","IsPullRequest":true,"CreatedAt":"2019-10-07T22:22:17","Actor":"ericstj","Number":"41620","RawContent":null,"Title":"Update infra owners","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41620","RelatedDescription":"Closed or merged PR \"Update infra owners\" (#41620)"},{"Id":"503715797","IsPullRequest":false,"CreatedAt":"2019-10-07T22:05:20","Actor":"JamesNK","Number":"41621","RawContent":null,"Title":"HTTP2: Consider supporting h2c without AppContext switch","State":"open","Body":"Today users must set an AppContext switch to be able to use h2c (HTTP/2 without TLS) with HttpClient. This switch was added in .NET Core 3.0 to make it easier to debug the content of HttpClient traffic by having it sent without TLS.\r\n\r\n```cs\r\nAppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport\", true);\r\n```\r\n\r\nThis setting has turned out to be very useful, and has a lot of legitimate uses outside of just debugging. I think HttpClient should support h2c without setting this switch.\r\n\r\nAlthough browsers require a web server to always encrypt HTTP/2 content, it is common for back end services to send HTTP/2 API calls without TLS, especially during development. Most development ecosystems don't have the TLS-by-default focus that .NET has.\r\n\r\nFor example, a gRPC service hosted written in Java/Go/C++ probably won't have a TLS cert setup in development, and .NET devs will need to jump through additional hoops to figure out how to successfully call it.\r\n\r\nAnother example of where h2c is required is ASP.NET Core gRPC on macOS. .NET Core ASP.NET on Mac doesn't support server TLS, so users have to develop with h2c - https://docs.microsoft.com/en-us/aspnet/core/grpc/troubleshoot?view=aspnetcore-3.0#unable-to-start-aspnet-core-grpc-app-on-macos\r\n\r\n@shirhatti ","Url":"https://github.com/dotnet/corefx/issues/41621","RelatedDescription":"Open issue \"HTTP2: Consider supporting h2c without AppContext switch\" (#41621)"},{"Id":"503702910","IsPullRequest":false,"CreatedAt":"2019-10-07T21:33:58","Actor":"ViktorHofer","Number":"41619","RawContent":null,"Title":"System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection failed in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=380511&view=ms.vss-test-web.build-test-results-tab&runId=11763518&paneView=debug&resultId=147963\r\n\r\nConfiguration: `netcoreapp-Windows_NT-Debug-x64-Windows.81.Amd64.Open`\r\n\r\n```\r\nSystem.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection\r\n\r\nTimed out at 10/7/2019 8:39:55 PM after 60000ms waiting for remote process.\\r\\n\\tProcess ID: 5404\\r\\n\\tHandle: 1096\\r\\n\\tName: dotnet\\r\\n\\tMainModule: C:\\\\dotnetbuild\\\\work\\\\ddad0c4a-3d2b-409b-b8b2-09e253a66230\\\\Payload\\\\dotnet.exe\\r\\n\\tStartTime: 10/7/2019 8:38:55 PM\\r\\n\\tTotalProcessorTime: 00:00:00.1875000\\r\\n\\tThreads:\\r\\n\\t\\tThread #1 (OS 0x152C) \\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\tSystem.Environment.Exit(Int32)\\r\\n\\t\\t\\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\tThread #2 (OS 0x1538) [Finalizer]\\r\\n\\t\\t\\t[DebuggerU2MCatchHandlerFrame]\\r\\n\\t\\tThread #3 (OS 0x1528) [Thread pool worker]\\r\\n\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 131\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\r\n   at System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection() in /_/src/System.Net.Requests/tests/AuthenticationManagerTest.cs:line 93\r\n```\r\n\r\ncc @davidsh, @wfurt, @scalablecory, @eiriktsarpalis, @karelz\r\ncc @stephentoub for another hang","Url":"https://github.com/dotnet/corefx/issues/41619","RelatedDescription":"Open issue \"System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection failed in CI\" (#41619)"},{"Id":"503701174","IsPullRequest":false,"CreatedAt":"2019-10-07T21:29:46","Actor":"ViktorHofer","Number":"41618","RawContent":null,"Title":"Crypto DecryptEnvelopedEmptyOctetString test crashes on CI","State":"open","Body":"Configuration: `netfx-Windows_NT-Release-x86-Windows.10.Amd64.ClientRS5.Open`\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=380511&view=ms.vss-test-web.build-test-results-tab&runId=11762370&paneView=debug\r\n\r\nDump is available: https://helix.dot.net/api/2019-06-17/jobs/948bbfd1-1a8d-4f80-98c7-87f70a914f20/workitems/System.Security.Cryptography.Pkcs.Tests/files/xunit.console.exe.6212.dmp\r\n\r\n```\r\nC:\\dotnetbuild\\work\\948bbfd1-1a8d-4f80-98c7-87f70a914f20\\Work\\cf8fae2e-31fb-4c36-bc96-bc2f3e1ee396\\Exec>xunit.console.exe System.Security.Cryptography.Pkcs.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetfxtests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: System.Security.Cryptography.Pkcs.Tests (app domain = on [no shadow copy], method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Security.Cryptography.Pkcs.Tests (found 309 of 378 test cases)\r\n  Starting:    System.Security.Cryptography.Pkcs.Tests (parallel test collections = on, max threads = 2)\r\n    System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyTransRecipientInfoRsaOaepCertTests.TestKeyTransEncryptKey_RsaOaepCertificate_NoPlatformSupport_Throws [SKIP]\r\n      Condition(s) not met: \"DoesNotSupportRsaOaepCerts\"\r\n    System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests.TestKeyAgreement_PlatformNotSupported [SKIP]\r\n      Condition(s) not met: \"DoesNotSupportDiffieHellman\"\r\n\r\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Security.Cryptography.X509Certificates.X509Utils._LoadCertFromBlob(Byte[] rawData, IntPtr password, UInt32 dwFlags, Boolean persistKeySet, SafeCertContextHandle& pCertCtx)\r\n   at System.Security.Cryptography.X509Certificates.X509Utils.LoadCertFromBlob(Byte[] rawData, IntPtr password, UInt32 dwFlags, Boolean persistKeySet, SafeCertContextHandle pCertCtx)\r\n   at System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromBlob(Byte[] rawData, Object password, X509KeyStorageFlags keyStorageFlags)\r\n   at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags)\r\n   at Test.Cryptography.CertLoader.TryGetCertificateWithPrivateKey(Boolean exportable) in /_/src/System.Security.Cryptography.Pkcs/tests/CertLoader.cs:line 86\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) in /_/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 834\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.TestSimpleDecrypt_RoundTrip(CertLoader certLoader, ContentInfo contentInfo, String algorithmOidValue, SubjectIdentifierType type, ContentInfo expectedContentInfo) in /_/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 827\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.DecryptEnvelopedEmptyOctetString() in /_/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 755\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 150\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 257\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer.<AggregateAsync>d__4.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)\r\n   at Xunit.Sdk.ExceptionAggregator.<RunAsync>d__9.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)\r\n   at Xunit.Sdk.TestInvoker`1.<InvokeTestMethodAsync>d__48.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 239\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)\r\n   at Xunit.Sdk.TestInvoker`1.<<RunAsync>b__47_0>d.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 206\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator.<RunAsync>d__10`1.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.XunitTestRunner.<InvokeTestAsync>d__4.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 67\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)\r\n   at Xunit.Sdk.ExceptionAggregator.<RunAsync>d__10`1.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n   at Xunit.Sdk.TestRunner`1.<RunAsync>d__43.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestRunner`1.RunAsync()\r\n   at Xunit.Sdk.TestCaseRunner`1.<RunAsync>d__19.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCaseRunner.cs:line 82\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestCaseRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(IXunitTestCase testCase) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestMethodRunner.cs:line 45\r\n   at Xunit.Sdk.TestMethodRunner`1.<RunTestCasesAsync>d__32.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 136\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1.<RunAsync>d__31.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 106\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestMethodRunner`1.RunAsync()\r\n   at Xunit.Sdk.TestClassRunner`1.<RunTestMethodsAsync>d__38.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 213\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1.<RunAsync>d__37.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 171\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestClassRunner`1.RunAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1.<RunTestClassesAsync>d__28.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 130\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1.<RunAsync>d__27.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 101\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Xunit.Sdk.TestCollectionRunner`1.RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 184\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 107\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at Xunit.Sdk.ExecutionContextHelper.Run(Object context, Action`1 action) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Utility\\ExecutionContextHelper.cs:line 22\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 89\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj)\r\n----- end Mon 10/07/2019 20:21:24.52 ----- exit code -532462766 ----------------------------------------------------------\r\n```\r\n\r\ncc @bartonjs @krwq @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/issues/41618","RelatedDescription":"Open issue \"Crypto DecryptEnvelopedEmptyOctetString test crashes on CI\" (#41618)"},{"Id":"503699993","IsPullRequest":true,"CreatedAt":"2019-10-07T21:29:18","Actor":"ericstj","Number":"41616","RawContent":null,"Title":"[release/2.2] fix typo in packageIndex.json","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41616","RelatedDescription":"Closed or merged PR \"[release/2.2] fix typo in packageIndex.json\" (#41616)"},{"Id":"503700256","IsPullRequest":true,"CreatedAt":"2019-10-07T21:28:03","Actor":"mmitche","Number":"41617","RawContent":null,"Title":"Add missing comma","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41617","RelatedDescription":"Closed or merged PR \"Add missing comma\" (#41617)"},{"Id":"503698091","IsPullRequest":false,"CreatedAt":"2019-10-07T21:22:32","Actor":"JeremyKuhne","Number":"41614","RawContent":null,"Title":"API Proposal: Add file and directory creation methods that take ACL","State":"open","Body":"### Summary\r\n\r\n.NET ACL (Access Control List) support is Windows specific (`FileSecurity` and `DirectorySecurity`). We keep support in `System.IO.FileSystem.AccessControl` and do not have references to the ACL types in base `System.IO` types in .NET Core (e.g. `File`, `DirectoryInfo`, `FileStream`). We have extension methods in `System.IO.FileSystemAclExtensions` to get and set ACLs instead. We do not, however, have methods that let you create files and directories with a specific ACL set.\r\n\r\nThis presents a few problems:\r\n\r\n- Potential security hole as files/directories can be accessed between creation and modification\r\n- Porting difficulties as there isn't a 1-1 API replacement\r\n- Stability issues with background processes (file filters) can prevent modifying ACLs right after creation (typically surfaces as a security exception)\r\n\r\nWe need to add helper methods that prevent these problems. Adding back API isn't feasible as `FileStream` lives in CoreLib and would require pulling down a rather large closure (above and beyond putting Windows specific API in front of Unix/cross-plat developers). Having these as extension methods also facilitates writing .NET Standard libraries.\r\n\r\n### Proposal\r\n\r\n``` C#\r\nusing System.Security.AccessControl;\r\n\r\nnamespace System.IO\r\n{\r\n    public static class FileSystemAclExtensions\r\n    {\r\n        // Add\r\n        public static FileStream Create(\r\n            this FileInfo fileInfo,\r\n            FileMode mode,\r\n            FileSystemRights rights,\r\n            FileShare share,\r\n            int bufferSize,\r\n            FileOptions options,\r\n            FileSecurity fileSecurity);\r\n\r\n        public static void Create(\r\n            this DirectoryInfo directoryInfo,\r\n            DirectorySecurity directorySecurity);\r\n\r\n        public static FileStream CreateFile(\r\n            this FileSecurity fileSecurity,\r\n            string path,\r\n            FileMode mode,\r\n            FileSystemRights rights,\r\n            FileShare share,\r\n            int bufferSize,\r\n            FileOptions options);\r\n\r\n        public static DirectoryInfo CreateDirectory(\r\n            this DirectorySecurity directorySecurity\r\n            string path);\r\n\r\n        // Existing\r\n        public static DirectorySecurity GetAccessControl(this DirectoryInfo directoryInfo);\r\n        public static DirectorySecurity GetAccessControl(this DirectoryInfo directoryInfo, AccessControlSections includeSections);\r\n        public static FileSecurity GetAccessControl(this FileInfo fileInfo);\r\n        public static FileSecurity GetAccessControl(this FileInfo fileInfo, AccessControlSections includeSections);\r\n        public static FileSecurity GetAccessControl(this FileStream fileStream);\r\n        public static void SetAccessControl(this DirectoryInfo directoryInfo, DirectorySecurity directorySecurity);\r\n        public static void SetAccessControl(this FileInfo fileInfo, FileSecurity fileSecurity);\r\n        public static void SetAccessControl(this FileStream fileStream, FileSecurity fileSecurity);\r\n}\r\n```\r\n\r\n### Details\r\n\r\nHeuristics would follow .NET Framework as closely as possible. Directory creation is the most important of the two as you can prevent malicious file access if the directory is locked from the start.\r\n\r\nFor directory creation we would likely include the same sources that `System.IO.FileSystem` uses as the directory creation helper there already sets a \"default\" security object and would just need to have an overload added (which would allow creation heuristics to match properly, including error states).\r\n\r\nFile creation is a bit more complicated as the logic may take a bit more refactoring, but we should strive to include the same sources as well.\r\n\r\nMarking as 3.1 as internal partners are hitting this in porting efforts.\r\n\r\n### Related Issues\r\n\r\n#31488\r\n\r\nCC: @danmosemsft, @ericstj, @terrajobst","Url":"https://github.com/dotnet/corefx/issues/41614","RelatedDescription":"Open issue \"API Proposal: Add file and directory creation methods that take ACL\" (#41614)"},{"Id":"503694747","IsPullRequest":false,"CreatedAt":"2019-10-07T21:14:35","Actor":"andre-ss6","Number":"41612","RawContent":null,"Title":"Change JsonSerializer default settings","State":"open","Body":"Provide a way to change the default settings for the static `JsonSerializer` class. In Json.NET, you could do:\r\n\r\n```cs\r\nJsonConvert.DefaultSettings = () => new JsonSerializerSettings();\r\n```\r\n\r\nCurrently you have to keep passing the options around and remembering to pass it to each call to `[De]Serialize`","Url":"https://github.com/dotnet/corefx/issues/41612","RelatedDescription":"Open issue \"Change JsonSerializer default settings\" (#41612)"},{"Id":"503686634","IsPullRequest":false,"CreatedAt":"2019-10-07T20:56:25","Actor":"ViktorHofer","Number":"41610","RawContent":null,"Title":"6 crypto cng tests are failing consistently in outerloop Windows","State":"open","Body":"Example build: https://dev.azure.com/dnceng/public/_build/results?buildId=378973&view=ms.vss-test-web.build-test-results-tab\r\n\r\n```\r\nSystem.Security.Cryptography.Cng.Tests.AesCngTests.VerifyPersistedKey\r\nSystem.Security.Cryptography.Cng.Tests.TripleDESCngTests.VerifyPersistedKey\r\nSystem.Security.Cryptography.Cng.Tests.TripleDESCngTests.SetKey_DetachesFromPersistedKey\r\nSystem.Security.Cryptography.Cng.Tests.AesCngTests.SetKey_DetachesFromPersistedKey\r\nSystem.Security.Cryptography.Cng.Tests.AesCngTests.VerifyMachineKey\r\nSystem.Security.Cryptography.Cng.Tests.TripleDESCngTests.VerifyMachineKey\r\n\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : The parameter is incorrect.\r\n\r\nat System.Security.Cryptography.CngKey.SetProperty(CngProperty property) in /_/src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/CngKey.Properties.cs:line 71\r\n   at Internal.Cryptography.BasicSymmetricCipherNCrypt..ctor(Func`1 cngKeyFactory, CipherMode cipherMode, Int32 blockSizeInBytes, Byte[] iv, Boolean encrypting) in /_/src/System.Security.Cryptography.Cng/src/Internal/Cryptography/BasicSymmetricCipherNCrypt.cs:line 36\r\n   at Internal.Cryptography.CngSymmetricAlgorithmCore.CreatePersistedCryptoTransformCore(Func`1 cngKeyFactory, Byte[] iv, Boolean encrypting) in /_/src/System.Security.Cryptography.Cng/src/Internal/Cryptography/CngSymmetricAlgorithmCore.cs:line 181\r\n   at Internal.Cryptography.CngSymmetricAlgorithmCore.CreateCryptoTransform(Boolean encrypting) in /_/src/System.Security.Cryptography.Cng/src/Internal/Cryptography/CngSymmetricAlgorithmCore.cs:line 130\r\n   at Internal.Cryptography.CngSymmetricAlgorithmCore.CreateEncryptor() in /_/src/System.Security.Cryptography.Cng/src/Internal/Cryptography/CngSymmetricAlgorithmCore.cs:line 105\r\n   at System.Security.Cryptography.TripleDESCng.CreateEncryptor() in /_/src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/TripleDESCng.cs:line 79\r\n   at System.Security.Cryptography.Cng.Tests.SymmetricCngTestHelpers.SetKey_DetachesFromPersistedKey(CngAlgorithm algorithm, Func`2 persistedFunc) in /_/src/System.Security.Cryptography.Cng/tests/SymmetricCngTestHelpers.cs:line 159\r\n   at System.Security.Cryptography.Cng.Tests.TripleDESCngTests.SetKey_DetachesFromPersistedKey() in /_/src/System.Security.Cryptography.Cng/tests/TripleDESCngTests.cs:line 53\r\n```\r\n\r\ncc @bartonjs @krwq @GrabYourPitchforks","Url":"https://github.com/dotnet/corefx/issues/41610","RelatedDescription":"Open issue \"6 crypto cng tests are failing consistently in outerloop Windows\" (#41610)"},{"Id":"503654446","IsPullRequest":true,"CreatedAt":"2019-10-07T19:50:24","Actor":"mmitche","Number":"41607","RawContent":null,"Title":"[release/2.1] Switch to new OSX pool","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41607","RelatedDescription":"Closed or merged PR \"[release/2.1] Switch to new OSX pool\" (#41607)"},{"Id":"503632056","IsPullRequest":true,"CreatedAt":"2019-10-07T19:07:31","Actor":"ahsonkhan","Number":"41606","RawContent":null,"Title":"Updating corefx prerequisites for latest VS 2019 workloads","State":"closed","Body":"cc @ViktorHofer, @safern  ","Url":"https://github.com/dotnet/corefx/pull/41606","RelatedDescription":"Closed or merged PR \"Updating corefx prerequisites for latest VS 2019 workloads\" (#41606)"},{"Id":"503614135","IsPullRequest":true,"CreatedAt":"2019-10-07T18:23:25","Actor":"omajid","Number":"41605","RawContent":null,"Title":"[release/3.0] Add Fedora 32 and CentOS 8 runtime ids","State":"open","Body":"This is combined backport of:\r\n\r\n- PR #41397: commit 6f82bd59a05ea9556397596ae9e59f39b904b222\r\n- PR #40786: commit 86fc9e751c424278a9c4e163e0a71a9d7e30c8e7\r\n\r\nSee also: https://github.com/dotnet/corefx/pull/41549","Url":"https://github.com/dotnet/corefx/pull/41605","RelatedDescription":"Open PR \"[release/3.0] Add Fedora 32 and CentOS 8 runtime ids\" (#41605)"},{"Id":"503456477","IsPullRequest":true,"CreatedAt":"2019-10-07T18:19:59","Actor":"stephentoub","Number":"41597","RawContent":null,"Title":"Add ConcurrentDictionary.TryRemove(KeyValuePair)","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/24770","Url":"https://github.com/dotnet/corefx/pull/41597","RelatedDescription":"Closed or merged PR \"Add ConcurrentDictionary.TryRemove(KeyValuePair)\" (#41597)"},{"Id":"503486322","IsPullRequest":false,"CreatedAt":"2019-10-07T17:56:10","Actor":"KamranShahid","Number":"41599","RawContent":null,"Title":"Converting newtonsoft code to System.Text.Json. what's equivalent of  JObject.Parse","State":"closed","Body":"I am converting my newtonsooft implementeation to new javascript library in .net core 3.0\r\nI have one of the following code\r\n\r\n```\r\n public static bool IsValidJson(string json)\r\n        {\r\n            try\r\n            {                \r\n                \r\n                JObject.Parse(json);\r\n                return true;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Logger.ErrorFormat(\"Invalid Json Received {0}\", json);\r\n                Logger.Fatal(ex.Message);\r\n                return false;\r\n            }\r\n        }\r\n```\r\n\r\nI am not able to find any equivalent for  JObject.Parse(json);\r\n\r\nAlso what will be the attribute JsonProperty equivalent \r\n\r\n public class ResponseJson\r\n    {\r\n        [JsonProperty(PropertyName = \"status\")]\r\n        public bool Status { get; set; }\r\n        [JsonProperty(PropertyName = \"message\")]\r\n        public string Message { get; set; }\r\n        [JsonProperty(PropertyName = \"Log_id\")]\r\n        public string LogId { get; set; }\r\n        [JsonProperty(PropertyName = \"Log_status\")]\r\n        public string LogStatus { get; set; }\r\n\r\n        public string FailureReason { get; set; }\r\n    }","Url":"https://github.com/dotnet/corefx/issues/41599","RelatedDescription":"Closed issue \"Converting newtonsoft code to System.Text.Json. what's equivalent of  JObject.Parse\" (#41599)"},{"Id":"503576306","IsPullRequest":true,"CreatedAt":"2019-10-07T17:02:13","Actor":"eriawan","Number":"41601","RawContent":null,"Title":"Replace tfm based constants with SDK ones","State":"open","Body":"Fix #40484\r\n\r\nReplace constants with SDK constants in Directory.Build.Props.\r\nThese SDK constants are based on https://docs.microsoft.com/en-us/dotnet/standard/frameworks#how-to-specify-target-frameworks\r\n\r\ncc @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/41601","RelatedDescription":"Open PR \"Replace tfm based constants with SDK ones\" (#41601)"},{"Id":"503581628","IsPullRequest":false,"CreatedAt":"2019-10-07T15:54:29","Actor":"vladislav55","Number":"41602","RawContent":null,"Title":"RSA.ImportRSAPublicKey doesn't work for PEM .net core 3","State":"open","Body":"I'm trying to import public-key parameters from PEM with RSA.ImportRSAPublicKey but it throws System.Security.Cryptography.CryptographicException: 'ASN1 corrupted data'. RSA.ImportRSAPrivateKey works fine for import private-key parameters.\r\n\r\nExample:\r\n\r\n**for private key** (works fine):\r\n\r\nvar privateKey = \"MIICXAIBAAKBgQCJHYcuRHdJ5S8GYcz/IgF5hJY+vvchVaeKyD+GGSoiD58pRJ3kx5b7YbbP/EyzwhUxWncvbsiWZFdqca/DHsFKxNnRgvidoyq2dgA+erP91aFHpccH2ykNxC6LTzMXX4XWp5mXKm6XfMkBFzsVC4/a7A6UHnsL7MU2b4lec+WkSwIDAQABAoGAMV1zLOIzfGRKAOc3MefhVgm5Og/w04yODHY6AKKQu8CaEfaFTjfZkNnGQq1YRCOtE565aFdfWl335vfVSs+I0UTKYtUdU0DkeZ93nB+eaUIQ/7UC99UlcdSrlRfXGwBxdcwM+Ek93VeITWERydh+xyXN3VxzaYtApA1fB/YGnzkCQQDcb8X6xFigw0qSpHXX+qpBQcTSbIQ5u47vK0VRIkDI3vN3tGBeIpU78kK3E+cHG8e74Nobn1/nJ09TKS4jzoudAkEAnzyDQPD269xzwTvICVMDvezEN4sy3+XJdJjtOdtL4RZKRqOUiaJmKhR1QUtlrG71LqudUiwZ7DnzloKyvLYvBwJAXCyw0GcB2FdQ+3ihfipmvtrNfl+5+poe7otddMup41S24bsfAL3dQS/QDdXYqPRI1Jr1GM/PvkyFsvRpQre/UQJBAIavIDVlmvSUWjQu5Fs+pAOYp75zNmy6Z1L/pmcxXVTdDaYB5jkj61XcR/EaXL0kfK0k6sP+GU79FVNQ6O1FCzECQAD8SLqaJOGbiPYrf+gRx337xQTatlaaXIaRrtNKj4E3/WtyKQQXEILCMDS1Xa88sK12nQgu6DVxOtIs+7cEvds=\";\r\nvar rsa = RSA.Create();\r\nrsa.ImportRSAPrivateKey(Convert.FromBase64String(privateKey), out _); \r\n\r\n**for public key**(throws exception):\r\n\r\nvar publicKey = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJHYcuRHdJ5S8GYcz/IgF5hJY+vvchVaeKyD+GGSoiD58pRJ3kx5b7YbbP/EyzwhUxWncvbsiWZFdqca/DHsFKxNnRgvidoyq2dgA+erP91aFHpccH2ykNxC6LTzMXX4XWp5mXKm6XfMkBFzsVC4/a7A6UHnsL7MU2b4lec+WkSwIDAQAB\";\r\nvar rsa = RSA.Create();\r\nrsa.ImportRSAPublicKey(Convert.FromBase64String(publicKey), out _);\r\n\r\n\r\nMaybe I'm doing something wrong?","Url":"https://github.com/dotnet/corefx/issues/41602","RelatedDescription":"Open issue \"RSA.ImportRSAPublicKey doesn't work for PEM .net core 3\" (#41602)"},{"Id":"503489927","IsPullRequest":true,"CreatedAt":"2019-10-07T14:29:50","Actor":"stephentoub","Number":"41600","RawContent":null,"Title":"Add ImmutableInterlocked.Update overloads for ImmutableArray","State":"open","Body":"The implementations and tests just copy the exist Update overloads, tweaked to work with ImmutableArray.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/19408\r\ncc: @sharwell, @AArnott ","Url":"https://github.com/dotnet/corefx/pull/41600","RelatedDescription":"Open PR \"Add ImmutableInterlocked.Update overloads for ImmutableArray\" (#41600)"},{"Id":"503478503","IsPullRequest":false,"CreatedAt":"2019-10-07T14:11:43","Actor":"WayneHiller","Number":"41598","RawContent":null,"Title":"System.Text.Json - Collection was of a fixed size. Error on IEnumerable property","State":"open","Body":"I have a class with this:\r\n\r\n```\r\nclass Dealer {\r\n        [JsonIgnore]\r\n        [StringLength( MaxNetworksLength )]\r\n        public string Networks {\r\n            get => _Networks;\r\n            set => _Networks = value ?? string.Empty;\r\n        }\r\n\r\n        public IEnumerable<string> NetworkCodeList {\r\n            get => !string.IsNullOrEmpty( Networks ) ? Networks?.Split( ',' ) : new string[0];\r\n            set => Networks = (value != null) ? string.Join( \",\", value ) : string.Empty;\r\n        }\r\n}\r\n```\r\n\r\nThe Networks property is used by Dapper to read/write to and from the database.\r\nThe NetworkCodeList is sent/received to and from a web page.\r\n\r\nI am getting an error when ASP.NET is Deserializing the object. This worked fine with Json.Net.\r\nAny ideas what I can do here?\r\n\r\n```\r\nSystem.NotSupportedException: Collection was of a fixed size.\r\n   at System.SZArrayHelper.Add[T](T value)\r\n   at System.Text.Json.JsonSerializer.ApplyValueToEnumerable[TProperty](TProperty& value, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonPropertyInfoNotNullable`4.OnReadEnumerable(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonPropertyInfo.ReadEnumerable(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonPropertyInfo.Read(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack)\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonReaderState& readerState, Boolean isFinalBlock, ReadOnlySpan`1 buffer, JsonSerializerOptions options, ReadStack& readStack)\r\n   at System.Text.Json.JsonSerializer.ReadAsync[TValue](Stream utf8Json, Type returnType, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BindModelAsync(ModelBindingContext bindingContext)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.<>c__DisplayClass0_0.<<CreateBinderDelegate>g__Bind|0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/41598","RelatedDescription":"Open issue \"System.Text.Json - Collection was of a fixed size. Error on IEnumerable property\" (#41598)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"503788004","IsPullRequest":true,"CreatedAt":"2019-10-08T02:31:03","Actor":"mavasani","Number":"39127","RawContent":null,"Title":"Enable detection and addition of solution level .editorconfig as solu…","State":"open","Body":"…tion item\r\n\r\n1. IDE code fix that adds new editorconfig for configuring code style/severity has been updated to create the file at root of the solution, instead of the project. Additionally, the code fix also automatically adds the file as a solution item.\r\n2. We now detect if user opens a solution with editorconfig at the root of the solution and provide an info bar to make it a solution item with a single click. User can choose to silence this suggestion for the current solution (solution user option) OR silence it for all solutions for the user (workspace option).","Url":"https://github.com/dotnet/roslyn/pull/39127","RelatedDescription":"Open PR \"Enable detection and addition of solution level .editorconfig as solu…\" (#39127)"},{"Id":"503759468","IsPullRequest":true,"CreatedAt":"2019-10-08T00:30:11","Actor":"genlu","Number":"39126","RawContent":null,"Title":"[WIP] Completion for unimported extension methods","State":"open","Body":"Still a work-in-pregress, but tests for common scenarios in C# are passing, so I think it's at least ready for a design review.\r\n\r\nTODO:\r\n- Test VB \r\n- Determine the bail condition (e.g. if any of the filter items isn't calculated? And/Or a timebox? )\r\n- Perf analysis (still some cleanup to do before this)\r\n\r\n@CyrusNajmabadi Could you please give this a quick look and let me know if the implementation of  the filter makes sense? Thanks!","Url":"https://github.com/dotnet/roslyn/pull/39126","RelatedDescription":"Open PR \"[WIP] Completion for unimported extension methods\" (#39126)"},{"Id":"503756065","IsPullRequest":true,"CreatedAt":"2019-10-08T00:17:47","Actor":"chsienki","Number":"39125","RawContent":null,"Title":"Using declaration ioperation","State":"open","Body":"IOperation and CFG support for using declarations","Url":"https://github.com/dotnet/roslyn/pull/39125","RelatedDescription":"Open PR \"Using declaration ioperation\" (#39125)"},{"Id":"503752385","IsPullRequest":true,"CreatedAt":"2019-10-08T00:02:42","Actor":"dotnet-bot","Number":"39124","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"open","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39124","RelatedDescription":"Open PR \"Merge master to features/local-function-attributes\" (#39124)"},{"Id":"503752335","IsPullRequest":true,"CreatedAt":"2019-10-08T00:02:33","Actor":"dotnet-bot","Number":"39123","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39123","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#39123)"},{"Id":"503747647","IsPullRequest":false,"CreatedAt":"2019-10-07T23:44:20","Actor":"ryzngard","Number":"39122","RawContent":null,"Title":"Calling GetTypeInfo on CastExpressionSyntax.Type returns wrong nullable information","State":"open","Body":"```c#\r\n#nullable enable\r\n\r\nusing System;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        object? o = null;\r\n        var s = [|(string?)o|];\r\n        Console.WriteLine(s);\r\n    }\r\n}\r\n```\r\n\r\nwhere `[||]` shows the CastExpressionSyntax being used. \r\n\r\n![image](https://user-images.githubusercontent.com/475144/66356903-a00e6000-e921-11e9-8cfd-ee7fb41f72a9.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/39122","RelatedDescription":"Open issue \"Calling GetTypeInfo on CastExpressionSyntax.Type returns wrong nullable information\" (#39122)"},{"Id":"503739283","IsPullRequest":true,"CreatedAt":"2019-10-07T23:15:45","Actor":"CyrusNajmabadi","Number":"39121","RawContent":null,"Title":"Add support for static lambdas.","State":"open","Body":"WIP:\r\n\r\nAdds impl support for https://github.com/dotnet/csharplang/issues/275.\r\n\r\nThis should be reviewed with whitespace diffs off.\r\n\r\nFollowup to https://github.com/dotnet/roslyn/pull/39118\r\n\r\n- [x] Update syntax model to support a modifiers list for lambdas (https://github.com/dotnet/roslyn/pull/39118).\r\n- [x] Add parsing support for static lambdas (simple and parenthesized).\r\n- [x] Add binding checking that static lambdas do not capture anything.\r\n- [x] Tests.","Url":"https://github.com/dotnet/roslyn/pull/39121","RelatedDescription":"Open PR \"Add support for static lambdas.\" (#39121)"},{"Id":"503731282","IsPullRequest":false,"CreatedAt":"2019-10-07T22:50:00","Actor":"heejaechang","Number":"39120","RawContent":null,"Title":"IntroduceVariableCondeRefactoringProvider threw an exception","State":"open","Body":"System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: position\r\n   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)\r\n   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)","Url":"https://github.com/dotnet/roslyn/issues/39120","RelatedDescription":"Open issue \"IntroduceVariableCondeRefactoringProvider threw an exception\" (#39120)"},{"Id":"503721789","IsPullRequest":true,"CreatedAt":"2019-10-07T22:22:15","Actor":"RikkiGibson","Number":"39119","RawContent":null,"Title":"Add note about testing updated assembly versions","State":"open","Body":"/cc @jaredpar ","Url":"https://github.com/dotnet/roslyn/pull/39119","RelatedDescription":"Open PR \"Add note about testing updated assembly versions\" (#39119)"},{"Id":"503712291","IsPullRequest":true,"CreatedAt":"2019-10-07T21:56:25","Actor":"CyrusNajmabadi","Number":"39118","RawContent":null,"Title":"Relax the shape of lambdas in our syntax model to allow for a list of modifiers.","State":"open","Body":"WIP: personal review.\r\n\r\nThis is desirable if we add static lambdas (https://github.com/dotnet/csharplang/issues/275) as it means we don't put unnecessary syntax model restriction on people writing `static async a => ...` or `async static a => ...`.  Note: the language may choose that only one of these is legal.  But we won't restrict it in the model to make sure that parser resilience and modeling is high quality.","Url":"https://github.com/dotnet/roslyn/pull/39118","RelatedDescription":"Open PR \"Relax the shape of lambdas in our syntax model to allow for a list of modifiers.\" (#39118)"},{"Id":"503709829","IsPullRequest":false,"CreatedAt":"2019-10-07T21:50:24","Actor":"vsfeedback","Number":"39117","RawContent":null,"Title":"Refactor object from different directives","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/741362/refactor-object-from-different-directives.html)._\n\n---\ncan we do refactoring of same object name from different setup in directives especially if the object inside #if(DEBUG) ?\n\n```\n#if (DEBUG)\n\tpublic static ConnectionString CurrentConnectionString = new ConnectionString(&quot;DEVELOPEMENTsqlserver&quot;,&quot;db&quot;,&quot;mgmguardiana&quot;,&quot;password&quot;,false);\n#else\n        public static ConnectionString CurrentConnectionString = new ConnectionString(&quot;PRODUCTIONsqlserver&quot;,&quot;db&quot;,&quot;mgmguardiana&quot;,&quot;password&quot;,false);;\n#endif\n    }\n```\n\nIn this example, if I use ctrl+R+R in `CurrentConnectionString` assume that I'm in debug mode, any reference will be updated only under the current directive(DEBUG), and when switching to release mode, the codes may go broke and need to rename it again.\n\nCurrent steps of refactoring\n1. From screenshot in example at DEBUG mode, press CTRL+R+R to show rename the object of `CurrentConnectionString` into `RenamedConnection` and press ENTER\n2. Run or build in debug mode, no errors will be raise.\n3. Now switch to release assume that you are now ready to deploy the application\n4. Run or build in release mode, errors will be made that all references of `RenamedConnection` are invalid\n5. Refactor the `CurrentConnectionString` into `RenamedConnection` while still in release mode.\n6. Run or build to test\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/22/2019, 11:30 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39117","RelatedDescription":"Open issue \"Refactor object from different directives\" (#39117)"},{"Id":"503708446","IsPullRequest":false,"CreatedAt":"2019-10-07T21:47:06","Actor":"vsfeedback","Number":"39116","RawContent":null,"Title":"Avoid unnecessary casts when refactoring","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/742342/avoid-unnecessary-casts-when-refactoring.html)._\n\n---\nI love the refactoring features of Visual Studio, but I have seen multiple scenarios where it suggests adding unnecessary casts in order to do another refactoring. My most recent one being converting to a conditional expression. Here is the code before refactoring, the refactored code, and what I believe the code should be refactored to:\n\n```\n'Before Refactoring:\nIf useparallel Then : Me.itmNames.ItemsSource = Me.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)})\nElse : Me.itmNames.ItemsSource = Me.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)})\nEnd If\n\n'Refactored By Visual Studio 2019:\nMe.itmNames.ItemsSource = If(useparallel,\n\tMe.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}),\n\tDirectCast(Me.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}), Object))\n\n'Refactored By Me (notice that I do not include the unnecessary DirectCast):\nMe.itmNames.ItemsSource = If(useparallel,\n\tMe.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}),\n\tMe.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}))\n```\nThis is, of course, not hard to change, but neither are things like removing unnecessary parentheses and some other refactorings. I just thought I would mention this as a refactoring improvement since it adds an extra method (as opposed to just making the code look prettier but still the same after being compiled).\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/22/2019, 11:25 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39116","RelatedDescription":"Open issue \"Avoid unnecessary casts when refactoring\" (#39116)"},{"Id":"503704311","IsPullRequest":false,"CreatedAt":"2019-10-07T21:37:11","Actor":"vsfeedback","Number":"39115","RawContent":null,"Title":"Search items from unimported namespaces (Ctrl + T)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/746165/search-items-from-unimported-namespaces-ctrl-t.html)._\r\n\r\n---\r\nPlease, add a feature to find items from unimported namespaces by pressing Ctrl + T, just like in the text editor itself.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Игорь on 9/24/2019, 00:46 PM: \r\n\r\n(private comment, text removed)\r\n#### Jane Wu [MSFT] on 9/25/2019, 01:53 AM: \r\n\r\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\r\n\r\n![94737-1](https://user-images.githubusercontent.com/46729679/66350517-62eda200-e910-11e9-8644-aca2b9800e45.jpg)\r\n\r\n![94738-2](https://user-images.githubusercontent.com/46729679/66350523-654ffc00-e910-11e9-8f5d-7d1556f25ce9.jpg)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/39115","RelatedDescription":"Open issue \"Search items from unimported namespaces (Ctrl + T)\" (#39115)"},{"Id":"503700619","IsPullRequest":false,"CreatedAt":"2019-10-07T21:28:24","Actor":"vsfeedback","Number":"39114","RawContent":null,"Title":"Breakpoint Highlight - C #","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/736961/breakpoint-highlight-c.html)._\n\n---\nThere is no settings to disable breakpoint LINE highlight. I see ther is one for C++ but not for C#.\n\nThe red is too strong, you also lose the context highligting on th eline of you set the colour to black or white.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/17/2019, 07:05 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39114","RelatedDescription":"Open issue \"Breakpoint Highlight - C #\" (#39114)"},{"Id":"503699294","IsPullRequest":false,"CreatedAt":"2019-10-07T21:25:17","Actor":"vsfeedback","Number":"39113","RawContent":null,"Title":"Add support for xmldoc tags on local functions (C# 7.0+)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/739055/add-support-for-xmldoc-tags-on-local-functions-c-7.html)._\n\n---\nSupport for [local functions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions) was added in C# 7.0, which is awesome.  However, decorating a local function with `&lt;summary&gt;...&lt;/summary&gt; ` tags will not produce any Intellisense in Visual Studio 2019 (as of version 16.2.5):\n```\nprivate static string GetText(string path, string filename)\n{\n    /// &lt;summary&gt;\n    /// Append a path separator character to the specified file path.\n    /// &lt;/summary&gt;\n    string AppendPathSeparator(string filepath)\n    {\n        if (!filepath. EndsWith(@&quot;\\&quot;))\n           filepath += @&quot;\\&quot;;\n\nreturn filepath;   \n    }\n\n// No Intellisense for the &quot;AppendPathSeparator&quot; local function will appear here.\n    var sr = File.OpenText(AppendPathSeparator(path) + filename);\n    var text = sr. ReadToEnd();\n    return text;\n} \n```\n\nIt would be great to have some way of producing Intellisense for local functions.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/18/2019, 08:07 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39113","RelatedDescription":"Open issue \"Add support for xmldoc tags on local functions (C# 7.0+)\" (#39113)"},{"Id":"503686309","IsPullRequest":true,"CreatedAt":"2019-10-07T20:55:43","Actor":"dibarbet","Number":"39112","RawContent":null,"Title":"Update roslyn version for 16.5 preview 1","State":"open","Body":"Create the 16.5p1 branch.  Note that there isn't a VS branch for this yet, so I believe we don't need to update the publishdata/vs-deps branches.","Url":"https://github.com/dotnet/roslyn/pull/39112","RelatedDescription":"Open PR \"Update roslyn version for 16.5 preview 1\" (#39112)"},{"Id":"503674540","IsPullRequest":false,"CreatedAt":"2019-10-07T20:31:15","Actor":"vsfeedback","Number":"39111","RawContent":null,"Title":"Automatically fix naming style across file/project/solution","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740419/automatically-fix-naming-style-across-fileprojects.html)._\n\n---\nWould love do see something like what Resharper does: https://www.jetbrains.com/help/resharper/Coding_Assistance__Naming_Style.html#detect\n\nI especially need it when doing the following:\n- I want to create C# classes from some json file. The Paste Special feature is great for that.\n- However, the sample json files I have usually use camel case\n- I need to change to Pascal case\n- Today, VS only allows me to do it one by one, which becomes very tedious as I have tens of properties.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39111","RelatedDescription":"Open issue \"Automatically fix naming style across file/project/solution\" (#39111)"},{"Id":"503666234","IsPullRequest":false,"CreatedAt":"2019-10-07T20:13:37","Actor":"vsfeedback","Number":"39110","RawContent":null,"Title":"Quick Class implementation","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/737464/quick-class-implementation.html)._\n\n---\n<p>I have not yet found a shortcut like this (if it exists please direct me to it).  I would like to be able to use a shortcut keyboard command (i.e. Ctrl+K Ctrl_C : Comment) to be able to instantiate a new class with all the properties set to their respective defaults.  Something like with the cursor being in &quot;new CustomClass&quot; the user could press &quot;Ctrl+C Ctrl+I&quot; for default Class Implementation. </p><pre>CustomClass myClass = new CustomClass {\n    Property1 = &quot;&quot;, // String default\n    Property2 = false, // Bool default\n    Property3 = DateTime.Now, // DateTime Default\n    etc........\n}</pre>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/17/2019, 07:04 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39110","RelatedDescription":"Open issue \"Quick Class implementation\" (#39110)"},{"Id":"503655022","IsPullRequest":false,"CreatedAt":"2019-10-07T19:50:35","Actor":"vsfeedback","Number":"39109","RawContent":null,"Title":"Surround code with curly braces","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740318/surround-code-with-curly-braces.html)._\n\n---\n<p>Requested many times before:</p><p>If code is highlighted and I press { surround selected code with curly braces.  </p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39109","RelatedDescription":"Open issue \"Surround code with curly braces\" (#39109)"},{"Id":"503654785","IsPullRequest":false,"CreatedAt":"2019-10-07T19:50:08","Actor":"vsfeedback","Number":"39108","RawContent":null,"Title":"Add parameter wrap to code cleanup","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/748441/add-parameter-wrap-to-code-cleanup.html)._\n\n---\nWould like to have this feature in code cleanup: https://docs.microsoft.com/en-us/visualstudio/ide/reference/wrap-align-indent-parameters?view=vs-2019\n\nThat way, this could be apply to the entire file, project or solution.\n\nThanks!\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/25/2019, 08:07 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39108","RelatedDescription":"Open issue \"Add parameter wrap to code cleanup\" (#39108)"},{"Id":"503653648","IsPullRequest":false,"CreatedAt":"2019-10-07T19:47:48","Actor":"vsfeedback","Number":"39107","RawContent":null,"Title":"Add or change parameter in an existing method (ReSharper style)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740946/add-or-change-parameter-in-an-existing-method-resh.html)._\n\n---\n<p>This previous feature suggestion was incorrectly marked as included in VS2017. This capability is still not available in the general case.</p><p><a href=\"https://developercommunity.visualstudio.com/content/idea/351698/refactoring-to-add-a-parameter-to-existing-method.html\">https://developercommunity.visualstudio.com/content/idea/351698/refactoring-to-add-a-parameter-to-existing-method.html</a></p><p>The steps provided here: </p><p><a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-parameter?view=vs-2019\">https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-parameter?view=vs-2019</a></p><p>are not applicable generally.</p><p>I have</p><p>-An interface defining a code contract with a particular method</p><p>-Several classes implementing this method</p><p>The add parameter mentioned in the above public doc does not appear in my case (in VS 2019).</p><p>I additionally want the ability to</p><ul><li>Change the type of an existing parameter</li><li>Add new parameters</li><li>Remove existing parameters</li><li>Rename existing parameters</li></ul><p>And I need these changes to take effect on every implementation of the method. Resharper has had this for years. When can we expect this same functionality in Vanilla VS 2019?</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/22/2019, 11:27 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39107","RelatedDescription":"Open issue \"Add or change parameter in an existing method (ReSharper style)\" (#39107)"},{"Id":"503647174","IsPullRequest":false,"CreatedAt":"2019-10-07T19:33:56","Actor":"RikkiGibson","Number":"39106","RawContent":null,"Title":"Go to Definition of Add method for collection element initializers","State":"open","Body":"Related to #38850\r\n\r\nScenario:\r\n\r\n```cs\r\nusing System.Collections;\r\n\r\npublic class C : IEnumerable {\r\n    public void Add(int i, object o) { }\r\n    public void Add(int i) { }\r\n    \r\n    public static void M() {\r\n        _ = new C { { 1, null }, { 2 }, 3 };\r\n    }\r\n    \r\n    public IEnumerator GetEnumerator() => throw null!;\r\n}\r\n```\r\n\r\nExpectation:\r\n- Go to Definition on the curly brace at `{ 1, null }` or `{ 2 }` should go to the Add method referenced by the element initializer\r\n- Go to Definition on the literal 3 probably can't go to the Add method, because the element initializer could be any sort of expression that would have its own definition that we actually want to go to. (any thoughts on this would be appreciated)","Url":"https://github.com/dotnet/roslyn/issues/39106","RelatedDescription":"Open issue \"Go to Definition of Add method for collection element initializers\" (#39106)"},{"Id":"503631781","IsPullRequest":true,"CreatedAt":"2019-10-07T19:00:56","Actor":"CyrusNajmabadi","Number":"39105","RawContent":null,"Title":"Add an IDE storage service benchmark","State":"open","Body":"This helps enable us to make changes to the storage service and ensure that we're not regressing perf.","Url":"https://github.com/dotnet/roslyn/pull/39105","RelatedDescription":"Open PR \"Add an IDE storage service benchmark\" (#39105)"},{"Id":"503623569","IsPullRequest":true,"CreatedAt":"2019-10-07T18:43:46","Actor":"gafter","Number":"39104","RawContent":null,"Title":"Handle a missing case in bad conversion error reporting.","State":"open","Body":"Fixes #39082","Url":"https://github.com/dotnet/roslyn/pull/39104","RelatedDescription":"Open PR \"Handle a missing case in bad conversion error reporting.\" (#39104)"},{"Id":"503611443","IsPullRequest":true,"CreatedAt":"2019-10-07T18:17:37","Actor":"agocke","Number":"39103","RawContent":null,"Title":"Merge master to features/localsinit","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39103","RelatedDescription":"Open PR \"Merge master to features/localsinit\" (#39103)"},{"Id":"503578251","IsPullRequest":false,"CreatedAt":"2019-10-07T17:06:30","Actor":"sharwell","Number":"39102","RawContent":null,"Title":"Use a singleton for AnalyzerActions.Empty","State":"open","Body":"**Version Used**: Unknown\r\n\r\n:link: https://developercommunity.visualstudio.com/content/problem/531240/occasional-outofmemoryexception.html\r\n\r\nOne of the heap dumps showed 3,486,047 instances of Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions, but at most 5,000 were not empty. Using a singleton for the empty case would save a large amount of memory.\r\n\r\nAs a step past this, we could attempt avoid placing empty items in the dictionary at all, and internally treat missing the same as empty.","Url":"https://github.com/dotnet/roslyn/issues/39102","RelatedDescription":"Open issue \"Use a singleton for AnalyzerActions.Empty\" (#39102)"},{"Id":"503563430","IsPullRequest":false,"CreatedAt":"2019-10-07T16:35:34","Actor":"mavasani","Number":"39101","RawContent":null,"Title":"Enable CA1829 for test code in Roslyn.sln","State":"open","Body":"See https://github.com/dotnet/roslyn/pull/39029/files#r331157299","Url":"https://github.com/dotnet/roslyn/issues/39101","RelatedDescription":"Open issue \"Enable CA1829 for test code in Roslyn.sln\" (#39101)"},{"Id":"503556170","IsPullRequest":false,"CreatedAt":"2019-10-07T16:21:20","Actor":"andre-ss6","Number":"39100","RawContent":null,"Title":"NRT - Deeper analysis inside constructor for indirect intialization scenarios","State":"closed","Body":"The `InitializeComponent` scenario:\r\n\r\n```cs\r\npublic class Foo {\r\n    public Foo() { // warning here about _x not being initialized\r\n        InitializeComponent();\r\n    }\r\n\r\n    public InitializeComponent() {\r\n         _x = \"Foo\";\r\n         // initialize fields and stuff\r\n    }\r\n\r\n    private string _x;\r\n}\r\n```\r\n\r\nAlso, happened to me on the first project I'm updating with NRTs:\r\n\r\n```cs\r\npublic class Foo {\r\n    public Foo(Uri baseUrl) {\r\n        baseUrl = null!; // current workaround\r\n        BaseUrl = baseUrl;\r\n    }\r\n\r\n    private Uri _baseUrl;\r\n    public Uri BaseUrl { get => _baseUrl; set { /* some logic*/ _baseUrl = value; } }\r\n}\r\n```\r\n\r\nThe compiler should follow on the method calls inside a constructor to a reasonable depth in order to determine nullability. ","Url":"https://github.com/dotnet/roslyn/issues/39100","RelatedDescription":"Closed issue \"NRT - Deeper analysis inside constructor for indirect intialization scenarios\" (#39100)"},{"Id":"503502392","IsPullRequest":false,"CreatedAt":"2019-10-07T14:49:24","Actor":"tamlin-mike","Number":"39098","RawContent":null,"Title":"Build system feedback","State":"open","Body":"As a first-time builder of any Roslyn code, I thought it could be interesting for you doing this on a daily basis to get some input from someone that tested it out for the first time.\r\n\r\n\r\nDocumentation:\r\n- The instructions for kicking off \"your first build\" is Good Stuff. Short and concise; Four short bullet points. Very good. Gold Star.\r\n\r\n- The \"-help\" switch to eng/build.ps1 should probably be mentioned on the build instructions page. I only found out about it (and other, including vital, options) by inspecting first the cmd files and then that ps-script itself.\r\n\r\n- Disk space requirements could be specified on the Building wiki page. Probably updated on a schedule (every month or so?) and last date measured added to the documentation. Both for no-argument (i.e. Debug) builds and Release builds. At least a ballpark figure would be nice to have. It would have saved me a ton of wasted time and effort. I created a ten GiB VHD and thought  \"This surely must be at least four times of what's required, but let's make it this extremely large to be really, really sure\" - how wrong I was... but more on that later.\r\n\r\n\r\nFlexibility/options:\r\n- I'm missing an option to disable creation of any and all tests.\r\n\r\n- I'm missing an option to disable creation of all the locale directories. To put it mildly, I am more than a little annoyed of all the thousands of locale directories VS itself spews all over the installation, laying waste to both precious disk space and adding filesystem fragmentation something fiercely. I had hoped I wouldn't have to see that repeated in the bin/* output, curtesy of a switch or two.\r\n\r\n- Please, consider using filesystem links for immutable files, where available. Even NTFS has had hardlinks since the 90's. It's not instilling confidence to see gigabyte after gigabyte of redundant copies of the same files in umpteen places. So far into the build process there are f.ex. fourty (40!) copies of Microsoft.CodeAnalysis.Test.Resources.Proprietary.dll, racking up almost 4 GiB. The build has stalled so I don't know how many more redundant copies will be created. That's just the most prominent one. I'm sure there are plenty more.\r\n\r\n- Ability to build a single DLL. If that's impossible due to limitations in _&lt;something&gt;_, at least building a single \"package\" of sorts. Maybe it's possible by going deeper than using Build.cmd? If so, some documentation pointing to the procedure from the short and sweet build instructions could be good.\r\n\r\nIn my case I knew exactly what I needed to get VS stop crashing. I needed to fix one single bug, and build a replacement for one single file, Microsoft.VisualStudio.LanguageServices.dll. Instead of being able to build just that DLL (from what I have found at least), I'm now continually fighting with disk-space running out, running `compact /c /f /s /exe:lzx artifacts\\*` like a madman from a separate shell, while periodically Suspending all the build processes from the Resource Monitor, trying to keep up with the torrent of other stuff it's filling up the volume with - stuff I really  don't want produced. Yeah, it's partially a problem with me not allocating enough disk space, but I couldn't in my wildest imagination think I'd need over ten gigabyte to build a single DLL that's just a hair over 1.5 MB. That points back to the need for some documented info of how much disk space should be expected to be consumed.\r\n\r\n- Many, many warnings about SourceLink \"Source control information is not available\". It seems a bit strange, considering it's a pristine git clone and `git` is indeed available in the path. Granted, it's better than `roslyn-analyzers`, where the same yapping produces build _errors_ instead (though that used a _slightly_ different, but still like `roslyn`itself a beta version), but it's still not good, and is not adding confidence.\r\n\r\nBesides these issues, it seems the build system works pretty well. It could use some work to beat it into better shape, but overall it seems quite straightforward.\r\n\r\nThumbs up.\r\n\r\nMy 0.02.","Url":"https://github.com/dotnet/roslyn/issues/39098","RelatedDescription":"Open issue \"Build system feedback\" (#39098)"},{"Id":"503465550","IsPullRequest":true,"CreatedAt":"2019-10-07T13:49:53","Actor":"mavasani","Number":"39097","RawContent":null,"Title":"Handle null Display string in FxCopAnalyzersSuggestedActionCallback","State":"open","Body":"Fixes #39092\r\nAlso fix VisualStudioUnresolvedAnalyzerReference to correctly forward the Display value to the underlying analyzer reference.","Url":"https://github.com/dotnet/roslyn/pull/39097","RelatedDescription":"Open PR \"Handle null Display string in FxCopAnalyzersSuggestedActionCallback\" (#39097)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"503784732","IsPullRequest":false,"CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Number":"7817","RawContent":null,"Title":"Call generated dll from cpp crash","State":"open","Body":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```","Url":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Open issue \"Call generated dll from cpp crash\" (#7817)"},{"Id":"503304688","IsPullRequest":false,"CreatedAt":"2019-10-07T08:30:51","Actor":"yunekit","Number":"7816","RawContent":null,"Title":"sched_yield infinite loop","State":"open","Body":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work.","Url":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Open issue \"sched_yield infinite loop\" (#7816)"},{"Id":"503145779","IsPullRequest":true,"CreatedAt":"2019-10-06T21:09:25","Actor":"Dotnet-GitSync-Bot","Number":"7815","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7815)"},{"Id":"503134823","IsPullRequest":true,"CreatedAt":"2019-10-06T19:30:50","Actor":"MichalStrehovsky","Number":"7814","RawContent":null,"Title":"Add support for multithreaded compilation to ILC","State":"closed","Body":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff).","Url":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Closed or merged PR \"Add support for multithreaded compilation to ILC\" (#7814)"},{"Id":"502963591","IsPullRequest":true,"CreatedAt":"2019-10-06T04:53:29","Actor":"MichalStrehovsky","Number":"7811","RawContent":null,"Title":"Port fixes from CoreCLR","State":"closed","Body":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793.","Url":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Closed or merged PR \"Port fixes from CoreCLR\" (#7811)"},{"Id":"502974204","IsPullRequest":true,"CreatedAt":"2019-10-05T16:06:41","Actor":"MichalStrehovsky","Number":"7812","RawContent":null,"Title":"Remove global state tracking in DynamicInvokeTemplateDataNode","State":"closed","Body":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable.","Url":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Closed or merged PR \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812)"},{"Id":"502974267","IsPullRequest":true,"CreatedAt":"2019-10-05T16:04:50","Actor":"MichalStrehovsky","Number":"7813","RawContent":null,"Title":"Cache helpers used in IL scanner","State":"closed","Body":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler.","Url":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Closed or merged PR \"Cache helpers used in IL scanner\" (#7813)"},{"Id":"502935521","IsPullRequest":true,"CreatedAt":"2019-10-05T12:47:51","Actor":"MichalStrehovsky","Number":"7810","RawContent":null,"Title":"Update ObjWriter","State":"closed","Body":"Picks up #7802.","Url":"https://github.com/dotnet/corert/pull/7810","RelatedDescription":"Closed or merged PR \"Update ObjWriter\" (#7810)"},{"Id":"502780858","IsPullRequest":true,"CreatedAt":"2019-10-05T06:01:27","Actor":"Dotnet-GitSync-Bot","Number":"7809","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @idlerboris @stephentoub","Url":"https://github.com/dotnet/corert/pull/7809","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7809)"},{"Id":"502527358","IsPullRequest":false,"CreatedAt":"2019-10-04T12:27:49","Actor":"kstreichergb","Number":"7808","RawContent":null,"Title":"dotnet.exe hangs during shutdown","State":"closed","Body":"A hosted application using `BackgroundService` is hanging infinetly on shutdown, in particular when the console application is killed with ctrl+z.\r\n\r\nThe \"finish\" log in the finally in Main will be seen, but the dotnet.exe process keeps running\r\n\r\n```\r\npublic class BaseBackgroundService: BackgroundService{\r\n  private readonly IHostLifetime _hostLifetime;\r\n  private readonly IHostApplicationLifetime _iHostApplicationLifetime;\r\n  \r\n  public BaseBackgroundService(IHostLifetime hostLifetime,\r\n\t\t                             IHostApplicationLifetime iHostApplicationLifetime){\r\n    _hostLifetime = hostLifetime;\r\n    _iHostApplicationLifetime = iHostApplicationLifetime;\r\n }\r\n\r\n  protected override async Task ExecuteAsync(CancellationToken ct)\r\n  {\r\n  try{\r\n        await DoSomething();\r\n  }catch(OperationCanceledException ex)\r\n{\r\n /** ... Reached on CTRL+Z .... **/\r\n}\r\nfinally{\r\n       _iHostApplicationLifetime.StopApplication();\r\n        await _hostLifetime.StopAsync(ct); // clean exit\r\n  \tConsole.WriteLine(\"Completes as expected\");    \r\n  }\r\n/*...*/\r\n}\r\n\r\n```\r\n\tProgram.cs \r\n\tpublic static async Task Main(string[] args){\r\n\ttry\r\n\t{\r\n\t\tIHostBuilder hostBuilder = CreateHostBuilder(args);\r\n\r\n\t\tusing (IHost host = hostBuilder.UseConsoleLifetime().Build())\r\n\t\t{\r\n\t\t\tawait host.RunAsync();\r\n\t\t}\r\n\t}\r\n\t}finally{\r\n\t\tConsole.WriteLine(\"Finished - will be seen. Therefore main exits, but dotnet.exe keeps running\");\r\n\t}\r\n\t}\r\n```\r\n\r\nThe hosted BackgroundService will finish (OperationCanceledException) but the host.RunAsync() will never finish.\r\n\r\nUsing visual and break all\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66196903-9ecb0200-e699-11e9-812f-d3773be75aa4.png)\r\n\r\nAnd repeating it shows the Task ID changes, but the structure remains the same\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66197013-cf12a080-e699-11e9-8529-6ee9df7266ee.png)","Url":"https://github.com/dotnet/corert/issues/7808","RelatedDescription":"Closed issue \"dotnet.exe hangs during shutdown\" (#7808)"},{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"},{"Id":"499907137","IsPullRequest":true,"CreatedAt":"2019-09-29T14:16:14","Actor":"MichalStrehovsky","Number":"7803","RawContent":null,"Title":"Delete ReadyToRun portions of the compiler and test tree","State":"closed","Body":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably.","Url":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Closed or merged PR \"Delete ReadyToRun portions of the compiler and test tree\" (#7803)"},{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"closed","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Closed or merged PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"},{"Id":"494589847","IsPullRequest":true,"CreatedAt":"2019-09-17T14:13:36","Actor":"Dotnet-GitSync-Bot","Number":"7794","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7794","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7794)"},{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"},{"Id":"493430075","IsPullRequest":false,"CreatedAt":"2019-09-16T15:38:33","Actor":"RalfKornmannEnvision","Number":"7790","RawContent":null,"Title":"GC on ARM64 based \"kind of unix\" system","State":"closed","Body":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Closed issue \"GC on ARM64 based \"kind of unix\" system\" (#7790)"},{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T07:35:11","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"},{"Id":"492984849","IsPullRequest":true,"CreatedAt":"2019-09-13T13:52:21","Actor":"Dotnet-GitSync-Bot","Number":"7789","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7789)"},{"Id":"492918947","IsPullRequest":true,"CreatedAt":"2019-09-12T19:11:42","Actor":"Dotnet-GitSync-Bot","Number":"7788","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang","Url":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7788)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"503817875","IsPullRequest":false,"CreatedAt":"2019-10-08T04:25:44","Actor":"Codex-","Number":"3725","RawContent":null,"Title":"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified","State":"open","Body":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated","Url":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Open issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725)"},{"Id":"503747398","IsPullRequest":false,"CreatedAt":"2019-10-07T23:43:25","Actor":"wli3","Number":"3724","RawContent":null,"Title":"BuildWebLarge and similar perf test have wrong snapshot folder","State":"open","Body":"https://github.com/dotnet/sdk/blob/260f37383a4974b478cba2ba67ac7908578f5b07/src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs#L68\r\n\r\nAnd possibly other similar tests. We use the same folder to find the csproj (which is correct), and to do snapshot (not correct). As a result, in BuildWebLarge, only the mvc folder is under snapshot/restore while there are many other projects in the solution are not properly cleaned between test runs. \r\n\r\nHowever, the perf lab has different infra to do this. So once we moved to perf lab, this will no longer be a problem.\r\n\r\nI think this is a low priority issue.","Url":"https://github.com/dotnet/sdk/issues/3724","RelatedDescription":"Open issue \"BuildWebLarge and similar perf test have wrong snapshot folder\" (#3724)"},{"Id":"499924954","IsPullRequest":false,"CreatedAt":"2019-10-07T21:53:28","Actor":"alexandrehtrb","Number":"3696","RawContent":null,"Title":"Make multilanguage project builds","State":"closed","Body":"I propose that dotnet build allows multilanguage .NET projects.\r\n\r\nCurrently, a .NET project needs to be language exclusive, that is, only F#, or only C#, or only VB.NET.\r\n\r\nBut, this could change to allow .fs, .cs and .vb files to be compiled together in a same project.\r\n\r\nThe existing way of approaching this problem in F# is separate F# files in F# projects, C# files in C# projects, and VB.NET files in VB.NET projects.\r\n\r\nI originally created a discussion [here](https://github.com/fsharp/fslang-suggestions/issues/788).","Url":"https://github.com/dotnet/sdk/issues/3696","RelatedDescription":"Closed issue \"Make multilanguage project builds\" (#3696)"},{"Id":"502980437","IsPullRequest":false,"CreatedAt":"2019-10-07T21:49:49","Actor":"smoothdeveloper","Number":"3718","RawContent":null,"Title":"dotnet build --help failing due to sdk version","State":"closed","Body":"When I attempt a command with the `--help` argument, it fails due to mismatch of SDK version \r\n\r\nWould making it work disregarding potential mismatch be more user friendly / sensible?\r\n\r\nCurrently:\r\n\r\n```console\r\nC:\\tmp\\testdotnetnew>dotnet build --help\r\nA compatible installed .NET Core SDK for global.json version [4.2.100] from [C:\\tmp\\testdotnetnew\\global.json] was not found\r\nInstall the [4.2.100] .NET Core SDK or update [C:\\tmp\\testdotnetnew\\global.json] with an installed .NET Core SDK:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nAlso, is there a way to force the sdk to \"go ahead\"? if so, it would be good to be pointed at that in the mismatch error message (with a bit of caution).","Url":"https://github.com/dotnet/sdk/issues/3718","RelatedDescription":"Closed issue \"dotnet build --help failing due to sdk version\" (#3718)"},{"Id":"503665613","IsPullRequest":true,"CreatedAt":"2019-10-07T20:12:15","Actor":"sfoslund","Number":"3723","RawContent":null,"Title":"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue","State":"open","Body":"Add test for #3615 to ensure the DisableImplicitNamespaceImports property solves inferred type variable name issue","Url":"https://github.com/dotnet/sdk/pull/3723","RelatedDescription":"Open PR \"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue\" (#3723)"},{"Id":"503097561","IsPullRequest":true,"CreatedAt":"2019-10-06T14:55:57","Actor":"dotnet-maestro[bot]","Number":"3722","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3722","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3722)"},{"Id":"503047091","IsPullRequest":true,"CreatedAt":"2019-10-06T06:46:26","Actor":"dotnet-maestro[bot]","Number":"3721","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3721","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3721)"},{"Id":"503038463","IsPullRequest":true,"CreatedAt":"2019-10-06T02:50:44","Actor":"dotnet-maestro[bot]","Number":"3720","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3720","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3720)"},{"Id":"502982974","IsPullRequest":false,"CreatedAt":"2019-10-05T16:18:41","Actor":"megakid","Number":"3719","RawContent":null,"Title":"*.pp contentFiles not copied to output directory in 3.0 SDK","State":"open","Body":"I've been digging into this issue whereby a `.pp` file inside a package `contentFiles` (with `copyToOutput=\"true\"`) via `PackageReference` is not copied into the output directory during a `dotnet publish` / `dotnet build`.  This works fine with .NET Core SDK `2.2.*` but is broken in `3.0.100`.  Non-`.pp` files work fine.\r\n\r\nI have debugged the MSBuild process and can see that the files are transformed successfully but they do not get copied to the output unlike non-`.pp` files.\r\n\r\nMy test project/package structure is basic and looks like this:\r\n\r\n`[Library A (TestAbc)] <== (PackageReference) == [Exe B]`\r\n\r\nLibrary A's `.nuspec`:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>TestAbc</id>\r\n    <version>160.0.0</version>\r\n    <authors>TestAbc</authors>\r\n    <owners>TestAbc</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.1\" />\r\n    </dependencies>\r\n    <contentFiles>\r\n      <files include=\"any/any/Test.ps1.pp\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n      <files include=\"any/any/NonTransformed.ps1\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n    </contentFiles>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nExe B's `csproj` (I've also tried targeting `netcoreapp3.0`)\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net472</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"TestAbc\" Version=\"163.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nMy dotnet version:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --version\r\n3.0.100\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --list-sdks\r\n3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nMy build command - I couldn't figure out how to get binlogs from msbuild via the dotnet publish command so I used the `CopyLocalLockFileAssemblies` property workaround although I'm not sure this is required with 3.0 SDK (see [here](https://github.com/dotnet/sdk/pull/2646)):\r\n\r\n`C:/Program Files/dotnet/dotnet.exe --diagnostics msbuild /target:Build /property:PackageOutputPath=C:/Projects/test/bin/packages /property:IncludeSymbols=true /property:IncludeSource=true /property:CopyLocalLockFileAssemblies=true /property:Version=1.0.0 /property:configuration=Release \"C:/Projects/squid2/src/ExeA/ExeA.csproj\" -restore /bl:build.binlog -v:diag`\r\n\r\nAfter this command I see `NonTransformed.ps1` in the output folder but not `Test.ps1` (or `Test.ps1.pp`).\r\nI would expect to see both `.ps1`s in my output folder at that point.\r\n\r\nHere's my debugging so far:\r\n\r\nI see the .pp file getting picked up:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257599-1d579a80-e793-11e9-9f82-74730dc52175.png)\r\n\r\nIt gets copied to a temp directory without the .pp extension (`obj\\Release\\net472\\NuGet\\9374D6CD1CF741AA241FA0906DC657D57C8CB116\\TestAbc\\165.0.0\\Test.ps1` in this case).\r\n\r\nThen I see the preprocessor task running and see that the file has now been overwritten/updated with the template tokens replaced.\r\n \r\n![image](https://user-images.githubusercontent.com/1478003/66257582-f600cd80-e792-11e9-8a0b-9a481c9bab8a.png)\r\n\r\nI notice later in the process that the 2 files are listed side by side but the `TargetPath` looks wrong (to my untrained eye) under the `Test.ps1` element - first difference is the content path is an absolute path for the `NonTransformed.ps1` but a relative path for `Test.ps1`.  The task `AssignTargetPath` is used to generate a `TargetPath` (see [here](https://github.com/microsoft/msbuild/blob/vs16.3/src/Tasks/AssignTargetPath.cs)) which generates the correct one on `NonTransformed.ps1` but not `Test.ps1`.  **UPDATE** From tracing the 2.2 build, I can see it is the same in 2.2 so this is fine.\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257667-fd74a680-e793-11e9-9b07-28edda0a4a23.png)\r\n\r\nI can't figure out where `Test.ps1` is being dropped but later on I clearly see `NonTransformed.ps1` alone in the copy task:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257561-c94cb600-e792-11e9-8f5d-f8bd7aed22e6.png)\r\n\r\nMy output dir afterwards:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258015-0e271b80-e798-11e9-919b-c90d8b39c2bf.png)\r\n\r\nExact same build but with `SDK 2.2.402`:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258002-e46df480-e797-11e9-9d34-cdae57598bac.png)\r\n\r\nI've included my 2.2 and 3.0 binlogs here for comparison:\r\n\r\n[msbuild-binlogs.zip](https://github.com/dotnet/sdk/files/3693524/msbuild-binlogs.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3719","RelatedDescription":"Open issue \"*.pp contentFiles not copied to output directory in 3.0 SDK\" (#3719)"},{"Id":"502925465","IsPullRequest":true,"CreatedAt":"2019-10-05T13:52:03","Actor":"dotnet-maestro[bot]","Number":"3717","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.20\r\n- **Date Produced**: 10/5/2019 7:26 AM\r\n- **Commit**: 45f675b1acc38eaea182bf6ef284d1b13141d134\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.20\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3717","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3717)"},{"Id":"502911797","IsPullRequest":true,"CreatedAt":"2019-10-05T06:45:22","Actor":"dotnet-maestro[bot]","Number":"3716","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.15\r\n- **Date Produced**: 10/5/2019 2:41 AM\r\n- **Commit**: ea8a25eb0679dc4d940623688189885086286adc\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.15\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3716","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3716)"},{"Id":"502901854","IsPullRequest":true,"CreatedAt":"2019-10-05T03:46:00","Actor":"dotnet-maestro[bot]","Number":"3715","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.13\r\n- **Date Produced**: 10/5/2019 12:20 AM\r\n- **Commit**: fd1162d3db7db9c79bf01d32604862f4bee25b96\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.13\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3715","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3715)"},{"Id":"502887934","IsPullRequest":true,"CreatedAt":"2019-10-04T23:56:34","Actor":"wli3","Number":"3714","RawContent":null,"Title":"Update stage0","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3714","RelatedDescription":"Open PR \"Update stage0\" (#3714)"},{"Id":"502887592","IsPullRequest":true,"CreatedAt":"2019-10-04T23:55:16","Actor":"wli3","Number":"3713","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3713","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3713)"},{"Id":"502640875","IsPullRequest":true,"CreatedAt":"2019-10-04T17:16:48","Actor":"dotnet-maestro[bot]","Number":"3712","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/4/2019 12:23 PM\r\n- **Commit**: 50de4c0d1f33599adc6d71ae6d5b8783140c0b83\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.2\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3712","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3712)"},{"Id":"502523605","IsPullRequest":true,"CreatedAt":"2019-10-04T11:16:08","Actor":"dotnet-maestro[bot]","Number":"3711","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191003.14\r\n- **Date Produced**: 10/4/2019 8:06 AM\r\n- **Commit**: 36e40e331b31d9c220fd2553a0a8784d59985c47\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19503.14\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3711","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3711)"},{"Id":"501147875","IsPullRequest":true,"CreatedAt":"2019-10-03T19:31:50","Actor":"dotnet-maestro[bot]","Number":"3702","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.24\r\n- **Date Produced**: 10/2/2019 8:04 AM\r\n- **Commit**: 0b3fcd7a02fd29017f01f01a36ea562c5fda1eec\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.24\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3702","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3702)"},{"Id":"502234506","IsPullRequest":false,"CreatedAt":"2019-10-03T18:47:32","Actor":"wli3","Number":"3710","RawContent":null,"Title":"Use Helix to distribute tests","State":"open","Body":"- [x] Use existing Helix xunit SDK runner to distribute tests\r\n- [ ] Run full framework tests.\r\n  - [ ] Use docker to run full framework tests https://github.com/microsoft/dotnet-framework-docker/issues/313\r\n  - [ ] Check in docker file and get a image \r\n  - [ ] Separate few tests that cannot run in docker. Like C++/CLI tests require VS \r\n- [ ] Run Linux and mac tests\r\n- [ ] Run test as tool tests\r\n- [ ] Split Build tests, there are too many tests in it\r\n","Url":"https://github.com/dotnet/sdk/issues/3710","RelatedDescription":"Open issue \"Use Helix to distribute tests\" (#3710)"},{"Id":"502188632","IsPullRequest":true,"CreatedAt":"2019-10-03T17:09:02","Actor":"crummel","Number":"3709","RawContent":null,"Title":"Use ref-only msbuild packages for tasks","State":"open","Body":"These MSBuild packages used to build tasks are used as references only, and don't need to pick up the versions produced by source-build.\r\n\r\ncc @NikolaMilosavljevic","Url":"https://github.com/dotnet/sdk/pull/3709","RelatedDescription":"Open PR \"Use ref-only msbuild packages for tasks\" (#3709)"},{"Id":"501864414","IsPullRequest":false,"CreatedAt":"2019-10-03T05:40:17","Actor":"christophwille","Number":"3708","RawContent":null,"Title":"Build Order Bug with app.config/BeforeBuild","State":"open","Body":"Please see https://github.com/icsharpcode/ILSpy/issues/1731\r\n\r\nEffectively, only Visual Studio gets the build order wrong, but both of our build servers don't (msbuild). The cause seems that app.config for ILSpy.csproj is built from a template.","Url":"https://github.com/dotnet/sdk/issues/3708","RelatedDescription":"Open issue \"Build Order Bug with app.config/BeforeBuild\" (#3708)"},{"Id":"501756629","IsPullRequest":false,"CreatedAt":"2019-10-02T22:23:15","Actor":"DamianEdwards","Number":"3706","RawContent":null,"Title":"Support ability for FrameworkReference to import analyzers","State":"open","Body":"Request came out of https://github.com/aspnet/AspNetCore/issues/14675\r\n\r\nASP.NET Core app projects today target the Web SDK which auto-imports a set of \"default\" analyzers. There are scenarios however where parts of an ASP.NET Core app are split into class libraries and then referenced from the main app project, but these class libraries use the base SDK, and manually add a `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />` to indicate their reliance on ASP.NET Core features. This, however, results in none of the default analyzers. And given the analyzers are only available via the Web SDK (they literally ship only as part of it) there is no first-class way to enable them.\r\n\r\nThe proposal here is to allow the base SDK to support a `FrameworkReference` declaring it also imports some analyzers, so that class libraries can use them.","Url":"https://github.com/dotnet/sdk/issues/3706","RelatedDescription":"Open issue \"Support ability for FrameworkReference to import analyzers\" (#3706)"},{"Id":"501750161","IsPullRequest":true,"CreatedAt":"2019-10-02T22:03:31","Actor":"tlakollo","Number":"3705","RawContent":null,"Title":"Improve Error Experience","State":"open","Body":"As part of the improve error experience linker issue (see issue https://github.com/mono/linker/issues/653) we find out that an additional flag was needed in order to print warning messages.\r\nThis change mades possible for the linker to print valuable information like warnings when an assembly is unresolved and is going to be skipped. Likely this feature could also work to warning the user when it's using patterns that could break their application.","Url":"https://github.com/dotnet/sdk/pull/3705","RelatedDescription":"Open PR \"Improve Error Experience\" (#3705)"},{"Id":"501446031","IsPullRequest":true,"CreatedAt":"2019-10-02T12:02:07","Actor":"dotnet-maestro[bot]","Number":"3704","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3704","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3704)"},{"Id":"501395765","IsPullRequest":true,"CreatedAt":"2019-10-02T10:05:15","Actor":"dotnet-maestro[bot]","Number":"3703","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.06\r\n- **Date Produced**: 10/7/2019 1:35 AM\r\n- **Commit**: f8bfa4242fb299c1d1a635c069dbfec7870a023b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3703","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3703)"},{"Id":"500849733","IsPullRequest":true,"CreatedAt":"2019-10-01T13:32:38","Actor":"dotnet-maestro[bot]","Number":"3701","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3701","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3701)"},{"Id":"500702486","IsPullRequest":true,"CreatedAt":"2019-10-01T11:07:01","Actor":"dotnet-maestro[bot]","Number":"3699","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190930.27\r\n- **Date Produced**: 10/1/2019 8:05 AM\r\n- **Commit**: dfb28413477684834589b8b23492b48c43726e10\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19480.27\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3699","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3699)"},{"Id":"500712869","IsPullRequest":false,"CreatedAt":"2019-10-01T07:22:15","Actor":"iyhammad","Number":"3700","RawContent":null,"Title":"dotnet publish for sdk 3.x produces different output than sdk 2.x","State":"open","Body":"I've an application the uses .NET Core 2.2 and build against net472.\r\nI discovered that publishing the same app using .NET Core SDK 3.x produces different publish output than SDK 2.x. Below are sample of the different output of the 2 SDKs.\r\n![SDK 2.x](https://user-images.githubusercontent.com/5989020/65941989-03d1ee00-e435-11e9-9c6b-1c34336c86f3.png)\r\n![SDK 3.x](https://user-images.githubusercontent.com/5989020/65942012-0f251980-e435-11e9-8fb9-e9d9c937a7b7.png)\r\n\r\nIf this an intended behavior and not a bug, I believe we should warn people to explicitly specify the required SDK for building their application part of their solution using global.json Otherwise, specially if they are building using cloud tools, the system will be published with missing files.\r\nIf this is bug, I'me ready to share more insights about the application that packages that I'm using to reproduce the bug. \r\n","Url":"https://github.com/dotnet/sdk/issues/3700","RelatedDescription":"Open issue \"dotnet publish for sdk 3.x produces different output than sdk 2.x\" (#3700)"},{"Id":"501830295","IsPullRequest":false,"CreatedAt":"2019-10-01T05:41:13","Actor":"EatonZ","Number":"3707","RawContent":null,"Title":"PreBuild event/target runs twice - during Build and Publish","State":"open","Body":"**Visual Studio Version**: 16.3.1\r\n\r\n**Summary / Steps to Reproduce / Behavior**:\r\nI have a .NET Core 3.0 WinForms application and I have added a prebuild event to my project. It gets added to the csproj like this:\r\n```\r\n<Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\">\r\n  <Exec Command=\"$(ProjectDir)PreBuildTasks.exe\" />\r\n</Target>\r\n```\r\nIt basically launches my prebuild exe, which does a few things, like increment the version in AssemblyInfo. This has always worked fine until I started experimenting with .NET Core and publishing.\r\n\r\nFor context, I am going to add this right before the `Exec Command`:\r\n`<Message Importance=\"high\" Text=\"This is a message\" />`\r\n\r\nWhen I publish the project (right click project, Publish), this is what I see:\r\n![2019-10-01_1-25-35](https://user-images.githubusercontent.com/3020941/65936781-cac15b80-e3eb-11e9-93cf-d41efb6adc93.png)\r\n\r\nIt's clear the prebuild task is running twice. I spent a while researching a way to resolve this problem. The closest solution I found was [this](https://developercommunity.visualstudio.com/content/problem/30395/aspnet-publish-process-runs-build-3-times.html). I added `Condition=\"'$(DeployOnBuild)' != 'true'\"` as directed, but unfortunately it did not do anything. The other solution in that thread says the issue is fixed, so what is happening here?\r\n\r\nThis behavior may be by design, but I decided to open this issue in case it is not, and because I'd like some guidance on the correct way to solve this problem if I am going at this the wrong way. I only want my prebuild task to run on **Build**, not **Publish**.","Url":"https://github.com/dotnet/sdk/issues/3707","RelatedDescription":"Open issue \"PreBuild event/target runs twice - during Build and Publish\" (#3707)"},{"Id":"500442644","IsPullRequest":false,"CreatedAt":"2019-09-30T18:26:00","Actor":"ghosttie","Number":"3698","RawContent":null,"Title":"publishing appears to succeed but dependencies are missing if child project has space in package id","State":"open","Body":"I had a problem that manifested as an [HTTP Error 500.31 - ANCM Failed to Find Native Dependencies](https://github.com/aspnet/AspNetCore/issues/14443) error which was misleading.\r\n\r\nThe problem turned out to be that the main project had references to other projects that had spaces in their package ids, which somehow kept them from being published correctly, even though there was no error at publish time.\r\n\r\nThis was working in .NET Core 2.2 but is not working in 3.0.\r\n\r\nAlthough there's a simple workaround (remove the spaces) I think this should be fixed, because it worked in previous versions, the error message doesn't lead to a solution, and the package id was set automatically when the project was created so it should have been set to a valid value.\r\n\r\nAn ASP.NET Core maintainer said that it wasn't a bug in their code and to try reporting it here.","Url":"https://github.com/dotnet/sdk/issues/3698","RelatedDescription":"Open issue \"publishing appears to succeed but dependencies are missing if child project has space in package id\" (#3698)"},{"Id":"500287421","IsPullRequest":true,"CreatedAt":"2019-09-30T13:44:40","Actor":"vitek-karas","Number":"3697","RawContent":null,"Title":"Implement writing includedFrameworks references for self-contained apps","State":"open","Body":"For self-contained apps which are of the right version (to maintain backward compat), write the framework references to a new `includedFrameworks` property in `.runtimeconfig.json`.\r\n\r\nWhen the native hosting APIs are used to load a managed component into a process which is running a .NET Core app, the hosting layer should validate that the new component framework requirements are met by the frameworks loaded into the process already. This is to allow the new component to communicate with the app (same FX types), but also to overcome the fact that we don't want to load frameworks twice ever.\r\n\r\nIn order to validate the framework references declared by the new component, the host must know what frameworks are loaded into the process. For framework dependent apps this works fine as the host knows which frameworks it resolved during the app startup. But for self-contained apps, the host doesn't know as everything looks like an app to it.\r\n\r\nThis change adds he new `includedFrameworks` property to the `.runtimeconfig.json` which will be used for self-contained apps (only, it should not occur when `framework` or `frameworks` properties are used). It will contain the list of frameworks which were used to build the self-contained apps. The format is the same as `frameworks` property content.\r\n\r\nTo maintain strict backward compatibility, this change will only write the new property to projects targeting `netcoreapp3.1` or higher.\r\n\r\nAs coded this assumes the change will be approved for 3.1. If it's rejected, I will follow up with a change which will make the new property occur only for 5.0 and above.\r\n\r\n#3541 - master (5.0) version","Url":"https://github.com/dotnet/sdk/pull/3697","RelatedDescription":"Open PR \"Implement writing includedFrameworks references for self-contained apps\" (#3697)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1181036647447580672","CreatedAt":"2019-10-07T02:40:54+00:00","UserScreenname":"dotnet","Text":"Nice! 😀 https://t.co/EzPOxi6RQM","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":29,"FavoriteCount":2,"RawContent":null},{"Id":"1179886895251148801","CreatedAt":"2019-10-03T22:32:11+00:00","UserScreenname":"dotnet","Text":"Thank you to all who participated in #dotNETConf! Please help us improve the event next year by providing your feed… https://t.co/pik2pOve9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"1179802961238585344","CreatedAt":"2019-10-03T16:58:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"1179116521290960902","CreatedAt":"2019-10-01T19:31:00+00:00","UserScreenname":"dotnet","Text":"ICYMI: @nopCommerce published a step-by-step guide on migrating to https://t.co/iOiV9r53NV Core. Check it out: https://t.co/oAy68vNBJw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null},{"Id":"1178341418064138245","CreatedAt":"2019-09-29T16:11:01+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is now available on demand!\n👍 83 speakers\n👍 77 sessions\n👍 40+ hours\n👍 200+ local events around the glob… https://t.co/c5lz2EkS4C","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":304,"FavoriteCount":166,"RawContent":null},{"Id":"1178059427242377217","CreatedAt":"2019-09-28T21:30:29+00:00","UserScreenname":"dotnet","Text":"Hi 👋 @timheuer. Welcome back in @dotnet land. 😀 https://t.co/85GRHHLARg","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":87,"FavoriteCount":8,"RawContent":null},{"Id":"1177599991445106695","CreatedAt":"2019-09-27T15:04:51+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf live event may be over, but that just means that all the sessions are now available to watch whenev… https://t.co/iwCcdYUvJ3","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":10610,"FavoriteCount":972,"RawContent":null}]}},"RunOn":"2019-10-08T05:30:36.6697481Z","RunDurationInMilliseconds":15406}