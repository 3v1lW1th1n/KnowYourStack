{"Data":{"Blog":{"FeedItems":[{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7953909422","Type":"PullRequestEvent","CreatedAt":"2018-07-12T04:42:43","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18879","RelatedDescription":"Merged pull request \"Fix Windows arm64 corefx builds\" (#18879) at dotnet/coreclr","RelatedBody":""},{"Id":"7953903096","Type":"PullRequestEvent","CreatedAt":"2018-07-12T04:39:58","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18753","RelatedDescription":"Merged pull request \"CoreFX CI Unix\" (#18753) at dotnet/coreclr","RelatedBody":"Unix Version of  #18365 \r\nThe work left to do on this is to add currently failing tests. \r\n\r\ncc @RussKeldorph  @sergiy-k "},{"Id":"7953755579","Type":"IssuesEvent","CreatedAt":"2018-07-12T03:36:44","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18069","RelatedDescription":"Closed issue \"Sub-optimal codegen when using Sse.StaticCast<TFrom,TTo>() with non-VEX encoded HW intrinsics\" (#18069) at dotnet/coreclr","RelatedBody":"Below is the source code (basically this is an example of partial vector update code trimmed down for repro):\r\n\r\n            // Setup constants\r\n            Vector128<ushort> valuesIncrement = Sse2.SetAllVector128((ushort)0x0001U); // <== no. 1\r\n            Vector128<ushort> opCookie = Sse.StaticCast<ulong, ushort>( //<== no. 2\r\n                Sse2.SetVector128(\r\n                    0x0001_0002_0003_0004UL,\r\n                    0x0005_0006_0007_0008UL));\r\n\r\n            // Setup initial condition\r\n            Vector128<ushort> values = Sse2.SetVector128(\r\n                (ushort)0x1111U, (ushort)0x2222U, (ushort)0x3333U, (ushort)0x4444U,\r\n                (ushort)0x5555U, (ushort)0x6666U, (ushort)0x7777U, (ushort)0x8888U);\r\n\r\n            // Simulate op\r\n            Vector128<ushort> updateSelector = Sse2.SetAllVector128((ushort)0x0004U);\r\n            Vector128<ushort> updateMask = Sse2.CompareEqual(updateSelector, opCookie);\r\n            Vector128<ushort> newValues = Sse2.AddSaturate(values, valuesIncrement);\r\n\r\n            // Generate codegen issue\r\n            values =\r\n                Sse.StaticCast<byte, ushort>(\r\n                    Sse41.BlendVariable(\r\n                        Sse.StaticCast<ushort, byte>(values),\r\n                        Sse.StaticCast<ushort, byte>(newValues),\r\n                        Sse.StaticCast<ushort, byte>(updateMask)));\r\n\r\n            Console.WriteLine(values);\r\n\r\nWith  my i5-750 CPU (Nehalem uarch) which does not support VEX encoding, I've got the following asm code with .NET Core 2.1 RC1 JITter (look for the `PBLENDVB` instruction down below):\r\n\r\n```\r\n> 000007FE664F5D23  mov         ecx,1  \r\n> 000007FE664F5D28  movd        xmm0,ecx  \r\n> 000007FE664F5D2C  movaps      xmm1,xmm0  \r\n> 000007FE664F5D2F  punpcklwd   xmm1,xmm0  \r\n> 000007FE664F5D33  movaps      xmm0,xmm1  \r\n> 000007FE664F5D36  pshufd      xmm0,xmm0,0  \r\n>             Vector128<ushort> opCookie = Sse.StaticCast<ulong, ushort>(\r\n>                 Sse2.SetVector128(\r\n>                     0x0001_0002_0003_0004UL,\r\n>                     0x0005_0006_0007_0008UL));\r\n> 000007FE664F5D3B  mov         rcx,1000200030004h  \r\n> 000007FE664F5D45  movq        xmm1,rcx  \r\n> 000007FE664F5D4A  mov         rcx,5000600070008h  \r\n> 000007FE664F5D54  movq        xmm2,rcx  \r\n> 000007FE664F5D59  punpcklqdq  xmm2,xmm1  \r\n> 000007FE664F5D5D  movaps      xmm1,xmm2  \r\n> \r\n>             // Setup initial condition\r\n>             Vector128<ushort> values = Sse2.SetVector128(\r\n>                 (ushort)0x1111U, (ushort)0x2222U, (ushort)0x3333U, (ushort)0x4444U,\r\n>                 (ushort)0x5555U, (ushort)0x6666U, (ushort)0x7777U, (ushort)0x8888U);\r\n> 000007FE664F5D60  mov         ecx,8888h  \r\n> 000007FE664F5D65  movd        xmm2,ecx  \r\n> 000007FE664F5D69  mov         ecx,7777h  \r\n> 000007FE664F5D6E  pinsrw      xmm2,ecx,1  \r\n> 000007FE664F5D73  mov         ecx,6666h  \r\n> 000007FE664F5D78  pinsrw      xmm2,ecx,2  \r\n> 000007FE664F5D7D  mov         ecx,5555h  \r\n> 000007FE664F5D82  pinsrw      xmm2,ecx,3  \r\n> 000007FE664F5D87  mov         ecx,4444h  \r\n> 000007FE664F5D8C  pinsrw      xmm2,ecx,4  \r\n> 000007FE664F5D91  mov         ecx,3333h  \r\n> 000007FE664F5D96  pinsrw      xmm2,ecx,5  \r\n> 000007FE664F5D9B  mov         ecx,2222h  \r\n> 000007FE664F5DA0  pinsrw      xmm2,ecx,6  \r\n> 000007FE664F5DA5  mov         ecx,1111h  \r\n> 000007FE664F5DAA  movaps      xmm6,xmm2  \r\n> 000007FE664F5DAD  pinsrw      xmm6,ecx,7  \r\n> \r\n>             // Simulate op\r\n>             Vector128<ushort> updateSelector = Sse2.SetAllVector128((ushort)0x0004U);\r\n> 000007FE664F5DB2  mov         ecx,4  \r\n> 000007FE664F5DB7  movd        xmm2,ecx  \r\n> 000007FE664F5DBB  movaps      xmm3,xmm2  \r\n> 000007FE664F5DBE  punpcklwd   xmm3,xmm2  \r\n> 000007FE664F5DC2  movaps      xmm2,xmm3  \r\n> 000007FE664F5DC5  pshufd      xmm2,xmm2,0  \r\n>             Vector128<ushort> updateMask = Sse2.CompareEqual(updateSelector, opCookie);\r\n> 000007FE664F5DCA  pcmpeqw     xmm1,xmm2  \r\n>             Vector128<ushort> newValues = Sse2.AddSaturate(values, valuesIncrement);\r\n> 000007FE664F5DCE  paddusw     xmm0,xmm6  \r\n> \r\n>             // Generate codegen issue\r\n>             values =\r\n>                 Sse.StaticCast<byte, ushort>(\r\n>                     Sse41.BlendVariable(\r\n>                         Sse.StaticCast<ushort, byte>(values),\r\n>                         Sse.StaticCast<ushort, byte>(newValues),\r\n>                         Sse.StaticCast<ushort, byte>(updateMask)));\r\n> 000007FE664F5DD2  movups      xmmword ptr [rbp-4D0h],xmm0  \r\n> 000007FE664F5DD9  movaps      xmm0,xmm1  \r\n> 000007FE664F5DDC  movups      xmm1,xmmword ptr [rbp-4D0h]  \r\n> 000007FE664F5DE3  movaps      xmm2,xmm6  \r\n> 000007FE664F5DE6  pblendvb    xmm2,xmm1,xmm0  <===========================\r\n> 000007FE664F5DEB  movaps      xmm6,xmm2  \r\n> \r\n>             Console.WriteLine(values);\r\n> 000007FE664F5DEE  mov         rcx,7FE664E6750h  \r\n> 000007FE664F5DF8  call        000007FEC5FB1940  \r\n> 000007FE664F5DFD  mov         rcx,rax  \r\n> 000007FE664F5E00  movups      xmmword ptr [rcx+8],xmm6  \r\n> 000007FE664F5E04  call        000007FE664F3088\r\n\r\n```\r\nThere are lots of `MOVxPS` before `PBLENDVB` for which I can't see any purpose, some spilling the register's content on stack and then loading it back. `Sse41.BlendVariable()` is not the only HW intrinsic which displays the issue when input vectors are typecasted before being set as parameters, but it gives the worst case seen by me so far, esp. taking into account that the blend insn is not really fast, and there is no good general case alternative (the only viable one is a sequence of And + AndNot + Or). \r\nI have feeling that `Sse.StaticCast<TFrom,TTo>()` contributes a lot to presence of `MOVxPS`, whereas it is supposed to be just typecasting operation triggering something during compile time, but not at runtime. The `MOVxPS` insns do not always appear, looks like codegen optimizes some away, but it's hard to predict - it is common case to see ~30 such insns within the span of 85-90 SSE insns when my code is JITted, and it's obvious that at most half of them are really required. Although I know pre-VEX CPUs are old :-) to align to, it's obvious that there is codegen issue.\r\n\r\nGetting back to the issue, it is interesting to note that if one would swap two first statements in the source code (marked as \"line no. 1\" and \"line no. 2\"), then the codegen is much cleaner:\r\n\r\n```\r\n>             Vector128<ushort> newValues = Sse2.AddSaturate(values, valuesIncrement);\r\n> 000007FE64285DCE  paddusw     xmm1,xmm6  \r\n> \r\n>             // Generate codegen issue\r\n>             values =\r\n>                 Sse.StaticCast<byte, ushort>(\r\n>                     Sse41.BlendVariable(\r\n>                         Sse.StaticCast<ushort, byte>(values),\r\n>                         Sse.StaticCast<ushort, byte>(newValues),\r\n>                         Sse.StaticCast<ushort, byte>(updateMask)));\r\n> 000007FE64285DD2  movaps      xmm2,xmm6  \r\n> 000007FE64285DD5  pblendvb    xmm2,xmm1,xmm0  \r\n> 000007FE64285DDA  movaps      xmm6,xmm2  \r\n> \r\n>             Console.WriteLine(values);\r\n> 000007FE64285DDD  mov         rcx,7FE64276750h  \r\n> 000007FE64285DE7  call        000007FEC3D41940  \r\n> 000007FE64285DEC  mov         rcx,rax  \r\n> 000007FE64285DEF  movups      xmmword ptr [rcx+8],xmm6  \r\n> 000007FE64285DF3  call        000007FE64283088  \r\n```\r\n\r\n(Just checked with Haswell CPU - no major issues appear when VEX-encoded)"},{"Id":"7953736677","Type":"PullRequestEvent","CreatedAt":"2018-07-12T03:29:07","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18876","RelatedDescription":"Merged pull request \"Fix VEX.vvvv encoding for AVX.BlendVariable\" (#18876) at dotnet/coreclr","RelatedBody":"Fix #18875\r\n\r\n@CarolEidt @tannergooding PTAL"},{"Id":"7953736668","Type":"IssuesEvent","CreatedAt":"2018-07-12T03:29:07","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18875","RelatedDescription":"Closed issue \"[RyuJIT] Avx.BlendVariable has incorrect VEX.vvvv encoding with containment form\" (#18875) at dotnet/coreclr","RelatedBody":"https://github.com/dotnet/coreclr/issues/18815 has been fixed by https://github.com/dotnet/coreclr/pull/18849, but a new bug appears that `vblendvp*` always uses the default VEX.vvvv (XMM0) to encode the first argument.\r\n\r\ncc @CarolEidt @tannergooding "},{"Id":"7953587172","Type":"PullRequestEvent","CreatedAt":"2018-07-12T02:30:57","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18880","RelatedDescription":"Merged pull request \"Remove TODO comment from CancellationTokenRegistration.Unregister\" (#18880) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/14903"},{"Id":"7953491470","Type":"PullRequestEvent","CreatedAt":"2018-07-12T01:54:11","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18880","RelatedDescription":"Opened pull request \"Remove TODO comment from CancellationTokenRegistration.Unregister\" (#18880) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/14903"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7947016430","Type":"PullRequestEvent","CreatedAt":"2018-07-11T00:05:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/796","RelatedDescription":"Merged pull request \"Breakdown APIs by namespace\" (#796) at dotnet/standard","RelatedBody":"We don't want to have all the .NET Standard APIs in a single C# file as GitHub really doesn't like huge files. That's why the API set is split into multiple files.\r\n\r\nPreviously, the contents of the .NET Standard reference assembly was split by the corresponding assembly in .NET Framework, i.e. it had filenames like \"mscorlib.cs\" and \"System.Core.cs\". This isn't very useful as the assembly factoring of .NET Framework is really completely irrelevant for the API surface of .NET Standard.\r\n\r\nThis splits the APIs by namespace (done with a [small Roslyn based rewrite](https://gist.github.com/terrajobst/b5403d74b0511149a70d6b98eec53216)).\r\n\r\nAlso, I diffed the resulting `netstandard.dll` with the current one to ensure this introduces no API differences."},{"Id":"7946924545","Type":"PullRequestEvent","CreatedAt":"2018-07-10T23:31:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/796","RelatedDescription":"Opened pull request \"Breakdown APIs by namespace\" (#796) at dotnet/standard","RelatedBody":"We don't want to have all the .NET Standard APIs in a single C# file as GitHub really doesn't like huge files. That's why the API set is split into multiple files.\r\n\r\nPreviously, the contents of the .NET Standard reference assembly was split by the corresponding assembly in .NET Framework, i.e. it had filenames like \"mscorlib.cs\" and \"System.Core.cs\". This isn't very useful as the assembly factoring of .NET Framework is really completely irrelevant for the API surface of .NET Standard.\r\n\r\nThis splits the APIs by namespace."},{"Id":"7938907741","Type":"IssuesEvent","CreatedAt":"2018-07-09T17:02:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/786","RelatedDescription":"Closed issue \"[Question] Using UWP APIs from .NET Standard\" (#786) at dotnet/standard","RelatedBody":"I have a PCL targeting .NET Framework 4.6 & UWP 10.0.10240 that I'm trying to convert to .NET Standard. It is actually used to share code that uses some UWP APIs that are available on desktop as well. I currently have these references in the project file:\r\n\r\n```xml\r\n<Reference Include=\"System.Runtime.WindowsRuntime\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n</Reference>\r\n<Reference Include=\"Windows\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n</Reference>\r\n```\r\n\r\nBased on the target frameworks, I figured that my desired version of .NET Standard would be 1.3. However I'm getting compilation errors about missing mscorlib whenever I use any of the UWP APIs.\r\n\r\nThis is the new csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Runtime.WindowsRuntime\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Windows\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nand a small example:\r\n```c#\r\nusing Windows.Storage;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var folder = KnownFolders.PicturesLibrary; // error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\r\n    }\r\n}\r\n```\r\n\r\nI noticed that if I target `netstandard2.0` instead, the compilation succeeds. But since I'm trying to target all versions of UWP, I can't afford that. Is it impossible to use these APIs from 1.3? Are PCLs the only option? Thank you (Sorry if this is not the appropriate repo)"},{"Id":"7936811887","Type":"IssuesEvent","CreatedAt":"2018-07-09T10:39:53","Actor":"stijnherreman","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/795","RelatedDescription":"Opened issue \"It's not possible to make a .NET Standard project depend on a .NET Framework project, to ensure build order\" (#795) at dotnet/standard","RelatedBody":"I have a .NET Standard project that needs to depend on a .NET Framework project, to ensure build order of the projects. The .NET Framework project generates a file in an `AfterTargets=\"Build\"` target (using [NSwag.MSBuild](https://github.com/RSuter/NSwag/wiki/MSBuild)), and this file is added as a *linked file* in the .NET Standard project.\r\n\r\n**Solution1.sln**\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27703.2035\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary1\", \"ClassLibrary1\\ClassLibrary1.csproj\", \"{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {DC8EDB39-5B76-4A28-BC1A-351F2CA1269C}\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\n**ClassLibrary1\\ClassLibrary1.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**ClassLibrary2\\ClassLibrary2.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the solution builds as expected.\r\n\r\nNow make ClassLibrary2 depend on ClassLibrary1:\r\n\r\n**Solution1.sln**\r\n```\r\n...\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8} = {CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\r\n\tEndProjectSection\r\nEndProject\r\n...\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the following error is thrown:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300\\Microsoft.Common.CurrentVersion.targets(1656,5): error : Project 'C:\\...\\Solution1\\ClassLibrary1\\ClassLibrary1.csproj' targets 'net471'. It cannot be referenced by a project that targets '.NETStandard,Version=v2.0'. [C:\\...\\Solution1\\ClassLibrary2\\ClassLibrary2.csproj]\r\n\r\nClassLibrary2 doesn't reference ClassLibrary1 in a way that is technically impossible, so I expect this to work instead of throwing an error."},{"Id":"7934327248","Type":"IssuesEvent","CreatedAt":"2018-07-08T17:53:27","Actor":"Pilchie","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/760","RelatedDescription":"Closed issue \"Unable to properly debug a netstandard project when starting a external executable\" (#760) at dotnet/standard","RelatedBody":"### Summary\r\n\r\nDebugging doesnt seem to work properly when you start a net framework exe from a netstandard project through the Debug Launch setting. Everything else seems to be working fine.\r\n\r\nWhen testing inside a game engine called duality I noticed this behavior. Latter on I found out that I can reproduce this in a separate project as well.\r\n\r\nSome background info: In duality you add functionality through plugins which currently are portable projects. We want to eventually change this to netstandard projects. Plugins themselves are not runnable but instead we run duality itself when you try to run a plugin in VS. This will load all the plugins so you can proceed to debugging your plugin.\r\n\r\nNote: the attached test project was simplified as much as possible to isolate the problem and thus does not include duality.\r\n\r\n### How to reproduce\r\n\r\n- Download and open the attached test project.\r\n- RebuildBuild the solution and start `ClassLibrary1`. This will actually start the exe generated by `NetStandardDebugTest`. Note that it will run properly.\r\n- Now set a breakpoint and run it again. Note that the break point will not work.\r\n- Now try to pause the execution. You will get a Unknown error 0x80004005\r\n\r\n### Attachments\r\n\r\n- [NetStandardDebugTest.zip](https://github.com/AdamsLair/duality/files/2048379/NetStandardDebugTest.zip)\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7953598408","Type":"PullRequestEvent","CreatedAt":"2018-07-12T02:35:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31010","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26712-01 (master)\" (#31010) at dotnet/corefx","RelatedBody":""},{"Id":"7953560078","Type":"PullRequestEvent","CreatedAt":"2018-07-12T02:20:40","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31009","RelatedDescription":"Opened pull request \"[release/2.1] Ensure ConcurrentBag's TryTake is linearizable (#30947)\" (#31009) at dotnet/corefx","RelatedBody":"Port #30947 to release/2.1.\r\nFixes https://github.com/dotnet/corefx/issues/30781"},{"Id":"7953545061","Type":"PullRequestEvent","CreatedAt":"2018-07-12T02:14:45","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30947","RelatedDescription":"Merged pull request \"Ensure ConcurrentBag's TryTake is linearizable\" (#30947) at dotnet/corefx","RelatedBody":"For .NET Core 2.0, I ported the ThreadPool's work-stealing implementation to ConcurrentBag, leading to significant performance throughput and allocation improvements.  However, there's a subtle difference in the concurrency guarantees the ThreadPool's implementation provided from what ConcurrentBag needs, which ends up breaking certain usage patterns on top of ConcurrentBag.\r\n\r\nSpecifically, ThreadPool's \"steal\" implementation need not be fully linearizable.  It's possible for a thread to see the bag's count as 1, and then while the thread is doing a take/steal for its count to never drop below 1, but for the steal to still fail, even though there was always an item available.  This is ok for the thread pool because it manages a known count of work items in the queues separately, and if it sees that there are still items available after a steal has failed, it'll try again.  That \"try again\" logic provided above the work-stealing queue thus didn't make it over to ConcurrentBag, which breaks some usages of ConcurrentBag, in particular cases where a type like BlockingCollection is wrapping the bag and managing its own count.  It's possible now for BlockingCollection to know that there's an item in the bag but to then fail to take it, which causes problems such as exceptions being thrown.\r\n\r\nThe fix is to port back the relevant portion of ConcurrentBag from .NET Core 1.x / .NET Framework, where local push operations on a list track the number of times the list transitions from empty to non-empty.  A steal operation then looks at those counts prior to doing the steal, and if the steal fails, it looks again after: if the count has increased, it retries.  This unfortunately means that local pushes on small lists are now more expensive than in .NET Core 2.0/2.1, as if there are <= 2 items in the list, it takes the lock, but this seems unavoidable given the work-stealing design.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/30781\r\ncc: @kouvel, @tarekgh, @ReubenBond\r\nPlease pay close attention to the details of the change.  I've convinced myself that it's correct, but I've also been staring at it for a while, so it's very possible I've missed something.  I tried to keep the logic as close to the original .NET Core 1.x / .NET Framework logic as possible.  The main difference is that rather than having each list maintain its own empty-to-nonempty transition count, I have a single count that's incremented via interlocked increment by all of them.  I did that in part to keep things simpler, even though it adds a bit more expense, but also because I couldn't convince myself that the original logic used by netfx here was actually correct; if you can, we could consider switching to that, which would make some adds slightly less expensive while making steals more expensive."},{"Id":"7953517597","Type":"PullRequestEvent","CreatedAt":"2018-07-12T02:04:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31008","RelatedDescription":"Opened pull request \"Expose/test CancellationTokenRegistration.Unregister\" (#31008) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/14903\r\ncc: @kouvel, @tarekgh "},{"Id":"7953278902","Type":"PullRequestEvent","CreatedAt":"2018-07-12T00:28:09","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31004","RelatedDescription":"Merged pull request \"Update CoreClr, CoreSetup to preview1-26711-07, preview1-26711-04, respectively (master)\" (#31004) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7953927929","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:51:03","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5922","RelatedDescription":"Closed issue \"NullReferenceException in CancellationTokenSource.InternalRegister\" (#5922) at dotnet/corert","RelatedBody":"I'm hitting a NRE in `CancellationTokenSource.InternalRegister` on macOS. Not sure how to debug it though.\r\n\r\n```cs\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1, Object, SynchronizationContext, ExecutionContext) + 0x205\r\n   at System.Threading.CancellationToken.Register(Action`1, Object, Boolean, Boolean) + 0xd7\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken) + 0x7f\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken) + 0xe9\r\n   at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) + 0xe9\r\n```\r\n"},{"Id":"7953921969","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:48:21","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6041","RelatedDescription":"Closed issue \"Odd threading behavior - Thread.CurrentThread.ManagedThreadId != Environment.ManagedThreadId\" (#6041) at dotnet/corert","RelatedBody":"I'm getting a `The write lock is being released without being held` exception when exiting write mode on a `ReaderWriterLockSlim` on macOS.\r\n\r\nDebugging this issue has led me to conclude, that apparently my call to`ExitWriteLock` happens on a different thread than where I started, albeit in a weird way.\r\n\r\nWhen I debug it, `Thread.CurrentThread.ManagedThreadId` will indicate I'm still on thread 1 where I acquired the lock, but `Environment.ManagedThreadId` which is what `ReaderWriterLockSlim` uses, indicates I'm on thread 6.\r\nThis does not seem to happen on CoreCLR.\r\n\r\nThe code paths involved do not include any calls to Thread.Start or asynchronous Task code. It really all should be happening on the same thread (which `Thread.CurrentThread.ManagedThreadId` also seems to indicate is true).\r\nThe rest of the app does have asynchronous Task code though.\r\n\r\nUnfortunately, I haven't yet been able to make a repro case. It does seem to make a difference though if GC is invoked between the calls to EnterWriteLock and ExitWriteLock.\r\nAny ideas as how to better debug this?\r\n\r\n\r\nThis is basically what I'm doing, but I don't think this helps much.\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\n\r\nnamespace Test\r\n{\r\n\r\n    public struct WriteLock : IDisposable\r\n    {\r\n        private readonly LockManager lockManager;\r\n\r\n        internal WriteLock(LockManager lockManager)\r\n        {\r\n            this.lockManager = lockManager;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.lockManager.ReleaseWriteLock();\r\n        }\r\n    }\r\n\r\n    public class LockManager : IDisposable\r\n    {\r\n        private ReaderWriterLockSlim readerWriterLock;\r\n\r\n        public LockManager()\r\n        {\r\n            this.readerWriterLock = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);\r\n        }\r\n\r\n        public IDisposable AcquireWriteLock()\r\n        {\r\n            // Enter the lock\r\n            if (!this.readerWriterLock.TryEnterWriteLock(-1))\r\n            {\r\n                throw new Exception(\"Could not enter write lock\");\r\n            }\r\n            Console.WriteLine(\"Entered write lock: \" + Thread.CurrentThread.ManagedThreadId);\r\n\r\n            // Return a new instance of a write lock\r\n            return new WriteLock(this);\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.Dispose(true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        internal void ReleaseReadLock()\r\n        {\r\n            this.readerWriterLock.ExitReadLock();\r\n        }\r\n\r\n        internal void ReleaseWriteLock()\r\n        {\r\n            this.readerWriterLock.ExitWriteLock();\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            Console.WriteLine(\"Disposing lock manager... disposing: \" + disposing);\r\n            if (disposing)\r\n            {\r\n                if (this.readerWriterLock != null)\r\n                {\r\n                    this.readerWriterLock.Dispose();\r\n                    this.readerWriterLock = null;\r\n                }\r\n            }\r\n        }   \r\n  \r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            using (var lockMan = new LockManager())\r\n            using (var locky = lockMan.AcquireWriteLock())\r\n            {\r\n                //Lots of stuff happening in here. No Task awaits though...\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n"},{"Id":"7953850491","Type":"PullRequestEvent","CreatedAt":"2018-07-12T04:16:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6089","RelatedDescription":"Opened pull request \"Fix size of thread-local statics blocks\" (#6089) at dotnet/corert","RelatedBody":"Fixes #6041"},{"Id":"7952758408","Type":"PullRequestEvent","CreatedAt":"2018-07-11T21:44:18","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6084","RelatedDescription":"Merged pull request \"Merge remote-tracking branch 'dotnet/master' into r2r\" (#6084) at dotnet/corert","RelatedBody":""},{"Id":"7950634729","Type":"PullRequestEvent","CreatedAt":"2018-07-11T14:53:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6083","RelatedDescription":"Merged pull request \"Optimize Decimal calculations for 32-bit platforms\" (#6083) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/coreclr/issues/18249.\r\nAfter these changes only multiplication is slower (1.15x) than the current native code. I've got a version using SSE2 intrinsics that's 1.09x slower than native, but I think it's not worth the additional complexity.\r\nBelow are the x86 stats (on x64 this change has only some minor improvements).\r\n\r\n|  CMP |     Mean |     Error |    StdDev | Scaled |\r\n|-------- |---------:|----------:|----------:|-------:|\r\n|  Native | 16.72 ns | 0.0208 ns | 0.0074 ns |   1.00 |\r\n| CoreRT2 | 14.52 ns | 0.0186 ns | 0.0067 ns |   0.87 |\r\n\r\n|  ADD |     Mean |     Error |    StdDev | Scaled |\r\n|-------- |---------:|----------:|----------:|-------:|\r\n|  Native | 28.54 ns | 0.1237 ns | 0.0441 ns |   1.00 |\r\n| CoreRT2 | 28.20 ns | 0.1221 ns | 0.0435 ns |   0.99 |\r\n\r\n|  MUL |     Mean |     Error |    StdDev | Scaled |\r\n|-------- |---------:|----------:|----------:|-------:|\r\n|  Native | 19.60 ns | 0.9202 ns | 0.3282 ns |   1.00 |\r\n| CoreRT2 | 22.17 ns | 0.0437 ns | 0.0156 ns |   1.15 |\r\n\r\n|  DIV |     Mean |     Error |    StdDev | Scaled |\r\n|-------- |---------:|----------:|----------:|-------:|\r\n|  Native | 116.7 ns | 0.1891 ns | 0.0674 ns |   1.00 |\r\n| CoreRT2 | 106.7 ns | 0.1221 ns | 0.0435 ns |   0.91 |\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":16,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":103,"FavoriteCount":88,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":85,"FavoriteCount":73,"RawContent":null},{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":347,"FavoriteCount":165,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":92,"RawContent":null}]}},"RunOn":"2018-07-12T05:30:34.0470632Z","RunDurationInMilliseconds":7064}