{"Data":{"GitHub":{"Issues":[{"Id":"387509786","IsPullRequest":true,"CreatedAt":"2018-12-05T04:27:54","Actor":"AndreyAkinshin","Number":"71","RawContent":null,"Title":"Use underscores instead of unused named out variables","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/71","RelatedDescription":"Closed or merged PR \"Use underscores instead of unused named out variables\" (#71)"},{"Id":"387578529","IsPullRequest":false,"CreatedAt":"2018-12-05T03:31:36","Actor":"Wintermute21","Number":"80","RawContent":null,"Title":"Build script fails building with Visual Studio 2019 Preview 1 because script is looking for MsBuild in the wrong place","State":"open","Body":"* .NET Core Version: (3.0 Preview1)\r\n* Windows version: (Windows 10 build 18290.1000)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n When cloning and building using Visual Studio 2019 Preview 1, build.cmd fails by not looking for NuGet.exe in the correct directory for Preview. \r\nLine 183 of eng/common/tools.ps1 has   $script:buildDriver = Join-Path $vsInstallDir \"MSBuild\\15.0\\Bin\\msbuild.exe\" where for Preview1 it should be   $script:buildDriver = Join-Path $vsInstallDir \"MSBuild\\Current\\Bin\\msbuild.exe\"\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n build fails with NuGet.exe not found\r\n **Expected behavior:**\r\n build succeeds and restores packages correctly.\r\n **Minimal repro:**\r\n clone and build under 2019 Preview 1.\r\n","Url":"https://github.com/dotnet/wpf/issues/80","RelatedDescription":"Open issue \"Build script fails building with Visual Studio 2019 Preview 1 because script is looking for MsBuild in the wrong place\" (#80)"},{"Id":"387557039","IsPullRequest":true,"CreatedAt":"2018-12-05T01:49:49","Actor":"ConnorL33t","Number":"79","RawContent":null,"Title":"Apply missing licenses for tests, and remove old headers","State":"closed","Body":"Fixes #75 \r\n\r\n@karelz I took a look at the CodeFormatter project discussed in the issue, but I didn't have much luck getting it to work.","Url":"https://github.com/dotnet/wpf/pull/79","RelatedDescription":"Closed or merged PR \"Apply missing licenses for tests, and remove old headers\" (#79)"},{"Id":"387540469","IsPullRequest":false,"CreatedAt":"2018-12-05T01:49:49","Actor":"stevenbrix","Number":"75","RawContent":null,"Title":"Add license headers to test code","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/75","RelatedDescription":"Closed issue \"Add license headers to test code\" (#75)"},{"Id":"387549957","IsPullRequest":false,"CreatedAt":"2018-12-05T01:11:38","Actor":"lindexi","Number":"78","RawContent":null,"Title":"WPF Main thread gets a deadlock when stylus input thread is waiting for the window to close","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: (`Windows 10 all versions / 7 SP1`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nWe found two way that can make the main thread locked. And we can not write any code to solve it and it can only be circumvented.\r\n\r\nThe easiest way to reproduce this issue is to wait for the window in the main thread to close in the stylus input thread. \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n## The first way\r\n\r\nThe first way is to write a custom class implementing `StylusPlugIn` and wait for a window to close in the `OnStylusUp` method.\r\n\r\nLet's create a new empty window named `FooWindow`.\r\n\r\n\r\n```csharp\r\npublic class FooWindow : Window\r\n{\r\n\r\n}\r\n```\r\n\r\nThen we create a `FooStylusPlugIn` class to implement the `StylusPlugIn` with overriding the `OnStylusUp` method. We add some code to wait for the window to close by calling `Invoke` which will wait by pumping a new message loop.\r\n\r\n```csharp\r\npublic class FooStylusPlugIn : StylusPlugIn\r\n{\r\n    public FooStylusPlugIn(FooWindow fooWindow)\r\n    {\r\n    \tFooWindow = fooWindow;\r\n    }\r\n\r\n    public FooWindow FooWindow { get; }\r\n\r\n    /// <inheritdoc />\r\n    protected override void OnStylusUp(RawStylusInput rawStylusInput)\r\n    {\r\n        FooWindow.Dispatcher.Invoke(() => FooWindow.Close());\r\n        base.OnStylusUp(rawStylusInput);\r\n    }\r\n}\r\n```\r\n\r\nTo combine both the critical codes above, we write some codes in the `MainWindow`. The `FooWindow` is instanced in the constructor and the `StylusPlugIn` is plugged in it. We also make a button in the XAML that can let us know whether the main thread is still running or not.\r\n\r\n```csharp\r\npublic partial class MainWindow : Window\r\n{\r\n    public MainWindow()\r\n    {\r\n        InitializeComponent();\r\n        _fooWindow = new FooWindow();\r\n        StylusPlugIns.Add(new FooStylusPlugIn(_fooWindow));\r\n        _fooWindow.Show();\r\n    }\r\n\r\n    private void Button_OnClick(object sender, RoutedEventArgs e)\r\n    {\r\n    }\r\n\r\n    private FooWindow _fooWindow;\r\n}\r\n```\r\n\r\nRun the project, touch the main window, and you'll find that the main window never responds to your interaction. Try to click the button to view the responding and you'll soon verify what I'm talking.\r\n\r\nThe reason is that the `OnStylusUp` in `FooStylusPlugIn` is running in the stylus input thread which is also running the inside loop of the `ThreadProc` method. It needs to go back to the outside loop to remove the `PenContext` when a window is closed. The stylus input thread is waiting for the main thread to close a window and the main thread is also waiting for the stylus input thread remove PenContext. Thus, the deadlock occurred.\r\n\r\nThe demo in [github](https://github.com/dotnet-campus/wpf-issues/tree/master/MainThreadDeadlockWithStylusInputThread/MainThreadDeadlockWhenTouchThreadWaitForWindowClosed)\r\n\r\n## The second way\r\n\r\nIf a touch happens exactly during a window closing, the main thread will enter a lock.\r\n\r\nThe difference between the first method and the second method is that the first one will lock both the main thread and the stylus input thread but the second one will only lock the main thread.\r\n\r\nFrom the theory, we know that the `PenContext` should be removed correctly in the outside loop. But in the second way, the stylus input thread is firing the touch event exactly when we run the code to remove the `PenContext` in the stylus input thread. As you can see we need to run the code to remove `PenContext` in the outside loop but at this moment the code is firing the touch event in the second loop.\r\n\r\nThe firing of the touch event means the `_pimcResetHandle` is released. Although the main thread has also released the lock the code cannot run to the outside loop to remove the `PenContext` and the main thread can no longer wait for the moment when the `PenContext` removal is finished.\r\n\r\n\r\n```csharp\r\nvoid ThreadProc()\r\n{\r\n    while (!__disposed)\r\n    {\r\n      \t// The outside loop\r\n    \t// To remove or add the PenContext\r\n    \t// The main thread is waiting for its finishing.\r\n    \tRemovePenContext();\r\n\r\n    \twhile (true)\r\n    \t{\r\n    \t\t// The inside loop\r\n    \t\t// Tt will be blocked by the PENIMC\r\n    \t\tif(!Penimc.UnsafeNativeMethods.GetPenEvent(/*wait the lock*/))\r\n    \t\t{\r\n    \t\t\t// If the `_pimcResetHandle` is released, this if branch will enter so the inside loop will end with the `break` and the code runs back to the outside loop.\r\n    \t\t\tbreak;\r\n    \t\t}\r\n\r\n    \t\tFireEvent(/*fire the touch events*/); // the code is running in this line\r\n    \t\t// and the `_pimcResetHandle` is released.\r\n    \t\t// the main thread release the `_pimcResetHandle` but the code can not go to RemovePenContext for it will no longer break. \r\n    \t}\r\n    }\r\n}\r\n```\r\n\r\nThe main thread has released the lock but the stylus input thread doesn't need to wait for the lock. The stylus input thread cannot go back to the outside loop to remove the `PenContext` and main thread can no longer wait for the moment when the `PenContext` removal is finished. \r\n\r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\nSee https://github.com/dotnet-campus/wpf-issues/tree/master/MainThreadDeadlockWithStylusInputThread/MainThreadDeadlockWhenTouchThreadWaitForWindowClosed\r\n","Url":"https://github.com/dotnet/wpf/issues/78","RelatedDescription":"Open issue \"WPF Main thread gets a deadlock when stylus input thread is waiting for the window to close\" (#78)"},{"Id":"387546961","IsPullRequest":false,"CreatedAt":"2018-12-05T01:00:31","Actor":"walterlv","Number":"77","RawContent":null,"Title":"WPF applications stop responding to touches after adding or removing tablet devices","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: (`Windows 10 all versions / 7 SP1`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n\r\n Run any WPF application on a computer which is currently has a high CPU usage, if you keep plugging and unplugging a USB HID tablet device at the same time, the WPF applications will stop responding to touches and only respond to mouse.\r\n\r\n **Actual behavior:**\r\n\r\n[c# - WPF applications stop responding to touches after adding or removing tablet devices - Stack Overflow](https://stackoverflow.com/questions/51854593/wpf-applications-stop-responding-to-touches-after-adding-or-removing-tablet-devi)\r\n \r\n **Expected behavior:**\r\n\r\nWPF works without touch lost.\r\n \r\n **Minimal repro:**\r\n \r\n1. Run any WPF application\r\n1. Keep plugging and unplugging a USB HID tablet device\r\n1. Make a high CPU usage\r\n","Url":"https://github.com/dotnet/wpf/issues/77","RelatedDescription":"Open issue \"WPF applications stop responding to touches after adding or removing tablet devices\" (#77)"},{"Id":"387546173","IsPullRequest":false,"CreatedAt":"2018-12-05T00:57:23","Actor":"lindexi","Number":"76","RawContent":null,"Title":"Make the dynamic render support MultiTouch","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWe need the user use multitouch in InkCanvas and the DynamicRender do not support multitouch.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/76","RelatedDescription":"Open issue \"Make the dynamic render support MultiTouch\" (#76)"},{"Id":"387535257","IsPullRequest":true,"CreatedAt":"2018-12-05T00:21:34","Actor":"stevenbrix","Number":"74","RawContent":null,"Title":"fixing missing license headers","State":"closed","Body":"some license headers were missed when porting system.xaml to .netcore 3","Url":"https://github.com/dotnet/wpf/pull/74","RelatedDescription":"Closed or merged PR \"fixing missing license headers\" (#74)"},{"Id":"387516015","IsPullRequest":true,"CreatedAt":"2018-12-04T22:53:17","Actor":"AndreyAkinshin","Number":"73","RawContent":null,"Title":"Simplify some syntax constructions in XamlObjectReader","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/73","RelatedDescription":"Open PR \"Simplify some syntax constructions in XamlObjectReader\" (#73)"},{"Id":"387513097","IsPullRequest":false,"CreatedAt":"2018-12-04T22:43:59","Actor":"Marv51","Number":"72","RawContent":null,"Title":"VisualStateGroup not working","State":"open","Body":"* .NET Core Version: 3.0 Preview1 (3.0.100-preview-009812)\r\n* Windows version: win10 1809 17763\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nThis is probably a know issue of the first preview, very excited about this thing by the way!\r\n\r\nRunning my app, I get exceptions for windows that contain a `System.Windows.VisualStateGroup`(only tested via xaml). See below. \r\nI had this on three different windows and removing the VisualStateGroup fixes it. (That of course also removes the functionality)\r\n\r\nI guess this is not yet done?  Known Bug? Or something real?\r\n \r\n **Actual behavior:**\r\n System.Windows.Markup.XamlParseException: \"'Set connectionId threw an exception.' Line number '11' and line position '14'.\"\r\nInner Exception:\r\nInvalidCastException: Unable to cast object of type 'System.Windows.VisualStateGroup' to type 'System.Windows.Shapes.Ellipse'.\r\n\r\n **Expected behavior:**\r\nShould work as it does in dotnet framework.\r\n\r\n \r\n **Minimal(ish) repro:**\r\n```xaml\r\n<Grid Name=\"TheEllipse\" MouseUp=\"TheEllipse_MouseUp\">\r\n    <VisualStateManager.VisualStateGroups>\r\n        <VisualStateGroup Name=\"MouseStates\">\r\n            <VisualState Name=\"MouseEnter\">\r\n                <Storyboard>\r\n                    <ColorAnimation To=\"#A1A1A1\" Duration=\"00:00:00.3\" Storyboard.TargetName=\"BackFill\" Storyboard.TargetProperty=\"(SolidColorBrush.Color)\" />\r\n                </Storyboard>\r\n            </VisualState>\r\n        </VisualStateGroup>\r\n   </VisualStateManager.VisualStateGroups>\r\n   <Ellipse Stroke=\"Black\" StrokeThickness=\"1\">\r\n       <Ellipse.Fill>\r\n           <SolidColorBrush x:Name=\"BackFill\" Color=\"#F1F1F1\" />\r\n       </Ellipse.Fill>\r\n   </Ellipse>\r\n</Grid>\r\n```","Url":"https://github.com/dotnet/wpf/issues/72","RelatedDescription":"Open issue \"VisualStateGroup not working\" (#72)"},{"Id":"387498488","IsPullRequest":true,"CreatedAt":"2018-12-04T21:59:25","Actor":"AndreyAkinshin","Number":"70","RawContent":null,"Title":"Remove redundant field initialization in XamlContextStack","State":"open","Body":"The '-1' value of _depth is always overwritten by '0' in constructor.\r\nThe default values for _currentFrame and _recycledFrame are null,\r\nso we don't need set them explicitly.","Url":"https://github.com/dotnet/wpf/pull/70","RelatedDescription":"Open PR \"Remove redundant field initialization in XamlContextStack\" (#70)"},{"Id":"387496877","IsPullRequest":true,"CreatedAt":"2018-12-04T21:55:04","Actor":"AndreyAkinshin","Number":"69","RawContent":null,"Title":"Better TimeSpan comparison with zero","State":"open","Body":"It's a bad practice to compare double values with zero.\r\nA better way to compare TimeSpan with zero is using the Ticks property.","Url":"https://github.com/dotnet/wpf/pull/69","RelatedDescription":"Open PR \"Better TimeSpan comparison with zero\" (#69)"},{"Id":"387492836","IsPullRequest":true,"CreatedAt":"2018-12-04T21:43:36","Actor":"AndreyAkinshin","Number":"68","RawContent":null,"Title":"Add missed [Flags] attribute for BoolMemberBits","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/68","RelatedDescription":"Open PR \"Add missed [Flags] attribute for BoolMemberBits\" (#68)"},{"Id":"387491948","IsPullRequest":true,"CreatedAt":"2018-12-04T21:41:09","Actor":"AndreyAkinshin","Number":"67","RawContent":null,"Title":"Fields which are used in GetHashCode() should be readonly","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/67","RelatedDescription":"Open PR \"Fields which are used in GetHashCode() should be readonly\" (#67)"},{"Id":"387489423","IsPullRequest":true,"CreatedAt":"2018-12-04T21:34:21","Actor":"thomasclaudiushuber","Number":"66","RawContent":null,"Title":"Use AutoProperties for different Attributes and Extensions","State":"open","Body":"Cleaning up attributes and extensions to use auto properties","Url":"https://github.com/dotnet/wpf/pull/66","RelatedDescription":"Open PR \"Use AutoProperties for different Attributes and Extensions\" (#66)"},{"Id":"387484009","IsPullRequest":true,"CreatedAt":"2018-12-04T21:19:17","Actor":"thomasclaudiushuber","Number":"65","RawContent":null,"Title":"Use Auto-Properties and nameof","State":"open","Body":"Cleaning up the coding style of some XAML attributes like XmlnsDefinitionAttribute.","Url":"https://github.com/dotnet/wpf/pull/65","RelatedDescription":"Open PR \"Use Auto-Properties and nameof\" (#65)"},{"Id":"387466478","IsPullRequest":true,"CreatedAt":"2018-12-04T20:44:39","Actor":"AndreyAkinshin","Number":"64","RawContent":null,"Title":"Update obsolete values of DebuggerDisplay attributes","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/64","RelatedDescription":"Closed or merged PR \"Update obsolete values of DebuggerDisplay attributes\" (#64)"},{"Id":"387462904","IsPullRequest":true,"CreatedAt":"2018-12-04T20:37:21","Actor":"AndreyAkinshin","Number":"63","RawContent":null,"Title":"Remove extra semicolons","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/63","RelatedDescription":"Closed or merged PR \"Remove extra semicolons\" (#63)"},{"Id":"387459964","IsPullRequest":true,"CreatedAt":"2018-12-04T20:33:03","Actor":"cdesewell","Number":"61","RawContent":null,"Title":"Add OS to bug report md","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/61","RelatedDescription":"Closed or merged PR \"Add OS to bug report md\" (#61)"},{"Id":"387429443","IsPullRequest":true,"CreatedAt":"2018-12-04T20:13:38","Actor":"AndreyAkinshin","Number":"54","RawContent":null,"Title":"Fix a few typos in comments","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/54","RelatedDescription":"Closed or merged PR \"Fix a few typos in comments\" (#54)"},{"Id":"387460558","IsPullRequest":true,"CreatedAt":"2018-12-04T20:12:54","Actor":"Therzok","Number":"62","RawContent":null,"Title":"Avoid allocation of string when a better stringbuilder overload exists","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/62","RelatedDescription":"Open PR \"Avoid allocation of string when a better stringbuilder overload exists\" (#62)"},{"Id":"387459756","IsPullRequest":false,"CreatedAt":"2018-12-04T20:10:44","Actor":"richlander","Number":"60","RawContent":null,"Title":"Establish Design Process for WPF APIs and XAML","State":"open","Body":"# Establish Design Process for WPF APIs and XAML\r\n\r\nWPF exposes a rich set of APIs and also the Xaml syntax. We need to establish an open design process, both for additions in general and to accept and shape community contributions. This is very similar to [dotnet/apireviews](https://github.com/dotnet/apireviews) and [dotnet/csharplang](https://github.com/dotnet/csharplang). Those teams have established effective design processes that we can adopt for WPF. For APIs, we should just use the existing .NET API review process. For XAML, we'll need do something different. We need the WPF team to define these processes.\r\n\r\nFor folks filing issues that propose new API or Xaml syntax, please reference this issue as a way of upvoting its importance.","Url":"https://github.com/dotnet/wpf/issues/60","RelatedDescription":"Open issue \"Establish Design Process for WPF APIs and XAML\" (#60)"},{"Id":"387448783","IsPullRequest":false,"CreatedAt":"2018-12-04T20:07:23","Actor":"atverma","Number":"57","RawContent":null,"Title":"Command dotnet build for WPF app fails with 'File can not be found' error on Mac","State":"closed","Body":"* .NET Core Version: SDK 3.0.100-preview-009812\r\n* OS version: macOS Mojave v 10.14.1\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description: After creating WPF project by running dotnet -new wpf command, dotnet build command fails with file not found errors.**\r\n \r\n **Actual behavior:** \r\nA sample error is displayed below. The file exists however it seems that path separator is not correct which may be causing this build failure e.g. for root path and App.xaml.\r\n\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets(243,9): error BG1002: File '/Users/atverma/Documents/GitHub/DotNetCoreWPFApp/MyWPFApp\\App.xaml' cannot be found. [/Users/atverma/Documents/GitHub/DotNetCoreWPFApp/MyWPFApp/MyWPFApp.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets(243,9): error BG1002: File 'MainWindow.xaml' cannot be found. [/Users/atverma/Documents/GitHub/DotNetCoreWPFApp/MyWPFApp/MyWPFApp.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets(243,9): error BG1003: The project file contains a property value that is not valid. [/Users/atverma/Documents/GitHub/DotNetCoreWPFApp/MyWPFApp/MyWPFApp.csproj]\r\n\r\nBuild FAILED.\r\n\r\n \r\n **Expected behavior:**\r\nExpected dotnet build to succeed.\r\n \r\n **Minimal repro:**\r\n1. On a Mac, I have installed lastest sdk from\r\nhttps://dotnet.microsoft.com/download/dotnet-core/3.0\r\n2. Executed dotnet -new wpf -o SampleWPFApp command\r\n3. Changed current folder in terminal to SampleWPFApp\r\n3. Executed dotnet build however it fails\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/57","RelatedDescription":"Closed issue \"Command dotnet build for WPF app fails with 'File can not be found' error on Mac\" (#57)"},{"Id":"387451328","IsPullRequest":false,"CreatedAt":"2018-12-04T19:53:12","Actor":"Pzixel","Number":"59","RawContent":null,"Title":"[Question] Relationship with AvaloniaUI","State":"closed","Body":"Hello guys.\r\n\r\nIt's really wonderful to see this repo and hear about porting WPF to .Net Core.\r\n\r\nHowever, I've heard a lot about how WPF is closely tied to Windows and DirectX, so it seems to me to virtually impossible to just port it as it is.\r\n\r\nOTOH we have an Avalonia project that tries to write it from scratch on .net core for last several years.\r\n\r\nDo you guys plan to somehow interop with them? Maybe it worth taking some ideas/approaches/etc? Or you just want to port WPF as it is?\r\n\r\nIt's not a technical task, but I have a huge interest in WPF and asking this question. I'd like to hear as much information as possible.\r\n\r\nAnd thank you for your job.","Url":"https://github.com/dotnet/wpf/issues/59","RelatedDescription":"Closed issue \"[Question] Relationship with AvaloniaUI\" (#59)"},{"Id":"387450665","IsPullRequest":false,"CreatedAt":"2018-12-04T19:46:09","Actor":"Zhentar","Number":"58","RawContent":null,"Title":"Markup compiled XAML 2009","State":"open","Body":"XAML 2009 has been out for a few years now, and includes some features that would be quite nice to use with WPF in markup compiled XAML. What currently blocks XAML 2009 support? Where could community contributions help to move it forward?","Url":"https://github.com/dotnet/wpf/issues/58","RelatedDescription":"Open issue \"Markup compiled XAML 2009\" (#58)"},{"Id":"387444807","IsPullRequest":false,"CreatedAt":"2018-12-04T19:41:15","Actor":"daniel-white","Number":"56","RawContent":null,"Title":"What is going to happen to `System.Windows.Shell`?","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n`System.Windows.Shell` is part of PresentationCore.dll (which is part of WPF). I'm sure it would be nice to move that into a new open source library as part of this effort.","Url":"https://github.com/dotnet/wpf/issues/56","RelatedDescription":"Closed issue \"What is going to happen to `System.Windows.Shell`?\" (#56)"},{"Id":"387439359","IsPullRequest":false,"CreatedAt":"2018-12-04T19:39:23","Actor":"liquidboy","Number":"55","RawContent":null,"Title":"Will Milcore libraries also be opensourced?","State":"closed","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nWould love for the native Milcore part, wpfgfx, of WPF to also be opensourced","Url":"https://github.com/dotnet/wpf/issues/55","RelatedDescription":"Closed issue \"Will Milcore libraries also be opensourced?\" (#55)"},{"Id":"387418082","IsPullRequest":false,"CreatedAt":"2018-12-04T19:08:21","Actor":"poizan42","Number":"53","RawContent":null,"Title":"Could the current WPF code (for netfx) be made available under MIT?","State":"closed","Body":"Currently some parts of WPF are available at referencesource.microsoft.com and others have been made available in the past through the \" .NET Framework source stepping\" sources - I think only the C++/CLI parts haven't been made available at all. However these are all under MS-RSL which prevents reusing parts in your own projects.\r\n\r\nSince everything is in the process of being added here with changes for .NET Core, could we have the current code added to the https://github.com/Microsoft/referencesource repository under MIT?","Url":"https://github.com/dotnet/wpf/issues/53","RelatedDescription":"Closed issue \"Could the current WPF code (for netfx) be made available under MIT?\" (#53)"},{"Id":"387412770","IsPullRequest":false,"CreatedAt":"2018-12-04T18:05:33","Actor":"Grauenwolf","Number":"52","RawContent":null,"Title":"Improved INotifyCollectionChanged Handling","State":"open","Body":"This is a carry over from .NET Framework. \r\n\r\nIf INotifyCollectionChanged.CollectionChanged -> NotifyCollectionChangedEventArgs.NewItems has more than one item, most WPF controls will throw an exception. \r\n\r\nThe main reason for this original design is that ObservableCollection doesn't have an AddRange method and the controls assum that nothing else will support INotifyCollectionChanged.","Url":"https://github.com/dotnet/wpf/issues/52","RelatedDescription":"Open issue \"Improved INotifyCollectionChanged Handling\" (#52)"},{"Id":"387406822","IsPullRequest":true,"CreatedAt":"2018-12-04T17:50:49","Actor":"wieslawsoltes","Number":"51","RawContent":null,"Title":"Add netstandard2.0 target framework support for System.Xaml","State":"open","Body":"The `ValueSerializerAttribute` is taken from:\r\nhttps://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.ObjectModel/src/System/Windows/Markup/ValueSerializerAttribute.cs\r\n\r\nThis is part of work needed to fix https://github.com/dotnet/wpf/issues/46","Url":"https://github.com/dotnet/wpf/pull/51","RelatedDescription":"Open PR \"Add netstandard2.0 target framework support for System.Xaml\" (#51)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-05T05:31:12.9919342Z","RunDurationInMilliseconds":996}