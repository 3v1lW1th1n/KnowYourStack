{"Data":{"GitHub":{"Issues":[{"Id":"393636179","IsPullRequest":true,"CreatedAt":"2018-12-22T05:28:31","Actor":"codemzs","Number":"1955","RawContent":null,"Title":"Remove \"Runtime\" from all namespace","State":"closed","Body":"Partially fixes #1697 by removing \"Runtime\" from all namespaces and that is it, no moving classes to other namespaces. ","Url":"https://github.com/dotnet/machinelearning/pull/1955","RelatedDescription":"Closed or merged PR \"Remove \"Runtime\" from all namespace\" (#1955)"},{"Id":"393644306","IsPullRequest":true,"CreatedAt":"2018-12-22T05:15:16","Actor":"codemzs","Number":"1956","RawContent":null,"Title":"Remove \"Runtime\" from all namespaces.","State":"open","Body":"Partially fixes #1697 by removing \"Runtime\" from all namespaces and that is it, no moving classes to other namespaces.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1956","RelatedDescription":"Open PR \"Remove \"Runtime\" from all namespaces.\" (#1956)"},{"Id":"393625373","IsPullRequest":false,"CreatedAt":"2018-12-22T00:24:26","Actor":"daholste","Number":"1954","RawContent":null,"Title":"TextFeaturizingEstimator does not have a setting to modify ngram length","State":"open","Body":"### Issue\r\n\r\nTextFeaturizingEstimator does not seem to have a public setting to modify the desired ngram length for extracted words / characters?\r\n\r\nSuch a setting would be really useful","Url":"https://github.com/dotnet/machinelearning/issues/1954","RelatedDescription":"Open issue \"TextFeaturizingEstimator does not have a setting to modify ngram length\" (#1954)"},{"Id":"393624233","IsPullRequest":true,"CreatedAt":"2018-12-22T00:13:41","Actor":"wschin","Number":"1953","RawContent":null,"Title":"Add an example for static pipeline with in-memory data and show how to get class probabilities","State":"open","Body":"Fixes #1947 and fixes #1881.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1953","RelatedDescription":"Open PR \"Add an example for static pipeline with in-memory data and show how to get class probabilities\" (#1953)"},{"Id":"393594805","IsPullRequest":false,"CreatedAt":"2018-12-21T21:24:04","Actor":"JakeRadMSFT","Number":"1952","RawContent":null,"Title":"MacOs support for mlContext.Transforms.LoadImages","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Mac\r\n- **.NET Version (eg., dotnet --info)**:  Ml.Net 0.8.0\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nTried to use the example: https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow on a Mac\r\n\r\n- **What happened?** \r\nImage /Users/jakeradzikowski/dev/experiment/mlNet/GitHubExample/ImageClassification/assets/inputs/images/broccoli.jpg was not found.\r\n\r\n- **What did you expect?**\r\nThe above path does exist ... So I expected the image to be found and loaded. Does mlContext.Transforms.LoadImages work on a MacOS?\r\n\r\n### Source code / logs\r\n\r\nSee the example referenced above.","Url":"https://github.com/dotnet/machinelearning/issues/1952","RelatedDescription":"Open issue \"MacOs support for mlContext.Transforms.LoadImages\" (#1952)"},{"Id":"393513884","IsPullRequest":true,"CreatedAt":"2018-12-21T16:18:28","Actor":"Ivanidzo4ka","Number":"1951","RawContent":null,"Title":"WIP Load entry point models","State":"open","Body":"fixes https://github.com/dotnet/machinelearning/issues/1104\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1951","RelatedDescription":"Open PR \"WIP Load entry point models\" (#1951)"},{"Id":"393277936","IsPullRequest":false,"CreatedAt":"2018-12-21T01:36:43","Actor":"wschin","Number":"1950","RawContent":null,"Title":"LightGBM estensions are not tested","State":"open","Body":"Three functions listed below are not tested (VS doesn't find any references):\r\n```csharp\r\n        public static LightGbmRankingTrainer LightGbm(this RankingContext.RankingTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string groupIdColumn = DefaultColumnNames.GroupId,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null)\r\n```\r\n```csharp\r\n        public static LightGbmBinaryTrainer LightGbm(this BinaryClassificationContext.BinaryClassificationTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null\r\n```\r\n```csharp\r\n        public static LightGbmRegressorTrainer LightGbm(this RegressionContext.RegressionTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1950","RelatedDescription":"Open issue \"LightGBM estensions are not tested\" (#1950)"},{"Id":"392860786","IsPullRequest":true,"CreatedAt":"2018-12-21T00:48:39","Actor":"sheng-jie","Number":"1936","RawContent":null,"Title":"Update the demo code because of the `mlContext.Data.CreateTextReader` method is no longer exists in the latest version v0.8.","State":"closed","Body":"Fixes #1935.\r\n\r\nThere is no `mlContext.Data.CreateTextReader` method in the latest version of ML.NET v0.8.\r\nI Updated  `mlContext.Data.CreateTextReader`  to `TextLoader.CreateReader` so that can give a correct \r\nguidance for the readers.\r\n\r\nPlease check.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1936","RelatedDescription":"Closed or merged PR \"Update the demo code because of the `mlContext.Data.CreateTextReader` method is no longer exists in the latest version v0.8.\" (#1936)"},{"Id":"393254461","IsPullRequest":false,"CreatedAt":"2018-12-20T23:43:35","Actor":"montebhoover","Number":"1949","RawContent":null,"Title":"How to get ComponentCatalog from MLContext?","State":"open","Body":"For NimbusML we have a \"ManifestGenerator\" that creates the EntryPoint manifest.json from a given set of ML.NET assemblies.  Currently we implement this the same way it is implemented in [TestEntryPoints.cs](https://github.com/dotnet/machinelearning/blob/337cc551f1a4fb45b5efc9797803c06bd451ee29/test/Microsoft.ML.Core.Tests/UnitTests/TestEntryPoints.cs#L349), but ConsoleEnvironment has been made internal, and ML.Context doesn't have a ComponentCatalog.  What are ways I could get access to a ComponentCatalog and use JsonManifestUtils to build a new manifest.json?\r\n\r\n@Ivanidzo4ka @yaeldekel @ganik ","Url":"https://github.com/dotnet/machinelearning/issues/1949","RelatedDescription":"Open issue \"How to get ComponentCatalog from MLContext?\" (#1949)"},{"Id":"393253748","IsPullRequest":false,"CreatedAt":"2018-12-20T23:40:50","Actor":"najeeb-kazmi","Number":"1948","RawContent":null,"Title":"Public constructors for GamModelParameters","State":"open","Body":"Part of #1698 \r\n\r\nRight now, in `BinaryClassificationGamModelParameters` and `RegressionGamModelParameters` we have constructors that look like the following;\r\n\r\n```csharp\r\ninternal BinaryClassificationGamModelParameters(IHostEnvironment env, int inputLength, Dataset trainset,\r\n            double meanEffect, double[][] binEffects, int[] featureMap)\r\n            : base(env, LoaderSignature, inputLength, trainset, meanEffect, binEffects, featureMap) { }\r\n```\r\n\r\nWe want to make public constructors for all `ModelParameters` (previously `predictors`). However, for GAMs, this requires the user to pass in a training set, which is a `Dataset` object in `Microsoft.ML.FastTree.Internal`. This is not something we should expect the end user of the API to be aware of, so the constructor was not made public. Currently, `Dataset` is needed in `GamModelParametersBase` to map features to flocks and get bin upper bounds. We should rewrite GAMs so that this information is passed on from the Trainer rather than be computed when constructing the `GamModelParameters`.","Url":"https://github.com/dotnet/machinelearning/issues/1948","RelatedDescription":"Open issue \"Public constructors for GamModelParameters\" (#1948)"},{"Id":"393249901","IsPullRequest":false,"CreatedAt":"2018-12-20T23:25:35","Actor":"wschin","Number":"1947","RawContent":null,"Title":"Need Example of Generating DataView and Feeding It to Static Pipeline","State":"open","Body":"All of example (static) pipelines start with a text file, which is not very true when deploying models to apps. We need to create examples using in-memory C# data structures.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1947","RelatedDescription":"Open issue \"Need Example of Generating DataView and Feeding It to Static Pipeline\" (#1947)"},{"Id":"393247485","IsPullRequest":true,"CreatedAt":"2018-12-20T23:16:45","Actor":"Anipik","Number":"1946","RawContent":null,"Title":"Throwing exception if the underlying rsp fails with an exception","State":"open","Body":"The benchmarks involving rsps don't fail even when the underlying rsp has thrown an exception\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1946","RelatedDescription":"Open PR \"Throwing exception if the underlying rsp fails with an exception\" (#1946)"},{"Id":"393209435","IsPullRequest":false,"CreatedAt":"2018-12-20T20:59:18","Actor":"Anipik","Number":"1945","RawContent":null,"Title":"lib_lightgbm.dll is not getting loaded while running benchmarks on .NetFramework","State":"open","Body":"when we try to run this https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Numeric/Ranking.cs#L50\r\nand \r\nhttps://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Text/MultiClassClassification.cs#L47\r\n\r\non .netFramework, the benchmark is not able to load the lib_lightgbm.dll\r\n```\r\nUnexpected exception: Unable to load DLL 'lib_lightgbm': The specified module could not be found. (Exception from HRESULT: 0x8007007E), 'System.DllNotFoundException'\r\n```\r\n\r\nThe benchmarks run properly on .NetCore\r\n\r\n\r\ncc @danmosemsft @eerhardt @adamsitnik ","Url":"https://github.com/dotnet/machinelearning/issues/1945","RelatedDescription":"Open issue \"lib_lightgbm.dll is not getting loaded while running benchmarks on .NetFramework\" (#1945)"},{"Id":"392880668","IsPullRequest":true,"CreatedAt":"2018-12-20T19:48:36","Actor":"TomFinley","Number":"1938","RawContent":null,"Title":"Remove IRowCursorConsolidator.","State":"closed","Body":"Fixes #1867.","Url":"https://github.com/dotnet/machinelearning/pull/1938","RelatedDescription":"Closed or merged PR \"Remove IRowCursorConsolidator.\" (#1938)"},{"Id":"393178826","IsPullRequest":true,"CreatedAt":"2018-12-20T19:20:39","Actor":"wschin","Number":"1944","RawContent":null,"Title":"ONNX conversion should throw a better message","State":"open","Body":"Fixes #1396. Simply went to all SaveAsOnnx and SaveAsOnnxCore and add throwing mechanism if proper.","Url":"https://github.com/dotnet/machinelearning/pull/1944","RelatedDescription":"Open PR \"ONNX conversion should throw a better message\" (#1944)"},{"Id":"393177430","IsPullRequest":false,"CreatedAt":"2018-12-20T19:16:47","Actor":"sfilipi","Number":"1943","RawContent":null,"Title":"Should the error messages use the standart .net types, rather than the internal types?","State":"open","Body":"Most of our error messages related to type mismatch/schema mismatch use the internal R4, U4 types. \r\n\r\nShould those get scrubbed and substituted with the .net types before 1.0, to make them more user friendly?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1943","RelatedDescription":"Open issue \"Should the error messages use the standart .net types, rather than the internal types?\" (#1943)"},{"Id":"393175239","IsPullRequest":false,"CreatedAt":"2018-12-20T19:09:57","Actor":"sfilipi","Number":"1942","RawContent":null,"Title":"Reconcile the check for Probability in the BinaryClassifierEvaluator with the logic in the calibrators","State":"open","Body":"Fitting an IDataView that contains a score column(produced by a binary classifier scorer), currently will append a column with the name probability to the IDataView . \r\n\r\nIf one column with the name \"Probability\" exists, another one will be added. (Maybe if the user wants to try out different calibrators?). The calibrators don't complain about its existence. \r\n\r\nCurrently the [BinaryClassifierEvaluator](https://github.com/dotnet/machinelearning/blob/3188f1a3a176fe80902491b08024b10dd6cc2a25/src/Microsoft.ML.Data/Evaluators/BinaryClassifierEvaluator.cs#L145) checks that there are no more than one probability columns. \r\n\r\nReconcile the behavior/expectations, or is this ok, and we can leave the user cleanup if more than one Probability columns. \r\n\r\ncc @yaeldekel @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1942","RelatedDescription":"Open issue \"Reconcile the check for Probability in the BinaryClassifierEvaluator with the logic in the calibrators\" (#1942)"},{"Id":"393173452","IsPullRequest":true,"CreatedAt":"2018-12-20T19:04:10","Actor":"ganik","Number":"1941","RawContent":null,"Title":"Fix CategoricalHashTransform to handle OutputKind \"Key\"","State":"open","Body":"fixes #1939 ","Url":"https://github.com/dotnet/machinelearning/pull/1941","RelatedDescription":"Open PR \"Fix CategoricalHashTransform to handle OutputKind \"Key\"\" (#1941)"},{"Id":"392859677","IsPullRequest":false,"CreatedAt":"2018-12-20T19:02:20","Actor":"sheng-jie","Number":"1935","RawContent":null,"Title":"The demo code in ML.NET cookbook is incorrectly in the latest version v0.8.","State":"closed","Body":"### System information\r\n\r\n- **WIN 10**:\r\n- **.NET Core V2.2**: \r\n\r\n### Issue\r\n\r\n- The demo code in ML.NET cookbook is incorrectly  in the latest version v0.8.\r\n\r\n### Source code / logs\r\n```\r\n// Create the reader: define the data columns and where to find them in the text file.\r\nvar reader = mlContext.Data.CreateTextReader(ctx => (\r\n        // A boolean column depicting the 'target label'.\r\n        IsOver50K: ctx.LoadBool(0),\r\n        // Three text columns.\r\n        Workclass: ctx.LoadText(1),\r\n        Education: ctx.LoadText(2),\r\n        MaritalStatus: ctx.LoadText(3)),\r\n    hasHeader: true);\r\n```\r\nThe `mlContext.Data.CreateTextReader` method is no longer exists in the latest version. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1935","RelatedDescription":"Closed issue \"The demo code in ML.NET cookbook is incorrectly in the latest version v0.8.\" (#1935)"},{"Id":"392884159","IsPullRequest":true,"CreatedAt":"2018-12-20T18:58:39","Actor":"ganik","Number":"1940","RawContent":null,"Title":"Fix CategoricalHashTransform to handle OutputKind \"Key\"","State":"closed","Body":"fixes #1939 ","Url":"https://github.com/dotnet/machinelearning/pull/1940","RelatedDescription":"Closed or merged PR \"Fix CategoricalHashTransform to handle OutputKind \"Key\"\" (#1940)"},{"Id":"392735720","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:15","Actor":"yaeldekel","Number":"1928","RawContent":null,"Title":"BinaryLoader cursor doesn't set state to \"Done\"","State":"closed","Body":"Fixes #1927 .","Url":"https://github.com/dotnet/machinelearning/pull/1928","RelatedDescription":"Closed or merged PR \"BinaryLoader cursor doesn't set state to \"Done\"\" (#1928)"},{"Id":"392735405","IsPullRequest":false,"CreatedAt":"2018-12-20T18:07:15","Actor":"yaeldekel","Number":"1927","RawContent":null,"Title":"The BinaryLoader cursor doesn't always set its state to \"Done\" when it's done","State":"closed","Body":"If instead of the usual while loop:\r\n\r\nwhile (cursor.MoveNext())\r\n{\r\n// do stuff\r\n}\r\n\r\nwe have this loop:\r\n\r\nwhile (cursor.State != CursorState.Done)\r\n{\r\n// do stuff\r\ncursor.MoveNext();\r\n}\r\n\r\nwe get an exception. This happens in the PerGroupTransformBase class, that uses an auxiliary cursor that moves ahead to check where the current group ends.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1927","RelatedDescription":"Closed issue \"The BinaryLoader cursor doesn't always set its state to \"Done\" when it's done\" (#1927)"},{"Id":"392882569","IsPullRequest":false,"CreatedAt":"2018-12-20T04:22:28","Actor":"ganik","Number":"1939","RawContent":null,"Title":"CategoricalHashTransform breaks on OutputKind \"Key\"","State":"open","Body":"Found in ML.NET 0.7, ML.NET 0.8\r\nThis breaks NimbusML\r\n\r\nRepro:\r\n* Copy graph and data into C;/Test\r\n* Run:\r\n            var args = new ExecuteGraphCommand.Arguments() { GraphPath = \"C:/test/graph.json\" };\r\n            var cmd = new ExecuteGraphCommand(Env, args);\r\n            cmd.Run();\r\nWill get you exception:\r\n\r\nSystem.ArgumentNullException : Value cannot be null.\r\n       Parameter name: estimator\r\n       Stack Trace:\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs(581,0): at Microsoft.ML.Runtime.Contracts.CheckValue[T](T val, String paramName)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\EstimatorExtensions.cs(54,0): at Microsoft.ML.LearningPipelineExtensions.Append[TTrans](IEstimator`1 start, IEstimator`1 estimator, TransformerScope scope)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(183,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncoding..ctor(HashingEstimator hash, IEstimator`1 keyToVector, IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(319,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator.Fit(IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(176,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncoding.Create(IHostEnvironment env, Arguments args, IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotEncoding.cs(311,0): at Microsoft.ML.Transforms.Categorical.Categorical.CatTransformHash(IHostEnvironment env, Arguments input)\r\n\r\nThe problem is with:\r\n\r\ninternal OneHotHashEncoding(HashingEstimator hash, IEstimator<ITransformer> keyToVector, IDataView input)\r\n        {\r\n            var chain = hash.Append(keyToVector);\r\n            _transformer = chain.Fit(input);\r\n        }\r\n\r\nThe keyToVector is null in case OutputKind is Key.\r\n\r\n\r\n\r\n[dbg.zip](https://github.com/dotnet/machinelearning/files/2697399/dbg.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1939","RelatedDescription":"Open issue \"CategoricalHashTransform breaks on OutputKind \"Key\"\" (#1939)"},{"Id":"392870513","IsPullRequest":true,"CreatedAt":"2018-12-20T03:22:43","Actor":"codemzs","Number":"1937","RawContent":null,"Title":"Remove \"Runtime\" from all namespace reference and move public facing classes used in Samples into Microsoft.ML namespace.","State":"open","Body":"fixes #1697","Url":"https://github.com/dotnet/machinelearning/pull/1937","RelatedDescription":"Open PR \"Remove \"Runtime\" from all namespace reference and move public facing classes used in Samples into Microsoft.ML namespace.\" (#1937)"},{"Id":"392855208","IsPullRequest":true,"CreatedAt":"2018-12-20T01:59:33","Actor":"wschin","Number":"1934","RawContent":null,"Title":"Loads LightGBM inf/nan properly","State":"open","Body":"Follow a suggestion mentioned in #1424 to load inf/nan from trained LightGBM model.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1934","RelatedDescription":"Open PR \"Loads LightGBM inf/nan properly\" (#1934)"},{"Id":"392839215","IsPullRequest":false,"CreatedAt":"2018-12-20T00:46:11","Actor":"danmosemsft","Number":"1933","RawContent":null,"Title":"Enable running tests against .NET Framework","State":"open","Body":"Right now the tests are only built and run against `netcoreapp2.1`. We want to be able to run our unit tests on .NET Framework as well, as we will support that when we release 1.0\r\n\r\n1. The build part is because of [here](https://github.com/dotnet/machinelearning/blob/master/test/Directory.Build.props#L5-L8). The tests either need to be built against `netstandard2.0` or multitargeted. Building against `netstandard2.0` (modifying the line above) fails because the tests depend on the package `xunit.runner.visualstudio 2.4.0` which it happens does not have support for `netstandard2.0`. So probably this line needs to be changed to something like `<DefaultTestTargetFramework>net461,netstandard2.0</DefaultTestTargetFramework>` (comma separated) so that it produces assets for both. Not sure which version of .NET Framework to use here. Whichever it is, the developer will need reference assemblies installed so perhaps we can pick whatever the default is for those.\r\n\r\n2. The running part I did not investigate. Maybe the above is sufficient and it's just another flag to pass to run against .NET Framework.","Url":"https://github.com/dotnet/machinelearning/issues/1933","RelatedDescription":"Open issue \"Enable running tests against .NET Framework\" (#1933)"},{"Id":"392813362","IsPullRequest":true,"CreatedAt":"2018-12-19T23:59:23","Actor":"abgoswam","Number":"1932","RawContent":null,"Title":"Fix TargetFramework for *.StaticPipe assemblies","State":"closed","Body":"Fixes #1931 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1932","RelatedDescription":"Closed or merged PR \"Fix TargetFramework for *.StaticPipe assemblies\" (#1932)"},{"Id":"392806397","IsPullRequest":false,"CreatedAt":"2018-12-19T23:59:23","Actor":"danmosemsft","Number":"1931","RawContent":null,"Title":"Some projects limited to .NET Core unnecessarily?","State":"closed","Body":"As far as I know, all our projects should declare `<TargetFramework>netstandard2.0</TargetFramework>` unless they are \r\n1. exe's - these have to pick a runtime, probably `<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n2. use 3.0-only features, these have `<TargetFramework>netcoreapp3.0</TargetFramework>`\r\n\r\nAre the following projects using code that will not run on .NET Framework? If not, they should target `<TargetFramework>netstandard2.0</TargetFramework>`. \r\n\r\n```xml\r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.HalLearners.StaticPipe\\Microsoft.ML.HalLearners.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.LightGBM.StaticPipe\\Microsoft.ML.LightGBM.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform.StaticPipe\\Microsoft.ML.OnnxTransform.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.StaticPipe\\Microsoft.ML.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.TensorFlow.StaticPipe\\Microsoft.ML.TensorFlow.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1931","RelatedDescription":"Closed issue \"Some projects limited to .NET Core unnecessarily?\" (#1931)"},{"Id":"392782682","IsPullRequest":true,"CreatedAt":"2018-12-19T21:23:17","Actor":"abgoswam","Number":"1930","RawContent":null,"Title":"Move Static API extensions to separate assembly","State":"open","Body":"Towards #1695 \r\n\r\n- Static extensions for TextLoader moved to the Microsoft.ML.StaticPipe assembly\r\n- Static extension related files moved to the Microsoft.ML.StaticPipe assembly\r\n- Moved static extensions for some transforms / learners that were missed in previous PR #1914 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1930","RelatedDescription":"Open PR \"Move Static API extensions to separate assembly\" (#1930)"},{"Id":"392747119","IsPullRequest":true,"CreatedAt":"2018-12-19T19:33:27","Actor":"shmoradims","Number":"1929","RawContent":null,"Title":"Implement ICanSaveInIniFormat interface for GamPredictor","State":"open","Body":"Add support for saving GAM models as ini format. Parity results with maml are included in the tests.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1929","RelatedDescription":"Open PR \"Implement ICanSaveInIniFormat interface for GamPredictor\" (#1929)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-22T05:30:47.2034608Z","RunDurationInMilliseconds":1198}