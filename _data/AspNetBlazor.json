{"Data":{"GitHubIssues":{"Issues":[{"Id":"319390641","IsPullRequest":false,"CreatedAt":"2018-05-02T02:32:14","Actor":"InnovationGB","Number":"730","RawContent":null,"Title":"Razor syntax error in template?","State":"open","Body":"I have dotnet version2.1.300-preview2-008533,\r\n\r\nWhen I create a template for blazor, my counters button is\r\n\r\n<button onclick=\"IncrementCounter\"<button>\r\n\r\nWhy is it in every other template I see such as on scotts april 3rd podcast, the function is called like the following\r\n\r\n<button @onclick(IncrementCounter) ></button>\r\n\r\nI get an error stating onclick cannot be found but this seems to be typical razor syntax? ","Url":"https://github.com/aspnet/Blazor/issues/730","RelatedDescription":"Open issue \"Razor syntax error in template?\" (#730)"},{"Id":"319331510","IsPullRequest":true,"CreatedAt":"2018-05-01T21:18:34","Actor":"msdickinson","Number":"729","RawContent":null,"Title":"Added readFloatField","State":"open","Body":" - Added readFloatField\r\n\r\nAddresses #725 ","Url":"https://github.com/aspnet/Blazor/pull/729","RelatedDescription":"Open PR \"Added readFloatField\" (#729)"},{"Id":"319318186","IsPullRequest":false,"CreatedAt":"2018-05-01T20:49:40","Actor":"dimabayda","Number":"728","RawContent":null,"Title":"Error when bind bootstrap custom attribute","State":"closed","Body":"Hello, i have an error when bind some string to bootstrap custom attribute (consist of two parts connected by a hyphen).\r\n\r\nCode example where error occurs:\r\n`<button type=\"button\" class=\"@ButtonClass\" data-target=\"@TargetId\" data-toggle=\"modal\">\r\n\t@ButtonCaption\r\n</button>`\r\n\r\n![image](https://user-images.githubusercontent.com/15806101/39492155-5d3b8b3a-4d97-11e8-8b77-a69db9a8e4e4.png)\r\n\r\nI think, its related to new \"bind-\" syntax.\r\n","Url":"https://github.com/aspnet/Blazor/issues/728","RelatedDescription":"Closed issue \"Error when bind bootstrap custom attribute\" (#728)"},{"Id":"319119965","IsPullRequest":true,"CreatedAt":"2018-05-01T19:22:16","Actor":"rynowak","Number":"718","RawContent":null,"Title":"WIP Partial for fix #546 - Add more events","State":"closed","Body":"Work in progress adding more built-in event types. I figure I'll keep working on this for a bit and we can merge whatever's ready before we branch","Url":"https://github.com/aspnet/Blazor/pull/718","RelatedDescription":"Closed or merged PR \"WIP Partial for fix #546 - Add more events\" (#718)"},{"Id":"319295652","IsPullRequest":false,"CreatedAt":"2018-05-01T19:14:43","Actor":"danroth27","Number":"727","RawContent":null,"Title":"Make Blazor component library template show up in VS","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/727","RelatedDescription":"Open issue \"Make Blazor component library template show up in VS\" (#727)"},{"Id":"319295443","IsPullRequest":false,"CreatedAt":"2018-05-01T19:14:01","Actor":"danroth27","Number":"726","RawContent":null,"Title":"Make Blazor component libraries work with autobuild","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/726","RelatedDescription":"Open issue \"Make Blazor component libraries work with autobuild\" (#726)"},{"Id":"319293419","IsPullRequest":false,"CreatedAt":"2018-05-01T19:06:26","Actor":"msdickinson","Number":"725","RawContent":null,"Title":"Feature Request: Add \"readFloatField\" ","State":"open","Body":"**About**\r\nBeing able to use InvokeUnmarshalled for arrays Int32[] is very powerful, you can do the same with float[]. But If you want to extract the int you can use \r\n\r\n  `readInt32Field: function readHeapInt32(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return Module.getValue((baseAddress as any as number) + (fieldOffset || 0), 'i32');\r\n  },`\r\n\r\nBut nothing exist for floats.\r\n\r\n**Feature Request**\r\n\r\n\r\nAdd\r\n    `readFloatField: function readFloatField(baseAddress, fieldOffset) {\r\n        return Module.getValue(baseAddress + (fieldOffset || 0), 'float');\r\n    },`\r\n\r\nTo MonoPlatform.ts at that line of code\r\nhttps://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Platform/Mono/MonoPlatform.ts#L112\r\n\r\n**Example Usage**\r\n\r\n```\r\npublic static class ContentPackage\r\n    {\r\n        const string SendPackageIdentifier = \"ContentPackage.Package\";\r\n        public static string SendPackage(float[] package)\r\n        {\r\n            return RegisteredFunction.InvokeUnmarshalled<float[], string>(\r\n                SendPackageIdentifier,\r\n                package);\r\n        }\r\n    }\r\n```\r\n\r\nOn CSHTML \r\n\r\n```\r\n    float[] package = new float[10];\r\n    void SendPackage()\r\n    {\r\n        package[0] = 5.5;\r\n        ContentPackage.SendPackage(package);\r\n    }\r\n```\r\n\r\nOn index.html\r\n\r\n```\r\nBlazor.registerFunction('ContentPackage.Package', function (data) {   \r\n            const arrPtr = Blazor.platform.getArrayEntryPtr(data, 0, 4);   \r\n            console.log(\"ptr: \" + arrPtr);\r\n            console.log(Blazor.platform.readFloatField(arrPtr, 0));\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/725","RelatedDescription":"Open issue \"Feature Request: Add \"readFloatField\" \" (#725)"},{"Id":"319288638","IsPullRequest":false,"CreatedAt":"2018-05-01T19:00:41","Actor":"dlr1","Number":"724","RawContent":null,"Title":"unable to set [Parameter] value, inaccessible due to protection level","State":"closed","Body":"I am using version \"0.3.0-preview1-10261\". \r\nSetting the Parameter value works when it is done inline, but not through code.\r\n\r\nI have a component \"MyComp\"\r\n```\r\n<input bind=\"@Name\" />\r\n@functions{\r\n    [Parameter]\r\n    string Name { get; set; }\r\n}\r\n```\r\nI use it like  below.\r\n```\r\n<MyComp ref=\"mycomp\" Name=\"testing\"></MyComp>\r\n@functions{\r\n    MyComp mycomp;\r\n\r\n    protected override void OnAfterRender()\r\n    {\r\n        base.OnAfterRender();\r\n      //  mycomp.Name = \"this is a test\";\r\n        \r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/724","RelatedDescription":"Closed issue \"unable to set [Parameter] value, inaccessible due to protection level\" (#724)"},{"Id":"319114040","IsPullRequest":true,"CreatedAt":"2018-05-01T16:55:13","Actor":"danroth27","Number":"717","RawContent":null,"Title":"Update survey link","State":"closed","Body":"Fixes #712","Url":"https://github.com/aspnet/Blazor/pull/717","RelatedDescription":"Closed or merged PR \"Update survey link\" (#717)"},{"Id":"318893487","IsPullRequest":false,"CreatedAt":"2018-05-01T16:55:12","Actor":"danroth27","Number":"712","RawContent":null,"Title":"Update survey link","State":"closed","Body":"New survey link: https://go.microsoft.com/fwlink/?linkid=873042","Url":"https://github.com/aspnet/Blazor/issues/712","RelatedDescription":"Closed issue \"Update survey link\" (#712)"},{"Id":"319233174","IsPullRequest":false,"CreatedAt":"2018-05-01T16:20:01","Actor":"dlr1","Number":"723","RawContent":null,"Title":"question: how to add a component dynamically","State":"closed","Body":"If I have some code like the following. how would I add any component at the given location? Having a bunch of if/switch statements is cumbersome.\r\n```\r\n<button onclick=\"@addcomp1\">add comp1</button>\r\n<button onclick=\"@addcomp2\">add comp2</button>\r\n<div style=\"border:dashed 1px black;width:500px;height:100px\">\r\n     /// component goes here\r\n</div>\r\n@functions{\r\n protected void addcomp1()\r\n    {\r\n       // what goes here?\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/723","RelatedDescription":"Closed issue \"question: how to add a component dynamically\" (#723)"},{"Id":"319213414","IsPullRequest":true,"CreatedAt":"2018-05-01T16:12:04","Actor":"SteveSandersonMS","Number":"722","RawContent":null,"Title":"Support custom events and non-bubbling standard events","State":"closed","Body":"... in addition to the existing support for bubbling standard events.","Url":"https://github.com/aspnet/Blazor/pull/722","RelatedDescription":"Closed or merged PR \"Support custom events and non-bubbling standard events\" (#722)"},{"Id":"319182749","IsPullRequest":true,"CreatedAt":"2018-05-01T15:40:08","Actor":"SteveSandersonMS","Number":"720","RawContent":null,"Title":"For checkboxes, bind to 'checked'. Fix special property handling in BrowserRenderer.ts. Fixes #659 and #703","State":"closed","Body":"At first I was going to fix #703 by changing how attributes are applied so we capture all their values up front and can make decisions in an order-independent way. But then I realised that if we treated checkboxes properly then the ordering issue wouldn't exist anyway.\r\n\r\nThis PR changes `bind` for checkboxes to use the `checked` property instead of `value`. It should always have done that really, but didn't as a historical consequence of the old `@bind(...)` syntax. With the new syntax we can just treat checkboxes properly and the issue goes away.\r\n\r\nThis PR also fixes #659 since now we have more consistent (and simpler) handling of \"special\" attributes.\r\n\r\n### Breaking change\r\n\r\nPeople who previously used `<input type='checkbox' value=@someBoolValue />` should now instead write `<input type='checkbox' checked=@someBoolValue />`. This makes a lot more sense anyway.\r\n\r\nIt doesn't affect any code that uses `bind=@someBoolValue`, because we now map that to the new correct property.","Url":"https://github.com/aspnet/Blazor/pull/720","RelatedDescription":"Closed or merged PR \"For checkboxes, bind to 'checked'. Fix special property handling in BrowserRenderer.ts. Fixes #659 and #703\" (#720)"},{"Id":"318677992","IsPullRequest":false,"CreatedAt":"2018-05-01T15:40:08","Actor":"rynowak","Number":"703","RawContent":null,"Title":"value handling for checkbox initial state is dependent on the attribute ordering","State":"closed","Body":"It looks like this logic: https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Rendering/BrowserRenderer.ts#L227\r\n\r\nDepends on the order in which attributes are applied to an element.\r\n\r\nOn the initial render pass if you end up with C# code like:\r\n```\r\n            builder.AddAttribute(60, \"id\", \"checkbox-initially-unchecked\");\r\n            builder.AddAttribute(61, \"value\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(62, \"onchange\", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => checkboxInitiallyUncheckedValue = __value, checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(63, \"type\", \"checkbox\");\r\n```\r\n\r\nThe `type` attribute will be set after the value attribute, which will prevent it from being remapped to 'checked'.\r\n\r\nSome changes I'm making in the HTML handling exposed this issue by making the actual attribute order in the generated code reflect what the user typed in more deterministically, which means that this code from our E2E tests breaks.\r\n```\r\n<p>\r\n    Initially checked:\r\n    <input id=\"checkbox-initially-checked\" bind=\"checkboxInitiallyCheckedValue\" type=\"checkbox\" />\r\n    <span id=\"checkbox-initially-checked-value\">@checkboxInitiallyCheckedValue</span>\r\n</p>\r\n```\r\n\r\nReordering the `bind` and `type` attributes in the test code also works around the issue.\r\n\r\nI'm planning to work around this issue for `bind` for now by forcibly adding the value attribute at the end.","Url":"https://github.com/aspnet/Blazor/issues/703","RelatedDescription":"Closed issue \"value handling for checkbox initial state is dependent on the attribute ordering\" (#703)"},{"Id":"319202721","IsPullRequest":false,"CreatedAt":"2018-05-01T14:27:26","Actor":"dlr1","Number":"721","RawContent":null,"Title":"suggestion: component parameters and events ","State":"closed","Body":"Along with [Parameter] for component parameters, it would be nice to have the exposed parameter have different name then the property name in the component.\r\n\r\nAlong the same lines it will be nice to have some attribute to mark events that are exposed by the components.","Url":"https://github.com/aspnet/Blazor/issues/721","RelatedDescription":"Closed issue \"suggestion: component parameters and events \" (#721)"},{"Id":"319151044","IsPullRequest":true,"CreatedAt":"2018-05-01T09:15:22","Actor":"SteveSandersonMS","Number":"719","RawContent":null,"Title":"Stevesa/tweak pr 683","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/719","RelatedDescription":"Closed or merged PR \"Stevesa/tweak pr 683\" (#719)"},{"Id":"318984400","IsPullRequest":true,"CreatedAt":"2018-05-01T09:08:02","Actor":"SteveSandersonMS","Number":"713","RawContent":null,"Title":"Encourage encapsulation of component parameter properties","State":"closed","Body":"* Implemented the caching-for-perf inside `ParameterCollection` that I've been meaning to get to for a while (i.e., cache fully reified delegates, not `PropertyInfo` or anything like that)\r\n* More test coverage for `ParameterCollection` now its behavior is a bit more sophisticated\r\n* Enable binding to nonpublic properties\r\n* Roslyn analyzer to warn about `[Parameter] public SomeProperty ...`, including codefix that removes the `public` (not that this currently works in `.cshtml` files, but hopefully will in the future - for now VS only shows the codefixes in `.cs` files)\r\n* Change the tag helper descriptor so it also accepts nonpublic `[Parameter]`\r\n\r\nStill to do:\r\n\r\n* Change templates/samples to encapsulate the parameters\r\n\r\nAsking for review now so hopefully I can merge tomorrow morning once the final bit is done.","Url":"https://github.com/aspnet/Blazor/pull/713","RelatedDescription":"Closed or merged PR \"Encourage encapsulation of component parameter properties\" (#713)"},{"Id":"319051358","IsPullRequest":false,"CreatedAt":"2018-05-01T06:30:41","Actor":"chanan","Number":"715","RawContent":null,"Title":"Is there a way to stop propagation of events?","State":"closed","Body":"Is there a way in onclick (I guess using UIMouseEventArgs?) to stop the click from propagating?","Url":"https://github.com/aspnet/Blazor/issues/715","RelatedDescription":"Closed issue \"Is there a way to stop propagation of events?\" (#715)"},{"Id":"319090104","IsPullRequest":false,"CreatedAt":"2018-05-01T04:31:56","Actor":"uopeydel","Number":"716","RawContent":null,"Title":"Unable to run your project. the \"RunCommand\" property is not defined.","State":"closed","Body":"I do follow this guid.\r\n=> https://blazor.net/docs/get-started.html\r\n\r\n![image](https://user-images.githubusercontent.com/12793024/39457191-43a96ce0-4d16-11e8-99c0-3f1383d0d822.png)\r\n\r\nAt step 4 > Press Ctrl-F5 to run the app without the debugger. Running with the debugger (F5) isn't supported at this time.\r\n\r\nWhen i do it , then dialog pop.\r\n\r\n-------\r\n\r\nWhen try \"dotnet run\"\r\nresult is \r\n\r\n![image](https://user-images.githubusercontent.com/12793024/39457699-ef24670c-4d19-11e8-984d-8f422f1ffbb5.png)\r\n\r\nHow can i do for run blazor?\r\n","Url":"https://github.com/aspnet/Blazor/issues/716","RelatedDescription":"Closed issue \"Unable to run your project. the \"RunCommand\" property is not defined.\" (#716)"},{"Id":"318788049","IsPullRequest":true,"CreatedAt":"2018-04-30T20:35:09","Actor":"rynowak","Number":"709","RawContent":null,"Title":"Add [Parameter] for component parameters","State":"closed","Body":"This change introduces ParameterAttribute to specify a bindable\r\ncomponent parameter. As of the 0.3 release of Blazor we plan to make\r\n[Parameter] required to make a property bindable by callers.\r\n\r\nThis also applies to parameters when their value is set by the\r\ninfrastructure, such as `Body` for layouts, and route paramters.\r\n\r\nThe rationale behind this change is that we think there is a need to\r\nseparate the definition of properties from their suitability for a\r\ncaller to set them through markup. We plan to introduce more features in\r\nthis area in the future such as marking parameters as required. This is\r\nfirst step, and we think that this approach will scale nicely as we add\r\nmore functionaly.\r\n\r\nThe 0.3 release seems like the right time to change this behavior since\r\nwe're also introducing `ref` for captures in this release.","Url":"https://github.com/aspnet/Blazor/pull/709","RelatedDescription":"Closed or merged PR \"Add [Parameter] for component parameters\" (#709)"},{"Id":"319008642","IsPullRequest":false,"CreatedAt":"2018-04-30T20:29:24","Actor":"jraulhernandezi","Number":"714","RawContent":null,"Title":"New logo design.","State":"closed","Body":"Hi guys, would you like a new logo design you you project? \r\nI could send you some ideas, let me know.","Url":"https://github.com/aspnet/Blazor/issues/714","RelatedDescription":"Closed issue \"New logo design.\" (#714)"},{"Id":"318751372","IsPullRequest":false,"CreatedAt":"2018-04-30T18:33:55","Actor":"VladislavFurdak","Number":"706","RawContent":null,"Title":"After run Blazor project i see empty browser window","State":"closed","Body":"There are that i see:\r\n![issue1](https://user-images.githubusercontent.com/4522419/39411134-b07cae82-4c0c-11e8-9547-da1640d61787.png)\r\n![issue2](https://user-images.githubusercontent.com/4522419/39411135-b09efc3a-4c0c-11e8-8c9b-0c3533c5fa56.png)\r\n![issue3](https://user-images.githubusercontent.com/4522419/39411136-b0be0fd0-4c0c-11e8-86cf-ab6ee11093ff.png)\r\n\r\nBut as i understand empty project after \"Loading...\" label should show something\r\nAlso, when i tried to run any sample projects written in Blazor, i got the same thing\r\nAlso, i have installed VS 2017 of earlier edition on my PC.\r\n","Url":"https://github.com/aspnet/Blazor/issues/706","RelatedDescription":"Closed issue \"After run Blazor project i see empty browser window\" (#706)"},{"Id":"318812597","IsPullRequest":false,"CreatedAt":"2018-04-30T08:06:03","Actor":"jirisykora83","Number":"711","RawContent":null,"Title":"Page with component with same name as page.","State":"open","Body":"**Runtime Environment:**\r\nOS Name: Windows\r\nOS Version: 10.0.16299\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\\r\n\r\n**Repro**\r\n\r\nIn any Blazor template Create folder `Components`\r\nCreate Blazor component with same name as one `Pages`\r\nOpen this page.\r\n\r\nIt quickly consume lot of RAM and burn 1 CPU core.\r\n\r\n**Excepted behavior**\r\n\r\n**Worst:** exception during runtime (now i must kill tab in chrome task manager).\r\n**Better**: Prevent to build with some error.\r\n**Other option**: It is currently allowed having nested pages? If not then Blazor could always use component instant of recursively use pages with same name (what is currently issue i guess).","Url":"https://github.com/aspnet/Blazor/issues/711","RelatedDescription":"Open issue \"Page with component with same name as page.\" (#711)"},{"Id":"318793809","IsPullRequest":false,"CreatedAt":"2018-04-30T07:53:50","Actor":"tojak","Number":"710","RawContent":null,"Title":"Only white page after loading","State":"closed","Body":"I updated my visual studio (community) preview version to 15.7 preview 5.\r\nThe dotnet-sdk version is 2.1.300-preview1.\r\n\r\nBlazor version is 0.2.1.0.\r\n\r\nWhen running the template app (that comes with visual studio) I get the \"Loading ...\"-Screen and than a white page. Breakpoints are not reached. Whats wrong? Is it blazor? Is it my system-configuration?\r\n\r\nP.S.: Starting an old app with blazor version 0.1.0.0 still works.","Url":"https://github.com/aspnet/Blazor/issues/710","RelatedDescription":"Closed issue \"Only white page after loading\" (#710)"},{"Id":"318769178","IsPullRequest":true,"CreatedAt":"2018-04-30T01:41:54","Actor":"rynowak","Number":"708","RawContent":null,"Title":"Resolves #297","State":"open","Body":"Removes the workaround for #297 and sets the langauge version to\r\nexperimental.\r\n\r\nThis will require 2.1.0-rc of Razor.","Url":"https://github.com/aspnet/Blazor/pull/708","RelatedDescription":"Open PR \"Resolves #297\" (#708)"},{"Id":"318761037","IsPullRequest":true,"CreatedAt":"2018-04-29T23:50:20","Actor":"rynowak","Number":"707","RawContent":null,"Title":"Rewrite of HTML handling for Blazor","State":"open","Body":"This change replaces the parsing of HTML that we perform during the code\r\ngeneration phase, which parsing of HTML during the IR lowering phase.\r\nThe main benefit of this change is that the structure of the HTML is\r\nreflected in the IR tree, allowing us to do more more advance\r\ntransformations.\r\n\r\nAs an example, see how the the handling of `<script>` tags is now a\r\nseparate pass.\r\n\r\nAs an aside from this I also redesigned the structure of component IR\r\nnodes to match the new HTML element nodes. Passes are now more easily\r\naware of the nodes they are expected to handle and are more easily aware\r\nof the difference between a component and element. This still isn't as\r\nclean as I would like, but I think it's a reasonable improvement.\r\n\r\nAnother benefit of this is that the code generation is much simpler and\r\nrequires much less bookkeeping and statefulness.","Url":"https://github.com/aspnet/Blazor/pull/707","RelatedDescription":"Open PR \"Rewrite of HTML handling for Blazor\" (#707)"},{"Id":"318732051","IsPullRequest":false,"CreatedAt":"2018-04-29T16:55:54","Actor":"mrpmorris","Number":"705","RawContent":null,"Title":"Allow coder to specify BindingFlags in JsonUtil","State":"open","Body":"I want my state to be read-only, but I also need to be able to serialise/deserialise that state using JsonUtil. As they have private setters these properties are not being set.\r\n\r\nPlease could you add a BindingFlags parameter to the Deserialize() method which will allow me to tell it to set properties with private setters? ","Url":"https://github.com/aspnet/Blazor/issues/705","RelatedDescription":"Open issue \"Allow coder to specify BindingFlags in JsonUtil\" (#705)"},{"Id":"318660740","IsPullRequest":false,"CreatedAt":"2018-04-29T10:12:11","Actor":"stavroskasidis","Number":"701","RawContent":null,"Title":"Passing element reference from js to C# and back","State":"closed","Body":"I am trying to pass an element reference to C# from JS in my blazor library,\r\nI am trying with the following code:\r\n\r\n``` html\r\n<!-- Index.cshtml -->\r\n\r\n<h1 ref=\"element\">Hello, world!</h1>\r\n<button type=\"button\" onclick=\"@PassElement\">Pass element</button>\r\n@functions{\r\n    ElementRef element;\r\n    void PassElement()\r\n    {\r\n        RegisteredFunction.Invoke<object>(\"PassElementToJs\", element);\r\n    }\r\n}\r\n```\r\n\r\n``` javascript\r\n<script>\r\n   // javascript interop\r\n   Blazor.registerFunction('PassElementToJs', function (element) {\r\n       console.log(\"JS: PassElementToJs => element: \", element); //this is ok, element is populated\r\n       var method = Blazor.platform.findMethod(\"WebApplication1.Client\", \"WebApplication1.Client\", \"JsInterop\", \"PassElementToCSharp\");\r\n       Blazor.platform.callMethod(method, null, [element]);\r\n    });\r\n\r\n   Blazor.registerFunction('SecondPassElementToJs', function (element) {\r\n        //element is null\r\n        console.log(\"JS: SecondPassElementToJs => element: \", element);\r\n   });\r\n</script>\r\n```\r\n\r\n\r\n``` csharp\r\n//C# interop\r\n\r\npublic static class JsInterop\r\n{\r\n  public static void PassElementToCSharp(ElementRef element)\r\n  {\r\n      Console.WriteLine(\"C#: PassElementToCSharp => element: \" + element);\r\n      RegisteredFunction.Invoke<object>(\"SecondPassElementToJs\", element);\r\n  }\r\n}\r\n```\r\n\r\nWhat I am doing wrong ?","Url":"https://github.com/aspnet/Blazor/issues/701","RelatedDescription":"Closed issue \"Passing element reference from js to C# and back\" (#701)"},{"Id":"318701385","IsPullRequest":false,"CreatedAt":"2018-04-29T08:58:21","Actor":"mrpmorris","Number":"704","RawContent":null,"Title":"Request: A global method call to rerender all components","State":"open","Body":"My Redux/Flux library (Blazor.Fluxor) can have its state set via a Chrome plugin (Redux Dev Tools), so it is possible to change state without first having any user interaction on the page.\r\n\r\nAs my debugger tool uses an AddMiddleware approach this means there is no component, and having all components in an app descend from base class would be an incorrect approach (see below)\r\n\r\nWhat I need is to be able to either iterate all correct component instances and call StateHasChanged on them, or have some kind of global method to call that will instruct all components to re-bind.\r\n\r\nMy other option is to require users of my library to descend from a common component, but I don't think that's appropriate because 1) The feature in my library is an optional middleware 2) It is only intended to be used in debug mode 3) If library coders must force our users to use our own BlazorComponent descendant classes for their components then those users won't be able to use multiple libraries together.","Url":"https://github.com/aspnet/Blazor/issues/704","RelatedDescription":"Open issue \"Request: A global method call to rerender all components\" (#704)"},{"Id":"318663911","IsPullRequest":false,"CreatedAt":"2018-04-28T19:50:10","Actor":"GoldenCrystal","Number":"702","RawContent":null,"Title":"Route segments are not decoded","State":"open","Body":"### Title\r\nRoute segments are not decoded\r\n\r\n### Functional impact\r\nSpaces, non-ASCII characters, or other unsafe characters will not work properly inside URLs out of the box.\r\nThis impacts routes such as ````@page \"/ブラゾル\" ````, or any route parameter that would contain unsafe characters.\r\n\r\n### Minimal repro steps\r\n1. Create a new Blazor application\r\n2. Create a page like this one:\r\n````\r\n@page \"/wiki/{topic}\"\r\n\r\n<p>@Topic</p>\r\n\r\n@functions {\r\n    public string Topic { get; set; }\r\n}\r\n````\r\n3. Start the application and navigate to \"/wiki/déjà vu\" in your Browser\r\n\r\n### Expected result\r\nI expect the page to display \"déjà vu\"\r\n\r\n### Actual result\r\nInstead, I see \"d%C3%A9j%C3%A0%20vu\"\r\n\r\n### Further technical details\r\nI tested this on Chrome 65 and Firefox 59.\r\n\r\nIt seems that the simplified parsing implementation in [RouteContext](https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor/Routing/RouteContext.cs) could easily be improved for handling this scenario.\r\n\r\nI'm ok with providing a PR for this, if needed.","Url":"https://github.com/aspnet/Blazor/issues/702","RelatedDescription":"Open issue \"Route segments are not decoded\" (#702)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-02T05:30:02.4864466Z","RunDurationInMilliseconds":1128}