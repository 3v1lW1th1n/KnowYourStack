{"Data":{"GitHubIssues":{"Issues":[{"Id":"381401482","IsPullRequest":false,"CreatedAt":"2018-11-16T00:50:40","Actor":"DaRosenberg","Number":"1685","RawContent":null,"Title":"\"Fatal error in IL Linker\" when adding reference to System.Reactive","State":"open","Body":"I wanted to experiment with building a stand-alone Blazor app that utilizes some existing managed code we have which depends on `System.Reactive`. However, as soon as `System.Reactive` is added (either directly to the Blazor app project, or to any other project the Blazor app references) the following build error happens:\r\n\r\n```\r\n1>------ Rebuild All started: Project: RetrospectBlazorPoc, Configuration: Debug Any CPU ------\r\n1>RetrospectBlazorPoc -> C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\bin\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\r\n1>Fatal error in IL Linker\r\n1>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Reactive, Version=4.1.0.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263'\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n1>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n1>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n1>   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step)\r\n1>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n1>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n1>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n1>C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\Blazor.MonoRuntime.targets(439,5): error MSB3073: The command \"dotnet \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/illink/illink.dll\" -l none --verbose --strip-security true --exclude-feature com --exclude-feature sre -v false -c link -u link -b true -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker/\" -x \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\lib\\netstandard1.0\\Microsoft.AspNetCore.Blazor.TagHelperWorkaround.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.jsinterop\\0.7.0\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\mono.webassembly.interop\\0.7.0\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive\\4.1.2\\lib\\netstandard2.0\\System.Reactive.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive.core\\4.1.2\\lib\\netstandard2.0\\System.Reactive.Core.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.5.0\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.interopservices.windowsruntime\\4.3.0\\lib\\netstandard1.3\\System.Runtime.InteropServices.WindowsRuntime.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.threading.tasks.extensions\\4.5.1\\lib\\netstandard2.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\"\" exited with code 1.\r\n1>Done building project \"RetrospectBlazorPoc.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n\r\nAny idea why this happens, and how to fix or work around this?","Url":"https://github.com/aspnet/Blazor/issues/1685","RelatedDescription":"Open issue \"\"Fatal error in IL Linker\" when adding reference to System.Reactive\" (#1685)"},{"Id":"381286130","IsPullRequest":false,"CreatedAt":"2018-11-15T18:29:07","Actor":"SteveSandersonMS","Number":"1684","RawContent":null,"Title":"Change \"npm install\" to \"npm ci\"","State":"open","Body":"Hopefully this will lessen the flakiness in CI.","Url":"https://github.com/aspnet/Blazor/issues/1684","RelatedDescription":"Open issue \"Change \"npm install\" to \"npm ci\"\" (#1684)"},{"Id":"381257647","IsPullRequest":false,"CreatedAt":"2018-11-15T17:17:39","Actor":"stas-sultanov","Number":"1683","RawContent":null,"Title":" table.deleteRow without JS","State":"closed","Body":"Can't find in any example\r\nhow to delete table row or any dom element without JS inter-op :(","Url":"https://github.com/aspnet/Blazor/issues/1683","RelatedDescription":"Closed issue \" table.deleteRow without JS\" (#1683)"},{"Id":"381212901","IsPullRequest":false,"CreatedAt":"2018-11-15T15:29:32","Actor":"danroth27","Number":"1682","RawContent":null,"Title":"CSSLint warnings from site.css","State":"open","Body":"On a clean project if you open *site.css* you get the following warnings in VS 15.9:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\toverqualified-elements\t(CssLint) Element (a.active) is overqualified, just use .active without element name.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t69\t\r\nWarning\timport\t(CssLint) @import prevents parallel downloads, use <link> instead.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t1\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t33\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t70\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t75\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t84\t\r\nWarning\timportant\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t111\t\r\nWarning\tuser\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t112\t\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1682","RelatedDescription":"Open issue \"CSSLint warnings from site.css\" (#1682)"},{"Id":"380568230","IsPullRequest":true,"CreatedAt":"2018-11-15T09:43:49","Actor":"danroth27","Number":"1677","RawContent":null,"Title":"Update survey link for 0.7.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1677","RelatedDescription":"Closed or merged PR \"Update survey link for 0.7.0\" (#1677)"},{"Id":"381011651","IsPullRequest":false,"CreatedAt":"2018-11-15T05:57:28","Actor":"danroth27","Number":"1681","RawContent":null,"Title":"FormatException: Input string was not in a correct format","State":"open","Body":"When working on replicating the `TabSet` component from the last Blazor community standup I got this exception with VS 2017 15.9 and the Blazor 0.7.0-preview1 build:\r\n\r\n```\r\nSystem.FormatException: Input string was not in a correct format.\r\n at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.Format(IFormatProvider provider, String format, Object[] args)\r\n at Microsoft.AspNetCore.Razor.Language.DefaultRazorDiagnostic.GetMessage(IFormatProvider formatProvider)\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.NotifyOnCodeGenerationComplete()\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.<>c__DisplayClass67_0.<OnDocumentStructureChanged>b__0()\r\n at Microsoft.Web.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)\r\n --- End of stack trace from previous location where exception was thrown ---\r\n at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nHere's the component file I was working on:\r\n\r\n```html\r\n<ul class=\"nav nav-tabs\">\r\n    @foreach (var tab in tabs)\r\n    {\r\n        <li class=\"nav-item\">\r\n            <a onclick=\"@(() => SelectTab(tab))\" class=\"nav-link @(tab==)\r\n        </li>\r\n    }\r\n\r\n</ul>\r\n\r\n\r\n@functions {\r\n\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/1681","RelatedDescription":"Open issue \"FormatException: Input string was not in a correct format\" (#1681)"},{"Id":"380936410","IsPullRequest":false,"CreatedAt":"2018-11-14T23:42:56","Actor":"danroth27","Number":"1680","RawContent":null,"Title":"Blazor 0.7.0 release checklist","State":"open","Body":"- [x] Update survey links in templates\r\n- [x] Create final release build with correct version numbers\r\n- [x] Perform final manual verification of VSIX/packages, including that they are all signed\r\n- [x] Upload packages to nuget.org\r\n- [x] Upload VSIX to VS marketplace\r\n- [x] Wait for nuget.org to re-index and show new package versions\r\n- [ ] Publish updated docs (conceptual and API)\r\n- [x] Create release tag and release on the Blazor repo\r\n- [x] Publish announcement blog post\r\n- [x] Tweet announcement from aspnet account\r\n- [ ] Mark the release's milestone as done\r\n","Url":"https://github.com/aspnet/Blazor/issues/1680","RelatedDescription":"Open issue \"Blazor 0.7.0 release checklist\" (#1680)"},{"Id":"380841853","IsPullRequest":false,"CreatedAt":"2018-11-14T19:02:02","Actor":"SteveSandersonMS","Number":"1679","RawContent":null,"Title":"Reconsider how rendering calls are run in series via sync context","State":"open","Body":"In #1672, I made a change to `RemoteRenderer`'s `AddToRenderQueue` so that the rendering calls are always run in series within a given circuit. This worked by posting the rendering action to the circuit's sync context. [See code here](https://github.com/aspnet/Blazor/pull/1672/files#diff-4a18bde3a2af3f8ec6fe58b9f99c7ea2R109). This was a fix to the issue reported at #1573.\r\n\r\nHowever in retrospect I'm not certain this is the right fix. As per Ryan's comment:\r\n\r\n> I would expect the code after the await to resume on the sync context\r\n\r\nWe have a test to show this does work, plus I've manually checked that our sync context *does* cause the lifecycle methods' `await` continuations to be run in series within a given circuit. So why was it necessary to make a further change to queue the render calls sequentally on the sync context? Why weren't they *already* running sequentially on the sync context?\r\n\r\nAfter some investigation, I think the reason is that in various places, we use `task.ContinueWith`, and surprisingly that does *not* honour `SynchonizationContext.Current` in the same way that `await` does. If we want `ContinueWith` to queue continuations on the sync context, we need to change the value of `TaskScheduler.Current` to something like `TaskScheduler.FromCurrentSynchronizationContext()`. I'm not certain where the right place to plug that in would be. If we can make this work, then we can remove the old workaround that explicitly marshals onto the sync context in `RemoteRenderer.AddToRenderQueue` (because we'll already be on it), which will be a good thing for perf.\r\n\r\nAdditionally, I think we should consider being stricter about forcing all UI interactions (`Render` calls at least) to be running inside a queued work item on the renderer's corresponding sync context. In any case where that's not happening, we should consider throwing like other UI frameworks do. That would help earlier diagnosis of any weirdness we may have missed.\r\n\r\ncc @rynowak for any comments or opinions.\r\n\r\n**Repro steps**\r\n\r\nIf you want to repro the original issue, go to `RemoteRenderer.cs` and remove its override of the `AddToRenderQueue` method (or comment out the call to `_syncContext.Post`, and just invoke `base.AddToRenderQueue` directly instead). Then run the E2E tests in server-side execution mode (launch `TestServer`, browse to http://localhost:port/subdir#server), open the \"Concurrent renders\" example, and see that the rendering has got all messed up because you removed the marshalling back onto the sync context.\r\n\r\nYou can also set a breakpoint inside `RenderHandle`'s `Render` method and use the immediate window to observe that, after the `await`, the call is *not* on the circuit sync context any more.","Url":"https://github.com/aspnet/Blazor/issues/1679","RelatedDescription":"Open issue \"Reconsider how rendering calls are run in series via sync context\" (#1679)"},{"Id":"380563123","IsPullRequest":false,"CreatedAt":"2018-11-14T16:33:58","Actor":"danroth27","Number":"1676","RawContent":null,"Title":"Strange method intellisense in Blazor app","State":"closed","Body":"![image](https://user-images.githubusercontent.com/1874516/48465643-675d1980-e798-11e8-973c-cf10758d2913.png)\r\n![image](https://user-images.githubusercontent.com/1874516/48465671-7cd24380-e798-11e8-97b4-ba415f383657.png)\r\n\r\nThe type name for the Blazor component should just be `Index`.","Url":"https://github.com/aspnet/Blazor/issues/1676","RelatedDescription":"Closed issue \"Strange method intellisense in Blazor app\" (#1676)"},{"Id":"380633576","IsPullRequest":true,"CreatedAt":"2018-11-14T10:31:56","Actor":"StevenTCramer","Number":"1678","RawContent":null,"Title":"(TS) Object is possibly 'null' fix","State":"open","Body":"micro fix for #1670 \r\nadd the non-null assertion operator.","Url":"https://github.com/aspnet/Blazor/pull/1678","RelatedDescription":"Open PR \"(TS) Object is possibly 'null' fix\" (#1678)"},{"Id":"380281042","IsPullRequest":false,"CreatedAt":"2018-11-13T15:30:25","Actor":"BickelLukas","Number":"1675","RawContent":null,"Title":"Allow ComponentFactory to be extended","State":"open","Body":"When using a custom DI container that doesn't provide an IServiceProvider it's not possible to inject services into components.\r\n\r\nI'm using SimpleInjector as a DI container. Now I can't inject services into Views that were registered into that container.\r\n\r\nIt would be great If the renderer wouldn't depend on the IServiceProvider but instead take an IComponentFactory that I can then override to provide my own implementation using my DI container. \r\n\r\nHere's a great post on the creator of SimpleInjector on this topic: https://simpleinjector.org/blog/2016/06/whats-wrong-with-the-asp-net-core-di-abstraction/","Url":"https://github.com/aspnet/Blazor/issues/1675","RelatedDescription":"Open issue \"Allow ComponentFactory to be extended\" (#1675)"},{"Id":"380239889","IsPullRequest":true,"CreatedAt":"2018-11-13T14:41:56","Actor":"SteveSandersonMS","Number":"1674","RawContent":null,"Title":"Bump version to 0.8.0-preview1-*","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1674","RelatedDescription":"Closed or merged PR \"Bump version to 0.8.0-preview1-*\" (#1674)"},{"Id":"380196737","IsPullRequest":true,"CreatedAt":"2018-11-13T13:40:14","Actor":"SteveSandersonMS","Number":"1673","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"closed","Body":"Same as #1475","Url":"https://github.com/aspnet/Blazor/pull/1673","RelatedDescription":"Closed or merged PR \"Marshal oninput events as UIChangeEventArgs\" (#1673)"},{"Id":"380176717","IsPullRequest":true,"CreatedAt":"2018-11-13T13:04:55","Actor":"SteveSandersonMS","Number":"1672","RawContent":null,"Title":"Serialize server-side renders. Fixes #1573","State":"closed","Body":"Another case where the asynchrony of server-side rendering needed some extra work to ensure the correct behaviors. This was a simple thread safety issue inside `Renderer`.\r\n\r\nTo a first approximation, I could have fixed it just by putting a `lock(_renderer) { ... }` around `RenderHandle`'s call to `_renderer.AddToRenderQueue`. However that could lead to deadlock because rendering can be re-entrant (a child can cause its own parent to re-render, e.g., by invoking some callback passed by the parent).\r\n\r\nThe solution here is to enqueue render calls on the circuit sync context. This causes some extra allocations per-render but provides an easy-to-reason-about solution. Plus it ensures that component lifecycle methods such as `Init` (which is invoked by the renderer) get executed serially within the sync context, which better matches up with the WebAssembly execution style.","Url":"https://github.com/aspnet/Blazor/pull/1672","RelatedDescription":"Closed or merged PR \"Serialize server-side renders. Fixes #1573\" (#1672)"},{"Id":"379829513","IsPullRequest":true,"CreatedAt":"2018-11-13T11:34:03","Actor":"SteveSandersonMS","Number":"1666","RawContent":null,"Title":"Fix intermittent render omissions. Fixes #1223.","State":"closed","Body":"As per #1223, there were some timing-based cases where server-side rendering would just fail to apply certain updates to the UI.\r\n\r\nThe underlying reason turned out to be a misunderstanding about how the SignalR APIs work: I thought that `SendAsync` would at least *send* the data synchronously, and that the returned `Task` represented the network transfer. In fact I was wrong, and `SendAsync` doesn't necessarily serialize the inputs synchronously - if the network channel is currently busy, it waits until it's free before serializing. This was problematic because we reuse `RenderBatch` instances and their buffers for subsequent renders, so if multiple renders occurred sufficiently close together in time, the 2nd or later render could have its data overwritten by the 3rd or later render before its data was dispatched to the client.\r\n\r\nThe fix here is the obvious one, i.e., to snapshot the `RenderBatch` data synchronously at the time when `UpdateDisplay` is called. This has the drawback that we are now allocating an extra `byte[]` on every render. Later on, we should consider putting in some kind of object pool for this.","Url":"https://github.com/aspnet/Blazor/pull/1666","RelatedDescription":"Closed or merged PR \"Fix intermittent render omissions. Fixes #1223.\" (#1666)"},{"Id":"380061287","IsPullRequest":false,"CreatedAt":"2018-11-13T11:30:44","Actor":"StevenTCramer","Number":"1670","RawContent":null,"Title":"'document.head.appendChild(element);' Object is possibly 'null'.","State":"closed","Body":"Currently when I am building the repo locally I get.\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS2531\t(TS) Object is possibly 'null'.\tC:\\git\\github\\forks\\Blazor\\src\\Microsoft.AspNetCore.Blazor.Browser.JS (tsconfig or jsconfig project)\tC:\\git\\github\\forks\\Blazor\\src\\Microsoft.AspNetCore.Blazor.Browser.JS\\src\\BootCommon.ts\t27\tActive\r\n```\r\nThe offending line is\r\n```\r\ndocument.head.appendChild(element);\r\n```\r\n\r\nI think a simple fix, if we can assume the head element exist in the loaded document (can we?), would be:\r\n\r\n```\r\ndocument.head!.appendChild(element);\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1670","RelatedDescription":"Closed issue \"'document.head.appendChild(element);' Object is possibly 'null'.\" (#1670)"},{"Id":"380119080","IsPullRequest":false,"CreatedAt":"2018-11-13T11:26:46","Actor":"StevenTCramer","Number":"1671","RawContent":null,"Title":"Question:  How to run \"BasicTestApp\" from Visual Studio","State":"closed","Body":"I have Blazor building locally now and all the test cases pass, I want to add another test case for SVGs to first correctly catch the error then fix it. \r\n\r\nI want to be able to run the \"BasicTestApp\" but when I attempt to I get:\r\n\r\n```\r\njsinteroptests.js:1 Uncaught SyntaxError: Unexpected token <\r\nblazor.webassembly.js:1 Uncaught SyntaxError: Unexpected token <\r\n```\r\nLooking at the \"Network\" tab, I see it is returning html. thus the error... but why?\r\n\r\nI turn off headless on selenium tests and see that this app actually loads for the tests... why doesn't it when I just set it as StartUp Project and run from Visaul Studio?\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1671","RelatedDescription":"Closed issue \"Question:  How to run \"BasicTestApp\" from Visual Studio\" (#1671)"},{"Id":"379978335","IsPullRequest":false,"CreatedAt":"2018-11-12T22:30:26","Actor":"IvanJosipovic","Number":"1669","RawContent":null,"Title":"Namespace conflict external packages","State":"open","Body":"My Blazor project is called **Example.Blazor.Client**, today I tried to use Blazor.FlexGrid and Blazor.Extensions nugget packages and noticed that my project couldn't see those Namespaces.\r\n\r\nIt turns out its because of a namespace conflict as Example.Blazor overwrites Blazor.*\r\n\r\nRepro:\r\nCreate Blazor Project with name \"Test.Blazor.Client\"\r\nAdd nugget packages Blazor.FlexGrid or Blazor.Extensions.* and try using namespace in Page.\r\n\r\n![image](https://user-images.githubusercontent.com/9521987/48378490-a3ec2080-e685-11e8-8db4-fc1bace7c92e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/9521987/48378860-f8dc6680-e686-11e8-904e-f4b101d68ee8.png)\r\n\r\n\r\nIssue is reproduced on this repo: https://github.com/IvanJosipovic/BlazorNamespaceBug/\r\nBlazor.Client project will build\r\nTest.Blazor.Client will not build\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1669","RelatedDescription":"Open issue \"Namespace conflict external packages\" (#1669)"},{"Id":"379954707","IsPullRequest":false,"CreatedAt":"2018-11-12T21:14:15","Actor":"romanoza","Number":"1668","RawContent":null,"Title":"Problem of compiling a generic component","State":"open","Body":"I have the following problem.\r\n\r\nThe **MyClass** class is placed in the BlazorTest.Shared project and it's defined as:\r\n\r\n```\r\nnamespace BlazorTest.Shared\r\n{\r\n    public class MyClass\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nI have also created a simple component, called **MyComponent**:\r\n\r\n```\r\n@using BlazorTest.Shared\r\n@typeparam T\r\n\r\n<div></div>\r\n\r\n@functions {\r\n\r\n[Parameter] T PropertyToInferType { get; set; }\r\n[Parameter] MyClass MyProperty { get; set; }\r\n\r\n}\r\n\r\n```\r\nMy page looks like this:\r\n\r\n```\r\n@using BlazorTest.Shared\r\n@page \"/counter\"\r\n\r\n<MyComponent PropertyToInferType=\"3\" MyProperty=\"@MyObject\" />\r\n\r\n@functions {\r\n    MyClass MyObject = new MyClass();\r\n}\r\n```\r\n\r\nI'm getting the compile-time errors:\r\n\r\n> The type or namespace name 'Shared' does not exist in the namespace '__Blazor.BlazorTest' (are you missing an assembly reference?)\r\n> Argument 6: cannot convert from 'BlazorTest.Shared.MyClass' to '__Blazor.BlazorTest.Shared.MyClass'\r\n\r\nIf I remove the `@typeparam` directive and modify the component by removing the `PropertyToInferType`  property, then everything compiles without errors.\r\n\r\nAm I missing something?\r\n\r\nPS. Blazor is awesome.","Url":"https://github.com/aspnet/Blazor/issues/1668","RelatedDescription":"Open issue \"Problem of compiling a generic component\" (#1668)"},{"Id":"379564974","IsPullRequest":false,"CreatedAt":"2018-11-12T20:02:12","Actor":"rshillington","Number":"1663","RawContent":null,"Title":"VS Code hangs when setting bind property in nshtml files","State":"closed","Body":"Visual Studio Code: 1.28.2 (1.28.2)\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.403/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nSteps to reproduce\r\n1) Create a public class in a .cs file\r\n2) add a public property in the class\r\n3) create a page component in a .cshtml file\r\n4) add `@inherits` and name the class\r\n5) add a `<input type=\"text\" bind=\"@prop\"/>` element\r\n\r\nExpected behaviour\r\nVS Code should keep running.\r\n\r\nActual behaviour\r\nAfter typing `@` the entire VS code environment freezes.  After a period of the time, the OS gives a dialog box saying the window has stopped responding, and offers to close, continue waiting, or reopen.\r\n\r\n\r\nWorkaround:\r\ntype the `@prop` string somewhere else, and then copy/paste it into place.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1663","RelatedDescription":"Closed issue \"VS Code hangs when setting bind property in nshtml files\" (#1663)"},{"Id":"379891807","IsPullRequest":false,"CreatedAt":"2018-11-12T18:02:40","Actor":"cesarzapatawfm","Number":"1667","RawContent":null,"Title":" 'Router' cannot find any component with a route for '/todo'","State":"open","Body":"I'm following the tutorial https://blazor.net/docs/tutorials/build-your-first-blazor-app.html but when I add the todo component and try to navigate to it , i get an error on browser console. \r\n\"Uncaught (in promise) Error: System.InvalidOperationException: 'Router' cannot find any component with a route for '/todo'.\"\r\n\r\nHere is my Todo.cshtml page. \r\n```html\r\n@page \"/todo\"\r\n\r\n<h1>Todo</h1>\r\n```\r\nI tried rebuilding and restarting Visual Studio but still getting the error. The other pages that came in the templates index,counter and fetchdata are working fine. \r\n\r\nAny ideas? ","Url":"https://github.com/aspnet/Blazor/issues/1667","RelatedDescription":"Open issue \" 'Router' cannot find any component with a route for '/todo'\" (#1667)"},{"Id":"379408318","IsPullRequest":false,"CreatedAt":"2018-11-12T16:31:04","Actor":"tidyui","Number":"1659","RawContent":null,"Title":"State gets confused for dynamically resolved components","State":"closed","Body":"This is related to issue #1644, but as the bug is slightly different I'll create a separate issue for it. In my attempt to invoke components dynamically before there's first class support for it I've used a trick with `OpenComponent` that was provided through this Gist.\r\n\r\nhttps://gist.github.com/Suchiman/d89c8f3731f92e70a81282bac19dae04\r\n\r\nEverything looks fine on first render when using the approach in the Gist but when something is edited in the view (like deleting an item from the list) the state goes bananas and start mixing up the components with each other. If I remove the DynamicComponent and instead pick the component with a switch statement everything works as expected. It's almost like the state handling doesn't notice the difference between the items when they are all rendered by the DynamicComponent.\r\n\r\nHere's a test repo with the essentials filtered out.\r\n\r\nhttps://github.com/tidyui/BlazorDynamicTest\r\n\r\nThere are two pages /working and /notworking. The only difference is that in /notworking components are resolved dynamically, but in /working they are resolved with a switch case. If you delete items from the top of the list you will see the difference and notice that the state gets messed up when components are dynamically resolved.\r\n\r\nBest regards","Url":"https://github.com/aspnet/Blazor/issues/1659","RelatedDescription":"Closed issue \"State gets confused for dynamically resolved components\" (#1659)"},{"Id":"379495526","IsPullRequest":false,"CreatedAt":"2018-11-12T15:50:22","Actor":"Entroper","Number":"1661","RawContent":null,"Title":"Crash when using Math.Round with MidpointRounding.AwayFromZero","State":"closed","Body":"This is a peculiar one, but the following code will crash every time (I just made the default Blazor standalone template and replaced the `IncrementCount` method to make a reproducible example):\r\n\r\n```\r\n@page \"/counter\"\r\n\r\n<h1>Counter</h1>\r\n\r\n<p>Current count: @currentCount</p>\r\n\r\n<button class=\"btn btn-primary\" onclick=\"@IncrementCount\">Click me</button>\r\n\r\n@functions {\r\n\r\n\tint currentCount = 0;\r\n\r\n\tvoid IncrementCount()\r\n\t{\r\n\t\tvar exponent = 123456789.0d / uint.MaxValue;\r\n\t\tcurrentCount = (int)Math.Round(exponent, MidpointRounding.AwayFromZero);\r\n\t}\r\n}\r\n```\r\n\r\nThe console prints:\r\n```\r\nWASM: Initialized blazor.webassembly.js:1:32043\r\nWASM: CANNOT HANDLE COOKIE DDI blazor.webassembly.js:1:32043\r\nWASM: * Assertion at /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mono/mini/wasm_m2n_invoke.g.h:547, condition `0' not met blazor.webassembly.js:1:32043\r\nWASM: blazor.webassembly.js:1:32043\r\nuncaught exception: abort(). Build with -s ASSERTIONS=1 for more info.\r\n```\r\n\r\nThis only happens when I use `MidpointRounding.AwayFromZero`.  `ToEven` works fine.","Url":"https://github.com/aspnet/Blazor/issues/1661","RelatedDescription":"Closed issue \"Crash when using Math.Round with MidpointRounding.AwayFromZero\" (#1661)"},{"Id":"379589415","IsPullRequest":false,"CreatedAt":"2018-11-12T15:49:30","Actor":"IyyappanAmirthalingam","Number":"1664","RawContent":null,"Title":"Build failed - v 0.60 with Microsoft.EntityFrameworkCore.SqlServer","State":"closed","Body":"Hi,\r\nWhen I tried to build the Blazor (standalone) Version 0.6.0 after installing Microsoft.EntityFrameworkCore.SqlServer the build is failing. \r\n\r\n> Steps to reproduce\r\n> 1. Create a new Blazor (standalone) app\r\n> 2. Install Microsoft.EntityFrameworkCore.SqlServer\r\n> 3. Build the solution to see the error.\r\n\r\nVerified in Visual Studio 2017 and Visual Studio code . Please help.\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1664","RelatedDescription":"Closed issue \"Build failed - v 0.60 with Microsoft.EntityFrameworkCore.SqlServer\" (#1664)"},{"Id":"379622479","IsPullRequest":false,"CreatedAt":"2018-11-12T15:47:29","Actor":"IvanJosipovic","Number":"1665","RawContent":null,"Title":"Update FAQ \"Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\"","State":"closed","Body":"> Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\r\nFor older browsers that don't support WebAssembly Blazor will fallback to using an asm.js based .NET runtime. Using asm.js is slower and has a larger download size, but is still quite functional.\r\n\r\n> \r\n\r\nWiki Faq needs to be updated to remove reference of asm.js","Url":"https://github.com/aspnet/Blazor/issues/1665","RelatedDescription":"Closed issue \"Update FAQ \"Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\"\" (#1665)"},{"Id":"379520460","IsPullRequest":false,"CreatedAt":"2018-11-11T12:59:22","Actor":"romanoza","Number":"1662","RawContent":null,"Title":"Generic type bindings","State":"open","Body":"I have the following component (myInput.cshtml):\r\n\r\n```\r\n@typeparam TProperty\r\n\r\n<div>\r\n    <input bind=\"@myValue\" />\r\n</div>\r\n\r\n@functions\r\n{\r\n[Parameter]\r\nprivate TProperty myValue { get; set; }\r\n\r\n[Parameter]\r\nprivate Action<TProperty> myValueChanged { get; set; }\r\n}\r\n```\r\n\r\nand I'm trying to use it that way:\r\n\r\n`<myInput bind-myValue=\"@Test\"></myInput>`\r\n\r\nwhere Test is defined as\r\n\r\n`public string Test { get; set; }`\r\n\r\nIt results with the following error message:\r\n\r\n> 'bind' does not accept values of type System.String. To read and write this value type, wrap it in a property of type string with suitable getters and setters.\r\n\r\nI suppose this message comes from the BindMethods.SetValueHandler<T>(Action<T> setter, T existingValue) method.\r\n\r\nIs there any way to work it around to create a custom component that would be able to handle `string`, `bool`, and `int` bindings in the same code, or have I just simply create different components for different binding types at the moment?","Url":"https://github.com/aspnet/Blazor/issues/1662","RelatedDescription":"Open issue \"Generic type bindings\" (#1662)"},{"Id":"379483660","IsPullRequest":true,"CreatedAt":"2018-11-11T02:48:41","Actor":"ebekker","Number":"1660","RawContent":null,"Title":"Add error detection when sending content","State":"open","Body":"As it stands, if the attempt to write (PUT/POST) content fails, for example, due to authorization (401) or some other server-side issue (50x), the error gets swallowed up.  Ensuring the call was successful will cause it to throw otherwise.\r\n\r\nThis also preserves symmetry with the `GetJsonAsync` counterpart since its underlying call to `GetStringAsync` already exhibits this behavior.\r\n","Url":"https://github.com/aspnet/Blazor/pull/1660","RelatedDescription":"Open PR \"Add error detection when sending content\" (#1660)"},{"Id":"379395705","IsPullRequest":true,"CreatedAt":"2018-11-10T06:21:52","Actor":"IvanJosipovic","Number":"1658","RawContent":null,"Title":"Add support for binding decimal? double? float? long? int? bool?","State":"open","Body":"Resolves Issue #1007","Url":"https://github.com/aspnet/Blazor/pull/1658","RelatedDescription":"Open PR \"Add support for binding decimal? double? float? long? int? bool?\" (#1658)"},{"Id":"379314203","IsPullRequest":false,"CreatedAt":"2018-11-09T22:16:22","Actor":"PaulOst","Number":"1657","RawContent":null,"Title":"Using D3.js with Blazor.","State":"closed","Body":"@danroth27 @SteveSandersonMS I would like to incorporate the popular D3 library into a prototype blazor app. Is that possible using JS Interop? If so, how? Thanks in advance!","Url":"https://github.com/aspnet/Blazor/issues/1657","RelatedDescription":"Closed issue \"Using D3.js with Blazor.\" (#1657)"},{"Id":"379260578","IsPullRequest":false,"CreatedAt":"2018-11-09T21:56:19","Actor":"mikewodarczyk","Number":"1656","RawContent":null,"Title":"Select Multiple not rendering correct selections when updating during async callback","State":"closed","Body":"I have 2 select list with multiple set on both of them.  They are linked so that each acts as a filter for the other, kind of like how Excel's filter works.  When I select 2 options and apply the filter (which calls back and updates the list), my 2 selected options are selected, but another 2 random options are selected.  I can see from the logging that only my 2 selected options were set, but when I query the select through JS interop, I can see that 4 options are selected.  \r\n\r\n\r\nI am attaching the full solution.  \r\nRun the BlazorLinkedMultiSelectDemo.Server,\r\nClick the FirstName's \"Andy\" and \"Jeff\"\r\nClick Apply.\r\n\"Andy\" and \"Jeff\" stay selected, but also \"Annie\" and \"Julie\" appear as selected. Actually, the list starts with just \"Andy\" and \"Jeff\" selected, but less than a second later \"Annie\" and \"Julie\" get selected.  I cannot tell if the log messages below come out before or after \"Annie\" and \"Julie\" are selected.\r\n\r\nMy logging shows as the last messages:\r\nWASM: FirstName HTML Update writing NOT selected option Alexa \r\nWASM: FirstName HTML Update writing NOT selected option Andrew \r\nWASM: FirstName HTML Update writing selected option Andy \r\nWASM: FirstName HTML Update writing NOT selected option Annie \r\nWASM: FirstName HTML Update writing NOT selected option Janice \r\nWASM: FirstName HTML Update writing selected option Jeff \r\nWASM: FirstName HTML Update writing NOT selected option Jerry \r\nWASM: FirstName HTML Update writing NOT selected option Julie \r\nWASM: FirstName HTML Update writing NOT selected option Sam \r\nWASM: FirstName HTML Update writing NOT selected option Sarah \r\nWASM: FirstName HTML Update writing NOT selected option Shelly \r\nWASM: FirstName HTML Update writing NOT selected option Steve\r\n\r\nSo, I am not setting \"Annie\" and \"Julie\"\r\n\r\nThe code snipped that renders the select looks like this:\r\n\r\n    <select ref=\"sel\" multiple=\"multiple\" onchange=\"@SelectionChanged\"  style=\"height: 10rem;\">\r\n              @foreach (string s in ToFilteredStringList())\r\n                {\r\n                    if (selections.Contains(s))\r\n                    {\r\n                           Console.WriteLine(Title + \" HTML Update writing selected option \" + s);\r\n                           <option value=\"@s\" selected=\"selected\">@s</option>\r\n                     }\r\n                    else\r\n                    {\r\n                          Console.WriteLine(Title + \" HTML Update writing NOT selected option \" + s);\r\n                          <option value=\"@s\">@s</option>\r\n                     }\r\n                }\r\n      </select>\r\n\r\n\r\n\r\n[BlazorLinkedMultiSelectDemo.zip](https://github.com/aspnet/Blazor/files/2566953/BlazorLinkedMultiSelectDemo.zip)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1656","RelatedDescription":"Closed issue \"Select Multiple not rendering correct selections when updating during async callback\" (#1656)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-16T05:30:03.077279Z","RunDurationInMilliseconds":1687}