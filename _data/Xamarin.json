{"Data":{"Blog":{"FeedItems":[{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null},{"Title":"Android Support Library v26 Overview","PublishedOn":"2017-10-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Android Support Library v26 brings lots of new features to our Android apps, including fonts as resources, downloadable fonts, emoji support, an autosizing TextView, physics driven animations via Spring and Fling, backwards compatibility for animated vectors, and a slimmer library by increasing the minSdkVersion to 14. If it isn&#8217;t already, the minSdkVersion for all [&#8230;]","Href":"https://blog.xamarin.com/android-support-library-v26-overview/","RawContent":null},{"Title":"Xamarin at Local Developer Events this October","PublishedOn":"2017-09-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re at the height of conference season, and that means tons of new and exciting releases, tooling, and updates to talk about with your local developer community! Mobile .NET developer conferences and meetups are the perfect opportunities to learn the latest on Xamarin and related technologies while networking with other developers. Below are just a [&#8230;]","Href":"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/","RawContent":null},{"Title":"Xamarin.Forms Stable Comes to .NET Standard 2.0","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are thrilled to share our latest stable release of Xamarin.Forms, version 2.4.0. This is our fastest, most stable release ever and we think you’re going to love it! Xamarin.Forms 2.4.0 Highlights You’ll recognize many of these highlights as shared in our public roadmap, in addition to more than 150 bug fixes. .NET Standard [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-stable-comes-to-net-standard-2-0/","RawContent":null},{"Title":"Webinar Recording | Exploring UrhoSharp 3D with Xamarin Workbooks Webinar","PublishedOn":"2017-09-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Folllow along with Charles Petzold as he builds a 3D app from the ground up with UrhoSharp and Xamarin Workbooks in this webinar recording. UrhoSharp is a powerful, high performance 3D graphics engine suitable for games, animation, and data visualization. Used together, UrhoSharp and Xamarin Workbooks give developers a streamlined way to get started with [&#8230;]","Href":"https://blog.xamarin.com/webinar-recording-exploring-urhosharp-3d-with-xamarin-workbooks-webinar/","RawContent":null},{"Title":"3 Reasons to Try Xamarin Previews in Visual Studio 2017","PublishedOn":"2017-09-26T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previews are a great way to try the latest-and-greatest in mobile development, from the new Xamarin Live Player that allows you to instantly visualize your XAML-based user interface as you type, to support for new SDKs like Android Oreo or iOS 11. Then arises the great dilemma: how do I try all the awesome stuff [&#8230;]","Href":"https://blog.xamarin.com/3-reasons-to-try-visual-studio-2017-version-15-4-previews/","RawContent":null},{"Title":"ActivityTask: A Helper for Async/Await on Android","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Google I/O, several members of the Xamarin team attended the Architecture Component talk on Android lifecycle (which I recommend you watch). While the solutions presented there are interesting and, in some cases, map to patterns we already have in .NET, it resonated with those of us present because of how those Android lifecycle details [&#8230;]","Href":"https://blog.xamarin.com/activitytask-helper-asyncawait-android/","RawContent":null},{"Title":"Podcast: Android Oreo, iOS 11, and Xamarin.Forms Tips & Tricks","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Xamarin support for Android Oreo and iOS 11, share tips for beating the learning curve with Xamarin.Forms, talk upcoming releases in the pipeline, and more! Be sure to download today&#8217;s episode from your favorite podcasting app. Subscribe or Download Today Keeping up with [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-ios-11-xamarin-forms-tips-tricks/","RawContent":null},{"Title":"Protecting Your Xamarin Apps with Dotfuscator","PublishedOn":"2017-09-20T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Joe Sewell, a developer on the Dotfuscator team at PreEmptive Solutions. Let&#8217;s be honest, releasing a library, desktop app, or mobile app can be a bit scary. Once your software is freely available to the world, you lose a certain degree of control over how it will be [&#8230;]","Href":"https://blog.xamarin.com/protecting-xamarin-apps-dotfuscator/","RawContent":null},{"Title":"Augment Reality with Xamarin and iOS 11","PublishedOn":"2017-09-19T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the showcase features of iOS 11 is ARKit, an augmented-reality mode available on devices powered by A9 and newer chips (basically, 6S and better iPhones, 2017 iPads, and iPad Pros). With ARKit, users hold up the device and view a composite of the video feed and computer-generated imagery (either 2D SpriteKit or 3D [&#8230;]","Href":"https://blog.xamarin.com/augment-reality-xamarin-ios-11/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6669718934","Type":"PullRequestEvent","CreatedAt":"2017-10-03T20:24:26","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/913","RelatedDescription":"Opened pull request \"Disable building of Mono net_4_x profile\" (#913) at xamarin/xamarin-android","RelatedBody":"It isn't required to build the monodroid profile and saves a lot of build time."},{"Id":"6669556985","Type":"PullRequestEvent","CreatedAt":"2017-10-03T19:48:09","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/872","RelatedDescription":"Merged pull request \"[Xamarin.Android.Bcl-Tests] Add BCL test project.\" (#872) at xamarin/xamarin-android","RelatedBody":"What do we want? (with apologies to 48e3fc26)\r\n**MOAR** Unit tests!\r\n\r\nSpecifically, we want to run the BCL unit tests which mono generates:\r\n\r\n        $ cd external/mono/mcs/class/corlib\r\n        $ make PROFILE=monodroid test\r\n        # creates `monodroid_corlib_test.dll`\r\n\r\nCreation of `monodroid_*_test.dll` assemblies and the\r\n`make PROFILE=monodroid test` target is a relatively recent\r\ndevelopment, for which I need to buy the #runtime team some beers.\r\n\r\nIn terms of `mono-runtimes.targets`, we can build *all* of the BCL\r\nunit test assemblies with:\r\n\r\n        $ cd external/mono/mcs/class\r\n        $ make -i do-test PROFILE=monodroid\r\n\r\nNow that we can create them, how do we *use* them? That's the trickier\r\nbit: they need to be built within mono, as part of the existing BCL\r\nbuild process. This in turn means that the BCL unit test assemblies\r\nneed to be distributed as part of the mono bundle, as we don't want to\r\nrebuild the mono repo \"from scratch\" just for the unit tests.\r\n\r\nUpdate `build-tools/mono-runtimes/ProfileAssemblies.projitems` to\r\ninclude a new `@(MonoTestAssembly)` item group which contains all of\r\nthe BCL unit test assemblies and related files which should be\r\nincluded into `bundle-*.zip`. Additionally, add\r\n`ProfileAssemblies.projitems` to `@(VersionFile)` witihin\r\n`bundle-path.targets`, so that if anything within\r\n`ProfileAssemblies.projitems` changes, we rebuild the bundle.\r\n\r\nOnce we *have* the BCL unit test assemblies, and their dependencies,\r\nwe need to *run* them. The new `Xamarin.Android.Bcl-Tests.csproj`\r\nproject is a Xamarin.Android application project which will execute\r\nthe unit tests.\r\n\r\nThere's just one small problem: Xamarin.Android apps want to use\r\n`Xamarin.Android.NUnitLite.dll`. The BCL unit test assemblies instead\r\nbuild against their own `nunitlite.dll`, which has no Xamarin.Android\r\nintegration or support. How do we use the new test assemblies?\r\n\r\n*Force* a fix by using `remap-assembly-ref` to \"rename\" the\r\n`nunitlite` assembly reference to `Xamarin.Android.NUnitLite.dll`.\r\nThis *cannot* be done as part of the `mono-runtimes.mdproj` build, as\r\n`Xamarin.Android.NUnitLite.dll` won't yet exist. Instead, remap the\r\nassemblies within `Xamarin.Android.Bcl-Tests.targets`, and distribute\r\nthe remapped assemblies with the application.\r\n\r\nFinally, address one other \"small\" problem: not all of the unit tests\r\npass! Some of these are for reasons we don't know, and others will\r\nrequire changes to `mono`.\r\n\r\nUpdate `Xamarin.Android.NUnitLite` to allow *filtering* of tests:\r\n\r\n        namespace Xamarin.Android.NUnitLite {\r\n\r\n                partial class TestSuiteActivity {\r\n                        public  ITestFilter   Filter          {get; set;}\r\n\r\n                        public  virtual void  UpdateFilter ();\r\n                }\r\n\r\n                partial class TestSuiteInstrumentation {\r\n                        public  ITestFilter   Filter          {get; set;}\r\n\r\n                        public  virtual void  UpdateFilter ();\r\n                }\r\n        }\r\n\r\n`TestSuiteActivity.UpdateFilter()` is called by\r\n`TestSuiteActivity.OnCreate()`, *after* `GetIncludedCategories()` and\r\n`GetExcludedCategories()` are called, to allow subclasses to alter the\r\n`ITestFilter` which is used to determine which tests are executed.\r\n\r\n`TestSuiteInstrumentation.UpdateFilter()` is called by\r\n`TestSuiteInstrumentation.OnStart()`, *after*\r\n`GetIncludedCategories()` and `GetExcludedCategories()` are called, to\r\nallow subclasses to alter the `ITestFilter` which is used to determine\r\nwhich tests are executed.\r\n\r\n`Xamarin.Android.Bcl_Tests` overrides both of these and updates the\r\n`Filter` property so that \"known failing\" tests are excluded. This\r\nallows us to skip failing tests, giving us time to properly fix them\r\nin time while allowing the rest of this PR to be merged.\r\n\r\nThe skipped tests include:\r\n    \r\n* MonoTests.System.Reflection.AssemblyTest.GetReferencedAssemblies\r\n* MonoTests.System.ServiceModel.Description.WebInvokeAttributeTest.RejectTwoParametersWhenNotWrapped\r\n"},{"Id":"6666863858","Type":"PullRequestEvent","CreatedAt":"2017-10-03T10:03:47","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/912","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tests] Reworks tests to use msbuild. [WIP]\" (#912) at xamarin/xamarin-android","RelatedBody":"This commit reworks the tests to work on msbuild by default.\r\nxbuild is deprecated, so we should ensure that our system works\r\n100% on msbuild."},{"Id":"6666717498","Type":"PullRequestEvent","CreatedAt":"2017-10-03T09:28:00","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/911","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Create classes.zip for dx.jar.\" (#911) at xamarin/xamarin-android","RelatedBody":"Commit 2d23a275 reverted a change which is required for j8.jar.\r\nBut the change resulted in a command line which would exceed\r\nthe max command line limits on windows.\r\n\r\nIt turns out that both dx.jar and j8.jar allow for a `zip` file\r\nto be used to pass in the `.class` files. So lets create a zip\r\nand refresh/update it on each build. Then use that rather than\r\nthe class directory in `CompileToDalvik`."},{"Id":"6656171173","Type":"PullRequestEvent","CreatedAt":"2017-09-29T19:27:32","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/910","RelatedDescription":"Opened pull request \"WIP [xabuild.exe] cross-platform form of tools/scripts/xabuild\" (#910) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/xabuild\r\n\r\nxabuild.exe is a nice wrapper around MSBuild for compiling\r\nXamarin.Android projects using a locally built version of\r\nXamarin.Android on your system. It seems to work (so far) on\r\nWindows, MacOS, and Linux and doesn’t require elevation or\r\nmodify your system.\r\n\r\nxabuild.exe works by doing the following:\r\n- Reference `MSBuild.exe` or `MSBuild.dll` depending on the platform\r\n- Overrides the `app.config` file of MSBuild to set various properties\r\n- This allows `xabuild.exe` to build Xamarin.Android projects using\r\nlocal Xamarin.Android build output\r\n- Creates symbolic links to `.NETPortable` and `.NETFramework`\r\ndirectories inside the Xamarin.Android build output directory\r\n- Run MSBuild’s `Main()` method\r\n\r\n### Changes\r\n- Added `xabuild.csproj` to Xamarin.Android.sln\r\n- tools/scripts/xabuild now just runs xabuild.exe\r\n- Xamarin.Android.Build.Tests run xabuild.exe\r\n\r\n### Limitations\r\n- xbuild will not work, use `MSBUILD=msbuild` for all `make` commands\r\n- On Linux I had to use Mono 5.2 to get a version of msbuild that\r\nworked (I think probably was installation issue, as building a plain\r\nproject didn’t work)\r\n\r\n### Usage\r\n\r\nAn example on MacOS:\r\n```\r\nmake prepare all MSBUILD=msbuild\r\nmake all-tests MSBUILD=msbuild\r\nmake run-nunit-tests MSBUILD=msbuild NUNIT_TESTS=bin/TestDebug/Xamarin.Android.Build.Tests.dll\r\n```\r\n\r\nAn example on Windows (msbuild should be 15.3 from VS 2017):\r\n```\r\nmsbuild build-tools\\scripts\\PrepareWindows.targets\r\nmsbuild Xamarin.Android.sln\r\nbin\\Debug\\bin\\xabuild.exe Xamarin.Android-Tests.sln /p:XAIntegratedTests=False\r\npackages\\NUnit.ConsoleRunner.3.7.0\\tools\\nunit3-console.exe bin\\TestDebug\\Xamarin.Android.Build.Tests.dll\r\n```\r\nNote, these tests are not all passing on Windows yet. See [here](https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1022831) for latest results."},{"Id":"6654827932","Type":"PullRequestEvent","CreatedAt":"2017-09-29T14:15:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/904","RelatedDescription":"Merged pull request \"[tests] fix for Adb task on Windows\" (#904) at xamarin/xamarin-android","RelatedBody":"Context: The `Adb` task inherits `PathToolTask`, which inherits\r\n`ToolTask`.\r\n\r\nThe `Adb` task's `ToolExe` is commonly set to `$(AdbToolExe)`. The\r\nproblem with this is that `Microsoft.Build.Utilities.ToolTask` has its\r\nown validation that checks if the file exists. On Windows, a file named\r\n`adb` does not exist, because it is named `adb.exe`.\r\n\r\nThe solution here is to not set `base.ToolExe` if the incoming value\r\nalready matches `ToolBaseName`. This prevents the validation, and\r\n`PathToolTask` can continue to use `Which` appropriately to either find\r\n`adb` or `adb.exe` depending on the platform. This also allows\r\n`$(AdbToolExe)` to be overidden if needed."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6667773856","Type":"PullRequestEvent","CreatedAt":"2017-10-03T13:46:42","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1168","RelatedDescription":"Merged pull request \"[MacOS] Navigation Transition Style\" (#1168) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis PR adds the option to set the transition style on a NavigationPage for pushing and popping pages. (old request was https://github.com/xamarin/Xamarin.Forms/pull/1043). Now with docs. I also added the docs for the TabOrder Extension on macOS that I wrote. I didn't want to create a separate PR for this, but I can do it, if required.\r\n\r\n### API Changes ###\r\n\r\nOn<Xamarin.Forms.PlatformConfiguration.macOS> ().SetNavigationTransitionStyle (NavigationTransitionStyle.Crossfade, NavigationTransitionStyle.SlideUp);\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6666940880","Type":"PullRequestEvent","CreatedAt":"2017-10-03T10:23:33","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1075","RelatedDescription":"Merged pull request \"[Core, Android] Fix to address the elusive 'Sharing violation on path PropertyStore.forms.tmp'\" (#1075) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nNote: we still haven't gotten a satisfactory way to reproduce the actual bug, but this seems to be a fix for it, hence no tests.\r\n\r\n-Added a semaphore to Application.SetPropertiesAsync() to wrap some logic that is an unconvincing guard against concurrent FileAccess calls.\r\n-made several methods asynchronous to honor a later asynchronous call to Application.SetPropertiesAsync() within the OnStateChanged() method of FormsAppCompatActivity\r\n-change the the deserialization piece of saving application Properties to file readonly to help with collisions\r\n\r\nAlso, I did not rebase, I simply merged.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=57469\r\n\r\nWe had been seeing the 'Sharing violation on path PropertyStore.forms.tmp' bug in our application almost daily before these changes on certain phones. I have been running these changes for two weeks in production with no problems and no further sharing violations.\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\nDoes not make any behavioral changes (beyond attempt to fix the specified bug)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6671156701","Type":"PullRequestEvent","CreatedAt":"2017-10-04T05:22:51","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2837","RelatedDescription":"Merged pull request \"[ReplayKit] Update bindings to Xcode 9.1 Beta 1\" (#2837) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6671153872","Type":"PullRequestEvent","CreatedAt":"2017-10-04T05:21:18","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2836","RelatedDescription":"Merged pull request \"Cleanup disabled Mono profiles for configure\" (#2836) at xamarin/xamarin-macios","RelatedBody":"profile2, profile4 and profile4_5 were removed a long time ago, there's only profile4_x nowadays."},{"Id":"6669970609","Type":"PullRequestEvent","CreatedAt":"2017-10-03T21:20:25","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2837","RelatedDescription":"Opened pull request \"[ReplayKit] Update bindings to Xcode 9.1 Beta 1\" (#2837) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6669799733","Type":"PullRequestEvent","CreatedAt":"2017-10-03T20:42:03","Actor":"akoeplinger","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2836","RelatedDescription":"Opened pull request \"Cleanup disabled Mono profiles for configure\" (#2836) at xamarin/xamarin-macios","RelatedBody":"profile2, profile4 and profile4_5 were removed a long time ago, there's only profile4_x nowadays."},{"Id":"6669061877","Type":"PullRequestEvent","CreatedAt":"2017-10-03T17:59:14","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2833","RelatedDescription":"Merged pull request \"Fix a number of introspection test failures on 10.13 (#2815)\" (#2833) at xamarin/xamarin-macios","RelatedBody":"- Cherry pick https://github.com/xamarin/xamarin-macios/pull/2815 to d15-5"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"915295800825204736","CreatedAt":"2017-10-03T19:21:38+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #Microcharts in today's post from guest blogger @aloisdeniel :… https://t.co/Gl1XMS0UDG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":133,"FavoriteCount":44,"RawContent":null},{"Id":"915249837368627205","CreatedAt":"2017-10-03T16:19:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to embed any #XamarinForms ContentPage into your #Xamarin iOS and Android projects: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":22,"RawContent":null},{"Id":"914940829604679681","CreatedAt":"2017-10-02T19:51:07+00:00","UserScreenname":"xamarinhq","Text":"Add emoji support, physics driven animations, and more to your #Xamarin apps with Android Support Library v26:… https://t.co/iM0N4411PQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":32,"RawContent":null},{"Id":"914883429514215426","CreatedAt":"2017-10-02T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Join us for a FREE event in Denver or McLean to build, test, &amp; distribute a #XamarinForms app to supply a Mars crew… https://t.co/vJ9KA9FPmZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"914685619191808000","CreatedAt":"2017-10-02T02:57:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays is coming to a town near you! Learn how to build, test, and connect native apps with #Xamarin: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":10,"RawContent":null},{"Id":"914295800875945984","CreatedAt":"2017-10-01T01:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to set up and configure an #Azure Notification Hub for your #Xamarin.iOS app: https://t.co/GJAQDvFyAl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"913848491146977282","CreatedAt":"2017-09-29T19:30:33+00:00","UserScreenname":"xamarinhq","Text":"Find a #Xamarin event near you this October: https://t.co/5rVXaUkyTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"913793742737375232","CreatedAt":"2017-09-29T15:53:00+00:00","UserScreenname":"xamarinhq","Text":"5 ways to boost a #XamarinForms app's start up time: https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":24,"RawContent":null},{"Id":"913493122902056960","CreatedAt":"2017-09-28T19:58:27+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Stable comes to #dotNET Standard 2.0! Details: https://t.co/uLZzFJNACa https://t.co/UuJSdo8LRi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":160,"FavoriteCount":89,"RawContent":null},{"Id":"913433871622041600","CreatedAt":"2017-09-28T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to provision a new iOS device and app in five minutes using #VS4Mac and the open source project fastlane: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":20,"RawContent":null},{"Id":"913112376391733248","CreatedAt":"2017-09-27T18:45:29+00:00","UserScreenname":"xamarinhq","Text":"Add 3D to your app with our webinar recording from Charles Petzold on using UrhoSharp 3D with #Xamarin Workbooks: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":18,"RawContent":null},{"Id":"913071735381118977","CreatedAt":"2017-09-27T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Update #VisualStudio and #VS4Mac for full support to develop #iOS11 apps with #Xamarin: https://t.co/dRGFj7RaZO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":41,"RawContent":null},{"Id":"912752497046978560","CreatedAt":"2017-09-26T18:55:28+00:00","UserScreenname":"xamarinhq","Text":"Try out the latest new features for #Xamarin in #VS2017 without affecting your production environment: https://t.co/6QFngIYygP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":17,"RawContent":null},{"Id":"912704314086428674","CreatedAt":"2017-09-26T15:44:00+00:00","UserScreenname":"xamarinhq","Text":"Add local notifications to your Xamarin.Mac applications: https://t.co/fmHnM8m18Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"912414874571038732","CreatedAt":"2017-09-25T20:33:52+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":28,"RawContent":null},{"Id":"912343187083100165","CreatedAt":"2017-09-25T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Make your #XamarinForms apps accessible with Xamarin.Forms 2.3.4 + an example from the #XamarinEvolve 2016 app: https://t.co/auqnwBvyE2","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":40,"FavoriteCount":18,"RawContent":null},{"Id":"912103614059094017","CreatedAt":"2017-09-24T23:57:02+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the #Xamarin.Firebase.Messaging package to add FCM-based push notification features in your app:… https://t.co/IlUWyDYRGV","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":105,"FavoriteCount":41,"RawContent":null},{"Id":"911804140266778625","CreatedAt":"2017-09-24T04:07:02+00:00","UserScreenname":"xamarinhq","Text":"Deep Dive into #SkiaSharp for #XamarinForms with #Xamarin's Charles Petzold: https://t.co/mlySNkqQ63 https://t.co/WNuYhD19n9","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":72,"FavoriteCount":36,"RawContent":null}]}},"RunOn":"2017-10-04T05:30:36.1765817Z","RunDurationInMilliseconds":3562}