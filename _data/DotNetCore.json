{"Data":{"Blog":{"FeedItems":[{"Title":"Porting desktop apps to .NET Core","PublishedOn":"2019-05-28T16:00:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Since I&#8217;ve been working with the community on porting desktop applications from .NET Framework to .NET Core, I&#8217;ve noticed that there are two camps of folks: some want a very simple and...","Href":"https://devblogs.microsoft.com/dotnet/porting-desktop-apps-to-net-core/","RawContent":null},{"Title":"The F# development home on GitHub is now dotnet/fsharp","PublishedOn":"2019-05-20T18:16:50+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"TL;DR We&#8217;ve moved the F# GitHub repository from microsoft/visualfsharp to dotnet/fsharp, as specified in the corresponding RFC.\nF# has a somewhat strange history in its name and brand. If we...","Href":"https://devblogs.microsoft.com/dotnet/the-f-development-home-on-github-is-now-dotnet-fsharp/","RawContent":null},{"Title":"Create Interactive .NET Documentation with Try .NET","PublishedOn":"2019-05-16T20:01:47+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"When it comes to developers&#8217; documentation, it is essential that we capture their interest and lead them down the path of success as soon as possible. Across multiple languages, developer...","Href":"https://devblogs.microsoft.com/dotnet/creating-interactive-net-documentation/","RawContent":null},{"Title":"Performance Improvements in .NET Core 3.0","PublishedOn":"2019-05-15T19:17:00+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Back when we were getting ready to ship .NET Core 2.0, I wrote a blog post exploring some of the many performance improvements that had gone into it. I enjoyed putting it together so much and received...","Href":"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Default implementations in interfaces","PublishedOn":"2019-05-14T23:47:18+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"Default implementations in interfaces\nWith last week&#8217;s posts Announcing .NET Core 3.0 Preview 5 and Visual Studio 2019 version 16.1 Preview 3, the last major feature of C# 8.0 is now available...","Href":"https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/","RawContent":null},{"Title":".NET Core May 2019 Updates – 1.0.16, 1.1.14, 2.1.11 and 2.2.5","PublishedOn":"2019-05-14T19:06:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a Visual...","Href":"https://devblogs.microsoft.com/dotnet/net-core-may-2019/","RawContent":null},{"Title":".NET Framework May 2019 Security and Quality Rollup","PublishedOn":"2019-05-14T18:29:22+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update.\nSecurity\nCVE-2019-0820 – Denial of Service Vulnerability\nA denial of service...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9715872276","Type":"PullRequestEvent","CreatedAt":"2019-05-29T04:16:22","Actor":"elinor-fung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24825","RelatedDescription":"Opened pull request \"Specify restore sources in optdata.csproj\" (#24825) at dotnet/coreclr","RelatedBody":"This broke with #24619 (stopped pulling in dir.props). This was still 'working' in the coreclr build because the scripts restore opt data through build.proj (which still does pull in props that update `RestoreSources`) as the first step unless `skiprestoreoptdata`  is specified, such that anything referencing the project afterwards detected it was already restored.\r\n\r\nHit in #24820 "},{"Id":"9715806441","Type":"PullRequestEvent","CreatedAt":"2019-05-29T03:55:53","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24812","RelatedDescription":"Merged pull request \"Change DllImportPath policy to create unicode-named test library immediately before use\" (#24812) at dotnet/coreclr","RelatedBody":"Fixes #24791 "},{"Id":"9715806433","Type":"IssuesEvent","CreatedAt":"2019-05-29T03:55:53","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24791","RelatedDescription":"Closed issue \"CMake Deprecation Warning: The OLD behavior for policy CMP0037 will be removed from a future version   of CMake.\" (#24791) at dotnet/coreclr","RelatedBody":"CMake Deprecation Warning at tests/src/Interop/PInvoke/DllImportPath/CMakeLists.txt:11 (cmake_policy):\r\n  The OLD behavior for policy CMP0037 will be removed from a future version\r\n  of CMake.\r\n\r\n  The cmake-policies(7) manual explains that the OLD behaviors of all\r\n  policies are deprecated and that a policy should be set to OLD only under\r\n  specific short-term circumstances.  Projects should be ported to the NEW\r\n  behavior and not rely on setting a policy to OLD.\r\n\r\nIt's not matching any warning problem so the auto-sense doesn't find it. But if they say they will remove something, it's time to start planning getting off it."},{"Id":"9715409405","Type":"IssuesEvent","CreatedAt":"2019-05-29T02:03:40","Actor":"xiangzhai","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24824","RelatedDescription":"Opened issue \"[X86/Linux] Fail to disable JIT when enabled Interpreter\" (#24824) at dotnet/coreclr","RelatedBody":"Hi,\r\n\r\nJust follow @kangaroo porting work https://github.com/dotnet/coreclr/pull/1292#issuecomment-125688792 enabled interpreter and still tracking `JitFunctionTrace` to see whether or not disable JIT totally:\r\n\r\n```\r\nexport COMPlus_DumpInterpreterStubs=1\r\nexport COMPlus_Interpret=*\r\nexport COMPlus_InterpreterPrintPostMortem=1\r\nexport COMPlus_InterpreterDoLoopMethods=1\r\nexport COMPlus_TieredCompilation=1\r\nexport COMPlus_JITMinOpts=1\r\nexport COMPlus_ZapDisable=1\r\nexport COMPlus_JitFunctionTrace=1\r\n```\r\n\r\nBut it is still `Start Jitting` in the `Jitted Entry` when such `Method` doesn't meet the `IsEligibleForTieredCompilation` condition:\r\n\r\n```\r\n...\r\nGenerating interpretation stub (# 5 = 0x5, hash = 0x69bf8d7c) for <>c:.ctor.\r\nSTART 5, <>c:.ctor()\r\n     0: ldarg.0\r\n   0x1: call\r\n  Returning to method <>c:.ctor(), stub num 5.\r\n   0x6: ret\r\nDONE 5, <>c:.ctor()\r\n  Returning to method <>c:.cctor(), stub num 4.\r\n   0x5: stsfld\r\n   0xa: ret\r\nDONE 4, <>c:.cctor()\r\n   0xa: dup\r\n   0xb: brtrue.s\r\n   0xd: pop\r\n   0xe: ldsfld\r\n  0x13: ldftn\r\n  0x19: newobj\r\n{ Start Jitting System.MulticastDelegate:CtorClosed(ref,long):this (MethodHash=ad3a8451)\r\n} Jitted Entry 149 at 00007f7a`601cd0a0 method System.MulticastDelegate:CtorClosed(ref,long):this size 0000006f\r\n  Returning to method System.Console:get_Out():class, stub num 3.\r\n  0x1e: dup\r\n  0x1f: stsfld\r\n  0x24: call\r\n{ Start Jitting DomainBoundILStubClass:IL_STUB_InstantiatingStub(byref,ref):ref (MethodHash=294d3ab2)\r\n} Jitted Entry 14a at 00007f7a`601cd530 method DomainBoundILStubClass:IL_STUB_InstantiatingStub(byref,ref):ref size 0000003f\r\nGenerating interpretation stub (# 6 = 0x6, hash = 0xbf685470) for System.Console:EnsureInitialized.\r\nSTART 6, System.Console:EnsureInitialized(byref,class):class\r\n     0: ldarg.0\r\n   0x1: ldsflda\r\n...\r\n```\r\n\r\nHacking JIT by commenting `CompileMethodWithEtwWrapper` to force disable JIT, but, of course, fail to initialize:\r\n\r\n```\r\ndiff --git a/src/vm/jitinterface.cpp b/src/vm/jitinterface.cpp\r\nindex 502b5ada13..87de5f0e9e 100644\r\n--- a/src/vm/jitinterface.cpp\r\n+++ b/src/vm/jitinterface.cpp\r\n@@ -12158,7 +12158,8 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n             }\r\n         }\r\n     }\r\n-    \r\n+\r\n+#if 0\r\n     if (FAILED(ret) && jitMgr->m_jit)\r\n     {\r\n         ret = CompileMethodWithEtwWrapper(jitMgr, \r\n@@ -12168,6 +12169,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n                                           nativeEntry,\r\n                                           nativeSizeOfCode);\r\n     }\r\n+#endif\r\n \r\n     if (interpreterFallback == true)\r\n     {\r\n```\r\n\r\nOpenJDK is able to just enable interpreter:\r\n\r\n```\r\njava -Xint\r\n```\r\n\r\nor just enable JIT compilers:\r\n\r\n```\r\njava -Xcomp\r\n```\r\n\r\nor mixed:\r\n\r\n```\r\njava -Xmixed\r\n```\r\n\r\nHow to disable JIT when enabled Interpreter for corerun?  Please give me some hint.\r\n\r\nThanks,\r\nLeslie Zhai"},{"Id":"9715386283","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:57:12","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24823","RelatedDescription":"Opened pull request \"[WIP] R2R ilstubs\" (#24823) at dotnet/coreclr","RelatedBody":"IL stub generation for interop takes measurable time at startup, and it is possible to generate some of them in an ahead of time \r\n\r\nThis change introduces ahead of time R2R compilation of IL stubs\r\n- Relatively complete coverage for System.Private.CoreLib\r\n- Limited IL stubs for other assemblies\r\n  - Only stubs which do not use any api surface in their marshalers.\r\n\r\nAs of this writing IL stubs do not participate in tiering. Need for this will be investigated before checkin"},{"Id":"9715350894","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:46:10","Actor":"elinor-fung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24785","RelatedDescription":"Merged pull request \"Use Arcade for native versioning\" (#24785) at dotnet/coreclr","RelatedBody":"- Use Arcade to generate native version files (.h on Windows, .c on *nix)\r\n- Make file versions for native and managed binaries the same (`MajorVersion` = 4, `MinorVersion` = 7)\r\n\r\nVerified that file versions for both native and managed binaries are `4.700.*` (matching corefx). Informational and assembly versions are unchanged.\r\n\r\ncc @RussKeldorph "},{"Id":"9715328618","Type":"IssuesEvent","CreatedAt":"2019-05-29T01:39:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/7452","RelatedDescription":"Closed issue \"Trim the MinOpts path for faster compilation\" (#7452) at dotnet/coreclr","RelatedBody":"Investigate what additional parts of the compiler could be bypassed / streamlined / etc in MinOpts mode to increase the maximum available compile speed. This could be in the form of eliminating additional phases or reducing the time / resources spent in phases that cannot be completely bypassed.\n\r\ncategory:throughput\r\ntheme:throughput\r\nskill-level:expert\r\ncost:extra-large"},{"Id":"9715327193","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:39:27","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24811","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#24811) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"9715324725","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:38:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24818","RelatedDescription":"Merged pull request \"Add null checks before calling ClassLoader::EnsureLoaded\" (#24818) at dotnet/coreclr","RelatedBody":"Fixes #24816"},{"Id":"9715324713","Type":"IssuesEvent","CreatedAt":"2019-05-29T01:38:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24816","RelatedDescription":"Closed issue \"AV in CoreClr!MethodTable::GetFlag\" (#24816) at dotnet/coreclr","RelatedBody":"Some time over the last week a few scenarios broke in WPF and WinForms.\r\n\r\nClipboard.SetData(DataFormats.UnicodeText,\"abc\")\r\n\r\ncalls into OleFlushClipboard which is a PInvoke into ole32 see [here](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/UnsafeNativeMethodsCLR.cs#L117)\r\n\r\nThis call hits an AV in coreclr with the following stack: \r\n\r\ncoreclr!MethodTable::GetFlag\r\ncoreclr!MethodTable::IsPreRestored \r\ncoreclr!MethodTable::GetLoadLevel\r\ncoreclr!ClassLoader::EnsureLoaded+0x1b\r\ncoreclr!FieldMarshaler::RestoreHelper+0xf \r\ncoreclr!FieldMarshaler_Interface::RestoreImpl+0x8 \r\ncoreclr!FieldMarshaler::Restore+0x2f\r\ncoreclr!LayoutUpdateNative+0xb3\r\ncoreclr!FmtValueTypeUpdateNative+0x64\r\ncoreclr!StubHelpers::ValueClassMarshaler__ConvertToNative+0x4e\r\nMicrosoft_Win32_Registry!ILStubClass.IL_STUB_COMtoCLR(IntPtr, IntPtr)+0x44\r\ncoreclr!COMToCLRDispatchHelper+0x6b\r\ncoreclr!InvokeStub+0x35 \r\ncoreclr!COMToCLRInvokeTarget+0x8e \r\ncoreclr!COMToCLRWorkerBody+0x278\r\ncoreclr!COMToCLRWorker+0x2aa \r\nCLRStub[StubLinkStub]@4cf9d49c0527d6d2\r\nole32!HandleFromHandle+0x2d\r\nole32!RenderCurrentFormat+0x73 \r\nole32!RenderFormat+0x12a \r\nole32!ClipboardWndProc+0x1b96d\r\nUSER32!_InternalCallWinProc+0x2b \r\nUSER32!InternalCallWinProc+0x1a \r\nUSER32!UserCallWinProcCheckWow+0x3ac \r\nUSER32!DispatchClientMessage+0xea \r\nUSER32!__fnDWORD+0x3f \r\nntdll!KiUserCallbackDispatcher+0x4d\r\nUSER32!GetClipboardData+0x4c \r\nole32!FlushViaUser32Render+0x64 \r\nole32!OleFlushClipboardInternal+0x1bfab\r\nole32!OleFlushClipboard+0x4c\r\nMicrosoft_Win32_Registry!ILStubClass.IL_STUB_PInvoke()+0x3a\r\nPresentationCore!System.Windows.OleServicesContext.OleFlushClipboard()+0x92\r\n\r\nThis scenario was working correctly on build preview6-012031 from last week.\r\n\r\nWe were investigating this issue from the WPF side, but given that no changes have been done recently to the clipboard code, and the fact that Winforms also runs into this issue, we'd appreciate if you could look at this from the coreclr side.\r\n"},{"Id":"9715284650","Type":"IssuesEvent","CreatedAt":"2019-05-29T01:27:04","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22176","RelatedDescription":"Closed issue \"Profiler use after release on process exit\" (#22176) at dotnet/coreclr","RelatedBody":"CoreCLR version: 2.1, 2.2 (probably  all of them)\r\nOS: Ubuntu/CentOs/MacOs (probably any non-Windows)\r\n\r\nOn application exit CLR sometimes crashes with SEGFAULT if profiler has subscribed to COR_PRF_MONITOR_JIT_COMPILATION.\r\nBased on coredump analysis crash happened in `EEToProfInterfaceImpl::JITCompilationStarted(unsigned long, int) ()`.\r\nLooks like it is possible to crash on other profiler callback too - but was not able to stable reproduce with other, but colleague reported that it was observed once on `ModuleUnloadFinished`.\r\nWe've started investigation on it, as have seen exit code 1 sometimes from `dotnet test` run with XUnit test, after test reported that all test passed successfully on Linux CI environment. We've never seen it on Windows CI environment.\r\n\r\nAfter further investigation, looks like it is enough that profiler will do nothing except:\r\n- `SetEventMask(COR_PRF_MONITOR_JIT_COMPILATION |  COR_PRF_DISABLE_ALL_NGEN_IMAGES | COR_PRF_DISABLE_OPTIMIZATIONS | COR_PRF_DISABLE_INLINING)` inside `Initialize`\r\n- return S_OK for all callbacks\r\n- proper implement `AddRef` / `Release`  with deleting itself if ref count = 0.\r\n\r\nThe issue can be stable reproduced with XUnit tests (one test that will do nothing is enough).\r\nAfter first execution of dotnet test, I've repeated execution of  `dotnet exec /usr/share/dotnet/sdk/<version>/vstest.console.dll --framework:.NETCoreApp,Version=v2.0 --logger:trx --Diag:TestResults/testDiagnostics.txt <path_to_test>/Release/netcoreapp2.0/<testname>.dll`\r\nIt fails after ~20 executions with segfault and exit code 139.\r\n\r\nI can provide sample application/profiler, but it will require some additional work on my side.\r\n\r\nWhen I've looked on coreclr sources, I've found very suspicious place here: https://github.com/dotnet/coreclr/blob/a28b25aacdcd2adb0fdfa70bd869f53ba6565976/src/vm/profilinghelper.cpp#L1304\r\n`IsProfilerEvacuated` check is done only when `FEATURE_PROFAPI_ATTACH_DETACH` enabled, which may be a hint why have we seen problem only on non-Windows OS.\r\n\r\nCC: @noahfalk "},{"Id":"9715120510","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:37:53","Actor":"elinor-fung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24805","RelatedDescription":"Merged pull request \"Stop adding 7 before the build revision number\" (#24805) at dotnet/coreclr","RelatedBody":"The artificially large revision number was a temporary workaround that should no longer be necessary.\r\n\r\nThe valid range for the revision number is [0, 99]. By having the 7 before it, official builds fail if there are more than 9 in one day."},{"Id":"9715117338","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:36:53","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24810","RelatedDescription":"Merged pull request \"Change StreamReader.ReadBufferAsync to return ValueTask<int>\" (#24810) at dotnet/coreclr","RelatedBody":"It's a private helper that's always directly awaited.  No need to allocate a task each time it's called and data is synchronously available.\r\n\r\ncc: @JeremyKuhne "},{"Id":"9715000330","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:02:52","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24822","RelatedDescription":"Opened pull request \"Update MicrosoftDotNetXUnitConsoleRunnerVersion to reflect changes in Arcade\" (#24822) at dotnet/coreclr","RelatedBody":"https://github.com/dotnet/arcade/pull/2900#issuecomment-496099450\r\n\r\ncc @ViktorHofer "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9715399574","Type":"IssuesEvent","CreatedAt":"2019-05-29T02:00:48","Actor":"ccic","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11433","RelatedDescription":"Opened issue \"dotnet core 3.0 (master nightly build) restore fails on Ubuntu for invalid certificate\" (#11433) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall dotnet core nightly build 3.0.100-preview6-012026 on Ubuntu 16.04.4 LTS.\r\n\"OpenSSL 1.0.2g  1 Mar 2016\" or \"OpenSSL 1.1.1  11 Sep 2018\"\r\n\r\nCreate a new webapp project through dotnet cli:\r\n\r\ndotnet new webapp -n WebApp1 -o WebApp1\r\n\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on WebApp1/WebApp1.csproj...\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The SSL connection could not be established, see inner exception. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The remote certificate is invalid according to the validation procedure. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n\r\nGo to WebApp1 and run \"dotnet restore -v diag\" and get the following errors:\r\n\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json. ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\r\n                        at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n                     --- End of stack trace from previous location where exception was thrown ---\r\n                        at System.Net.Security.SslStream.ThrowIfExceptional()\r\n                        at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n                        at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n                        at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n                        at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__65_1(IAsyncResult iar)\r\n                        at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012026\r\n Commit:    8f2806e85e\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27720-04\r\n  Commit:  cdfc67fd8e\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview6-012026 [/home/hongjiang/.dotnet-nightly/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19270-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27720-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9714337911","Type":"PullRequestEvent","CreatedAt":"2019-05-28T21:31:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11432","RelatedDescription":"Opened pull request \"Update SDK to 2.2.200-preview-64128-03\" (#11432) at dotnet/cli","RelatedBody":""},{"Id":"9714330921","Type":"PullRequestEvent","CreatedAt":"2019-05-28T21:30:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11431","RelatedDescription":"Opened pull request \"Update SDK to 2.1.600-preview-64128-02\" (#11431) at dotnet/cli","RelatedBody":""},{"Id":"9714277763","Type":"IssuesEvent","CreatedAt":"2019-05-28T21:21:37","Actor":"spboyer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11430","RelatedDescription":"Opened issue \"add deploy as a first class command\" (#11430) at dotnet/cli","RelatedBody":"Consider adding `deploy` as a first-class command.  Adding this command as an option to deploy to azure, or even other cloud platforms within the CLI helps push .NET Core without having to install additional CLI tooling.\r\n\r\nSee: https://github.com/spboyer/dotnet-azure for an example.\r\n\r\nAngular has also added this an option using `ng deploy azure` within their CLI.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9714102208","Type":"IssuesEvent","CreatedAt":"2019-05-28T20:52:54","Actor":"llolic","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/1214","RelatedDescription":"Reopened issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\" (#1214) at dotnet/standard","RelatedBody":"I am getting \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.'\"\r\nI have made an application in vs 2019 that currently just has a textbox, a textblock, and a button. When I run it, the error is shown for the following line: \"rootFrame.Navigate(typeof(MainPage), e.Arguments);\"\r\n\r\nDoes anyone know how to fix this error?"},{"Id":"9714101314","Type":"IssuesEvent","CreatedAt":"2019-05-28T20:52:46","Actor":"llolic","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1214","RelatedDescription":"Closed issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\" (#1214) at dotnet/standard","RelatedBody":"I am getting \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.'\"\r\nI have made an application in vs 2019 that currently just has a textbox, a textblock, and a button. When I run it, the error is shown for the following line: \"rootFrame.Navigate(typeof(MainPage), e.Arguments);\"\r\n\r\nDoes anyone know how to fix this error?"},{"Id":"9712423432","Type":"IssuesEvent","CreatedAt":"2019-05-28T16:35:35","Actor":"llolic","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1214","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\" (#1214) at dotnet/standard","RelatedBody":"I am getting \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.'\"\r\nI have made an application in vs 2019 that currently just has a textbox, a textblock, and a button. When I run it, the error is shown for the following line: \"rootFrame.Navigate(typeof(MainPage), e.Arguments);\"\r\n\r\nDoes anyone know how to fix this error?"},{"Id":"9710586234","Type":"PullRequestEvent","CreatedAt":"2019-05-28T12:54:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1213","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1213) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190527.2\r\n- **Date Produced**: 5/27/2019 11:45 PM\r\n- **Commit**: d58a8ade31b4731759c92df00d0f6398c52f3d83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19277.2\r\n\r\n"},{"Id":"9710510172","Type":"PullRequestEvent","CreatedAt":"2019-05-28T12:44:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1213","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1213) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190527.2\r\n- **Date Produced**: 5/27/2019 11:45 PM\r\n- **Commit**: d58a8ade31b4731759c92df00d0f6398c52f3d83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19277.2\r\n\r\n"},{"Id":"9702647878","Type":"IssuesEvent","CreatedAt":"2019-05-27T09:16:48","Actor":"KexyBiscuit","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1212","RelatedDescription":"Opened issue \"NETSDK1073 occurs on netcoreapp3.0 projects\" (#1212) at dotnet/standard","RelatedBody":"```\r\n>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012085\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(194,5): error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\r\n```\r\n\r\n```\r\n<TargetFramework>netcoreapp3.0</TargetFramework>\r\n\r\n<ItemGroup>\r\n  <PackageReference Include=\"System.Text.Encoding.CodePages\" Version=\"4.6.0-preview5.19224.8\" /> <!-- It doesn't matter what's referenced-->\r\n</ItemGroup>\r\n```"},{"Id":"9702630233","Type":"IssuesEvent","CreatedAt":"2019-05-27T09:14:12","Actor":"KexyBiscuit","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1194","RelatedDescription":"Closed issue \"Is ValueTask<> missing in latest NetStandard?\" (#1194) at dotnet/standard","RelatedBody":"```\r\nerror CS0012: The type 'ValueTask<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nMight be related to #1180?\r\n\r\n```\r\n> dotnet --version\r\n3.0.100-preview6-011910\r\n```\r\n\r\n```\r\n<TargetFramework>netstandard2.1</TargetFramework>\r\n<NetStandardImplicitPackageVersion>2.1.0-prerelease.19265.2</NetStandardImplicitPackageVersion>\r\n```"},{"Id":"9700214705","Type":"IssuesEvent","CreatedAt":"2019-05-26T20:42:19","Actor":"yangsong2828","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Closed issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190) at dotnet/standard","RelatedBody":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9715867781","Type":"PullRequestEvent","CreatedAt":"2019-05-29T04:14:56","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38009","RelatedDescription":"Opened pull request \"improve reliability of HttpListenerFactory by verifying that Connect works\" (#38009) at dotnet/corefx","RelatedBody":"This is attempt to improve reliability by verifying that we can connect and listener is ready. That should hopefully avoid random Connection refused errors.  \r\nIf the errors will keep showing up, it would be sign that listener was stopped/disposed and the issue is not startup race condition. I could not reproduce the failures locally even with few thousand runs so time will tell if this help. \r\n\r\nrelated to #37806"},{"Id":"9715796518","Type":"IssuesEvent","CreatedAt":"2019-05-29T03:52:51","Actor":"joshudson","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38008","RelatedDescription":"Opened issue \"Net Core 3.0 bootstrap failure for c7d48ca\" (#38008) at dotnet/corefx","RelatedBody":"Commit c7d48ca7732b7717e84d8375588d83866104ef58 builds a really broken corefx when using 3.0preview5 as the initial bootstrap source.\r\n\r\n    joshua@nova:~/netcore/corefxϟ uname -a\r\n    Linux nova 4.19.0-4-amd64 #1 SMP Debian 4.19.28-2 (2019-03-15) x86_64 GNU/Linux\r\n    joshua@nova:~/netcore/corefxϟPATH=/home/joshua/netcore/3.0preview5:$PATH ./build.sh -restore -build -buildtests -test\r\n\r\ngenerates hunderds of test failures of the form\r\n\r\n    <failure exception-type=\"System.TypeInitializationException\">\r\n          <message><![CDATA[System.TypeInitializationException : The type initializer for 'System.PlatformDetection' threw an exception.\\n---- System.FormatException : Input string was not in a correct format.]]></message>\r\n          <stack-trace><![CDATA[   at System.PlatformDetection.get_IsNonZeroLowerBoundArraySupported() in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.cs:line 119\r\n       at System.Text.RegularExpressions.Tests.GroupCollectionTests.ICollection_CopyTo_Invalid() in /home/joshua/netcore/corefx/src/System.Text.RegularExpressions/tests/GroupCollectionTests.cs:line 119\r\n    ----- Inner Stack Trace -----\r\n       at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type) in /_/src/System.Private.CoreLib/shared/System/Number.Parsing.cs:line 1929\r\n       at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info) in /_/src/System.Private.CoreLib/shared/System/Number.Parsing.cs:line 218\r\n       at System.Int32.Parse(String s) in /_/src/System.Private.CoreLib/shared/System/Int32.cs:line 107\r\n       at System.PlatformDetection.ToVersion(String versionString) in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.Unix.cs:line 165\r\n       at System.PlatformDetection..cctor() in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.Unix.cs:line 84]]></stack-trace>\r\n        </failure>\r\n\r\n"},{"Id":"9715781390","Type":"IssuesEvent","CreatedAt":"2019-05-29T03:48:16","Actor":"justinushermawan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38007","RelatedDescription":"Opened issue \"JsonSerializer support for ExpandoObject\" (#38007) at dotnet/corefx","RelatedBody":"Does `JsonSerializer.Parse(String, Type, JsonSerializerOptions)` support for dynamic `ExpandoObject ` return type?\r\n\r\nSomething like this:\r\n`dynamic p = JsonSerializer.Parse(json, typeof(ExpandoObject));`"},{"Id":"9715500401","Type":"IssuesEvent","CreatedAt":"2019-05-29T02:29:44","Actor":"rfht","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38006","RelatedDescription":"Opened issue \"How ignore bad comparer for backwards compatibility?\" (#38006) at dotnet/corefx","RelatedBody":"I have this old assembly that shipped with mono v4 (the game Terraria, but that's besides the point) and when I try to run it with mono 5.x, it fails on start because of\r\n\r\n```\r\nSystem.ArgumentException: Unable to sort because the IComparer.Compare() method returns inconsistent results...\r\n```\r\n\r\nI found out that this is because it is triggered by `System.Collections.Generic.ArraySortHelper<T>.Sort` as found in https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs#L68 and after manually disabling (commenting out) the exception the program runs fine with corert in mono 5. The comment [here](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L80) indicates that bad comparers used to be ignored.\r\n\r\nIs there a reason why the [condition in that didn't throw for mono4 compat](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L87) isn't included in corert? Is there a different way to restore backwards-compatible behavior with this that I'm not aware of? If not, any chance that there could be a knob (flag, environment setting...) that could allow legacy behavior selectively?"},{"Id":"9715235781","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:12:43","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38005","RelatedDescription":"Opened pull request \"Re-generate System.Collections ref assembly against implementation\" (#38005) at dotnet/corefx","RelatedBody":"cc: @stephentoub @ahsonkhan @jkotas @danmosemsft "},{"Id":"9715176073","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:55:08","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38004","RelatedDescription":"Opened pull request \"Remove source package related comments on internal APIs and csproj/props file.\" (#38004) at dotnet/corefx","RelatedBody":"As an aside, added some additional test cases to the reader for parsing different, valid/invalid Json numbers.\r\n\r\ncc @bartonjs, @joperezr, @steveharter"},{"Id":"9715161638","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:50:46","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/38003","RelatedDescription":"Opened pull request \"Add nullable annotations to System.Runtime.InteropServices.WindowsRuntime ref\" (#38003) at dotnet/corefx","RelatedBody":"cc: @dotnet/nullablefc @AaronRobinsonMSFT "},{"Id":"9715151530","Type":"IssuesEvent","CreatedAt":"2019-05-29T00:47:36","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38002","RelatedDescription":"Opened issue \"RandomNumberGeneratorTests.GetInt32_CoinFlipLowByte failed in CI\" (#38002) at dotnet/corefx","RelatedBody":"https://dev.azure.com/dnceng/public/_build/results?buildId=203643&view=ms.vss-test-web.build-test-results-tab&runId=4930112&paneView=debug&resultId=298967\r\nnetcoreapp-Linux-Release-x64-Ubuntu.1604.Amd64.Open\r\n```\r\nError message\r\nOccurred number of times within threshold.\\nExpected: True\\nActual: False\r\n\r\nStack trace\r\n   at System.Security.Cryptography.RNG.Tests.RandomNumberGeneratorTests.VerifyDistribution(ReadOnlySpan`1 numbers, Double expected) in /_/src/System.Security.Cryptography.Algorithms/tests/RandomNumberGeneratorTests.netcoreapp.cs:line 279\r\n   at System.Security.Cryptography.RNG.Tests.RandomNumberGeneratorTests.GetInt32_CoinFlipLowByte() in /_/src/System.Security.Cryptography.Algorithms/tests/RandomNumberGeneratorTests.netcoreapp.cs:line 191\r\n```"},{"Id":"9715148990","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:46:46","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37995","RelatedDescription":"Merged pull request \"Disable sporadically failing GetGCMemoryInfo test\" (#37995) at dotnet/corefx","RelatedBody":"cc: @luhenry, @ViktorHofer \r\nhttps://github.com/dotnet/corefx/issues/37378"},{"Id":"9715142498","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:44:48","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37996","RelatedDescription":"Merged pull request \"Make AuthenticateAsClient/ServerAsync cancellation token optional\" (#37996) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/35283\r\ncc: @geoffkizer, @davidsh, @wfurt "},{"Id":"9715142493","Type":"IssuesEvent","CreatedAt":"2019-05-29T00:44:48","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35283","RelatedDescription":"Closed issue \"SslStream.AuthenticateAsServer/ClientAsync methods should default CancellationToken to default(CancellationToken)\" (#35283) at dotnet/corefx","RelatedBody":"The new Authenticate overloads on SslStream take a CancellationToken, but don't provide a default value for this. These should default to default(CancellationToken), i.e. CancellationToken.None.\r\n\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L425\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Net.Security/src/System/Net/Security/SslStream.cs#L390\r\n"},{"Id":"9715141360","Type":"IssuesEvent","CreatedAt":"2019-05-29T00:44:28","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38001","RelatedDescription":"Opened issue \"SystemNative_GetCpuUtilization assert failure\" (#38001) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37996~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190528.42/workItem/System.Runtime.Extensions.Tests/wilogs\r\n```\r\n  Discovering: System.Runtime.Extensions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Extensions.Tests (found 805 of 887 test cases)\r\n  Starting:    System.Runtime.Extensions.Tests (parallel test collections = on, max threads = 4)\r\n    System.Tests.EnvironmentTests.GetFolderPath_UapExistAndAccessible [SKIP]\r\n      Condition(s) not met: \"IsWindows10Version1709OrGreater\", \"IsInAppContainer\"\r\n    System.Tests.EnvironmentTests.GetFolderPath_UapNotEmpty [SKIP]\r\n      Condition(s) not met: \"IsWindows10Version1709OrGreater\", \"IsInAppContainer\"\r\nAssertion failed: (cpuUtilization >= 0 && cpuUtilization <= 100), function SystemNative_GetCpuUtilization, file /Users/vsts/agent/2.150.3/work/1/s/src/Native/Unix/System.Native/pal_time.c, line 200.\r\n./RunTests.sh: line 175: 51998 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Runtime.Extensions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n```"},{"Id":"9715127832","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:40:13","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37973","RelatedDescription":"Merged pull request \"Improve SocketAddress.ToString() performance\" (#37973) at dotnet/corefx","RelatedBody":"Following up on request/feedback at https://github.com/dotnet/corefx/pull/30521#discussion_r287352510.\r\n\r\nMicrobenchmark:\r\n```C#\r\nusing System;\r\nusing System.Net;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private readonly SocketAddress _addr = new IPEndPoint(IPAddress.Parse(\"40.112.72.205\"), 443).Serialize();\r\n\r\n    [Benchmark]\r\n    public string SAToString() => _addr.ToString(); \r\n}\r\n```\r\n\r\n|     Method |     Mean |    Error |   StdDev |   Median |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|----------- |---------:|---------:|---------:|---------:|-------:|------:|------:|----------:|\r\n| Before     | 528.7 ns | 10.67 ns | 24.73 ns | 517.1 ns | 0.1183 |     - |     - |     496 B |\r\n| After        | 346.6 ns | 4.733 ns | 3.695 ns | 0.0362 |     - |     - |     - |     152 B |"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9715988132","Type":"IssuesEvent","CreatedAt":"2019-05-29T04:52:12","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35901","RelatedDescription":"Closed issue \"NullableContextOptions no longer works\" (#35901) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [VSTS ticketId 896657](https://developercommunity.visualstudio.com/content/problem/576567/nullablecontextoptions-no-longer-works.html)._\r\n\r\nIn our .csproj files, this used to enable nullable context:\r\n\r\n```\r\n<NullableContextOptions>enable</NullableContextOptions>\r\n```\r\n\r\nNow, after upgrading to 16.2 preview 1, it no longer works.  The compiler throws errors as if we were not in a nullable context.  Surrounding code with `#nullable enable`/`restore` still works, but it's not feasible to do it for each and every code file in our solution.\r\n\r\n---\r\n\r\n### Original comments\r\n\r\n#### Pierre Arnaud on 5/22/2019, 05:59 PM\r\n\r\nI've the exact same issue on all my projects.<br>\r\n\r\n#### Visual Studio Feedback System on 5/22/2019, 06:02 PM\r\n\r\nWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\r\n\r\n#### Kexy Biscuit on 5/22/2019, 07:14 PM\r\n\r\nMe too, this breaks nearly everything for me.\r\n\r\n#### richf on 5/22/2019, 10:04 PM\r\n\r\nSame problem.\r\n\r\nBuilding from commandline does not have any issue\r\n\r\n#### Anthony Trudeau on 5/23/2019, 08:20 AM\r\n\r\n@VisualStudio on Twitter directed me to share my comments here after some messages there.\r\n\r\nI'm on 16.1 within a new WPF project and using the element in the project file has no affect. There are no errors, warnings, or otherwise. Using the directive in the individual code files works as expected.\r\n"},{"Id":"9715497941","Type":"PullRequestEvent","CreatedAt":"2019-05-29T02:29:06","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35914","RelatedDescription":"Merged pull request \"Fix declaration name completion when local functions present.\" (#35914) at dotnet/roslyn","RelatedBody":"Resolves https://github.com/dotnet/roslyn/issues/35891\r\n"},{"Id":"9715497925","Type":"IssuesEvent","CreatedAt":"2019-05-29T02:29:06","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35891","RelatedDescription":"Closed issue \"Two local functions with same parmater offer unique names in Intellisense\" (#35891) at dotnet/roslyn","RelatedBody":"VSF_TYPE_MARKDOWNDeclaring two local functions with classes (structs, others?) as parameters results in intellisense suggesting that the parameters in the second function have a different name, even though there is no reason it cannot use the same name.\n\n```\nclass Test\n{\n\tvoid function()\n\t{\n\t\tvoid LocalFunction1(Test test) //intellisense will suggest test\n\t\t{ }\n\nvoid LocalFunction2(Test test1) //intellisense will suggest test1 instead of test\n\t\t{ }\n\t}\n}\n```\n\nThe same behaviour can be observed for classes with more complex names\n\n```\nclass TestClass\n{\n\tvoid function()\n\t{\n\nvoid LocalFunction1(TestClass testClass) //intellisense will suggest testClass\n\t\t{ }\n\nvoid LocalFunction2(TestClass test) //intellisense will suggest test instead of testClass\n\t\t{ }\n\t}\n}\n```\nMay be related https://github.com/dotnet/roslyn/issues/31304\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/569267/two-local-functions-with-same-parmater-offer-uniqu.html\nVSTS ticketId: 893063_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/15/2019, 07:16 PM (6 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 5/17/2019, 05:50 PM (4 days ago): <p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"9715381500","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:55:47","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36013","RelatedDescription":"Opened pull request \"Make IExperimentationService properly free-threaded\" (#36013) at dotnet/roslyn","RelatedBody":""},{"Id":"9715365185","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:50:20","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36012","RelatedDescription":"Opened pull request \"Remove the AbstractIndenter type (and subtypes).\" (#36012) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/34001.  that PR should go in first.\r\n\r\nCore logic for it has been moved into the AbstractIndentationService."},{"Id":"9715295525","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:30:10","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36008","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#36008) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9715193123","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:00:16","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35995","RelatedDescription":"Merged pull request \"Merge release/dev16.2-preview1-vs-deps to release/dev16.2-preview2-vs-deps\" (#35995) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into release/dev16.2-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps\ngit reset --hard upstream/release/dev16.2-preview2-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9716061276","Type":"PullRequestEvent","CreatedAt":"2019-05-29T05:13:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7464","RelatedDescription":"Opened pull request \"Print descriptive error for GeneratePackageOnBuild\" (#7464) at dotnet/corert","RelatedBody":"Fixes #7460"},{"Id":"9715927487","Type":"PullRequestEvent","CreatedAt":"2019-05-29T04:33:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7461","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7461) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @VSadov @stephentoub"},{"Id":"9715890104","Type":"IssuesEvent","CreatedAt":"2019-05-29T04:22:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7463","RelatedDescription":"Opened issue \"Missing devirtualization + conversion to stackallocation optimization\" (#7463) at dotnet/corert","RelatedBody":"```\r\nusing System;\r\n\r\ninterface IMyInterface\r\n{\r\n    void foo();\r\n}\r\n\r\nstruct MyStruct : IMyInterface\r\n{\r\n    public void foo() { }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Work<T>(T s)\r\n    {\r\n        if (s is IMyInterface) ((IMyInterface)s).foo();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        for (int i = 0; i < 10000000; i++)\r\n            Work<MyStruct>(default);\r\n        Console.WriteLine(GC.CollectionCount(0));\r\n    }\r\n}\r\n```\r\n\r\n`dotnet publish -c Release -r win-x64`\r\nActual result: 57\r\nExpected result: 0"},{"Id":"9715400396","Type":"IssuesEvent","CreatedAt":"2019-05-29T02:01:02","Actor":"rfht","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7462","RelatedDescription":"Opened issue \"How ignore bad comparer for backwards compatibility?\" (#7462) at dotnet/corert","RelatedBody":"I have this old assembly that shipped with mono v4 (the game Terraria, but that's besides the point) and when I try to run it with mono 5.x, it fails on start because of\r\n\r\n```\r\nSystem.ArgumentException: Unable to sort because the IComparer.Compare() method returns inconsistent results...\r\n```\r\n\r\nI found out that this is because it is triggered by `System.Collections.Generic.ArraySortHelper<T>.Sort` as found in https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs#L68 and after manually disabling (commenting out) the exception the program runs fine with corert in mono 5. The comment [here](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L80) indicates that bad comparers used to be ignored.\r\n\r\nIs there a reason why the [condition in that didn't throw for mono4 compat](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L87) isn't included in corert? Is there a different way to restore backwards-compatible behavior with this that I'm not aware of? If not, any chance that there could be a knob (flag, environment setting...) that could allow legacy behavior selectively?"},{"Id":"9715145784","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:45:46","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7461","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7461) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9715142446","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:44:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7459","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7459) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar"},{"Id":"9714474435","Type":"IssuesEvent","CreatedAt":"2019-05-28T21:57:43","Actor":"timmydo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7460","RelatedDescription":"Opened issue \"Publish native shared library fails because project.deps.json not found\" (#7460) at dotnet/corert","RelatedBody":"csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nprogram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public sealed class NativeCallableAttribute : Attribute\r\n    {\r\n        public string EntryPoint;\r\n        public CallingConvention CallingConvention;\r\n        public NativeCallableAttribute() { }\r\n    }\r\n}\r\n\r\nnamespace BlahBlah\r\n{\r\n    using System;\r\n    using System.Runtime.InteropServices;\r\n\r\n    public static class NativeMethods\r\n    {\r\n        [NativeCallable(EntryPoint = \"Blah\", CallingConvention = CallingConvention.StdCall)]\r\n        public static void Blah(IntPtr blah)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n```\r\nC:\\Users\\timmydo\\source\\repos\\corert1\\corert1\r\nλ  dotnet publish /p:NativeLib=Shared -r win-x64 -c Debug\r\nMicrosoft (R) Build Engine version 16.2.0-preview-19274-01+7708b265e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 758.81 ms for C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj.\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n     Creating library bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.lib and object bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.exp\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012078\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(152,5): error MSB3030: Could not copy the file \"C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\bin\\Debug\\netstandard2.0\\win-x64\\corert1.deps.json\" because it was not found. [C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj]\r\n```\r\n\r\nIt seems the culprit is GeneratePackagesOnBuild. If you remove that, it works."},{"Id":"9714127346","Type":"PullRequestEvent","CreatedAt":"2019-05-28T20:56:49","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7459","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7459) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9714118078","Type":"PullRequestEvent","CreatedAt":"2019-05-28T20:55:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7458","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7458) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @MarcoRossignoli"},{"Id":"9714116421","Type":"PullRequestEvent","CreatedAt":"2019-05-28T20:55:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7454","RelatedDescription":"Merged pull request \"Fix superfluous delegate allocations in Unix WaitSubsystem\" (#7454) at dotnet/corert","RelatedBody":"Fixes #7452"},{"Id":"9714116402","Type":"IssuesEvent","CreatedAt":"2019-05-28T20:55:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7452","RelatedDescription":"Closed issue \"Waiting on WaitHandle allocates on Unix\" (#7452) at dotnet/corert","RelatedBody":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    static EventWaitHandle e = new EventWaitHandle(false, EventResetMode.AutoReset);\r\n\r\n    static void Work()\r\n    {\r\n        for (; ; ) e.Set();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        new Thread(Work).Start();\r\n\r\n        int start = Environment.TickCount;\r\n        for (int i = 0; i < 1000000; i++)\r\n        {\r\n            e.WaitOne();\r\n        }\r\n        int end = Environment.TickCount;\r\n        Console.WriteLine($\"Time: {end-start}\");\r\n        Console.WriteLine($\"GCs: {GC.CollectionCount(0)}\");\r\n    }\r\n}\r\n```\r\n\r\nExpected result: GCs: 0\r\nActual result: GCs: 30+"},{"Id":"9713081394","Type":"PullRequestEvent","CreatedAt":"2019-05-28T18:14:57","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7458","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7458) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9715215347","Type":"PullRequestEvent","CreatedAt":"2019-05-29T01:06:40","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3240","RelatedDescription":"Merged pull request \"Setting IsKeyOutput metadata on AppHost file in PublishItemsOutputGroup\" (#3240) at dotnet/sdk","RelatedBody":"Updating the publishing targets to set the IsKeyOutput metadata on the apphost file (exe).  The key output is used when creating shortcuts using Installer Projects.\r\n\r\n"},{"Id":"9714997652","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:02:08","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3270","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to release/3.0.1xx\" (#3270) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9714997347","Type":"PullRequestEvent","CreatedAt":"2019-05-29T00:02:03","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3269","RelatedDescription":"Opened pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#3269) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"449589797","IsPullRequest":true,"CreatedAt":"2019-05-29T04:16:22","Actor":"elinor-fung","Number":"24825","RawContent":null,"Title":"Specify restore sources in optdata.csproj","State":"open","Body":"This broke with #24619 (stopped pulling in dir.props). This was still 'working' in the coreclr build because the scripts restore opt data through build.proj which explicitly adds sources to the restore command it executes. This is the first step (unless `skiprestoreoptdata` is specified), so anything referencing the project afterwards detected it was already restored.\r\n\r\nFixes #24820 ","Url":"https://github.com/dotnet/coreclr/pull/24825","RelatedDescription":"Open PR \"Specify restore sources in optdata.csproj\" (#24825)"},{"Id":"449475057","IsPullRequest":true,"CreatedAt":"2019-05-29T03:55:53","Actor":"jkoritzinsky","Number":"24812","RawContent":null,"Title":"Change DllImportPath policy to create unicode-named test library immediately before use","State":"closed","Body":"Fixes #24791 ","Url":"https://github.com/dotnet/coreclr/pull/24812","RelatedDescription":"Closed or merged PR \"Change DllImportPath policy to create unicode-named test library immediately before use\" (#24812)"},{"Id":"449562633","IsPullRequest":false,"CreatedAt":"2019-05-29T02:03:40","Actor":"xiangzhai","Number":"24824","RawContent":null,"Title":"[X86/Linux] Fail to disable JIT when enabled Interpreter","State":"open","Body":"Hi,\r\n\r\nJust follow @kangaroo porting work https://github.com/dotnet/coreclr/pull/1292#issuecomment-125688792 enabled interpreter and still tracking `JitFunctionTrace` to see whether or not disable JIT totally:\r\n\r\n```\r\nexport COMPlus_DumpInterpreterStubs=1\r\nexport COMPlus_Interpret=*\r\nexport COMPlus_InterpreterPrintPostMortem=1\r\nexport COMPlus_InterpreterDoLoopMethods=1\r\nexport COMPlus_TieredCompilation=1\r\nexport COMPlus_JITMinOpts=1\r\nexport COMPlus_ZapDisable=1\r\nexport COMPlus_JitFunctionTrace=1\r\n```\r\n\r\nBut it is still `Start Jitting` in the `Jitted Entry` when such `Method` doesn't meet the `IsEligibleForTieredCompilation` condition:\r\n\r\n```\r\n...\r\nGenerating interpretation stub (# 5 = 0x5, hash = 0x69bf8d7c) for <>c:.ctor.\r\nSTART 5, <>c:.ctor()\r\n     0: ldarg.0\r\n   0x1: call\r\n  Returning to method <>c:.ctor(), stub num 5.\r\n   0x6: ret\r\nDONE 5, <>c:.ctor()\r\n  Returning to method <>c:.cctor(), stub num 4.\r\n   0x5: stsfld\r\n   0xa: ret\r\nDONE 4, <>c:.cctor()\r\n   0xa: dup\r\n   0xb: brtrue.s\r\n   0xd: pop\r\n   0xe: ldsfld\r\n  0x13: ldftn\r\n  0x19: newobj\r\n{ Start Jitting System.MulticastDelegate:CtorClosed(ref,long):this (MethodHash=ad3a8451)\r\n} Jitted Entry 149 at 00007f7a`601cd0a0 method System.MulticastDelegate:CtorClosed(ref,long):this size 0000006f\r\n  Returning to method System.Console:get_Out():class, stub num 3.\r\n  0x1e: dup\r\n  0x1f: stsfld\r\n  0x24: call\r\n{ Start Jitting DomainBoundILStubClass:IL_STUB_InstantiatingStub(byref,ref):ref (MethodHash=294d3ab2)\r\n} Jitted Entry 14a at 00007f7a`601cd530 method DomainBoundILStubClass:IL_STUB_InstantiatingStub(byref,ref):ref size 0000003f\r\nGenerating interpretation stub (# 6 = 0x6, hash = 0xbf685470) for System.Console:EnsureInitialized.\r\nSTART 6, System.Console:EnsureInitialized(byref,class):class\r\n     0: ldarg.0\r\n   0x1: ldsflda\r\n...\r\n```\r\n\r\nHacking JIT by commenting `CompileMethodWithEtwWrapper` to force disable JIT, but, of course, fail to initialize:\r\n\r\n```\r\ndiff --git a/src/vm/jitinterface.cpp b/src/vm/jitinterface.cpp\r\nindex 502b5ada13..87de5f0e9e 100644\r\n--- a/src/vm/jitinterface.cpp\r\n+++ b/src/vm/jitinterface.cpp\r\n@@ -12158,7 +12158,8 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n             }\r\n         }\r\n     }\r\n-    \r\n+\r\n+#if 0\r\n     if (FAILED(ret) && jitMgr->m_jit)\r\n     {\r\n         ret = CompileMethodWithEtwWrapper(jitMgr, \r\n@@ -12168,6 +12169,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n                                           nativeEntry,\r\n                                           nativeSizeOfCode);\r\n     }\r\n+#endif\r\n \r\n     if (interpreterFallback == true)\r\n     {\r\n```\r\n\r\nOpenJDK is able to just enable interpreter:\r\n\r\n```\r\njava -Xint\r\n```\r\n\r\nor just enable JIT compilers:\r\n\r\n```\r\njava -Xcomp\r\n```\r\n\r\nor mixed:\r\n\r\n```\r\njava -Xmixed\r\n```\r\n\r\nHow to disable JIT when enabled Interpreter for corerun?  Please give me some hint.\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/issues/24824","RelatedDescription":"Open issue \"[X86/Linux] Fail to disable JIT when enabled Interpreter\" (#24824)"},{"Id":"449561324","IsPullRequest":true,"CreatedAt":"2019-05-29T01:57:11","Actor":"davidwrighton","Number":"24823","RawContent":null,"Title":"[WIP] R2R ilstubs","State":"open","Body":"IL stub generation for interop takes measurable time at startup, and it is possible to generate some of them in an ahead of time \r\n\r\nThis change introduces ahead of time R2R compilation of IL stubs\r\n- Relatively complete coverage for System.Private.CoreLib\r\n- Limited IL stubs for other assemblies\r\n  - Only stubs which do not use any api surface in their marshalers.\r\n\r\nAs of this writing IL stubs do not participate in tiering. Need for this will be investigated before checkin","Url":"https://github.com/dotnet/coreclr/pull/24823","RelatedDescription":"Open PR \"[WIP] R2R ilstubs\" (#24823)"},{"Id":"449473664","IsPullRequest":true,"CreatedAt":"2019-05-29T01:39:26","Actor":"Dotnet-GitSync-Bot","Number":"24811","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/24811","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#24811)"},{"Id":"449513725","IsPullRequest":true,"CreatedAt":"2019-05-29T01:38:43","Actor":"jkotas","Number":"24818","RawContent":null,"Title":"Add null checks before calling ClassLoader::EnsureLoaded","State":"closed","Body":"Fixes #24816","Url":"https://github.com/dotnet/coreclr/pull/24818","RelatedDescription":"Closed or merged PR \"Add null checks before calling ClassLoader::EnsureLoaded\" (#24818)"},{"Id":"449508501","IsPullRequest":false,"CreatedAt":"2019-05-29T01:38:43","Actor":"miguep","Number":"24816","RawContent":null,"Title":"AV in CoreClr!MethodTable::GetFlag","State":"closed","Body":"Some time over the last week a few scenarios broke in WPF and WinForms.\r\n\r\nClipboard.SetData(DataFormats.UnicodeText,\"abc\")\r\n\r\ncalls into OleFlushClipboard which is a PInvoke into ole32 see [here](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/UnsafeNativeMethodsCLR.cs#L117)\r\n\r\nThis call hits an AV in coreclr with the following stack: \r\n\r\ncoreclr!MethodTable::GetFlag\r\ncoreclr!MethodTable::IsPreRestored \r\ncoreclr!MethodTable::GetLoadLevel\r\ncoreclr!ClassLoader::EnsureLoaded+0x1b\r\ncoreclr!FieldMarshaler::RestoreHelper+0xf \r\ncoreclr!FieldMarshaler_Interface::RestoreImpl+0x8 \r\ncoreclr!FieldMarshaler::Restore+0x2f\r\ncoreclr!LayoutUpdateNative+0xb3\r\ncoreclr!FmtValueTypeUpdateNative+0x64\r\ncoreclr!StubHelpers::ValueClassMarshaler__ConvertToNative+0x4e\r\nMicrosoft_Win32_Registry!ILStubClass.IL_STUB_COMtoCLR(IntPtr, IntPtr)+0x44\r\ncoreclr!COMToCLRDispatchHelper+0x6b\r\ncoreclr!InvokeStub+0x35 \r\ncoreclr!COMToCLRInvokeTarget+0x8e \r\ncoreclr!COMToCLRWorkerBody+0x278\r\ncoreclr!COMToCLRWorker+0x2aa \r\nCLRStub[StubLinkStub]@4cf9d49c0527d6d2\r\nole32!HandleFromHandle+0x2d\r\nole32!RenderCurrentFormat+0x73 \r\nole32!RenderFormat+0x12a \r\nole32!ClipboardWndProc+0x1b96d\r\nUSER32!_InternalCallWinProc+0x2b \r\nUSER32!InternalCallWinProc+0x1a \r\nUSER32!UserCallWinProcCheckWow+0x3ac \r\nUSER32!DispatchClientMessage+0xea \r\nUSER32!__fnDWORD+0x3f \r\nntdll!KiUserCallbackDispatcher+0x4d\r\nUSER32!GetClipboardData+0x4c \r\nole32!FlushViaUser32Render+0x64 \r\nole32!OleFlushClipboardInternal+0x1bfab\r\nole32!OleFlushClipboard+0x4c\r\nMicrosoft_Win32_Registry!ILStubClass.IL_STUB_PInvoke()+0x3a\r\nPresentationCore!System.Windows.OleServicesContext.OleFlushClipboard()+0x92\r\n\r\nThis scenario was working correctly on build preview6-012031 from last week.\r\n\r\nWe were investigating this issue from the WPF side, but given that no changes have been done recently to the clipboard code, and the fact that Winforms also runs into this issue, we'd appreciate if you could look at this from the coreclr side.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24816","RelatedDescription":"Closed issue \"AV in CoreClr!MethodTable::GetFlag\" (#24816)"},{"Id":"449398357","IsPullRequest":true,"CreatedAt":"2019-05-29T00:37:53","Actor":"elinor-fung","Number":"24805","RawContent":null,"Title":"Stop adding 7 before the build revision number","State":"closed","Body":"The artificially large revision number was a temporary workaround that should no longer be necessary.\r\n\r\nThe valid range for the revision number is [0, 99]. By having the 7 before it, official builds fail if there are more than 9 in one day.","Url":"https://github.com/dotnet/coreclr/pull/24805","RelatedDescription":"Closed or merged PR \"Stop adding 7 before the build revision number\" (#24805)"},{"Id":"449471866","IsPullRequest":true,"CreatedAt":"2019-05-29T00:36:53","Actor":"stephentoub","Number":"24810","RawContent":null,"Title":"Change StreamReader.ReadBufferAsync to return ValueTask<int>","State":"closed","Body":"It's a private helper that's always directly awaited.  No need to allocate a task each time it's called and data is synchronously available.\r\n\r\ncc: @JeremyKuhne ","Url":"https://github.com/dotnet/coreclr/pull/24810","RelatedDescription":"Closed or merged PR \"Change StreamReader.ReadBufferAsync to return ValueTask<int>\" (#24810)"},{"Id":"449528284","IsPullRequest":true,"CreatedAt":"2019-05-29T00:02:51","Actor":"echesakovMSFT","Number":"24822","RawContent":null,"Title":"Update MicrosoftDotNetXUnitConsoleRunnerVersion to reflect changes in Arcade","State":"open","Body":"https://github.com/dotnet/arcade/pull/2900#issuecomment-496099450\r\n\r\ncc @ViktorHofer ","Url":"https://github.com/dotnet/coreclr/pull/24822","RelatedDescription":"Open PR \"Update MicrosoftDotNetXUnitConsoleRunnerVersion to reflect changes in Arcade\" (#24822)"},{"Id":"449524998","IsPullRequest":false,"CreatedAt":"2019-05-28T23:46:48","Actor":"AndyAyersMS","Number":"24821","RawContent":null,"Title":"Move R2RDump over to the new System.CommandLine","State":"open","Body":"The `System.CommandLine` used by R2RDump is a defunct corefxlabs project. We should move it over to using the new [System.CommandLine.](https://github.com/dotnet/command-line-api)\r\n\r\nAmong other things this will unblock porting some of the jitutils over to this new command line parser (since PMI needs to be able to run in Core_Root environment). See dotnet/jitutils#209.","Url":"https://github.com/dotnet/coreclr/issues/24821","RelatedDescription":"Open issue \"Move R2RDump over to the new System.CommandLine\" (#24821)"},{"Id":"449496555","IsPullRequest":true,"CreatedAt":"2019-05-28T23:37:50","Actor":"jkotas","Number":"24814","RawContent":null,"Title":"Fix IBC data collection","State":"closed","Body":"Fixes #24813","Url":"https://github.com/dotnet/coreclr/pull/24814","RelatedDescription":"Closed or merged PR \"Fix IBC data collection\" (#24814)"},{"Id":"449478372","IsPullRequest":false,"CreatedAt":"2019-05-28T23:37:50","Actor":"brianrob","Number":"24813","RawContent":null,"Title":"IBC Training Against System.Private.CoreLib is Broken","State":"closed","Body":"As of #24625, IBC training against System.Private.CoreLib does not produce any data.  I've confirmed this by performing a ```git bisect``` against CoreCLR sources using the training infrastructure.\r\n\r\nIt appears that no IBC files are written to disk after shutdown of the process.","Url":"https://github.com/dotnet/coreclr/issues/24813","RelatedDescription":"Closed issue \"IBC Training Against System.Private.CoreLib is Broken\" (#24813)"},{"Id":"449521209","IsPullRequest":false,"CreatedAt":"2019-05-28T23:29:06","Actor":"brianrob","Number":"24820","RawContent":null,"Title":"PGO Training Fails with Error Binding to CoreCLR","State":"open","Body":"PGO training on Windows fails with the following error:\r\n\r\n```\r\nFailed to load the dll from [D:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.NETCore.App\\3.0.0-preview6-27727-02\\coreclr.dll], HRESULT: 0x8007007E\r\nFailed to bind to CoreCLR at 'D:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.NETCore.App\\3.0.0-preview6-27727-02\\'\r\nFailed to create CoreCLR, HRESULT: 0x80008088\r\n```\r\n\r\nGit bisect points at #24619 as being the first PR containing the break.  It's not clear to me what in this change broke things, but in addition to the error above, there is also a restore error during CoreCLR layout generation that doesn't occur when things work.  The error comes from  ```build-test.cmd x64 release skipmanaged skipnative```:\r\n\r\n```\r\nD:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\coreclr-master\\src\\.nuget\\optdata\\optdata.csproj : error NU1101: Unable to find package optimization.PGO.CoreCLR. No packages exist with this id in source(s): https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json, https://dotnet.myget.org/F/sourcelink/api/v3/index.json, https://www.myget.org/F/xunit/api/v3/index.json, nuget.org [D:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\coreclr-master\\src\\build.proj]\r\nD:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\coreclr-master\\src\\.nuget\\optdata\\optdata.csproj : error NU1101: Unable to find package optimization.IBC.CoreCLR. No packages exist with this id in source(s): https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json, https://dotnet.myget.org/F/sourcelink/api/v3/index.json, https://www.myget.org/F/xunit/api/v3/index.json, nuget.org [D:\\src\\dotnet-optimization\\output\\CLRx64WINmas\\PGO\\coreclr-master\\src\\build.proj]\r\n    13 Warning(s)\r\n    2 Error(s)\r\n```\r\n\r\nThese packages are used for optimizing builds, not generating instrumented builds for producing training data, so I am suspicious that something associated with ```build.cmd pgoinstrument``` is broken.  This command should produce an instrumented build of CoreCLR that generates PGO data for each application run.\r\n\r\nIf you would like to repro this on your local machine, I can provide you with instructions offline.","Url":"https://github.com/dotnet/coreclr/issues/24820","RelatedDescription":"Open issue \"PGO Training Fails with Error Binding to CoreCLR\" (#24820)"},{"Id":"449410905","IsPullRequest":true,"CreatedAt":"2019-05-28T23:09:47","Actor":"elinor-fung","Number":"24808","RawContent":null,"Title":"Stop using BuildTools for signing","State":"closed","Body":"We were just using the BuildTools tasks to create then read a JSON file for metadata about how to sign each file, but with the build and signing both already using Arcade, that is not actually necessary. (The signing task in Arcade doesn't use that metadata - we were already relying on the default configuration provided by Arcade).\r\n\r\nVerified with a manually queued real-signed build.\r\n\r\ncc @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/pull/24808","RelatedDescription":"Closed or merged PR \"Stop using BuildTools for signing\" (#24808)"},{"Id":"449516287","IsPullRequest":true,"CreatedAt":"2019-05-28T23:09:03","Actor":"sbomer","Number":"24819","RawContent":null,"Title":"Add back AssemblyDescription attribute","State":"open","Body":"This was present in System.Private.CoreLib previously, but removed in recent versions (I compared 3.0.0-preview5-27610-03 and 3.0.0-preview6-27715-05 on macos). It's unclear to me what used to be adding the attribute  - https://github.com/dotnet/coreclr/commit/099177b0899156a4e8a352083a273805240c0ccd touched the SPC logic, but even in that change I see no mention of it. Maybe it used to be autogenerated by the old project files. In any case, I believe it should be added back.\r\nIts value used to be \"System.Private.CoreLib\":\r\n```diff\r\n-  .custom instance void System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 16 53 79 73 74 65 6D 2E 50 72 69 76 61 74   // ...System.Privat\r\n-                                                                                          65 2E 43 6F 72 65 4C 69 62 00 00 )                // e.CoreLib..\r\n```","Url":"https://github.com/dotnet/coreclr/pull/24819","RelatedDescription":"Open PR \"Add back AssemblyDescription attribute\" (#24819)"},{"Id":"449395011","IsPullRequest":true,"CreatedAt":"2019-05-28T23:05:29","Actor":"elinor-fung","Number":"24804","RawContent":null,"Title":"Rename CreateNativeDelegate -> LoadAssemblyAndGetFunctionPointer","State":"closed","Body":"Change extensibility parameter from `int` to `void *`","Url":"https://github.com/dotnet/coreclr/pull/24804","RelatedDescription":"Closed or merged PR \"Rename CreateNativeDelegate -> LoadAssemblyAndGetFunctionPointer\" (#24804)"},{"Id":"449510326","IsPullRequest":true,"CreatedAt":"2019-05-28T22:45:14","Actor":"janvorli","Number":"24817","RawContent":null,"Title":"Add build-tools.cmd","State":"open","Body":"This script builds selected tools in the src/tools directory (for the\r\ntime being, it builds just the runincontext tool). This is a preparation\r\nstep to enable nightly runs with unloadability tests. The\r\nbuild-tools.cmd should build helper tools needed during test runs.","Url":"https://github.com/dotnet/coreclr/pull/24817","RelatedDescription":"Open PR \"Add build-tools.cmd\" (#24817)"},{"Id":"449499841","IsPullRequest":true,"CreatedAt":"2019-05-28T22:09:35","Actor":"RussKeldorph","Number":"24815","RawContent":null,"Title":"(release/2.1) Move to supported test queues","State":"open","Body":"Fixes #24568\r\n\r\nThis should be auto-merged to release/2.2.","Url":"https://github.com/dotnet/coreclr/pull/24815","RelatedDescription":"Open PR \"(release/2.1) Move to supported test queues\" (#24815)"},{"Id":"449154015","IsPullRequest":true,"CreatedAt":"2019-05-28T20:54:39","Actor":"marek-safar","Number":"24800","RawContent":null,"Title":"Move parts of WeakReference to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24800","RelatedDescription":"Closed or merged PR \"Move parts of WeakReference to shared partition\" (#24800)"},{"Id":"449453358","IsPullRequest":true,"CreatedAt":"2019-05-28T20:07:27","Actor":"RussKeldorph","Number":"24809","RawContent":null,"Title":"Move CI to supported queues","State":"open","Body":"Should also address #24568 for master","Url":"https://github.com/dotnet/coreclr/pull/24809","RelatedDescription":"Open PR \"Move CI to supported queues\" (#24809)"},{"Id":"449076679","IsPullRequest":true,"CreatedAt":"2019-05-28T18:18:29","Actor":"jkotas","Number":"24797","RawContent":null,"Title":"Cleanup unnecessary code in exception formatting","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24797","RelatedDescription":"Closed or merged PR \"Cleanup unnecessary code in exception formatting\" (#24797)"},{"Id":"449409447","IsPullRequest":false,"CreatedAt":"2019-05-28T18:16:36","Actor":"jkotas","Number":"24807","RawContent":null,"Title":"AF: IsEnabled() in tracevalidation\\\\inducedgc test","State":"open","Body":"```\r\nAssert failure(PID 3928 [0x00000f58], Thread: 5200 [0x1450]): IsEnabled()\r\n\r\nCORECLR! GetCLRRuntimeHost + 0xE2F83 (0x00007ffb`39c26733)\r\nCORECLR! GetCLRRuntimeHost + 0x651F22 (0x00007ffb`3a1956d2)\r\nCORECLR! GetCLRRuntimeHost + 0x651B4B (0x00007ffb`3a1952fb)\r\nCORECLR! GetCLRRuntimeHost + 0xA4027 (0x00007ffb`39be77d7)\r\nCORECLR! GetCLRRuntimeHost + 0xA40F7 (0x00007ffb`39be78a7)\r\nCORECLR! GetCLRRuntimeHost + 0xA6A25 (0x00007ffb`39bea1d5)\r\nCORECLR! GetCLRRuntimeHost + 0xA6D53 (0x00007ffb`39bea503)\r\nCORECLR! GetCLRRuntimeHost + 0xA4227 (0x00007ffb`39be79d7)\r\nCORECLR! GetCLRRuntimeHost + 0xA4330 (0x00007ffb`39be7ae0)\r\nCORECLR! GetCLRRuntimeHost + 0x651AD4 (0x00007ffb`3a195284)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\eventtrace.cpp Line: 7481\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\1115ea7a-695a-46da-87f1-de435a13b3fc\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\1115ea7a-695a-46da-87f1-de435a13b3fc\\\\Work\\\\1bb4c00c-c172-42fe-a37d-fe5a1ca7ba33\\\\Exec\\\\tracing\\\\tracevalidation\\\\Reports\\\\tracing.tracevalidation\\\\inducedgc\\\\inducedgc\\\\inducedgc.output.txt\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24807","RelatedDescription":"Open issue \"AF: IsEnabled() in tracevalidation\\\\inducedgc test\" (#24807)"},{"Id":"449406174","IsPullRequest":false,"CreatedAt":"2019-05-28T18:08:07","Actor":"ww898","Number":"24806","RawContent":null,"Title":"Add ability to get CoreCLR version in ICLRProfiling","State":"open","Body":"It would be great showing real CoreCLR version in attach UI where list of ready to attach processes contains runtime information such as type and version. I think that `ICLRProfiling` (may be `ICLRProfiling2`) is good place for that.","Url":"https://github.com/dotnet/coreclr/issues/24806","RelatedDescription":"Open issue \"Add ability to get CoreCLR version in ICLRProfiling\" (#24806)"},{"Id":"449120917","IsPullRequest":true,"CreatedAt":"2019-05-28T17:29:28","Actor":"cshung","Number":"24798","RawContent":null,"Title":"Make sure the layout of coreclr!Module is the same as mscordaccore!Module","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24798","RelatedDescription":"Closed or merged PR \"Make sure the layout of coreclr!Module is the same as mscordaccore!Module\" (#24798)"},{"Id":"449196632","IsPullRequest":true,"CreatedAt":"2019-05-28T16:06:38","Actor":"janvorli","Number":"24801","RawContent":null,"Title":"Fix initial thread affinity on Linux","State":"closed","Body":"On Linux, a new thread inherits the affinity mask of the thread\r\nthat created the new thread. This is a problem for background GC\r\nthreads that are created by one of the server GC threads that are\r\naffinitized to single core.\r\nThis change adds resetting each new thread affinity to match the\r\ncurrent process affinity.\r\nIn addition to that, I've also fixed the extraction of the CPU count\r\nthat was using PID 0. While the doc says that 0 represents current process,\r\nit in fact means current thread.\r\nAnd as a small bonus, I've added caching of the value returned by\r\nthe PAL_GetLogicalCpuCountFromOS, since it cannot change during runtime.","Url":"https://github.com/dotnet/coreclr/pull/24801","RelatedDescription":"Closed or merged PR \"Fix initial thread affinity on Linux\" (#24801)"},{"Id":"449312378","IsPullRequest":false,"CreatedAt":"2019-05-28T14:44:48","Actor":"kekekeks","Number":"24803","RawContent":null,"Title":"A way to know if a method is overridden","State":"open","Body":"Sometimes calling an overridden method might need some allocations, computations, locking or other expensive actions that one would rather avoid.\r\n\r\nIn case of System.Stream there are two [hardcoded override checks](https://github.com/dotnet/coreclr/blob/9773db1e7b1acb3ec75c9cc0e36bd62dcbacd6d5/src/System.Private.CoreLib/src/System/IO/Stream.CoreCLR.cs#L11): `HasOverriddenBeginEndRead` and `HasOverriddenBeginEndWrite`\r\n\r\n\r\nIt would be really nice to have a generic way to know if some method was overridden, so other code could leverage the ability to choose a fast path in case of empty default implementation, like Stream currently [does](https://github.com/dotnet/coreclr/blob/9773db1e7b1acb3ec75c9cc0e36bd62dcbacd6d5/src/System.Private.CoreLib/shared/System/IO/Stream.cs#L408).\r\n\r\nSomething like:\r\n\r\n```cs\r\nprotected virtual Foo(){}\r\n\r\n[MethodImplAttribute(MethodImplOptions.InternalCall)]\r\nbool __HasOverriddenFoo();\r\n```\r\n\r\n\r\nI'm not sure if method name based approach is correct there though, ideally a check would involve a RuntimeMethodHandle obtained from ldtoken, so it wont be broken by obfuscators and other post-build changes.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24803","RelatedDescription":"Open issue \"A way to know if a method is overridden\" (#24803)"},{"Id":"449222633","IsPullRequest":true,"CreatedAt":"2019-05-28T11:47:51","Actor":"tmds","Number":"24802","RawContent":null,"Title":"sched_getaffinity: pass getpid() to get process affinity","State":"closed","Body":"sched_getaffinity is documented to return the process affinity\r\nwhen called with pid zero. However, this is actually\r\nreturning the current thread affinity.\r\n\r\nCC @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/24802","RelatedDescription":"Closed or merged PR \"sched_getaffinity: pass getpid() to get process affinity\" (#24802)"},{"Id":"449150770","IsPullRequest":false,"CreatedAt":"2019-05-28T09:06:56","Actor":"AriNuer","Number":"24799","RawContent":null,"Title":"Test failure: Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_/_SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd","State":"open","Body":"The test `Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_/_SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd` has failed.\r\n\r\nFailure Message:\r\n```\r\n\\r\r\ncmdLine:C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest\\\\ReleaseHandleTest.cmd Timed Out\\r\r\n\\r\r\nReturn code:      -100\\r\r\nRaw output file:      C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\Reports\\\\Interop.PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest\\\\ReleaseHandleTest.output.txt\\r\r\nRaw output:\\r\r\nBEGIN EXECUTION\\r\r\n        1 file(s) copied.\\r\r\n\\\" C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Payload\\\\crossgen.exe\\\"  /Platform_Assemblies_Paths C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Payload;C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest\\\\IL;C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest /in ReleaseHandleTest.org /out ReleaseHandleTest.exe\\r\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\\r\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\\r\r\n\\r\r\nNative image ReleaseHandleTest.exe generated successfully.\\r\r\n \\\"C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Payload\\\\corerun.exe\\\" ReleaseHandleTest.exe \\r\r\nSHReleasing_OutParams\\r\r\n\\tForcing finalizer for the SFH param to run...\\r\r\n\\r\r\ncmdLine:C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest\\\\ReleaseHandleTest.cmd Timed Out\\r\r\nTest Harness Exitcode is : -100\\r\r\nTo run the test:\\r\r\n> set CORE_ROOT=C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Payload\\r\r\n> C:\\\\work\\\\8c135cdc-cd3f-41a7-bc88-6d728ee5c692\\\\Work\\\\c613fa07-fe53-4d9c-acac-fc58e8554465\\\\Exec\\\\Interop\\\\PInvoke\\\\SafeHandles\\\\ReleaseHandle\\\\ReleaseHandleTest\\\\ReleaseHandleTest.cmd\\r\r\nExpected: True\\r\r\nActual:   False\r\n```\r\n\r\nStack Trace:\r\n```\r\n   at Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd() in F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Interop.PInvoke\\Interop.PInvoke.XUnitWrapper.cs:line 7787\r\n```\r\n\r\nBuild : Master - 20190527.72 (Ready-To-Run Tests)\r\nFailing configurations:\r\n- Windows.10.Nano.Amd64\r\n  - x64\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190527.72/workItem/Interop/analysis/xunit/Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_~2F_SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd","Url":"https://github.com/dotnet/coreclr/issues/24799","RelatedDescription":"Open issue \"Test failure: Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_/_SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\" (#24799)"},{"Id":"449060998","IsPullRequest":true,"CreatedAt":"2019-05-28T04:39:29","Actor":"changhee","Number":"24796","RawContent":null,"Title":"Added an overflow check for the S_SIZE_T value","State":"open","Body":"I added an overflow check for the S_SIZE_T value using S_SIZE_T.IsOverflow().\r\n\r\nAt the old code, the overflow check is being done by 'assert' which works only in debug mode. \r\n\r\nI found other 46 occurrence of S_SIZE_T values checks overflow using S_SIZE_T.IsOverflow() before accessing S_SIZE_T.value().\r\n\r\nFor example, the following code snippet in \"src/zap/zapcode.cpp' shows such case: \r\n\r\n1069:    S_SIZE_T cbAllocSize = S_SIZE_T(sizeof(ZapGCInfo)) + S_SIZE_T(cbGCInfo) + S_SIZE_T(cbUnwindInfo);\r\n1070:    if(cbAllocSize.IsOverflow())\r\n1071:        ThrowHR(COR_E_OVERFLOW);\r\n1072:\r\n1073:    void * pMemory = new (pWriter->GetHeap()) BYTE[cbAllocSize.Value()];","Url":"https://github.com/dotnet/coreclr/pull/24796","RelatedDescription":"Open PR \"Added an overflow check for the S_SIZE_T value\" (#24796)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"449562075","IsPullRequest":false,"CreatedAt":"2019-05-29T02:00:48","Actor":"ccic","Number":"11433","RawContent":null,"Title":"dotnet core 3.0 (master nightly build) restore fails on Ubuntu for invalid certificate","State":"open","Body":"## Steps to reproduce\r\nInstall dotnet core nightly build 3.0.100-preview6-012026 on Ubuntu 16.04.4 LTS.\r\n\"OpenSSL 1.0.2g  1 Mar 2016\" or \"OpenSSL 1.1.1  11 Sep 2018\"\r\n\r\nCreate a new webapp project through dotnet cli:\r\n\r\ndotnet new webapp -n WebApp1 -o WebApp1\r\n\r\nThe template \"ASP.NET Core Web App\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on WebApp1/WebApp1.csproj...\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The SSL connection could not be established, see inner exception. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n/home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/NuGet.targets(123,5): error :   The remote certificate is invalid according to the validation procedure. [/home/hongjiang/CodeTest/C#/WebApp1/WebApp1.csproj]\r\n\r\nRestore failed.\r\nPost action failed.\r\nDescription: Restore NuGet packages required by this project.\r\nManual instructions: Run 'dotnet restore'\r\n\r\nGo to WebApp1 and run \"dotnet restore -v diag\" and get the following errors:\r\n\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json. ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\r\n                        at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n                        at System.Net.Security.SslStream.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n                     --- End of stack trace from previous location where exception was thrown ---\r\n                        at System.Net.Security.SslStream.ThrowIfExceptional()\r\n                        at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n                        at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n                        at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n                        at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__65_1(IAsyncResult iar)\r\n                        at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012026\r\n Commit:    8f2806e85e\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/hongjiang/.dotnet-nightly/sdk/3.0.100-preview6-012026/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27720-04\r\n  Commit:  cdfc67fd8e\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview6-012026 [/home/hongjiang/.dotnet-nightly/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19270-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27720-04 [/home/hongjiang/.dotnet-nightly/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11433","RelatedDescription":"Open issue \"dotnet core 3.0 (master nightly build) restore fails on Ubuntu for invalid certificate\" (#11433)"},{"Id":"449487340","IsPullRequest":true,"CreatedAt":"2019-05-28T21:31:51","Actor":"livarcocc","Number":"11432","RawContent":null,"Title":"Update SDK to 2.2.200-preview-64128-03","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11432","RelatedDescription":"Open PR \"Update SDK to 2.2.200-preview-64128-03\" (#11432)"},{"Id":"449486880","IsPullRequest":true,"CreatedAt":"2019-05-28T21:30:39","Actor":"livarcocc","Number":"11431","RawContent":null,"Title":"Update SDK to 2.1.600-preview-64128-02","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11431","RelatedDescription":"Open PR \"Update SDK to 2.1.600-preview-64128-02\" (#11431)"},{"Id":"449483403","IsPullRequest":false,"CreatedAt":"2019-05-28T21:21:37","Actor":"spboyer","Number":"11430","RawContent":null,"Title":"add deploy as a first class command","State":"open","Body":"Consider adding `deploy` as a first-class command.  Adding this command as an option to deploy to azure, or even other cloud platforms within the CLI helps push .NET Core without having to install additional CLI tooling.\r\n\r\nSee: https://github.com/spboyer/dotnet-azure for an example.\r\n\r\nAngular has also added this an option using `ng deploy azure` within their CLI.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11430","RelatedDescription":"Open issue \"add deploy as a first class command\" (#11430)"},{"Id":"448458604","IsPullRequest":true,"CreatedAt":"2019-05-28T17:27:41","Actor":"dotnet-maestro[bot]","Number":"11427","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190524.2\r\n- **Date Produced**: 5/25/2019 5:39 AM\r\n- **Commit**: 8f80c53ce0521cebc2b9aaf0cb62dc15884e6093\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19274.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11427","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11427)"},{"Id":"447956016","IsPullRequest":true,"CreatedAt":"2019-05-28T17:18:07","Actor":"johnbeisner","Number":"11418","RawContent":null,"Title":"Adding installation script tests","State":"closed","Body":"When we materially change the way the installation scripts install the SDK for 3.0 and beyond - these tests, and the ability to add more installation script tests, will assist with development. \r\n","Url":"https://github.com/dotnet/cli/pull/11418","RelatedDescription":"Closed or merged PR \"Adding installation script tests\" (#11418)"},{"Id":"448993836","IsPullRequest":false,"CreatedAt":"2019-05-27T21:22:44","Actor":"masaeedu","Number":"11429","RawContent":null,"Title":"Add command to list files that are part of the solution","State":"open","Body":"Hello. I think it would be useful if the `dotnet` CLI exposed some command to list all of the files that are considered part of the build (project files, source code, resource files, hardcoded DLLs, etc.). This would facilitate use of .NET code with build and deployment tools like Docker and Nix, which rely on being able to discover an exhaustive list of build inputs ahead of time.\r\n\r\nI'm not sure whether this issue is more suited here or in msbuild or somwhere, please feel free to redirect me.\r\n\r\nThanks.","Url":"https://github.com/dotnet/cli/issues/11429","RelatedDescription":"Open issue \"Add command to list files that are part of the solution\" (#11429)"},{"Id":"448459092","IsPullRequest":true,"CreatedAt":"2019-05-25T12:53:50","Actor":"dotnet-maestro[bot]","Number":"11428","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190524.1\r\n- **Date Produced**: 5/24/2019 2:08 PM\r\n- **Commit**: 6d694be84d6e88ffa4d611cc4e22058cf9359255\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19274.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11428","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11428)"},{"Id":"448458576","IsPullRequest":true,"CreatedAt":"2019-05-25T12:37:35","Actor":"dotnet-maestro[bot]","Number":"11426","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190524.6\r\n- **Date Produced**: 5/24/2019 11:03 PM\r\n- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19274.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11426","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11426)"},{"Id":"448138844","IsPullRequest":true,"CreatedAt":"2019-05-25T12:13:05","Actor":"dotnet-maestro[bot]","Number":"11423","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190523.1\r\n- **Date Produced**: 5/23/2019 1:43 PM\r\n- **Commit**: 85e3fa5110534271f70a16d52689f8cb8b517ba4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19273.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11423)"},{"Id":"447968434","IsPullRequest":true,"CreatedAt":"2019-05-25T00:55:30","Actor":"peterhuene","Number":"11419","RawContent":null,"Title":"Remove using the explicit Build target with `dotnet build`.","State":"closed","Body":"This commit prevents the `dotnet build` command from always passing the\r\n`/t:Build` option to MSBuild.\r\n\r\nUsers expect `dotnet build /t:<target>` to work like MSBuild does.  However,\r\nbecause `dotnet build` was implicitly adding `/t:Build`, instead of only the\r\nuser's target being run, the `Build` target runs first and then the user's\r\ntarget runs.\r\n\r\nThis change makes the `dotnet build` command more consistent with\r\n`dotnet msbuild` and desktop MSBuild.\r\n\r\nNote: this is a breaking change, although it only impacts projects that do not\r\nuse `Build` as the default target, which will now be the target invoked by\r\n`dotnet build`.  The workaround for those projects would be to pass `/t:Build`\r\nto `dotnet build` to restore the previous behavior.\r\n\r\nFixes #4815.","Url":"https://github.com/dotnet/cli/pull/11419","RelatedDescription":"Closed or merged PR \"Remove using the explicit Build target with `dotnet build`.\" (#11419)"},{"Id":"448356958","IsPullRequest":false,"CreatedAt":"2019-05-24T21:19:04","Actor":"dsplaisted","Number":"11425","RawContent":null,"Title":"Windows Forms and WPF project templates should not show up if current OS isn't Windows","State":"open","Body":"We are not planning to support building Windows Forms and WPF projects on non-Windows operating systems (at least for now): #10842 \r\n\r\nGiven that, we should not include the `winforms` and `wpf` project templates for non-Windows builds of the .NET Core SDK.\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11425","RelatedDescription":"Open issue \"Windows Forms and WPF project templates should not show up if current OS isn't Windows\" (#11425)"},{"Id":"448316236","IsPullRequest":false,"CreatedAt":"2019-05-24T19:10:10","Actor":"peterhuene","Number":"11424","RawContent":null,"Title":"Implement an option for restore/build/publish commands that disable build servers.","State":"open","Body":"## Steps to reproduce\r\n\r\nSee discussion on https://github.com/dotnet/cli/issues/9481.\r\n\r\n1) `dotnet new console`\r\n2) `dotnet build`\r\n\r\n## Expected  behavior\r\n\r\nThere should be an option to `dotnet build` (and other building commands) to disable the use of the various build servers (Roslyn, MSBuild node reuse, Razor).\r\n\r\n## Actual behavior\r\n\r\nUsers have to pass a plethora of undiscoverable properties and options to fully disable the use of the build servers, which might be helpful for CI scenarios.\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview5-011568/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011568 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11424","RelatedDescription":"Open issue \"Implement an option for restore/build/publish commands that disable build servers.\" (#11424)"},{"Id":"447435416","IsPullRequest":true,"CreatedAt":"2019-05-24T16:55:21","Actor":"scottaddie","Number":"11411","RawContent":null,"Title":"Remove ef command from help output","State":"closed","Body":"The `dotnet ef` command was removed from the .NET Core SDK as of 3.0 Preview 4 (per https://docs.microsoft.com/ef/core/what-is-new/ef-core-3.0/breaking-changes#the-ef-core-command-line-tool-dotnet-ef-is-no-longer-part-of-the-net-core-sdk). This PR removes `ef` from the `dotnet --help` output. It also removes 2 related tests.\r\n\r\nRelated to the discussion in https://github.com/aspnet/EntityFrameworkCore/issues/14016.","Url":"https://github.com/dotnet/cli/pull/11411","RelatedDescription":"Closed or merged PR \"Remove ef command from help output\" (#11411)"},{"Id":"447922399","IsPullRequest":true,"CreatedAt":"2019-05-24T16:55:03","Actor":"dotnet-bot","Number":"11417","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11417","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11417)"},{"Id":"447922389","IsPullRequest":true,"CreatedAt":"2019-05-24T16:54:42","Actor":"dotnet-bot","Number":"11416","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11416","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11416)"},{"Id":"448127645","IsPullRequest":false,"CreatedAt":"2019-05-24T16:53:51","Actor":"ruimaciel","Number":"11421","RawContent":null,"Title":"Dotnet test hangs when running on a multi-project solution","State":"closed","Body":"I've just upgraded to dotnet 2.2.300 and since the upgrade I've started experiencing a problem running unit tests.  \r\n\r\nI have multi-project solutions which store all unit tests in a dedicated subfolder, and when I run `dotnet test` in the solution directory the test project hangs with the following output:\r\n\r\n```\r\nram@localhost:~/development/Foo$ dotnet test\r\nTest run for /home/ram/development/Foo/tests/Foo.Core.Domain.Tests/bin/Debug/netcoreapp2.2/Foo.Core.Domain.Tests.dll(.NETCoreApp,Version=v2.2)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.1.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nTest run for /home/ram/development/Foo/tests/Foo.Core.Application.Tests/bin/Debug/netcoreapp2.2/Foo.Core.Application.Tests.dll(.NETCoreApp,Version=v2.2)\r\nStarting test execution, please wait...\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.1.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nTest run for /home/ram/development/Foo/tests/Foo.Core.MassTransitInterface.Tests/bin/Debug/netcoreapp2.2/Foo.Core.MassTransitInterface.Tests.dll(.NETCoreApp,Version=v2.2)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.1.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nTest run in progress.\r\n```\r\n\r\nOddly enough, if I run `dotnet test` within the directory of each unit test, everything works as expected.\r\n\r\nHere's the output of `dotnet --info`:\r\n```\r\nram@localhost:~$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.2.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11421","RelatedDescription":"Closed issue \"Dotnet test hangs when running on a multi-project solution\" (#11421)"},{"Id":"448079095","IsPullRequest":false,"CreatedAt":"2019-05-24T16:52:57","Actor":"VanCoding","Number":"11420","RawContent":null,"Title":"dotnet does not find latest patch version of SDK specified in global.json","State":"closed","Body":"## Steps to reproduce\r\n- Install latest SDK version (2.2.204 in my casse)\r\n- Install SDK version 2.1.300\r\n- in global.json set sdk.version to 2.1.0\r\n- try to dotnet restore the project.\r\n\r\n## Expected  behavior\r\nAll dependencies get installed.\r\n\r\n## Actual behavior\r\nI get an error message, stating \"A compatible SDK version for global.json version: [2.1.0] from [...] was not found.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nA compatible SDK version for global.json version: [2.1.0] from [...] was not found\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n## notes\r\nAccording to https://docs.microsoft.com/en-us/dotnet/core/tools/global-json#matching-rules, when dotnet does not find the exact sdk version specified in global.json, it should use the latest patch version instead (which would be 2.1.700 in my case, or 2.1.300 when just following the mentioned steps above). But it does not do that, so I think either the docs are wrong, or there is a bug.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11420","RelatedDescription":"Closed issue \"dotnet does not find latest patch version of SDK specified in global.json\" (#11420)"},{"Id":"448136249","IsPullRequest":true,"CreatedAt":"2019-05-24T12:43:27","Actor":"dotnet-maestro[bot]","Number":"11422","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190523.1\r\n- **Date Produced**: 5/23/2019 6:42 PM\r\n- **Commit**: 1dad323a93dd6a49d3732060b29e9ed0052dbbb1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19273.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11422)"},{"Id":"447621711","IsPullRequest":true,"CreatedAt":"2019-05-24T12:42:59","Actor":"dotnet-maestro[bot]","Number":"11413","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190522.13\r\n- **Date Produced**: 5/23/2019 1:51 AM\r\n- **Commit**: 86e674361bdcefecbd8199ab62d0b1a6cb25703d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19272.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190523.11\r\n- **Date Produced**: 5/24/2019 5:52 AM\r\n- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19273.11\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11413","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11413)"},{"Id":"447339998","IsPullRequest":true,"CreatedAt":"2019-05-23T20:00:59","Actor":"livarcocc","Number":"11404","RawContent":null,"Title":"Update NuGet to 5.2.0-preview2.6020","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11404","RelatedDescription":"Closed or merged PR \"Update NuGet to 5.2.0-preview2.6020\" (#11404)"},{"Id":"447578329","IsPullRequest":false,"CreatedAt":"2019-05-23T17:52:27","Actor":"wmorian","Number":"11412","RawContent":null,"Title":"dotnet-list-package in a UnitTest project returns an error","State":"closed","Body":"## Steps to reproduce\r\ncreate a new xunit project:\r\n  `dotnet new xunit`\r\n\r\nThe referenced packages are:\r\n```xml \r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.0.1\" />\r\n    <PackageReference Include=\"xunit\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.0\" />\r\n</ItemGroup>\r\n```\r\n\r\nrestore project:\r\n`dotnet restore`\r\n\r\nlist all packages\r\n`dotnet list package`\r\n\r\n\r\n## Expected  behavior\r\n```\r\nλ  dotnet list package\r\nProject 'ListPackageUnitTest' has the following package references\r\n   [netcoreapp2.2]:\r\n   Top-level Package                   Requested   Resolved\r\n   > Microsoft.NETCore.App       (A)   [2.2.0, )   2.2.0\r\n   > xunit                             2.4.0       2.4.0\r\n   > xunit.runner.visualstudio         2.4.0       2.4.0\r\n```\r\n\r\n## Actual behavior\r\n```\r\nλ  dotnet list package\r\nerror: Sequence contains more than one element\r\n```\r\n\r\n## Note\r\nIf I comment out Microsoft.NET.Test.Sdk, then I got no error!\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nλ  dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11412","RelatedDescription":"Closed issue \"dotnet-list-package in a UnitTest project returns an error\" (#11412)"},{"Id":"447625683","IsPullRequest":true,"CreatedAt":"2019-05-23T12:50:09","Actor":"dotnet-maestro[bot]","Number":"11415","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190522.1\r\n- **Date Produced**: 5/22/2019 1:26 PM\r\n- **Commit**: 18ccbe7678012c2001b13fc8838b87044eb82dc7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19272.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11415","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11415)"},{"Id":"447621995","IsPullRequest":true,"CreatedAt":"2019-05-23T12:43:34","Actor":"dotnet-maestro[bot]","Number":"11414","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190522.2\r\n- **Date Produced**: 5/22/2019 10:35 PM\r\n- **Commit**: adc956024076713234e69d41a11b0253fdfd90f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19272.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11414","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11414)"},{"Id":"447397296","IsPullRequest":false,"CreatedAt":"2019-05-23T00:26:23","Actor":"dsplaisted","Number":"11410","RawContent":null,"Title":"Fail gracefully when building on non-Windows and WindowsDesktop shared framework is referenced","State":"open","Body":"For the 3.0 release, we plan to not support building Windows Forms and WPF apps on non-Windows operating systems.  (We may consider supporting it later, see for example https://github.com/dotnet/wpf/issues/688).\r\n\r\nMost WPF apps will use Microsoft.NET.Sdk.WindowsDesktop, and the experience for that on non-Windows is covered here: https://github.com/dotnet/cli/issues/10842\r\n\r\nHowever, some projects may not use the WindowsDesktop SDK, but will still have a WindowsDesktop FrameworkReference (either explicitly or via a PackageReference).  In that case, we should also fail gracefully.  This means:\r\n\r\n- On non-Windows, don't pre-emptively download WindowsDesktop targeting or runtime packs (which we normally do in case we encounter a transitive FrameworkReference)\r\n- When we encounter a WindowsDesktop FrameworkReference on non-Windows, generate an error message stating that the project can only be built on Windows (instead of the generic error message).","Url":"https://github.com/dotnet/cli/issues/11410","RelatedDescription":"Open issue \"Fail gracefully when building on non-Windows and WindowsDesktop shared framework is referenced\" (#11410)"},{"Id":"447395763","IsPullRequest":true,"CreatedAt":"2019-05-23T00:18:14","Actor":"KevinRansom","Number":"11409","RawContent":null,"Title":"Update nunit test dependencies","State":"open","Body":"update nunit template","Url":"https://github.com/dotnet/cli/pull/11409","RelatedDescription":"Open PR \"Update nunit test dependencies\" (#11409)"},{"Id":"447372742","IsPullRequest":true,"CreatedAt":"2019-05-22T23:17:03","Actor":"dotnet-maestro[bot]","Number":"11407","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190521.7\r\n- **Date Produced**: 5/22/2019 1:45 AM\r\n- **Commit**: 7a6fb6528b2060cd9e3a3d92535f5b6fdc6b2e82\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19271.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11407","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#11407)"},{"Id":"447357917","IsPullRequest":true,"CreatedAt":"2019-05-22T23:17:02","Actor":"wli3","Number":"11405","RawContent":null,"Title":"Change to find current muxer","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/11380 more discussion in the issue\r\n\r\nWhy we essentially move back to the original implementation in https://github.com/dotnet/cli/issues/2489 ?\r\n\r\nIt is more relate to the usage of corehost [CoreHost.cs](https://github.com/dotnet/cli/blob/342cf7949037a17f4bf18a59faf6fcff6a4d25b1/src/Microsoft.DotNet.Cli.Utils/CoreHost.cs)\r\n\r\nMuxer share the same logic with Muxer.GetDataFromAppDomain, by the time majority of the logic of [Publish](https://github.com/dotnet/cli/blob/342cf7949037a17f4bf18a59faf6fcff6a4d25b1/src/dotnet/commands/dotnet-publish/PublishCommand.cs) is in CLI and it need corehost to find correct asset location.\r\n\r\nAs part of the work. It changed to the current way of finding FX location. But I believe it was a mistake to assume dotnet.exe will be in the parent directory (we did not count multi level loop up in). Since there is no more corehost.cs and publish is in SDK. We should use the simple and correct solution.\r\n\r\nTryResolverMuxerFromPath is used when it was a separate library. And self contain app can get result from it. But it is also no longer needed.\r\n","Url":"https://github.com/dotnet/cli/pull/11405","RelatedDescription":"Closed or merged PR \"Change to find current muxer\" (#11405)"},{"Id":"447374440","IsPullRequest":true,"CreatedAt":"2019-05-22T22:46:37","Actor":"wli3","Number":"11408","RawContent":null,"Title":"Update arcade script","State":"closed","Body":"I need https://github.com/dotnet/arcade/pull/2836 to get in CLI.\r\n\r\nI just did a manual copy paste.\r\n","Url":"https://github.com/dotnet/cli/pull/11408","RelatedDescription":"Closed or merged PR \"Update arcade script\" (#11408)"},{"Id":"447360056","IsPullRequest":false,"CreatedAt":"2019-05-22T22:23:50","Actor":"wli3","Number":"11406","RawContent":null,"Title":"DotNetCoreInstaller@1` task failed with non-zero exit code when switch to 1","State":"closed","Body":"From @AArnott \r\n\r\nActually, [my PR to switch to use `UseDotNet@2`](https://github.com/microsoft/vs-streamjsonrpc/pull/283) can't complete because 3 PR builds in a row have failed in the `dotnet test` step. [All tests pass, but `dotnet.exe` returns a nonzero exit code](https://dev.azure.com/azure-public/vside/_build/results?buildId=6240&view=logs&jobId=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&taskId=ea74d3ec-af51-57bf-65e6-f50dd234a1e5&lineStart=1163&lineEnd=1177&colStart=1&colEnd=1).\r\n\r\n```\r\n\r\nTotal tests: 246. Passed: 246. Failed: 0. Skipped: 0.\r\nTest Run Successful.\r\nTest execution time: 10.1186 Seconds\r\n     1>Done Building Project \"d:\\a\\1\\s\\src\\StreamJsonRpc.Tests\\StreamJsonRpc.Tests.csproj\" (VSTest target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:22.63\r\n##[error]Error: The process 'C:\\hostedtoolcache\\windows\\dotnet\\dotnet.exe' failed with exit code 1\r\n##[warning]Invalid results file. Make sure the result format of the file 'd:\\a\\_temp\\VssAdministrator_fv-az48_2019-05-22_04_51_17.trx' matches 'VSTest' test results format.\r\n##[error]Dotnet command failed with non-zero exit code on the following projects : d:\\a\\1\\s\\src\\StreamJsonRpc.Tests\\StreamJsonRpc.Tests.csproj\r\n```\r\n\r\nAs you can see it also emits a warning about the .trx file. None of this happens when I use the `DotNetCoreInstaller@0` task. I wonder why in the world switching installer tasks would cause this problem. ","Url":"https://github.com/dotnet/cli/issues/11406","RelatedDescription":"Closed issue \"DotNetCoreInstaller@1` task failed with non-zero exit code when switch to 1\" (#11406)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"449369049","IsPullRequest":false,"CreatedAt":"2019-05-28T16:35:35","Actor":"llolic","Number":"1214","RawContent":null,"Title":"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.","State":"open","Body":"I am getting \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.'\"\r\nI have made an application in vs 2019 that currently just has a textbox, a textblock, and a button. When I run it, the error is shown for the following line: \"rootFrame.Navigate(typeof(MainPage), e.Arguments);\"\r\n\r\nDoes anyone know how to fix this error?","Url":"https://github.com/dotnet/standard/issues/1214","RelatedDescription":"Open issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\" (#1214)"},{"Id":"449247865","IsPullRequest":true,"CreatedAt":"2019-05-28T12:54:12","Actor":"dotnet-maestro[bot]","Number":"1213","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190527.2\r\n- **Date Produced**: 5/27/2019 11:45 PM\r\n- **Commit**: d58a8ade31b4731759c92df00d0f6398c52f3d83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19277.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19277.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1213","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1213)"},{"Id":"448751215","IsPullRequest":false,"CreatedAt":"2019-05-27T09:16:48","Actor":"KexyBiscuit","Number":"1212","RawContent":null,"Title":"NETSDK1073 occurs on netcoreapp3.0 projects","State":"open","Body":"```\r\n>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012085\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(194,5): error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\r\n```\r\n\r\n```\r\n<TargetFramework>netcoreapp3.0</TargetFramework>\r\n\r\n<ItemGroup>\r\n  <PackageReference Include=\"System.Text.Encoding.CodePages\" Version=\"4.6.0-preview5.19224.8\" /> <!--It doesn't matter what's referenced-->\r\n</ItemGroup>\r\n```","Url":"https://github.com/dotnet/standard/issues/1212","RelatedDescription":"Open issue \"NETSDK1073 occurs on netcoreapp3.0 projects\" (#1212)"},{"Id":"444869749","IsPullRequest":false,"CreatedAt":"2019-05-27T09:14:11","Actor":"KexyBiscuit","Number":"1194","RawContent":null,"Title":"Is ValueTask<> missing in latest NetStandard?","State":"closed","Body":"```\r\nerror CS0012: The type 'ValueTask<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nMight be related to #1180?\r\n\r\n```\r\n> dotnet --version\r\n3.0.100-preview6-011910\r\n```\r\n\r\n```\r\n<TargetFramework>netstandard2.1</TargetFramework>\r\n<NetStandardImplicitPackageVersion>2.1.0-prerelease.19265.2</NetStandardImplicitPackageVersion>\r\n```","Url":"https://github.com/dotnet/standard/issues/1194","RelatedDescription":"Closed issue \"Is ValueTask<> missing in latest NetStandard?\" (#1194)"},{"Id":"443632814","IsPullRequest":false,"CreatedAt":"2019-05-26T20:42:19","Actor":"yangsong2828","Number":"1190","RawContent":null,"Title":"HttpModule with Microsoft.AspNetCore.Http","State":"closed","Body":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks.","Url":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Closed issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190)"},{"Id":"448462812","IsPullRequest":true,"CreatedAt":"2019-05-25T13:11:36","Actor":"dotnet-maestro[bot]","Number":"1211","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190524.8\r\n- **Date Produced**: 5/25/2019 8:10 AM\r\n- **Commit**: ca535178383c526a0eb7a00f7ff6df36e0af1ea1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19274.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19274.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19274.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1211","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1211)"},{"Id":"448458458","IsPullRequest":true,"CreatedAt":"2019-05-25T12:20:56","Actor":"dotnet-maestro[bot]","Number":"1210","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190524.6\r\n- **Date Produced**: 5/24/2019 11:03 PM\r\n- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19274.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19274.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1210","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1210)"},{"Id":"448225868","IsPullRequest":false,"CreatedAt":"2019-05-24T15:20:02","Actor":"dagood","Number":"1209","RawContent":null,"Title":"Build netstandard targeting pack assets in dotnet/standard, not dotnet/core-setup","State":"open","Body":"(See https://github.com/dotnet/standard/issues/1106)\r\n\r\nThe netstandard targeting pack may not version completely in sync with .NET Core Runtime, so producing it in Core-Setup via a transport package is not ideal. These artifacts should be produced in dotnet/standard itself.\r\n\r\nI don't think it makes sense to work on this until targeting pack infra is shared. (https://github.com/dotnet/core-setup/issues/4773)","Url":"https://github.com/dotnet/standard/issues/1209","RelatedDescription":"Open issue \"Build netstandard targeting pack assets in dotnet/standard, not dotnet/core-setup\" (#1209)"},{"Id":"448158285","IsPullRequest":true,"CreatedAt":"2019-05-24T13:09:47","Actor":"dotnet-maestro[bot]","Number":"1208","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190523.8\r\n- **Date Produced**: 5/24/2019 7:26 AM\r\n- **Commit**: c539d6c627b169d45f0b4cf1826b560cd0862abe\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19273.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19273.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19273.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1208","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1208)"},{"Id":"448135323","IsPullRequest":true,"CreatedAt":"2019-05-24T12:21:08","Actor":"dotnet-maestro[bot]","Number":"1207","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190523.11\r\n- **Date Produced**: 5/24/2019 5:52 AM\r\n- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19273.11\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19273.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1207","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1207)"},{"Id":"447649294","IsPullRequest":true,"CreatedAt":"2019-05-23T13:11:12","Actor":"dotnet-maestro[bot]","Number":"1206","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190522.8\r\n- **Date Produced**: 5/23/2019 6:40 AM\r\n- **Commit**: daa005b23d4954d4a41b1663171d6ada2d960bd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19272.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19272.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19272.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1206","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1206)"},{"Id":"447620634","IsPullRequest":true,"CreatedAt":"2019-05-23T12:15:47","Actor":"dotnet-maestro[bot]","Number":"1205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190522.13\r\n- **Date Produced**: 5/23/2019 1:51 AM\r\n- **Commit**: 86e674361bdcefecbd8199ab62d0b1a6cb25703d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19272.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19272.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1205","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1205)"},{"Id":"444399962","IsPullRequest":true,"CreatedAt":"2019-05-22T19:20:47","Actor":"dotnet-maestro[bot]","Number":"1192","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 1:26 PM\r\n- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190521.7\r\n- **Date Produced**: 5/22/2019 1:45 AM\r\n- **Commit**: 7a6fb6528b2060cd9e3a3d92535f5b6fdc6b2e82\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19271.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19271.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1192","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1192)"},{"Id":"447122667","IsPullRequest":true,"CreatedAt":"2019-05-22T13:15:56","Actor":"dotnet-maestro[bot]","Number":"1204","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.9\r\n- **Date Produced**: 5/22/2019 6:10 AM\r\n- **Commit**: b9b357f9a5a6ccf6a70c2e13b5a7d84a3ed1a684\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1204","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1204)"},{"Id":"445645996","IsPullRequest":true,"CreatedAt":"2019-05-21T22:04:59","Actor":"terrajobst","Number":"1198","RawContent":null,"Title":"Add missing members to MemoryMarshal","State":"closed","Body":"This fixes #1193.","Url":"https://github.com/dotnet/standard/pull/1198","RelatedDescription":"Closed or merged PR \"Add missing members to MemoryMarshal\" (#1198)"},{"Id":"444621714","IsPullRequest":false,"CreatedAt":"2019-05-21T22:04:59","Actor":"wtgodbe","Number":"1193","RawContent":null,"Title":"Fix APICompat issues with netstandard2.0 System.Memory","State":"closed","Body":"After adding a shim for `System.Memory` to netstandard2.1, we uncovered an incompatibility with netstandard2.0:\r\n\r\nhttps://github.com/dotnet/standard/blob/d3413ee9ec761bdf067114a498b9da3ebf0149df/src/apicompat/baselines/ApiCompatBaseline.netstandard2.0.txt#L72-L74\r\n\r\nIndeed, these members exist in CoreFx's ref, but are missing in Standard:  https://github.com/dotnet/corefx/blob/1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14/src/System.Memory/ref/System.Memory.cs#L471\r\n\r\n@terrajobst we should add these missing members to the surface area for `netstandard2.1`","Url":"https://github.com/dotnet/standard/issues/1193","RelatedDescription":"Closed issue \"Fix APICompat issues with netstandard2.0 System.Memory\" (#1193)"},{"Id":"446749048","IsPullRequest":true,"CreatedAt":"2019-05-21T19:26:08","Actor":"ericstj","Number":"1203","RawContent":null,"Title":"Fix public key of ns2.0 shims","State":"closed","Body":"System.Buffers, System.Memory, and System.Threading.Tasks.Extensions all use\r\nthe open key.  Ensure we use the same key here.","Url":"https://github.com/dotnet/standard/pull/1203","RelatedDescription":"Closed or merged PR \"Fix public key of ns2.0 shims\" (#1203)"},{"Id":"446608759","IsPullRequest":true,"CreatedAt":"2019-05-21T14:48:22","Actor":"dotnet-maestro[bot]","Number":"1202","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1202)"},{"Id":"445640404","IsPullRequest":true,"CreatedAt":"2019-05-20T20:27:35","Actor":"terrajobst","Number":"1197","RawContent":null,"Title":"Add asymmetric key import/export APIs","State":"closed","Body":"This fixes #1178.","Url":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Closed or merged PR \"Add asymmetric key import/export APIs\" (#1197)"},{"Id":"445635400","IsPullRequest":true,"CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Number":"1196","RawContent":null,"Title":"Enable C# mode command line diff","State":"closed","Body":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```","Url":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Closed or merged PR \"Enable C# mode command line diff\" (#1196)"},{"Id":"446103850","IsPullRequest":true,"CreatedAt":"2019-05-20T13:38:53","Actor":"dotnet-maestro[bot]","Number":"1201","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1201)"},{"Id":"445816606","IsPullRequest":true,"CreatedAt":"2019-05-19T13:14:40","Actor":"dotnet-maestro[bot]","Number":"1200","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1200)"},{"Id":"445713531","IsPullRequest":true,"CreatedAt":"2019-05-18T13:13:40","Actor":"dotnet-maestro[bot]","Number":"1199","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1199)"},{"Id":"445427447","IsPullRequest":true,"CreatedAt":"2019-05-17T14:02:55","Actor":"dotnet-maestro[bot]","Number":"1195","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190516.12\r\n- **Date Produced**: 5/17/2019 8:31 AM\r\n- **Commit**: 6f9570e012054bf407778c0b07632e7733ecbb13\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19266.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1195)"},{"Id":"442864446","IsPullRequest":true,"CreatedAt":"2019-05-14T17:23:33","Actor":"wtgodbe","Number":"1185","RawContent":null,"Title":"Fail CI build if APICompat baseline files would change","State":"closed","Body":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL","Url":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Closed or merged PR \"Fail CI build if APICompat baseline files would change\" (#1185)"},{"Id":"443876288","IsPullRequest":true,"CreatedAt":"2019-05-14T12:39:27","Actor":"dotnet-maestro[bot]","Number":"1191","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1191)"},{"Id":"443629557","IsPullRequest":true,"CreatedAt":"2019-05-14T00:00:25","Actor":"JohnTortugo","Number":"1189","RawContent":null,"Title":"Update azure-pipelines.yml","State":"closed","Body":"Related to: https://github.com/dotnet/core-eng/issues/6291","Url":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Closed or merged PR \"Update azure-pipelines.yml\" (#1189)"},{"Id":"443361033","IsPullRequest":true,"CreatedAt":"2019-05-13T12:19:21","Actor":"dotnet-maestro[bot]","Number":"1188","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1188)"},{"Id":"443096722","IsPullRequest":true,"CreatedAt":"2019-05-12T12:18:57","Actor":"dotnet-maestro[bot]","Number":"1187","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1187","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1187)"},{"Id":"442986105","IsPullRequest":true,"CreatedAt":"2019-05-11T12:28:56","Actor":"dotnet-maestro[bot]","Number":"1186","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1186","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1186)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"449589471","IsPullRequest":true,"CreatedAt":"2019-05-29T04:14:56","Actor":"wfurt","Number":"38009","RawContent":null,"Title":"improve reliability of HttpListenerFactory by verifying that Connect works","State":"open","Body":"This is attempt to improve reliability by verifying that we can connect and listener is ready. That should hopefully avoid random Connection refused errors.  \r\nIf the errors will keep showing up, it would be sign that listener was stopped/disposed and the issue is not startup race condition. I could not reproduce the failures locally even with few thousand runs so time will tell if this help. \r\n\r\nrelated to #37806","Url":"https://github.com/dotnet/corefx/pull/38009","RelatedDescription":"Open PR \"improve reliability of HttpListenerFactory by verifying that Connect works\" (#38009)"},{"Id":"449585234","IsPullRequest":false,"CreatedAt":"2019-05-29T03:52:49","Actor":"joshudson","Number":"38008","RawContent":null,"Title":"Net Core 3.0 bootstrap failure for c7d48ca","State":"open","Body":"Commit c7d48ca7732b7717e84d8375588d83866104ef58 builds a really broken corefx when using 3.0preview5 as the initial bootstrap source.\r\n\r\n    joshua@nova:~/netcore/corefxϟ uname -a\r\n    Linux nova 4.19.0-4-amd64 #1 SMP Debian 4.19.28-2 (2019-03-15) x86_64 GNU/Linux\r\n    joshua@nova:~/netcore/corefxϟPATH=/home/joshua/netcore/3.0preview5:$PATH ./build.sh -restore -build -buildtests -test\r\n\r\ngenerates hunderds of test failures of the form\r\n\r\n    <failure exception-type=\"System.TypeInitializationException\">\r\n          <message><![CDATA[System.TypeInitializationException : The type initializer for 'System.PlatformDetection' threw an exception.\\n---- System.FormatException : Input string was not in a correct format.]]></message>\r\n          <stack-trace><![CDATA[   at System.PlatformDetection.get_IsNonZeroLowerBoundArraySupported() in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.cs:line 119\r\n       at System.Text.RegularExpressions.Tests.GroupCollectionTests.ICollection_CopyTo_Invalid() in /home/joshua/netcore/corefx/src/System.Text.RegularExpressions/tests/GroupCollectionTests.cs:line 119\r\n    ----- Inner Stack Trace -----\r\n       at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type) in /_/src/System.Private.CoreLib/shared/System/Number.Parsing.cs:line 1929\r\n       at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info) in /_/src/System.Private.CoreLib/shared/System/Number.Parsing.cs:line 218\r\n       at System.Int32.Parse(String s) in /_/src/System.Private.CoreLib/shared/System/Int32.cs:line 107\r\n       at System.PlatformDetection.ToVersion(String versionString) in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.Unix.cs:line 165\r\n       at System.PlatformDetection..cctor() in /home/joshua/netcore/corefx/src/CoreFx.Private.TestUtilities/src/System/PlatformDetection.Unix.cs:line 84]]></stack-trace>\r\n        </failure>\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/38008","RelatedDescription":"Open issue \"Net Core 3.0 bootstrap failure for c7d48ca\" (#38008)"},{"Id":"449584341","IsPullRequest":false,"CreatedAt":"2019-05-29T03:48:15","Actor":"justinushermawan","Number":"38007","RawContent":null,"Title":"JsonSerializer support for ExpandoObject","State":"open","Body":"Does `JsonSerializer.Parse(String, Type, JsonSerializerOptions)` support for dynamic `ExpandoObject ` return type?\r\n\r\nSomething like this:\r\n`dynamic p = JsonSerializer.Parse(json, typeof(ExpandoObject));`","Url":"https://github.com/dotnet/corefx/issues/38007","RelatedDescription":"Open issue \"JsonSerializer support for ExpandoObject\" (#38007)"},{"Id":"449568021","IsPullRequest":false,"CreatedAt":"2019-05-29T02:01:02","Actor":"rfht","Number":"38006","RawContent":null,"Title":"How ignore bad comparer for backwards compatibility?","State":"open","Body":"I have this old assembly that shipped with mono v4 (the game Terraria, but that's besides the point) and when I try to run it with mono 5.x, it fails on start because of\r\n\r\n```\r\nSystem.ArgumentException: Unable to sort because the IComparer.Compare() method returns inconsistent results...\r\n```\r\n\r\nI found out that this is because it is triggered by `System.Collections.Generic.ArraySortHelper<T>.Sort` as found in https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs#L68 and after manually disabling (commenting out) the exception the program runs fine with corert in mono 5. The comment [here](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L80) indicates that bad comparers used to be ignored.\r\n\r\nIs there a reason why the [condition in that didn't throw for mono4 compat](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/collections/generic/arraysorthelper.cs#L87) isn't included in corert? Is there a different way to restore backwards-compatible behavior with this that I'm not aware of? If not, any chance that there could be a knob (flag, environment setting...) that could allow legacy behavior selectively?","Url":"https://github.com/dotnet/corefx/issues/38006","RelatedDescription":"Open issue \"How ignore bad comparer for backwards compatibility?\" (#38006)"},{"Id":"449552923","IsPullRequest":true,"CreatedAt":"2019-05-29T01:12:42","Actor":"safern","Number":"38005","RawContent":null,"Title":"Re-generate System.Collections ref assembly against implementation","State":"open","Body":"cc: @stephentoub @ahsonkhan @jkotas @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/38005","RelatedDescription":"Open PR \"Re-generate System.Collections ref assembly against implementation\" (#38005)"},{"Id":"449549655","IsPullRequest":true,"CreatedAt":"2019-05-29T00:55:07","Actor":"ahsonkhan","Number":"38004","RawContent":null,"Title":"Remove source package related comments on internal APIs and csproj/props file.","State":"open","Body":"As an aside, added some additional test cases to the reader for parsing different, valid/invalid Json numbers.\r\n\r\ncc @bartonjs, @joperezr, @steveharter","Url":"https://github.com/dotnet/corefx/pull/38004","RelatedDescription":"Open PR \"Remove source package related comments on internal APIs and csproj/props file.\" (#38004)"},{"Id":"449548961","IsPullRequest":true,"CreatedAt":"2019-05-29T00:50:45","Actor":"safern","Number":"38003","RawContent":null,"Title":"Add nullable annotations to System.Runtime.InteropServices.WindowsRuntime ref","State":"open","Body":"cc: @dotnet/nullablefc @AaronRobinsonMSFT ","Url":"https://github.com/dotnet/corefx/pull/38003","RelatedDescription":"Open PR \"Add nullable annotations to System.Runtime.InteropServices.WindowsRuntime ref\" (#38003)"},{"Id":"449548424","IsPullRequest":false,"CreatedAt":"2019-05-29T00:47:36","Actor":"stephentoub","Number":"38002","RawContent":null,"Title":"RandomNumberGeneratorTests.GetInt32_CoinFlipLowByte failed in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=203643&view=ms.vss-test-web.build-test-results-tab&runId=4930112&paneView=debug&resultId=298967\r\nnetcoreapp-Linux-Release-x64-Ubuntu.1604.Amd64.Open\r\n```\r\nError message\r\nOccurred number of times within threshold.\\nExpected: True\\nActual: False\r\n\r\nStack trace\r\n   at System.Security.Cryptography.RNG.Tests.RandomNumberGeneratorTests.VerifyDistribution(ReadOnlySpan`1 numbers, Double expected) in /_/src/System.Security.Cryptography.Algorithms/tests/RandomNumberGeneratorTests.netcoreapp.cs:line 279\r\n   at System.Security.Cryptography.RNG.Tests.RandomNumberGeneratorTests.GetInt32_CoinFlipLowByte() in /_/src/System.Security.Cryptography.Algorithms/tests/RandomNumberGeneratorTests.netcoreapp.cs:line 191\r\n```","Url":"https://github.com/dotnet/corefx/issues/38002","RelatedDescription":"Open issue \"RandomNumberGeneratorTests.GetInt32_CoinFlipLowByte failed in CI\" (#38002)"},{"Id":"449491561","IsPullRequest":true,"CreatedAt":"2019-05-29T00:46:46","Actor":"stephentoub","Number":"37995","RawContent":null,"Title":"Disable sporadically failing GetGCMemoryInfo test","State":"closed","Body":"cc: @luhenry, @ViktorHofer \r\nhttps://github.com/dotnet/corefx/issues/37378","Url":"https://github.com/dotnet/corefx/pull/37995","RelatedDescription":"Closed or merged PR \"Disable sporadically failing GetGCMemoryInfo test\" (#37995)"},{"Id":"449495101","IsPullRequest":true,"CreatedAt":"2019-05-29T00:44:48","Actor":"stephentoub","Number":"37996","RawContent":null,"Title":"Make AuthenticateAsClient/ServerAsync cancellation token optional","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/35283\r\ncc: @geoffkizer, @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/37996","RelatedDescription":"Closed or merged PR \"Make AuthenticateAsClient/ServerAsync cancellation token optional\" (#37996)"},{"Id":"449547870","IsPullRequest":false,"CreatedAt":"2019-05-29T00:44:27","Actor":"stephentoub","Number":"38001","RawContent":null,"Title":"SystemNative_GetCpuUtilization assert failure","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37996~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190528.42/workItem/System.Runtime.Extensions.Tests/wilogs\r\n```\r\n  Discovering: System.Runtime.Extensions.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Extensions.Tests (found 805 of 887 test cases)\r\n  Starting:    System.Runtime.Extensions.Tests (parallel test collections = on, max threads = 4)\r\n    System.Tests.EnvironmentTests.GetFolderPath_UapExistAndAccessible [SKIP]\r\n      Condition(s) not met: \"IsWindows10Version1709OrGreater\", \"IsInAppContainer\"\r\n    System.Tests.EnvironmentTests.GetFolderPath_UapNotEmpty [SKIP]\r\n      Condition(s) not met: \"IsWindows10Version1709OrGreater\", \"IsInAppContainer\"\r\nAssertion failed: (cpuUtilization >= 0 && cpuUtilization <= 100), function SystemNative_GetCpuUtilization, file /Users/vsts/agent/2.150.3/work/1/s/src/Native/Unix/System.Native/pal_time.c, line 200.\r\n./RunTests.sh: line 175: 51998 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" xunit.console.dll System.Runtime.Extensions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n```","Url":"https://github.com/dotnet/corefx/issues/38001","RelatedDescription":"Open issue \"SystemNative_GetCpuUtilization assert failure\" (#38001)"},{"Id":"449518076","IsPullRequest":false,"CreatedAt":"2019-05-28T23:16:11","Actor":"krwq","Number":"38000","RawContent":null,"Title":"Add Environment.TotalProcessorCount","State":"open","Body":"*Created per offline feedback.*\r\n\r\nConsider adding something like Environment.TotalProcessorCount.  The problem is Environment.ProcessorCount is returning a value designed for scheduling threads within a process.  The Windows scheduler has a feature called processor groups that limits one process to at most 64 cores.  However, if you’re writing code to schedule processes (instead of threads) then you need accurate machine-wide numbers.\r\n\r\nIt is currently possible to workaround this behavior by setting following env variables:\r\n\r\n```\r\nset complus_GCCpuGroup=1\r\nset COMPlus_Thread_UseAllCpuGroups=1\r\n```\r\n\r\nbut setting environment variables is not ideal as a permanent solution.","Url":"https://github.com/dotnet/corefx/issues/38000","RelatedDescription":"Open issue \"Add Environment.TotalProcessorCount\" (#38000)"},{"Id":"449512430","IsPullRequest":true,"CreatedAt":"2019-05-28T22:53:17","Actor":"scalablecory","Number":"37999","RawContent":null,"Title":"Ensure aligned access in ManagedWebSocket.ApplyMask","State":"open","Body":"Resolves #30747. Though, it is unclear if this is a true concern based on all supported platforms being okay with unaligned access.","Url":"https://github.com/dotnet/corefx/pull/37999","RelatedDescription":"Open PR \"Ensure aligned access in ManagedWebSocket.ApplyMask\" (#37999)"},{"Id":"449502667","IsPullRequest":false,"CreatedAt":"2019-05-28T22:18:45","Actor":"bricelam","Number":"37998","RawContent":null,"Title":"Load DbProviderFactories from ConfigurationManager","State":"open","Body":"Automatically registering DbProviderFactories from App.config is probably out of the question give the decision to decouple things from configuration. However, perhaps an API on ConfigurationManager would make sense:\r\n\r\n``` csharp\r\npublic static class ConfigurationManager\r\n{\r\n    public static void LoadDbProviderFactories();\r\n}\r\n```\r\n\r\nCalling it with this in your App.config...\r\n``` xml\r\n<system.data>\r\n  <DbProviderFactories>\r\n    <add invariant=\"System.Data.Odbc\"\r\n         type=\"System.Data.Odbc.OdbcFactory, System.Data.Odbc\" />\r\n    <add invariant=\"System.Data.OleDb\"\r\n         type=\"System.Data.OleDb.OleDbFactory, System.Data.OleDb\" />\r\n    <add invariant=\"System.Data.SqlClient\"\r\n         type=\"System.Data.SqlClient.SqlClientFactory, System.Data.SqlClient\" />\r\n    <remove invariant=\"System.Data.OracleClient\" />\r\n  </DbProviderFactories>\r\n</system.data>\r\n```\r\n...would be equivalent to the following.\r\n``` csharp\r\nDbProviderFactories.RegisterFactory(\r\n    \"System.Data.Odbc\",\r\n    \"System.Data.Odbc.OdbcFactory, System.Data.Odbc\");\r\nDbProviderFactories.RegisterFactory(\r\n    \"System.Data.OleDb\",\r\n    \"System.Data.OleDb.OleDbFactory, System.Data.OleDb\");\r\nDbProviderFactories.RegisterFactory(\r\n    \"System.Data.SqlClient\",\r\n    \"System.Data.SqlClient.SqlClientFactory, System.Data.SqlClient\");\r\nDbProviderFactories.UnregisterFactory(\r\n    \"System.Data.OracleClient\");\r\n```\r\n\r\ncc @divega","Url":"https://github.com/dotnet/corefx/issues/37998","RelatedDescription":"Open issue \"Load DbProviderFactories from ConfigurationManager\" (#37998)"},{"Id":"449498522","IsPullRequest":false,"CreatedAt":"2019-05-28T22:05:32","Actor":"stephentoub","Number":"37997","RawContent":null,"Title":"SocketAddress with arbitrary AddressFamily throws PNSE on Unix","State":"open","Body":"This succeeds on Windows:\r\n```C#\r\nnew SocketAddress((AddressFamily)12345).ToString()\r\n```\r\nreturning:\r\n```\r\n\"12345:32:{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}\"\r\n```\r\nbut on Linux and macOS it throws:\r\n```\r\nUnhandled Exception of Type System.PlatformNotSupportedException\r\nMessage :\r\nSystem.PlatformNotSupportedException : Operation is not supported on this platform.\r\nStack Trace :\r\n   at System.Net.SocketAddressPal.ThrowOnFailure(Error err) in /_/src/Common/src/System/Net/SocketAddressPal.Unix.cs:line 51\r\n   at System.Net.SocketAddressPal.SetAddressFamily(Byte[] buffer, AddressFamily family) in /_/src/Common/src/System/Net/SocketAddressPal.Unix.cs:line 76\r\n   at System.Net.SocketAddress..ctor(AddressFamily family, Int32 size) in /_/src/Common/src/System/Net/SocketAddress.cs:line 96\r\n```","Url":"https://github.com/dotnet/corefx/issues/37997","RelatedDescription":"Open issue \"SocketAddress with arbitrary AddressFamily throws PNSE on Unix\" (#37997)"},{"Id":"449445930","IsPullRequest":true,"CreatedAt":"2019-05-28T21:46:41","Actor":"stephentoub","Number":"37988","RawContent":null,"Title":"Remove socket cancellation workarounds on Unix from System.IO.Pipes","State":"closed","Body":"Named pipes on Unix are implemented in terms of System.Net.Sockets.Socket.  We didn't previously support cancellation of Socket operations, but we do now, so we can remove the workarounds that were in place.  Apparently we also previously neglected to remove the workarounds for the lack of Memory-based overloads in Sockets, so this fixes that, too.\r\n\r\ncc: @JeremyKuhne, @carlossanlop, @ViktorHofer \r\n\r\nI'm hopeful this fixes https://github.com/dotnet/corefx/issues/37842 as well.","Url":"https://github.com/dotnet/corefx/pull/37988","RelatedDescription":"Closed or merged PR \"Remove socket cancellation workarounds on Unix from System.IO.Pipes\" (#37988)"},{"Id":"449472903","IsPullRequest":false,"CreatedAt":"2019-05-28T20:54:50","Actor":"danmosemsft","Number":"37994","RawContent":null,"Title":"STATUS_UNSUCCESSFUL in  RsaCryptRoundtrip_OaepSHA1","State":"open","Body":"\r\nNot actionable as is.\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37960~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190528.20/workItem/System.Security.Cryptography.Cng.Tests/analysis/xunit/System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span~2FRsaCryptRoundtrip_OaepSHA1\r\n```\r\nWindows.10.Amd64.ClientRS4.ES.Open-x86-Release\r\nGet Repro environment\r\nUnhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException\r\nMessage :\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unknown error (0xc0000001)\r\nStack Trace :\r\n   at System.Security.Cryptography.RSACng.TryEncryptOrDecrypt(SafeNCryptKeyHandle key, ReadOnlySpan`1 input, Span`1 output, AsymmetricPaddingMode paddingMode, Void* paddingInfo, Boolean encrypt, Int32& bytesWritten) in /_/src/Common/src/System/Security/Cryptography/RSACng.EncryptDecrypt.cs:line 266\r\n   at System.Security.Cryptography.RSACng.TryEncryptOrDecrypt(ReadOnlySpan`1 data, Span`1 destination, RSAEncryptionPadding padding, Boolean encrypt, Int32& bytesWritten) in /_/src/Common/src/System/Security/Cryptography/RSACng.EncryptDecrypt.cs:line 205\r\n   at System.Security.Cryptography.RSACng.TryDecrypt(ReadOnlySpan`1 data, Span`1 destination, RSAEncryptionPadding padding, Int32& bytesWritten) in /_/src/Common/src/System/Security/Cryptography/RSACng.EncryptDecrypt.cs:line 38\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.<>c__DisplayClass1_0.<Decrypt>b__0(Byte[] dest) in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.netcoreapp.cs:line 16\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.TryWithOutputArray(Func`2 func) in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.netcoreapp.cs:line 23\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.Decrypt(RSA rsa, Byte[] data, RSAEncryptionPadding padding) in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.netcoreapp.cs:line 16\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaCryptRoundtrip(RSAEncryptionPadding paddingMode, Boolean expectSuccess) in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.cs:line 315\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaCryptRoundtrip_OaepSHA1() in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.cs:line 285\r\n```","Url":"https://github.com/dotnet/corefx/issues/37994","RelatedDescription":"Open issue \"STATUS_UNSUCCESSFUL in  RsaCryptRoundtrip_OaepSHA1\" (#37994)"},{"Id":"449238018","IsPullRequest":true,"CreatedAt":"2019-05-28T20:52:42","Actor":"dotnet-maestro[bot]","Number":"37980","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190527.2\r\n- **Date Produced**: 5/27/2019 11:45 PM\r\n- **Commit**: d58a8ade31b4731759c92df00d0f6398c52f3d83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19277.2\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19277.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37980","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37980)"},{"Id":"449435405","IsPullRequest":true,"CreatedAt":"2019-05-28T20:42:33","Actor":"stephentoub","Number":"37986","RawContent":null,"Title":"Improve Debug.Assert in ConcurrentBag","State":"closed","Body":"To try to help track down a spurious assert failure.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/33500\r\ncc: @kouvel, @tarekgh, @safern","Url":"https://github.com/dotnet/corefx/pull/37986","RelatedDescription":"Closed or merged PR \"Improve Debug.Assert in ConcurrentBag\" (#37986)"},{"Id":"449467556","IsPullRequest":true,"CreatedAt":"2019-05-28T20:41:44","Actor":"joperezr","Number":"37993","RawContent":null,"Title":"Fixing issue where assemblies would build againsta lower version of a contract than what their package depends on.","State":"open","Body":"Fixes #37943\r\n\r\nWhen re-baselining all package versions for .NET Core 3.0, I forgot to also make sure I bumped the versions of the binplacePackages.depproj dependencies. This project helps building the some targetting packs that our assemblies will build against, so we need to make sure that we build against the same version of the packages that the actual package will depend on after baselining the versions.\r\n\r\ncc: @ericstj @vatsan-madhavan","Url":"https://github.com/dotnet/corefx/pull/37993","RelatedDescription":"Open PR \"Fixing issue where assemblies would build againsta lower version of a contract than what their package depends on.\" (#37993)"},{"Id":"449459581","IsPullRequest":false,"CreatedAt":"2019-05-28T20:22:46","Actor":"steveharter","Number":"37992","RawContent":null,"Title":"Issues (de)serializing floating point data types","State":"open","Body":"placeholder - to be changed soon.","Url":"https://github.com/dotnet/corefx/issues/37992","RelatedDescription":"Open issue \"Issues (de)serializing floating point data types\" (#37992)"},{"Id":"449451756","IsPullRequest":true,"CreatedAt":"2019-05-28T20:03:17","Actor":"dotnet-maestro[bot]","Number":"37991","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 1:13 PM\r\n- **Commit**: abc624a27f0e40e8c3817b3d410362dcc91cfb95\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19278.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37991","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#37991)"},{"Id":"449450103","IsPullRequest":true,"CreatedAt":"2019-05-28T19:59:05","Actor":"stephentoub","Number":"37990","RawContent":null,"Title":"Remove SSL cancellation workaround from SocketsHttpHandler","State":"open","Body":"Both sockets cancellation and SslStream auth cancellation have been implemented.\r\n\r\ncc: @geoffkizer, @davidsh, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/37990","RelatedDescription":"Open PR \"Remove SSL cancellation workaround from SocketsHttpHandler\" (#37990)"},{"Id":"449448340","IsPullRequest":false,"CreatedAt":"2019-05-28T19:54:41","Actor":"stephentoub","Number":"37989","RawContent":null,"Title":"MonoTests.System.Runtime.Caching.MemoryCacheTest.Contains failed in CI on netfx","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=203415&view=ms.vss-test-web.build-test-results-tab&runId=4922022&resultId=158673&paneView=debug\r\nnetfx-Windows_NT-Release-x86-Windows.10.Amd64.ClientRS5.Open\r\n```\r\n\r\nError message\r\nAssert.True() Failure\\r\\nExpected: True\\r\\nActual: False\r\n\r\nStack trace\r\n   at MonoTests.System.Runtime.Caching.MemoryCacheTest.Contains() in /_/src/System.Runtime.Caching/tests/System.Runtime.Caching/MemoryCacheTest.cs:line 274\r\n```","Url":"https://github.com/dotnet/corefx/issues/37989","RelatedDescription":"Open issue \"MonoTests.System.Runtime.Caching.MemoryCacheTest.Contains failed in CI on netfx\" (#37989)"},{"Id":"449444964","IsPullRequest":true,"CreatedAt":"2019-05-28T19:46:07","Actor":"safern","Number":"37987","RawContent":null,"Title":"Add nullable annotations to System.Runtime.InteropServices ref assembly","State":"open","Body":"No merge until it goes through API Review.\r\n\r\ncc: @dotnet/nullablefc @jkotas @AaronRobinsonMSFT ","Url":"https://github.com/dotnet/corefx/pull/37987","RelatedDescription":"Open PR \"Add nullable annotations to System.Runtime.InteropServices ref assembly\" (#37987)"},{"Id":"449423264","IsPullRequest":false,"CreatedAt":"2019-05-28T18:50:47","Actor":"johnkellyoxford","Number":"37985","RawContent":null,"Title":"Consider exposing `System.Diagnostics.StackTraceHiddenAttribute` publicly","State":"open","Body":"It appears to be a very useful attribute, particular as `System.ThrowHelper` is `internal`, this would be invaluable for user-written throw helper types to keep the best possible exception semantics while still having the advantages of a throw helper. It could be abused, but not really in a \"breaking\" way, just using it stupidly could make debugging a little harder, so unless there is something I am *really* missing I cannot see a strong case against making it public","Url":"https://github.com/dotnet/corefx/issues/37985","RelatedDescription":"Open issue \"Consider exposing `System.Diagnostics.StackTraceHiddenAttribute` publicly\" (#37985)"},{"Id":"449401302","IsPullRequest":false,"CreatedAt":"2019-05-28T17:56:31","Actor":"tannergooding","Number":"37984","RawContent":null,"Title":"PipeReaderOptions and PipeWriterOptions should use -1 as the default buffer size.","State":"open","Body":"As per the title, `PipeReaderOptions` and `PipeWriterOptions` should be updated so that the default buffer size taken by the constructor is -1.\r\n\r\nThis leaves the default buffer size an implementation detail that can be configured per runtime/os/etc and so that it can be freely changed under the covers if needed/desired.","Url":"https://github.com/dotnet/corefx/issues/37984","RelatedDescription":"Open issue \"PipeReaderOptions and PipeWriterOptions should use -1 as the default buffer size.\" (#37984)"},{"Id":"449373503","IsPullRequest":false,"CreatedAt":"2019-05-28T16:46:14","Actor":"tmat","Number":"37983","RawContent":null,"Title":"System.ValueTuple package is missing net472 target directory","State":"open","Body":"When targeting .NET Framework 4.7.2 RAR claims the project should copy System.ValueTuple.dll from the package (from net47 directory) to its output dir. But in reality it shouldn’t copy anything since it’s already in the FX.\r\n\r\nSystem.ValueTuple package has netstandard2.0 target dir containing `_._` sentinel, but does not have one for `net472`. Then targeting .NET Framework RAR falls back to `net47`, which in the package has `System.ValueTuple.dll`. \r\n\r\n@ericstj points out that conflict resolution does not handle this case - it’s losing due to assembly versions:\r\n```\r\nEncountered conflict between 'Reference:C:\\Users\\ericstj\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net47\\System.ValueTuple.dll' and 'Platform:System.ValueTuple.dll'.  NETSDK1033: Choosing 'Reference:C:\\Users\\ericstj\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net47\\System.ValueTuple.dll' because AssemblyVersion '4.0.3.0' is greater than '4.0.2.0'.\r\nEncountered conflict between 'Platform:System.ValueTuple.dll' and 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.valuetuple\\4.5.0\\lib\\net47\\System.ValueTuple.dll'.  NETSDK1033: Choosing 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.valuetuple\\4.5.0\\lib\\net47\\System.ValueTuple.dll' because AssemblyVersion '4.0.3.0' is greater than '4.0.2.0'.\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37983","RelatedDescription":"Open issue \"System.ValueTuple package is missing net472 target directory\" (#37983)"},{"Id":"449348699","IsPullRequest":false,"CreatedAt":"2019-05-28T13:46:05","Actor":"ableji","Number":"37982","RawContent":null,"Title":"ToLocalTime() in System.DateTime do not always produce expected result","State":"open","Body":"# Issue Title\r\n\r\nToLocalTime() method in System.DateTime do not always produce correct result;\r\n\r\n# General\r\n\r\nbased on my researches tehran time zone is kind of dynamic,\r\nfirst half of year is (+4:30) and second half (+3:30) but ToLocalTime() always add 3:30.\r\n\r\nthere is more details here:\r\nhttps://www.timeanddate.com/time/zone/iran/tehran\r\nhttps://www.timeanddate.com/time/zone/iran\r\n\r\nI think  ToLocalTime() must act dynamically in this case!\r\n\r\nthis is missing feature <b>or</b> its not concern of ToLocalTime()?\r\n","Url":"https://github.com/dotnet/corefx/issues/37982","RelatedDescription":"Open issue \"ToLocalTime() in System.DateTime do not always produce expected result\" (#37982)"},{"Id":"449251835","IsPullRequest":true,"CreatedAt":"2019-05-28T12:52:17","Actor":"Dotnet-GitSync-Bot","Number":"37981","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/37981","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#37981)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"449561017","IsPullRequest":true,"CreatedAt":"2019-05-29T01:55:46","Actor":"sharwell","Number":"36013","RawContent":null,"Title":"Make IExperimentationService properly free-threaded","State":"open","Body":"This change removes the use of asynchronous methods during the MEF construction portion of the construction of `IExperimentationService`.\r\n\r\n* IExperimentationServiceFactory can be obtained from the MEF container without any threading dependencies\r\n* Once an IExperimentationService instance is obtained from the factory, its synchronous methods can be used without threading dependencies","Url":"https://github.com/dotnet/roslyn/pull/36013","RelatedDescription":"Open PR \"Make IExperimentationService properly free-threaded\" (#36013)"},{"Id":"449560174","IsPullRequest":true,"CreatedAt":"2019-05-29T01:50:18","Actor":"CyrusNajmabadi","Number":"36012","RawContent":null,"Title":"Remove the AbstractIndenter type (and subtypes).","State":"open","Body":"Followup to https://github.com/dotnet/roslyn/pull/34001.  that PR should go in first.\r\n\r\nCore logic for it has been moved into the AbstractIndentationService.","Url":"https://github.com/dotnet/roslyn/pull/36012","RelatedDescription":"Open PR \"Remove the AbstractIndenter type (and subtypes).\" (#36012)"},{"Id":"449527803","IsPullRequest":true,"CreatedAt":"2019-05-29T01:30:09","Actor":"dotnet-bot","Number":"36008","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36008","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#36008)"},{"Id":"449228987","IsPullRequest":true,"CreatedAt":"2019-05-29T01:00:16","Actor":"dotnet-bot","Number":"35995","RawContent":null,"Title":"Merge release/dev16.2-preview1-vs-deps to release/dev16.2-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into release/dev16.2-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps\ngit reset --hard upstream/release/dev16.2-preview2-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35995","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1-vs-deps to release/dev16.2-preview2-vs-deps\" (#35995)"},{"Id":"449548107","IsPullRequest":true,"CreatedAt":"2019-05-29T00:45:47","Actor":"cston","Number":"36011","RawContent":null,"Title":"Update TestResources to 2.0.16","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36011","RelatedDescription":"Open PR \"Update TestResources to 2.0.16\" (#36011)"},{"Id":"449530733","IsPullRequest":true,"CreatedAt":"2019-05-29T00:14:34","Actor":"tmat","Number":"36010","RawContent":null,"Title":"Move EnC manager implementation down to Features layer (Preview 2)","State":"open","Body":"Replaces legacy EnC manager implementation with a new one.\r\n\r\nThe previous implementation of the EnC manager in the debugger communicated with language services via project system coupled interfaces (`IVsENCRebuildableProjectCfg*`). This had many limitations, including necessity to perform IO synchronously on UI thread, lack of support for multi-targeting, necessity to make buffers readonly while application is running and for projects whose modules were not loaded to the debugee process etc.\r\n\r\nThe new architecture completely removes the dependency on Project System. The debugger communicates with language services via a MEF component. Language services export\r\n1) `IDebugStateChangeListener` \r\nThe implementation of this interface receives callbacks from the debugger when the debug state changes:\r\n\r\n```C#\r\n        void EnterBreakState(BreakStateKind kind);\r\n        void ExitBreakState();\r\n        void StartDebugging();\r\n        void StopDebugging();\r\n```\r\n\r\n2) `IEditAndContinueManagedModuleUpdateProvider`\r\n\r\nThe implementation responds to the debugger's requests for updates in managed modules. \r\nThe debugger sends these requests when changes made in source files need to be applied due to a user action (e.g. \"continue\" in break mode, change current IP while in break mode, etc.).\r\n\r\n### Avoiding read-only buffers ###\r\nPreviously we made buffers read only in scenarios where we couldn't apply the change at the end of the current edit session (\"continue\"). This could be for multiple reasons:\r\n\r\n1) Changing source files while the application is running\r\nChanges can only be applied when the debuggee is stopped. \r\n\r\nWe let the user made changes while the debuggee is running. We report a warning for these changes notifying the user that the changes are not being applied while the debugee is running. \r\n\r\nWhen the debugger stops on a breakpoint in a modified source, the source won't match the one that's being executed so based on the settings the debugger may display a dialog saying so. We will follow up to improve that experience, but not going to block the change on it.\r\n\r\n2) Changing source files of projects during edit session whose corresponding module is not loaded to the debugee\r\nSince the modules are not loaded we can't apply the delta at the end of the edit session (there is no module in the debugee process to apply the delta to).\r\n\r\nWe calculate the EnC deltas for all projects changed during edit session regardless of whether their modules are loaded or not. At the end of the session we apply deltas only to modules that are loaded, but we remember all the deltas we calculated for next opportunity to apply changes. Such opportunity occurs when a module is loaded while the debuggee is running. At that point the debuggee is stopped while the even is processed and we can apply all deltas that were made to the project that corresponds to the module. Note that this also handles the case where multiple instances of the same module are loaded to the debuggee (e.g. to different AppDomains or AssemblyLoadContexts). The previous design didn't account for this scenario resulting in bugs like https://github.com/dotnet/roslyn/issues/34253.\r\n\r\n3) Other reasons that disallow EnC (e.g. being stopped at exception, the debuggee process not supporting EnC, etc.).\r\n\r\nWe do not block the user from making changes in the source files. Instead we report regular errors like we do for other Rude Edits. We use new APIs added to Concord to support querying for availability of EnC for specific module.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/10203.\r\nFixes https://github.com/dotnet/roslyn/issues/11656.\r\nFixes https://github.com/dotnet/roslyn/issues/18917.\r\nFixes https://github.com/dotnet/roslyn/issues/21170.\r\nFixes https://github.com/dotnet/roslyn/issues/27373.\r\nFixes https://github.com/dotnet/roslyn/issues/27735.\r\nFixes https://github.com/dotnet/roslyn/issues/29223.\r\nFixes https://github.com/dotnet/roslyn/issues/34253.\r\nFixes [DevDiv 750649](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750649)\r\nFixes [DevDiv 551604](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/551604)\r\n\r\nSee also https://github.com/dotnet/roslyn/issues/18350.\r\n","Url":"https://github.com/dotnet/roslyn/pull/36010","RelatedDescription":"Open PR \"Move EnC manager implementation down to Features layer (Preview 2)\" (#36010)"},{"Id":"449527955","IsPullRequest":false,"CreatedAt":"2019-05-29T00:01:37","Actor":"jcouv","Number":"36009","RawContent":null,"Title":"Should [DisallowNull] apply to value types?","State":"open","Body":"A few options:\r\n1. no warning (as today)\r\n2. warn for passing a possibly null value to `[DisallowNull]int?` parameter\r\n3. disallow `[DisallowNull]` on that parameter. If we do that, then we should probably also disallow on `string?`.\r\n\r\n```C#\r\n        [Fact]\r\n        public void DisallowNull_04()\r\n        {\r\n            var source =\r\n@\"using System.Runtime.CompilerServices;\r\nclass Program\r\n{\r\n    static void F1([DisallowNull]int i) { }\r\n    static void F2([DisallowNull]int? i) { }\r\n    static void M1(int i1)\r\n    {\r\n        F1(i1);\r\n        F2(i1);\r\n    }\r\n    static void M2(int? i2)\r\n    {\r\n        F2(i2); // I expected a warning here (jcouv)\r\n        if (i2 == null) return;\r\n        F2(i2);\r\n    }\r\n}\";\r\n            var comp = CreateCompilation(new[] { DisallowNullAttributeDefinition, source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics();\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/36009","RelatedDescription":"Open issue \"Should [DisallowNull] apply to value types?\" (#36009)"},{"Id":"449527731","IsPullRequest":true,"CreatedAt":"2019-05-29T00:00:31","Actor":"dotnet-bot","Number":"36007","RawContent":null,"Title":"Merge release/dev16.2-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36007","RelatedDescription":"Open PR \"Merge release/dev16.2-preview2-vs-deps to master-vs-deps\" (#36007)"},{"Id":"449525882","IsPullRequest":true,"CreatedAt":"2019-05-28T23:51:01","Actor":"dibarbet","Number":"36006","RawContent":null,"Title":"Extract an abstract open file tracker so that we can re-use the open","State":"open","Body":"file tracker for the liveshare client case.\r\n\r\nLiveshare implements their own roslyn remote workspace which tracks files using a different system.  Now that we're moving it inside, we'll re-use our open file tracker since we already receive the correct events.\r\n\r\nThis PR just extracts out the common pieces that we can re-use to implement an open file tracker for the liveshare workspace.  This PR should have no functional differences, just moving code around.\r\n\r\n@jasonmalinowski @heejaechang does this look roughly like we discussed?","Url":"https://github.com/dotnet/roslyn/pull/36006","RelatedDescription":"Open PR \"Extract an abstract open file tracker so that we can re-use the open\" (#36006)"},{"Id":"449524500","IsPullRequest":false,"CreatedAt":"2019-05-28T23:44:16","Actor":"AlekseyTs","Number":"36005","RawContent":null,"Title":"Missing nullable warnings for scenarios involving type constraints that a nullable value type can satisfy.","State":"open","Body":"```\r\nnamespace ns1\r\n{\r\n#nullable enable\r\n    class Test1<T>\r\n    {\r\n        public virtual void M1<S>(S x) where S : T\r\n        { }\r\n        public virtual void M2(T x)\r\n        { }\r\n    }\r\n\r\n    class Test2 : Test1<System.ValueType>\r\n    {\r\n        public override void M1<S>(S x)\r\n        {\r\n            object y = x;\r\n            y.ToString();\r\n            System.Console.WriteLine(\"Test2\");\r\n        }\r\n\r\n        public override void M2(System.ValueType x)\r\n        {\r\n        }\r\n\r\n        public void Test()\r\n        {\r\n            int? x = null;\r\n            M1<int?>(x);\r\n            M2(x);\r\n        }\r\n    }\r\n\r\n    class Test3 : Test1<object>\r\n    {\r\n        public override void M1<S>(S x)\r\n        {\r\n            object y = x;\r\n            y.ToString();\r\n            System.Console.WriteLine(\"Test3\");\r\n        }\r\n\r\n        public override void M2(object x)\r\n        {\r\n        }\r\n\r\n        public void Test()\r\n        {\r\n            int? x = null;\r\n            M1<int?>(x);\r\n            M2(x);\r\n        }\r\n\r\n        static void Main()\r\n        {\r\n            new Test2().Test();\r\n            new Test3().Test();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCompile the code above.\r\n\r\nObserved (no nullable warnings for M1 calls):\r\n```\r\n.cs(50,16): warning CS8604: Possible null reference argument for parameter 'x' in 'void Test3.M2(object x)'.\r\n.cs(29,16): warning CS8604: Possible null reference argument for parameter 'x' in 'void Test2.M2(ValueType x)'.\r\n```\r\n\r\nRun the code\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at ns1.Test2.M1[S](S x)\r\n   at ns1.Test2.Test()\r\n   at ns1.Test3.Main()\r\n``` \r\n\r\nExpected: \r\nExpected nullable warnings either for M1 invocations (constraint violation), or within M1 implementations. Given the recent design decision around ```notnull``` constraint, a constraint violation warning feels more appropriate.\r\n\r\nNote that for the code below, we do get warnings inside implementation of M1 and I think we should keep getting them:\r\n```\r\n    class Test4 : Test1<int?>\r\n    {\r\n        public override void M1<S>(S x)\r\n        {\r\n            object y = x;\r\n            y.ToString();\r\n        }\r\n\r\n        public override void M2(int? x)\r\n        {\r\n        }\r\n\r\n        public void Test()\r\n        {\r\n            int? x = null;\r\n            M1<int?>(x);\r\n            M2(x);\r\n        }\r\n    }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/36005","RelatedDescription":"Open issue \"Missing nullable warnings for scenarios involving type constraints that a nullable value type can satisfy.\" (#36005)"},{"Id":"449524474","IsPullRequest":false,"CreatedAt":"2019-05-28T23:44:10","Actor":"lorcanmooney","Number":"36004","RawContent":null,"Title":"CS0306 when stackalloc is used in a nested context","State":"open","Body":"**Version Used**: \r\nVS 2019 Preview, version 16.2.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n\tunsafe static void Main()\r\n\t{\r\n\t\tint a = 0;\r\n\r\n\t\tvar ptrs = stackalloc int*[1] { &a };  // This works...\r\n\r\n\t\tFoo(stackalloc int*[1] { &a });   // ...but this doesn't\r\n\t}\r\n\r\n\tunsafe static void Foo(int** ptrs)\r\n\t{\r\n\t}\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThe type of the nested `stackalloc` should be `int**`, as in the `var` case.\r\n\r\n**Actual Behavior**:\r\n`CS0306\tThe type 'int*' may not be used as a type argument`\r\n`CS1503\tArgument 1: cannot convert from 'System.Span<int*>' to 'int**'`\r\n\r\nWhatever rule typed the `var` correctly, should also apply to arguments.","Url":"https://github.com/dotnet/roslyn/issues/36004","RelatedDescription":"Open issue \"CS0306 when stackalloc is used in a nested context\" (#36004)"},{"Id":"449481348","IsPullRequest":true,"CreatedAt":"2019-05-28T22:44:12","Actor":"RikkiGibson","Number":"36002","RawContent":null,"Title":"Use vsBranch: lab/d16.2stg for 16.2-p2 publish","State":"closed","Body":"cc @genlu\r\n\r\nThis is a temporary change to help us run some internal jobs until it comes time to complete the divisional snap tomorrow afternoon.","Url":"https://github.com/dotnet/roslyn/pull/36002","RelatedDescription":"Closed or merged PR \"Use vsBranch: lab/d16.2stg for 16.2-p2 publish\" (#36002)"},{"Id":"449484062","IsPullRequest":false,"CreatedAt":"2019-05-28T21:23:07","Actor":"AlekseyTs","Number":"36003","RawContent":null,"Title":"Public API Analyzer is crashing with \"Nullable reference analysis IDE features\" enabled","State":"open","Body":"```\r\nSystem.AggregateException : One or more errors occurred. ---> Object reference not set to an instance of an object.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n---> (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)\r\n   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)<---\r\n```\r\n\r\nCC @333fred, @jasonmalinowski ","Url":"https://github.com/dotnet/roslyn/issues/36003","RelatedDescription":"Open issue \"Public API Analyzer is crashing with \"Nullable reference analysis IDE features\" enabled\" (#36003)"},{"Id":"449474293","IsPullRequest":false,"CreatedAt":"2019-05-28T20:58:05","Actor":"gewarren","Number":"36001","RawContent":null,"Title":"F1 help does not work for C# `nameof` keyword","State":"open","Body":"Put your cursor in `nameof` in the following C# code and press F1:\r\n\r\n```csharp\r\nthrow new ArgumentNullException(paramName: nameof(x));\r\n```\r\n\r\n**Result**: You land on a generic catch-all page. The query string does not pick up the `nameof` keyword:\r\n\r\n…?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(VS.TextEditor)%26rd%3Dtrue&view=vs-2019\r\n\r\n**Expected Result**: You land here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/nameof ","Url":"https://github.com/dotnet/roslyn/issues/36001","RelatedDescription":"Open issue \"F1 help does not work for C# `nameof` keyword\" (#36001)"},{"Id":"449464495","IsPullRequest":true,"CreatedAt":"2019-05-28T20:34:16","Actor":"ivanbasov","Number":"36000","RawContent":null,"Title":"Feeding VSSDK from new VSSDK channel","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36000","RelatedDescription":"Open PR \"Feeding VSSDK from new VSSDK channel\" (#36000)"},{"Id":"449046545","IsPullRequest":false,"CreatedAt":"2019-05-28T19:00:01","Actor":"vsfeedback","Number":"35990","RawContent":null,"Title":"The new Intellisense does not omit Attribute suffixes","State":"closed","Body":"VSF_TYPE_MARKDOWNHi,\n\nIn VS 2019, after enabling &quot;Show items from unimported namespaces&quot; in the C# intellisense options, attribute names include the Attribute suffix.\n\nSee demonstration.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/584851/the-new-intellisense-does-not-omit-attribute-suffi.html\nVSTS ticketId: 900293_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35990","RelatedDescription":"Closed issue \"The new Intellisense does not omit Attribute suffixes\" (#35990)"},{"Id":"449014727","IsPullRequest":true,"CreatedAt":"2019-05-28T18:30:08","Actor":"dotnet-bot","Number":"35989","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35989","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35989)"},{"Id":"449374697","IsPullRequest":false,"CreatedAt":"2019-05-28T18:15:27","Actor":"vsfeedback","Number":"35997","RawContent":null,"Title":"Please suggest a way to enable the Password protection in a PDF document using C# without using any third party libraries","State":"closed","Body":"<p>Hello Developers,</p> <p>I want to enable the security features (like user and owner passwords) to a PF document without using any third party library like iTextSharp etc. I want some Microsoft library or Adobe library to enable this feature. if you are suggesting the &quot;Windows.Data.Pdf.dll&quot; please suggest how to add this library to my VS project and leverage the class like &quot;PdfDocument&quot;, &quot;PdfSecuritySettings&quot; etc.</p> <p>fyi i will be using c# and .net 4.5 and later versions </p> <p></p><p>Expecting a quick and correct response </p><p></p><p>Thanks in advance </p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/583316/please-suggest-a-way-to-enable-the-password-protec.html\nVSTS ticketId: 899676_\n_These are the original issue comments:_\n\nayush tripathi on 5/25/2019, 10:49 PM (2 days ago): <p>Please suggest some way</p>\n\nVisual Studio Feedback System on 5/26/2019, 11:39 PM (34 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35997","RelatedDescription":"Closed issue \"Please suggest a way to enable the Password protection in a PDF document using C# without using any third party libraries\" (#35997)"},{"Id":"449407173","IsPullRequest":false,"CreatedAt":"2019-05-28T18:10:51","Actor":"AlekseyTs","Number":"35999","RawContent":null,"Title":"VB DIM: Should probably disable consumption of operators declared within interfaces","State":"open","Body":"There were some changes made to operators overload resolution in C#. For VB, we probably don't have time to finalize the design and implementation in this area. As it stands right now, it is possible that those operators are simply ignored by VB compiler, but we should confirm.","Url":"https://github.com/dotnet/roslyn/issues/35999","RelatedDescription":"Open issue \"VB DIM: Should probably disable consumption of operators declared within interfaces\" (#35999)"},{"Id":"449379421","IsPullRequest":false,"CreatedAt":"2019-05-28T17:00:50","Actor":"AlekseyTs","Number":"35998","RawContent":null,"Title":"VB DIM: Add tests for consuming operators defined within interfaces","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n","Url":"https://github.com/dotnet/roslyn/issues/35998","RelatedDescription":"Open issue \"VB DIM: Add tests for consuming operators defined within interfaces\" (#35998)"},{"Id":"449228830","IsPullRequest":true,"CreatedAt":"2019-05-28T14:30:14","Actor":"dotnet-bot","Number":"35994","RawContent":null,"Title":"Merge release/dev16.2-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.2-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35994","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview2 to master\" (#35994)"},{"Id":"449100736","IsPullRequest":false,"CreatedAt":"2019-05-28T14:27:47","Actor":"jroessel","Number":"35992","RawContent":null,"Title":"Roslyn seems to be substantially slower in the latest version","State":"closed","Body":"**Version Used**: 3.1.0\r\n\r\nWe have an internal compiler from C# to other languages based on Roslyn. The general approach is walking the syntax trees and producing source code that looks mostly similar to the original source. Runtime seems to be mostly dominated by Roslyn in looking up symbols for tokens (but it's hard to profile a complete 13-minute compilation).\r\n\r\nI recently upgraded to the latest version of Microsoft.CodeAnalysis (3.1.0) from the version we've used so far (1.3.2) and noticed a slowdown by about 50 %. I can't really point to a specific place, as I haven't profiled a complete run with either version, but downgrading to 2.10 resolved the problem again.","Url":"https://github.com/dotnet/roslyn/issues/35992","RelatedDescription":"Closed issue \"Roslyn seems to be substantially slower in the latest version\" (#35992)"},{"Id":"449229140","IsPullRequest":true,"CreatedAt":"2019-05-28T14:00:16","Actor":"dotnet-bot","Number":"35996","RawContent":null,"Title":"Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps\ngit reset --hard upstream/release/dev16.2-preview2-vs-deps\ngit merge upstream/release/dev16.2-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35996","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps\" (#35996)"},{"Id":"449217577","IsPullRequest":false,"CreatedAt":"2019-05-28T11:32:44","Actor":"vsfeedback","Number":"35993","RawContent":null,"Title":"'Inline variable declaration' spacing incorrect with csharp_space_around_declaration_statements=ignore","State":"open","Body":"VSF_TYPE_MARKDOWNWhen I run CodeCleanup (EditorContextMenus.FileHealthIndicator.RunDefaultCodeCleanup) and it replaces predefined types w/Framework types the result is sometimes erroneous - when the substitution is on a method-call with 'out' parameters the space between the type-name and the variable is sometimes dropped (e.g. x(out int i1) becomes x(out Integer32i1). This only seems to happen when the method-call is part of an assignment-statement.\n\nIn addition to attaching my .editorconfig I've also attached the following:\noriginal.png -sample showing original code\nAssignFirst.png -shows erroneous results when the method-call is part of an assignment\nAssignSecond.png -shows correct results when method-call is stand-alone\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/583507/codecleanup-replace-predefined-type-wframework-som.html\nVSTS ticketId: 899753_\n_These are the original issue comments:_\n\nLee Silver on 5/26/2019, 09:00 PM (33 hours ago): In my original report I wrote \"(e.g. x(out int i1) becomes x(out Integer32i1)\" when it should have been \"(e.g. x(out int i1) becomes x(out Int32i1)\"\nVisual Studio Feedback System on 5/27/2019, 05:10 AM (25 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nLee Silver on 5/27/2019, 05:19 PM (13 hours ago): I just noticed that during CodeCleanup 'out'-variable preferences are done after 'type' preferences. Since the 'type' has the correct substituted value it looks like the problem is with the handling of 'out' variable preferences.\nVisual Studio Feedback System on 5/28/2019, 03:58 AM (2 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35993","RelatedDescription":"Open issue \"'Inline variable declaration' spacing incorrect with csharp_space_around_declaration_statements=ignore\" (#35993)"},{"Id":"449082228","IsPullRequest":false,"CreatedAt":"2019-05-28T06:16:33","Actor":"ogazioglu","Number":"35991","RawContent":null,"Title":"OutOfMemoryException in CodeAnalysis","State":"open","Body":"I am currently developing a wide solution, which contains 23 projects.\r\nOne of them is .net 4.7.1, five of them are .net standard 2.0 and the rest of them are .net core 2.2\r\nThere are 3 microservices, which contains 4 project each and uses entity framework core 2.2. One of them has 492 migration files.\r\nContracts is shared using local nuget server.\r\n\r\nVisual studio has been crashing every day. Sometimes it's been happening a few times in a day. I suspect about migration file count.\r\n\r\n\r\n**Version Used**: VS 15.9.11\r\n\r\n**Steps to Reproduce**: \r\n\r\n1. Install ReSharper 2019.1\r\n2. Disable Rosylyn full solution analysis\r\n3. Disable CodeLens for all languages\r\n4. Open huge solutions including 20-25 projects. \r\n2. Use more than 1 days or maybe less.\r\n\r\n**Expected Behavior**:\r\n\r\nNo exception\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.SyntaxTokenWithValueAndTrivia`1.<>c.<.cctor>b__0_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax.<>c.<.cctor>b__15_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.<>c.<.cctor>b__0_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.<>c.<.cctor>b__18_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MemberAccessExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MemberAccessExpressionSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.<>c.<.cctor>b__18_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax.<>c.<.cctor>b__18_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.<>c.<.cctor>b__0_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SimpleLambdaExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SimpleLambdaExpressionSyntax.<>c.<.cctor>b__24_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.<>c.<.cctor>b__0_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.<>c.<.cctor>b__18_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax.<>c.<.cctor>b__18_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.<>c.<.cctor>b__0_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax.<>c.<.cctor>b__21_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MethodDeclarationSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MethodDeclarationSyntax.<>c.<.cctor>b__45_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax.<>c.<.cctor>b__45_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax.<>c.<.cctor>b__36_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax..ctor(ObjectReader reader)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax.<>c.<.cctor>b__27_0(ObjectReader r)\r\n   at Roslyn.Utilities.ObjectReader.ReadObject()\r\n   at Roslyn.Utilities.ObjectReader.ReadValueWorker()\r\n   at Roslyn.Utilities.ObjectReader.ReadValue()\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom(Stream stream, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.DeserializeNodeFrom(Stream stream, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.RecoverRoot(Stream stream, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.Recover(CancellationToken cancellationToken)\r\n   at Roslyn.Utilities.AsyncLazy`1.GetValue(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Host.RecoverableWeakValueSource`1.GetValue(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRoot(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootCore(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.PositionalSyntaxReference.GetSyntax(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByName()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersUnordered()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembers()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol.Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers()\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.AddSymbol(ISymbol symbol, MultiDictionary`2 symbolMap, Func`2 useSymbol)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.<>c.<.cctor>b__78_5(ISymbol symbol, MultiDictionary`2 symbolMap)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(INamespaceSymbol globalNamespace, ArrayBuilder`1 list, Action`2 lookup)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.<CreateSourceSymbolTreeInfoAsync>d__71.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.<TryLoadOrCreateAsync>d__58`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.<UpdateSourceSymbolTreeInfoAsync>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.<UpdateSymbolTreeInfoAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.<AnalyzeDocumentAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<>c__DisplayClass32_1`1.<<RunAnalyzersAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<GetOrDefaultAsync>d__34`2.MoveNext()\r\nStack:\r\n   at: System.Environment.FailFast(System.String, System.Exception)\r\n   at: Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at: Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)\r\n   at: System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<GetOrDefaultAsync>d__34`2<System.__Canon,System.__Canon> ByRef)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3<System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<System.__Canon>>, System.Threading.CancellationToken)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<RunAnalyzersAsync>d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<RunAnalyzersAsync>d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<RunAnalyzersAsync>d__32`1<System.__Canon> ByRef)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.RunAnalyzersAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer>, System.__Canon, System.Func`4<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task>, System.Threading.CancellationToken)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<ProcessDocumentAnalyzersAsync>d__31.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<ProcessDocumentAnalyzersAsync>d__31, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ProcessDocumentAnalyzersAsync>d__31 ByRef)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync(Microsoft.CodeAnalysis.Document, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer>, WorkItem, System.Threading.CancellationToken)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ProcessDocumentAsync>d__30.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ProcessDocumentAsync>d__30, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ProcessDocumentAsync>d__30 ByRef)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ProcessDocumentAsync(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer>, WorkItem, System.Threading.CancellationTokenSource)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ExecuteAsync>d__17.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ExecuteAsync>d__17, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ExecuteAsync>d__17 ByRef)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ExecuteAsync()\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+<ProcessAsync>d__12.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ExecuteAsync>d__17.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<TryProcessOneHigherPriorityDocumentAsync>d__28.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+<ProcessDocumentAsync>d__30.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<ProcessDocumentAnalyzersAsync>d__31.MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   konum: System.Threading.Tasks.Task.FinishStageThree()\r\n   konum: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1<System.Threading.Tasks.VoidTaskResult>)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<RunAnalyzersAsync>d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at: System.Threading.Tasks.Task.FinishContinuations()\r\n   at: System.Threading.Tasks.Task.FinishStageThree()\r\n   at: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<>c__DisplayClass32_1`1+<<RunAnalyzersAsync>b__0>d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35991","RelatedDescription":"Open issue \"OutOfMemoryException in CodeAnalysis\" (#35991)"},{"Id":"449014641","IsPullRequest":true,"CreatedAt":"2019-05-28T01:30:21","Actor":"dotnet-bot","Number":"35986","RawContent":null,"Title":"Merge release/dev16.2-preview1 to release/dev16.2-preview2","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview2.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview2\ngit reset --hard upstream/release/dev16.2-preview2\ngit merge upstream/release/dev16.2-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35986","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview1 to release/dev16.2-preview2\" (#35986)"},{"Id":"449014678","IsPullRequest":true,"CreatedAt":"2019-05-28T01:30:15","Actor":"dotnet-bot","Number":"35987","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps\ngit reset --hard upstream/release/dev16.2-preview1-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35987","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps\" (#35987)"},{"Id":"449014688","IsPullRequest":true,"CreatedAt":"2019-05-28T01:30:08","Actor":"dotnet-bot","Number":"35988","RawContent":null,"Title":"Merge release/dev16.2-preview2-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35988","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview2-vs-deps to master-vs-deps\" (#35988)"},{"Id":"448946572","IsPullRequest":false,"CreatedAt":"2019-05-27T17:26:41","Actor":"TessenR","Number":"35985","RawContent":null,"Title":"Lambda expression arguments should use closures nullable state after all of the arguments are evaluated","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (22 May 2019)\r\nLatest commit 04252e by Neal Gafter:\r\nUnskip passing tests. (#35856)\r\n\r\nFixes #35611\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\nusing System;\r\n\r\npublic class C {\r\n    \r\n    public static void Main()\r\n    {\r\n        M(null);\r\n    }\r\n    \r\n    public static void M(string? s) {\r\n        Execute(() => s.ToString(), s = \"\"); // CS8602, no problems at runtime\r\n        Execute(() => s.ToString(), s = null); // no warnings, crashes with an NRE\r\n    }\r\n    \r\n    public static void Execute<T>(Action a, T s) => a();\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nCS8602 Warning for the second invocation of `Execute`.\r\n\r\n**Actual Behavior**:\r\n`warning CS8602: Dereference of a possibly null reference.` is reported for the first invocation.\r\nIf you run the program the first invocation finishes without exceptions whereas the second one that doesn't have any compiler warnings crashes with a `NullReferenceException`\r\n\r\n**Notes**\r\nLambda expression passed as an argument cannot be accessed before other arguments are evaluated therefore they should use closures' state at the moment of containing invocation's evaluation for their data flow analysis. Currently Roslyn uses closures' state at the moment of lambda expressions' declarations.","Url":"https://github.com/dotnet/roslyn/issues/35985","RelatedDescription":"Open issue \"Lambda expression arguments should use closures nullable state after all of the arguments are evaluated\" (#35985)"},{"Id":"448944579","IsPullRequest":false,"CreatedAt":"2019-05-27T17:17:38","Actor":"TessenR","Number":"35984","RawContent":null,"Title":"Inferred nullability of `Nullable<T>` is lost in type arguments' inference","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (22 May 2019)\r\nLatest commit 04252e by Neal Gafter:\r\nUnskip passing tests. (#35856)\r\n\r\nFixes #35611\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code\r\n```cs\r\n#nullable enable\r\npublic class C {\r\n    public void M(int? i, string? s) {\r\n        i = 5;\r\n        s = \"\";\r\n\r\n        // both variables cannot contain null, no warnings\r\n        s.ToString();\r\n        i.Value.ToString();\r\n        \r\n        // assign variables with their inferred types\r\n        s = Id(s);\r\n        i = Id(i);\r\n\r\n        // s is still not null whereas i became nullable\r\n        s.ToString();\r\n        i.Value.ToString();\r\n    }\r\n    \r\n    public T Id<T>(T t) => t;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\n`warning CS8629: Nullable value type may be null.` at the last line of `M`.\r\n\r\nIt seems that unlike reference nullable types inferred nullability of `Nullable<T>` does not affect type arguments' inference.","Url":"https://github.com/dotnet/roslyn/issues/35984","RelatedDescription":"Open issue \"Inferred nullability of `Nullable<T>` is lost in type arguments' inference\" (#35984)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"449601675","IsPullRequest":true,"CreatedAt":"2019-05-29T05:13:52","Actor":"jkotas","Number":"7464","RawContent":null,"Title":"Print descriptive error for GeneratePackageOnBuild","State":"open","Body":"Fixes #7460","Url":"https://github.com/dotnet/corert/pull/7464","RelatedDescription":"Open PR \"Print descriptive error for GeneratePackageOnBuild\" (#7464)"},{"Id":"449548102","IsPullRequest":true,"CreatedAt":"2019-05-29T04:33:43","Actor":"Dotnet-GitSync-Bot","Number":"7461","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @VSadov @stephentoub","Url":"https://github.com/dotnet/corert/pull/7461","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7461)"},{"Id":"449590916","IsPullRequest":false,"CreatedAt":"2019-05-29T04:22:02","Actor":"jkotas","Number":"7463","RawContent":null,"Title":"Missing devirtualization + conversion to stackallocation optimization","State":"open","Body":"```\r\nusing System;\r\n\r\ninterface IMyInterface\r\n{\r\n    void foo();\r\n}\r\n\r\nstruct MyStruct : IMyInterface\r\n{\r\n    public void foo() { }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Work<T>(T s)\r\n    {\r\n        if (s is IMyInterface) ((IMyInterface)s).foo();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        for (int i = 0; i < 10000000; i++)\r\n            Work<MyStruct>(default);\r\n        Console.WriteLine(GC.CollectionCount(0));\r\n    }\r\n}\r\n```\r\n\r\n`dotnet publish -c Release -r win-x64`\r\nActual result: 57\r\nExpected result: 0","Url":"https://github.com/dotnet/corert/issues/7463","RelatedDescription":"Open issue \"Missing devirtualization + conversion to stackallocation optimization\" (#7463)"},{"Id":"449473749","IsPullRequest":true,"CreatedAt":"2019-05-29T00:44:47","Actor":"Dotnet-GitSync-Bot","Number":"7459","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar","Url":"https://github.com/dotnet/corert/pull/7459","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7459)"},{"Id":"449495977","IsPullRequest":false,"CreatedAt":"2019-05-28T21:57:43","Actor":"timmydo","Number":"7460","RawContent":null,"Title":"Publish native shared library fails because project.deps.json not found","State":"open","Body":"csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nprogram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public sealed class NativeCallableAttribute : Attribute\r\n    {\r\n        public string EntryPoint;\r\n        public CallingConvention CallingConvention;\r\n        public NativeCallableAttribute() { }\r\n    }\r\n}\r\n\r\nnamespace BlahBlah\r\n{\r\n    using System;\r\n    using System.Runtime.InteropServices;\r\n\r\n    public static class NativeMethods\r\n    {\r\n        [NativeCallable(EntryPoint = \"Blah\", CallingConvention = CallingConvention.StdCall)]\r\n        public static void Blah(IntPtr blah)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n```\r\nC:\\Users\\timmydo\\source\\repos\\corert1\\corert1\r\nλ  dotnet publish /p:NativeLib=Shared -r win-x64 -c Debug\r\nMicrosoft (R) Build Engine version 16.2.0-preview-19274-01+7708b265e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 758.81 ms for C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj.\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n     Creating library bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.lib and object bin\\Debug\\netstandard2.0\\win-x64\\native\\corert1.exp\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012078\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(152,5): error MSB3030: Could not copy the file \"C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\bin\\Debug\\netstandard2.0\\win-x64\\corert1.deps.json\" because it was not found. [C:\\Users\\timmydo\\source\\repos\\corert1\\corert1\\corert1.csproj]\r\n```\r\n\r\nIt seems the culprit is GeneratePackagesOnBuild. If you remove that, it works.","Url":"https://github.com/dotnet/corert/issues/7460","RelatedDescription":"Open issue \"Publish native shared library fails because project.deps.json not found\" (#7460)"},{"Id":"449408805","IsPullRequest":true,"CreatedAt":"2019-05-28T20:55:22","Actor":"Dotnet-GitSync-Bot","Number":"7458","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7458","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7458)"},{"Id":"448964820","IsPullRequest":true,"CreatedAt":"2019-05-28T20:55:07","Actor":"jkotas","Number":"7454","RawContent":null,"Title":"Fix superfluous delegate allocations in Unix WaitSubsystem","State":"closed","Body":"Fixes #7452","Url":"https://github.com/dotnet/corert/pull/7454","RelatedDescription":"Closed or merged PR \"Fix superfluous delegate allocations in Unix WaitSubsystem\" (#7454)"},{"Id":"448595379","IsPullRequest":false,"CreatedAt":"2019-05-28T20:55:07","Actor":"jkotas","Number":"7452","RawContent":null,"Title":"Waiting on WaitHandle allocates on Unix","State":"closed","Body":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    static EventWaitHandle e = new EventWaitHandle(false, EventResetMode.AutoReset);\r\n\r\n    static void Work()\r\n    {\r\n        for (; ; ) e.Set();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        new Thread(Work).Start();\r\n\r\n        int start = Environment.TickCount;\r\n        for (int i = 0; i < 1000000; i++)\r\n        {\r\n            e.WaitOne();\r\n        }\r\n        int end = Environment.TickCount;\r\n        Console.WriteLine($\"Time: {end-start}\");\r\n        Console.WriteLine($\"GCs: {GC.CollectionCount(0)}\");\r\n    }\r\n}\r\n```\r\n\r\nExpected result: GCs: 0\r\nActual result: GCs: 30+","Url":"https://github.com/dotnet/corert/issues/7452","RelatedDescription":"Closed issue \"Waiting on WaitHandle allocates on Unix\" (#7452)"},{"Id":"449179795","IsPullRequest":true,"CreatedAt":"2019-05-28T15:30:22","Actor":"Dotnet-GitSync-Bot","Number":"7457","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7457","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7457)"},{"Id":"449038942","IsPullRequest":true,"CreatedAt":"2019-05-28T06:28:24","Actor":"Dotnet-GitSync-Bot","Number":"7456","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/corert/pull/7456","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7456)"},{"Id":"449012492","IsPullRequest":true,"CreatedAt":"2019-05-27T23:41:22","Actor":"tonerdo","Number":"7455","RawContent":null,"Title":"[Intepreter] Method Call","State":"open","Body":"This WIP PR calling static or non-virtual instance methods. It adds support for the following opcode:\r\n\r\n* `call`\r\n\r\nwhich should allow methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static void CallMethod()\r\n{\r\n    Console.WriteLine(\"Hello World Intepreted\");\r\n}\r\n```\r\n\r\nAt this time it doesn't actually work, it doesn't throw an error either nor does the program return a non-zero exit code. I need help figuring out what is wrong.\r\n\r\ncc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/pull/7455","RelatedDescription":"Open PR \"[Intepreter] Method Call\" (#7455)"},{"Id":"448546712","IsPullRequest":false,"CreatedAt":"2019-05-27T13:39:53","Actor":"zhangchaoza","Number":"7451","RawContent":null,"Title":"libucrt.lib error","State":"closed","Body":"When I compile a application on Windows  ,I get this error:\r\n\r\n`LINK : fatal error LNK1104: 无法打开文件“libucrt.lib”`\r\n\r\nDetails:\r\n\r\n```\r\nD:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj 的还原在 74.63 ms 内完成。\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(157,5): message NETSDK1057: 你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\n  MakeGenericMethodDemo -> D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\bin\\Release\\netcoreapp3.0\\win-x64\\MakeGenericMethodDemo.dll\r\nLINK : fatal error LNK1104: 无法打开文件“libucrt.lib” [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\nC:\\Users\\zacka\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(333,5): error MSB3073: 命令“\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64\\link.exe\"  @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\link.rsp\"”已退出，代码为 1104。 [D:\\Source\\GitHub\\zhangchao\\corert-samples\\MakeGenericMethodDemo\\MakeGenericMethodDemo.csproj]\r\n```\r\n\r\nOS:win10 18898.1000\r\ndotnet core:3.0.100-preview5-011568\r\ncorert:1.0.0-alpha-27527-01\r\nvs:vs2017 \r\n\r\nIs there any ways to resolve this error?","Url":"https://github.com/dotnet/corert/issues/7451","RelatedDescription":"Closed issue \"libucrt.lib error\" (#7451)"},{"Id":"448624826","IsPullRequest":false,"CreatedAt":"2019-05-27T00:41:54","Actor":"KodrAus","Number":"7453","RawContent":null,"Title":"ASP.NET Core 3.0 hits GetRuntimeInterfaceMap() is not supported on this runtime","State":"open","Body":"Using the preview .NET SDK `3.0.100-preview5-011568` with target framework: `netcoreapp3.0`.\r\n\r\nIt looks like the latest preview versions of ASP.NET Core MVC use `GetRuntimeInterfaceMap`, which isn't supported by CoreRT:\r\n\r\n```\r\nSystem.PlatformNotSupportedException: GetRuntimeInterfaceMap() is not supported on this runtime.\r\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.GetInterfaceMap(Type) + 0x4f\r\n   at System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type) + 0x8b\r\n   at Microsoft.Extensions.Internal.AwaitableInfo.IsTypeAwaitable(Type, AwaitableInfo&) + 0x3b1\r\n   at Microsoft.Extensions.Internal.CoercedAwaitableInfo.IsTypeAwaitable(Type, CoercedAwaitableInfo&) + 0x3d\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor..ctor(MethodInfo, TypeInfo, Object[]) + 0x163\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Create(MethodInfo, TypeInfo, Object[]) + 0x75\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache.GetCachedResult(ControllerContext) + 0x156\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerProvider.OnProvidersExecuting(ActionInvokerProviderContext) + 0x148\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionInvokerFactory.CreateInvoker(ActionContext) + 0x8f\r\n```\r\n\r\nRight now, I'm only hitting this on _async_ action results. So:\r\n\r\n```csharp\r\npublic async Task<ActionResult> Set(string id)\r\n{\r\n    await SomeCall(id);\r\n    return Ok();\r\n}\r\n```\r\n\r\nwill hit this, but something like:\r\n\r\n```csharp\r\npublic ActionResult Set(string id)\r\n{\r\n    // Where `Defer` captures a `Action<Task>` that is executed\r\n    // in the `OnActionExecuted` call\r\n    return Defer(async () => await SomeCall(id));\r\n}\r\n```\r\n\r\nwill execute successfully.","Url":"https://github.com/dotnet/corert/issues/7453","RelatedDescription":"Open issue \"ASP.NET Core 3.0 hits GetRuntimeInterfaceMap() is not supported on this runtime\" (#7453)"},{"Id":"448520212","IsPullRequest":true,"CreatedAt":"2019-05-26T05:45:17","Actor":"Dotnet-GitSync-Bot","Number":"7450","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7450","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7450)"},{"Id":"448356067","IsPullRequest":true,"CreatedAt":"2019-05-25T18:34:42","Actor":"Dotnet-GitSync-Bot","Number":"7449","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7449","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7449)"},{"Id":"448322147","IsPullRequest":true,"CreatedAt":"2019-05-25T00:10:07","Actor":"nattress","Number":"7448","RawContent":null,"Title":"Restore CoreCLRRuntime on Linux","State":"closed","Body":"When running tests, invoke the test build to restore the runtime / corefx / corerun to a well known folder needed to run Ready-to-run tests against.\r\n\r\nThe actual running of R2R tests is not enabled yet since we need to fix an issue with PE section virtual address offsets","Url":"https://github.com/dotnet/corert/pull/7448","RelatedDescription":"Closed or merged PR \"Restore CoreCLRRuntime on Linux\" (#7448)"},{"Id":"448192547","IsPullRequest":true,"CreatedAt":"2019-05-24T17:01:11","Actor":"Dotnet-GitSync-Bot","Number":"7447","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @dotnet-maestro-bot","Url":"https://github.com/dotnet/corert/pull/7447","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7447)"},{"Id":"447805291","IsPullRequest":true,"CreatedAt":"2019-05-24T16:07:28","Actor":"trylek","Number":"7443","RawContent":null,"Title":"CPAOT large version bubble bugfixes","State":"closed","Body":"I have finally identified the reason for various recent inconsistencies\r\nwe were recently hitting in large version bubble testing. As the\r\nR2R major version number was recently bumped to 3 in CoreCLR, it\r\ngot out of sync with the value 2 we have in CoreClrRuntime used\r\nfor CPAOT testing in the CoreRT repo. For this reason all recent\r\ntesting performed against the CoreCLR version of Core_Root was\r\nsilently switching over to JIT; this included my recent local\r\nlarge version bubble testing - while R2RDump was dumping the R2R\r\nfile content correctly and let me fix most issues, some problems\r\nnaturally remained and only popped up at runtime:\r\n\r\n1) NewArrayFixupSignature wasn't properly switching over to the\r\ninner signature context when emitting the array type signature.\r\n\r\n2) SignatureBuilder was emitting incorrect signature for fields\r\non instantiated types (this only popped up after inlining parts\r\nof CoreLib into the unit test).\r\n\r\n3) In SignatureContext, we should call the token resolution logic\r\nwhen determining field tokens as for fields encoded using refs\r\nthe reference module is the module containing the ref, not\r\nnecessarily the reference module for its owning type.\r\n\r\n4) In CorInfoImpl.ReadyToRun, the logic for encoding string literals\r\nwas incorrect in large version bubble mode in the presence of\r\ninlining - we need to use the context module passed along with the\r\nstring token, not the input module.\r\n\r\n5) ManifestMetadataTableNode was incorrectly encoding public key\r\ntokens for the AssemblyRefs.\r\n\r\n6) I previously overlooked the fact that the BadImageFormatException\r\nthrown for native assemblies is a variation of the type local\r\nto TypeSystemException.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. With this change the CoreCLR JIT test suite has about 93% pass\r\nrate. I suspect I understand some of the remaining failures but\r\nI wanted to send this our early as I'm going to be mostly OOF\r\nfor the rest of this week.\r\n","Url":"https://github.com/dotnet/corert/pull/7443","RelatedDescription":"Closed or merged PR \"CPAOT large version bubble bugfixes\" (#7443)"},{"Id":"447312328","IsPullRequest":true,"CreatedAt":"2019-05-24T15:22:47","Actor":"tannergooding","Number":"7441","RawContent":null,"Title":"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta2-19272-03","State":"closed","Body":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nCoreRT side for https://github.com/dotnet/arcade/pull/2856 and https://github.com/dotnet/buildtools/pull/2256","Url":"https://github.com/dotnet/corert/pull/7441","RelatedDescription":"Closed or merged PR \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta2-19272-03\" (#7441)"},{"Id":"447966173","IsPullRequest":true,"CreatedAt":"2019-05-24T14:08:31","Actor":"Dotnet-GitSync-Bot","Number":"7446","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @safern","Url":"https://github.com/dotnet/corert/pull/7446","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7446)"},{"Id":"447913967","IsPullRequest":true,"CreatedAt":"2019-05-24T03:44:16","Actor":"Dotnet-GitSync-Bot","Number":"7445","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @davidwrighton","Url":"https://github.com/dotnet/corert/pull/7445","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7445)"},{"Id":"447842862","IsPullRequest":true,"CreatedAt":"2019-05-24T01:40:30","Actor":"nattress","Number":"7444","RawContent":null,"Title":"Update CoreCLR and framework for R2R tests","State":"closed","Body":"In Preview5, the R2R format version was bumped to 3.0. Roll forward to 3.0 and test against a more recent runtime that supports 3.0 ready-to-run image format.","Url":"https://github.com/dotnet/corert/pull/7444","RelatedDescription":"Closed or merged PR \"Update CoreCLR and framework for R2R tests\" (#7444)"},{"Id":"447361022","IsPullRequest":true,"CreatedAt":"2019-05-23T18:31:54","Actor":"Dotnet-GitSync-Bot","Number":"7442","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @marek-safar","Url":"https://github.com/dotnet/corert/pull/7442","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7442)"},{"Id":"446206809","IsPullRequest":true,"CreatedAt":"2019-05-23T01:25:12","Actor":"trylek","Number":"7437","RawContent":null,"Title":"Initial script changes to enable CPAOT on Linux","State":"closed","Body":"This is a small set of script changes I made to enable\r\nCPAOT build on Linux. I have basically added the new\r\noption to runtest.sh and fixed a few trivial issues\r\nI hit in my local testing. I haven't yet figured out\r\nhow to cleanly pull down the CoreClrRuntime folder,\r\nfor now I'm copying it over manually from a live CoreCLR\r\nbuild on my DTL VM.\r\n\r\nWith these changes (and after manually copying the Core_Root\r\nfolder from CoreCLR to bin/obj/Linux.x64.Debug/CoreClrRuntme)\r\nI'm able to build the ReadyToRunUnit test. Sadly it doesn't\r\nrun yet, corerun claims that \"coreclr_initialize failed:\r\n0x80070057\"; I have however found out that I'm receiving\r\nexactly the same error when trying to run the same test\r\ncompiled with Crossgen so I guess it's rather a problem\r\nwith my local enlistment and / or build. I'm looking into\r\nthis right now.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7437","RelatedDescription":"Closed or merged PR \"Initial script changes to enable CPAOT on Linux\" (#7437)"},{"Id":"446926910","IsPullRequest":true,"CreatedAt":"2019-05-22T15:34:12","Actor":"Dotnet-GitSync-Bot","Number":"7440","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @mikernet","Url":"https://github.com/dotnet/corert/pull/7440","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7440)"},{"Id":"446854506","IsPullRequest":true,"CreatedAt":"2019-05-22T04:25:11","Actor":"Dotnet-GitSync-Bot","Number":"7439","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7439","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7439)"},{"Id":"445642704","IsPullRequest":true,"CreatedAt":"2019-05-21T22:34:36","Actor":"Suchiman","Number":"7434","RawContent":null,"Title":"Port GC changes from coreclr - 9","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n","Url":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 9\" (#7434)"},{"Id":"446251764","IsPullRequest":true,"CreatedAt":"2019-05-21T22:33:34","Actor":"Dotnet-GitSync-Bot","Number":"7438","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AArnott","Url":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7438)"},{"Id":"445756425","IsPullRequest":true,"CreatedAt":"2019-05-18T21:35:30","Actor":"trylek","Number":"7436","RawContent":null,"Title":"SuperIlc fixes for building the entire Pri#1 suite","State":"open","Body":"After adding support for the issues.targets file I became\r\nable to run the entire Pri# 1 test suite using SuperIlc.\r\nThis change fixes issues uncovered by this more extensive\r\ntesting.\r\n\r\n1) We need to slightly special-case the Core_Root folder\r\nas it technically lies under the CoreCLR\\bin\\tests\\(cfg)\r\nfolder; when building this entire folder, SuperIlc used to\r\npick it up as one of the folders to compile and was\r\nsubsequently racing between the build of this folder and\r\nof the tests that refer to it in CPAOT framework mode.\r\n\r\n2) BuildFolder construction was collecting test references\r\ntoo early i.e. before the framework was built. I came to\r\nthe conclusion that this is a general problem stemming from\r\nthe fact that ProcessInfo was an arbitrary mixture of the\r\nprocess parameters and the state machine used during the\r\nactual build. I have cleaned this up by separating the\r\nparameter file into a new class ProcessParameters; this let\r\nme add logic for constructing the actual paramterers later.\r\n\r\n3) I have added new options to specify explicit compilation\r\nand execution timeouts to add at least minimum support for\r\nlong-building and long-running tests.\r\n\r\n4) I have parallelized folder deletion and subtree lookup\r\nto improve their performance.\r\n\r\n5) I have added caching to the check for managed assemblies.\r\nPreviously, in the Pri# 1 tests we used to open framework\r\nassemblies about 3 million times just for the purpose of\r\nthis lookup.\r\n\r\n6) I have reduced the batch size for running ETW processes\r\nfrom 100 to 10 as the larger number of events collected\r\nwithin a single session was apparently slowing down test\r\nexecution.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7436","RelatedDescription":"Open PR \"SuperIlc fixes for building the entire Pri#1 suite\" (#7436)"},{"Id":"445661755","IsPullRequest":true,"CreatedAt":"2019-05-18T05:14:47","Actor":"Dotnet-GitSync-Bot","Number":"7435","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7435","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7435)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"449528087","IsPullRequest":true,"CreatedAt":"2019-05-29T00:02:08","Actor":"dotnet-bot","Number":"3270","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3270","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3270)"},{"Id":"449528063","IsPullRequest":true,"CreatedAt":"2019-05-29T00:02:03","Actor":"dotnet-bot","Number":"3269","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3269","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3269)"},{"Id":"447922530","IsPullRequest":true,"CreatedAt":"2019-05-28T21:32:50","Actor":"dotnet-bot","Number":"3264","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3264","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3264)"},{"Id":"447922517","IsPullRequest":true,"CreatedAt":"2019-05-28T17:13:22","Actor":"dotnet-bot","Number":"3263","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3263","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#3263)"},{"Id":"448585673","IsPullRequest":true,"CreatedAt":"2019-05-26T16:52:47","Actor":"dsplaisted","Number":"3268","RawContent":null,"Title":"Use PackageDownload in VS, fix design time build failures","State":"open","Body":"- Use PackageDownload when supported on full MSBuild.  Fixes https://github.com/dotnet/cli/issues/10440\r\n- Don't fail design-time builds when the target framework or RuntimeIdentifier doesn't match what's in the (now outdated) assets file.  Fixes #2322\r\n  - I'd like to add tests to cover this, but haven't yet","Url":"https://github.com/dotnet/sdk/pull/3268","RelatedDescription":"Open PR \"Use PackageDownload in VS, fix design time build failures\" (#3268)"},{"Id":"448511917","IsPullRequest":false,"CreatedAt":"2019-05-25T23:33:24","Actor":"run1206","Number":"3267","RawContent":null,"Title":"Verbiage of success message on 32bit .NET Core 2.2 SDK has wrong folder location","State":"open","Body":"After the 32-bit .NET Core 2.2 SDK finishes installing, the success message reads:\r\n\"The following were installed at C:\\Program Files\\dotnet...\"\r\nThe SDK files are correctly saved in the 32-bit location, but the folder location in the message is for the 64-bit SDK location.\r\n\r\nPlease see attached image for reference.\r\n![20190525_192301](https://user-images.githubusercontent.com/16143658/58375537-50576b00-7f23-11e9-8ea4-762ea46fa727.jpg)\r\n\r\nSuccess message should point to \"C:\\Program Files (x86)\\dotnet\\\" for the 32bit installer.","Url":"https://github.com/dotnet/sdk/issues/3267","RelatedDescription":"Open issue \"Verbiage of success message on 32bit .NET Core 2.2 SDK has wrong folder location\" (#3267)"},{"Id":"448467678","IsPullRequest":false,"CreatedAt":"2019-05-25T14:01:14","Actor":"DoCode","Number":"3266","RawContent":null,"Title":"dotnet msbuild -t:restore or -t:publish : NU1201: Not compatible with netcoreapp2.2","State":"open","Body":"### Steps to reproduce\r\n\r\nI try to restore and publish a cross-targeting and cross-platform project with netcoreapp/netstandard/net472 and linux-x64/win-x64 mix-match with:\r\n```ps1\r\n# Restoring:\r\ndotnet msbuild -t:restore -p:targetframework=net472 -p:runtimeidentifier=win-x64 Api.csproj\r\n# OR\r\ndotnet msbuild -t:restore -p:targetframework=netcoreapp2.2 -p:runtimeidentifier=linux-x64 Api.csproj\r\n\r\n# AND publishing:\r\ndotnet msbuild -t:publish -p:targetframework=net472 -p:runtimeidentifier=win-x64 Api.csproj\r\n# OR\r\ndotnet msbuild -t:publish -p:targetframework=netcoreapp2.2 -p:runtimeidentifier=linux-x64 Api.csproj\r\n```\r\n\r\n#### The projects\r\n**Api.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.2;net472</TargetFrameworks>\r\n    <RuntimeIdentifiers>linux-x64;win-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n    <ProjectReference Include=\"Store.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Core.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n**Store.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Sdk.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Core.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n**Cli.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Sdk.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe projects should be restored for all TFM's and RID's.\r\n\r\n### Actual behavior\r\n\r\nThe following error is thrown:\r\n```\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2). Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2). Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / linux-x64. Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / linux-x64. Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Core is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / win-x64. Project Core supports: net472 (.NETFramework,Version=v4.7.2)\r\nD:\\projects\\_lab\\dotnet-sdk-issues\\msbuild-restore\\Api.csproj : error NU1201: Project Store is not compatible with netcoreapp2.2 (.NETCoreApp,Version=v2.2) / win-x64. Project Store supports: net472 (.NETFramework,Version=v4.7.2)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3266","RelatedDescription":"Open issue \"dotnet msbuild -t:restore or -t:publish : NU1201: Not compatible with netcoreapp2.2\" (#3266)"},{"Id":"447336615","IsPullRequest":true,"CreatedAt":"2019-05-25T03:43:49","Actor":"dsplaisted","Number":"3259","RawContent":null,"Title":"Support WPF and WindowsForms-specific FrameworkReferences via profiles","State":"closed","Body":"This PR supports referencing only Windows Forms or only WPF assets from the WindowsDesktop targeting pack.  See https://github.com/dotnet/cli/issues/10536.\r\n\r\nThis is done by supporting the following additional FrameworkReferences:\r\n\r\n- Microsoft.WindowsDesktop.App.WindowsForms\r\n- Microsoft.WindowsDesktop.App.WPF\r\n\r\nIn the implementation, a KnownFrameworkReference can specify a Profile of the targeting pack via metadata.  https://github.com/dotnet/core-setup/issues/6210 tracks adding this information to the WindowsDesktop FrameworkList.xml.  Until then, this PR hard-codes the assemblies which are in each profile.\r\n\r\nAfter this is merged, the WindowsDesktop SDK should be updated to use the .WindowsForms or .WPF FrameworkReference depending on if the `UseWPF` or `UseWindowsForms` properties are set.  If both of them are set, it should use the base Microsoft.WindomwsDesktop.App FrameworkReference, which will include the integration DLL.\r\n\r\n@nguerrera @vatsan-madhavan","Url":"https://github.com/dotnet/sdk/pull/3259","RelatedDescription":"Closed or merged PR \"Support WPF and WindowsForms-specific FrameworkReferences via profiles\" (#3259)"},{"Id":"448393743","IsPullRequest":false,"CreatedAt":"2019-05-25T00:37:41","Actor":"vatsan-madhavan","Number":"3265","RawContent":null,"Title":"WPF Theme Assemblies are not usable under the current FrameworkReference design","State":"open","Body":"See discussion in https://github.com/dotnet/sdk/pull/3259 for context. \r\n\r\nBackground: \r\n\r\nWPF's theme assemblies (`PresentationFramework.Aero`, `PresentationFramework.Aero2`, `PresentationFramework.AeroLite`, `PresentationFramework.Classic`, `PresentationFramework.Luna` and `PresentationFramework.Royale`) expose the same types. \r\n\r\nFor e.g., [DataGridHeaderBorder](https://docs.microsoft.com/en-us/dotnet/api/microsoft.windows.themes.datagridheaderborder?view=netframework-4.8). \r\n\r\nThese assemblies can be used in two ways. \r\n\r\nTypically, they are used as resource assemblies. i.e., they are not referenced from the project, and instead, XAML resources within them are consumed  as resources using `<ResourceDictionary ..>`. When used this way, all of these assemblies can (and often are) used in to supply themes contextually (i.e., depending on the system theme, for e.g., or some other user preference). \r\n\r\nLess commonly, they are directly referenced and their types are either consumed in XAML or directly in code. When used this way, only one assembly can be referenced directly. If more than one assembly needs to be referenced, namespace aliasing has to be used. \r\n\r\nProblem: \r\n\r\nThe current SDK/FrameworkReference design in .NET Core _always_ enables references to each of these assemblies. This makes them virtually unusable. We need a better scheme/solution. \r\n\r\n/cc @nguerrera, @rladuca, @dsplaisted \r\ncc @dotnet/wpf-developers \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3265","RelatedDescription":"Open issue \"WPF Theme Assemblies are not usable under the current FrameworkReference design\" (#3265)"},{"Id":"447804307","IsPullRequest":true,"CreatedAt":"2019-05-25T00:06:31","Actor":"nguerrera","Number":"3262","RawContent":null,"Title":"Fix StrBegin comments in resx and enforce them in test","State":"closed","Body":"Reported by @janbaltus","Url":"https://github.com/dotnet/sdk/pull/3262","RelatedDescription":"Closed or merged PR \"Fix StrBegin comments in resx and enforce them in test\" (#3262)"},{"Id":"446933661","IsPullRequest":false,"CreatedAt":"2019-05-23T20:49:39","Actor":"RayKoopa","Number":"3256","RawContent":null,"Title":"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)","State":"closed","Body":"I'm using 3.0.100-preview5-011568 in VS 16.2.0 Preview 1.0 and the following sample C# console application:\r\n\r\n**project.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableContextOptions>enable</NullableContextOptions>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n**Program.cs**\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            String? x = \"Test\";\r\n            Console.WriteLine(x);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDespite having set `NullableContextOptions` to `enable` in the project file, I receive the warning **CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.** on the `String?` question mark character.\r\n\r\nSimilarly, another project cannot be compiled anymore due to **CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.** when using `T?` for a generic class type method parameter:\r\n```cs\r\npublic void WriteOptional<T>(in T? value) where T : class, IWritable\r\n```\r\n\r\nWhen adding `#nullabe enable` to the top of the file(s) causing the warning, it is gone. It's like the project element lost its functionality after upgrading to VS 16.2.0? I did not change the SDK preview version and could compile the same sources correctly in 16.1.0.\r\n\r\nI'm not sure if https://github.com/dotnet/sdk/issues/3245 is relevant here.","Url":"https://github.com/dotnet/sdk/issues/3256","RelatedDescription":"Closed issue \"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)\" (#3256)"},{"Id":"447399445","IsPullRequest":true,"CreatedAt":"2019-05-23T17:22:55","Actor":"dsplaisted","Number":"3260","RawContent":null,"Title":"Switch to hosted Mac pool for CI","State":"closed","Body":"DotNetCore-Mac pool is being retired.","Url":"https://github.com/dotnet/sdk/pull/3260","RelatedDescription":"Closed or merged PR \"Switch to hosted Mac pool for CI\" (#3260)"},{"Id":"447721754","IsPullRequest":false,"CreatedAt":"2019-05-23T15:12:36","Actor":"rainersigwald","Number":"3261","RawContent":null,"Title":"Consider making runtime target assets available as an item","State":"open","Body":"In part of the MSBuild build that attempts to assemble a set of build tools to make a usable MSBuild distribution (sort of a mini-`core-sdk` for our own bootstrap purposes), we extracted some specific items to copy from the `@(RuntimeCopyLocalItems)` and `@(ResolvedRuntimeTargets)` items output by `ResolvePackageAssets`:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/0411d07a7853af88f2555dd84258c005bdce709c/eng/BootStrapMSBuild.targets#L31-L41\r\n\r\nIn 3.0-preview5, `@(ResolvedRuntimeTargets)` was renamed to `@(RuntimeTargetsCopyLocalItems)`, and it is not populated in full framework builds, unless the explicit opt-out `$(DisableRuntimeTargets)` is set to `false`.\r\n\r\nIt might be worth creating the items for explicit use by custom targets, and just not adding them to the default copy local/publish items in the full framework build.","Url":"https://github.com/dotnet/sdk/issues/3261","RelatedDescription":"Open issue \"Consider making runtime target assets available as an item\" (#3261)"},{"Id":"446888312","IsPullRequest":true,"CreatedAt":"2019-05-22T20:40:34","Actor":"wli3","Number":"3255","RawContent":null,"Title":"Fix generate package on build pack as tool","State":"closed","Body":"NuGet/Home#7801\r\n\r\n(the easiest way to understand that is)since nuget no longer sets NoBuild on GeneratePackageOnBuild, we need to do similar logic to get the previous state.\r\n\r\nfix https://github.com/dotnet/sdk/issues/3253","Url":"https://github.com/dotnet/sdk/pull/3255","RelatedDescription":"Closed or merged PR \"Fix generate package on build pack as tool\" (#3255)"},{"Id":"446882523","IsPullRequest":false,"CreatedAt":"2019-05-22T20:40:34","Actor":"dsplaisted","Number":"3253","RawContent":null,"Title":"Project with PackAsTool and GeneratePackageOnBuild set to true fails to build","State":"closed","Body":"Tests in `GivenThatWeWantToPackAToolProjectWithGeneratePackageOnBuild` are failing with:\r\n\r\n> C:\\git\\dotnet-sdk\\artifacts\\bin\\Debug\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(337,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\git\\dotnet-sdk\\artifacts\\tmp\\Debug\\It_builds_suc---81F3C59C\\App\\consoledemo.csproj]\r\n\r\nThis regressed with a recent NuGet insertion.","Url":"https://github.com/dotnet/sdk/issues/3253","RelatedDescription":"Closed issue \"Project with PackAsTool and GeneratePackageOnBuild set to true fails to build\" (#3253)"},{"Id":"447330125","IsPullRequest":true,"CreatedAt":"2019-05-22T20:33:05","Actor":"wli3","Number":"3258","RawContent":null,"Title":"Perf wpf winform hello world","State":"open","Body":"I will clean up the commit after the review","Url":"https://github.com/dotnet/sdk/pull/3258","RelatedDescription":"Open PR \"Perf wpf winform hello world\" (#3258)"},{"Id":"447233563","IsPullRequest":false,"CreatedAt":"2019-05-22T16:28:58","Actor":"sbomer","Number":"3257","RawContent":null,"Title":"Double write during publish","State":"open","Body":"Publishing a self-contained WPF template app writes some files twice because `ResolvedFileToPublish` has the same dll from different runtime packs (for example, Microsoft.Win32.Registry.dll comes from both netcoreapp and the windowsdesktop pack).\r\nThis causes crossgen failures when used together with `PublishReadyToRun=true`.\r\n\r\nLooks very similar to https://github.com/dotnet/sdk/issues/3035 which was addressed in https://github.com/dotnet/sdk/pull/3021, but I'm still seeing this with version `3.0.100-preview6-012031`.\r\n\r\n/cc @fadimounir @nguerrera @peterhuene \r\n\r\nedit: it fails during `PublishReadyToRun=true` only when used together with the linker. Without linking, the duplicates are already crossgen'd, and so they don't hit the failure. In any case, `ResolvedFileToPublish` has duplicates that shouldn't be there, and we end up with `DoubleWrites` of some files.\r\n\r\n<img width=\"565\" alt=\"image\" src=\"https://user-images.githubusercontent.com/787361/58192612-00a04780-7c76-11e9-8ffc-102d4b993fb2.png\">\r\n","Url":"https://github.com/dotnet/sdk/issues/3257","RelatedDescription":"Open issue \"Double write during publish\" (#3257)"},{"Id":"446827153","IsPullRequest":true,"CreatedAt":"2019-05-22T05:25:30","Actor":"dsplaisted","Number":"3252","RawContent":null,"Title":"Update NuGet","State":"closed","Body":"Replacement for #3243, on top of #3250 which should hopefully fix things.","Url":"https://github.com/dotnet/sdk/pull/3252","RelatedDescription":"Closed or merged PR \"Update NuGet\" (#3252)"},{"Id":"446885292","IsPullRequest":false,"CreatedAt":"2019-05-22T00:56:10","Actor":"vatsan-madhavan","Number":"3254","RawContent":null,"Title":"deps.json for ProjectReferences is not emitted correctly","State":"open","Body":"When I create a project with a project reference like this...\r\n\r\n```XML\r\n<ProjectReference Include=\"..\\WindowsBase.csproj\" />\r\n```\r\n\r\n... the `deps.json` file that's generated has an entry like this:\r\n\r\n```json\r\n      \"WindowsBase/1.0.0\": {\r\n        \"runtime\": {\r\n          \"WindowsBase.dll\": {}\r\n        }\r\n      }\r\n```\r\nThe application loads `WindowsBase` from `Microsoft.NetCore.App` instead of loading the one supplied by the referenced project. \r\n\r\n[Repro: XUnitTestProject1.zip](https://github.com/dotnet/sdk/files/3205090/XUnitTestProject1.zip)\r\n\r\n/cc @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3254","RelatedDescription":"Open issue \"deps.json for ProjectReferences is not emitted correctly\" (#3254)"},{"Id":"446345530","IsPullRequest":true,"CreatedAt":"2019-05-21T18:34:59","Actor":"dsplaisted","Number":"3250","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Should unblock #3243","Url":"https://github.com/dotnet/sdk/pull/3250","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3250)"},{"Id":"446443251","IsPullRequest":false,"CreatedAt":"2019-05-21T06:45:04","Actor":"davidfowl","Number":"3251","RawContent":null,"Title":"deps.json file has empty compilationOptions section","State":"open","Body":"Likely a result of the migration to the new JSON APIs\r\n\r\n```JSON\r\n{\r\n  \"runtimeTarget\": {\r\n    \"name\": \".NETCoreApp,Version=v3.0\",\r\n    \"signature\": \"\"\r\n  },\r\n  \"compilationOptions\": {},\r\n  \"targets\": {\r\n    \".NETCoreApp,Version=v3.0\": {\r\n      \"ConsoleApp1/1.0.0\": {\r\n        \"runtime\": {\r\n          \"ConsoleApp1.dll\": {}\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"libraries\": {\r\n    \"ConsoleApp1/1.0.0\": {\r\n      \"type\": \"project\",\r\n      \"serviceable\": false,\r\n      \"sha512\": \"\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\ncc @ahsonkhan @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3251","RelatedDescription":"Open issue \"deps.json file has empty compilationOptions section\" (#3251)"},{"Id":"445519479","IsPullRequest":false,"CreatedAt":"2019-05-20T17:14:41","Actor":"sebastienros","Number":"3245","RawContent":null,"Title":"NullableContextOptions error during build","State":"closed","Body":"Using the latest build of the SDK, since yesterday.\r\n\r\n```\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(156,10): error MSB4064: The \"NullableContextOptions\" parameter is not supported by the \"Csc\" task. Verify the parameter exists on the task, and it is a settable public instance property. [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(120,5): error MSB4063: The \"Csc\" task could not be initialized with its input parameters.  [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3245","RelatedDescription":"Closed issue \"NullableContextOptions error during build\" (#3245)"},{"Id":"446041376","IsPullRequest":false,"CreatedAt":"2019-05-20T10:31:08","Actor":"fubar-coder","Number":"3249","RawContent":null,"Title":"*.dll.config from package reference not copied to output on publish","State":"open","Body":"# Description\r\n\r\nIt seems that the `*.dll.config` files from a package reference aren't copied to the output directory during a `dotnet publish`.\r\n\r\n# Use case\r\n\r\nI stumbled across this problem while consuming my `FubarDev.PamSharp` package, which **requires** having the ´.dll.config` file, because it contains a `dllmap` that is needed to find the correct native library.\r\n\r\n# `dotnet --info`\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/fubar-coder/dotnet/sdk/3.0.100-preview5-011568/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011568 [/home/fubar-coder/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/home/fubar-coder/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/home/fubar-coder/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# System information\r\n\r\nWindows 10 Pro for Workstation 1809 (Build 17763.475)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3249","RelatedDescription":"Open issue \"*.dll.config from package reference not copied to output on publish\" (#3249)"},{"Id":"445620306","IsPullRequest":true,"CreatedAt":"2019-05-17T23:25:17","Actor":"wli3","Number":"3248","RawContent":null,"Title":"Remove _WriteAppConfigWithSupportedRuntime Input dependency ","State":"closed","Body":"on ResolveAssemblyReferencesStateFile\r\n\r\nfix https://github.com/dotnet/sdk/issues/3131\r\n\r\nI tried to get a repro in test. However, I cannot pin down a minimal repro to cause rar cache file to be invalid between builds.\r\n\r\ncc @KirillOsenkov","Url":"https://github.com/dotnet/sdk/pull/3248","RelatedDescription":"Closed or merged PR \"Remove _WriteAppConfigWithSupportedRuntime Input dependency \" (#3248)"},{"Id":"445606690","IsPullRequest":true,"CreatedAt":"2019-05-17T22:37:25","Actor":"peterhuene","Number":"3247","RawContent":null,"Title":"Copy runtime pack resource assemblies on self-contained build/publish.","State":"closed","Body":"This commit implements copying resource assemblies for self-contained\r\nbuild/publish from runtime packs.\r\n\r\nCloses #3068.","Url":"https://github.com/dotnet/sdk/pull/3247","RelatedDescription":"Closed or merged PR \"Copy runtime pack resource assemblies on self-contained build/publish.\" (#3247)"},{"Id":"445600954","IsPullRequest":true,"CreatedAt":"2019-05-17T22:09:36","Actor":"dsplaisted","Number":"3246","RawContent":null,"Title":"Skip tests where .NET Core version they use isn't supported on current OS","State":"closed","Body":"Update some tests to skip running if the current operating system doesn't support the right version of .NET Core.\r\n\r\nThis will help run the sdk tests in dotnet/core-sdk, which tests more operating systems than this repo does.","Url":"https://github.com/dotnet/sdk/pull/3246","RelatedDescription":"Closed or merged PR \"Skip tests where .NET Core version they use isn't supported on current OS\" (#3246)"},{"Id":"445498451","IsPullRequest":false,"CreatedAt":"2019-05-17T15:29:08","Actor":"fr0","Number":"3244","RawContent":null,"Title":"How to set version metadata?","State":"open","Body":"1. I want to use the `VersionPrefix` property inside my `csproj` to define my package's semver 2.0 (3-part) version.\r\n2. I want to attach a 4th part and build metadata on the command line.\r\n\r\nIn other words, I want to have the version be, e.g. \"1.2.3.4+f0c432\"\r\n\r\nWhere `1.2.3` is stored in the `csproj`\r\nand `.4` comes from the CI environment\r\nand `+40c432` is the commit hash.\r\n\r\nThe problem I've run into is that using `--version-suffix` automatically makes it a pre-release version, which I don't want.\r\n\r\nEven if I ignore the 4th number (build number), I can't even do this:\r\n\r\n```\r\ndotnet build MyProj  --version-suffix \"+f0c432\"\r\n```\r\n\r\nBecause:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/2.2.107/NuGet.targets(114,5): error : '1.2.3-+f0c432' is not a valid version string\r\n```","Url":"https://github.com/dotnet/sdk/issues/3244","RelatedDescription":"Open issue \"How to set version metadata?\" (#3244)"},{"Id":"445092425","IsPullRequest":true,"CreatedAt":"2019-05-16T18:12:47","Actor":"zivkan","Number":"3243","RawContent":null,"Title":"Insert NuGet 5.2.0-preview2.6020 into master","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3243","RelatedDescription":"Open PR \"Insert NuGet 5.2.0-preview2.6020 into master\" (#3243)"},{"Id":"445077491","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:38","Actor":"nugetlurker","Number":"3242","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3242","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3242)"},{"Id":"445077453","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:32","Actor":"nugetlurker","Number":"3241","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3241","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3241)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1133416391522918401","CreatedAt":"2019-05-28T16:55:00+00:00","UserScreenname":"dotnet","Text":"Porting desktop apps to .NET Core by @oliagavrysh. https://t.co/XV5Ed3Nku8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":94,"FavoriteCount":34,"RawContent":null},{"Id":"1131606214717116418","CreatedAt":"2019-05-23T17:02:00+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/mHsIdILy7f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1131209353829052418","CreatedAt":"2019-05-22T14:45:01+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst in 15 minutes when he'll be adding break and continue statements to his compiler project. https://t.co/guh6xtpdbd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":1,"RawContent":null},{"Id":"1129054452357271553","CreatedAt":"2019-05-16T16:02:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the .NET, C#, and F# teams https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null},{"Id":"1129053721206304769","CreatedAt":"2019-05-16T15:59:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1128765757175631872","CreatedAt":"2019-05-15T20:55:02+00:00","UserScreenname":"dotnet","Text":"We just blogged about all the performance works we did in .NET Core 3.0 https://t.co/2JGXxF7ejn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":314,"FavoriteCount":150,"RawContent":null},{"Id":"1128672633665384449","CreatedAt":"2019-05-15T14:45:00+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst in 15 minutes when he's implementing functions in his compiler. https://t.co/SYndeEbdMY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"1128343453970993152","CreatedAt":"2019-05-14T16:56:57+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1128339508414410757","CreatedAt":"2019-05-14T16:41:16+00:00","UserScreenname":"dotnet","Text":"ML .NET  CLI: Learn how to automatically generate an ML .NET  machine learning model and C# related code with this… https://t.co/i8zHrBa1UM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":128,"FavoriteCount":53,"RawContent":null}]}},"RunOn":"2019-05-29T05:30:32.1111278Z","RunDurationInMilliseconds":10113}