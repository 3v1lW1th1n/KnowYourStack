{"Data":{"Blog":{"FeedItems":[{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":11,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":49,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"},{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6647592137","Type":"PullRequestEvent","CreatedAt":"2017-09-28T05:16:29","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14232","RelatedDescription":"Merged pull request \"Fix issue with HFA altjit api\" (#14232) at dotnet/coreclr","RelatedBody":"One case in the Interop\\ArrayMarshalling\\ByValArray\\MarshalArrayByValTest\\MarshalArrayByValTest.cmd\r\ntest marshals an array of strings as members of a struct. The !FEATURE_HFA\r\ncode for IsHFA() needs to check for value type before calling CheckForHFA(),\r\nwhich will assert if it is not a value type.\r\n\r\nFixes #14196."},{"Id":"6647592131","Type":"IssuesEvent","CreatedAt":"2017-09-28T05:16:29","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14196","RelatedDescription":"Closed issue \"[RyuJIT][arm32/arm64][altjit] Assert failure: GetMethodTable()->IsValueType()\" (#14196) at dotnet/coreclr","RelatedBody":"```\r\nE:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Release\\Interop\\ArrayMarshalling\\ByValArray\\MarshalArrayByValTest\\MarshalArrayByValTest.cmd -coreroot E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n\r\nBEGIN EXECUTION\r\n \"E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" MarshalArrayByValTest.exe\r\nRunTest1 : Marshal array as field as ByValArray in sequential struct as parameter.\r\n========== [TakeIntArraySeqStructByVal]  ==========\r\n========== [TakeUIntArraySeqStructByVal]         ==========\r\n========== [TakeShortArraySeqStructByVal]        ==========\r\n========== [TakeWordArraySeqStructByVal]         ==========\r\n========== [TakeLong64ArraySeqStructByVal]       ==========\r\n========== [TakeULong64ArraySeqStructByVal]      ==========\r\n========== [TakeDoubleArraySeqStructByVal]       ==========\r\n========== [TakeFloatArraySeqStructByVal]        ==========\r\n========== [TakeByteArraySeqStructByVal]         ==========\r\n========== [TakeCharArraySeqStructByVal]         ==========\r\n========== [TakeIntPtrArraySeqStructByVal]       ==========\r\n========== [TakeIntArraySeqStructByVal]  ==========\r\n========== [TakeUIntArraySeqStructByVal]         ==========\r\n========== [TakeShortArraySeqStructByVal]        ==========\r\n========== [TakeWordArraySeqStructByVal]         ==========\r\n========== [TakeLong64ArraySeqStructByVal]       ==========\r\n========== [TakeULong64ArraySeqStructByVal]      ==========\r\n========== [TakeDoubleArraySeqStructByVal]       ==========\r\n========== [TakeFloatArraySeqStructByVal]        ==========\r\n========== [TakeByteArraySeqStructByVal]         ==========\r\n========== [TakeCharArraySeqStructByVal]         ==========\r\n========== [TakeLPSTRArraySeqStructByVal]        ==========\r\n========== [TakeLPCSTRArraySeqStructByVal]       ==========\r\nRunTest3 : Marshal array as field as ByValArray in explicit struct as parameter.\r\n========== [TakeIntArraySeqStructByVal]  ==========\r\n========== [TakeUIntArraySeqStructByVal]         ==========\r\n========== [TakeShortArraySeqStructByVal]        ==========\r\n========== [TakeWordArraySeqStructByVal]         ==========\r\n========== [TakeLong64ArraySeqStructByVal]       ==========\r\n========== [TakeULong64ArraySeqStructByVal]      ==========\r\n========== [TakeDoubleArraySeqStructByVal]       ==========\r\n========== [TakeFloatArraySeqStructByVal]        ==========\r\n========== [TakeByteArraySeqStructByVal]         ==========\r\n========== [TakeCharArraySeqStructByVal]         ==========\r\n\r\nAssert failure(PID 22980 [0x000059c4], Thread: 21580 [0x544c]): GetMethodTable()->IsValueType()\r\n\r\nCORECLR! EEClass::CheckForHFA + 0x93 (0x0ffba632)\r\nCORECLR! MethodTable::GetHFAType + 0x7E (0x0ffbec10)\r\nCORECLR! EEClassLayoutInfo::GetNativeHFATypeRaw + 0x92 (0x0ffbf03e)\r\nCORECLR! CEEInfo::getHFAType + 0xFC (0x0fe87eec)\r\nPROTONONJIT! Compiler::GetHfaType + 0x36 (0x0f2c0b3d)\r\nPROTONONJIT! Compiler::GetHfaType + 0x1D (0x0f2c0b7b)\r\nPROTONONJIT! Compiler::fgMorphArgs + 0x78C (0x0f36b157)\r\nPROTONONJIT! Compiler::fgMorphCall + 0x904 (0x0f36df67)\r\nPROTONONJIT! Compiler::fgMorphTree + 0x505 (0x0f378452)\r\nPROTONONJIT! Compiler::fgMorphSmpOp + 0x1195 (0x0f374456)\r\n    File: e:\\gh\\coreclr2\\src\\vm\\class.cpp Line: 1718\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n\r\nExpected: 100\r\nActual: 123456789\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n\r\nThis affects all arm/arm64 altjit runs."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6647330286","Type":"PullRequestEvent","CreatedAt":"2017-09-28T03:12:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7719","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25727-05 (master)\" (#7719) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6647329242","Type":"PullRequestEvent","CreatedAt":"2017-09-28T03:11:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7713","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to master\" (#7713) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20170927-070027\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20170927-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6646973978","Type":"PullRequestEvent","CreatedAt":"2017-09-28T00:55:37","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7717","RelatedDescription":"Merged pull request \"MSBuild 15.4.8\" (#7717) at dotnet/cli","RelatedBody":"This was shiproom approved for 15.4 yesterday. Internal links:\r\nhttps://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/86221\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=497114\r\n\r\nThe actual change is: https://github.com/Microsoft/msbuild/pull/2542\r\n"},{"Id":"6646840451","Type":"PullRequestEvent","CreatedAt":"2017-09-28T00:01:34","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7721","RelatedDescription":"Opened pull request \"Port infrastructure improvements from master to dev/release/2.0.0\" (#7721) at dotnet/cli","RelatedBody":"Porting the following to the new 2.0.x infrastructure branch from master\r\n\r\n#7352 Update solution to reflect current state\r\n#7350 Eliminate warnings (just that subset, not the part of the PR that updated core-setup)\r\n#7460 Use REST API to upload to feed\r\n#7571 Logging for feed upload\r\n#7522 Rearrange output folders to fix incremental build\r\n#7594 Fix signing after output folders moved\r\n"},{"Id":"6646830150","Type":"PullRequestEvent","CreatedAt":"2017-09-27T23:57:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7720","RelatedDescription":"Merged pull request \"Updating the branding to 15.5.\" (#7720) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"6646719159","Type":"PullRequestEvent","CreatedAt":"2017-09-27T23:17:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7720","RelatedDescription":"Opened pull request \"Updating the branding to 15.5.\" (#7720) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"6646636714","Type":"PullRequestEvent","CreatedAt":"2017-09-27T22:49:08","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7719","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25727-05 (master)\" (#7719) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6647190490","Type":"IssuesEvent","CreatedAt":"2017-09-28T02:19:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/513","RelatedDescription":"Closed issue \"Machine Key class not available in .net standard\" (#513) at dotnet/standard","RelatedBody":"We use the “MachineKey” class from the System.Web.Security assembly. In the .NetFramework version of the project, I right-clicked on references, add reference… then looked up the System.Web assembly and included it. Now with it being .NetStandard, if I right-click on Dependencies, add reference…\r\n\r\n@shanselman  @terrajobst  @ericstj  @EisenbergEffect "},{"Id":"6646162584","Type":"PullRequestEvent","CreatedAt":"2017-09-27T20:44:06","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/515","RelatedDescription":"Opened pull request \"Merge Dev/release/2.0.0 into release/2.0.0\" (#515) at dotnet/standard","RelatedBody":"cc @eerhardt \r\n\r\nJust putting this PR to be ready to merge and test it in CI. "},{"Id":"6645904899","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:45:26","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/514","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#514) at dotnet/standard","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs"},{"Id":"6644283357","Type":"IssuesEvent","CreatedAt":"2017-09-27T14:18:21","Actor":"Priya-John","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/513","RelatedDescription":"Opened issue \"Machine Key class not available in .net standard\" (#513) at dotnet/standard","RelatedBody":"We use the “MachineKey” class from the System.Web.Security assembly. In the .NetFramework version of the project, I right-clicked on references, add reference… then looked up the System.Web assembly and included it. Now with it being .NetStandard, if I right-click on Dependencies, add reference… I get the following:"},{"Id":"6640682941","Type":"IssuesEvent","CreatedAt":"2017-09-26T21:05:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/442","RelatedDescription":"Closed issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"Investigating a customer's solution which is experiencing performance issues due to slow design-time builds even with `<DefaultCompileItems>false</DefaultCompileItems>` set, 4% of a design-time build is just finding the .NET Standard refs:\r\n\r\nhttps://github.com/dotnet/standard/blob/bbbfd46d4298f0d764213256e858cc197d802208/netstandard/pkg/targets/NETStandard.Library.targets#L7-L16\r\n\r\nThis is on my SSD, on a slow disk like the customer was running this probably takes even longer. \r\n\r\nWhen I remove these includes, I go from:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303723-3275a9bc-81d2-11e7-8452-2e68cda05ef5.png)\r\n\r\nto:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303730-3c5ec0bc-81d2-11e7-9399-a53354054e83.png)\r\n\r\nTo avoid paying for this lookup over and over again when these are a fixed set of files, can we please auto-generate this?"},{"Id":"6640226448","Type":"PullRequestEvent","CreatedAt":"2017-09-26T19:29:03","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/510","RelatedDescription":"Merged pull request \"[release/2.0.0] Use a file list rather than globbing NETStandard assemblies\" (#510) at dotnet/standard","RelatedBody":"This change minimizes the amount of work done during project evaluation by directly\r\nsetting the reference items to all the files/paths we know are part of the package.\r\n\r\nPort of https://github.com/dotnet/standard/pull/507"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6647476737","Type":"PullRequestEvent","CreatedAt":"2017-09-28T04:19:09","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24297","RelatedDescription":"Opened pull request \"[WIP] Removing CreateFileW from UWP\" (#24297) at dotnet/corefx","RelatedBody":"First pass at removing all CreateFileW calls in UWP"},{"Id":"6647424268","Type":"PullRequestEvent","CreatedAt":"2017-09-28T03:54:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24245","RelatedDescription":"Merged pull request \"Marking {ReadOnly}Memory as readonly structs\" (#24245) at dotnet/corefx","RelatedBody":"Fixes issue https://github.com/dotnet/corefx/issues/23809\r\nhttps://github.com/dotnet/coreclr/pull/13886#issuecomment-328285541\r\n\r\nRelated PR for coreclr: https://github.com/dotnet/coreclr/pull/14180\r\n\r\ncc @KrzysztofCwalina, @VSadov "},{"Id":"6647396569","Type":"IssuesEvent","CreatedAt":"2017-09-28T03:41:43","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24296","RelatedDescription":"Opened issue \"Memory and ReadOnlyMemory validation errors not matching\" (#24296) at dotnet/corefx","RelatedBody":"As has come up here #24295\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/ReadOnlyMemory.cs#L60-L65\r\n\r\nIf reaonly memory or memory are useful in replacing stream methods to remove extra copies etc. However many places in the framework can't use the overload\r\n\r\n``` chsarp\r\nvar memory = new Memory<byte>(buffer, offset, count);\r\n```\r\n\r\nWithout first validating and throwing the exceptions for buffer (if null) or argument out of range for the other two because this will change the naming in the exceptions that are output. A quick survey of some classes shows\r\n\r\nI just looked through a few (WriteAsync/ReadAsync) \r\n\r\n|Class|ArrayName|Start|Length|\r\n|---|---|---|---|\r\n|FileStream|buffer|offset|count|\r\n|NetworkStream|buffer|offset|count|\r\n|BufferedStream|buffer|offset|count|\r\n|MemoryStream|buffer|offset|count|\r\n|StreamReader|buffer|index|count|\r\n|StreamWriter|buffer|index|count|\r\n|Stream|buffer|offset|count|\r\n|SslStream|buffer|offset|count|\r\n\r\nSo I propose that the inputs are called buffer, offset, count. And that the parameter names are added to the exceptions for the argument out of range.\r\n"},{"Id":"6647383107","Type":"IssuesEvent","CreatedAt":"2017-09-28T03:35:45","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24293","RelatedDescription":"Closed issue \"Memory/ReadOnlyMemory cast/extensions (as Span)\" (#24293) at dotnet/corefx","RelatedBody":"Parallel the `Span<T>` cast extensions for `Memory<T>`\r\n\r\ne.g.\r\n```csharp\r\nstatic Span<byte> AsBytes<T>(this Span<T> source) where T : struct\r\nstatic ReadOnlySpan<byte> AsBytes<T>(this ReadOnlySpan<T> source) where T : struct\r\nstatic Span<TTo> NonPortableCast<TFrom, TTo>(this Span<TFrom> source) where TFrom : struct where TTo : struct\r\nstatic ReadOnlySpan<TTo> NonPortableCast<TFrom, TTo>(this ReadOnlySpan<TFrom> source) where TFrom : struct where TTo : struct\r\n```\r\ni.e\r\n```csharp\r\nstatic Memory<byte> AsBytes<T>(this Memory<T> source) where T : struct\r\nstatic ReadOnlyMemory<byte> AsBytes<T>(this ReadOnlyMemory<T> source) where T : struct\r\nstatic Memory<TTo> NonPortableCast<TFrom, TTo>(this Memory<TFrom> source) where TFrom : struct where TTo : struct\r\nstatic ReadOnlySpan<TTo> NonPortableCast<TFrom, TTo>(this ReadOnlyMemory<TFrom> source) where TFrom : struct where TTo : struct\r\n```\r\n\r\n/cc @KrzysztofCwalina @stephentoub @davidfowl "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6647608939","Type":"PullRequestEvent","CreatedAt":"2017-09-28T05:24:32","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22370","RelatedDescription":"Merged pull request \"Handle `is` patterns in flow analysis\" (#22370) at dotnet/roslyn","RelatedBody":""},{"Id":"6647545534","Type":"IssuesEvent","CreatedAt":"2017-09-28T04:53:14","Actor":"philippe-lavoie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22392","RelatedDescription":"Opened issue \"MSBuildWorkspace returns empty documents\" (#22392) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2017  15.3.4 and 15.4 preview\r\n**Steps to Reproduce**:\r\n\r\n1.  Compile the following code inside a new project \"TestWorkspace.csproj\" targeting .net 47\r\n2. add reference to Microsoft.Build.Tasks and Microsoft.CodeAnalysis.CSharp.Workspaces\r\n\r\nYou can target a command line project or a unit test one. Can't get this to work in either cases.\r\n\r\n**Expected Behavior**:\r\nThe number of documents should be greater than 0 since program.cs exists in the project you created. (return true)\r\n\r\n**Actual Behavior**:\r\nEverything is empty. (return false)\r\n\r\nCode to use\r\n\r\n        public bool TestLoadingProject()\r\n        {\r\n            var assemblyLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n            var fileInfo = new FileInfo(assemblyLocation);\r\n            var folder = fileInfo.Directory;\r\n            var parent = folder.Parent;\r\n\r\n            var projectPath = Path.Combine(parent.FullName, \"TestWorkspace.csproj\");\r\n\r\n            var msWorkspace = MSBuildWorkspace.Create();\r\n            var project = msWorkspace.OpenProjectAsync(projectPath).Result;\r\n            var compilation = project.GetCompilationAsync().Result;\r\n            return project.DocumentIds.Count > 0;\r\n        }\r\n\r\nI've been using Roslyn for a while and with latest VS2017 and netstadnard 2, reading MSBuildWorkspace is not working from a command line or unit test. I think it still works inside a VSIX. This is beyound annoying, I don't want to ship a VSIX without doing unit tests... My real test case is to analyse standard2 library, not even sure that will work. It seems such a basic usage of MSBuildWorkspace...\r\n\r\n"},{"Id":"6647498047","Type":"PullRequestEvent","CreatedAt":"2017-09-28T04:29:44","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22391","RelatedDescription":"Opened pull request \"Report binding error for LINQ query on a type\" (#22391) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\nUse a type as the collection in a LINQ query with a typed variable (`from object a in IEnumerable ...`). The compiler should produce an error, but instead it fails when emitting.\r\n\r\n**Bugs this fixes:**\r\nFixes https://github.com/dotnet/roslyn/issues/21484\r\n\r\n**Workarounds, if any**\r\nFix your code. But the compiler doesn't provide diagnostics pointing to the source of the error.\r\n\r\n**Risk**\r\n**Performance impact**\r\nLow. Adding one more check during binding of queries (which already checks for a number of invalid query inputs).\r\n\r\n**Is this a regression from a previous update?**\r\nNo.\r\n\r\n**How was the bug found?**\r\nReported by customer."},{"Id":"6647337662","Type":"PullRequestEvent","CreatedAt":"2017-09-28T03:15:30","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22390","RelatedDescription":"Opened pull request \"guard us from getting duplicated errors from the build.\" (#22390) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nuser builds a solution and solution has duplicated errors on same file and VS crash.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/500533\r\n\r\n**Workarounds, if any**\r\n\r\nThere is no workaround.\r\n\r\n**Risk**\r\n\r\nThere is no risk\r\n\r\n**Performance impact**\r\n\r\nthere should be no visible perf impact\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes. it regressed when I made build error to preserve error ordering we got from build.\r\n\r\n**Root cause analysis:**\r\n\r\nwe used to use hashset to store errors which doesn't care about duplicates, now it changed to dictionary for ordering and now we became duplicates sensitive.\r\n\r\n**How was the bug found?**\r\n\r\nTesting.\r\n"},{"Id":"6647079443","Type":"PullRequestEvent","CreatedAt":"2017-09-28T01:34:57","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22102","RelatedDescription":"Merged pull request \"Refine parsing look-ahead for type arguments\" (#22102) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nSwitch case such as `case G<X, Y>[] v:` stopped compiling in Update 2.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #21515\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nLow. The change is small and has effective test coverage.\r\n\r\n**Performance impact**\r\n\r\nNone.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes, it is a regression from VS2017.\r\n\r\n**Root cause analysis:**\r\n\r\nThis is a complex area with subtle interactions in the parser. We simply overlooked this case.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n\r\n@dotnet/roslyn-compiler  Please review.\r\n@CyrusNajmabadi Your comments are welcome.\r\n"},{"Id":"6647079440","Type":"IssuesEvent","CreatedAt":"2017-09-28T01:34:57","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21515","RelatedDescription":"Closed issue \"Switch case pattern match compile fail for arrays of generic types in VS 15.3\" (#21515) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 15.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            Array array = new KeyValuePair<string, DateTime>[3];\r\n            switch (array)\r\n            {\r\n                case KeyValuePair<string, DateTime>[] pairs:\r\n                    Console.WriteLine(\"Pairs\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThis is expected to compile as it used to in VS 15.2\r\n\r\n**Actual Behavior**:\r\nI get several syntax errors on the `case KeyValuePair<string, DateTime>[] pairs:` line.\r\n\r\nI discovered this after the upgrade to VS 15.3 in my `OrderedDictionary`'s implementation of `ICollection.CopyTo` similar to [Dictionary](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Collections/Generic/Dictionary.cs#L699)'s but with pattern matching."},{"Id":"6646990480","Type":"IssuesEvent","CreatedAt":"2017-09-28T01:01:37","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22238","RelatedDescription":"Closed issue \"Extract interface loses \"ref readonly\" on parameters and returns\" (#22238) at dotnet/roslyn","RelatedBody":"\r\nparameters become an ordinary `ref`, returns become ordinary byval returns."},{"Id":"6646990464","Type":"IssuesEvent","CreatedAt":"2017-09-28T01:01:37","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22241","RelatedDescription":"Closed issue \"Replace lambda with local function loses \"ref readonly\"\" (#22241) at dotnet/roslyn","RelatedBody":"```cs\r\n        delegate ref readonly int D1(ref readonly int arg);\r\n\r\n            D1 dd = (ref readonly int a) => ref a;\r\n```\r\n\r\nReplace dd with a local function using IDE. - loses \"ref readonly\"\r\n"},{"Id":"6646990456","Type":"IssuesEvent","CreatedAt":"2017-09-28T01:01:37","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22239","RelatedDescription":"Closed issue \"Change Signature does not show \"ref readonly\" modifier on parameters\" (#22239) at dotnet/roslyn","RelatedBody":"\r\nThe Change Signature  shows  other modifiers like \"out\" but not \"ref readonly\" - not sure if it does not understand it or because it simply does not fit. There is no much space in that UI."},{"Id":"6646960006","Type":"PullRequestEvent","CreatedAt":"2017-09-28T00:49:57","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22389","RelatedDescription":"Opened pull request \"removed unused GetOperationOptions\" (#22389) at dotnet/roslyn","RelatedBody":"we used to use this option to specific whether we want highest or lowest bound node from the map. but we no longer use those."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6646512079","Type":"PullRequestEvent","CreatedAt":"2017-09-27T22:09:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4625","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4625) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6646291491","Type":"PullRequestEvent","CreatedAt":"2017-09-27T21:13:14","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4625","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4625) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6645227720","Type":"PullRequestEvent","CreatedAt":"2017-09-27T17:14:36","Actor":"ph1ll","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4624","RelatedDescription":"Opened pull request \"WIP: Build native code for WebAssembly target\" (#4624) at dotnet/corert","RelatedBody":"This is very much a work in progress, but adding the PR so that changes are visible.\r\n\r\nAt the moment, the overall wasm build will fail. See #4620 for the related build scripts.\r\n\r\n* [x] Update cmake files for wasm target.\r\n* [ ] Build sdk\\libbootstrapper.bc\r\n* [ ] Build sdk\\libbootstrappercpp.bc\r\n* [ ] Build sdk\\libPortableRuntime.bc (#4505)\r\n* [ ] Build sdk\\libRuntime.bc (#4505)\r\n* [x] Build sdk\\libSystem.Private.CoreLib.Native.bc (#4507)\r\n* [ ] Build tools\\jitinterface.bc"},{"Id":"6643737348","Type":"PullRequestEvent","CreatedAt":"2017-09-27T12:33:16","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4622","RelatedDescription":"Merged pull request \"Add ThreadPool.QueueUserWorkItem(..., bool preferLocal)\" (#4622) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14214 to corert"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":86,"FavoriteCount":54,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":26,"FavoriteCount":16,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":52,"RawContent":null},{"Id":"910985746386911237","CreatedAt":"2017-09-21T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Introducing Razor Pages - Join the session here:… https://t.co/NTQg6urmhQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2017-09-28T05:30:19.523752Z","RunDurationInMilliseconds":7086}