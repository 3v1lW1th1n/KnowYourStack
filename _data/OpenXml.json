{"Data":{"Sdk":{"Events":[{"Id":"9149388669","Type":"IssuesEvent","CreatedAt":"2019-02-27T19:40:15","Actor":"jchoinski","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/564","RelatedDescription":"Opened issue \"Office Online created document fails OpenXmlValidator validation\" (#564) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nAny document created in Office Online, including blank ones fail OpenXmlValidator validation. \r\n\r\n                var v = new OpenXmlValidator(FileFormatVersions.Office2016);\r\n                var errors = v.Validate(wDoc);\r\n\r\nProduces the following 2 errors :\r\n\r\n1. \r\nAttributeQualifiedName: null\r\nDescription: The element has unexpected child element 'http://schemas.microsoft.com/office/word/2010/wordml:docId'.\r\nErrorType: Schema\r\nId: Sch_UnexpectedElementContentExpectingComplex\r\nNode: {DocumentFormat.OpenXml.Wordprocessing.Settings}\r\nPart: {DocumentFormat.OpenXml.Packaging.DocumentSettingsPart}\r\nPath: XPath=\"/w:settings[1]\"\r\nRelatedNode: {DocumentFormat.OpenXml.Office2010.Word.DocumentId}\r\n\r\n2.\r\nAttributeQualifiedName: http://schemas.microsoft.com/office/word/2012/wordml:val\r\nDescription: \"The attribute 'http://schemas.microsoft.com/office/word/2012/wordml:val' has invalid value '{7297be79-5e23-470a-9fe2-a7ede5c0760f}'. The Pattern constraint failed. The expected pattern is \\\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\\\}.\"\r\nErrorType: Schema\r\nId: Sch_AttributeValueDataTypeDetailed\r\nNode: {DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId}\r\nPart: {DocumentFormat.OpenXml.Packaging.DocumentSettingsPart}\r\nPath: XPath=\"/w:settings[1]/w15:docId[1]\"\r\nRelatedNode: null\r\nValidationErrorCategory: Sch_PatternConstraintFailed\r\n**Information**\r\n\r\n- .NET Target: .NET Framework,\r\n- DocumentFormat.OpenXml Version:  feature/office2016\r\n\r\n**Repro**\r\n#\r\n        [Theory]\r\n        [InlineData(TestFiles.O365BlankDocument)]\r\n        public void OF16_001_ValidateDocx_2016(string name)\r\n        {\r\n            using (var stream = GetStream(name))\r\n            using (var wDoc = WordprocessingDocument.Open(stream, false))\r\n            {\r\n                var v = new OpenXmlValidator(FileFormatVersions.Office2016);\r\n                var errors = v.Validate(wDoc);\r\n\r\n                Assert.Empty(errors);\r\n            }\r\n        }\r\n\r\n**Observed**\r\n\r\nValidation produces 2 errors\r\n\r\n**Expected**\r\n\r\nValidation produces 0 errors\r\n"},{"Id":"9098176384","Type":"IssuesEvent","CreatedAt":"2019-02-19T22:59:12","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/509","RelatedDescription":"Reopened issue \"Generated package does not include certain required parts\" (#509) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nStarted on MSDN support first. \r\nhttps://social.msdn.microsoft.com/Forums/office/en-US/fa395b57-ab12-4fe8-9fa1-0726c18fe0cd/openxml-generated-file-wont-open-in-ms-spreadsheet-compare-tool-and-excel-quotopen-and?forum=oxmlsdk\r\n\r\nThe basic problem is when a new file is created by OpenXML, it appears to load in Excel, but if you use the Excel File Open tool for \"Open and Repair\" you can see there are some hidden errors being reported. My assumption is the tool Spreadhsheet Compare tool from MS Office can't open this file because of teh same underlying error. If the file is opened and then saved in Excel, the tool now open the file. \r\n\r\n\r\n**Information**\r\n\r\n- .NET Target: 4.7.1\r\n- DocumentFormat.OpenXml Version: 2.8.1.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\npublic static void CreateSpreadsheetWorkbook(string filepath)\r\n        {\r\n            // Create a spreadsheet document by supplying the filepath.\r\n            // By default, AutoSave = true, Editable = true, and Type = xlsx.\r\n            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(filepath, SpreadsheetDocumentType.Workbook);\r\n\r\n            // Add a WorkbookPart to the document.\r\n            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();\r\n            workbookpart.Workbook = new Workbook();\r\n\r\n            // Add a WorksheetPart to the WorkbookPart.\r\n            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            // Add Sheets to the Workbook.\r\n            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.\r\n                AppendChild<Sheets>(new Sheets());\r\n\r\n            // Append a new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet()\r\n            {\r\n                Id = spreadsheetDocument.WorkbookPart.\r\n                    GetIdOfPart(worksheetPart),\r\n                SheetId = 1,\r\n                Name = \"mySheet\"\r\n            };\r\n            sheets.Append(sheet);\r\n\r\n            workbookpart.Workbook.Save();\r\n\r\n            // Close the document.\r\n            spreadsheetDocument.Close();\r\n        }\r\n``` \r\n\r\n**Observed**\r\n\r\nSpreadsheet Comparison tool will report\r\nhttps://support.office.com/en-us/article/Basic-tasks-in-Spreadsheet-Compare-F2B20AF8-A6D3-4780-8011-F15B3229F5D8\r\n\r\n\"Error opening workbook. Attempted to read past the end of the stream\"\r\n\r\nIf you attempt to open the file through Excel \"Open and Repair\" option, you will get this XML error. \r\n```XML\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<recoveryLog xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n<logFileName>error260080_01.xml</logFileName><summary>Errors were detected in file 'C:\\TEMP\\testing.xlsx'</summary>\r\n<additionalInfo><info>Excel completed file level validation and repair. Some parts of this workbook may have been repaired or discarded.</info></additionalInfo>\r\n</recoveryLog>\r\n``` \r\n\r\n**Expected**\r\nFile should open without errors.\r\n\r\nPlease add your expected behavior here.\r\n\r\n"},{"Id":"9098176062","Type":"IssuesEvent","CreatedAt":"2019-02-19T22:59:09","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/509","RelatedDescription":"Closed issue \"Generated package does not include certain required parts\" (#509) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nStarted on MSDN support first. \r\nhttps://social.msdn.microsoft.com/Forums/office/en-US/fa395b57-ab12-4fe8-9fa1-0726c18fe0cd/openxml-generated-file-wont-open-in-ms-spreadsheet-compare-tool-and-excel-quotopen-and?forum=oxmlsdk\r\n\r\nThe basic problem is when a new file is created by OpenXML, it appears to load in Excel, but if you use the Excel File Open tool for \"Open and Repair\" you can see there are some hidden errors being reported. My assumption is the tool Spreadhsheet Compare tool from MS Office can't open this file because of teh same underlying error. If the file is opened and then saved in Excel, the tool now open the file. \r\n\r\n\r\n**Information**\r\n\r\n- .NET Target: 4.7.1\r\n- DocumentFormat.OpenXml Version: 2.8.1.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\npublic static void CreateSpreadsheetWorkbook(string filepath)\r\n        {\r\n            // Create a spreadsheet document by supplying the filepath.\r\n            // By default, AutoSave = true, Editable = true, and Type = xlsx.\r\n            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(filepath, SpreadsheetDocumentType.Workbook);\r\n\r\n            // Add a WorkbookPart to the document.\r\n            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();\r\n            workbookpart.Workbook = new Workbook();\r\n\r\n            // Add a WorksheetPart to the WorkbookPart.\r\n            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            // Add Sheets to the Workbook.\r\n            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.\r\n                AppendChild<Sheets>(new Sheets());\r\n\r\n            // Append a new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet()\r\n            {\r\n                Id = spreadsheetDocument.WorkbookPart.\r\n                    GetIdOfPart(worksheetPart),\r\n                SheetId = 1,\r\n                Name = \"mySheet\"\r\n            };\r\n            sheets.Append(sheet);\r\n\r\n            workbookpart.Workbook.Save();\r\n\r\n            // Close the document.\r\n            spreadsheetDocument.Close();\r\n        }\r\n``` \r\n\r\n**Observed**\r\n\r\nSpreadsheet Comparison tool will report\r\nhttps://support.office.com/en-us/article/Basic-tasks-in-Spreadsheet-Compare-F2B20AF8-A6D3-4780-8011-F15B3229F5D8\r\n\r\n\"Error opening workbook. Attempted to read past the end of the stream\"\r\n\r\nIf you attempt to open the file through Excel \"Open and Repair\" option, you will get this XML error. \r\n```XML\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<recoveryLog xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n<logFileName>error260080_01.xml</logFileName><summary>Errors were detected in file 'C:\\TEMP\\testing.xlsx'</summary>\r\n<additionalInfo><info>Excel completed file level validation and repair. Some parts of this workbook may have been repaired or discarded.</info></additionalInfo>\r\n</recoveryLog>\r\n``` \r\n\r\n**Expected**\r\nFile should open without errors.\r\n\r\nPlease add your expected behavior here.\r\n\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"8996877097","Type":"PullRequestEvent","CreatedAt":"2019-02-02T05:48:33","Actor":"twsouthwick","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/271","RelatedDescription":"Merged pull request \"Replace file headers with MIT license\" (#271) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996442444","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:27:29","Actor":"twsouthwick","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/271","RelatedDescription":"Opened pull request \"Replace file headers with MIT license\" (#271) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996441806","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:27:15","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/270","RelatedDescription":"Closed pull request \"update DocumentFormat.OpenXml to 2.9.0\" (#270) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996440977","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:52","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/256","RelatedDescription":"Closed pull request \"Fix issue related to text-align with rtl direction\" (#256) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"When adding style=\"direction:rtl; text-align:left\" it doesn't apply text-align property."},{"Id":"8996440049","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:27","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/247","RelatedDescription":"Closed pull request \"Update ChartUpdater.cs\" (#247) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"UpdateChart.UpdateChart.UpdateSeries does not work on Radar chart types, it is a simple one line fix that I have used for a few years now.\r\nCloses OfficeDev/Open-Xml-PowerTools#245"},{"Id":"8996439414","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:11","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/246","RelatedDescription":"Closed pull request \"Process page breaks\" (#246) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Page breaks are shown like \r\n\r\n    <p:r><docx properties like font, .../><w:br type=\"page\"/></p:r>\r\n\r\nWhen converting this to HTML, this is replaced by <span></span> in the function:\r\n\r\n     // Transform w:br to h:br.\r\n     if (element.Name == W.br || element.Name == W.cr)\r\n      {\r\n           return ProcessBreak(element);\r\n      }\r\n\r\nWhich causes the page break to not appear.\r\n\r\nI have changed this so it returns a div style=\"page-break-before:always;\"  in the following function.\r\n\r\n    private static object ProcessPageBreak(XElement element)\r\n        {\r\n            XElement div = new XElement(Xhtml.div);\r\n            div.SetAttributeValue(NoNamespace.style, \"page-break-before:always;\");\r\n            XElement span = null;\r\n\r\n            return new object[]\r\n            {\r\n                div,\r\n                new XEntity(\"#x200e\"),\r\n                span\r\n         };\r\n        }\r\n\r\nWhich causes a correct page break.\r\n\r\nPS. The page break (docx) is detected in a child element. So i have to set the page break ( html) in it's parent. I detect it with the following function:\r\n\r\n     private static bool HasAPageBreak(XElement element)\r\n        {\r\n            return element.Descendants().Any(dl => dl.Name == W.br && dl.Attribute(W.type).Value == \"page\");\r\n        }\r\n"},{"Id":"8996438798","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:25:55","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/241","RelatedDescription":"Closed pull request \"Document Assembler: Ability to merge in whole documents or sub-templates\" (#241) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"As some interest was shown in this feature here is the pull request.\r\n\r\nFrom issue 191;\r\n\r\nImplementation is as follows;\r\n\r\n- Added two new elements; Document and DocumentTemplate\r\n- These two elements share common attributes Path and Data\r\n- The Path attribute can be either a file path or XPath that retrieves a file path from the input XML\r\n- The Data attribute is intended to hold a base64 encoded string containing the Word document contents\r\n- The DocumentTemplate element also has a Select attribute so that XML data can be passed to the template\r\n\r\ne.g.\r\n\r\n```\r\n<Repeat Select=\"//Invoice\" />\r\n<DocumentTemplate Path=\"SubTemplate.docx\" Select=\".\" />\r\n<Document Path=\"Terms.docx\" />\r\n<EndRepeat />\r\n\r\n```\r\nWith the above in place what I do is take a two pass approach.\r\n\r\nFirstly I process the Document and DocumentTemplate elements converting all to a Document element which contains a Data attribute with the base64 encoded content of the Document or assembled DocumentTemplate.\r\n\r\nThen I have introduced a second step and as such a dependency on DocumentBuilder in DocumentAssembler. I am not sure if this will be frowned upon or not :)\r\n\r\nThis second step is largely based on this post from Eric White;\r\n\r\nhttps://blogs.msdn.microsoft.com/ericwhite/2009/04/21/using-documentbuilder-with-content-controls-for-document-assembly/\r\n\r\n\r\nAlthough in my practical experience (been using this code in production for months) the Word documents generated are valid I had issues with the Unit Tests.  I think this is because we are using Office 365 and it looks like the validator only supports up-to 2013 at the minute?  I could re-author my test files in 2013 but don't have access to a copy.\r\n\r\nAny comments and feedback appreciated, this is my first pull request on an open-source project so be gentle :)"},{"Id":"8996438011","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:25:37","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/237","RelatedDescription":"Closed pull request \"Added missing image/bmp type to ImageContentTypes\" (#237) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Added \"bmp\" format into content types to fix missing images issue after conversion to html."}],"ResultType":"GitHubEvent"}},"RunOn":"2019-03-03T05:30:37.6531859Z","RunDurationInMilliseconds":895}