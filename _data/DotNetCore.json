{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":203,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6916872572","Type":"PullRequestEvent","CreatedAt":"2017-11-29T05:26:29","Actor":"adiaaida","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15248","RelatedDescription":"Merged pull request \"Port flag fix for throughput to release/2.0.0\" (#15248) at dotnet/coreclr","RelatedBody":"Changes the arch flag to architecture and returns a failure code if submission.py or upload.py fail."},{"Id":"6916796345","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:54:23","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15262","RelatedDescription":"Opened pull request \"[Arm64] Use REG_IP1 for genEpilogRestoreReg*\" (#15262) at dotnet/coreclr","RelatedBody":"Avoid conflict with FASTTAILCALL_TARGET reg\r\n\r\nFixes 24+ test JitStress failures i.e.\r\n```\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1030/Generated1030/Generated1030.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1044/Generated1044/Generated1044.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1047/Generated1047/Generated1047.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1074/Generated1074/Generated1074.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1077/Generated1077/Generated1077.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1112/Generated1112/Generated1112.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1118/Generated1118/Generated1118.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1152/Generated1152/Generated1152.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1195/Generated1195/Generated1195.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1200/Generated1200/Generated1200.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1214/Generated1214/Generated1214.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1221/Generated1221/Generated1221.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1226/Generated1226/Generated1226.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1254/Generated1254/Generated1254.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest1275/Generated1275/Generated1275.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest703/Generated703/Generated703.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest736/Generated736/Generated736.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest817/Generated817/Generated817.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest871/Generated871/Generated871.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest906/Generated906/Generated906.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest912/Generated912/Generated912.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest920/Generated920/Generated920.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest955/Generated955/Generated955.sh\r\nLoader/classloader/TypeGeneratorTests/TypeGeneratorTest957/Generated957/Generated957.sh\r\n```\r\n\r\n@dotnet/jit-contrib @dotnet/arm64-contrib PTAL"},{"Id":"6916758772","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:37:53","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15252","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to prerelease-02228-01, preview1-25928-08, preview1-25929-01, respectively (master)\" (#15252) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6916749740","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:34:06","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15246","RelatedDescription":"Merged pull request \"Add double/float.TryFormat\" (#15246) at dotnet/coreclr","RelatedBody":"- Move FormatDouble and FormatSingle to managed. Instead of making fcalls to FormatDouble and FormatSingle, move them to managed, and use fcalls for the DoubleToNumber and NumberToDouble they call, shifting down the layer that's implemented in native.  This allows us to then much more easily add TryFormat methods for double and float while also sharing more code between coreclr and corert, from which the managed implementations were taken (they're a direct port of these native implementations from coreclr).  In the process, I also eliminated one fcall that can be implemented in managed easily.  The remaining fcalls are more substantial and will eventually require more effort to bring to managed.  I also moved comments around to avoid having those duplicated as well.\r\n\r\n- Port ValueStringBuilder updates/fixes from corefx.  This brings it back into sync with the version there.\r\n\r\n- Add double/float.TryFormat. Also implement ISpanFormattable so that string.Format and StringBuilder.AppendFormat take optimized paths with double and float, and update StringBuilder.Append(double/float) to use the new TryFormat methods.\r\n\r\n- Reduce duplicate code for span formatting in StringBuilder.  Use a generic method to avoid 11 copies of the same code.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/25373\r\ncc: @jkotas, @ahsonkhan, @KrzysztofCwalina "},{"Id":"6916724991","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:23:27","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15261","RelatedDescription":"Merged pull request \"Add generateonly builds.sh\" (#15261) at dotnet/coreclr","RelatedBody":""},{"Id":"6916724544","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:23:15","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15261","RelatedDescription":"Opened pull request \"Add generateonly builds.sh\" (#15261) at dotnet/coreclr","RelatedBody":""},{"Id":"6916722097","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:22:12","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15260","RelatedDescription":"Closed pull request \"Add generate only build test sh\" (#15260) at dotnet/coreclr","RelatedBody":""},{"Id":"6916721810","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:22:06","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15260","RelatedDescription":"Opened pull request \"Add generate only build test sh\" (#15260) at dotnet/coreclr","RelatedBody":""},{"Id":"6916663643","Type":"PullRequestEvent","CreatedAt":"2017-11-29T03:57:28","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15258","RelatedDescription":"Merged pull request \"Small changes\" (#15258) at dotnet/coreclr","RelatedBody":""},{"Id":"6916620423","Type":"IssuesEvent","CreatedAt":"2017-11-29T03:40:29","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15259","RelatedDescription":"Opened issue \"[Arm64] JITStress=1 InterlockedIncrement1\" (#15259) at dotnet/coreclr","RelatedBody":"With `JITStress=1` or  `JITStress=2`\r\n`CoreMangLib/cti/system/threading/interlocked/InterlockedIncrement1/InterlockedIncrement1` is failing with a stack overflow exception on arm64.\r\n\r\nJIT stress is causing the reference to the `COMInterlocked` `location` to be unaligned.  It turns this \r\n```\r\n               [000039] --C-G-------              /--*  CALL      int    System.Threading.Interlocked.Increment\r\n               [000038] L---G-------              |     \\--*  ADDR      byref \r\n               [000037] ------------              |        \\--*  LCL_VAR   blk   (AX) V02 loc1         \r\n``` into\r\n```\r\n               [000039] --C-G-------              /--*  CALL      int    System.Threading.Interlocked.Increment\r\n               [000125] ------------              |  |  /--*  CNS_INT   int    2\r\n               [000126] ----G------- arg0         |  \\--*  ADD       byref \r\n               [000038] L---G-------              |     \\--*  ADDR      byref \r\n               [000037] ------------              |        \\--*  LCL_VAR   blk   (AX) V02 loc1         \r\n```\r\n\r\nThe result is that `FastInterlocked*` is throwing a unaligned exception which is a `SIGSEGV` in Ubuntu.\r\n\r\nPAL `sigsegv_handler` is turning this into a Stack overflow exception because it occurs near the sp.\r\n\r\nI believe the `COMInterlocked` atomic operations should require aligned pointers.  Therefore, my recommendation is that `comutilnative.cpp` checks location alignment and calls `FCThrow(kDataMisalignedException)` for unaligned pointers on all platforms.  \r\n\r\n@dotnet/jit-contrib @dotnet/arm64-contrib @jkotas @janvorli Please advise"},{"Id":"6916608681","Type":"PullRequestEvent","CreatedAt":"2017-11-29T03:35:55","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15258","RelatedDescription":"Opened pull request \"Small changes\" (#15258) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6916832181","Type":"PullRequestEvent","CreatedAt":"2017-11-29T05:09:22","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8128","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25929-01 (master)\" (#8128) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6916578122","Type":"PullRequestEvent","CreatedAt":"2017-11-29T03:24:26","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8127","RelatedDescription":"Opened pull request \"Crossgen the Sdks directory.\" (#8127) at dotnet/cli","RelatedBody":"Crossgen'ing the .NET Core assemblies in the `Sdks` folder.\r\n\r\nI'm seeing a pretty minor bump in incremental `dotnet build` on this change.  Maybe ~10-20ms on my machine.\r\n\r\nHowever, incremental `dotnet pack` is seeing a much bigger change:\r\n\r\nBefore my change:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline-master\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.7312376\r\n\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline-master\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.7063791\r\n\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\dotnet\\baseline-master\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.7347582\r\n```\r\n\r\nAfter my change:\r\n```\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\cli\\bin\\2\\win10-x64\\dotnet\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.4844696\r\n\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\cli\\bin\\2\\win10-x64\\dotnet\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.5171604\r\n\r\n\r\nPS F:\\git\\dotnet-cli-perf\\scenarios\\classlib\\core> Measure-Command { F:\\cli\\bin\\2\\win10-x64\\dotnet\\dotnet.exe pack .\\classlib\\classlib.csproj }\r\n\r\nTotalSeconds      : 1.4780401\r\n```"},{"Id":"6916522209","Type":"PullRequestEvent","CreatedAt":"2017-11-29T03:03:45","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8104","RelatedDescription":"Closed pull request \"Making the 'RestoreSources' configurable: CLI\" (#8104) at dotnet/cli","RelatedBody":""},{"Id":"6916371957","Type":"PullRequestEvent","CreatedAt":"2017-11-29T02:10:42","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8113","RelatedDescription":"Closed pull request \"WIP Add install tool command\" (#8113) at dotnet/cli","RelatedBody":"WIP because I am still doing end to end test. I've tested on mac.\r\n\r\n* compose all the parts\r\n* Fix on obtain for better end to end experience"},{"Id":"6916112430","Type":"IssuesEvent","CreatedAt":"2017-11-29T00:43:24","Actor":"mishra14","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8126","RelatedDescription":"Closed issue \"dotnet binary showing the wrong version\" (#8126) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. download binary from [here](https://www.microsoft.com/net/download/thank-you/dotnet-runtime-2.0.3-windows-x64-binaries)\r\n2. run `dotnet --info`\r\n\r\n## Expected  behavior\r\n```\r\n.NET Command Line Tools (2.0.3)\r\n```\r\n\r\n## Actual behavior\r\n```\r\nF:\\validation\\test> . \"C:\\Users\\anmishr\\Downloads\\dotnet-runtime-2.0.3-win-x64\\dotnet.exe\" --info\r\n.NET Command Line Tools (2.1.1)\r\n\r\nProduct Information:\r\n Version:            2.1.1\r\n Commit SHA-1 hash:  436d56176b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.1\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\nI think the exe is picking up the same version on my machine irrespective of the `dotnet.exe` being executed.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6916026140","Type":"PullRequestEvent","CreatedAt":"2017-11-29T00:15:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8107","RelatedDescription":"Closed pull request \"Updating the branding of the CLI to 2.0.4 and taking the new 2.0.4 runtime\" (#8107) at dotnet/cli","RelatedBody":""},{"Id":"6916021449","Type":"PullRequestEvent","CreatedAt":"2017-11-29T00:13:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8109","RelatedDescription":"Merged pull request \"Updating the CLI branding to 2.1.3 and ingesting the 2.0.4 runtime.\" (#8109) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6915855180","Type":"PullRequestEvent","CreatedAt":"2017-11-28T23:23:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02228-01 (master)\" (#593) at dotnet/standard","RelatedBody":""},{"Id":"6908856639","Type":"IssuesEvent","CreatedAt":"2017-11-27T19:20:28","Actor":"Eilon","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/587","RelatedDescription":"Closed issue \" System.Net.Http.dll 4.6.25514.4 在nuget没有这个版本，与项目中的4.6.25220.1不兼容\" (#587) at dotnet/standard","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号"},{"Id":"6904585264","Type":"IssuesEvent","CreatedAt":"2017-11-27T00:32:12","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/592","RelatedDescription":"Closed issue \"The certificate authority is invalid or incorrect exception while using .NET standard 2.0\" (#592) at dotnet/standard","RelatedBody":"My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.\r\n\r\nIn .NET framework, we are using following code to trust all certificates:\r\n\r\n`ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`\r\n\r\nBut the same code is not working with .NET core 2.0 and .NET standard 2.0.\r\n\r\nI have also tried the below code:\r\n\r\n`var httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`\r\n\r\nBut this is not working for me.\r\n'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.\r\n\r\n![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)\r\n\r\n\r\nPlease suggest me any alternative solution for the self-signed certificate in .NET standard 2.0."},{"Id":"6903840711","Type":"IssuesEvent","CreatedAt":"2017-11-26T16:27:32","Actor":"jainankit2474","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/592","RelatedDescription":"Opened issue \"The certificate authority is invalid or incorrect exception while using .NET standard 2.0\" (#592) at dotnet/standard","RelatedBody":"My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.\r\n\r\nIn .NET framework, we are using following code to trust all certificates:\r\n\r\n`ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`\r\n\r\nBut the same code is not working with .NET core 2.0 and .NET standard 2.0.\r\n\r\nI have also tried the below code:\r\n\r\n`var httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`\r\n\r\nBut this is not working for me.\r\n'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.\r\n\r\n![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)\r\n\r\n\r\nPlease suggest me any alternative solution for the self-signed certificate in .NET standard 2.0."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6916688212","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:07:41","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25437","RelatedDescription":"Merged pull request \"Porting first half of the System.ComponentModel.Composition tests\" (#25437) at dotnet/corefx","RelatedBody":"Fixing #11857\r\n\r\nAdding 347 tests\r\nSets line and branch coverage to 73% and 65% respectively.\r\n"},{"Id":"6916586919","Type":"PullRequestEvent","CreatedAt":"2017-11-29T03:27:41","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25568","RelatedDescription":"Merged pull request \"Update CoreFx to preview1-25929-01 (master)\" (#25568) at dotnet/corefx","RelatedBody":""},{"Id":"6916573206","Type":"IssuesEvent","CreatedAt":"2017-11-29T03:22:35","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25456","RelatedDescription":"Closed issue \"ProcessStartInfo doesn't pass empty string to the target process\" (#25456) at dotnet/corefx","RelatedBody":"Following code is to pass \"test1\" and an empty string as arguments to netcoretest application. It works well on Windows. On Ubuntu (16.10 and 17.04), it just passes \"test1\" to netcoretest, and ignores the empty string. Could anyone help to take a look?\r\n\r\n```\r\n            ProcessStartInfo psi = new ProcessStartInfo(\"/usr/bin/dotnet\");\r\n            psi.Arguments = \"netcoretest.dll test1 \\\"\\\"\";\r\n\r\n            Process p1 = Process.Start(psi);\r\n            p1.OutputDataReceived += (s, eventArg) =>\r\n            {\r\n                Console.WriteLine(\"P1 {0}\", eventArg.Data.ToString());\r\n            };\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6916718734","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:20:47","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23441","RelatedDescription":"Merged pull request \"Avoid IEnumerable allocations when flusing data to sqlite.\" (#23441) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23425"},{"Id":"6916718729","Type":"IssuesEvent","CreatedAt":"2017-11-29T04:20:46","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23425","RelatedDescription":"Closed issue \"MultiDictionary ValueSet enumerator boxing\" (#23425) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.6.0-vs-for-mac-62303-01\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the standard SQLitePersistentStorage\r\n2. Observe allocations due to boxed enumerator on flushing writes\r\n\r\n```\r\n  100%   GetEnumerator  •  87 MB  •  Roslyn.Utilities.MultiDictionary`2+ValueSet.GetEnumerator()\r\n    98.8%   AddRange  •  86 MB  •  System.Collections.Immutable.ImmutableArray`1+Builder.AddRange(IEnumerable)\r\n      98.8%   MoveNext  •  86 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+<>c__DisplayClass70_0`1+<<FlushSpecificWritesAsync>g__GetWriteTaskAsync0>d.MoveNext()\r\n        97.5%   Start  •  84 MB  •  System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start(ref !!0)\r\n          97.5%   <FlushSpecificWritesAsync>g__GetWriteTaskAsync0  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+<>c__DisplayClass70_0`1.<FlushSpecificWritesAsync>g__GetWriteTaskAsync0()\r\n            97.5%   MoveNext  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+<FlushSpecificWritesAsync>d__70`1.MoveNext()\r\n              97.5%   Start  •  84 MB  •  System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start(ref !!0)\r\n                97.5%   FlushSpecificWritesAsync  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage.FlushSpecificWritesAsync(MultiDictionary, Dictionary, !!0, ArrayBuilder, CancellationToken)\r\n                  97.5%   MoveNext  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+<FlushSpecificWritesAsync>d__69`1.MoveNext()\r\n                    97.5%   Start  •  84 MB  •  System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start(ref !!0)\r\n                      97.5%   FlushSpecificWritesAsync  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage.FlushSpecificWritesAsync(MultiDictionary, Dictionary, !!0, CancellationToken)\r\n                        97.5%   FlushPendingWritesAsync  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+Accessor`3.FlushPendingWritesAsync(!0, CancellationToken)\r\n                          97.5%   MoveNext  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+Accessor`3+<ReadStreamAsync>d__9.MoveNext()\r\n                            97.5%   Start  •  84 MB  •  System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start(ref !!0)\r\n                              97.5%   ReadStreamAsync  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage+Accessor`3.ReadStreamAsync(!0, CancellationToken)\r\n                              ◄ 97.4%   ReadStreamAsync  •  84 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage.ReadStreamAsync(Document, String, CancellationToken)\r\n                              ◄ 0.12%   ReadStreamAsync  •  0.1 MB  •  Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage.ReadStreamAsync(Project, String, CancellationToken)\r\n      ◄ 1.34%   InvokeMoveNext  •  1.2 MB  •  System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(Object)\r\n  ◄ 1.18%   MoveNext  •  1.0 MB  •  System.Linq.Enumerable+<SelectManyIterator>d__17`2.MoveNext()\r\n```\r\n\r\n**Expected Behavior**:\r\nThe enumerator should not end up boxed. ArrayBuilder goes via the IEnumerable code-path which ends up boxing the enumerator.\r\n\r\n**Actual Behavior**:\r\nEnumerator is boxed."},{"Id":"6916715473","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:19:29","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23440","RelatedDescription":"Merged pull request \"Reduce Location allocations while running analyzers.\" (#23440) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23427"},{"Id":"6916715466","Type":"IssuesEvent","CreatedAt":"2017-11-29T04:19:28","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23427","RelatedDescription":"Closed issue \"SourceLocation huge allocations while typing\" (#23427) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.6.0-vs-for-mac-62303-01\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Load a solution\r\n2. Wait for AnalyzerDriver to kick in\r\n3. Probably this is caused to be such a pain point due to `ClrHeapAllocationAnalyzer`\r\n\r\n```\r\nMemory traffic between Snapshot #1 and Snapshot #2\r\n\r\nMicrosoft.CodeAnalysis.SourceLocation allocated 166246540 B in 8312327 objects on stacktrace:\r\n\r\nMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(TextSpan span)\r\nMicrosoft.CodeAnalysis.SyntaxNode.GetLocation()\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ShouldExecuteNode(AnalysisState+SyntaxNodeAnalyzerStateData analyzerStateOpt, SyntaxNode node, DiagnosticAnalyzer analyzer)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteSyntaxNodeActions<TLanguageKindEnum>(IEnumerable<T> nodesToAnalyze, IDictionary<TKey, TValue> nodeActionsByKind, DiagnosticAnalyzer analyzer, ISymbol containingSymbol, SemanticModel model, Func<T, TResult> getKind, Action<T> addDiagnostic, Func<T, TResult> isSupportedDiagnostic, AnalysisState+SyntaxNodeAnalyzerStateData analyzerStateOpt)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteSyntaxNodeActionsCore<TLanguageKindEnum>(IEnumerable<T> nodesToAnalyze, IDictionary<TKey, TValue> nodeActionsByKind, DiagnosticAnalyzer analyzer, ISymbol containingSymbol, SemanticModel model, Func<T, TResult> getKind, TextSpan filterSpan, AnalysisState+SyntaxNodeAnalyzerStateData analyzerStateOpt, Boolean isGeneratedCode)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteSyntaxNodeActions<TLanguageKindEnum>(IEnumerable<T> nodesToAnalyze, IDictionary<TKey, TValue> nodeActionsByKind, DiagnosticAnalyzer analyzer, SemanticModel model, Func<T, TResult> getKind, TextSpan filterSpan, SyntaxReference declaration, Int32 declarationIndex, ISymbol declaredSymbol, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean isGeneratedCode)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver<TLanguageKindEnum>.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver<TLanguageKindEnum>.TryExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean isGeneratedCodeSymbol, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ProcessCompilationEventsCoreAsync>d__71.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ProcessCompilationEventsAsync>d__70.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ExecutePrimaryAnalysisTaskAsync>d__47.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean usingPrePopulatedEventQueue, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<AttachQueueAndProcessAllEventsAsync>d__45.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(AsyncQueue<TElement> eventQueue, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<ComputeAnalyzerDiagnosticsCoreAsync>d__64.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(AnalyzerDriver driver, AsyncQueue<TElement> eventQueue, AnalysisScope analysisScope, CancellationToken cancellationToken)\r\nMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<>c__DisplayClass57_1+<<ComputeAnalyzerDiagnosticsAsync>b__1>d.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<TStateMachine>(TStateMachine stateMachine)\r\nMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<>c__DisplayClass57_1.<ComputeAnalyzerDiagnosticsAsync>b__1()\r\nSystem.Threading.Tasks.Task<TResult>.InnerInvoke()\r\nSystem.Threading.Tasks.Task.Execute()\r\nSystem.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\nSystem.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\nSystem.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(Task currentTaskSlot)\r\nSystem.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\nSystem.Threading.Tasks.Task.ExecuteWorkItem()\r\nSystem.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n\r\n**Actual Behavior**:\r\nTwo problems:\r\n* This method allocates SourceLocation regardless of whether the `isInGeneratedCode` callback uses it or not.\r\n* All the SourceLocation objects add up in terms of allocations. Maybe a valuetuple containing the SyntaxTree and the span would be better here? (have only checked C# SyntaxTree implementation)"},{"Id":"6916691574","Type":"PullRequestEvent","CreatedAt":"2017-11-29T04:09:06","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23412","RelatedDescription":"Merged pull request \"Fix for #22690 NRE in GetAttributeSyntaxNodeOfToken\" (#23412) at dotnet/roslyn","RelatedBody":":memo: This is a back-port of #22961 to **dev15.5.x**. The template below is copied from that issue.\r\n\r\n**Customer scenario**\r\n\r\nAn NRE in AbstractInternalsVisibleToCompletionProvider causes a crash of VS. The NRE was not reproducible and seemed only to occur in the C# intermediate window. No tests are provided (see #22690 why).\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #22690 \r\n[DevDiv 525354](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/525354)\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nBug was not reproducible and therefore no tests are given. The fix is a best guess effort and is based on looking at possible NRE places in the stacktrace given by #22690:\r\n\r\n* `IsStringLiteralExpression` is only called at on place in `AbstractInternalsVisibleToCompletionProvider.GetAttributeSyntaxNodeOfToken`\r\n* `CSharpSyntaxFactsService.IsStringLiteralExpression`  is defined as `=> node.Kind() == SyntaxKind.StringLiteralExpression;`\r\n* `node.Kind()` causes the NRE most likely here: `var rawKind = node.RawKind;` if node is null.\r\n\r\nIf this analysis is not correct there might still be a bug that causes VS to crash.\r\n\r\n**Performance impact**\r\n\r\nNone.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo. New feature. Bug found in VS 15.5 Preview 1\r\n\r\n**Root cause analysis:**\r\n\r\n`var node = token.Parent;` returns `null` in some rare circumstances. This was discovered in VS 15.5 Preview 1.\r\n\r\n**How was the bug found?**\r\n\r\nReported by @tmat in #22690.\r\n\r\n**Test documentation updated?**\r\n\r\nNo."},{"Id":"6916365197","Type":"PullRequestEvent","CreatedAt":"2017-11-29T02:08:18","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23452","RelatedDescription":"Opened pull request \"Remove * from CODEOWNERS file\" (#23452) at dotnet/roslyn","RelatedBody":"Turns out the * only means the files in that immediate directory counts as being matched. That's not what we intended.\r\n\r\nFYI to @jaredpar and @sharwell (who I suspect will notice the most) that this will auto-request reviews for PRs that match this. Great for community PRs, not so great for \"in progress\" PRs."},{"Id":"6916323354","Type":"IssuesEvent","CreatedAt":"2017-11-29T01:54:02","Actor":"elachlan","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23451","RelatedDescription":"Opened issue \"ExtractMethodCodeFefactoringProvider - System.ArgumentOutOfRangeException : 'end' must not be less than 'start'\" (#23451) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.4.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : 'end' must not be less than 'start'\r\nParameter name: end\r\n   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)\r\n   at Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicSelectionResult.ContainsInstanceExpression()\r\n   at Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicMethodExtractor.VisualBasicCodeGenerator.CreateMethodModifiers()\r\n   at async Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicMethodExtractor.VisualBasicCodeGenerator.VB$StateMachine_11_GenerateMethodDefinitionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicMethodExtractor.VisualBasicCodeGenerator.VB$StateMachine_5_GenerateResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6916195247","Type":"PullRequestEvent","CreatedAt":"2017-11-29T01:10:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5038","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5038) at dotnet/corert","RelatedBody":""},{"Id":"6916194434","Type":"PullRequestEvent","CreatedAt":"2017-11-29T01:10:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5037","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5037) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6916148382","Type":"PullRequestEvent","CreatedAt":"2017-11-29T00:55:21","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5037","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5037) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6915817187","Type":"IssuesEvent","CreatedAt":"2017-11-28T23:13:23","Actor":"lt72","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/4768","RelatedDescription":"Reopened issue \"[.NET Native] Error ILT0025 when compiling UWP app targeting SDK16299 and NETCore.UWP 6.0.1\" (#4768) at dotnet/corert","RelatedBody":"Hello,\r\nI've updated my UWP app to target the new SDK 16299 (both minimum and target version) and updated the .NETCore.UniversalWindowsPlatform NuGet package to version 6.0.1, and according to the description, this new version also includes an updated .NET Native compiler.\r\n\r\nThe issue is that I can no longer compile my app in Release mode, I get the following error:\r\n\r\n> ILT0025: inconsistent type forwarders were found for type `System.TimeZoneNotFoundException`\r\n\r\nThis is happening for other developers too.\r\nI can't downgrade to the previous NETCore.UWP package as I'm referencing some .NET Standard 2.0 libraries from my application, so I actually need the new .NET Core version.\r\n\r\nI've also sent an email and a repro to the .NET Native team last week but so far they haven't replied yet.\r\n\r\nI'm at a loss here, I haven't been able to push my app update to the Store for over two weeks now because of this issue.\r\nIs this a known bug, or is there a workaround to fix that?\r\n\r\nThank you for your help!\r\nSergio"},{"Id":"6914941663","Type":"PullRequestEvent","CreatedAt":"2017-11-28T19:57:28","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5034","RelatedDescription":"Closed pull request \"Port Decimal/ThrowHelper changes from coreclr format span change\" (#5034) at dotnet/corert","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15238, containing the non-shared changes from that PR."},{"Id":"6914940652","Type":"PullRequestEvent","CreatedAt":"2017-11-28T19:57:15","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5035","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5035) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6914753548","Type":"PullRequestEvent","CreatedAt":"2017-11-28T19:19:30","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5036","RelatedDescription":"Opened pull request \"Delete double/float formatting code moved to shared\" (#5036) at dotnet/corert","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15246\r\nContributes to https://github.com/dotnet/coreclr/pull/15246"},{"Id":"6914620968","Type":"PullRequestEvent","CreatedAt":"2017-11-28T18:52:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5035","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5035) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6910175820","Type":"PullRequestEvent","CreatedAt":"2017-11-28T00:46:16","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5034","RelatedDescription":"Opened pull request \"Port Decimal/ThrowHelper changes from coreclr format span change\" (#5034) at dotnet/corert","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15238, containing the non-shared changes from that PR."},{"Id":"6909863174","Type":"PullRequestEvent","CreatedAt":"2017-11-27T23:04:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5027","RelatedDescription":"Merged pull request \"[ILVerify] Add additional tests for delegate assignment/return\" (#5027) at dotnet/corert","RelatedBody":"This adds additional tests for the cases discussed in #4952.\r\n\r\nTherefore this fixes #4952."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6915960554","Type":"IssuesEvent","CreatedAt":"2017-11-28T23:54:39","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1724","RelatedDescription":"Closed issue \"dotnet run with a TFM prints restore output to the command line\" (#1724) at dotnet/sdk","RelatedBody":"1. Create a new console application `dotnet new console`\r\n2. Do `dotnet run`. The first and only line in the output is from the app's execution (`Hello world!`)\r\n3. Do `dotnet run -f netcoreapp2.1`. \r\n\r\n**Expected:**\r\n`Hello world!`\r\n\r\n**Actual**\r\n```\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 12.52 ms for D:\\temp\\run-test\\run-test.csproj.\r\nHello World!\r\n```\r\n\r\n```dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007522)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007522\r\n Commit SHA-1 hash:  d58fc6120d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   \\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25907-02\r\n  Build    : 5e5b627d019c82b11a718a90008ce4f737c7e401\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6915349468","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:25:02","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1772","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#1772) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171128-080042\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171128-080042 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6915336239","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:22:04","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1769","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#1769) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171127-080045\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171127-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6915334881","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:21:47","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1767","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#1767) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171124-080047\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171124-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6915333654","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:21:30","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1768","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1768) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171127-080043\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171127-080043 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6915332067","Type":"PullRequestEvent","CreatedAt":"2017-11-28T21:21:09","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1766","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1766) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171124-080045\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171124-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":210,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":26,"RawContent":null},{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":61,"RawContent":null}]}},"RunOn":"2017-11-29T05:30:23.10532Z","RunDurationInMilliseconds":7962}