{"Data":{"GitHub":{"Issues":[{"Id":"420790199","IsPullRequest":false,"CreatedAt":"2019-03-14T01:23:19","Actor":"vrjesus","Number":"2952","RawContent":null,"Title":"Create the Binary Classification With Array float values","State":"open","Body":"### Binary classification\r\n\r\nI want create a Machine Learning, but I need use a vector (array) of floats values (through of a sensor). My question is this, each value must be a Column or I must create a single Column with all values separate with a the comma?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2952","RelatedDescription":"Open issue \"Create the Binary Classification With Array float values\" (#2952)"},{"Id":"420128782","IsPullRequest":false,"CreatedAt":"2019-03-14T00:25:33","Actor":"Ivanidzo4ka","Number":"2928","RawContent":null,"Title":"Scrubbing normalization transforms","State":"closed","Body":"Sub task of #2827 \r\n`LpNormalize`\r\n`GlobalContrastNormalize`\r\n(since `LpNormColumnOptions` and `GcnColumnOptions` are nested classes we can just call them `ColumnOptions`)\r\n`Normalize `\r\nstuff like: `public TData Stddev`\r\nor  `public readonly ImmutableArray<NormalizingTransformer.ColumnOptions> Columns;`\r\nor `public readonly int NumBins;`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2928","RelatedDescription":"Closed issue \"Scrubbing normalization transforms\" (#2928)"},{"Id":"420768624","IsPullRequest":true,"CreatedAt":"2019-03-13T23:40:58","Actor":"maryamariyan","Number":"2951","RawContent":null,"Title":"Separate nuget packaging into Stable and Experimental","State":"open","Body":"- [x] I added `StableProjects` property in a new `StablePackagesInfo.props` file, which has name of stable projects separated by semicolon.\r\n- [x] I set the strategy for having two separate versions by adding another file next to default `BranchInfo.props`, called `BranchInfo.Stable.props`. The files contain version information. Either of the two would be used depending on whether or not a project is listed in `StableProjects` property.\r\n- [x] I tested the assembly versions and nuget package versions using the diff in this PR.\r\n- [ ] The conditions could perhaps be simplified more - needs review\r\n- [ ] I need to know what values of Major/Minor/Patch versions to set for stable projects into `BranchInfo.Stable.props`. Currently `BranchInfo.props` generates `0.12.0-preview`.\r\n\r\nFixes: #2279 \r\ncc: @eerhardt @TomFinley @Ivanidzo4ka @sfilipi @Anipik \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2951","RelatedDescription":"Open PR \"Separate nuget packaging into Stable and Experimental\" (#2951)"},{"Id":"420762734","IsPullRequest":true,"CreatedAt":"2019-03-13T23:18:54","Actor":"Ivanidzo4ka","Number":"2950","RawContent":null,"Title":"Get rid of public tuples","State":"open","Body":"fixes #2881","Url":"https://github.com/dotnet/machinelearning/pull/2950","RelatedDescription":"Open PR \"Get rid of public tuples\" (#2950)"},{"Id":"420760127","IsPullRequest":true,"CreatedAt":"2019-03-13T23:09:59","Actor":"ganik","Number":"2949","RawContent":null,"Title":"Allow only binary classifiers in OVA","State":"open","Body":"fixes #2920 ","Url":"https://github.com/dotnet/machinelearning/pull/2949","RelatedDescription":"Open PR \"Allow only binary classifiers in OVA\" (#2949)"},{"Id":"420740123","IsPullRequest":true,"CreatedAt":"2019-03-13T23:00:02","Actor":"rogancarr","Number":"2947","RawContent":null,"Title":"FeaturizeText: Add instructions to turn off char- or word-gram generation to the tooltip.","State":"closed","Body":"Adding a note on how to turn off char-grams and word-grams in `FeaturizeText`.\r\n\r\nFixes #2946 ","Url":"https://github.com/dotnet/machinelearning/pull/2947","RelatedDescription":"Closed or merged PR \"FeaturizeText: Add instructions to turn off char- or word-gram generation to the tooltip.\" (#2947)"},{"Id":"420710834","IsPullRequest":false,"CreatedAt":"2019-03-13T23:00:02","Actor":"rogancarr","Number":"2946","RawContent":null,"Title":"It is awkward to turn off char-grams with FeaturizeText","State":"closed","Body":"`FeaturizeText` was upgraded to allow specification of n-grams for words and characters. However, now it awkward to use `FeaturizeText` *without* specifying n-grams. It is now necessary to explicitly set `CharFeatureExtractor` as `null`.\r\n\r\nThis is how to compose a bag-of-words with the current API:\r\n```cs\r\nvar pipeline = mlContext.Transforms.Text.FeaturizeText(\r\n    \"Features\",\r\n    new TextFeaturizingEstimator.Options\r\n    {\r\n        KeepPunctuations = false,\r\n        OutputTokens = true,\r\n        CharFeatureExtractor = null,\r\n        WordFeatureExtractor = new WordBagEstimator.Options { NgramLength = 1},\r\n        VectorNormalizer = TextFeaturizingEstimator.NormFunction.None\r\n    },\r\n    \"SentimentText\");\r\n```\r\n\r\nI would expect to be able to do something like\r\n```cs\r\nCharFeatureExtractor = new WordBagEstimator.Options { NgramLength = 0},\r\n```\r\nBut this throws an error that `Skipgrams` is not less-than `NgramLength`, and `Skipgrams` must be positive.\r\n\r\nOverall, it is a bit awkward and not obvious that you have to manually null a option. Is this the API we want to ship in v1.0?","Url":"https://github.com/dotnet/machinelearning/issues/2946","RelatedDescription":"Closed issue \"It is awkward to turn off char-grams with FeaturizeText\" (#2946)"},{"Id":"420753999","IsPullRequest":true,"CreatedAt":"2019-03-13T22:49:04","Actor":"singlis","Number":"2948","RawContent":null,"Title":"WIP: Updating LightGBM Arguments","State":"open","Body":"This PR moves the LightGBM options from an all-in-one class to individual options for the binary, multiclass, regression and ranker trainers. \r\n- Options code that used to live in LightGbmArguments has moved to LightGbmBaseTrainer. Each trainer now has their own respective options class. \r\n- The booster options have changed a bit to hide the IBoosterFactory interface #2559 \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2948","RelatedDescription":"Open PR \"WIP: Updating LightGBM Arguments\" (#2948)"},{"Id":"420199102","IsPullRequest":true,"CreatedAt":"2019-03-13T22:20:24","Actor":"rogancarr","Number":"2931","RawContent":null,"Title":"Train FieldAwareFactorizationMachines without providing arguments","State":"closed","Body":"This PR adds an extension method for `FieldAwareFactorizationMachines` to allow it to be called without providing any arguments by using the default `Feature` column name as the only `Features` column.\r\n\r\nFixes #2927 ","Url":"https://github.com/dotnet/machinelearning/pull/2931","RelatedDescription":"Closed or merged PR \"Train FieldAwareFactorizationMachines without providing arguments\" (#2931)"},{"Id":"420126813","IsPullRequest":false,"CreatedAt":"2019-03-13T22:20:24","Actor":"rogancarr","Number":"2927","RawContent":null,"Title":"FieldAwareFactorizationMachines trainer can't have any empty arguments list","State":"closed","Body":"The `FieldAwareFactorizationMachines` trainer cannot be given an empty arguments list.\r\n\r\n```cs\r\nvar ffmTrainer = mlContext.BinaryClassification.Trainers.FieldAwareFactorizationMachine(\r\n    new FieldAwareFactorizationMachineBinaryClassificationTrainer.Options { });\r\n```\r\nor\r\n```cs\r\nvar ffmTrainer = mlContext.BinaryClassification.Trainers.FieldAwareFactorizationMachine(\r\n    new string[] {\"Features\"});\r\n```\r\nI suggest allowing an empty arguments list by default. cc @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2927","RelatedDescription":"Closed issue \"FieldAwareFactorizationMachines trainer can't have any empty arguments list\" (#2927)"},{"Id":"420640802","IsPullRequest":true,"CreatedAt":"2019-03-13T21:28:17","Actor":"Ivanidzo4ka","Number":"2942","RawContent":null,"Title":"Sort out seed types","State":"closed","Body":"fixes #2917","Url":"https://github.com/dotnet/machinelearning/pull/2942","RelatedDescription":"Closed or merged PR \"Sort out seed types\" (#2942)"},{"Id":"420648744","IsPullRequest":true,"CreatedAt":"2019-03-13T20:46:59","Actor":"wschin","Number":"2944","RawContent":null,"Title":"Scrub text featurizers","State":"closed","Body":"Last step of #2832.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2944","RelatedDescription":"Closed or merged PR \"Scrub text featurizers\" (#2944)"},{"Id":"420073506","IsPullRequest":true,"CreatedAt":"2019-03-13T20:22:37","Actor":"andrewkittredge","Number":"2925","RawContent":null,"Title":"handle space in the directory path.","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n\r\nfixes https://github.com/dotnet/machinelearning/issues/191","Url":"https://github.com/dotnet/machinelearning/pull/2925","RelatedDescription":"Closed or merged PR \"handle space in the directory path.\" (#2925)"},{"Id":"420685279","IsPullRequest":false,"CreatedAt":"2019-03-13T19:41:32","Actor":"RussellKirkwood","Number":"2945","RawContent":null,"Title":"Ignore a column on Training","State":"open","Body":"### System information\r\n\r\n- Win10\r\n- .net core 2.1\r\n\r\nCan I tell Training to Ignore Columns in Training Data\r\n\r\nI tried just leaving them out of Features but that does not appear to work. I thought by not including them in Features it would ignore, but prediction results are not good. If I totaly remove those fields from Data, then my predictions are really good.\r\n\r\nI would like to ignore IncidentReportedByID, IncidentReportedMethod and ID.\r\n```\r\npublic class MyData\r\n    {\r\n        [LoadColumn(0)]\r\n        public float State;\r\n\r\n        [LoadColumn(1)]\r\n        public float City;\r\n\r\n        [LoadColumn(2)]\r\n        public float IncidentType;\r\n\r\n        [LoadColumn(3)]\r\n        public float IncidentReportedByID;\r\n\r\n        [LoadColumn(4)]\r\n        public float IncidentReportedMethod;\r\n        \r\n        [LoadColumn(5)]\r\n        public float Label;\r\n    }\r\n```\r\n\r\nmy training looks like this\r\n```\r\nvar dataProcessPipeline = mlContext.Transforms.Concatenate(DefaultColumnNames.Features, nameof(MyData.State),                                                                                   nameof(MyData.City),\r\n                                                                                   nameof(MyData.IncidentType),                                                                                   \r\n                                                                       .AppendCacheCheckpoint(mlContext);\r\n           \r\n            var trainer = mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumnName: DefaultColumnNames.Label, featureColumnName: DefaultColumnNames.Features);\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2945","RelatedDescription":"Open issue \"Ignore a column on Training\" (#2945)"},{"Id":"420642399","IsPullRequest":false,"CreatedAt":"2019-03-13T18:01:21","Actor":"glebuk","Number":"2943","RawContent":null,"Title":"Documentation: Create ML.NET Component Guide","State":"open","Body":"# ML.NET Guide section of the documentation missing key summary information\r\nSpecifically we need \r\n1. Summary of components that guide users to components needed\r\n2. Guide on how to make pipelines performant\r\n3. Which items are exportable to ONNX\r\n4. Which trainers need caching/normalization?\r\n5. Which trainers and transformers to try first?\r\n\r\nWe can start with existing structure and augment missing information or add additional pages\r\nIdeally, we can make a searchable list with checks where users can filter components by criteria.  For example, I want to get me a \"linear, regression\" or \"streaming, exportable to ONNX\"\r\n## Trainers\r\n\r\n| Dimension |\r\n| ------- |\r\n| Trainer Name |\r\n| Short Description |\r\n| ML Tasks Supported with API doc links to each function | \r\n| Common useful applications  |\r\n| Category/Algorithm | \r\n| In which NuGet? | \r\n| Supports export to ONNX? |\r\n| Single or multi pass (need caching?) | \r\n| Require data to be normalized?  | \r\n| Calibration needed  | \r\n| Types of input supported?  (one or many columns? )| \r\n| Kind of output produced  | \r\n| Scalability in terms of features and examples  | \r\n\r\n## Transformers\r\nThis information can be either presented either as a list, or graphically or as table, or as searchable table or something like [this](https://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html)\r\n\r\n| Column |\r\n| ------- |\r\n| Transformer Name |\r\n| Short Description |\r\n| Common useful applications  |\r\n| Trainable or not? (estimator/transformer) - good to list both types and links to API | \r\n| In which NuGet? | \r\n| Supports export to ONNX? |\r\n| Category/Algorithm | \r\n| Single or multi pass (need caching?) | \r\n| Types of input supported?  (1-1, 1-many etc )| \r\n| Types of input supported  (only floats or other? one or many columns? )| \r\n| What is the output looks like )| \r\n| Scalability in terms of features and examples  | \r\n\r\n## Loaders\r\n\r\n| Column |\r\n| ------- |\r\n| Loader Name |\r\n| Short Description |\r\n| Data file type  | \r\n| Category/Algorithm | \r\n| Common useful applications  |\r\n| Scalability in terms of speed and column count | ","Url":"https://github.com/dotnet/machinelearning/issues/2943","RelatedDescription":"Open issue \"Documentation: Create ML.NET Component Guide\" (#2943)"},{"Id":"420635274","IsPullRequest":false,"CreatedAt":"2019-03-13T17:46:22","Actor":"paulallenbright","Number":"2941","RawContent":null,"Title":"Unity 3d Compatiblity","State":"open","Body":"### System information\r\nWindows Development Unity project\r\n4.x or standard 2.x\r\n\r\n### Issue\r\nCan you make a future release compatible with the latest version of Unity 3D.   Now that Unity 3d supports framework 4.x and .net standard 2.0 this would be a great platform to build the next generation of ml.net applications.\r\n\r\nhttps://unity3d.com/\r\n\r\nUnity projects now supports Nuget for package pull down:\r\n\r\nhttps://github.com/GlitchEnzo/NuGetForUnity\r\n\r\n\r\nThank you so much for taking the time to consider this new compatibility feature\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2941","RelatedDescription":"Open issue \"Unity 3d Compatiblity\" (#2941)"},{"Id":"420571124","IsPullRequest":false,"CreatedAt":"2019-03-13T15:39:51","Actor":"fabsenet","Number":"2940","RawContent":null,"Title":"need documentation: handling varvect","State":"open","Body":"### System information\r\n\r\n- windows 10, fast ring\r\n- .net 4.7.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\ni have a data input class:\r\n```cs\r\n        class NightLightDataRow\r\n        {\r\n            public bool IsActive { get; }\r\n            public byte[] Data { get; }\r\n\r\n            [Microsoft.ML.Data.VectorType(38)]\r\n            public float[] Data2 { get; }\r\n\r\n            public NightLightDataRow() {}\r\n\r\n            public NightLightDataRow(byte[] data, bool isActive)\r\n            {\r\n                Data = data;\r\n                Data2 = Data.Select(d => (float)d).Take(38).ToArray();\r\n                IsActive = isActive;\r\n            }\r\n        }\r\n```\r\n\r\nI train it using `mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent`.\r\n\r\nI got it somehow working using `Data2`, but my real data are `Data` and have 38..43 elements. If I try to train it on that directly, it throws with\r\n\r\n> System.ArgumentOutOfRangeException: 'Schema mismatch for feature column 'Data': expected Vector<R4>, got VarVector<R4>\r\nParametername: inputSchema'`\r\n\r\nthis is the pipeline:\r\n\r\n```cs\r\nvar trainingPipeLine = \r\n                mlContext.Transforms.Conversion.ConvertType(\"Data\")\r\n                .AppendCacheCheckpoint(mlContext)\r\n                .Append(\r\n                mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent(\r\n                            labelColumnName: nameof(NightLightDataRow.IsActive)\r\n                            , featureColumnName: nameof(NightLightDataRow.Data)\r\n                            ));\r\n```\r\n\r\nI understand why it is throwing, but I have no idea how to fix it. What could I do and what would be the correct piece of documentation?\r\n\r\nAlso as a side question: how do I start my trainingPipeline with a CacheCheckpoint? (If i would want to do cache=>StochasticDualCoordinateAscent directly without any transforms)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2940","RelatedDescription":"Open issue \"need documentation: handling varvect\" (#2940)"},{"Id":"420248988","IsPullRequest":true,"CreatedAt":"2019-03-13T14:25:28","Actor":"Ivanidzo4ka","Number":"2936","RawContent":null,"Title":"Hide more things in Data assembly","State":"closed","Body":"Fixes #2926. Fixes #1704.","Url":"https://github.com/dotnet/machinelearning/pull/2936","RelatedDescription":"Closed or merged PR \"Hide more things in Data assembly\" (#2936)"},{"Id":"420121979","IsPullRequest":false,"CreatedAt":"2019-03-13T14:25:28","Actor":"Ivanidzo4ka","Number":"2926","RawContent":null,"Title":"More hiding of unnecessary public classes","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/40abffc4eb98990c86804a05ca707a467edbe3d6/src/Microsoft.ML.Data/Commands/EvaluateCommand.cs#L30\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/40abffc4eb98990c86804a05ca707a467edbe3d6/src/Microsoft.ML.Data/Commands/TrainCommand.cs#L28\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/40abffc4eb98990c86804a05ca707a467edbe3d6/src/Microsoft.ML.Data/DataLoadSave/TrivialLoaderEstimator.cs#L10\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/40abffc4eb98990c86804a05ca707a467edbe3d6/src/Microsoft.ML.StandardTrainers/Standard/MultiClass/OneVersusAllTrainer.cs#L244 Would ask @sfilipi  since she is mentioned she works on OVA output columns, maybe this enum would proof useful.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/40abffc4eb98990c86804a05ca707a467edbe3d6/src/Microsoft.ML.Data/Transforms/SlotsDroppingTransformer.cs#L38 Would double check with @TomFinley  right now, all we have is public class, and everything inside it is hidden, so it's useless for user. We don't have `IEstimator` for it, so I'm not sure how valuable it's to have it. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2926","RelatedDescription":"Closed issue \"More hiding of unnecessary public classes\" (#2926)"},{"Id":"420408498","IsPullRequest":true,"CreatedAt":"2019-03-13T09:56:22","Actor":"llRandom","Number":"2939","RawContent":null,"Title":"CpuMath Enhancement: Make bound checking of loops in hardware intrinsics more efficient","State":"open","Body":"Fixes #835","Url":"https://github.com/dotnet/machinelearning/pull/2939","RelatedDescription":"Open PR \"CpuMath Enhancement: Make bound checking of loops in hardware intrinsics more efficient\" (#2939)"},{"Id":"420344420","IsPullRequest":false,"CreatedAt":"2019-03-13T06:55:33","Actor":"sfilipi","Number":"2938","RawContent":null,"Title":"More trainer related naming alignment","State":"open","Body":"Take another pass over the trainers and the model parameter types, and align them, because now we have:\r\n\r\n`LogisticRegressionMulticlassClassificationTrainer` but `MulticlassLogisticRegressionModelParameters`. \r\n\r\nI think following the same principles on the ModelParams might make them more relatable; so change `MulticlassLogisticRegressionModelParameters` to `LogisticRegressionMulticlassModelParameters`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2938","RelatedDescription":"Open issue \"More trainer related naming alignment\" (#2938)"},{"Id":"420249334","IsPullRequest":true,"CreatedAt":"2019-03-12T23:25:13","Actor":"rogancarr","Number":"2937","RawContent":null,"Title":"Adding Debugging Scenario tests for V1 APIs","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the Debugging functionality we want fully supported in V1.\r\n\r\nScenarios\r\n- I can see how my data was read in to verify that I specified the schema correctly\r\n- I can see the output at the end of my pipeline to see which columns are available (score, probability, predicted label)\r\n- I can look at intermediate steps of the pipeline to debug my model.   Example: > I were to have the text \"Help I'm a bug!\" I should be able to see the steps where it is normalized to \"help i'm a bug\" then tokenized into [\"help\", \"i'm\", \"a\", \"bug\"] then mapped into term numbers [203, 25, 3, 511] then projected into the sparse float vector {3:1, 25:1, 203:1, 511:1}, etc. etc.\r\n- (P1) I can access the information needed for understanding the progress of my training (e.g. number of trees trained so far out of how many)\r\n\r\nFixes #2932 ","Url":"https://github.com/dotnet/machinelearning/pull/2937","RelatedDescription":"Open PR \"Adding Debugging Scenario tests for V1 APIs\" (#2937)"},{"Id":"420248728","IsPullRequest":true,"CreatedAt":"2019-03-12T23:22:49","Actor":"zeahmed","Number":"2935","RawContent":null,"Title":"Added support for inserting batch dimension in inputs in TensorFlow.","State":"open","Body":"This PR fixes #2778.\r\n\r\nIt is difficult to induce shape of the inputs from the data or model when the model accepts input of any shape but internal operators requires the input in particular shape. This is the problem with the inception model available at the following location.\r\n\r\nhttps://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip\r\n\r\nThe model takes input data of any shape. There is a convolution layer just after the input which requires 4-D input. The first dimension for Conv2D operation in TensorFlow is the batch dimension. That's causing failure of samples in #2778. The ML.NET input is [224, 244, 3] while convolution layer in the above model requires [-1, 224, 224, 3]. The ultimate solution to this problem is to have reshape transform #765.\r\n\r\nHowever, it will take time implement. To unblock #2778, the temporary solution implemented here is to add a parameter in options class or other public interfaces called “AddBatchDimensionInput”. When user set it to true, batch dimension would be added to the inputs otherwise not. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2935","RelatedDescription":"Open PR \"Added support for inserting batch dimension in inputs in TensorFlow.\" (#2935)"},{"Id":"420247676","IsPullRequest":false,"CreatedAt":"2019-03-12T23:18:19","Actor":"rogancarr","Number":"2934","RawContent":null,"Title":"Logs are inscrutable","State":"open","Body":"There is a `Log` on `MLContext` objects, but it is very hard to read. It would be nice to add a `Level` to the log and some better organization than brackets.\r\n\r\nFor example,  SDCA returns lines like:\r\n```cs\r\n\"[Source=SdcaTrainerBase; Training, Kind = Info] Auto - tuning parameters: L2 = 0.001.\",\r\n\"[Source = SdcaTrainerBase; Training, Kind = Info] Auto - tuning parameters: L1Threshold(L1 / L2) = 0.\",\r\n\"[Source = SdcaTrainerBase; Training, Kind = Info] Using best model from iteration 7.\"};\r\n```\r\nBut to find these, you have to search a huge stream of information.","Url":"https://github.com/dotnet/machinelearning/issues/2934","RelatedDescription":"Open issue \"Logs are inscrutable\" (#2934)"},{"Id":"420237013","IsPullRequest":false,"CreatedAt":"2019-03-12T22:38:38","Actor":"sfilipi","Number":"2933","RawContent":null,"Title":"Knowing what to cast the model to is hard","State":"open","Body":"I have been writing a few tests about saving the model and reloading the models, and casting the model members to the right types, so I can get to something nested. \r\n\r\nExample  \r\n\r\n    `(IEstimator<ITransformer> pipe, IDataView dataView) = GetBinaryClassificationPipeline();\r\n\r\n     pipe = pipe.Append(ML.BinaryClassification.Trainers.LogisticRegression(\r\n     new LogisticRegression.Options\r\n     {\r\n         ShowTrainingStatistics = true,\r\n         ComputeStandardDeviation = new ComputeLRTrainingStdThroughMkl(),\r\n     }));\r\n\r\n     // SEE THE CASTS\r\n      var transformer = pipe.Fit(dataView) as TransformerChain<BinaryPredictionTransformer<CalibratedModelParametersBase<LinearBinaryModelParameters, PlattCalibrator>>>;\r\n\r\n      var linearModel = transformer.LastTransformer.Model.SubModel as LinearBinaryModelParameters;\r\n      var stats = linearModel.Statistics;\r\n\r\n     var modelPath = GetOutputPath(\"temp.zip\");\r\n     // Save model. \r\n     using (var file = File.Create(modelPath))\r\n     transformer.SaveTo(ML, file);\r\n\r\n     // Load model.\r\n     TransformerChain<ITransformer> transformerChain;\r\n     using (var file = File.OpenRead(modelPath))\r\n     transformerChain = TransformerChain.LoadFrom(ML, file);\r\n\r\n     // SEE THE CASTS\r\n     var lastTransformer = transformerChain.LastTransformer as BinaryPredictionTransformer<IPredictorProducing<float>>;\r\n      var model = lastTransformer.Model as ParameterMixingCalibratedModelParameters<IPredictorWithFeatureWeights<float>, ICalibrator>;\r\n      linearModel = model.SubModel as LinearBinaryModelParameters;\r\n      var stats = linearModel.Statistics;\r\n`\r\n\r\nNotice the casts \r\nThe only way to get to the Statistics (or weights, bias etc) is by casting to the right type. \r\nIt takes living in the Visual Studio debugger to figure out the right types.. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2933","RelatedDescription":"Open issue \"Knowing what to cast the model to is hard\" (#2933)"},{"Id":"420201052","IsPullRequest":false,"CreatedAt":"2019-03-12T20:54:39","Actor":"rogancarr","Number":"2932","RawContent":null,"Title":"Create functional tests for all Debugging scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the Debugging functionality we want fully supported in V1.\r\n\r\nScenarios\r\n- I can see how my data was read in to verify that I specified the schema correctly\r\n- I can see the output at the end of my pipeline to see which columns are available (score, probability, predicted label)\r\n- I can look at intermediate steps of the pipeline to debug my model.   Example: > I were to have the text \"Help I'm a bug!\" I should be able to see the steps where it is normalized to \"help i'm a bug\" then tokenized into [\"help\", \"i'm\", \"a\", \"bug\"] then mapped into term numbers [203, 25, 3, 511] then projected into the sparse float vector {3:1, 25:1, 203:1, 511:1}, etc. etc.\r\n- (P1) I can access the information needed for understanding the progress of my training (e.g. number of trees trained so far out of how many)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2932","RelatedDescription":"Open issue \"Create functional tests for all Debugging scenarios\" (#2932)"},{"Id":"420160170","IsPullRequest":true,"CreatedAt":"2019-03-12T20:05:17","Actor":"shauheen","Number":"2930","RawContent":null,"Title":"Fix readme sample","State":"closed","Body":"revert changes done for #2565 in #2887 . The code snippet is working in 0.11. But this is just a snippet and users should check the samples repo for complete samples.","Url":"https://github.com/dotnet/machinelearning/pull/2930","RelatedDescription":"Closed or merged PR \"Fix readme sample\" (#2930)"},{"Id":"420141184","IsPullRequest":true,"CreatedAt":"2019-03-12T18:27:18","Actor":"codemzs","Number":"2929","RawContent":null,"Title":"Move ONNX Transformer into Microsoft.ML.Transforms.Onnx namespace.","State":"open","Body":"towards #2751\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2929","RelatedDescription":"Open PR \"Move ONNX Transformer into Microsoft.ML.Transforms.Onnx namespace.\" (#2929)"},{"Id":"419793212","IsPullRequest":true,"CreatedAt":"2019-03-12T18:21:24","Actor":"rogancarr","Number":"2923","RawContent":null,"Title":"Logistic Regression NumberOfIterations to MaximumNumberOfIterations","State":"closed","Body":"This PR updates `Logistic Regression` (multiclass, regression aka poisson, and multiclass) to specify the `MaximumNumberOfIterations` instead of `NumberOfIterations` as it's a stopping criterion and not necessarily a tuning parameter.\r\n\r\nI also took a look around the codebase, and this is the last change of this sort that will be needed.\r\n\r\nFixes #2922 ","Url":"https://github.com/dotnet/machinelearning/pull/2923","RelatedDescription":"Closed or merged PR \"Logistic Regression NumberOfIterations to MaximumNumberOfIterations\" (#2923)"},{"Id":"419868211","IsPullRequest":true,"CreatedAt":"2019-03-12T08:56:26","Actor":"llRandom","Number":"2924","RawContent":null,"Title":"Added an extension method for saving statically typed model (#1286)","State":"open","Body":"Added an extension method for saving statically typed model\r\nFixes #1286","Url":"https://github.com/dotnet/machinelearning/pull/2924","RelatedDescription":"Open PR \"Added an extension method for saving statically typed model (#1286)\" (#2924)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-14T05:30:35.564055Z","RunDurationInMilliseconds":680}