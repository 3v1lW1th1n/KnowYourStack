{"Data":{"Blog":{"FeedItems":[{"Title":"Five-Star Apps with Mobile Center Test","PublishedOn":"2017-10-20T12:33:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Five-star mobile apps are all about consistent and predictable output. It&#8217;s not a good experience for users when an app suddenly crashes or doesn’t format correctly on their mobile screens. Developers can easily avoid these scenarios by testing for various scenarios on different devices, and Visual Studio Mobile Center makes it easy to test your mobile [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/\">Five-Star Apps with Mobile Center Test</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/","RawContent":null},{"Title":"Upcoming Webinar | Build Better Games with Unity and Microsoft Azure","PublishedOn":"2017-10-19T18:51:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Register now to join David Antognoli on Thursday, November 7 at 9 am PT to learn how to take your Unity games to the next level with powerful cloud services. He’ll walk through how to connect your apps to Microsoft Azure, adding compelling features that users love, like leaderboards and heatmaps, and demo how new [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/\">Upcoming Webinar | Build Better Games with Unity and Microsoft Azure</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/","RawContent":null},{"Title":"Plugin and Permission Changes with iOS 11","PublishedOn":"2017-10-18T20:24:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>iOS 11 introduced some fun updates around permissions when accessing certain features on the device. I first noticed these changes when trying to access a user location with the Geolocator Plugin in a Xamarin.Forms application. To my surprise, nothing happened. Upon further investigation of the application&#8217;s Output, I noticed a message explaining exactly what I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/plugin-permission-changes-ios-11/\">Plugin and Permission Changes with iOS 11</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/plugin-permission-changes-ios-11/","RawContent":null},{"Title":"Adaptive UI with Xamarin.Forms","PublishedOn":"2017-10-16T20:58:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Xamarin.Forms has supported iOS, Android, and Windows for a long time. We&#8217;ve also added new platforms to keep up with the changing landscape, such as Tizen and macOS, with Linux and Windows WPF on the horizon. These platforms run on a wide variety of devices including phones, tablets, desktops, and TVs. This presents an interesting [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/adaptive-ui-xamarin-forms/\">Adaptive UI with Xamarin.Forms</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/adaptive-ui-xamarin-forms/","RawContent":null},{"Title":"Give the Visual Studio 2017 Version 15.5 Preview a Try!","PublishedOn":"2017-10-13T20:06:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>With Visual Studio 2017 version 15.4 now stable and sporting some awesome new features, such as Xamarin Live integration, Android Oreo / iOS 11 support, and a smarter, smaller installation, it&#8217;s time to turn our attention to the next version of Visual Studio 2017, version 15.5! This upcoming release is now available as a preview [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/\">Give the Visual Studio 2017 Version 15.5 Preview a Try!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/","RawContent":null},{"Title":"Bring 3D Models To Life in Augmented Reality with UrhoSharp","PublishedOn":"2017-10-12T19:28:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>UrhoSharp brings 3D to a variety of platforms and uses its own binary mdl format for model files. There are many sources for 3D models, including cgtrader and TurboSquid, and formats such as FBX, OBJ, DAE and BLEND. Urho3D provides tools like AssetImporter and the Urho3D Blender Add-in so you can use these models. In [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/\">Bring 3D Models To Life in Augmented Reality with UrhoSharp</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/","RawContent":null},{"Title":"Updating Xamarin.iOS Apps for the iPhone X","PublishedOn":"2017-10-11T18:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>There&#8217;s no doubt that one of the biggest announcements from Apple this year was the iPhone X. The new Super Retina display is edge-to-edge on the device, creating an immersive experience we had yet to see on iPhones. With the new screen changes on the iPhone X, developers may be asking themselves, &#8220;What do I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/\">Updating Xamarin.iOS Apps for the iPhone X</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/","RawContent":null},{"Title":"Build and Release Five-Star Apps Faster","PublishedOn":"2017-10-10T17:49:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The first step in the life of a mobile app is build automation, which builds the app and runs required tests to make sure the app follows required rules. Build automation is also the first step towards shipping high quality, five-star mobile apps. When building iOS and Android mobile applications, one of the main challenges [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/\">Build and Release Five-Star Apps Faster</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/","RawContent":null},{"Title":"Developing Real-Time Communication Apps with WebSocket","PublishedOn":"2017-10-09T21:17:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>WebSockets is a two-way communication protocol, or persistence communication channel over TCP connection, an extremely powerful protocol leveraged by numerous games, apps with chat functionality, and real-time apps such as stock tickers. In this blog post, we&#8217;ll discuss how to build a simple Xamarin chat room application that will leverage and connect to an ASP.NET [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/\">Developing Real-Time Communication Apps with WebSocket</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/","RawContent":null},{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T21:05:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/\">DataBinding Power Moves You May Not Be Using (Yet)</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6744957108","Type":"PullRequestEvent","CreatedAt":"2017-10-20T17:38:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/958","RelatedDescription":"Opened pull request \"Bump to mono/2017-06/1f4613aa\" (#958) at xamarin/xamarin-android","RelatedBody":"Context: http://bugzilla.xamarin.com/show_bug.cgi?id=59302\r\nContext: http://bugzilla.xamarin.com/show_bug.cgi?id=59436\r\nContext: http://bugzilla.xamarin.com/show_bug.cgi?id=60233"},{"Id":"6744711626","Type":"PullRequestEvent","CreatedAt":"2017-10-20T16:39:55","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/957","RelatedDescription":"Opened pull request \"[Xamarin.ProjectTools] Get the actual Time Elapsed from the build.log\" (#957) at xamarin/xamarin-android","RelatedBody":"Sometimes out TimeOut tests fail if the build is a bit slow.\r\nThis is because we time the entire process of starting a new\r\nprocess to bringing in ALL the output data.\r\n\r\nSo lets parse the build.log and pull our the reported MSBuild\r\n\"Time Elapsed\" if we can."},{"Id":"6744506938","Type":"PullRequestEvent","CreatedAt":"2017-10-20T15:54:18","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/947","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Debug info for Lint Task\" (#947) at xamarin/xamarin-android","RelatedBody":"We need to output the Lint tool Path we use and the Lint Tool\r\nversion for diagnostic purposes. So if it does fail we have\r\nthe information we need to correct the issue."},{"Id":"6744504675","Type":"PullRequestEvent","CreatedAt":"2017-10-20T15:53:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/951","RelatedDescription":"Merged pull request \"xabuild: exit if TARGETS_DIR can't be found\" (#951) at xamarin/xamarin-android","RelatedBody":"Otherwise we'd continue in the script and all sorts of weirdness would occur since TARGETS_DIR is empty."},{"Id":"6744494925","Type":"PullRequestEvent","CreatedAt":"2017-10-20T15:51:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/953","RelatedDescription":"Merged pull request \"[Xamarin.ProjectTools] Actually use MSBuild for the tests.....\" (#953) at xamarin/xamarin-android","RelatedBody":"Commit 8643ded reworked the msbuild tests to use msbuild. But\r\nthere was a problem with the logic.\r\n\r\n\tstring.IsNullOrEmpty (useMSBuild) || useMSBuild == \"0\"\r\n\r\nwell the Environment variable USE_MSBUILD will ALWAYS be empty.\r\nBecause we never set it. so the logic should be\r\n\r\n\t!string.IsNullOrEmpty (useMSBuild) && useMSBuild == \"0\"\r\n\r\nso that if it is set it has to be \"0\" to allow xbuild to be\r\nused.\r\n\r\nAlso one of the tests was using `RunningMSBuild` before it was\r\ncalculated. So it was always false. So just added some logging to\r\nprint what we are using to the console. This forces `RunningMSBuild`\r\nto be calculated.\r\n\r\nOne final issue was with the intermediate .pdb files being cleaned\r\nup by `IncrementalClean`. Turns out we had a fix for the .mdb files\r\nin `Xamarin.Android.Windows.targets`. So the solution there was to\r\nadd the same work around for .pdb files."},{"Id":"6744308474","Type":"PullRequestEvent","CreatedAt":"2017-10-20T15:14:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/952","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Don't get resources in DTB\" (#952) at xamarin/xamarin-android","RelatedBody":"Fixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60080\r\nContext: 1cd582ec\r\n\r\nIt appears that the `<GetAdditionalResourcesFromAssemblies/>` task is\r\ncausing Visual Studio 2015 to hang when loading projects.\r\n\r\nIn the interests of expediency, \"revert\" to d15-3 behavior and make\r\nthe `<GetAdditionalResourcesFromAssemblies/>` task invocation\r\nconditional on `$(DesignTimeBuild)` being False, i.e. only execute\r\n`<GetAdditionalResourcesFromAssemblies/>` when performing *normal*\r\nbuilds, *not* Design-Time builds."},{"Id":"6744019451","Type":"PullRequestEvent","CreatedAt":"2017-10-20T14:17:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/956","RelatedDescription":"Merged pull request \"[performance measurements] Added AOT'ed assemblies sizes again\" (#956) at xamarin/xamarin-android","RelatedBody":"The https://github.com/xamarin/xamarin-android/commit/2dc5689a5d823fc91b04791d5354254e5ed2d31d fixed the files location, but new size measurements definition\r\ndidn't include the AOT'ed assemblies sizes."},{"Id":"6743866280","Type":"PullRequestEvent","CreatedAt":"2017-10-20T13:46:50","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/956","RelatedDescription":"Opened pull request \"[performance measurements] Added AOT'ed assemblies sizes again\" (#956) at xamarin/xamarin-android","RelatedBody":"The https://github.com/xamarin/xamarin-android/commit/2dc5689a5d823fc91b04791d5354254e5ed2d31d fixed the files location, but new size measurements definition\r\ndidn't include the AOT'ed assemblies sizes."},{"Id":"6743853947","Type":"PullRequestEvent","CreatedAt":"2017-10-20T13:44:15","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/955","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Speed up ResolveLibraryProjectImports\" (#955) at xamarin/xamarin-android","RelatedBody":"Rather than trying to ALWAYS unset the ReadOnly flag, lets only\r\ndo it if the directory is read only. Also use EnumerateFiles\r\nrather than GetFiles to get the .jar files. EnumerateFiles is\r\nmore efficient."},{"Id":"6743838753","Type":"PullRequestEvent","CreatedAt":"2017-10-20T13:41:07","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/954","RelatedDescription":"Opened pull request \"[xabuild] Only create the xabuild.exe.config if it does not exist.\" (#954) at xamarin/xamarin-android","RelatedBody":"When running the tests in parallel we end up trying to create the\r\nconfig file all the time. This sometimes causes failures becuase\r\nthe file is removed or incomplete when a test runs.\r\n\r\nSo we should only write the config file once."},{"Id":"6742769224","Type":"PullRequestEvent","CreatedAt":"2017-10-20T09:10:41","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/953","RelatedDescription":"Opened pull request \"[Xamarin.ProjectTools] Actually use MSBuild for the tests.....\" (#953) at xamarin/xamarin-android","RelatedBody":"Commit 8643ded reworked the msbuild tests to use msbuild. But\r\nthere was a problem with the logic.\r\n\r\n\tstring.IsNullOrEmpty (useMSBuild) || useMSBuild == \"0\"\r\n\r\nwell the Environment variable USE_MSBUILD will ALWAYS be empty.\r\nBecause we never set it. so the logic should be\r\n\r\n\t!string.IsNullOrEmpty (useMSBuild) && useMSBuild == \"0\"\r\n\r\nso that if it is set it has to be \"0\" to allow xbuild to be\r\nused."},{"Id":"6741258155","Type":"PullRequestEvent","CreatedAt":"2017-10-19T23:32:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/952","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Don't get resources in DTB\" (#952) at xamarin/xamarin-android","RelatedBody":"Fixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60080\r\nContext: 1cd582ec\r\n\r\nIt appears that the `<GetAdditionalResourcesFromAssemblies/>` task is\r\ncausing Visual Studio 2015 to hang when loading projects.\r\n\r\nIn the interests of expediency, \"revert\" to d15-3 behavior and make\r\nthe `<GetAdditionalResourcesFromAssemblies/>` task invocation\r\nconditional on `$(DesignTimeBuild)` being False, i.e. only execute\r\n`<GetAdditionalResourcesFromAssemblies/>` when performing *normal*\r\nbuilds, *not* Design-Time builds."},{"Id":"6740929585","Type":"PullRequestEvent","CreatedAt":"2017-10-19T21:47:35","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/951","RelatedDescription":"Opened pull request \"xabuild: exit if TARGETS_DIR can't be found\" (#951) at xamarin/xamarin-android","RelatedBody":"Otherwise we'd continue in the script and all sorts of weirdness would occur since TARGETS_DIR is empty."},{"Id":"6740412527","Type":"PullRequestEvent","CreatedAt":"2017-10-19T19:49:10","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/950","RelatedDescription":"Merged pull request \"[build] SKIP_NUNIT_TESTS check is reversed\" (#950) at xamarin/xamarin-android","RelatedBody":"When working with the `Makefile` I noticed this command doesn’t run the\r\ntests:\r\n```\r\n$ make run-nunit-tests\r\nmake: Nothing to be done for `run-nunit-tests’.\r\n```\r\nAnd this command runs the tests:\r\n```\r\n$ make run-nunit-tests SKIP_NUNIT_TESTS=1\r\n```\r\n\r\nI suspect the intention is that `ifneq` needs to be `ifeq`.\r\n\r\nI believe this was introduced in https://github.com/xamarin/xamarin-android/commit/385699a58635d87a1cc65b60995d3420995f21d7."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6746479069","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:45:47","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1216","RelatedDescription":"Opened pull request \"Simplify row height estimation\" (#1216) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpected row height estimation to be simple. We actually do quite a bit of work to compute the exact height of the first cell (for RetainElement) and use that as the estimate for the remaining cells. This adds a bunch of complexity. For example, life cycle management of the renderer used for estimation had a bug which is causes the unexpected behavior reported here.\r\n\r\nThis change simply always returns a constant for the row height estimation.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59813\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nReturn a constant for row height estimation. Let's see if any tests fail.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6745814625","Type":"PullRequestEvent","CreatedAt":"2017-10-20T21:12:12","Actor":"Makeloft","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1215","RelatedDescription":"Opened pull request \"ResourceDictionary class refactoring\" (#1215) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRefactoring of ResourceDictionary class.\r\n\r\n### Bugs Fixed ###\r\n\r\nnone\r\n\r\n### API Changes ###\r\n\r\nnone\r\n\r\n### Behavioral Changes ###\r\n\r\nMore optimal memory usage and better performance in some cases.\r\n\r\n### PR Checklist ###\r\n\r\n- [ +] Has tests (if omitted, state reason in description)\r\n- [ +] Rebased on top of master at time of PR\r\n- [ +] Changes adhere to coding standard\r\n- [ +] Consolidate commits as makes sense\r\n"},{"Id":"6745558428","Type":"PullRequestEvent","CreatedAt":"2017-10-20T20:03:33","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1214","RelatedDescription":"Opened pull request \"[Internal] Update obsolete messages for 2.5\" (#1214) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nJust fixing the obsolete messages to say 2.5 instead of 3.0\r\n"},{"Id":"6745318537","Type":"PullRequestEvent","CreatedAt":"2017-10-20T19:03:49","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1213","RelatedDescription":"Closed pull request \"Improve 'ResourceDictionary' class\" (#1213) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd C# 7 support for old build tools by adding https://www.nuget.org/packages/Microsoft.Net.Compilers/\r\n\r\nImprove ResourceDictionary class code:\r\n- use 'dictionary.TryGetValue' method into indexer instead constructions 'if (dictionary.ContainsKey(key)) return dictionary[key];'\r\n- avoid redundant 'ToArray' call when use private method 'OnValuesChanged'\r\n- apply C# 7 code style\r\n\r\n### Bugs Fixed ###\r\n\r\nnone\r\n\r\n### API Changes ###\r\n\r\nnone\r\n\r\n### Behavioral Changes ###\r\n\r\n'ResourceDictionary' class improvements\r\n- more optimal memory usage in some cases\r\n- best performance of indexer\r\n- new laconic C# 7 code style \r\n\r\n### PR Checklist ###\r\n\r\n- [+] Has tests (if omitted, state reason in description)\r\n- [+] Rebased on top of master at time of PR\r\n- [+] Changes adhere to coding standard\r\n- [+] Consolidate commits as makes sense\r\n"},{"Id":"6743276601","Type":"PullRequestEvent","CreatedAt":"2017-10-20T11:20:24","Actor":"Makeloft","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1213","RelatedDescription":"Opened pull request \"Improve 'ResourceDictionary' class\" (#1213) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd C# 7 support for old build tools by adding https://www.nuget.org/packages/Microsoft.Net.Compilers/\r\n\r\nImprove ResourceDictionary class code:\r\n- use 'dictionary.TryGetValue' method into indexer instead constructions 'if (dictionary.ContainsKey(key)) return dictionary[key];'\r\n- avoid redundant 'ToArray' call when use private method 'OnValuesChanged'\r\n- apply C# 7 code style\r\n\r\n### Bugs Fixed ###\r\n\r\nnone\r\n\r\n### API Changes ###\r\n\r\nnone\r\n\r\n### Behavioral Changes ###\r\n\r\n'ResourceDictionary' class improvements\r\n- more optimal memory usage in some cases\r\n- best performance of indexer\r\n- new laconic C# 7 code style \r\n\r\n### PR Checklist ###\r\n\r\n- [+] Has tests (if omitted, state reason in description)\r\n- [+] Rebased on top of master at time of PR\r\n- [+] Changes adhere to coding standard\r\n- [+] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6745705352","Type":"PullRequestEvent","CreatedAt":"2017-10-20T20:42:16","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2913","RelatedDescription":"Merged pull request \"[macos][mmp] Update mmp's help to note registrar and fix aot mistake\" (#2913) at xamarin/xamarin-macios","RelatedBody":"- https://bugzilla.xamarin.com/show_bug.cgi?id=60294"},{"Id":"6745530184","Type":"PullRequestEvent","CreatedAt":"2017-10-20T19:56:43","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2914","RelatedDescription":"Opened pull request \"[msbuild] Updated DetectSigningIdentity to allow thumbprints for the …\" (#2914) at xamarin/xamarin-macios","RelatedBody":"…CodeSignKey"},{"Id":"6745299614","Type":"PullRequestEvent","CreatedAt":"2017-10-20T18:59:17","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2913","RelatedDescription":"Opened pull request \"[macos][mmp] Update mmp's help to note registrar and fix aot mistake\" (#2913) at xamarin/xamarin-macios","RelatedBody":"- https://bugzilla.xamarin.com/show_bug.cgi?id=60294"},{"Id":"6744306447","Type":"PullRequestEvent","CreatedAt":"2017-10-20T15:14:03","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2912","RelatedDescription":"Merged pull request \"[macos] Fix guiunit error on clean builds by depending on correct copy\" (#2912) at xamarin/xamarin-macios","RelatedBody":"- From a clean build making a BCL test would error due to the non-mobile guiunit not being built\r\n- This was because the Makefile-mac.inc target was incorrect\r\n- This was because xharness assumed that non variation based targets were always Modern\r\n- However, BCL tests are Full, not Modern"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"921466915117260801","CreatedAt":"2017-10-20T20:03:27+00:00","UserScreenname":"xamarinhq","Text":"Get five-star app quality every time with testing from #VSMobileCenter: https://t.co/sUR6Ctm1xk https://t.co/gGQOYtNmkC","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":10,"RawContent":null},{"Id":"921409932993482752","CreatedAt":"2017-10-20T16:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:… https://t.co/8uG0wblORA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":14,"RawContent":null},{"Id":"921089184667983872","CreatedAt":"2017-10-19T19:02:29+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar on building better games with #Unity3D and Microsoft #Azure: https://t.co/0c8to6tPmT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":35,"RawContent":null},{"Id":"921044016610922496","CreatedAt":"2017-10-19T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":10,"RawContent":null},{"Id":"920749716610207745","CreatedAt":"2017-10-18T20:33:33+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/jFJho4InOr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":42,"RawContent":null},{"Id":"920684397212438529","CreatedAt":"2017-10-18T16:14:00+00:00","UserScreenname":"xamarinhq","Text":"Request reviews with iOS 10.3’s SKStoreReviewController: https://t.co/HgugUTrN81","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"920320046701989894","CreatedAt":"2017-10-17T16:06:12+00:00","UserScreenname":"xamarinhq","Text":"Try out updates to Xamarin Live, a new Mac connection workflow, and more in the Visual Studio 2017 15.5 Preview:… https://t.co/iB8bIZkhW1","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":79,"FavoriteCount":39,"RawContent":null},{"Id":"920032724999725056","CreatedAt":"2017-10-16T21:04:29+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":100,"FavoriteCount":53,"RawContent":null},{"Id":"919958111670165505","CreatedAt":"2017-10-16T16:08:00+00:00","UserScreenname":"xamarinhq","Text":"Dive into the world of build configurations to see how they can improve your build times and productivity: https://t.co/KxvabUJIue","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"919747480769712128","CreatedAt":"2017-10-16T02:11:02+00:00","UserScreenname":"xamarinhq","Text":"Add “mobile developer” to your resume with @XamarinU, starting with a 30-day free trial: https://t.co/bVpjALvmoy https://t.co/fiA4quVFQb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":15,"RawContent":null},{"Id":"919305335759953927","CreatedAt":"2017-10-14T20:54:06+00:00","UserScreenname":"xamarinhq","Text":"Weekend project: add some new features to your #Xamarin Android apps with our Android Support Library v26 overview:… https://t.co/49gaLayBhU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"918566588483342336","CreatedAt":"2017-10-12T19:58:35+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/j4LE7PWPMd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null},{"Id":"918507552811487232","CreatedAt":"2017-10-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better apps with @BritchDavid's eBook on \"Enterprise Application Patterns using #XamarinForms\": https://t.co/YryVqlrejk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":9,"RawContent":null},{"Id":"918186189634572288","CreatedAt":"2017-10-11T18:47:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/OmUwO59Fdx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"918142648204124160","CreatedAt":"2017-10-11T15:54:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays are a great way to learn how to build, test, &amp; connect native apps with #Xamarin! Find one near you: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":16,"RawContent":null},{"Id":"917846344714391552","CreatedAt":"2017-10-10T20:16:35+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSMobileCenter: https://t.co/XHMCHeVNSB https://t.co/3hhv3CG6uh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":30,"RawContent":null},{"Id":"917779002781249539","CreatedAt":"2017-10-10T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to display data with #macOS Table Views: https://t.co/NHwCfrILH6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":12,"RawContent":null},{"Id":"917501676159893504","CreatedAt":"2017-10-09T21:27:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":117,"FavoriteCount":65,"RawContent":null},{"Id":"917416111804702720","CreatedAt":"2017-10-09T15:47:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample app that spans devices and mobile platforms using Microsoft's Project Rome: https://t.co/SLeQw6q4YO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":20,"RawContent":null},{"Id":"917203711692337152","CreatedAt":"2017-10-09T01:43:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @nishanil shows you how to add #facetracking and live recognition to your Android app: https://t.co/5R7K2hNJXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2017-10-21T05:30:37.1680183Z","RunDurationInMilliseconds":3742}