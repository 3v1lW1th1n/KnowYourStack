{"Data":{"Blog":{"FeedItems":[{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9222892091","Type":"PullRequestEvent","CreatedAt":"2019-03-12T00:55:02","Actor":"alexischr","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2817","RelatedDescription":"Opened pull request \"[mono-runtimes] Adjust URL for Mono archive\" (#2817) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9222460685","Type":"PullRequestEvent","CreatedAt":"2019-03-11T22:59:32","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2816","RelatedDescription":"Opened pull request \"[tests] mark a couple flaky tests [NonParallelizable]\" (#2816) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2461019\r\n\r\nI've noticed two tests can fail on a clean Windows machine.\r\n\r\nOne example is a build error in `BuildApplicationAndClean`:\r\n\r\n    Xamarin.Android.Common.targets(2108,2): error MSB3374: The last access/last write time on file \"C:\\Users\\dlab14\\.nuget\\packages\\xamarin.forms\\3.1.0.697729\\lib\\MonoAndroid10\\Xamarin.Forms.Platform.Android.dll.mdb\" cannot be set. The process cannot access the file 'C:\\Users\\dlab14\\.nuget\\packages\\xamarin.forms\\3.1.0.697729\\lib\\MonoAndroid10\\Xamarin.Forms.Platform.Android.dll.mdb' because it is being used by another process.\r\n\r\nAnother example is a target running when it shouldn't in\r\n`AppProjectTargetsDoNotBreak`:\r\n\r\n    Input file \"C:\\Users\\dlab14\\.nuget\\packages\\xamarin.forms\\3.1.0.697729\\lib\\MonoAndroid10\\FormsViewGroup.dll.mdb\" is newer than output file \"obj\\Debug\\stamp\\_CopyMdbFiles.stamp\".\r\n\r\nI think both are caused by tests running in parallel. I'm hoping\r\n`[NonParallelizable]` will make these tests less flaky."},{"Id":"9221989293","Type":"PullRequestEvent","CreatedAt":"2019-03-11T21:26:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2809","RelatedDescription":"Merged pull request \"[build] improve XA's build for proguard & r8\" (#2809) at xamarin/xamarin-android","RelatedBody":"If you build `Xamarin.Android.sln`, a lot of stuff happens even if\r\nthere are no changes...\r\n\r\nOur build doesn't follow our own \"MSBuild Best Practices\", and we have\r\na few MSBuild targets that always run.\r\n\r\n## r8.csproj ##\r\n\r\nThe main problem here was that we were invoking `gradlew` every time,\r\nand it takes quite a while to startup when using the `--no-daemon`\r\nswitch.\r\n\r\nI added proper `Inputs` and `Outputs` for the `_BuildR8` MSBuild\r\ntarget, as well as a `<Touch/>` call.\r\n\r\nThese changes saved 6 seconds(!!!) on incremental builds of\r\n`Xamarin.Android.sln`.\r\n\r\n## proguard.csproj ##\r\n\r\nThis project was invoking `<Ant/>` and copying files every time.\r\n\r\nI cleaned this project up a bit by creating an `@(_Outputs)` item\r\ngroup to be used throughout. Adding `Inputs` and `Outputs` to\r\n`_BuildProGuard` and a `<Touch/>` call fixed the incremental build.\r\n\r\nThe `Clean` target was actually broken. Since there is a chain of\r\n`<ProjectReference/>` here, `Xamarin.Android.Tools.BootstrapTasks`\r\ncontaining the `<Ant/>` MSBuild task gets cleaned! Then the actual\r\ncall to `<Ant/>` fails due to the assembly being missing. The fix here\r\nis to just completely replace the `Clean` target with our own, so\r\n`<ProjectReference/>` will not be cleaned. This is the same behavior\r\n`r8.csproj` already had.\r\n\r\nThere was also a general problem with the `CoreCompile` target. I\r\ndon't think it is appropriate to run `<Ant/>` during a design-time\r\nbuild in Visual Studio. I just made this target empty--I think it is\r\nhere to appease OmniSharp.\r\n\r\nThese changes saved ~2 seconds on incremental builds of\r\n`Xamarin.Android.sln`.\r\n\r\nThis brings us to a grand total of ~8 seconds saved."},{"Id":"9221941079","Type":"IssuesEvent","CreatedAt":"2019-03-11T21:18:21","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2815","RelatedDescription":"Opened issue \"Profiled AOT - find a nice way to get the AOT profile from device\" (#2815) at xamarin/xamarin-android","RelatedBody":"The profile is now created in the `.__override__`  directory, which is protected in latest Android versions.\r\n\r\nSo far I was getting the profile using `adb shell run-as ...` command. This has a drawback as it requires the application to be debuggable (`application android:debuggable=\"true\"` in `AndroidManifest.xml`)\r\n\r\nHopefully we can find a world accessible location on device's storage and create the profile there.\r\n\r\nOne possible location is `/data/local/tmp`. It is not yet clear whether we can write to that location from the application, as only the `shell` user or group can write there. Needs more investigation."},{"Id":"9221923310","Type":"PullRequestEvent","CreatedAt":"2019-03-11T21:15:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2810","RelatedDescription":"Merged pull request \"Revert \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2810) at xamarin/xamarin-android","RelatedBody":"This reverts commit 0c7d8fd4425c24bf9d073936d621dd12464ee7a0."},{"Id":"9221878071","Type":"IssuesEvent","CreatedAt":"2019-03-11T21:07:55","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2814","RelatedDescription":"Opened issue \"Profiled AOT - make it possible to split AOT profile by assembly\" (#2814) at xamarin/xamarin-android","RelatedBody":"I plan to create a command line tool to process the AOT profile.\r\n\r\nPrimary feature will be to filter the content by location, so that we can split the profile into multiple smalled profiles. This way we can have one profile for XA app startup, another for XF/XA startup and so on.\r\n\r\nIt can hopefully reuse parts of https://github.com/mono/mono/pull/4305"},{"Id":"9221837809","Type":"IssuesEvent","CreatedAt":"2019-03-11T21:01:22","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2813","RelatedDescription":"Opened issue \"Profiled AOT - add a way to flush the AOT profile during the app run\" (#2813) at xamarin/xamarin-android","RelatedBody":"That would need changes to mono runtime's AOT profiler to have the profile written before the application shutdown.\r\n"},{"Id":"9221799698","Type":"IssuesEvent","CreatedAt":"2019-03-11T20:55:40","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2812","RelatedDescription":"Opened issue \"Profiled AOT - initial implementation\" (#2812) at xamarin/xamarin-android","RelatedBody":"Add `msbuild` sauce to enable build with startup AOT profile.\r\n\r\nNew property `$(AndroidEnableProfiledAot)` to enable use of AOT profiles and to enable AOT compilation.\r\n\r\nThe profiles will be specified by new item group `@(AndroidAotProfile)`. It will contain the initial *default* startup profile. This way users will be able to add own profiles and remove the initial one when desired."},{"Id":"9221653717","Type":"PullRequestEvent","CreatedAt":"2019-03-11T20:32:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2806","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix for \"build-less\" designer\" (#2806) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/813889\r\n\r\nBackport to `d16-0`:\r\n\r\n* Had to remove the change to `DesignerTests.cs`, since this test\r\n  doesn't exist here.\r\n\r\nIn VS for Mac 2019 Preview, a specific scenario is broken:\r\n\r\n1. Download the repro (the creatively-named, perhaps legendary?\r\n   `App72.sln`)\r\n2. Delete the `bin` and `obj` directories\r\n3. Open a new VS for Mac instance. (`Automatic NuGet restore` should\r\n   be off)\r\n4. Open the solution, wait for any build progress to complete such as\r\n   `Updating resources...`, etc.\r\n5. Restore NuGet packages via `Project->Restore NuGet Packages`\r\n6. Open `MainPage.xaml`: designer displays a gray rectangle that says\r\n   \"AndroidFormsPreviewerRenderer\"\r\n\r\nDoing a full Build solves the problem, but this is the whole point of\r\nthe \"build-less\" designer/previewer feature in Dev16.\r\n\r\nBehind the scenes, the failure is the `SetupDependenciesForDesigner`\r\nMSBuild target. Opening the designer's log file, there are lots and\r\nlots of `javac` errors, such as:\r\n\r\n    ERROR: :   :  error: cannot find symbol\r\n        public Toolbar_NavigationOnClickEventDispatcher (android.support.v7.widget.Toolbar p0)\r\n    symbol:   class Toolbar\r\n    location: package android.support.v7.widget\r\n\r\nDoing more digging, I was able to reproduce the problem with a bash\r\nscript:\r\n\r\n    PROJ='App72/App72.Android/App72.Android.csproj'\r\n    SLN='App72.sln'\r\n    MSBUILD_ARGS='/nologo /v:quiet /p:DesignTimeBuild=True /p:BuildingInsideVisualStudio=True'\r\n    DESIGNER_ARGS='/p:AndroidUseManagedDesignTimeResourceGenerator=False'\r\n    MSBUILD=msbuild\r\n\r\n    # If you have a local xamarin-android build\r\n    MSBUILD=\"$HOME/Desktop/Git/xamarin-android/bin/Debug/bin/xabuild\"\r\n\r\n    rm logs.zip *.binlog\r\n    rm -r App72/App72.Android/obj App72/App72.Android/bin\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS \\\r\n        /t:UpdateAndroidResources /bl:dtb1.binlog\r\n\r\n    $MSBUILD $SLN $MSBUILD_ARGS /t:Restore /bl:restore.binlog\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS $DESIGNER_ARGS \\\r\n        /t:SetupDependenciesForDesigner /bl:designer2.binlog\r\n\r\n    zip logs.zip *.binlog\r\n\r\nAt this point, I could also reproduce the problem with\r\nxamarin-android/master. So, this is a not something we've fixed in\r\nmaster.\r\n\r\nNow... We have `DesignerTests.DesignerBeforeNuGetRestore` which does\r\nalmost *exactly* what this script is doing!\r\n\r\nBut then I tried splitting apart the NuGet restore, to more closely\r\nmatch the script. When calling `/t:Restore` in a separate MSBuild\r\ncall, the existing test we have failed in the exact same way as the\r\nscript: many `javac` errors.\r\n\r\nI reviewed the `binlog` file, looking for any interesting MSBuild\r\ntargets that were skipped:\r\n\r\n    Skipping target \"_BuildLibraryImportsCache\" because all output files are up-to-date with respect to the input files.\r\n\r\nGoing back through @alanmcgovern's notes, he could resolve the problem\r\nby deleting this file:\r\n\r\n    obj/Debug/designtime/libraryimports.cache.stamp\r\n\r\nBut then reviewing, the `Inputs` for `_BuildLibraryImportsCache`, they\r\ndidn't seem to be correct?\r\n\r\n    <Target Name=\"_BuildLibraryImportsCache\"\r\n        Inputs=\"$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)\"\r\n        Outputs=\"$(_AndroidLibraryImportsCache).stamp\">\r\n      <GetImportedLibraries ... CacheFile=\"$(_AndroidLibraryImportsCache)\" />\r\n      <Touch Files=\"$(_AndroidLibraryImportsCache).stamp\" AlwaysCreate=\"True\" />\r\n\r\nIf `<GetImportedLibraries/>` operates on\r\n`$(_AndroidLibraryProjectImportsCache)`, shouldn't it be an `Input`?\r\n\r\nSure enough, adding one more input solved the problem.\r\n\r\nI looked through our git history, and these `Inputs` have been this\r\nway at least since 2016. So this bug has just been here a while?"},{"Id":"9221443409","Type":"PullRequestEvent","CreatedAt":"2019-03-11T20:00:04","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2807","RelatedDescription":"Merged pull request \"[build] Use system cmake and ninja to build mingw deps and libzip\" (#2807) at xamarin/xamarin-android","RelatedBody":"Commit a014bd30 reverted e84e502e in hope that we will be able to properly\r\nbootstrap from a squeeky clean system, but that hope was failed because I missed\r\nthe fact that `mingw-dependencies` and `libzip` as well as `libzip-windows`\r\nprojects, all built during the `android-toolchain` phase used the `cmake` and\r\n`ninja` programs provided with the Android SDK. Well, that couldn't work :P\r\n\r\nThis commit makes the above projects build with the system `cmake` and `ninja`\r\nbinaries and adds both of them to list of macOS dependencies.\r\n\r\nIf this works fine we will be able to restore e84e502e"},{"Id":"9216795875","Type":"IssuesEvent","CreatedAt":"2019-03-11T09:09:48","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2451","RelatedDescription":"Closed issue \"VS2017 can not build xamarin android project if it has BuildNativeLibs target\" (#2451) at xamarin/xamarin-android","RelatedBody":"I have a project which has additional pre-build step for building native android library by using ndk-build.\r\n\r\nI want to add a dependency on \"AndroidPrepareForBuild\" target to check that all sdk paths have been resolved correctly before ndk-build call.\r\n\r\n`\r\n  <Target Name=\"BuildNativeLibs\" DependsOnTargets=\"AndroidPrepareForBuild\" Inputs=\"jni\\Android.mk;jni\\Application.mk\" Outputs=\"@(AndroidNativeLibrary)\">\r\n    <Exec Command=\"$(AndroidNdkDirectory)\\ndk-build -C jni\" />\r\n  </Target>\r\n`\r\n\r\nBut after that VS can not build my project with some errors with resources:\r\n\r\n`\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(7): error APT0000: No resource found that matches the given name (at 'icon' with value '@mipmap/ic_launcher').\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(7): error APT0000: No resource found that matches the given name (at 'label' with value '@string/app_name').\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(7): error APT0000: No resource found that matches the given name (at 'roundIcon' with value '@mipmap/ic_launcher_round').\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(7): error APT0000: No resource found that matches the given name (at 'theme' with value '@style/AppTheme').\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(8): error APT0000: No resource found that matches the given name (at 'label' with value '@string/app_name').\r\n1>NdkExample\\NdkExample\\obj\\Debug\\81\\android\\manifest\\AndroidManifest.xml(8): error APT0000: No resource found that matches the given name (at 'theme' with value '@style/AppTheme.NoActionBar').\r\n`\r\n\r\nSeems like I have some conflict with some another target which used for preparing resources.\r\n\r\nNdkExample.zip attached.\r\n\r\n### Note\r\n\r\nThis error can be avoided if move BuildNativeLibs target to separated Android binding project and use EmbeddedNativeLibrary instead of AndroidNativeLibrary\r\n\r\n[NdkExample.zip](https://github.com/xamarin/xamarin-android/files/2603403/NdkExample.zip)\r\n"},{"Id":"9213740649","Type":"PullRequestEvent","CreatedAt":"2019-03-10T14:34:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2811","RelatedDescription":"Merged pull request \"[build] use RegisterTaskObject in <GitCommitInfo/>\" (#2811) at xamarin/xamarin-android","RelatedBody":"When building `Xamarin.Android.sln` (even with no changes),\r\n`<GitCommitInfo/>` runs 15 times, which takes about 6 seconds on my\r\nmachine.\r\n\r\nReviewing the input values to `<GitCommitInfo/>`, 2/3 of the calls\r\nseem to be duplicate. This is a classic example where\r\n`RegisterTaskObject` can help.\r\n\r\nI cached the `CommitInfo` output property using the important inputs\r\nas a key to `RegisterTaskObject`:\r\n\r\n* `WorkingDirectory`\r\n* `XASourceDirectory`\r\n* `SubmoduleName`\r\n* `GitRemoteName`\r\n\r\nI used the simple syntax for creating a C# tuple as the lookup key. I\r\nhad to update the TFV of two projects to v4.7 to use the simplified\r\ntuple syntax. I prefer this over `Tuple<string,string,string,string>`.\r\n\r\nThis saves ~4 seconds on incremental builds of `Xamarin.Android.sln`."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9222957600","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:13:59","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3921","RelatedDescription":"Closed issue \" FreshTinyIoC.TinyIoCResolutionException\" (#3921) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nGetting exception on starting itself\r\n\r\n> FreshTinyIoC.TinyIoCResolutionException: Resolve failed: myPageModel - Reason: /system/lib/libsqlite.so\r\n\r\nApp.xaml.cs\r\n\r\n```\r\nInitializeComponent();\r\nFreshIOC.Container.Register<IContactRepository, ContectRepository>();  \r\nvar mainPage = FreshPageModelResolver.ResolvePageModel<AddContactPageModel>();\r\nMainPage = new FreshNavigationContainer(mainPage);\r\n```\r\n\r\nI am using FreshMvvm & SQLite to my project. I have installed 3 libraries from nuget\r\n1) FreshMvvm 2.2.4\r\n2) SQLite.Net-PCL 3.1.1\r\n3) SQLite.Net.Core-PCL 3.1.1\r\n\r\n[I am following this article](http://bsubramanyamraju.blogspot.com/2018/03/getting-started-with-xamarin-forms.html)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Xamarin.forms project & add above libraries\r\n2. Do CRUD operation using FreshMvvm by following above article.\r\n3. If you are following above article-- Execute app\r\n\r\n### Expected Behavior\r\nApp should execute\r\n\r\n### Actual Behavior\r\nGetting crashed on startup\r\n\r\n### Basic Information\r\nUsing xamarin forms with sqlite & FreshMvvm with visual studio IDE & the little related issue I got with same exception \r\n\r\n> FreshTinyIoC.TinyIoCResolutionException: Resolve failed: myPageModel - Reason: /system/lib/libsqlite.so\r\n\r\nOn XF-Previwer so I have assigned that on visual studio developer community below\r\n\r\nhttps://developercommunity.visualstudio.com/content/problem/344704/an-exception-occured-while-rendering-control.html\r\n\r\n\r\n\r\n\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.8.1\r\nVisualStudio.15.Release/15.8.1+28010.2003\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nApplication Insights Tools for Visual Studio Package   8.13.10627.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nC# Tools   2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.11.7-pre (8955b2a)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28010.00\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nXamarin   4.11.0.732 (d15-8@33e83e124)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.14.218 (79f535bdd)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.113 (e1d02a7)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.0.0.18 (HEAD/3d8a28f1a)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.14.0.13 (373c313)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![xfsc1](https://user-images.githubusercontent.com/19743421/46152783-5c553500-c28f-11e8-91a5-01831e04cebc.png)\r\n\r\n\r\n![xfsc2](https://user-images.githubusercontent.com/19743421/46152800-62e3ac80-c28f-11e8-9d02-e319fd716ad2.png)\r\n\r\n\r\n![xfsc3](https://user-images.githubusercontent.com/19743421/46152815-6a0aba80-c28f-11e8-9206-fd89b7d73a47.png)\r\n\r\n\r\n\r\n\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\n\n> VS bug [#712428](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/712428)"},{"Id":"9222663537","Type":"IssuesEvent","CreatedAt":"2019-03-11T23:49:54","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5472","RelatedDescription":"Reopened issue \"Xamarin.Forms.Maps has mispackaged the design assembly\" (#5472) at xamarin/Xamarin.Forms","RelatedBody":"If i examine all the nupkgs shipped by X.F we can see that every .Design.dll except for `Xamarin.Forms.Maps.Design.dll` is in the correct location.\r\n\r\nCan we move `Xamarin.Forms.Maps.Design.dll` to a 'Design' subfolder like everything else?\r\n\r\n```\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/netstandard2.0/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/netstandard2.0/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/netstandard1.0/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/netstandard1.0/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/MonoAndroid90/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/MonoAndroid90/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/MonoAndroid81/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/MonoAndroid81/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/Xamarin.iOS10/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/Xamarin.iOS10/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/uap10.0/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/uap10.0/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/Xamarin.Mac/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/Xamarin.Mac/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    84480 b- defN 19-Mar-05 18:49 lib/tizen40/Design/Xamarin.Forms.Core.Design.dll\r\n-rw----     2.0 fat    13824 b- defN 19-Mar-05 18:49 lib/tizen40/Design/Xamarin.Forms.Xaml.Design.dll\r\n-rw----     2.0 fat    12288 b- defN 19-Mar-05 18:49 lib/netstandard2.0/Xamarin.Forms.Maps.Design.dll\r\n-rw----     2.0 fat    12288 b- defN 19-Mar-05 18:49 lib/netstandard1.0/Xamarin.Forms.Maps.Design.dll\r\n```\n\n> VS bug [#812508](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/812508), VS bug [#812681](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/812681), VS bug [#817128](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/817128)"},{"Id":"9222191144","Type":"IssuesEvent","CreatedAt":"2019-03-11T22:02:25","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5457","RelatedDescription":"Closed issue \"Nullable DateTime with value is null in a constructor\" (#5457) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have a nullable DateTime ViewModel property, bound to a Xamarin.Forms view (Custom widget extended from DatePicker)\r\n2. Have a model with a constructor, which have a nullable DateTime parameter\r\n3. Get ViewModel property, pass it to constructor\r\n\r\n```\r\n       // CODE FROM VIEW MODEL\r\n        private DateTime? _installationDate;\r\n        public DateTime? InstallationDate\r\n        {\r\n            get => _installationDate;\r\n            set\r\n            {\r\n                _installationDate = value;\r\n                RaisePropertyChanged();\r\n            }\r\n        }\r\n\r\n        private async Task EditEquipment() {\r\n            var info = new CustomerEquipmentInfo(EquipmentInfo.Id, InstallationDate);\r\n        }\r\n       // CODE FROM VIEW MODEL\r\n\r\npublic class CustomerEquipmentInfo {\r\n       public CustomerEquipmentInfo(Guid id, DateTime? installationDate) {\r\n            Id = id;\r\n            InstallationDate = installationDate;\r\n       }\r\n\r\n        public Guid Id { get; private set; }\r\n        public DateTime? InstallationDate { get; private set; }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI expect that my DateTime passed to object is not null\r\n\r\n### Actual Behavior\r\n\r\nNullable datetime set with a valid date value become null when passed to a constructor, in Release mode, on Xamarin iOS, on a real device (iPad Air 2 with iOS 12.1 & iPhone 8 with iOS 12.1) (Xamarin iOS Debug works, Xamarin Android Debug and Release works). On iPhone Emulator, it works too.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1029999\r\n- Last known good version: -\r\n- IDE: Visual Studio For Mac 7.8.2 Build 1\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  XCode 10.1\r\n  - Android: -\r\n  - UWP:  -\r\n- Android Support Library Version: -\r\n- Nuget Packages:\r\n- Affected Devices: iPad Air 2 & iPhone 8\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9221976519","Type":"IssuesEvent","CreatedAt":"2019-03-11T21:24:07","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5756","RelatedDescription":"Opened issue \"Watch app template fails to build (MSB4094) in VS Mac\" (#5756) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n### Steps to Reproduce\r\n\r\nI created a new solution in VS Mac (MotionRecorder) and added to it a new WatchOS App. I attempted to build the just-generated project and received: \r\n\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(4,4): Error MSB4094: \"/Users/larryobrien/Documents/src/xamarin_mine/WatchKit_Work/MotionRecorder/MotionRecord/MotionRecord.WatchOSExtension/bin/iPhoneSimulator/Debug/device-builds/watch4.4-5.1/MotionRecordWatchOSExtension.appex;/Users/larryobrien/Documents/src/xamarin_mine/WatchKit_Work/MotionRecorder/MotionRecord/MotionRecord.WatchOSExtension/bin/iPhoneSimulator/Debug/device-builds/watch4.4-5.1/MotionRecordWatchOSExtension.appex\" is an invalid value for the \"Source\" parameter of the \"Ditto\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". (MSB4094) (MotionRecord.WatchOSApp)\r\n### Expected Behavior\r\n\r\nCompilation fails.\r\n\r\n### Actual Behavior\r\n\r\nCompilation succeeds.\r\n\r\n### Environment\r\n\r\n```\r\nVisual Studio Enterprise 2019 Preview for Mac\r\nVersion 8.0 Preview (8.0 build 2479)\r\nInstallation UUID: 6b94f136-026d-4a5a-bf6d-af2c0d8dc019\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 5.6.0.2 (d16-0 / 040682909)\r\n\r\n\r\n\tPackage version: 518000266\r\n\r\n\r\nMono Framework MDK\r\nRuntime:\r\n\tMono 5.18.0.266 (2018-08/29eb176dd97) (64-bit)\r\n\tPackage version: 518000266\r\n\r\n\r\nNuGet\r\nVersion: 4.8.0.5385\r\n\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.8\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.3\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.504/Sdks\r\nSDK Versions:\r\n\t2.1.504\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.3\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.9\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n\r\nUpdater\r\nVersion: 11\r\n\r\n\r\nXamarin Designer\r\nVersion: 4.17.4.366\r\nHash: b4b7c658d\r\nBranch: remotes/origin/d16-0\r\nBuild date: 2019-02-18 13:35:26 UTC\r\n\r\n\r\nApple Developer Tools\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n\r\nXamarin.Mac\r\nVersion: 5.6.0.23 (Visual Studio Enterprise)\r\nHash: ad57f877\r\nBranch: d16-0\r\nBuild date: 2019-02-12 15:19:51-0500\r\n\r\n\r\nXamarin.iOS\r\nVersion: 12.7.1.69 (Visual Studio Enterprise)\r\nHash: 011f73e9\r\nBranch: xi-interpreter\r\nBuild date: 2019-02-21 16:14:58-0500\r\n\r\n\r\nXamarin.Android\r\nVersion: 9.2.0.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/larryobrien/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.4 (API level 19)\r\n\t\t5.0 (API level 21)\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 27.0.3\r\n\r\n\r\nBuild Information: \r\nMono: mono/mono/2018-08@163f45d81ce\r\nJava.Interop: xamarin/java.interop/d16-0@c987483\r\nLibZipSharp: grendello/LibZipSharp/master@44de300\r\nLibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\nMXE: xamarin/mxe/xamarin@b9cbb535\r\nProGuard: xamarin/proguard/master@905836d\r\nSQLite: xamarin/sqlite/3.26.0@325e91a\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d16-0@0a7edd6\r\n\r\n\r\nMicrosoft Mobile OpenJDK\r\nJava SDK: /Users/larryobrien/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_8.0.25\r\n1.8.0-25\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n\r\nAndroid Device Manager\r\nVersion: 1.2.0.13\r\nHash: ec487ee\r\nBranch: remotes/origin/d16-0\r\nBuild date: 2019-02-20 20:21:52 UTC\r\n\r\n\r\nXamarin Inspector\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n\r\nBuild Information\r\nRelease ID: 800002479\r\nGit revision: 522ea35a65be379a2708fd885eb1adfacb54f9a8\r\nBuild date: 2019-02-23 17:46:57+00\r\nBuild branch: master\r\nXamarin extensions: 703d7b3e1a5c003264003b2293b63d72c0a03739\r\n\r\n\r\nOperating System\r\nMac OS X 10.14.0\r\nDarwin 18.0.0 Darwin Kernel Version 18.0.0\r\n    Wed Aug 22 20:13:40 PDT 2018\r\n    root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\nI sample project can be found in the original feedback issue [here](https://developercommunity.visualstudio.com/comments/478997/view.html).\r\n"},{"Id":"9221898257","Type":"IssuesEvent","CreatedAt":"2019-03-11T21:11:15","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5755","RelatedDescription":"Opened issue \"Loosing icons and images when using xcassets in libraries\" (#5755) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. One solution containing two or more projects\r\n2. An app project (multiplatforms), using Xamarin.Forms\r\n3. A library project (multiplatforms), using Xamarin.Forms\r\n\r\nIn the app project, under iOS, fill the Assets.xcassets with app icon and a new Media.xcassets with images.\r\n\r\nIn the library project, under iOS, add a nex XXXX.xcasset file and add images in it.\r\n\r\nMake sure that the app refers to the library and then build it.\r\n\r\n### Expected Behavior\r\n\r\nImages added to the assets are present.\r\n\r\n### Actual Behavior\r\n\r\nThe application loses its images, the app icon as well as other assets that were in xcassets folder.\r\n\r\nMove the images outside the xcassets, put them in the Resources folder, delete the xcassets file and rebuild. App icon and images are back.\r\n\r\n### Example Project (If Possible)\r\n\r\n[listviewtest.zip](https://github.com/xamarin/xamarin-macios/files/2954218/listviewtest.zip)\r\n\r\nThis is from a [feedback issue](https://developercommunity.visualstudio.com/content/problem/445767/loosing-icons-and-images-when-using-xcassets-in-li.html)\r\n"},{"Id":"9221473301","Type":"PullRequestEvent","CreatedAt":"2019-03-11T20:04:36","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5754","RelatedDescription":"Opened pull request \"[msbuild] Xamarin.Mac Notary Support\" (#5754) at xamarin/xamarin-macios","RelatedBody":"Almost everything \"just worked\" after hardened runtime, once you get the certificate right.\r\n\r\nHowever, we need the secure timestamp argument."},{"Id":"9220584072","Type":"PullRequestEvent","CreatedAt":"2019-03-11T17:50:20","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5749","RelatedDescription":"Merged pull request \"[XHarness] Reenable the NUnit System.Data tests on mac os x.\" (#5749) at xamarin/xamarin-macios","RelatedBody":"Fixes https://github.com/xamarin/maccore/issues/1192\r\nFixes https://github.com/xamarin/maccore/issues/1193"},{"Id":"9219424272","Type":"PullRequestEvent","CreatedAt":"2019-03-11T15:23:42","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5748","RelatedDescription":"Merged pull request \"Bump maccore to get new mlaunch location.\" (#5748) at xamarin/xamarin-macios","RelatedBody":"Diff: https://github.com/xamarin/maccore/compare/f3034c261f70c980f75d8d89ccf711d0814907f8...0e465b6769ed77b127bb17b770be6a6da7b7ec67"},{"Id":"9219397572","Type":"PullRequestEvent","CreatedAt":"2019-03-11T15:20:35","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5740","RelatedDescription":"Merged pull request \"Bump maccore to get update to bot provisioning. (#5727)\" (#5740) at xamarin/xamarin-macios","RelatedBody":"* Bump maccore to get update to bot provisioning.\r\n\r\nDiff: https://github.com/xamarin/maccore/compare/31660af4d0693f6677e574601007e0256fba3338...993e43e1a9b2437dacc0868b8dd6bd3d0985da6c\r\n\r\n* [jenkins] Prepackaged macOS tests only need a custom keychain."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":143,"FavoriteCount":67,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":36,"FavoriteCount":8,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":17,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":260,"FavoriteCount":128,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":60,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":21,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":51,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":110,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":51,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-03-12T05:30:54.1685395Z","RunDurationInMilliseconds":2867}