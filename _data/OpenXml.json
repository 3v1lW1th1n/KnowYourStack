{"Data":{"Sdk":{"Events":[{"Id":"11087445026","Type":"IssuesEvent","CreatedAt":"2019-12-14T02:04:58","Actor":"paulresdat","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/645","RelatedDescription":"Opened issue \"Embedded documents with images breaks \"Save As\" on Word for Mac\" (#645) at OfficeDev/Open-XML-SDK","RelatedBody":"Is this a:\r\n- [x] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\n**Description**\r\n\r\nUsing OpenXML, appending a word document with embedded images into another word document using `AddAlternativeFormatImportPart(AlternativeFormatImportPartType.WordprocessingML, altChunkId)` causes an issue where the user can not \"Save\" or \"Save As\" when altering the content in Word for Mac.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Framework, .NET Core 3\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n**Repro**\r\n\r\n1. Create a new Console App in Visual Studio on Mac\r\n1. Add a folder to the top level called \"Docs\"\r\n1. Download the Nuget dependency DocumentFormat.OpenXml\r\n1. Create a new word doc named \"test-source.docx\"\r\n    1. Put some test text in there, doesn't matter what\r\n    1. Add the document to the solution in \"Docs\" folder\r\n    1. Change the property to \"Copy always\"\r\n1. Create a new word doc named \"test-append.docx\" (the embedded word doc)\r\n    1.  Put in some test text at the top\r\n    1. Copy over a jpg of your choice. The image type I used to reproduce is a jpg. I fetched mine from http://apod.nasa.gov/apod/ , one of their big pics should do it.\r\n    1. Add to the \"Docs\" folder in the solution\r\n    1. Change property of document to \"Copy always\"\r\n1. Copy paste the code below into your Program.cs file:\r\n\r\n```csharp\r\nusing System.IO;\r\nusing System.Linq;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Wordprocessing;\r\nusing Text = DocumentFormat.OpenXml.Wordprocessing.Text;\r\n\r\nnamespace TestWordAppend\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var destinationDoc = \"Docs/test-destination.docx\";\r\n            var sourceDoc = \"Docs/test-source.docx\";\r\n            var appendedDoc = \"Docs/test-append2.docx\";\r\n\r\n            File.Delete(destinationDoc);\r\n            File.Copy(sourceDoc, destinationDoc);\r\n\r\n            using (var doc = WordprocessingDocument.Open(destinationDoc, true))\r\n            {\r\n                var body = doc.MainDocumentPart.Document.Body;\r\n\r\n                var p2 = body.InsertAfter(\r\n                    new Paragraph(\r\n                        new ParagraphProperties(\r\n                            new PageBreakBefore()\r\n                    )),\r\n                    body.Elements<Paragraph>().Last()\r\n                );\r\n\r\n\r\n                var altChunkId = \"AltChunkId\";\r\n                var chunk = doc.MainDocumentPart.AddAlternativeFormatImportPart(\r\n                    AlternativeFormatImportPartType.WordprocessingML,\r\n                    altChunkId);\r\n\r\n                using (var fs = File.Open(appendedDoc, FileMode.Open))\r\n                    chunk.FeedData(fs);\r\n\r\n                var altChunk = new AltChunk { Id = altChunkId };\r\n                var run = new Run(new TabChar(), new Text(appendedDoc), new Break());\r\n                run.PrependChild(new RunProperties { RunStyle = new RunStyle { Val = \"Bold\" } });\r\n                var fileP = p2.InsertAfterSelf(new Paragraph());\r\n                fileP.Append(run);\r\n                run = new Run(new TabChar(), new Text(\"Uploaded by: \"), new TabChar(), new Text(\"Test User\"));\r\n                run.PrependChild(new RunProperties { RunStyle = new RunStyle { Val = \"Italic\" } });\r\n                fileP.Append(run);\r\n\r\n                body.Append(altChunk);\r\n                doc.MainDocumentPart.Document.Save();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n``` \r\n\r\n**Observed**\r\n\r\nWhen I open the destination document using Word on Mac, I will indeed see the document contents embedded in the destination document, however I can no longer utilize \"Save\" or \"Save As\".  Upon clicking \"save\" on a \"Save As\" when changing the name of the file, you will see the file name revert back to the original document name in the title and when you go to your \"Save As\" destination, you will not find a new document.  This problem does not exist in Word for Windows.\r\n\r\n**Expected**\r\n\r\nThe document should be able to be altered and saved within the MacOS Word application.\r\n"},{"Id":"10995475107","Type":"IssuesEvent","CreatedAt":"2019-12-03T03:18:36","Actor":"hong1997","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/644","RelatedDescription":"Opened issue \"How to parse embedded file(OLE obejct) in pptx/docx\" (#644) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [X] Question on library usage\r\n\r\nHow to parse embedded files(OLE obejct) in pptx/docx.\r\nThey are Ole objects mostly, like object1.bin.\r\nIf there're any good ways to parse it?\r\n Unzip the OLE object, there're several kinds of format:\r\n![image](https://user-images.githubusercontent.com/20583076/70017644-98380880-15be-11ea-95e4-a966e0bb0dba.png)\r\n![image](https://user-images.githubusercontent.com/20583076/70017651-9cfcbc80-15be-11ea-876a-467a3492bce4.png)\r\n![image](https://user-images.githubusercontent.com/20583076/70017658-9ff7ad00-15be-11ea-8f3d-0ce5bb4afb6c.png)\r\n![image](https://user-images.githubusercontent.com/20583076/70017672-a25a0700-15be-11ea-8d83-f29e9d07cb1f.png)\r\n\r\n\r\n```csharp\r\n// Please add a self-contained, minimum viable repro of the issue.\r\n// If you require external resources, please provide a gist or GitHub repro\r\n// An Xunit style test is preferred, but a console application would work too.\r\n``` \r\n\r\n**Observed**\r\n\r\nPlease add your observed behavior here\r\n\r\n**Expected**\r\n\r\nPlease add your expected behavior here.\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2019-12-16T05:30:48.9030649Z","RunDurationInMilliseconds":1425}