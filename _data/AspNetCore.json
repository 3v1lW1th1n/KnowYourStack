{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core... <a aria-label=\"read more about Announcing SignalR (alpha) for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":45,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":105,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6644195655","Type":"IssuesEvent","CreatedAt":"2017-09-27T14:02:49","Actor":"mlevinmail","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2217","RelatedDescription":"Opened issue \"When asp.net core sends a confirm email, it adds \"amp;\" string after the & sign inside a link\" (#2217) at aspnet/Home","RelatedBody":"To address your issues more quickly, please open the issue in the most appropriate repository. These are some of the most common repos:\r\n\r\nCommon ASP.NET and Entity Framework repos and projects:\r\n\r\n - Documentation: https://github.com/aspnet/Docs\r\n - MVC: https://github.com/aspnet/Mvc\r\n - Entity Framework Core: https://github.com/aspnet/EntityFramework\r\n - Entity Framework 6: https://github.com/aspnet/EntityFramework6\r\n - SignalR: https://github.com/aspnet/SignalR\r\n - ASP.NET Core in Docker: https://github.com/aspnet/aspnet-docker\r\n - Microsoft.NET.Sdk.Web: https://github.com/aspnet/websdk\r\n - Kestrel HTTP Server: https://github.com/aspnet/KestrelHttpServer\r\n - ASP.NET Katana: https://github.com/aspnet/AspNetKatana\r\n - and more! See a full list here: https://github.com/aspnet\r\n\r\nOther common projects:\r\n\r\n - NuGet: https://github.com/NuGet/home\r\n - .NET Core CLI, SDK, or runtime: https://github.com/dotnet/core\r\n - Visual Studio: https://developercommunity.visualstudio.com\r\n - Visual Studio Code: https://github.com/microsoft/vscode\r\n - Omnisharp (C# support for VS Code): https://github.com/omnisharp/omnisharp-vscode\r\n"},{"Id":"6644168612","Type":"IssuesEvent","CreatedAt":"2017-09-27T13:57:56","Actor":"roeb","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2216","RelatedDescription":"Opened issue \"Self Hosted ASP.NET Core 2.0: TagHelper doesnt work\" (#2216) at aspnet/Home","RelatedBody":"I have ASP.NET Core 2.0 website, which is hosted in a .NET Core console / service. I have implemented a easy custom TagHelper. The TagHelper works fine, when I started the ASP.NET Core website directly from VS2017. When i start the .NET Core console host, which has hosted the asp.net page, the tag helper doesnt work.\r\n\r\nI have try to register the TagHelper in the _ViewImports.cshtml and also directly in the view as self (Home/Index).\r\n\r\nMy custom TagHelper:\r\n```C#\r\n[HtmlTargetElement(\"time\")]\r\npublic class TimeTagHelper : TagHelper\r\n{\r\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\r\n    {\r\n        output.Content.SetHtmlContent($\"<h1>{DateTime.Now.ToShortTimeString()}</h1>\");\r\n    }\r\n}\r\n```\r\n_ViewImports.cshtml\r\n```C#\r\n@using SelfHosted.Website\r\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\r\n@addTagHelper SelfHosted.Website.TagHelpers.*, SelfHosted.Website\r\n```\r\nThe TimeTagHelper intellisense in VS2017 work fine: [TimeTagHelper in Index.cshtml](https://i.stack.imgur.com/LoyyQ.png)\r\n\r\nThe code is on [GitHub](https://github.com/roeb/DotNetCoreSamples). The TagHelper is implemented in SelfHosted.Website and used in /Home/Index. It works perfect when the SelfHosted.Website started directly. But it doesnt work, when i start the Website from SelfHostes.Console.\r\n\r\nAny ideas? :)\r\n\r\nThanks Robert"},{"Id":"6642490597","Type":"IssuesEvent","CreatedAt":"2017-09-27T07:39:34","Actor":"Joshlo","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2215","RelatedDescription":"Opened issue \"Response on created context keeps giving me NullStream\" (#2215) at aspnet/Home","RelatedBody":"I'm trying to write a middleware for batch requests i .net core 2.0.\r\nSo far the I have splitted the request, pipe each request on to the controllers.\r\nThe controllers return value, but for some reason the response on the created context that I parse to the controllers keeps giving me a NullStream in the body, so I think that there is something that I miss in my setup.\r\n\r\nThe code looks like this:\r\n\r\n    var json = await streamHelper.StreamToJson(context.Request.Body);\r\n\r\n    var requests = JsonConvert.DeserializeObject<IEnumerable<RequestModel>>(json);\r\n\r\n    var responseBody = new List<ResponseModel>();\r\n\r\n    foreach (var request in requests)\r\n    {\r\n        var newRequest = new HttpRequestFeature\r\n        {\r\n            Body = request.Body != null ? new MemoryStream(Encoding.ASCII.GetBytes(request.Body)) : null,\r\n            Headers = context.Request.Headers,\r\n            Method = request.Method,\r\n            Path = request.RelativeUrl,\r\n            PathBase = string.Empty,\r\n            Protocol = context.Request.Protocol,\r\n            Scheme = context.Request.Scheme,\r\n            QueryString = context.Request.QueryString.Value\r\n        };\r\n\r\n        var newRespone = new HttpResponseFeature();\r\n        var requestLifetimeFeature = new HttpRequestLifetimeFeature();\r\n\r\n        var features = CreateDefaultFeatures(context.Features);\r\n        features.Set<IHttpRequestFeature>(newRequest);\r\n        features.Set<IHttpResponseFeature>(newRespone);\r\n        features.Set<IHttpRequestLifetimeFeature>(requestLifetimeFeature);\r\n                    \r\n        var innerContext = _factory.Create(features);\r\n        await _next(innerContext);\r\n                    \r\n        var responseJson = await streamHelper.StreamToJson(innerContext.Response.Body);\r\n\r\nI'm not sure what it is I'm missing in the setup, since innerContext.Response.Body isn't set.\r\n\r\nOne of the endpoints that I use for testing and that gets hit looks like this\r\n\r\n    [Route(\"api/[controller]\")]\r\n    public class ValuesController : Controller\r\n    {\r\n        // GET api/values\r\n        [HttpGet]\r\n        public IEnumerable<string> Get()\r\n        {\r\n            return new string[] { \"value1\", \"value2\" };\r\n        }\r\n    }\r\n\r\nI have also played around with setting var newRespone = new HttpResponseFeature(); to var newRespone = new HttpResponseFeature{ Body = new MemoryStream() }; but then it's just empty"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6647294292","Type":"IssuesEvent","CreatedAt":"2017-09-28T02:57:50","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/958","RelatedDescription":"Closed issue \"Manually disconnect clients from server\" (#958) at aspnet/SignalR","RelatedBody":"Hi. Tell me how to proceed if I need to close the old connection from the server side.\r\nThis situation occurs when the user is authorized from another device. I need to close the old connection and use a new one.\r\nThis is a websocket connection.\r\n"},{"Id":"6647099239","Type":"IssuesEvent","CreatedAt":"2017-09-28T01:42:20","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/735","RelatedDescription":"Closed issue \"System.Reflection.Emit and netstandard2.0\" (#735) at aspnet/SignalR","RelatedBody":".NET Standard 2.0 does not support System.Reflection.Emit, yet Microsoft.AspNetCore.SignalR is currently using it. It looks like we've jerry-rigged System.Ref.Emit into netstandard2.0 by using the 4.3.0 package reference. This will cause SignalR to blow up with nasty runtime errors on platforms that support ns2.0 but not refemit (uwp, xamarin, and others).\r\n\r\nhttps://github.com/aspnet/SignalR/blob/a359da0c447b303d0c6f7b6f50ceabfd4e3d0794/src/Microsoft.AspNetCore.SignalR/Microsoft.AspNetCore.SignalR.csproj#L22\r\n\r\ncc @davidfowl "},{"Id":"6646291397","Type":"IssuesEvent","CreatedAt":"2017-09-27T21:13:13","Actor":"Gurgen","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/959","RelatedDescription":"Closed issue \"When can we expect the update in nuget?\" (#959) at aspnet/SignalR","RelatedBody":""},{"Id":"6646243674","Type":"IssuesEvent","CreatedAt":"2017-09-27T21:02:07","Actor":"laskoviymishka","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/960","RelatedDescription":"Opened issue \"IDistributedCache HubLifetimeManager implementation\" (#960) at aspnet/SignalR","RelatedBody":"Currently AspNetCore have `IDistributedCache` abstraction layer which is quite nice for having your own implementation of cache.\r\n\r\nI believe current back plane with redis is better then nothing, but redis support for dotnet core is not perfect. StackExchange.Redis has a some major issues with performance and right now completely useless in docker based enviroment. It not even support sentinel and ipv6 for now. So i belive stick to redis is not good option.\r\n\r\nMay be generic back plan with `IDistributedCache` solve issue of redis support?\r\n\r\nSome people may event has own implementation of `IDistributedCache` interface that suite for them business (me for example :shipit: ).\r\n\r\nI not saying to remove `Signalr.Redis`, i talk about something more generic like `Signalr.DistributedCache`.\r\n"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6644093006","Type":"IssuesEvent","CreatedAt":"2017-09-27T13:44:22","Actor":"asalvo","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6891","RelatedDescription":"Opened issue \"RazorPages: ModelState.IsValid is always true when validating primitive properties on a Page Model.\" (#6891) at aspnet/Mvc","RelatedBody":"When OnPost is called for the following page model. ModelState.IsValid always returns true regardless if the values for Username, Password and Email are valid. The ModelState appears to be fully populated if I inspect it by setting a breakpoint in the OnPost. \r\n\r\nIf I try call TryValidateModel(this) in OnPost first, an exception is thrown (The requested operation is invalid for DynamicMethod). However, if I set a breakpoint in the OnPost, and run TryValidateModel(this) in the Immediate Window, I get the same exception, but, upon continuing, IsValid has finally changed to false, with the correct properties identified as having validation errors in the ModelState object. \r\n\r\n`\r\n public class SignUpModel : PageModel\r\n    {\r\n        [BindProperty]\r\n        [Required, StringLength(250)]\r\n        public string Username { get; set; }\r\n\r\n        [BindProperty]\r\n        [Required, StringLength(250)]\r\n        public string Password { get; set; }\r\n\r\n        [BindProperty]\r\n        [Required, EmailAddress, StringLength(250)]\r\n        public string Email { get; set; }\r\n\r\n        public void OnGet()\r\n        {\r\n\r\n        }\r\n\r\n        public async Task<IActionResult> OnPost()\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return Page();\r\n            }\r\n\r\n            return RedirectToPage(\"/Index\");\r\n        }\r\n    }\r\n`\r\n"},{"Id":"6641337961","Type":"IssuesEvent","CreatedAt":"2017-09-27T00:36:15","Actor":"Tadimsky","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6890","RelatedDescription":"Opened issue \"Url.Action with Route parameters in Controller Route\" (#6890) at aspnet/Mvc","RelatedBody":"I'm having an issue using `Url.Action` to generate an absolute Url.\r\nI moved a route parameter that is shared by all actions in the Controller into the `Route` parameter for the _whole controller_ and that seems to have broken the ability to generate a Url.\r\n\r\nHere is a stub version of the Controller:\r\n\r\n    [ApiVersion(\"1.0\")]\r\n    [Route(\"api/v{version:apiVersion}/whiteboards/{whiteboardId}/thumbnail\")]\r\n    public class ThumbnailController : Controller\r\n    {\r\n        public ThumbnailController()\r\n        {\r\n        }\r\n        // GET api/v1/whiteboards/<id>/thumbnail\r\n        [HttpGet]\r\n        public async Task<Stream> Get(string whiteboardId)\r\n        {\r\n            Response.ContentType = \"image/jpeg\";\r\n            return <data from store>;\r\n        }\r\n\r\n        // POST api/v1/whiteboards/<id>/thumbnail\r\n        [HttpPost]\r\n        public async Task Post(string whiteboardId)\r\n        {\r\n            <store thumbnail in store>\r\n        }\r\n    }\r\n\r\nThis is the code that I'm using to generate the Uri:\r\n\r\n    return new Uri(Url.Action(new UrlActionContext\r\n    {\r\n        Controller = \"Thumbnail\",\r\n        Action = \"Get\",\r\n        Values = new\r\n        {\r\n            whiteboardId = 10\r\n        },\r\n        Protocol = Request.Scheme\r\n    }));\r\n\r\nHowever, this is returning `null`.\r\n\r\nSwitching it back to the following works, but doesn't look as good as we now have duplicated part of the route.\r\n\r\n    [ApiVersion(\"1.0\")]\r\n    [Route(\"api/v{version:apiVersion}/whiteboards\")]\r\n    public class ThumbnailController : Controller\r\n    {\r\n        public ThumbnailController()\r\n        {\r\n        }\r\n        // GET api/v1/whiteboards/<id>/thumbnail\r\n        [HttpGet(\"{whiteboardId}/thumbnail\")]\r\n        public async Task<Stream> Get(string whiteboardId)\r\n        {\r\n            Response.ContentType = \"image/jpeg\";\r\n            return <data from store>;\r\n        }\r\n\r\n        // POST api/v1/whiteboards/<id>/thumbnail\r\n        [HttpPost(\"{whiteboardId}/thumbnail\")]\r\n        public async Task Post(string whiteboardId)\r\n        {\r\n            <store thumbnail in store>\r\n        }\r\n    }\r\n\r\nIs this intended for it to not work? It would be really nice if it did, but maybe there is something that messes up the route generation when we do this?\r\nIs using a parameter in the `Route` attribute in the constructor even supported/recommended at all?"},{"Id":"6641237130","Type":"IssuesEvent","CreatedAt":"2017-09-26T23:54:47","Actor":"dustinsoftware","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6889","RelatedDescription":"Opened issue \"Colons in Request.Path always get unencoded\" (#6889) at aspnet/Mvc","RelatedBody":"### Title\r\nColons in Request.Path always get unencoded\r\n\r\n### Functional impact\r\nIf a client sends a url with any colons in the path, e.g. `/a%3A1`, Request.Path will be set to `/a:1`. There appears to be no way to get the original, encoded form of the Path.\r\n\r\nWhen computing an HMAC+SHA1 OAuth signature, access to the unmodified path is needed, or the signature will not match what was sent by the client.\r\n\r\n### Minimal repro steps\r\n*What is the smallest, simplest set of steps to reproduce the issue. If needed, provide a project that demonstrates the issue.*\r\n\r\n1. dotnet new webapi\r\n2. Add a single catch all route:\r\n```\r\n    [HttpGet(\"{id}\")]\r\n    public string Get(string id) => $\"{Request.Path}\\n\";\r\n```\r\n3. Run `curl http://localhost:5000/a%3A1`\r\n\r\n### Expected result\r\nResponse is `/a%3A1`\r\n\r\n### Actual result\r\nResponse is `/a:1`\r\n\r\n### Further technical details\r\nThis is using .NET Core 2.0, tested on both Mac and Windows.\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6647440255","Type":"IssuesEvent","CreatedAt":"2017-09-28T04:01:22","Actor":"mkArtak","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1444","RelatedDescription":"Opened issue \"Email confirmation token becomes invalid after redeployment\" (#1444) at aspnet/Identity","RelatedBody":"Hi.\r\n\r\nI have an asp.net core 2 web application which is hosted in Azure AppService.\r\nWhen a new user signs up the application sends an email confirmation request to the user (as an email), with a link in it for the user to click.\r\nThe link uses a token generated using the following method:\r\n`UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser user)`\r\n\r\nWhen user clicks the link, the AccountController handles that request and tries to find the user given the email address and the token:\r\n`IdentityResult result = await this.userManager.ConfirmEmailAsync(user, code);`\r\n\r\nHowever, if after generating the code a new deployment had happened, the ConfirmEmailAsync method would not be able to find the user with that code, so the confirmation request results in an error.\r\n\r\n\r\nHere is the list of relevant packages my project references:\r\n```\r\n<PackageReference Include=\"AWSSDK.SimpleNotificationService\" Version=\"3.3.0.21\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0\" />\r\n```\r\n"},{"Id":"6646697459","Type":"IssuesEvent","CreatedAt":"2017-09-27T23:09:26","Actor":"natelaff","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1443","RelatedDescription":"Opened issue \"Issue with IdentityUserToken Id data type\" (#1443) at aspnet/Identity","RelatedBody":"Branching this into a new issue from https://github.com/aspnet/Identity/issues/1364 because I believe it's a bug and can reproduce it.\r\n\r\nI override my datatypes in Identity with Guid. Nothing fancy. But getting this as of upgrade to 2.0.\r\n\r\nArgumentException: The key value at position 0 of the call to 'DbSet<IdentityUserToken>.Find' was of type 'Guid', which does not match the property type of 'string'.\r\n\r\nBasically, start a new project with individual auth.\r\n\r\npublic class User : IdentityUser<Guid>\r\n{\r\n    public string MyProperty { get; set; }\r\n}\r\n\r\npublic class Role : IdentityRole<Guid>\r\n{\r\n    public string MyProperty { get; set; }\r\n}\r\n\r\n    protected override void OnModelCreating(ModelBuilder builder)\r\n    {\r\n        base.OnModelCreating(builder);\r\n\r\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\r\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\r\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\r\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\r\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\r\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\r\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\r\n    }\r\n\r\nNothing crazy happening here. Just making the key a Guid and renaming the tables.\r\nReplace appropriate methods to use that User/Role/Key type.\r\nRun, create a user, then go to Two Factor Auth page and you'll hit it on the call to _userManager.GetAuthenticatorKeyAsync(user)"},{"Id":"6645944701","Type":"PullRequestEvent","CreatedAt":"2017-09-27T19:54:48","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1436","RelatedDescription":"Closed pull request \"[Prototype] Add CookieAuthentication\" (#1436) at aspnet/Identity","RelatedBody":"Work for https://github.com/aspnet/Identity/issues/1409"},{"Id":"6640663082","Type":"PullRequestEvent","CreatedAt":"2017-09-26T21:01:00","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1442","RelatedDescription":"Opened pull request \"[WIP] Add Identity.SignIn[.Cookies]\" (#1442) at aspnet/Identity","RelatedBody":"Work for https://github.com/aspnet/Identity/issues/1409\r\n\r\n- Moves SignInManager into new Identity.SignIn package\r\n- Moves Identity auth cookie configuration into Identity.SignIn.Cookies\r\n- Main identity package depends on Identity.SignIn but not SignIn.Cookies since AddIdentity needs to continue to work as it did before\r\n\r\nNew startup code for refactored identity:\r\n\r\n```C#            services.AddIdentityCore<ApplicationUser>()\r\n                .AddRoles<IdentityRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\r\n                .AddDefaultCookies() // Adds and configures default cookie auth\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl @blowdart ?"},{"Id":"6629057168","Type":"IssuesEvent","CreatedAt":"2017-09-24T03:34:25","Actor":"dfederm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1441","RelatedDescription":"Opened issue \"UserManager.Logger is virtual and set in the constructor\" (#1441) at aspnet/Identity","RelatedBody":"Pretty much as the title says.\r\n\r\nThis is considered bad practice, as ctor order is the most base class to the most derived class, so if the property is overridden in a subclass it may not be properly initialized.\r\n\r\nStatic Analysis even has a rule against this: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2214-do-not-call-overridable-methods-in-constructors (note that properties are effectively just a pair of methods, so the rule does in fact apply).\r\n\r\nHere's a hypothetical example of something that could go wrong:\r\n\r\n```\r\npublic class ApplicationUserManager : UserManager<ApplicationUser>\r\n{\r\n    private IObserver observer;\r\n\r\n    public ApplicationUserManager(IObserver observer)\r\n        : base(/* ... omitted for brevity ... */)\r\n    {\r\n        this.observer = observer;\r\n    }\r\n\r\n    public override ILogger Logger\r\n    {\r\n        get\r\n        {\r\n            this.observer.RecordPropertyGet(nameof(Logger));\r\n            return base.Logger;\r\n        }\r\n        set\r\n        {\r\n            this.observer.RecordPropertySet(nameof(Logger), value);\r\n            base.Logger = value;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn that example, the base class will set the `Logger` property, which will be the derived classes's impl, which uses `this.observer`, but oops it's null at that point in time since `ApplicationUserManager`'s ctor hasn't actually executed yet.\r\n\r\nI am curious btw why this prop is virtual to begin with. It's a bit odd to see a virtual autoprop."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6645883095","Type":"PullRequestEvent","CreatedAt":"2017-09-27T19:40:18","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2084","RelatedDescription":"Opened pull request \"HPACK fixes and improvements\" (#2084) at aspnet/KestrelHttpServer","RelatedBody":"* Parse header field representations more accurately\r\n* Tests for all header field representations and dynamic table updates\r\n* Throw `HPackDecodingException` on invalid header index\r\n* Throw `HPackDecodingException` when attempting to resize the dynamic table to a size larger than the maximum allowed by server settings (in the SETTINGS frame sent as the server preface)\r\n* Refactorings"},{"Id":"6645228024","Type":"PullRequestEvent","CreatedAt":"2017-09-27T17:14:40","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2068","RelatedDescription":"Merged pull request \"Configure enabled protocols per endpoint and add HTTP/2 w/ prior knowledge support (#2067)\" (#2068) at aspnet/KestrelHttpServer","RelatedBody":"#2067"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6646741853","Type":"PullRequestEvent","CreatedAt":"2017-09-27T23:25:17","Actor":"natemcmaster","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1702","RelatedDescription":"Merged pull request \"Preserve the build number when building the VSIX\" (#1702) at aspnet/Razor","RelatedBody":"Changes \r\n - Pass $(BuildNumber) to msbuild.exe /t:Restore. I was hitting weird issues building this locally because nupkg version is determined by /t:Restore\r\n - Restore the VSIX project when executing `build /t:Restore`"},{"Id":"6646005554","Type":"IssuesEvent","CreatedAt":"2017-09-27T20:08:57","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1183","RelatedDescription":"Closed issue \"Add multi-targeting support to RazorTemplateEngineFactoryService\" (#1183) at aspnet/Razor","RelatedBody":"When we create a RazorTemplateEngine it should a version of the Razor codegeneration support that matches the project's dependencies. We have the ability to generate ASP.NET Core 1.X code for 1.X proejcts and ASP.NET Core 2.X code for 2.X projects. \r\n\r\nThis items tracks the following improvements:\r\n- Create a template engine with the appropriate version targeted when a new document is opened\r\n- Update the template engine with the appropriate version when project references change\r\n- Treat newest version as the 'fallback', if the version is unknown we just assume latest"},{"Id":"6641278312","Type":"PullRequestEvent","CreatedAt":"2017-09-27T00:11:25","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1701","RelatedDescription":"Opened pull request \"Add a VS for Mac compatible Razor addin\" (#1701) at aspnet/Razor","RelatedBody":"- Add Microsoft.MonoDevelop.RazorAddin.\r\n- As part of this work I also added `Microsoft.MonoDevelop.LanguageServices.Razor` to be the monodevelop specific Razor code.\r\n- Added MSBuild infrastructure to automate creation of MonoDevelop addins (MPacks). This work enables us to not have a dependency on a specific version of monodevelop and does not require us to have tool-prerequisites on the box. Every build outputs the mpacks into the artifacts/build directory.\r\n- Built in build-level metadata pieces to workaround how addins are typically developed. They are usually authored C# first and then config files are generated after the fact; with this changeset we auto-generate the addin.info and its corresponding assembly attributes. Both of these take information directly from the build system.\r\n\r\n#1696 \r\n\r\n/cc @ToddGrun @KirillOsenkov "}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6644367490","Type":"IssuesEvent","CreatedAt":"2017-09-27T14:32:40","Actor":"joeaudette","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Opened issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868) at aspnet/Templates","RelatedBody":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217"},{"Id":"6561160159","Type":"IssuesEvent","CreatedAt":"2017-09-07T12:16:43","Actor":"SteveSandersonMS","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"},{"Id":"6560156021","Type":"IssuesEvent","CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Opened issue \"Cannot force version of the template to install\" (#867) at aspnet/Templates","RelatedBody":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version"},{"Id":"6532477866","Type":"IssuesEvent","CreatedAt":"2017-08-30T23:19:06","Actor":"andyg8180","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Opened issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866) at aspnet/Templates","RelatedBody":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n"},{"Id":"6503882095","Type":"IssuesEvent","CreatedAt":"2017-08-23T18:36:38","Actor":"pejta2207","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Opened issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865) at aspnet/Templates","RelatedBody":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor exception is thrown while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect code, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException."}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6635483866","Type":"IssuesEvent","CreatedAt":"2017-09-25T22:47:03","Actor":"mlorbetske","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/829","RelatedDescription":"Closed issue \"(package.json) Namespaced packages do not display version & details on hover-over\" (#829) at aspnet/Tooling","RelatedBody":"(latest) VStudio 2015 Update **3**\n\n![image](https://cloud.githubusercontent.com/assets/2574412/19649471/eadc6be0-99d3-11e6-9d8e-565003f9e2cd.png)\n\nWhen hovering over Namespaced packages (@whatever/), version numbers and details are labeled as \"Uknown\".\n\nAlso intellisense comes out as \"Unknown\" as well when typing in the version area to the right.\n![image](https://cloud.githubusercontent.com/assets/2574412/19649727/e3f93e56-99d4-11e6-81e8-a89cd21abeee.png)\n"},{"Id":"6626869082","Type":"IssuesEvent","CreatedAt":"2017-09-22T21:30:36","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/431","RelatedDescription":"Closed issue \"Having multiple sites with the same IIS Express launch url causes VS to launch the wrong site\" (#431) at aspnet/Tooling","RelatedBody":"The Security repo has three sample sites with the same launch url. (It needs to be the same because that url is registered with a remote auth server).  This can cause VS / IIS Express to launch the wrong site.\n"},{"Id":"6598999142","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:09:01","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"},{"Id":"6598993466","Type":"IssuesEvent","CreatedAt":"2017-09-16T14:04:41","Actor":"ctopher31","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Opened issue \"How do I make file nesting for js broken again. File nesting is really lame. I want my files structured the way I want them. If some lame ass wants nesting let it be an opt-in.\" (#1059) at aspnet/Tooling","RelatedBody":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n"},{"Id":"6588109038","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:50:29","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058) at aspnet/Tooling","RelatedBody":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":10,"RawContent":null},{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-09-28T05:30:09.9289899Z","RunDurationInMilliseconds":7852}