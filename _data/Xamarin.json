{"Data":{"Blog":{"FeedItems":[{"Title":"Creating Cloud-Connected Mobile Apps with Xamarin + Azure","PublishedOn":"2018-03-19T17:56:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In Case You Missed It A few weeks ago, we announced “Your Guide to Azure Services for Apps Built with Xamarin” on the Visual Studio blog to help you identify which cloud-connected services in Azure...","Href":"https://blog.xamarin.com/cloud-connected-apps-xamarin-azure/","RawContent":null},{"Title":"Add Cloud Storage to Xamarin Apps with Azure Blob Storage","PublishedOn":"2018-03-16T18:17:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Cloud Storage has become a must-have feature for mobile apps. It gives developers the ability to store large files in the cloud and securely distribute them to all mobile app users. Moving these large...","Href":"https://blog.xamarin.com/xamarin-plus-azure-blob-cloud-storage/","RawContent":null},{"Title":"Xamarin Joins docs.microsoft.com","PublishedOn":"2018-03-14T17:22:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#8217;re beginning a new chapter in mobile developer documentation: Xamarin docs are now live on docs.microsoft.com/xamarin! Here are a few highlights of the new documentation experience:...","Href":"https://blog.xamarin.com/xamarin-joins-docs-microsoft-com/","RawContent":null},{"Title":"Podcast: Visual Studio 2017 version 15.6, AR with UrhoSharp, and ML with CoreML","PublishedOn":"2018-03-12T18:43:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the fun new features in the Visual Studio 2017 version 15.6 stable release, including macOS environment setup and iOS WiFi...","Href":"https://blog.xamarin.com/podcast-visual-studio-2017-version-15-6-ar-urhosharp-ml-coreml/","RawContent":null},{"Title":"Contributing to Xamarin.iOS and Xamarin.Mac","PublishedOn":"2018-03-08T19:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Two years ago this month, we made some exciting announcements about the future of Xamarin. One of those announcements detailed the open sourcing of the Xamarin.iOS and Xamarin.Mac SDK. Open source is...","Href":"https://blog.xamarin.com/contributing-to-xamarin-ios-xamarin-mac/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Now Available!","PublishedOn":"2018-03-06T20:17:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Our last release, Visual Studio 2017 version 15.5, featured awesome new updates, such as the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android emulators with...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-now-available/","RawContent":null},{"Title":"Mobile Developer Events in March","PublishedOn":"2018-03-01T19:05:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Around the world, Xamarin and .NET user groups are meeting up to learn and discuss the latest news on exciting releases, tooling, and updates with Xamarin and related technologies. This March, you can...","Href":"https://blog.xamarin.com/mobile-developer-events-march/","RawContent":null},{"Title":"The New, Feature-Packed UrhoSharp 1.8","PublishedOn":"2018-02-28T19:34:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"UrhoSharp is a .NET API for building 3D experiences in your apps. A .NET binding to the Urho3D engine, it allows developers to write cross-platform code targeting Android, iOS, Windows and macOS with...","Href":"https://blog.xamarin.com/announcing-urhosharp-1-8-release/","RawContent":null},{"Title":"New Xamarin University Course: Navigation Patterns in Xamarin.Forms (XAM205)","PublishedOn":"2018-02-26T19:10:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms, a popular choice for cross-platform Xamarin apps, has two stacks. It&#8217;s common to implement navigation by pushing and popping Pages on a stack, but the two stacks are intended for...","Href":"https://blog.xamarin.com/xamarin-forms-navigation-patterns-xam205/","RawContent":null},{"Title":"Add Tizen Projects to Your Xamarin.Forms Applications","PublishedOn":"2018-02-23T19:24:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Jay Cho of the Samsung Tizen team. It&#8217;s been a while since the first preview version of Tizen .NET was released. Thanks to the newest release, developing...","Href":"https://blog.xamarin.com/add-tizen-projects-xamarin-forms-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7410093703","Type":"PullRequestEvent","CreatedAt":"2018-03-21T00:13:31","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1453","RelatedDescription":"Opened pull request \"[xabuild.exe] better fix for multi-process file access\" (#1453) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1497421&tab=ms.vss-test-web.test-result-details\r\n\r\nThe fix in #1411 was not quite good enough. It works \"most of the time\",\r\nbut I found a couple instances where a random test failed on VSTS due to\r\nthis issue. I could also test this scenario by clearing the symlinks and\r\n`.__sys_links.txt` and running the `BuildTest.RunXABuildInParallel`\r\ntest. This test would pass most times, but you could see something odd by\r\nlooking at the contents of `.__sys_links.txt`, it would have duplicate\r\nsymlink names listed.\r\n\r\nSo I took another approach:\r\n1. Before checking for the existance of the symlinks, hold the\r\n`.__sys_links.txt` file open\r\n2. Check for each missing symlink, create it if needed\r\n2. Write to `.__sys_links.txt` after each check is made\r\n3. Close the file after the loop\r\n\r\nAs long as step 1 has the same `catch IOException` and retry logic, this\r\nseems to be a much better approach. The `.__sys_links.txt` file contents\r\nare correct, and do not contain any duplicates. There is a lot less\r\ncongestion against opening the `.__sys_links.txt` file.\r\n\r\nThis also shouldn't prevent `xabuild.exe` from running in parallel, it\r\njust has a pseudo multi-process lock around the symlink creation."},{"Id":"7409047603","Type":"IssuesEvent","CreatedAt":"2018-03-20T20:04:45","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1450","RelatedDescription":"Opened issue \"Encountering BCL test failures in MonoTests.System.Reflection.MethodInfoTest on Android when Hybrid AOT + LLVM are enabled\" (#1450) at xamarin/xamarin-android","RelatedBody":"`MonoTests.System.Reflection.MethodInfoTest.GetMethodBody` and `MonoTests.System.Reflection.MethodInfoTest.TestLocalVariableTypes` are consistently failing on Android when Hybrid AOT and LLVM are enabled.\r\n\r\n### Steps to Reproduce\r\n\r\n1) Download and run the attached prebuilt .apk file:\r\n> `adb install 15-7-hybridaotllvm-Xamarin.Android.Bcl_Tests-Signed.apk`\r\n> `adb shell am instrument -w Xamarin.Android.Bcl_Tests/xamarin.android.bcltests.NUnitInstrumentation`\r\n\r\n2) Alternatively, a smaller repro which just contains the relevant test source could likely be built and installed with Hybrid AOT+LLVM enabled.\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Details\r\nLink to .apk file - https://microsoft-my.sharepoint.com/:u:/p/pecolli/EbyqYRYKfM1ErMMTq6w4dugBCr378Gn9JDw0e0XrBuRphw?e=binbA2\r\nLink to obj output - https://microsoft-my.sharepoint.com/:u:/p/pecolli/EXGoMM2LZURMhg8mPY8IUyoBgDudDiDsjXrLA86zaPjHSQ?e=3YL4a8\r\n\r\n#### MonoTests.System.Reflection.MethodInfoTest.GetMethodBody\r\n ```\r\n#1\r\nExpected: True\r\nBut was: False\r\n```\r\n```\r\nat MonoTests.System.Reflection.MethodInfoTest.GetMethodBody () <0x7633610d68 + 0x00077> in <8c83ea21a4bc40aba711be2fac79374d>:0 \r\nat (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\nat System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x76354aa8c0 + 0x00093> in <5512d6ac97c04306bbb12a1c80562914>:0\r\n```\r\n\r\n#### MonoTests.System.Reflection.MethodInfoTest.TestLocalVariableTypes\r\n```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: index\r\n```\r\n```\r\nat System.Array.InternalArray__get_Item[T] (System.Int32 index) <0x76350dbe50 + 0x00064> in <5512d6ac97c04306bbb12a1c80562914>:0 \r\nat System.Collections.ObjectModel.ReadOnlyCollection`1[T].System.Collections.Generic.IList<T>.get_Item (System.Int32 index) <0x763532e274 + 0x0003b> in <5512d6ac97c04306bbb12a1c80562914>:0 \r\nat MonoTests.System.Reflection.MethodInfoTest.TestLocalVariableTypes () <0x7633612af4 + 0x000fb> in <8c83ea21a4bc40aba711be2fac79374d>:0 \r\nat (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\nat System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x76354aa8c0 + 0x00093> in <5512d6ac97c04306bbb12a1c80562914>:0\r\n```\r\n\r\n### Version Information\r\nWindows 10 w/ VS 15.7\r\nXamarin.Android SDK 8.3.0.5 (HEAD/1a8ed5388)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7408520887","Type":"IssuesEvent","CreatedAt":"2018-03-20T18:22:51","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1448","RelatedDescription":"Opened issue \"Encountering crash due to a SIGILL in System.Numerics.Tests.GenericVectorTests.LessThanOrEqualInt64 when running on an x86 Android device \" (#1448) at xamarin/xamarin-android","RelatedBody":"I'm encountering a SIGILL when running the new XUnit tests added to XA in 15.7 on an x86 device. I can not reproduce this crash when I run on an x86 emulator however. I am seeing this crash after building and deploying the suite in multiple project configurations (Debug, Release + AOT + LLVM).\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Download prebuilt .apk file, and run it on an x86 device:\r\n> adb install 15-7-aotllvm-Xamarin.Android.Bcl_Tests-Signed.apk\r\n> adb shell am instrument -w Xamarin.Android.Bcl_Tests/xamarin.android.bcltests.XUnitInstrumentation\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Details\r\nLink to .apk file - https://microsoft-my.sharepoint.com/:u:/p/pecolli/EYrN-tuwhJFJmkrnwj5vAgIBzEQFPGZkCUcmSkNMJUYMUg?e=LBt3gv\r\nLink to obj output - https://microsoft-my.sharepoint.com/:u:/p/pecolli/EXGoMM2LZURMhg8mPY8IUyoBgDudDiDsjXrLA86zaPjHSQ?e=3YL4a8\r\n\r\n### Version Information\r\nWindows 10 w/ VS 15.7\r\nXamarin.Android SDK 8.3.0.5 (HEAD/1a8ed5388)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nDell Venue 8 3830 v4.4.2 (x86) - http://xqa.blob.core.windows.net/gist/log-d7615b087eff4a3ebdbec837e357ad1d.txt\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7408202448","Type":"IssuesEvent","CreatedAt":"2018-03-20T17:27:49","Actor":"samiyaakhtar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1446","RelatedDescription":"Opened issue \"Errors after upgrading to Xamarin.Android 8.2.0.15\" (#1446) at xamarin/xamarin-android","RelatedBody":"### Error\r\n\r\nThe \"LinkAssemblies\" task failed unexpectedly.\r\nJava.Interop.Tools.Diagnostics.XamarinAndroidException: error XA2006: Could not resolve reference to 'Android.Support.V7.App.ActionBarActivity' (defined in assembly 'Xamarin.Android.UserVoice, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null') with scope 'Xamarin.Android.Support.v7.AppCompat, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. When the scope is different from the defining assembly, it usually means that the type is forwarded. ---> Mono.Cecil.ResolutionException: Failed to resolve Android.Support.V7.App.ActionBarActivity\r\n   at Mono.Linker.Steps.MarkStep.HandleUnresolvedType(TypeReference reference)\r\n   at Mono.Linker.Steps.MarkStep.MarkType(TypeReference reference)\r\n   at MonoDroid.Tuner.MonoDroidMarkStep.MarkType(TypeReference reference)\r\n   at Mono.Linker.Steps.MarkStep.MarkType(TypeReference reference)\r\n   at MonoDroid.Tuner.MonoDroidMarkStep.MarkType(TypeReference reference)\r\n   at Mono.Linker.Steps.MarkStep.InitializeType(TypeDefinition type)\r\n   at Mono.Linker.Steps.MarkStep.InitializeAssembly(AssemblyDefinition assembly)\r\n   at Mono.Linker.Steps.MarkStep.Initialize()\r\n   at Mono.Linker.Steps.MarkStep.Process(LinkContext context)\r\n   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n   at MonoDroid.Tuner.Linker.Process(LinkerOptions options, ILogger logger, LinkContext& context)\r\n   at Xamarin.Android.Tasks.LinkAssemblies.Execute(DirectoryAssemblyResolver res)\r\n   --- End of inner exception stack trace ---\r\n   at Java.Interop.Tools.Diagnostics.Diagnostic.Error(Int32 code, Exception innerException, String message, Object[] args)\r\n   at Xamarin.Android.Tasks.LinkAssemblies.Execute(DirectoryAssemblyResolver res)\r\n   at Xamarin.Android.Tasks.LinkAssemblies.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\t\t\t\t\r\n\r\nI've updated all my references but there's no Android.Support.V7.App that I can possibly add. Please advise. The new version of Xamarin sdk has broken this build completely. "},{"Id":"7407898352","Type":"PullRequestEvent","CreatedAt":"2018-03-20T16:39:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1445","RelatedDescription":"Opened pull request \"Bump to java.interop/master/56e978f\" (#1445) at xamarin/xamarin-android","RelatedBody":"Needed for #1418 "},{"Id":"7407775094","Type":"IssuesEvent","CreatedAt":"2018-03-20T16:20:03","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1396","RelatedDescription":"Closed issue \"Constructor marked in api.xml as deprecated is not marked with obsolete attribute.\" (#1396) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create binding project for library with deprecated constructors.\r\n\r\nSample: api.xml\r\n\r\n    <class abstract=\"false\" deprecated=\"not deprecated\" extends=\"java.lang.Object\" extends-generic-aware=\"java.lang.Object\" final=\"true\" name=\"TestClass\" static=\"false\" visibility=\"public\">\r\n        <constructor deprecated=\"deprecated\" final=\"false\" name=\"TestClass\" static=\"false\" type=\"com.test.TestClass\" visibility=\"public\">\r\n            <parameter name=\"p0\" type=\"java.lang.String\">\r\n            </parameter>\r\n            <parameter name=\"p1\" type=\"java.lang.String\">\r\n            </parameter>\r\n            <parameter name=\"p2\" type=\"com.test.TestType\">\r\n            </parameter>\r\n      </constructor>\r\n    </class>\r\n\r\n### Expected Behavior\r\nConstructors should be marked with obsolete attribute.\r\n\r\n### Actual Behavior\r\nObsolete attribute is missing.\r\n\r\n### Version Information\r\n\r\nVisual Studio Enterprise 2017 for Mac\r\nVersion 7.4 (build 1033)\r\nInstallation UUID: fc295dbb-ea60-45ea-a7bd-051b091fe655\r\nRuntime:\r\n\tMono 5.8.0.129 (2017-10/835a98d8559) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508000129\r\n\r\nNuGet\r\nVersion: 4.3.1.4445\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nApple Developer Tools\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\nXamarin.Android\r\nVersion: 8.2.0.15 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/mwesolowski/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_111\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nXamarin Inspector\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\nXamarin.Mac\r\nVersion: 4.2.0.20 (Visual Studio Enterprise)\r\n\r\nXamarin.iOS\r\nVersion: 11.8.0.20 (Visual Studio Enterprise)\r\nHash: 1c6f300e\r\nBranch: d15-6\r\nBuild date: 2018-02-07 23:42:40-0500\r\n\r\nBuild Information\r\nRelease ID: 704001033\r\nGit revision: 053991068f3c88497d3e5cc52fe7fdf57c28b62f\r\nBuild date: 2018-02-28 05:02:28-05\r\nXamarin addins: cc3283953e0af0b8bfab1bdfdf847d9e403c4606\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\nOperating System\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\nEnabled user installed addins\r\nInternet of Things (IoT) development (Preview) 7.1\r\n"},{"Id":"7407670890","Type":"PullRequestEvent","CreatedAt":"2018-03-20T16:04:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1428","RelatedDescription":"Merged pull request \"Fixed build on VS when using NetStandard libraries\" (#1428) at xamarin/xamarin-android","RelatedBody":"On a VS project which has an Android App referencing a NetStandard\r\nlibrary, making changes on the NetStandad library will not force a build\r\nof either project. This change moves the redefinition of the task to\r\nwhere it will not be hit when it shouldn't be. This can be easily tried\r\nwith https://github.com/Microsoft/SmartHotel360-mobile-desktop-apps.\r\nOpen the Android Solution and run, then change the Login.xaml and try\r\nrunning again. Without this change, the deployed app will not be\r\naffected. It works correctly with this change."},{"Id":"7407574457","Type":"PullRequestEvent","CreatedAt":"2018-03-20T15:49:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1429","RelatedDescription":"Closed pull request \"[tests] Use `internalx.com`, not `xamdev.com`\" (#1429) at xamarin/xamarin-android","RelatedBody":"The SSL certificates for `xamdev.com` have expired and won't be\r\nrenewed. We need to migrate to using `internalx.com` in order to fix\r\nour SSL-based unit tests."},{"Id":"7407551689","Type":"PullRequestEvent","CreatedAt":"2018-03-20T15:46:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1434","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Rework Parallel.ForEach\" (#1434) at xamarin/xamarin-android","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/578528\r\n\r\nWe are getting allot of reports of hangs in the aapt\r\ntask. While this might be down tot he aapt verson\r\nitself, it did highlight a possible problem with our\r\nimplementation.\r\n\r\nFirstly `Parallel.ForEach` is a BLOCKING call. So our\r\nimplementation in `Aapt.cs` and `Crunch.cs` was not\r\ntaking that into account. Also `Parellel.ForEach` will\r\nuse the current thread to run tasks. So if we run it\r\nfrom the main MSBuild `Execute` method it will run\r\nat least on of the items on that thread. Given one of\r\nour goals was to not block the UI thread in VS this\r\nmight well cause a problem. Also the Local final action\r\nin `Parallel.ForEach` is run for every task, not when all\r\nhave completed. As a result the `Complete` method was\r\nbeing called many times. Luckily this did not cause a\r\nproblem because `Parallel.ForEach` was blocking and\r\n`base.Execute` (which does the waiting in `AsyncTask`)\r\nwas not running.\r\n\r\nSo taking notes from the `Aot.cs` task, we should kick\r\nof the processing in a thread of its own. This will ensure\r\nthat we a) don't block the UI thread and b) make sure tasks\r\nare run off the UI Thread and c) makes sure `Complete` is called\r\nappropriately.\r\n\r\nBased on information at [1] we should also be using `TaskScheduler.Default`\r\nnot `TaskScheduler.Current`.\r\n\r\n[1] https://github.com/Microsoft/vs-threading/blob/master/doc/threading_rules.md"},{"Id":"7407517994","Type":"PullRequestEvent","CreatedAt":"2018-03-20T15:41:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1435","RelatedDescription":"Merged pull request \"[tests] fixes for Windows\" (#1435) at xamarin/xamarin-android","RelatedBody":"These are the few remaining tests that need small fixes to pass on Windows.\r\n\r\nBuildAssetsTest\r\n- Was failing due to Windows line endings, added `Trim()` to only assert\r\nagainst the name `Asset3`\r\n\r\nResolveSdksTaksTests\r\n- Needed to use `lint.bat` insted of `lint.exe` in the\r\n`CreateFauxJavaSdkDirectory` method\r\n- There was also a test that was asserting against a `Darwin` directory,\r\nwhich appears to just be one directory higher on Windows. To make this\r\nwork on all platforms, I added some code to remove the trailing directory.\r\nThis should work on all three Windows/macOS/Linux."},{"Id":"7407500402","Type":"PullRequestEvent","CreatedAt":"2018-03-20T15:39:07","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1436","RelatedDescription":"Merged pull request \"[msbuild] default value for JavaMaximumHeapSize\" (#1436) at xamarin/xamarin-android","RelatedBody":"Fixes #1415\r\n\r\nCommonly Xamarin.Android apps on Windows require the `JavaMaximumHeapSize`\r\nproperty to be set, in order to make it past the `CompileToDalvik`\r\nMSBuild task that invokes `dx.jar`. Passing `java.exe` a value of\r\n`-Xmx1G` mitigates the `java.lang.OutOfMemoryError`.\r\n\r\nWe have been getting reports of this happening for File->New Project\r\ntemplates, so it seems to be time to default the value to `1G` if it\r\nis not set.\r\n\r\nChanges:\r\n- Set `JavaMaximumHeapSize` in `Xamarin.Android.Common.targets` if unset\r\n- Removed places `JavaMaximumHeapSize` was required to be set for\r\nsome unit tests to pass on Windows\r\n- Update documentation\r\n\r\nConcerns:\r\n\r\nAt one time, a default value for `JavaMaximumHeapSize` was attempted,\r\nonly to get reports of an error such as:\r\n\r\n    While trying to start a Java application with a maximum heap size of\r\n    1GB, you receive the following error:\r\n    \"JVMJ9VM015W Initialization error for library j9gc24(2): Failed to\r\n    instantiate heap; 1G requested\r\n    Could not create the Java virtual machine.\r\n\r\nHopefully, this was something that was happening for older JDK versions in\r\nthe past on Windows."},{"Id":"7406841491","Type":"PullRequestEvent","CreatedAt":"2018-03-20T14:03:13","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1440","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Install FSharp.Core 4.3.1\" (#1440) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/mono/mono/issues/7511\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1438\r\n\r\nContext: https://github.com/xamarin/xamarin-android/pull/1289\r\n\r\nPR #1289 bumps xamarin-android to use the mono/2018-02 branch, and is\r\nencountering an error when executing the\r\n`Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest.CheckResourceDesignerIsCreated()`\r\ntest, with the following error:\r\n\r\n\t/Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets: error : Error executing task GenerateResourceDesigner: Could not load file or assembly 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\n\tError executing task GenerateResourceDesigner: System.IO.FileNotFoundException: Could not load file or assembly 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\n\tFile name: 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n\t  at System.CodeDom.Compiler.CodeDomProvider.CreateGenerator (System.IO.TextWriter output) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/external/corefx/src/System.CodeDom/src/System/CodeDom/Compiler/CodeDomProvider.cs:123\r\n\t  at Xamarin.Android.Tasks.GenerateResourceDesigner.WriteFile (System.String file, System.CodeDom.CodeTypeDeclaration resources, System.String language, System.Boolean isFSharp, System.Boolean isCSharp) [0x0012a] in /Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/src/Xamarin.Android.Build.Tasks/Tasks/GenerateResourceDesigner.cs:217\r\n\t  at Xamarin.Android.Tasks.GenerateResourceDesigner.Execute () [0x0065b] in /Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/src/Xamarin.Android.Build.Tasks/Tasks/GenerateResourceDesigner.cs:155\r\n\t  at Microsoft.Build.BuildEngine.TaskEngine.Execute () [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/TaskEngine.cs:134\r\n\t  at Microsoft.Build.BuildEngine.BuildTask.Execute () [0x0008d] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildTask.cs:101\r\n\r\nThe mono/2018-02 branch bumps the `FSharp.Core.dll` assembly that is\r\ndistributed with mono to have an assembly version of 4.4.1.\r\n\r\nThe `FSharp.Compiler.CodeDom` NuGet package that\r\n`Xamarin.Android.Build.Tasks.dll` references requires FSharp.Core\r\n4.3.1, hence the `FileNotFoundException`.\r\n\r\nThe (hopeful) fix? Install the required `FSharp.Core.dll` version, so\r\nthat `FSharp.Compiler.CodeDom` can work as desired."},{"Id":"7406841480","Type":"IssuesEvent","CreatedAt":"2018-03-20T14:03:13","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1438","RelatedDescription":"Closed issue \"Cannot find FSharp.Core or one of its dependencies during testing \" (#1438) at xamarin/xamarin-android","RelatedBody":"`Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest.CheckResourceDesignerIsCreated.Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest.CheckResourceDesignerIsCreated` is failing for the `mono:2018-02` integration\r\n\r\n**Error:**\r\n\r\n```\r\n/Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets: error : Error executing task GenerateResourceDesigner: Could not load file or assembly 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\nError executing task GenerateResourceDesigner: System.IO.FileNotFoundException: Could not load file or assembly 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\nFile name: 'FSharp.Core, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n  at System.CodeDom.Compiler.CodeDomProvider.CreateGenerator (System.IO.TextWriter output) [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/external/corefx/src/System.CodeDom/src/System/CodeDom/Compiler/CodeDomProvider.cs:123 \r\n  at Xamarin.Android.Tasks.GenerateResourceDesigner.WriteFile (System.String file, System.CodeDom.CodeTypeDeclaration resources, System.String language, System.Boolean isFSharp, System.Boolean isCSharp) [0x0012a] in /Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/src/Xamarin.Android.Build.Tasks/Tasks/GenerateResourceDesigner.cs:217 \r\n  at Xamarin.Android.Tasks.GenerateResourceDesigner.Execute () [0x0065b] in /Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/src/Xamarin.Android.Build.Tasks/Tasks/GenerateResourceDesigner.cs:155 \r\n  at Microsoft.Build.BuildEngine.TaskEngine.Execute () [0x00000] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/TaskEngine.cs:134 \r\n  at Microsoft.Build.BuildEngine.BuildTask.Execute () [0x0008d] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildTask.cs:101 \r\n```\r\n\r\n**Logs:**\r\n\r\nhttps://jenkins.mono-project.com/job/xamarin-android-pr-builder/2618/testReport/junit/Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest/CheckResourceDesignerIsCreated/Xamarin_Android_Build_Tests_AndroidUpdateResourcesTest_CheckResourceDesignerIsCreated_False_FSharp____Debug/\r\nhttps://jenkins.mono-project.com/job/xamarin-android-pr-builder/2618/testReport/junit/Xamarin.Android.Build.Tests.AndroidUpdateResourcesTest/CheckResourceDesignerIsCreated/Xamarin_Android_Build_Tests_AndroidUpdateResourcesTest_CheckResourceDesignerIsCreated_True_FSharp____Debug/\r\n\r\n**Issue** (as figured out by @jonpryor at https://github.com/mono/mono/issues/7511#issuecomment-371679320)**:**\r\n\r\nThe current code should be using the [`FSharp.Compiler.CodeDom` NuGet package](https://www.nuget.org/packages/FSharp.Compiler.CodeDom/), which has a reference on `FSharp.Core.dll` v4.3.1.0.\r\n\r\nFixes https://github.com/mono/mono/issues/7511\r\n\r\nhttps://github.com/mono/mono/issues/6842 https://github.com/xamarin/xamarin-android/pull/1289"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7410571777","Type":"IssuesEvent","CreatedAt":"2018-03-21T03:24:25","Actor":"danielrobbins","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2148","RelatedDescription":"Opened issue \"Xamarin.Forms.Platform.Android.FormsAppCompatActivity.SetMainPage - Null Reference Exception\" (#2148) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThere appears to be a bug in Xamarin.Forms 2.5.0.280555 and up -- including 2.5.1.340284-pre2 and most likely (not yet confirmed)  3.0.0.296286-pre2 where SetMainPage() can encounter a Null Reference exception.\r\n\r\nThis bug has been previously mentioned here by someone else and includes the exact traceback I was able to produce consistently: https://bugzilla.xamarin.com/show_bug.cgi?id=36287#c14 . This comment appeared within the discussion of another bug so wasn't addressed directly.\r\n\r\n### Steps to Reproduce\r\n\r\nI am able to reproduce this bug easily, provided that certain steps are followed. The Android app must be completely removed from the device. Then, it must be installed. The app must use PermissionsPlugin, this will cause the app to pop up an initial permissions request prior to app.MainPage being initialized.  This will cause SetMainPage() to run, and the Null Reference Exception will be triggered.\r\n\r\nIf the app is already installed, or upgraded from an already existing version, the initial Android permissions request pop-up does not appear, everything works fine and the Null Reference exception does not occur. That is why this traceback has been so tricky to track down -- it only happens under the specific conditions described above.\r\n\r\n### Expected Behavior\r\n\r\nSetMainPage() should just work under all conditions and not trigger a Null Reference Exception.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Based on initial report, at least XF 2.5.0.280555 and newer.\r\n- Last known good version: Unknown\r\n- IDE: Visual Studio Mac (latest stable)\r\n- Nuget Packages: Plugin.Permissions (2.2.1), possibly other versions or anything that will cause the permissions pop-up to appear.\r\n\r\n### Traceback\r\n\r\nandroid.runtime.JavaProxyThrowable: at Xamarin.Forms.Platform.Android.FormsAppCompatActivity.InternalSetPage (Xamarin.Forms.Page page) [0x0006f] in <173f39d71f0d4d928f5bbea42e96ffa8>:0\r\nat Xamarin.Forms.Platform.Android.FormsAppCompatActivity.SetMainPage () [0x0000c] in <173f39d71f0d4d928f5bbea42e96ffa8>:0\r\nat Xamarin.Forms.Platform.Android.FormsAppCompatActivity.LoadApplication (Xamarin.Forms.Application application) [0x0025c] in <173f39d71f0d4d928f5bbea42e96ffa8>:0\r\nat ddod_xamarin.Droid.MainActivity.OnCreate (Android.OS.Bundle bundle) [0x00098] in <1ef34a1d5efe4254ae2bcbf6d5b0d8b4>:0\r\nat Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x0000f] in <40c3dbb407c542888943108189b6e6d6>:0\r\nat (wrapper dynamic-method) System.Object.f4495476-e68d-4c26-a881-ccd056b172c5(intptr,intptr,intptr)\r\n  at md55fb97b9b0cbefcefea98df467d0407a7.MainActivity.n_onCreate (Native Method)\r\n  at md55fb97b9b0cbefcefea98df467d0407a7.MainActivity.onCreate (MainActivity.java:30)\r\n  at android.app.Activity.performCreate (Activity.java:6698)\r\n  at android.app.Instrumentation.callActivityOnCreate (Instrumentation.java:1140)\r\n  at android.app.ActivityThread.performLaunchActivity (ActivityThread.java:2643)\r\n  at android.app.ActivityThread.handleLaunchActivity (ActivityThread.java:2755)\r\n  at android.app.ActivityThread.-wrap12 (ActivityThread.java)\r\n  at android.app.ActivityThread$H.handleMessage (ActivityThread.java:1495)\r\n  at android.os.Handler.dispatchMessage (Handler.java:102)\r\n  at android.os.Looper.loop (Looper.java:154)\r\n  at android.app.ActivityThread.main (ActivityThread.java:6196)\r\n  at java.lang.reflect.Method.invoke (Native Method)\r\n  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run (ZygoteInit.java:888)\r\n  at com.android.internal.os.ZygoteInit.main (ZygoteInit.java:778)\r\n"},{"Id":"7409923079","Type":"PullRequestEvent","CreatedAt":"2018-03-20T23:18:10","Actor":"rookiejava","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2147","RelatedDescription":"Opened pull request \"[Tizen] Change the appearance of Entry/Editor even better\" (#2147) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUse EditfileEntry as a default native control of Entry/Editor. The major change in this PR is UI style updates for Entry and Editor. The biggest problem with the existing style is that the boundaries of Entry and Editor are ambigous. Especially for TV, the default TextColor is the same as the default Background Color, so if you do NOT set the color arbitrarily, the text will not be visible. \r\n\r\nThe following screenshots show before and after on each devices. \r\n\r\n|  |Before  | After |\r\n|----|----|----|\r\n|**Mobile** |   <p align=\"center\"> <img src = \"https://user-images.githubusercontent.com/1029134/37581469-26675ae4-2b8c-11e8-9f95-d37d7f58a5cc.png\" width=240 align=\"middle\"> </p> |  <p align=\"center\"> <img src = \"https://user-images.githubusercontent.com/1029134/37581480-2f488ef8-2b8c-11e8-9fad-0e08f686557d.png\" width=240></p>|\r\n|**TV** | <img src = \"https://user-images.githubusercontent.com/1029134/37581487-353eb68e-2b8c-11e8-8928-b3fed348f29e.png\" width=800> |   <img src = \"https://user-images.githubusercontent.com/1029134/37581497-3c35c860-2b8c-11e8-864f-72d681df2364.png\" width=800>|\r\n| **Watch**  | <p align=\"center\"><img src = \"https://user-images.githubusercontent.com/1029134/37581509-44be1618-2b8c-11e8-95ce-34b80c8b5496.png\" width=200> </p> |   <p align=\"center\"><img src = \"https://user-images.githubusercontent.com/1029134/37581517-4b4041be-2b8c-11e8-811e-b735fa6afa95.png\" width=200> </p> |\r\n\r\n### Bugs Fixed ###\r\n\r\nNone\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of master at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"},{"Id":"7408312977","Type":"IssuesEvent","CreatedAt":"2018-03-20T17:46:21","Actor":"JohnBot2014","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2146","RelatedDescription":"Opened issue \"TemplateBinding issue with iOS\" (#2146) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nTemplateBinding for ICommand not working from within a ControlTemplate on Xamarin Forms iOS whereas it works as expected on Xamarin Forms Android.\r\n\r\n### Steps to Reproduce\r\n1. Bind the ItemTapped Command Property from an extended ListView contained in a ControlTemplate used on a ContentPage\r\n\r\n### Expected Behavior\r\nExpected Behavior is that the ICommand in the ViewModel is executed which happens correctly on Android.\r\n\r\n### Actual Behavior\r\nActual Behavior on iOS is that somehow the ListView.ItemTapped event appears not to run although the ICommand is executed. The result is that the Command Parameters are never passed. The sample app can be used to illustrate this, a breakpoint in ListViewEx.OnItemTapped is never hit.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.28055\r\n- Last known good version: Unknown\r\n- IDE: VS2017\r\n- Platform Target Frameworks: \r\n  - iOS:  11.2\r\n  - Android: 4.0.3 \r\n- Android Support Library Version: 25.4.0.2\r\n- Nuget Packages: Default Forms App\r\n- Affected Devices: iOS devices\r\n\r\n### Reproduction Link\r\n\r\n[App12.zip](https://github.com/xamarin/Xamarin.Forms/files/1830496/App12.zip)\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7409572620","Type":"PullRequestEvent","CreatedAt":"2018-03-20T21:48:48","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3791","RelatedDescription":"Opened pull request \"[msbuild] Skip reference assemblies passed to mtouch\" (#3791) at xamarin/xamarin-macios","RelatedBody":"- Fixes issue #3199: Could not AOT the assembly System.Runtime.CompilerServices.Unsafe.dll (MT3001)\n  (https://github.com/xamarin/xamarin-macios/issues/3199)\n- Test case: https://www.dropbox.com/s/kxt3isgzn74nq35/Issue3199.zip?dl=0\n\nProblem\n=======\n\nGiven a Nuget Package added via the \"package reference\" mechanism and the said package having netstandard `lib` **and** `ref` folders;\nMTouch was getting reference assemblies and was trying to AOT them. This resulted in an error as those assemblies are only facades.\n\nSolution\n========\n\nSkipping the assemblies that have `/ref/` in their path seems like the simplest and yet most functional solution to the problem.\n\nAs it turn out, there is some logic already in place that copies the `lib` assemblies to the destination folder. It seems equivalent to marking them as \"Local Copy\".\nWhat this does is that it makes those assemblies available to msbuild via `@(ReferenceCopyLocalPaths)`. This gives us the opportunity to safely remove the `ref` assemblies from `@(ReferencePath)`.\n\n*Note: `mtouch` is getting the assemblies to reference via a combination of `@(ReferencePath)` and `@(ReferenceCopyLocalPaths)`.*"},{"Id":"7409396076","Type":"PullRequestEvent","CreatedAt":"2018-03-20T21:12:28","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3733","RelatedDescription":"Merged pull request \"[msbuild] Correctly determine whether Xamarin.Mac builds require a p…\" (#3733) at xamarin/xamarin-macios","RelatedBody":"…rovisioning profile (#3710)\r\n\r\nFixes issue #3674\r\n\r\nThe problem is that the Xamarin.Mac targets did not set the\r\nRequireProvisioningProfile property on the DetectSigningIdentity\r\ntask which meant that it defaulted to 'false'.\r\n\r\nWhen that property is 'false', the DetectSigningIdentity logic\r\nwould shortcut to not doing a provisioning profile lookup.\r\n\r\nThis was therefor causing the build to not use a provisioning\r\nprofile which caused the build to improperly codesign the app\r\nbundle."},{"Id":"7409306609","Type":"IssuesEvent","CreatedAt":"2018-03-20T20:54:52","Actor":"manish","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3790","RelatedDescription":"Opened issue \"Typo in mlaunch --wait-for-exit help description\" (#3790) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install mlaunch `11.8.0.20`\r\n2. Run `mlaunch --help`\r\n3. Check the description of `--wait-for-exit`\r\n\r\n### Expected Behavior\r\n\r\nThe output should have \r\n\r\n```\r\n--wait-for-exit[=VALUE]\r\n    If mtouch should wait until the launched app exits before exiting.\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\n--wait-for-exit[=VALUE]\r\n    If mtouch should wait until the launched app exits before existing.\r\n```\r\n\r\nNotice `existing`\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac (Preview) ===\r\n\r\nVersion 7.5 Preview (7.5 build 935)\r\nInstallation UUID: a6179aa3-e8e1-4028-a5e2-a02d6e9550a9\r\nRuntime:\r\n\tMono 5.10.0.179 (2017-12/dac60775616) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.0.36 (master / 0c7c49a6)\r\n\r\n\tPackage version: 510000179\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0-preview2-25407-01\r\n\t1.1.1\r\n\t1.0.4\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0-preview2-006497\r\n\t1.0.1\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.15 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/manish/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 23.0.2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.0.20 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.8.0.20 (Visual Studio Enterprise)\r\nHash: 1c6f300e\r\nBranch: d15-6\r\nBuild date: 2018-02-07 23:42:40-0500\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705000935\r\nGit revision: 81a8615e6ea8bccf90689c76ed188cce5376b15e\r\nBuild date: 2018-03-20 03:19:36-04\r\nXamarin addins: a01263bdbba2589b1f6e42ef085bd31f6e3bfcf4\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.12.6\r\nDarwin 16.7.0 Darwin Kernel Version 16.7.0\r\n    Thu Jun 15 17:36:27 PDT 2017\r\n    root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nGist Ide Information 1.1.0\r\nAddinMaker 1.4.2\r\nShow in Github 1.0.4\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\nNone needed\r\n\r\n### Example Project (If Possible)\r\n\r\nNot needed\r\n"},{"Id":"7408969831","Type":"IssuesEvent","CreatedAt":"2018-03-20T19:49:43","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3674","RelatedDescription":"Closed issue \"Regression - Fail to sign Mac OS project with Entitlements properly\" (#3674) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nI am experiencing a regression after upgrading. I can no longer build and run the signed application. I have already checked on another machine and worked before upgrading to todays release. I am assuming it is something to do with building a Mac OS project with Entitlements, fails to sign correctly and therefore fails to run.\r\n\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Mac/Xamarin.Mac.Common.targets (_CompileEntitlements target) ->\r\n\r\n\tEntitlements.plist:  warning : iCloud entitlements such as 'com.apple.developer.ubiquity-container-identifiers' require a Provisioning Profile.\r\n\tEntitlements.plist:  warning : Cannot expand $(TeamIdentifierPrefix) in Entitlements.plist without a provisioning profile.\r\n\r\n### Expected Behavior\r\n\r\nBuilds and Signs the project and runs it.\r\n\r\n### Actual Behavior\r\n\r\nCrashes due to invalid cert\r\n\r\n### Environment\r\n\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.4 (build 1033)\r\nInstallation UUID: eb84151c-06d1-4fb8-9a53-a5ebe900626c\r\nRuntime:\r\n\tMono 5.8.0.129 (2017-10/835a98d8559) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508000129\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.0.20 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.8.0.20 (Visual Studio Community)\r\nHash: 1c6f300e\r\nBranch: d15-6\r\nBuild date: 2018-02-07 23:42:40-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.15 (Visual Studio Community)\r\nAndroid SDK: Not found\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704001033\r\nGit revision: 053991068f3c88497d3e5cc52fe7fdf57c28b62f\r\nBuild date: 2018-02-28 05:02:28-05\r\nXamarin addins: cc3283953e0af0b8bfab1bdfdf847d9e403c4606\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n\r\n```\r\n\r\n### Build Logs\r\n[BuildLog.txt](https://github.com/xamarin/xamarin-macios/files/1785848/BuildLog.txt)\n\n> VS bug [#580963](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580963)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976110617575780353","CreatedAt":"2018-03-20T14:58:01+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/FllQaROslT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null},{"Id":"975795670622892032","CreatedAt":"2018-03-19T18:06:31+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":12,"RawContent":null},{"Id":"975467903750426626","CreatedAt":"2018-03-18T20:24:06+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/oyG6oJ6UN2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":208,"FavoriteCount":84,"RawContent":null},{"Id":"975154821358608384","CreatedAt":"2018-03-17T23:40:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to deliver rich media experiences with the #XamarinForms Video Player: https://t.co/ndy3yvDDNk https://t.co/jHWAbLK0zw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":75,"FavoriteCount":24,"RawContent":null},{"Id":"974742352538558464","CreatedAt":"2018-03-16T20:21:01+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/g1O7qUdDb7 https://t.co/KYZ5XlPeGr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":18,"RawContent":null},{"Id":"974673649277001729","CreatedAt":"2018-03-16T15:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/dtAlgRSysQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":16,"RawContent":null},{"Id":"974310000062533632","CreatedAt":"2018-03-15T15:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":14,"RawContent":null},{"Id":"973975762419224577","CreatedAt":"2018-03-14T17:34:52+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin joins https://t.co/zGGlEXOMrE! Learn more: https://t.co/dYZuo1IFIk https://t.co/a0BJMelbL9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":130,"FavoriteCount":68,"RawContent":null},{"Id":"973950886191030273","CreatedAt":"2018-03-14T15:56:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the #XamarinAndroid Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/HF0W9uigKU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":16,"RawContent":null},{"Id":"973590055234228224","CreatedAt":"2018-03-13T16:02:12+00:00","UserScreenname":"xamarinhq","Text":"The #CSharp developer’s guide to shipping better apps with #VSAppCenter: https://t.co/jU0cnONnM8 https://t.co/5UiJzLeMBf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":37,"RawContent":null},{"Id":"973272277876752385","CreatedAt":"2018-03-12T18:59:28+00:00","UserScreenname":"xamarinhq","Text":"Start your week off with the @XamarinPodcast, featuring discussion of #VS2017 version 15.6, AR with UrhoSharp, and… https://t.co/xgDtF4E72X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":8,"RawContent":null},{"Id":"973226616020176896","CreatedAt":"2018-03-12T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/MkadlSMfqL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":10,"RawContent":null},{"Id":"972993579109974016","CreatedAt":"2018-03-12T00:32:01+00:00","UserScreenname":"xamarinhq","Text":"The open source suite of SmartHotel360 reference apps includes mobile and desktop apps for business travelers, a we… https://t.co/i9MWn6ypXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":140,"FavoriteCount":45,"RawContent":null},{"Id":"972643544832856065","CreatedAt":"2018-03-11T01:21:06+00:00","UserScreenname":"xamarinhq","Text":"Get started with the #Xamarin Live Player for iOS: https://t.co/jQnSvYwtB1 https://t.co/sa0DV2n2aD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":97,"FavoriteCount":57,"RawContent":null},{"Id":"972152285550862336","CreatedAt":"2018-03-09T16:49:01+00:00","UserScreenname":"xamarinhq","Text":"Build a simple #XamarinForms chat app that leverages and connects to an https://t.co/y9erV6ivVL Core #WebSocket:… https://t.co/hDELQELDqc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":147,"FavoriteCount":57,"RawContent":null},{"Id":"971835801377091585","CreatedAt":"2018-03-08T19:51:25+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/FGappPLbxT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":73,"FavoriteCount":26,"RawContent":null},{"Id":"971796730722377729","CreatedAt":"2018-03-08T17:16:10+00:00","UserScreenname":"xamarinhq","Text":"An introduction to #tvOS with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/Qafo4W8L3m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"971430573867720704","CreatedAt":"2018-03-07T17:01:11+00:00","UserScreenname":"xamarinhq","Text":"Learn how to turn on automatic signing that allows #VS4Mac to take care of generating and using the required signin… https://t.co/snE707bjji","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":11,"RawContent":null},{"Id":"971119957894418433","CreatedAt":"2018-03-06T20:26:55+00:00","UserScreenname":"xamarinhq","Text":"#VS2017 version 15.6 is now available! Get all the details on this exciting release: https://t.co/QIxlfX9I7F","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":35,"RawContent":null}]}},"RunOn":"2018-03-21T05:30:40.7858495Z","RunDurationInMilliseconds":4104}