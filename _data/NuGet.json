{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10259610484","Type":"IssuesEvent","CreatedAt":"2019-08-22T04:22:00","Actor":"dehghani-mehdi","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7474","RelatedDescription":"Opened issue \"How to delete a nuget.org account?\" (#7474) at NuGet/NuGetGallery","RelatedBody":"I sent an email to support@nuget.org, but seems like there is no ones there!\r\nI can not wait forever for it. if you can not handle support request, improve your site's options."},{"Id":"10258733417","Type":"PullRequestEvent","CreatedAt":"2019-08-22T00:18:58","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7473","RelatedDescription":"Opened pull request \"Improve admin delete account page and add ability for admins to rename deleted accounts\" (#7473) at NuGet/NuGetGallery","RelatedBody":"Depends on https://github.com/NuGet/NuGetGallery/pull/7471\r\n\r\nCurrently, we don't have a way for site admins to release the username of a deleted account. This PR adds that functionality to the admin delete account page and also improves the UI of the page.\r\n\r\n![image](https://user-images.githubusercontent.com/18014088/63476908-8c716d80-c437-11e9-853f-edf3e45cfc3c.png)\r\n"},{"Id":"10258679345","Type":"PullRequestEvent","CreatedAt":"2019-08-22T00:03:59","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7472","RelatedDescription":"Opened pull request \"Update docs link.\" (#7472) at NuGet/NuGetGallery","RelatedBody":"Update Documentation link at the top of the page to the new docs landing page (https://docs.microsoft.com/en-us/nuget)\r\n\r\n@karann-msft "},{"Id":"10258302212","Type":"PullRequestEvent","CreatedAt":"2019-08-21T22:30:46","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7471","RelatedDescription":"Opened pull request \"Add WasUsernameReleased field to AccountDelete\" (#7471) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/Engineering/issues/1303\r\n\r\nThe idea is that there will be a job (an additional task in Gallery.Maintenance) that queries for all accounts that were deleted more than a year in the past and renames them to a Guid or something similar. We need to have an additional column on the `AccountDelete`s table so that we can remember what accounts we've renamed because otherwise we won't be able to reliably know what accounts we've renamed."},{"Id":"10256570047","Type":"IssuesEvent","CreatedAt":"2019-08-21T17:59:38","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7457","RelatedDescription":"Closed issue \"Deployment for week of 8/19\" (#7457) at NuGet/NuGetGallery","RelatedBody":"## NuGetGallery\r\n\r\nMerge PR: https://github.com/NuGet/NuGetGallery/pull/7458\r\nGallery Migration Release: [419490](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?releaseId=419490&_a=release-pipeline-progress)\r\nGallery Release: [420558](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=420558)\r\n\r\n- [x] INT\r\n    - [x] Run migration\r\n    - [x] USNC\r\n    - [x] USSC\r\n- [x] PROD\r\n    - [x] Run migration\r\n    - [x] USNC\r\n    - [x] USSC"},{"Id":"10256430037","Type":"PullRequestEvent","CreatedAt":"2019-08-21T17:39:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7465","RelatedDescription":"Merged pull request \"Embedded icon display on verify package page and indexing message\" (#7465) at NuGet/NuGetGallery","RelatedBody":"Addresses #7239, #7093.\r\n\r\nMoved the image type identification bits to the `ImageExtensions` to be shared between controllers and services.\r\nUpdated `PackagesController` to identify the image type from the image signature and generate data: url with proper content type.\r\n\r\nOn a verify package page it looks like this:\r\n![image](https://user-images.githubusercontent.com/102933/63381038-b863f480-c34c-11e9-947c-b9b1360830fd.png)\r\n(the icon in this case is 1024x1024 reduced by browser to our \"regular size\")"},{"Id":"10256052837","Type":"PullRequestEvent","CreatedAt":"2019-08-21T16:43:59","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7470","RelatedDescription":"Merged pull request \"Add 2 URLs to HTTP->HTTPS translation list\" (#7470) at NuGet/NuGetGallery","RelatedBody":"Fixed https://github.com/NuGet/Engineering/issues/2658"},{"Id":"10251304201","Type":"PullRequestEvent","CreatedAt":"2019-08-21T05:59:12","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7470","RelatedDescription":"Opened pull request \"Add 2 URLs to HTTP->HTTPS translation list\" (#7470) at NuGet/NuGetGallery","RelatedBody":"Fixed https://github.com/NuGet/Engineering/issues/2658"},{"Id":"10250938312","Type":"IssuesEvent","CreatedAt":"2019-08-21T04:22:09","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7466","RelatedDescription":"Closed issue \"[Azure Search] Don't allow skip higher than 100,000\" (#7466) at NuGet/NuGetGallery","RelatedBody":"Got some 503 returned from Azure Search when someone skipped beyond 100000, i.e. tried to go to page 5001)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10258919284","Type":"IssuesEvent","CreatedAt":"2019-08-22T01:12:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8482","RelatedDescription":"Opened issue \"Update our RPS triggering infrastructure\" (#8482) at NuGet/Home","RelatedBody":"Right now the RPS infrastructure that we're using incorrectly determines the triggering build and the results in ADO might get misinterpreted. \r\n\r\nThere's a way to do it in that brat tool, but it's significantly more tedious. \r\n\r\n//cc @rrelyea "},{"Id":"10258824748","Type":"IssuesEvent","CreatedAt":"2019-08-22T00:44:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8481","RelatedDescription":"Opened issue \"Add dotnet list package --deprecated tests\" (#8481) at NuGet/Home","RelatedBody":"This only really works with remote sources, so we'd need to do some clever mocking to get this to work. "},{"Id":"10258704073","Type":"IssuesEvent","CreatedAt":"2019-08-22T00:10:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8480","RelatedDescription":"Opened issue \"Add a code owners file and add everyone from the team in it\" (#8480) at NuGet/Home","RelatedBody":"Since we are a relatively small team, we request reviews from everyone on the team for every PR. \r\n\r\nWe should add a codeowners file to remove the manual step. \r\n\r\nThis would also help us get notifications when external contributors create PRs. \r\nWe wouldn't need to \"watch\" the PRs for new ones :) \r\n\r\nNote that draft pull requests do not request reviews, so there should be no hick-ups there. "},{"Id":"10258653025","Type":"IssuesEvent","CreatedAt":"2019-08-21T23:56:55","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8479","RelatedDescription":"Opened issue \"Remove or improve configuration change events\" (#8479) at NuGet/Home","RelatedBody":"`ISettings` and `IPackageSourceProvider` have events about changes to settings. However, the only place this appears to be used is in `ExtensibleSourceRespositoryProvider` and the only place it appears to be raised is in `VSSettings` when solutions are opened or closed.\r\n\r\nThe easier option would be to make `ExtensibleSourceRespositoryProvider` subscribe to the solution open and close events directly and remove all the configuration event code.\r\n\r\nAlternatively, events should be unsubscribed properly, probably by making everything related `IDisposable` and making sure they get disposed correctly."},{"Id":"10258015367","Type":"IssuesEvent","CreatedAt":"2019-08-21T21:35:14","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8478","RelatedDescription":"Opened issue \"Searching in PMUI with Static / Sleet package sources causes OutOfMemoryException\" (#8478) at NuGet/Home","RelatedBody":"# Details about Problem\r\n\r\nWhile using the PM UI and searching for a package, I received multiple 'System.OutOfMemoryException'. Discussing with @loic-sharma and @rrelyea, it seems we may need to discuss an approach to handling sleet / static sources in a better way.\r\n\r\nRelated past discussion: https://github.com/NuGet/Home/issues/7031\r\nJSON Performance discussion: https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/issues/804\r\n\r\nNuGet product used: VS UI\r\nVS version (if appropriate): 16.3.0 Preview 3.0\r\n\r\nWorked before? If so, with which NuGet version: Related to new static sources.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new ASP.NET Core Web Application.\r\n\r\n2. Drop a new NuGet.Config file in the solution directory with the following sources:\r\n```\r\n<packageSources>\r\n        <clear />\r\n        <add key=\"dotnet-core\" value=\"https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\" />\r\n        <add key=\"extensions\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json\" />\r\n        <add key=\"entityframeworkcore\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-entityframeworkcore/index.json\" />\r\n        <add key=\"entityframework6\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-entityframework6/index.json\" />\r\n        <add key=\"aspnetcore-tooling\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore-tooling/index.json\" />\r\n        <add key=\"aspnetcore\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore/index.json\" />\r\n        <add key=\"aspnet-blazor\" value=\"https://dotnetfeed.blob.core.windows.net/aspnet-blazor/index.json\" />\r\n        <add key=\"NuGet.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n```\r\n3. Open the `Manage NuGet Packages` UI\r\n4. Search for various packages. It should take 3-5 attempts to recreate the problem. Example: Microsoft.EntityFramework.X\", where X is changed to various characters.\r\n5. In the Output window, with \"Show output from: Package Manager\", you'll see exceptions similar to the following (could be 1 or more of these):\r\n`[aspnetcore] Exception of type 'System.OutOfMemoryException' was thrown.\r\n[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.\r\n[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.\r\n[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.\r\n[dotnet-core] Exception of type 'System.OutOfMemoryException' was thrown.\r\n[aspnetcore] Exception of type 'System.OutOfMemoryException' was thrown.`\r\n"},{"Id":"10257535579","Type":"IssuesEvent","CreatedAt":"2019-08-21T20:22:18","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8477","RelatedDescription":"Opened issue \"VS:  enable ngen-ing NuGet assemblies in VS\" (#8477) at NuGet/Home","RelatedBody":"NuGet assemblies are not getting NGEN-ed as I would expect after NuGet/Home#6007."},{"Id":"10257354443","Type":"IssuesEvent","CreatedAt":"2019-08-21T19:55:11","Actor":"sharwell","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8476","RelatedDescription":"Opened issue \"'GeneratePathProperty' does not work on 'PackageDownload'\" (#8476) at NuGet/Home","RelatedBody":"The new `<PackageDownload>` elements do not support the `GeneratePathProperty` attribute, making it difficult to download a package whose contents will be used by an unrelated build task."},{"Id":"10256743643","Type":"IssuesEvent","CreatedAt":"2019-08-21T18:24:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8462","RelatedDescription":"Closed issue \"No dependencies in Nuget.Protocol API for PackageSearchResource\" (#8462) at NuGet/Home","RelatedBody":"I use Nuget.Protocol 5.2.0 to investigate some features of Nuget dependency graph and i write next code:\r\n```C#\r\n\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing NuGet.Common;\r\nusing NuGet.Configuration;\r\nusing NuGet.Protocol.Core.Types;\r\nusing NuGet.Protocol.VisualStudio;\r\n\r\nnamespace NuGetApiInvestigation\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            var visStudio = Repository.Provider.GetVisualStudio();\r\n            var packageSource = new PackageSource(\"https://api.nuget.org/v3/index.json\");\r\n            var sourceRepository = Repository.CreateSource(visStudio, packageSource);\r\n            var packageSearchResource = await sourceRepository.GetResourceAsync<PackageSearchResource>();\r\n            \r\n            var searchAsync = await packageSearchResource.SearchAsync(\"\", new SearchFilter(false), 0, 500,\r\n                NullLogger.Instance, CancellationToken.None);\r\n            foreach (var metadata in searchAsync)\r\n            {\r\n                Dictionary<string, int> usages = new Dictionary<string, int>();\r\n\r\n                foreach (var dependencySet in metadata.DependencySets)\r\n                foreach (var dependency in dependencySet.Packages)\r\n                {\r\n                    usages[dependency.Id] += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd I realize that i don't get any dependencySet that way. Of course, i can use PackageMetadataResource to get dependencies for each package, but it took too many time for 500+ packages. Is it possible to get dependencies in package metadata by using PackageSearchResource? I mean, maybe there is exist some flag or PackageSource for this purpose?\r\n"},{"Id":"10256369184","Type":"IssuesEvent","CreatedAt":"2019-08-21T17:30:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7557","RelatedDescription":"Closed issue \"[PerfWatson] UIDelay: nuget.packagemanagement.visualstudio.dll!NuGet.PackageManagement.VisualStudio.VsManagedLanguagesProjectSystemServices+<AddOrUpdatePackageReferenceAsync>d__.MoveNext\" (#7557) at NuGet/Home","RelatedBody":"Tracking issue for Classic csproj - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/633668"},{"Id":"10256254447","Type":"IssuesEvent","CreatedAt":"2019-08-21T17:13:30","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7349","RelatedDescription":"Closed issue \"PackagePathResolver.GetInstalledPath doesn't work with relative paths\" (#7349) at NuGet/Home","RelatedBody":"Either make sure `PackagePathResolver.Root` is absolute [here](https://github.com/NuGet/NuGet.Client/blob/3803820961f4d61c06d07b179dab1d0439ec0d91/src/NuGet.Core/NuGet.Packaging/PackageExtraction/PackagePathHelper.cs#L123) or just make it absolute in the PackagePathResolver constructor."},{"Id":"10256080152","Type":"IssuesEvent","CreatedAt":"2019-08-21T16:47:54","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8474","RelatedDescription":"Closed issue \"Adapt to moving package feed for CPS packages\" (#8474) at NuGet/Home","RelatedBody":"CPS is moving their packages from myget to a public Azure DevOps feed."},{"Id":"10250724327","Type":"IssuesEvent","CreatedAt":"2019-08-21T03:21:26","Actor":"iDFLO","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8475","RelatedDescription":"Closed issue \"@nkolev92 I can confirm that that works for me.\" (#8475) at NuGet/Home","RelatedBody":"@nkolev92 I can confirm that that works for me.\r\n\r\n(`rm -rf /tmp/NuGetScratch`, then `ln -s /tmp/NuGetScratch <a user-local folder>`, then `nuget install` works)\r\n\r\n_Originally posted by @aveao in https://github.com/NuGet/Home/issues/7341#issuecomment-450332885_"},{"Id":"10250723693","Type":"IssuesEvent","CreatedAt":"2019-08-21T03:21:15","Actor":"iDFLO","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8475","RelatedDescription":"Opened issue \"@nkolev92 I can confirm that that works for me.\" (#8475) at NuGet/Home","RelatedBody":"@nkolev92 I can confirm that that works for me.\r\n\r\n(`rm -rf /tmp/NuGetScratch`, then `ln -s /tmp/NuGetScratch <a user-local folder>`, then `nuget install` works)\r\n\r\n_Originally posted by @aveao in https://github.com/NuGet/Home/issues/7341#issuecomment-450332885_"},{"Id":"10250093051","Type":"IssuesEvent","CreatedAt":"2019-08-21T00:28:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8459","RelatedDescription":"Reopened issue \"Distribute the .NET CLI as a .NET Core Global Tool\" (#8459) at NuGet/Home","RelatedBody":"I.e. so that it can be installed using `dotnet tool install`.\r\n\r\nA continuous source of pain is the mismatch between `dotnet` and `nuget.exe`. The former does not support all the operations of the latter, and often lags behind when new features are released. Some of the problems described in https://github.com/dotnet/coreclr/issues/26175 also apply with regard to issues and repos. Often, I find it near to impossible find out which version of the SDK is going to contain a given change to the NuGet client.\r\n\r\nWhile it possible to use nuget.exe instead, bootstrapping this from, for example, a build script is relatively painful in that it requires a non-trivial amount of boilerplate code. Whereas it's trivial to bootstrap a .NET Core Global Tool (`dotnet tool install --tool-path ...`).\r\n\r\nIf the NuGet CLI was distributed as a .NET Core Global Tool, that would probably solve most of these issues. We could choose to ignore any NuGet commands in the SDK and use the .NET Core Global Tool instead. We could follow issues in the NuGet repo in isolation, and pick up the new versions of the .NET Core Global Tool when we need to."},{"Id":"10249803684","Type":"IssuesEvent","CreatedAt":"2019-08-20T23:12:08","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8277","RelatedDescription":"Closed issue \"Show warning icons on PMUI Installed tab for deprecated packages\" (#8277) at NuGet/Home","RelatedBody":"When an installed package is deprecated, show the warning icon in as per the [spec](https://github.com/NuGet/Home/wiki/Deprecate-packages#visual-studio):\r\n* Next to the text `Installed` on the tab header\r\n* As an icon overlay next to the package ID of the deprecated installed packages in search results\r\n\r\n![image](https://user-images.githubusercontent.com/880728/60345284-f67e1100-99b8-11e9-8b80-a405d8a8b0ae.png)\r\n\r\nThis work can happen in parallel but depends on server-side work to flow deprecation info into search service [#7297](https://github.com/nuget/nugetgallery/issues/7297)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":1,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-08-22T05:30:45.7224649Z","RunDurationInMilliseconds":2294}