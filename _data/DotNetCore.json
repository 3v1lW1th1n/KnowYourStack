{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. Please avoid installing this update on Windows 7 or Windows Server 2008 R2. See .NET Framework January 2018 Rollup Known Issue...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7103354498","Type":"PullRequestEvent","CreatedAt":"2018-01-16T04:24:46","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15870","RelatedDescription":"Merged pull request \"Fix mismatch between new and free in numa.cpp\" (#15870) at dotnet/coreclr","RelatedBody":"One of the allocations in the numa.cpp uses new to allocate an array,\r\nbut it incorrectly uses free to free the memory. This change fixes it.\r\n\r\nCloses #15867 "},{"Id":"7103354490","Type":"IssuesEvent","CreatedAt":"2018-01-16T04:24:46","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15867","RelatedDescription":"Closed issue \"Mismatching allocation and deallocation in VirtualAllocExNuma()\" (#15867) at dotnet/coreclr","RelatedBody":"This was found with Cppcheck\r\n\r\npal/src/numa/muna.cpp has `VirtualAllocExNuma()` function that does this:\r\n\r\n    unsigned long *nodeMask = new unsigned long[nodeMaskLength];\r\n    //whatever, then\r\n    free(nodeMask);\r\n\r\nPairing `new[]` with `free()` yields undefined behavior. I guess `malloc()` with a null check should be used here - same as with other memory allocations in this translation unit.\r\n"},{"Id":"7103345957","Type":"PullRequestEvent","CreatedAt":"2018-01-16T04:20:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15868","RelatedDescription":"Merged pull request \"Fix Android build\" (#15868) at dotnet/coreclr","RelatedBody":"There were the following issues:\r\n* The current versions of packages available at the termux site were obsolete.\r\n* The libintl.h was removed from the Android SDK, so the dgettext and bindtextdomain\r\n  are not available. But they were dummy implementations before anyways, so we can remove\r\n  their usage on Android.\r\n* The detection of the ucol_setMaxVariable needs to be done using the\r\n  check_cxx_symbol_exists instead of check_symbol_exists, since on Android, the\r\n  ICU libraries now depend on C++ runtime.\r\n* The SIZE_T_MAX is already defined in Android headers, so the definition in cgroup.cpp was\r\n  colliding with it.\r\n* The pthread_condattr_setclock detection was using pthread library, but on Android, it is\r\n  located in the \"c\" library instead. So it was not being detected."},{"Id":"7103263913","Type":"PullRequestEvent","CreatedAt":"2018-01-16T03:43:08","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15860","RelatedDescription":"Merged pull request \"Delete BasicSpanTest.cs\" (#15860) at dotnet/coreclr","RelatedBody":"It is redundant with CoreFX Span tests now"},{"Id":"7103159326","Type":"PullRequestEvent","CreatedAt":"2018-01-16T03:00:42","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15873","RelatedDescription":"Opened pull request \"[Local GC] FEATURE_EVENT_TRACE 1/n: Tracking Event State\" (#15873) at dotnet/coreclr","RelatedBody":"This PR is the first of several PRs implementing [this design](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md) bringing FEATURE_EVENT_TRACE to standalone GCs. This PR implements the portion of the design that [keeps track of what events are enabled](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#querying-whether-events-are-enabled).\r\n\r\nThe approach taken in this PR is fundamentally the same as the one described in the design document, with some minor tweaks to `GCEventState`.\r\n\r\nThe `GCEventState` class described in the spec was simplified somewhat, based on some insights I had when experimenting with ETW. There is no need to draw any distinction between enabling\r\nor disabling a provider, since the `EtwCallback` installed by the runtime receives the level and keyword state after applying the delta that a log enabler (e.g. logman) has created. For example, for the following sequence of events:\r\n\r\n```\r\nlogman start trace1 -p {clr-provider-guid} 0x1 0x5 -ets\r\nlogman start trace2 -p {clr-provider-guid} 0x2 0x4 -ets\r\nlogman stop trace1 -ets\r\nlogman stop trace2 -ets\r\n```\r\n\r\n`EtwCallback` is invoked four times, with the following arguments:\r\n\r\n```\r\nEtwCallback(Level=5, Keyword=1, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=5, Keyword=3, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=4, Keyword=2, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=0, Keyword=0, EVENT_CONTROL_CODE_DISABLE_PROVIDER)\r\n```\r\n\r\nWe can pass the level and keyword information verbatim to the GC and no additional logic is\r\nnecessary; the ETW subsystem is already keeping track of which trace client has what level and keyword enabled so the GC doesn't need to do it. The GC doesn't even need to know if a provider\r\nis being enabled or disabled since it can just take the information ETW gives it.\r\n\r\nInstead of having separate `Enable` and `Disable` code paths on `GCEventState`, as written in the spec, this PR has a single `Set` entry point that sets the GC's level and keyword state for a provider to exactly what is given to `Set` as arguments, which in turn comes directly from ETW."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7103223183","Type":"PullRequestEvent","CreatedAt":"2018-01-16T03:26:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8402","RelatedDescription":"Opened pull request \"WIP Use rich mock to test InstallCommand\" (#8402) at dotnet/cli","RelatedBody":"To ensure the mock has the same behavior the component has, run mock under the same tests the adapter has.\r\nIt is a common problem that moq has -- \"everything is mocked out, you are not test anything\""},{"Id":"7102874634","Type":"PullRequestEvent","CreatedAt":"2018-01-16T01:06:17","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8397","RelatedDescription":"Closed pull request \"WIP Tool command tests with mock\" (#8397) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7102833471","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:48:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8401","RelatedDescription":"Closed pull request \"WIP test CI\" (#8401) at dotnet/cli","RelatedBody":"no checkin testing ci for the crossgen error"},{"Id":"7101999241","Type":"PullRequestEvent","CreatedAt":"2018-01-15T20:04:31","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8401","RelatedDescription":"Opened pull request \"WIP test CI\" (#8401) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7098869440","Type":"PullRequestEvent","CreatedAt":"2018-01-15T08:00:51","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8400","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#8400) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180115-080050\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180115-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7097569666","Type":"IssuesEvent","CreatedAt":"2018-01-14T20:42:03","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8399","RelatedDescription":"Opened issue \"dotnet pack does not respect assembly atttributes\" (#8399) at dotnet/cli","RelatedBody":"@junalmeida commented on [Tue Jan 09 2018](https://github.com/dotnet/core/issues/1203)\n\n# Issue Title\r\n\r\nCompiling and packing using Visual Studio 2017 or dotnet pack does not respect assembly attributes while using AssemblyInfo.cs\r\n\r\n# General \r\n\r\n\r\nUsing the following csproj structure: \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <AssemblyName>Alma.Core</AssemblyName>\r\n    <RootNamespace>Alma.Core</RootNamespace>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n  </PropertyGroup>\r\n```\r\n\r\nWhen building the project, binaries are generated correctly with my attributes from .cs file, but nuget package is wrong: \r\n\r\n![image](https://user-images.githubusercontent.com/991675/34752832-cba0a618-f59b-11e7-8d8d-235483050534.png)\r\n\r\n\n\n"},{"Id":"7097557642","Type":"IssuesEvent","CreatedAt":"2018-01-14T20:34:49","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8398","RelatedDescription":"Opened issue \"CLI didn't take proper environment\" (#8398) at dotnet/cli","RelatedBody":"@KhaledSMQ commented on [Fri Jan 12 2018](https://github.com/dotnet/core/issues/1215)\n\n# Issue Title\r\non windows 10 32bit  .NET Core SDK 2.1.2  i am setting the env to Local \r\nusing set ASPNETCORE_ENVIRONMENT=Local and the settings on windows environment variables for system and user both i set the key to Local but still taking Development `MyProject.Host` in my `launchSettings.json`  dotnet core must to take `MyProject.Host.Local` profile\r\n \r\nlaunchSettings.json file\r\n```\r\n{\r\n\t\"iisSettings\": {\r\n\t\t\"windowsAuthentication\": false,\r\n\t\t\"anonymousAuthentication\": true,\r\n\t\t\"iisExpress\": {\r\n\t\t\t\"applicationUrl\": \"http://localhost:5000/\",\r\n\t\t\t\"sslPort\": 0\r\n\t\t}\r\n\t},\r\n\t\"profiles\": {\r\n\t\t\"IIS Express\": {\r\n\t\t\t\"commandName\": \"IISExpress\",\r\n\t\t\t\"environmentVariables\": {\r\n\t\t\t\t\"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"MyProject.Host\": {\r\n\t\t\t\"commandName\": \"Project\",\r\n\t\t\t\"environmentVariables\": {\r\n\t\t\t\t\"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n\t\t\t},\r\n\t\t\t\"applicationUrl\": \"http://localhost:5000/\"\r\n\t\t},\r\n\t\t\"MyProject.Host.Local\": {  ` <------- targeted profile  `\r\n\t\t\t\"commandName\": \"Project\",\r\n\t\t\t\"environmentVariables\": {\r\n\t\t\t\t\"ASPNETCORE_ENVIRONMENT\": \"Local\"\r\n\t\t\t},\r\n\t\t\t\"applicationUrl\": \"http://localhost:5000/\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n \n\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7097753248","Type":"IssuesEvent","CreatedAt":"2018-01-14T22:39:45","Actor":"MelbourneDeveloper","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/621","RelatedDescription":"Opened issue \"UWP Debuggin Broken\" (#621) at dotnet/standard","RelatedBody":"I upgraded to the latest version of UWP 16299. I then upgraded my .NET Standard projects to 2.0. Debugging is completely broken now.  I can't debug anything. I am using Visual Studio 15.5.3"},{"Id":"7088753160","Type":"PullRequestEvent","CreatedAt":"2018-01-11T22:45:46","Actor":"ahsonkhan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02411-04 (master)\" (#620) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7103389992","Type":"PullRequestEvent","CreatedAt":"2018-01-16T04:41:34","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26345","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26116-01, preview1-26116-01, preview1-26115-03, respectively (master)\" (#26345) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7103417510","Type":"IssuesEvent","CreatedAt":"2018-01-16T04:54:31","Actor":"msbasanth","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24066","RelatedDescription":"Closed issue \"Distiguishing auto-generated Constructor from an Custom-Constructor from IMethodSymbol.\" (#24066) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nRoslyn v2.6.0\r\nVS2017 15.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Declare a class with no constructor\r\n2. Try to analyze the constructor of the class, IMethodSymbol in an analyzer\r\n3. We won't be able to identify whether the constructor is auto-generated Constructor or not.\r\n\r\n**Expected Behavior**:\r\nWe should have a property to identify whether in IMethodSymbol whether a constructor is auto-generated or not.\r\n\r\n**Actual Behavior**:\r\nThere is no way to identify whether IMethodSymbol of a constructor whether it is auto-generated or not.\r\n\r\nThanks\r\nBasanth\r\n\r\n  "},{"Id":"7103408013","Type":"IssuesEvent","CreatedAt":"2018-01-16T04:50:10","Actor":"eyalsk","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24252","RelatedDescription":"Opened issue \"Improve the experience for extensions\" (#24252) at dotnet/roslyn","RelatedBody":"Many extensions today install other extensions to allow the consumer have more control over features but this creates a problem because there's nothing in the IDE that indicates that an extension is part of a bundle.\r\n\r\nIt was nice if Visual Studio automatically tagged installed extensions so it would have an \"artificial dependencies\" so the consumer would know that the extension was installed by a 3rd-party and not directly.\r\n\r\nAdditionally, I think that the installer should be improved and tell the consumer what extensions are going to be installed before actually installing them or even let the person choose that.\r\n\r\nDisabling an extension that contain other extensions should also disable all of the extension it \"contains\", same goes for removing an extension, however, one should still be able to remove or disable a single extension individually.\r\n\r\nIt shouldn't be such a burden and I don't think that it's something extension authors should manage themselves, I think that there should be a system for it.\r\n\r\nOther editors have this but more importantly VSCode have this notion of dependencies for extensions that contains other extensions."},{"Id":"7103407970","Type":"PullRequestEvent","CreatedAt":"2018-01-16T04:50:09","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24250","RelatedDescription":"Closed pull request \"Produce hidden diagnostics for UseExplicitType\" (#24250) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nProduce hidden diagnostics for fixable `var` regardless of preferences, so that the fix can be invoked manually.\r\nSame applies to UseImplicitType.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24227\r\n\r\n### Workarounds, if any\r\nFix the type by hand, or set code style to trigger.\r\n\r\n### Risk\r\n### Performance impact\r\nThe change is simple, but there is potential impact since we're analyzing many more nodes.\r\n@sharwell Any thoughts?\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### Root cause analysis\r\nNew feature.\r\n\r\nPROTOTYPE: this new behavior makes a lot of existing tests for different behaviors for different preferences insensitive to breaks. Need to find a way to keep them discriminative.\r\n\r\nPROTOTYPE: I made this PR for 15.7, but we can move if desired."},{"Id":"7103051915","Type":"IssuesEvent","CreatedAt":"2018-01-16T02:19:14","Actor":"eyalsk","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24251","RelatedDescription":"Closed issue \".editorconfig when_on_single_line gives an error saying it's an invalid value\" (#24251) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio Community v15.5.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nAdd the following rules:\r\n```\r\ncsharp_style_expression_bodied_operators = when_on_single_line:error\r\ncsharp_style_expression_bodied_indexers = when_on_single_line:error\r\ncsharp_style_expression_bodied_accessors = when_on_single_line:error\r\ncsharp_style_expression_bodied_methods = when_on_single_line:error\r\ncsharp_style_expression_bodied_properties = when_on_single_line:error\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n1. Should not cause an error.\r\n\r\n2. Should show `when_on_single_line` in the intellisense.\r\n\r\n**Actual Behavior**:\r\n\r\n1. `when_on_single_line` causes the following error \"EC114: **whenon**_single_line is not a valid value for...\"; notice the typo.\r\n\r\n2. Doesn't show the value in the intellisense.\r\n\r\n"},{"Id":"7103050074","Type":"IssuesEvent","CreatedAt":"2018-01-16T02:18:28","Actor":"eyalsk","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24245","RelatedDescription":"Closed issue \"Edit the .editorconfig causes VS to hang\" (#24245) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio Community 2017 v15.5.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nCan't really reproduce this reliably but edit `.editorconfig` causes VS to hang after few minutes of usage, just a wild guess but maybe it has something to do with the intellisense."},{"Id":"7102731671","Type":"IssuesEvent","CreatedAt":"2018-01-16T00:03:50","Actor":"eyalsk","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24251","RelatedDescription":"Opened issue \".editorconfig when_on_single_line gives an error saying it's an invalid value\" (#24251) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio Community v15.5.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nAdd the following rules:\r\n```\r\ncsharp_style_expression_bodied_operators = when_on_single_line:error\r\ncsharp_style_expression_bodied_indexers = when_on_single_line:error\r\ncsharp_style_expression_bodied_accessors = when_on_single_line:error\r\ncsharp_style_expression_bodied_methods = when_on_single_line:error\r\ncsharp_style_expression_bodied_properties = when_on_single_line:error\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n1. Should not cause an error.\r\n\r\n2. Should show `when_on_single_line` in the intellisense.\r\n\r\n**Actual Behavior**:\r\n\r\n1. `when_on_single_line` causes the following error \"EC114: **whenon**_single_line is not a valid value for...\"; notice the typo.\r\n\r\n2. Doesn't show the value in the intellisense.\r\n\r\n"},{"Id":"7102669618","Type":"PullRequestEvent","CreatedAt":"2018-01-15T23:38:18","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24250","RelatedDescription":"Opened pull request \"Produce hidden diagnostics for UseExplicitType\" (#24250) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nProduce hidden diagnostics for fixable `var` regardless of preferences, so that the fix can be invoked manually.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24227\r\n\r\n### Workarounds, if any\r\nFix the type by hand, or set code style to trigger.\r\n\r\n### Risk\r\n### Performance impact\r\nThe change is simple, but there is potential impact since we're analyzing many more nodes.\r\n@sharwell Any thoughts?\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### Root cause analysis\r\nNew feature.\r\n\r\nPROTOTYPE: this new behavior makes a lot of existing tests for different behaviors for different preferences insensitive to breaks. Need to find a way to keep them discriminative.\r\n\r\nPROTOTYPE: I made this PR for 15.7, but we can move if desired."},{"Id":"7102481387","Type":"PullRequestEvent","CreatedAt":"2018-01-15T22:29:08","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24249","RelatedDescription":"Opened pull request \"Implement stackalloc initializers\" (#24249) at dotnet/roslyn","RelatedBody":"Proposal: https://github.com/dotnet/csharplang/pull/1122\r\n\r\n/cc @VSadov "},{"Id":"7102062103","Type":"IssuesEvent","CreatedAt":"2018-01-15T20:22:22","Actor":"eyalsk","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24248","RelatedDescription":"Opened issue \".editorconfig some values aren't recognizable/supported by VS\" (#24248) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio Community 2017 v15.5.3\r\n\r\n1. `flush_left` is documented [here](https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/ide/editorconfig-code-style-settings-reference.md) but [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) it's documented as `left_most` and yet VS doesn't recognize either of these values.\r\n\r\n2. `type_parameter` and `namespace` they are documented [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) but are not documented anywhere else, @jmarolf does VS really support these values?\r\n\r\n3. `when_on_single_line` is documented [here](https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/ide/editorconfig-code-style-settings-reference.md) but it's not mentioned [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) and VS doesn't recognize it.\r\n\r\nIt can be really confusing because you don't know whether VS supports these values or they are just aren't recognizable by the IDE and these values are important to my style of coding, probably to others too.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7102051255","Type":"IssuesEvent","CreatedAt":"2018-01-15T20:19:14","Actor":"dasMulli","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24247","RelatedDescription":"Opened issue \"PathMap MSBuild property inconsistent with similar properties\" (#24247) at dotnet/roslyn","RelatedBody":"MSBuild properties containing lists are usually separated using semicolons, however `$(PathMap)` needs commas (`,`) as separators, causing confusion when authoring projects since it behaves differently.\r\n\r\nE.g. specifying `<PathMap>$(PathMap);$(MSBuildProjectDirecgory)=/project</PathMap>` fails silently (!) because the initial `;` is considered part of the path (or not?), but this looks exactly like how one would expect to safely add to a property containing a list.\r\n\r\nThis adds to the fact that paths containing `;` aren't really usable in MSBuild anyway without proper escaping."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7100169501","Type":"PullRequestEvent","CreatedAt":"2018-01-15T13:12:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5247","RelatedDescription":"Merged pull request \"Force link time symbol resolution for \"__Internal\" module for compatibility with Mono\" (#5247) at dotnet/corert","RelatedBody":"Addressing @kekekeks feedback on gitter:\r\n\r\n    AFAIK, Mono uses __Internal for statically linked libraries\r\n\r\n    Using * means additional work for library maintainers (another #if in P/Invoke declaration code)"},{"Id":"7098734649","Type":"IssuesEvent","CreatedAt":"2018-01-15T07:17:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/527","RelatedDescription":"Closed issue \"Extend PAL for Linux and Mac\" (#527) at dotnet/corert","RelatedBody":"This will be required for CoreFX Test run support.\n"},{"Id":"7098710122","Type":"IssuesEvent","CreatedAt":"2018-01-15T07:08:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5248","RelatedDescription":"Opened issue \"TimeZoneInfo does not work on Unix\" (#5248) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7102728865","Type":"IssuesEvent","CreatedAt":"2018-01-16T00:02:35","Actor":"ashmind","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1856","RelatedDescription":"Opened issue \"ResolvePackageFileConflicts in VS 15.5.3 seem to break previously working build (non-SDK project)\" (#1856) at dotnet/sdk","RelatedBody":"Not sure if this is the right place for it.\r\n\r\nWe have a .NET 4.5.1 (no SDK) project that references file `System.Web.DataVisualization.dll` from a relative `lib` folder using `HintPath`:\r\n```xml\r\n<Reference Include=\"System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\">\r\n  <SpecificVersion>False</SpecificVersion>\r\n  <HintPath>..\\..\\libraries\\System.Web.DataVisualization\\3.5\\System.Web.DataVisualization.dll</HintPath>\r\n</Reference>\r\n```\r\n\r\nSometime after I upgraded to a newer VS (recently), I noticed the build on local failing.\r\nThe actual failure is something like:\r\n```\r\nerror CS0234: The type or namespace name 'DataVisualization' does not exist in the namespace 'System.Web.UI' (are you missing an assembly reference?)\r\n```\r\n\r\nBut I think the true problem was:\r\n```\r\nEncountered conflict between 'Reference:System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' and 'Platform:System.Web.DataVisualization.dll'.  Choosing 'Platform:System.Web.DataVisualization.dll' because AssemblyVersion '4.0.0.0' is greater than '3.5.0.0'.\r\n```\r\nThis is reported by `ResolvePackageFileConflicts` called by `_HandlePackageFileConflicts` in `Microsoft.NET.Build.Extensions.ConflictResolution.targets`. Adding `<SpecificVersion>True</SpecificVersion>` doesn't have any effect.\r\n\r\nSame project builds successfully on other versions of VS 2017 (sorry, hard to confirm which ones), and setting `<ResolveAssemblyConflicts>False</ResolveAssemblyConflicts>` on project level solves the issue completely."},{"Id":"7096587274","Type":"IssuesEvent","CreatedAt":"2018-01-14T09:26:50","Actor":"dasMulli","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1855","RelatedDescription":"Opened issue \"Should netstandard2.0 library publish trim packages?\" (#1855) at dotnet/sdk","RelatedBody":"When building a .NET Framework or .NET Core 2.0 app and ending up with a package reference to a pre-2.0 `System.*` pacakage, it is removed from the publish output.\r\n\r\nThe same does not happen for .NET Standard libraries, at least for those that shipped \"outside\" of NETStandard.Library 1.6.0/1.6.1, but are considered inbox in NETStandard.Library 2.0.0+ for netstandard2.0.\r\nWhile this is probably fine for <2.0, performing a similar trimming could be beneficial for for >= 2.0 libraries, since all platforms that can load netstandard 2.0 libraries should already carry the necessary assemblies (or the app has binding redirects) to load <= netstandard2.0 libraries.\r\n\r\nThe scenarios this affects are plugin architectures that try to load assemblies from \"plugin\" folders that aren't known during build time. This also includes MSBuild tasks.\r\nThe danger here is logic like \"for all DLLs..\" in code or in VS, referencing all published assemblies via the UI, which results in Reference+HintPath items that aren't trimmed (!) and end up in the build/publish output.\r\n\r\nExample:\r\n1. Create a .NET Standard 2.0 library\r\n2. Add a package reference to `System.Text.RegularExpressions` (alt: `Newtonsoft.Json` 10.0.3)\r\n3. `dotnet publish`\r\n4. see `System.Text.RegularExpressions.dll` in publish output.\r\n\r\nQuestion: Is there a benefit in leaving this as it is or would it be better to trim the these packages for netstandard2.0 publish? "},{"Id":"7096405183","Type":"IssuesEvent","CreatedAt":"2018-01-14T06:32:18","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1823","RelatedDescription":"Closed issue \"[tools] Pack experience for portable app\" (#1823) at dotnet/sdk","RelatedBody":"The Producer adds a property in portable app project file to indicate this project is a tool\r\nRun pack target (`dotnet msbuild /t:pack` or `dotnet pack`)\r\nThere is a tool nupkg with correct layout and setting file and ready to publish to NuGet and use"},{"Id":"7094114111","Type":"PullRequestEvent","CreatedAt":"2018-01-12T23:55:30","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1843","RelatedDescription":"Merged pull request \"Pack for tools\" (#1843) at dotnet/sdk","RelatedBody":"Add PackAsTool in csproj, and run dotnet pack. The result will be in\r\ntool format nupkg"},{"Id":"7093414375","Type":"IssuesEvent","CreatedAt":"2018-01-12T20:24:11","Actor":"rynowak","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1854","RelatedDescription":"Opened issue \"ResolvePackageFileConflicts throwing when referencing System.Diagnostics.DiagnosticSource by assembly path\" (#1854) at dotnet/sdk","RelatedBody":"This is new failure that just started happening in some Razor tests for our MSBuild functionality. This started failing for us `2.2.0-preview1-007927` - this was working before in `2.2.0-preview1-007866`.\r\n\r\nI've attached a repro project, which is doing some esoteric things because this is part of our tests for our MSBuild targets 😆. I think the probably might not be anything wierd that we're doing though.\r\n\r\nThe project file looks like this:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"'$(BinariesRoot)'==''\">\r\n    <!-- In test scenarios $(BinariesRoot) is defined in a generated Directory.Build.props file -->\r\n    <ProjectReference Include=\"..\\..\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj\"/>\r\n    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AspNetCore.Razor.Runtime\\Microsoft.AspNetCore.Razor.Runtime.csproj\"/>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(BinariesRoot)'!=''\">\r\n    <Reference Include=\"$(BinariesRoot)\\System.Diagnostics.DiagnosticSource.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Html.Abstractions.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.Runtime.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.Test.MvcShim.dll\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nRemoving `<Reference Include=\"$(BinariesRoot)\\System.Diagnostics.DiagnosticSource.dll\"/>` seems to fix it.\r\n\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.22.57775 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj...\r\n  Generating MSBuild file C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\obj\\SimpleMvc.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\obj\\SimpleMvc.csproj.nuget.g.targets.\r\n  Restore completed in 273.82 ms for C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj.\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: The \"ResolvePackageFileConflicts\" task failed unexpectedly. [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: System.ArgumentNullException: Value cannot be null. [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: Parameter name: key [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.FindEntry(TKey key) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverrideResolver`1.Resolve(TConflictItem item1, TConflictItem item2) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflict(TConflictItem item1, TConflictItem item2) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflicts(IEnumerable`1 conflictItems, Func`2 getItemKey, Action`1 foundConflict, Boolean commitWinner, Action`1 unresolvedConflict) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore()[C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() in E:\\A\\_work\\24\\s\\src\\Build\\BackEnd\\TaskExecutionHost\\TaskExecutionHost.cs:line 631 [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__25.MoveNext() in E:\\A\\_work\\24\\s\\src\\Build\\BackEnd\\Components\\RequestBuilder\\TaskBuilder.cs:line 787 [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\n```\r\n\r\n\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-007927)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007927\r\n Commit SHA-1 hash:  a212d5a017\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n[Repro.zip](https://github.com/dotnet/sdk/files/1627368/Repro.zip)\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"952185961085067266","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/kXZpzdtOqA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":57,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":64,"RawContent":null},{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-01-16T05:30:20.0123318Z","RunDurationInMilliseconds":8038}