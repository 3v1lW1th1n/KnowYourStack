{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null},{"Title":"F# and .NET Core Roadmap Update","PublishedOn":"2017-08-14T00:00:00","CommentsCount":58,"FacebookCount":0,"Summary":"Now that .NET Core 2.0 has been released, we wanted to take some time to talk about F# and .NET Core. F# and .NET Core 1.0 F# has been supported on .NET Core and .NET Standard since their 1.0 releases. In the months leading up to the release of .NET Core 1.0, Enrico Sada from... <a aria-label=\"read more about F# and .NET Core Roadmap Update\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6564921419","Type":"WatchEvent","CreatedAt":"2017-09-08T05:25:54","Actor":"jenniemanphonsy","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6543428196","Type":"ForkEvent","CreatedAt":"2017-09-02T22:28:07","Actor":"ZeroInfinite","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/ZeroInfinite/home-1","RelatedDescription":"Forked dotnet/home to ZeroInfinite/home-1","RelatedBody":null},{"Id":"6542231534","Type":"WatchEvent","CreatedAt":"2017-09-02T02:40:26","Actor":"babtsoualiaksandr","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6532786398","Type":"WatchEvent","CreatedAt":"2017-08-31T01:32:12","Actor":"billpratt","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6530853179","Type":"IssueCommentEvent","CreatedAt":"2017-08-30T16:28:40","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-326045444","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@brentschmaltz I'll send you an email with who to contact."},{"Id":"6530532162","Type":"IssueCommentEvent","CreatedAt":"2017-08-30T15:24:07","Actor":"brentschmaltz","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-326025900","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon we do not.  Can you point us to instructions."},{"Id":"6519322260","Type":"ForkEvent","CreatedAt":"2017-08-28T12:18:48","Actor":"mazong1123","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/mazong1123/home","RelatedDescription":"Forked dotnet/home to mazong1123/home","RelatedBody":null},{"Id":"6517294485","Type":"WatchEvent","CreatedAt":"2017-08-27T21:20:16","Actor":"devdivision","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6515896969","Type":"PushEvent","CreatedAt":"2017-08-26T22:20:19","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/home/compare/a180fed6a0ac6524d36997d505f5f18edfa7c7c9...c37f5bcba25e1389d6683587458c97e6545bd747","RelatedDescription":"Pushed to refs/heads/master at dotnet/home","RelatedBody":null},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896523","Type":"PushEvent","CreatedAt":"2017-08-26T22:19:50","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/home/compare/9ba029eb55a7a9a599829445da338d3b624a4222...a180fed6a0ac6524d36997d505f5f18edfa7c7c9","RelatedDescription":"Pushed to refs/heads/master at dotnet/home","RelatedBody":null},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6508801939","Type":"IssueCommentEvent","CreatedAt":"2017-08-24T18:13:58","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-324714399","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@brentschmaltz - does your team upload symbols for the IdentityModel packages?"},{"Id":"6494201609","Type":"IssueCommentEvent","CreatedAt":"2017-08-21T20:41:20","Actor":"JaredShaver","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323847415","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon It looks like the symbols for ASP.NET Core 2 release are loading now, thank you for getting it sorted out.\r\n\r\nIdentityModel symbols are still missing though, I'm guessing that is another team's responsibility...  Examples:\r\n- Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\r\n- Microsoft.IdentityModel.Tokens.dll\r\n- System.IdentityModel.Tokens.Jwt.dll\r\n- Microsoft.IdentityModel.Logging.dll\r\n- Microsoft.IdentityModel.Protocols.dll"},{"Id":"6487140317","Type":"WatchEvent","CreatedAt":"2017-08-20T03:52:33","Actor":"kopelli","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6483200800","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T19:58:45","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/86#issuecomment-323447413","RelatedDescription":"Commented on issue \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":"\r\n@gep13,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6482114918","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T17:12:14","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323409836","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"Indeed, it appears there might be a problem with the uploaded symbols - we are investigating."},{"Id":"6480034319","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T12:23:43","Actor":"tiandian","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323339493","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"I tried with the asp.net core 2.1.0-preview1-26636, but it doesn't work, no symbols found."},{"Id":"6477914043","Type":"WatchEvent","CreatedAt":"2017-08-18T05:58:15","Actor":"freeradius-xx","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6470627673","Type":"IssueCommentEvent","CreatedAt":"2017-08-17T09:29:43","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/85#issuecomment-323018168","RelatedDescription":"Commented on issue \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"__@stefanov-stefan__, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\r\n<br />_Thanks, .NET Foundation Pull Request Bot_"},{"Id":"6470589805","Type":"IssueCommentEvent","CreatedAt":"2017-08-17T09:24:17","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/85#issuecomment-323016919","RelatedDescription":"Commented on issue \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"\r\n@__stefanov-stefan__,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\n\nIt will cover your contributions to all .NET Foundation-managed open source projects.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6466917727","Type":"IssueCommentEvent","CreatedAt":"2017-08-16T20:30:37","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322889774","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver - I believe the ASP.NET/EF Core 2.0.0 symbols should be up now. Please give it a try and let us know. (Please note that source links were not enabled in this build, that's something that's still in our plans for future releases.)"},{"Id":"6466893027","Type":"WatchEvent","CreatedAt":"2017-08-16T20:27:21","Actor":"eallage","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6449908252","Type":"IssueCommentEvent","CreatedAt":"2017-08-14T18:02:06","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322263094","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver the symbols for ASP.NET/EF Core 2.0.0 are being processed, I'll try to update this thread when they're ready."},{"Id":"6449660432","Type":"IssueCommentEvent","CreatedAt":"2017-08-14T16:59:15","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322246639","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver we're working on it today for ASP.NET Core 2, sorry for the delay!"},{"Id":"6443210301","Type":"IssueCommentEvent","CreatedAt":"2017-08-11T20:33:14","Actor":"JaredShaver","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-321912151","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon will the symbols be published for ASP.NET Core 2 by the time it releases?  I was unable to download them from the Microsoft symbol server or the http://srv.symbolsource.org/pdb/Public or http://srv.symbolsource.org/pdb/MyGet servers using ASP.NET Core 2 preview 2.  Being able to step into the source was invaluable when implementing OpenID Connect OWIN middleware and I was hoping I could do the same with ASP.NET Core when implementing the new services/middleware pipeline."},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"},{"Id":"6404140964","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:08:17","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/83","RelatedDescription":"Opened issue \"Modify CSP policy to allow embedding of youtube videos\" (#83) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding the ReactiveUI video.\r\n\r\nhttps://developers.google.com/web/fundamentals/security/csp/\r\n\r\n```\r\nchild-src lists the URLs for workers and embedded frame contents. For example: child-src https://youtube.com would enable embedding videos from YouTube but not from other origins. Use this in place of the deprecated frame-src directive.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6577489981","Type":"WatchEvent","CreatedAt":"2017-09-12T01:16:42","Actor":"mishrsud","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6573613380","Type":"WatchEvent","CreatedAt":"2017-09-11T09:27:49","Actor":"rmunn","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6571466603","Type":"WatchEvent","CreatedAt":"2017-09-10T14:47:49","Actor":"hszczepanski","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6564889310","Type":"WatchEvent","CreatedAt":"2017-09-08T05:09:28","Actor":"jenniemanphonsy","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6555647773","Type":"WatchEvent","CreatedAt":"2017-09-06T11:09:35","Actor":"naiwenchi","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6553539545","Type":"WatchEvent","CreatedAt":"2017-09-05T23:15:42","Actor":"mrshanahan","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6549938970","Type":"WatchEvent","CreatedAt":"2017-09-05T09:04:22","Actor":"aleksd","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6548382819","Type":"WatchEvent","CreatedAt":"2017-09-04T21:21:41","Actor":"artur-s","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546827410","Type":"WatchEvent","CreatedAt":"2017-09-04T12:09:50","Actor":"bitnot","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546637777","Type":"WatchEvent","CreatedAt":"2017-09-04T11:14:13","Actor":"exoteric","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546520344","Type":"WatchEvent","CreatedAt":"2017-09-04T10:40:20","Actor":"goh-chunlin","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546261556","Type":"WatchEvent","CreatedAt":"2017-09-04T09:33:22","Actor":"mwolicki","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546221110","Type":"WatchEvent","CreatedAt":"2017-09-04T09:23:28","Actor":"rizamarhaban","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6545815520","Type":"WatchEvent","CreatedAt":"2017-09-04T07:35:41","Actor":"DudePascalou","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6544960980","Type":"WatchEvent","CreatedAt":"2017-09-03T23:42:08","Actor":"jingeno","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6543650373","Type":"WatchEvent","CreatedAt":"2017-09-03T03:03:58","Actor":"bej-syan","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"},{"Id":"6541854262","Type":"WatchEvent","CreatedAt":"2017-09-01T22:19:59","Actor":"Doomjunky","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6540381488","Type":"WatchEvent","CreatedAt":"2017-09-01T15:13:24","Actor":"aleksejkozin","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6539447659","Type":"WatchEvent","CreatedAt":"2017-09-01T11:16:54","Actor":"SmithsonianDSP","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6538252963","Type":"WatchEvent","CreatedAt":"2017-09-01T04:42:53","Actor":"wrummler","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537795842","Type":"WatchEvent","CreatedAt":"2017-09-01T01:00:15","Actor":"Valyansky","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537750611","Type":"WatchEvent","CreatedAt":"2017-09-01T00:38:31","Actor":"arleypadua","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537728265","Type":"WatchEvent","CreatedAt":"2017-09-01T00:27:54","Actor":"eknowledger","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537297844","Type":"WatchEvent","CreatedAt":"2017-08-31T21:46:11","Actor":"MathieuDSTP","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6536807371","Type":"WatchEvent","CreatedAt":"2017-08-31T19:39:09","Actor":"tpayne84","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6536471484","Type":"WatchEvent","CreatedAt":"2017-08-31T18:16:56","Actor":"crowchirp","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6535562842","Type":"WatchEvent","CreatedAt":"2017-08-31T15:00:05","Actor":"vai","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6535318229","Type":"WatchEvent","CreatedAt":"2017-08-31T14:14:58","Actor":"rarrarrarr","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6535130606","Type":"ForkEvent","CreatedAt":"2017-08-31T13:37:56","Actor":"07101994","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/07101994/announcements","RelatedDescription":"Forked dotnet/announcements to 07101994/announcements","RelatedBody":null}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6588730116","Type":"PushEvent","CreatedAt":"2017-09-14T05:25:18","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/1b91d128b514d67b43abdf863e46ce0ffce53eed...306c6654c6014a7fc58936203e096833031d3dd2","RelatedDescription":"Pushed to refs/heads/release/2.0.0 at dotnet/coreclr","RelatedBody":null},{"Id":"6588730064","Type":"PullRequestEvent","CreatedAt":"2017-09-14T05:25:16","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13869","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to servicing-25712-01, servicing-25708-01, respectively (release/2.0.0)\" (#13869) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6588728548","Type":"PushEvent","CreatedAt":"2017-09-14T05:24:35","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/24393ab62157caae766d2e5e98fc9414c089fe16...bd09b86176b3af59c1cbb6b7535c3a2cae36a9a1","RelatedDescription":"Pushed to refs/heads/release/1.1.0 at dotnet/coreclr","RelatedBody":null},{"Id":"6588728480","Type":"PullRequestEvent","CreatedAt":"2017-09-14T05:24:33","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13902","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to servicing-25713-01, servicing-25713-01, respectively (release/1.1.0)\" (#13902) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6588727854","Type":"PushEvent","CreatedAt":"2017-09-14T05:24:17","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/59aa392e5b40845c13c6789c04a34a2ec0006199...7187a02f479187e8ea6692445dbf3649a4f124c0","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588727569","Type":"PullRequestEvent","CreatedAt":"2017-09-14T05:24:09","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13934","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, PgoData to prerelease-02014-02, preview1-25714-01, master-20170913-0045, respectively (master)\" (#13934) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6588724850","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:22:53","Actor":"gregg-miskelly","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13105#issuecomment-329375035","RelatedDescription":"Commented on issue \"Reduce allocations when async methods yield\" (#13105) at dotnet/coreclr","RelatedBody":"@r-ramesh could you take a look since I keep failing to get to this?"},{"Id":"6588718214","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:19:54","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13105#issuecomment-329374550","RelatedDescription":"Commented on issue \"Reduce allocations when async methods yield\" (#13105) at dotnet/coreclr","RelatedBody":"@gregg-miskelly, have you been able to double-check this?"},{"Id":"6588678383","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:00:47","Actor":"wecing","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13891#issuecomment-329372096","RelatedDescription":"Commented on issue \"implement __assume for non-windows builds\" (#13891) at dotnet/coreclr","RelatedBody":"For LTO, I tried\r\n```\r\nif (CLR_CMAKE_PLATFORM_UNIX)\r\n  # set(INTERPROCEDURAL_OPTIMIZATION ON)\r\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -flto\")\r\n  add_compile_options(-flto)\r\n```\r\n\r\nBut got:\r\n\r\n```\r\n[  1%] Building CXX object src/nativeresources/CMakeFiles/nativeresourcestring.dir/resourcestring.cpp.o\r\nCMakeFiles/System.Globalization.Native.dir/calendarData.cpp.o: file not recognized: File format not recognized\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\n> Does implementing this impact the generated code anywhere else?\r\n\r\nNot any that I am aware of, but I only checked a few places."},{"Id":"6588622777","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:33:13","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12877#issuecomment-329368384","RelatedDescription":"Commented on issue \"JIT: \"is\" keyword generates boxing in generic function\" (#12877) at dotnet/coreclr","RelatedBody":"Proposal https://github.com/dotnet/csharplang/issues/905"},{"Id":"6588605953","Type":"IssuesEvent","CreatedAt":"2017-09-14T04:24:53","Actor":"cscer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13969","RelatedDescription":"Opened issue \"can't convert to object  \" as \"\" (#13969) at dotnet/coreclr","RelatedBody":"![image](https://user-images.githubusercontent.com/6744243/30411134-c28103ae-9941-11e7-8964-92867cfadf3d.png)\r\n\r\nTraget to NetFramework4.6  it's works\r\n\r\nbut Target to netcoreapp2.0, \r\nUser u=userEntity as User;  u is null;\r\nwatch the variable u in vs ,  it throw a FileNotFoundException,\r\nbut the file location from exception message is exist. and The assembly file is which the \"User\" type  definition.\r\n\r\nwhy? \r\n"},{"Id":"6588560748","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:02:14","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13083#issuecomment-329364259","RelatedDescription":"Commented on issue \"Lock convoy on TimerQueueTimer\" (#13083) at dotnet/coreclr","RelatedBody":"@maximburyak, why was it necessary to increase the min thread count? Typically, this is only necessary if there is a lot of blocking work happening on thread pool threads. If your timer callbacks don't block, the default thread count should give better throughput."},{"Id":"6588533026","Type":"PushEvent","CreatedAt":"2017-09-14T03:50:13","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/1376d3b190346ea2775f7d850389d0c99f62553c...59aa392e5b40845c13c6789c04a34a2ec0006199","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588532752","Type":"PullRequestEvent","CreatedAt":"2017-09-14T03:50:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13963","RelatedDescription":"Merged pull request \"Replace JitHelpers.UnsafeCast with Unsafe.As\" (#13963) at dotnet/coreclr","RelatedBody":"Both methods do the same, but the latter one is the official public name for the functionality"},{"Id":"6588532125","Type":"PushEvent","CreatedAt":"2017-09-14T03:49:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/9efc256fd1878207c37e9bcf7572b0437c1bf91e...1376d3b190346ea2775f7d850389d0c99f62553c","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588531816","Type":"PullRequestEvent","CreatedAt":"2017-09-14T03:49:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13961","RelatedDescription":"Merged pull request \"Undo more JIT layout workarounds\" (#13961) at dotnet/coreclr","RelatedBody":"Remove some `goto`s that were added  to work around undesirable jit\r\nlayout (#9692, fixed in #13314) and epilog factoring (improved in\r\n #13792 and #13903), which are no longer needed.\r\n\r\nResolves #13466."},{"Id":"6588531810","Type":"IssuesEvent","CreatedAt":"2017-09-14T03:49:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13466","RelatedDescription":"Closed issue \"Undo \"goto return\" works-around\" (#13466) at dotnet/coreclr","RelatedBody":"Issue to track following up on feedback at https://github.com/dotnet/coreclr/pull/13314#issuecomment-321586182 -- now that the JIT tries to pull early returns out of loops, find the code where `goto` has been added to work around its prior inability to do so, revert, and make sure the JIT gives the desired layout."},{"Id":"6588497436","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:34:37","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13815#issuecomment-329360253","RelatedDescription":"Commented on issue \"New jit intrinsic support\" (#13815) at dotnet/coreclr","RelatedBody":">> Jit intrinsics are always optional to expand   \r\n>\r\n> This will not work for the new SIMD intrinsics. We can adjust it once we get there.\r\n\r\n@AndyAyersMS @jkotas Could you please explain this a little bit more? I am using the new JIT intrinsic recognizer to implement Intel hardware intrinsics. "},{"Id":"6588470204","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:22:41","Actor":"jamesqo","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13892#issuecomment-329358760","RelatedDescription":"Commented on issue \"Make order of elements consistent in MemberInfoCache.Insert \" (#13892) at dotnet/coreclr","RelatedBody":"@kevingosse \r\n\r\n> Agreed. To be honest, I'm waiting for the new System.HashCode (dotnet/corefx#14354) before submitting a PR to fix Attribute.GetHashCode.\r\n\r\nDon't wait on it. It will take a while before the new API can be implemented, since we are waiting on a volunteer to benchmark various hash algos, and then maintainers will have to come to a consensus on which one is best based on the data. In the meantime, you can use the `HashHelpers` class [here][1] instead.\r\n\r\n[1]: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Numerics/Hashing/HashHelpers.cs"},{"Id":"6588466955","Type":"PushEvent","CreatedAt":"2017-09-14T03:21:17","Actor":"JosephTremoulet","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/c96a8272bb8fad888156ca9194e8280e6f742fdf...9efc256fd1878207c37e9bcf7572b0437c1bf91e","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588466616","Type":"IssuesEvent","CreatedAt":"2017-09-14T03:21:09","Actor":"JosephTremoulet","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13919","RelatedDescription":"Closed issue \"F# compiler is broken with latest CoreCLR runtime\" (#13919) at dotnet/coreclr","RelatedBody":"Trying to take the latest 2.1 runtime into dotnet/cli is currently blocked because the F# compiler is running into what appears to be a JIT issue.\r\n\r\nSee https://github.com/dotnet/cli/pull/7606#issuecomment-328694723 for my analysis of debugging the issue.\r\n\r\nTo repro:\r\n\r\n1. Unzip [JITBug.zip](https://github.com/dotnet/coreclr/files/1296754/JITBug.zip) to a folder.\r\n1. Set your CWD into the `JITBug` folder you extracted\r\n1. Using the [latest shared runtime](https://dotnetcli.blob.core.windows.net/dotnet/Runtime/master/dotnet-runtime-latest-win-x64.zip) execute:\r\n`dotnet.exe fsc.exe -o:obj\\Debug\\netcoreapp2.0\\FSharpTest.dll -g --debug:portable --noframework --optimize- -r:refs\\FSharp.Core.dll -r:refs\\System.Runtime.dll --target:exe --warn:3 --fullpaths --flaterrors --highentropyva- --targetprofile:netcore --simpleresolution --nocopyfsharpcore .NETCoreApp,Version=v2.0.AssemblyAttributes.fs Program.fs`\r\n\r\nYou will get an error like:\r\n\r\n```\r\nFailFast: Unknown exception seen in compiler: System.InvalidCastException: Unable to cast object of type 'Ident' to type 'LongIdentWithDots'.\r\n   at Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.UnboxGeneric[T](Object source)\r\n   at Microsoft.FSharp.Compiler.Parser._fsyacc_reductions@14808-1158.Invoke(IParseState parseState)\r\n   at Internal.Utilities.Text.Parsing.Implementation.interpret[tok](Tables`1 tables, FSharpFunc`2 lexer, LexBuffer`1 lexbuf, Int32 initialState)\r\n   at Microsoft.FSharp.Compiler.CompileOps.ParseInput(FSharpFunc`2 lexer, ErrorLogger errorLogger, LexBuffer`1 lexbuf, FSharpOption`1 defaultNamespace, String filename, Tuple`2 isLastCompiland)\r\n   at Microsoft.FSharp.Compiler.CompileOps.ParseOneInputLexbuf@3575.Invoke(LexBuffer`1 lexbuf)\r\n   at Microsoft.FSharp.Compiler.Lexhelp.reusingLexbufForParsing[a](LexBuffer`1 lexbuf, FSharpFunc`2 f)\r\n```\r\n\r\n/cc @jkotas @briansull "},{"Id":"6588466615","Type":"PullRequestEvent","CreatedAt":"2017-09-14T03:21:09","Actor":"JosephTremoulet","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13957","RelatedDescription":"Merged pull request \"Renumber blocks before computing loop nest\" (#13957) at dotnet/coreclr","RelatedBody":"The loop nest computation expects to be able to test block numbers for\r\nlexical inclusion, so do a renumbering pass first if blocks have been\r\nmoved.\r\n\r\nFixes #13919."},{"Id":"6588465901","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:20:49","Actor":"JosephTremoulet","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13957#issuecomment-329358494","RelatedDescription":"Commented on issue \"Renumber blocks before computing loop nest\" (#13957) at dotnet/coreclr","RelatedBody":"That arm leg is still failing in the same way in other PRs, and this change fixes an issue that's holding up cli CI, so I'm going to go ahead and merge. "},{"Id":"6588463873","Type":"IssuesEvent","CreatedAt":"2017-09-14T03:19:55","Actor":"Jamesxql","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13935","RelatedDescription":"Closed issue \"sos DumpLog failed on Ubuntu 16.04.3 LTS\" (#13935) at dotnet/coreclr","RelatedBody":"I've used lldb-3.6 to attach a asp.net core application on ubuntu 16.04.3-x64, and I load the sos plugin with the below \r\n```sh\r\nplugin load /usr/share/dotnet/shared/Microsoft.NETCore.App/1.1.2/libsosplugin.so\r\nsetclrpath /usr/share/dotnet/shared/Microsoft.NETCore.App/1.1.2\r\n```\r\nThen I use `dumplog` command to generate stress log, but I receive this error: \r\n```sh\r\nAttempting to dump Stress log to file 'StressLog.txt'\r\n----- No thread logs in the image: The stress log was probably not initialized correctly. -----\r\nNo Stress log in the image, no file written\r\nDumpLog  failed\r\n```\r\n\r\nDid I do something wrong?"},{"Id":"6588463866","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:19:55","Actor":"Jamesxql","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13935#issuecomment-329358382","RelatedDescription":"Commented on issue \"sos DumpLog failed on Ubuntu 16.04.3 LTS\" (#13935) at dotnet/coreclr","RelatedBody":"@janvorli Thank you very much!"},{"Id":"6588400630","Type":"PushEvent","CreatedAt":"2017-09-14T02:53:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/8214509562a3686bcf878d4e54038ca883359bfc...c96a8272bb8fad888156ca9194e8280e6f742fdf","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588400220","Type":"PullRequestEvent","CreatedAt":"2017-09-14T02:53:09","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13962","RelatedDescription":"Merged pull request \"Make Array.Reverse faster\" (#13962) at dotnet/coreclr","RelatedBody":"Array.Reverse showed up as hot method in profiles of real workloads (e.g. it is called from Json.NET frequently via List.Reverse)"},{"Id":"6588399305","Type":"PushEvent","CreatedAt":"2017-09-14T02:52:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/929a45749a1dfabe8cf232398d8611ca6766135b...8214509562a3686bcf878d4e54038ca883359bfc","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6588398900","Type":"PullRequestEvent","CreatedAt":"2017-09-14T02:52:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13966","RelatedDescription":"Merged pull request \"Enable end to end Alpine build\" (#13966) at dotnet/coreclr","RelatedBody":"This change enables full end to end build of coreclr including\r\nmanaged code on Alpine Linux."},{"Id":"6588368282","Type":"IssuesEvent","CreatedAt":"2017-09-14T02:39:59","Actor":"cscer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13968","RelatedDescription":"Opened issue \"cn-win7 ,error on load System.Private.CoreLib\" (#13968) at dotnet/coreclr","RelatedBody":"Assert Failure\r\nExpression: [Recursive resource lookup bug]\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib. This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names. Resource name: Argument_AbsolutePathRequired\r\nStack Trace:\r\nat System.SR.InternalGetResourceString(String key)\r\nat System.SR.GetResourceString(String resourceKey, String defaultString)\r\nat System.Reflection.Assembly.LoadFile(String path)\r\n\r\nwhere is the file System.Private.CoreLib.resource"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6588285940","Type":"IssuesEvent","CreatedAt":"2017-09-14T02:05:46","Actor":"dazhuangtage","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7648","RelatedDescription":"Closed issue \"Window Web Server 2008R2 Failed to install.Net core： Error 0x80070001\" (#7648) at dotnet/cli","RelatedBody":"'m going to install.Net core 2 in the production environment, and download the address: https://download.microsoft.com/download/B/1/D/B1D7D5BF-3920-47AA-94BD-7A6E48822F18/DotNetCore.2.0.0-WindowsHosting.exe\r\nHowever, an error has occurred in the installation.\r\nOddly enough, not all of the machines will appear.\r\nThe server patch has been updated to date.\r\nThe following is a summary of the installation of.Net core error:\r\n`[09D4:0B7C][2017-09-14T09:32:09]e000: Error 0x80070001: Process returned error: 0x1\r\n[09D4:0B7C][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to execute EXE package.\r\n[048C:0A50][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to configure per-machine EXE package.\r\n[048C:0A50][2017-09-14T09:32:09]i319: Applied execute package: DotNetRedistLts_x64, result: 0x80070001, restart: None\r\n[048C:0A50][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to execute EXE package.\r\n[09D4:0B7C][2017-09-14T09:32:09]i351: Removing cached package: DotNetRedistLts_x64, from path: C:\\ProgramData\\Package Cache\\D5DADBDFE60663D4C9553432C98AFF6B7A61D622\\\r\n[09D4:0B7C][2017-09-14T09:32:09]i372: Session end, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{1e78535e-89f7-4573-8995-0aabe01c1376}, resume: ARP, restart: None, disable resume: No`\r\nFrom the current point of view, this probability is still great, I would like to ask how to solve this problem\r\n\r\n"},{"Id":"6588232467","Type":"IssuesEvent","CreatedAt":"2017-09-14T01:43:34","Actor":"dazhuangtage","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7648","RelatedDescription":"Opened issue \"Window Web Server 2008R2 Failed to install.Net core： Error 0x80070001\" (#7648) at dotnet/cli","RelatedBody":"'m going to install.Net core 2 in the production environment, and download the address: https://download.microsoft.com/download/B/1/D/B1D7D5BF-3920-47AA-94BD-7A6E48822F18/DotNetCore.2.0.0-WindowsHosting.exe\r\nHowever, an error has occurred in the installation.\r\nOddly enough, not all of the machines will appear.\r\nThe server patch has been updated to date.\r\nThe following is a summary of the installation of.Net core error:\r\n`[09D4:0B7C][2017-09-14T09:32:09]e000: Error 0x80070001: Process returned error: 0x1\r\n[09D4:0B7C][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to execute EXE package.\r\n[048C:0A50][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to configure per-machine EXE package.\r\n[048C:0A50][2017-09-14T09:32:09]i319: Applied execute package: DotNetRedistLts_x64, result: 0x80070001, restart: None\r\n[048C:0A50][2017-09-14T09:32:09]e000: Error 0x80070001: Failed to execute EXE package.\r\n[09D4:0B7C][2017-09-14T09:32:09]i351: Removing cached package: DotNetRedistLts_x64, from path: C:\\ProgramData\\Package Cache\\D5DADBDFE60663D4C9553432C98AFF6B7A61D622\\\r\n[09D4:0B7C][2017-09-14T09:32:09]i372: Session end, registration key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{1e78535e-89f7-4573-8995-0aabe01c1376}, resume: ARP, restart: None, disable resume: No`\r\nFrom the current point of view, this probability is still great, I would like to ask how to solve this problem\r\n\r\n"},{"Id":"6588058748","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T00:27:58","Actor":"dnfclas","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7647#issuecomment-329334299","RelatedDescription":"Commented on issue \"Insert NuGet Build 4.4.0-preview3-4475 into cli\" (#7647) at dotnet/cli","RelatedBody":"\r\nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6588058556","Type":"PushEvent","CreatedAt":"2017-09-14T00:27:53","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/cli/compare/fadaf4f96173a28964e1f651b95808c33b3bc067...5ce59a61792548b1e7119a0b79a4a0b552a662a0","RelatedDescription":"Pushed to refs/heads/nuget-insertbuild4475 at dotnet/cli","RelatedBody":null},{"Id":"6588058548","Type":"PullRequestEvent","CreatedAt":"2017-09-14T00:27:53","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7647","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.4.0-preview3-4475 into cli\" (#7647) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.4.0-preview3-4475 into cli release/2.0-vs branch"},{"Id":"6588058511","Type":"CreateEvent","CreatedAt":"2017-09-14T00:27:51","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/cli/tree/nuget-insertbuild4475","RelatedDescription":"Created branch \"nuget-insertbuild4475\" at dotnet/cli","RelatedBody":null},{"Id":"6588027122","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:14:02","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7588","RelatedDescription":"Closed issue \"dotnet-install script causes shell to exit\" (#7588) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Create an Ubuntu 16.04 VM in Azure\r\n1. Run the following:\r\n  * `wget https://dot.net/v1/dotnet-install.sh`\r\n  * `chmod 700 dotnet-install.sh`\r\n  * `source dotnet-install.sh --shared-runtime --version 1.1.2`\r\n\r\n## Expected  behavior\r\n\r\nA message is displayed about missing dependencies (libuwind8 etc)\r\n\r\n## Actual behavior\r\n\r\nIt just exits my shell. Unless its a subshell, this results in my whole terminal window just closing.\r\n\r\n## Workaround\r\n\r\nInstall all the dependencies first, with `sudo apt-get install curl libunwind8 gettext apt-transport-https`\r\n\r\n\r\n\r\n\r\n"},{"Id":"6588027117","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T00:14:01","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7588#issuecomment-329332453","RelatedDescription":"Commented on issue \"dotnet-install script causes shell to exit\" (#7588) at dotnet/cli","RelatedBody":"@JohnRusk \r\nI could not reproduce the failure. See attached file for the complete session text capture.\r\n[SessionTestCapture.txt](https://github.com/dotnet/cli/files/1301283/SessionTestCapture.txt)\r\n"},{"Id":"6588003443","Type":"PullRequestEvent","CreatedAt":"2017-09-14T00:03:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7646","RelatedDescription":"Opened pull request \"Bump branding to 1.1.4\" (#7646) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli @leecow \r\n"},{"Id":"6587989898","Type":"PushEvent","CreatedAt":"2017-09-13T23:58:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/cli/compare/b925a30be2b7430e9284ed4a06189b49fe669bbd...1214e572425f6395c903b0ef432785e082d10665","RelatedDescription":"Pushed to refs/heads/master at dotnet/cli","RelatedBody":null},{"Id":"6587989829","Type":"DeleteEvent","CreatedAt":"2017-09-13T23:58:37","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Deleted branch \"merges/release/2.0.0-to-master-20170913-070028\" at dotnet/cli","RelatedBody":null},{"Id":"6587989720","Type":"PullRequestEvent","CreatedAt":"2017-09-13T23:58:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7639","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to master\" (#7639) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20170913-070028\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20170913-070028 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6587989166","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:58:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7645#issuecomment-329330236","RelatedDescription":"Commented on issue \"Removing Microsoft.DotNet.Archive from the CLI\" (#7645) at dotnet/cli","RelatedBody":"@dotnet-bot Test CentOS7.1 x64 Debug Build"},{"Id":"6587988786","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:58:09","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7569#issuecomment-329330216","RelatedDescription":"Commented on issue \"Request, able to config the location of ~/.dotnet and ~/.templateengine\" (#7569) at dotnet/cli","RelatedBody":"@KathleenDollard "},{"Id":"6587985543","Type":"IssuesEvent","CreatedAt":"2017-09-13T23:56:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/7569","RelatedDescription":"Reopened issue \"Able to config the location of ~/.dotnet and ~/.templateengine\" (#7569) at dotnet/cli","RelatedBody":"Hi @livarcocc ,\r\n\r\nMay you can help me with this simple question. Is there anyway to re-locate the dotnet user profile folder (.dotnet)?\r\n\r\n\r\n\r\n\r\n"},{"Id":"6587850244","Type":"IssuesEvent","CreatedAt":"2017-09-13T23:03:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7644","RelatedDescription":"Closed issue \"Allow dotnet test to override values in runsettings files\" (#7644) at dotnet/cli","RelatedBody":"It would be great to be able to have the same functionality that MSTest/VSTest has when it comes ot overriding values at runtime in a runsettings file.\r\n\r\nExample of what you can do in normal .NET Framework is here:\r\n\r\nhttps://blogs.msdn.microsoft.com/devops/2015/09/04/supplying-run-time-parameters-to-tests/#comment-132205\r\n\r\nThat functionality in .NET Core would be great as it is a requirement to secure keys, secrets, passwords etc so they are not checked in to source control with integration test data that is required to run the integration tests in all environments including production."},{"Id":"6587850231","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:03:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7644#issuecomment-329321540","RelatedDescription":"Commented on issue \"Allow dotnet test to override values in runsettings files\" (#7644) at dotnet/cli","RelatedBody":"This issue was moved to Microsoft/vstest#1085"},{"Id":"6587842251","Type":"PullRequestEvent","CreatedAt":"2017-09-13T23:01:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7645","RelatedDescription":"Opened pull request \"Removing Microsoft.DotNet.Archive from the CLI\" (#7645) at dotnet/cli","RelatedBody":"Removing Microsoft.DotNet.Archive from the CLI and instead depending on a nupkg.\r\n\r\n@dotnet/dotnet-cli \r\n"},{"Id":"6587835566","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:58:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7639#issuecomment-329320661","RelatedDescription":"Commented on issue \"Merge release/2.0.0 to master\" (#7639) at dotnet/cli","RelatedBody":"@dotnet-bot Test Windows_NT x86 Debug Build"},{"Id":"6587788258","Type":"IssuesEvent","CreatedAt":"2017-09-13T22:42:00","Actor":"CreepyGnome","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7644","RelatedDescription":"Opened issue \"Allow dotnet test to override values in runsettings files\" (#7644) at dotnet/cli","RelatedBody":"It would be great to be able to have the same functionality that MSTest/VSTest has when it comes ot overriding values at runtime in a runsettings file.\r\n\r\nExample of what you can do in normal .NET Framework is here:\r\n\r\nhttps://blogs.msdn.microsoft.com/devops/2015/09/04/supplying-run-time-parameters-to-tests/#comment-132205\r\n\r\nThat functionality in .NET Core would be great as it is a requirement to secure keys, secrets, passwords etc so they are not checked in to source control with integration test data that is required to run the integration tests in all environments including production."},{"Id":"6587743606","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:27:25","Actor":"omajid","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7569#issuecomment-329314946","RelatedDescription":"Commented on issue \"dotnet user profile folder\" (#7569) at dotnet/cli","RelatedBody":"As a linux power user, I would love it if both `~/.dotnet` and `~/.templateengine` moved their data elsewhere. For cache, moving it to an appropriate cache location would be great."},{"Id":"6587741787","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:26:51","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138755951","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"Good trick!"},{"Id":"6587740166","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:26:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138755866","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"Maybe a better name, it is for not looking for the props in upper directory. Not the actual subject of artifact"},{"Id":"6587735564","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:24:53","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138755625","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"I swapped Package with \"PackageAllLinux\". So, if I do not remove it there, it will run the normal Package which I don't want, since I am reusing the package step.\r\n\r\nI am not sure the best practice here. In a sense Publish does not require package (do nothing). The \"normal\" target, state explicit `compile, package, publish` so no behavior change"},{"Id":"6587721572","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:20:38","Actor":"ariellourenco","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7569#issuecomment-329313561","RelatedDescription":"Commented on issue \"dotnet user profile folder\" (#7569) at dotnet/cli","RelatedBody":"Hi @wli3 ,\r\n\r\nThanks for your response. However, my understanding is this is an opportunity for improvement. We have a similar issue related to ~/.templateengine folder and people from template engine team are working on make it configurable. Please, see the link below and let me know your considerations.\r\n\r\n[https://github.com/dotnet/templating/issues/852](https://github.com/dotnet/templating/issues/852.)"},{"Id":"6587713678","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:18:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138754515","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"\"DownloadHostAndSharedFxArtifacts\" is actually required for Package. And init does not have it\r\n\r\n```xml\r\n<Target Name=\"Prepare\"\r\n          DependsOnTargets=\"Init;DownloadHostAndSharedFxArtifacts;RestoreSrcPackages;RestoreToolsPackages;IsolateArtifactsFromDirectoryBuildFiles;CreatePropsForNextStage\" />\r\n\r\n  <Target Name=\"Init\"\r\n          DependsOnTargets=\"PrintBuildInfo;\r\n                            SetTelemetryProfile;\r\n                            BuildDotnetCliBuildFramework;\r\n                            CheckPrereqs;\">\r\n```"},{"Id":"6587702588","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:05:25","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138752219","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"Does this mean that the Directory.Build.props file is included in the packages we generate?  Is that intentional?"},{"Id":"6587702565","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:01:48","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138751504","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"Why is Package removed here?"},{"Id":"6587702568","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:01:37","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138751475","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"Why the change from Init to Prepare?"},{"Id":"6587702563","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T21:59:02","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7615#discussion_r138750982","RelatedDescription":"Commented on pull request \"Use one build definition to produce all Linux distro specific packages\" (#7615) at dotnet/cli","RelatedBody":"\"Override\" is probably not the correct term here.  This is adding values to the `GeneratedInstallers` item, but it won't remove any existing values.  Are there any installers generated by the outer build?"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6588449512","Type":"WatchEvent","CreatedAt":"2017-09-14T03:13:35","Actor":"hacbq","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6588391660","Type":"WatchEvent","CreatedAt":"2017-09-14T02:49:41","Actor":"orf53975","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6588098595","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:45:49","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Opened issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app), but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6587834191","Type":"PushEvent","CreatedAt":"2017-09-13T22:58:13","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/standard/compare/fe9e738eeabadb6117ac398e4bc4338c67e9891a...b7f182415927d3b98445d043e1680c56b9d1f17c","RelatedDescription":"Pushed to refs/heads/release/2.0.0 at dotnet/standard","RelatedBody":null},{"Id":"6587834164","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:58:12","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Merged pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."},{"Id":"6587833243","Type":"PushEvent","CreatedAt":"2017-09-13T22:57:52","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/standard/compare/ca46b353af975e59dd04bca115579b145e07883d...fe9e738eeabadb6117ac398e4bc4338c67e9891a","RelatedDescription":"Pushed to refs/heads/release/2.0.0 at dotnet/standard","RelatedBody":null},{"Id":"6587833217","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:57:52","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/491","RelatedDescription":"Merged pull request \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nFixing Netstandard.Library package and reving up the package version to 2.0.1"},{"Id":"6587761582","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:32:54","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#discussion_r138757056","RelatedDescription":"Commented on pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"I see, I thought it was required, I can remove that change if we don't need it for marking this stable"},{"Id":"6587756399","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:31:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#discussion_r138756704","RelatedDescription":"Commented on pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"Not sure we want to update the baseline here but also don't know that it really affects anything because nothing consumes it. "},{"Id":"6587751287","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:29:42","Actor":"dnfclas","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#issuecomment-329315361","RelatedDescription":"Commented on issue \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"\r\n@joperezr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6587751094","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:29:38","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Opened pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."},{"Id":"6587678730","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:07:36","Actor":"dnfclas","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/491#issuecomment-329311058","RelatedDescription":"Commented on issue \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"\r\n@joperezr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6587678529","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:07:32","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/491","RelatedDescription":"Opened pull request \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nFixing Netstandard.Library package and reving up the package version to 2.0.1"},{"Id":"6587608777","Type":"ForkEvent","CreatedAt":"2017-09-13T21:48:23","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/joperezr/standard","RelatedDescription":"Forked dotnet/standard to joperezr/standard","RelatedBody":null},{"Id":"6586786059","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T18:34:32","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-329257771","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"@amasoumi NETStandard.Library.NETFramework is about .NET Framework and not UWP some of it might work but there will definitely be some issues with it as you start to use more of the types from netstandard.\r\n\r\n@daveh101 You will need to use a 6.0.0 version of the Microsoft.NETCore.UniversalWindowsPlatform package to be able to correctly consume .NET Standard 2.0 assets. It doesn't look like we have a preview of it on nuget yet but we do have a version on our dev build myget feed. https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.UniversalWindowsPlatform/6.0.0"},{"Id":"6586518247","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T17:34:14","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329241176","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"If you'd like to try the proposed solution you can use NETStandard.Library.2.1.0-preview1-25708-0 from https://www.myget.org/F/ericstj-issue-repros/api/v3/index.json.  If you'd like to minimize the change, you can just grab the targets out of there and overwrite the ones in your NS.L package.\r\n\r\nFor `.NETStandard.Library.NETFramework.targets` it'll get slightly better with https://github.com/dotnet/sdk/pull/1582.  We can additionally use the list technique there if we find that it helps."},{"Id":"6586501049","Type":"WatchEvent","CreatedAt":"2017-09-13T17:30:13","Actor":"roberthusak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6586490538","Type":"IssuesEvent","CreatedAt":"2017-09-13T17:27:50","Actor":"roberthusak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/490","RelatedDescription":"Opened issue \"Why does netstandard.dll reference particular platform assemblies with version 0.0.0.0?\" (#490) at dotnet/standard","RelatedBody":"Hi, when I open `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.0\\netstandard.dll` in ILSpy, I can see that all the assembly references it contains have version `0.0.0.0`:\r\n\r\n    mscorlib, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Data.Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n    ...\r\n\r\nAll the referenced assemblies are in the same folder, but have versions different from `0.0.0.0` (`mscorlib.dll 4.0.0.0`, `System.Data.Common.dll 4.2.0.0` etc.). The same situation is in the case of .NET 4.6.1 and its `netstandard.dll`.\r\n\r\nI would like to know what the reason for this is and what it is supposed to mean. Is it a signal to ignore the version of the referenced assemblies? Or is `netstandard.dll` a special case when one always needs to ignore the reference versions?\r\n\r\nWe're working on a custom compiler built upon Roslyn and currently we can't handle references to libraries compiled to `netstandard2.0` due to this anomaly. I'm looking for a way to handle it properly. Thanks."},{"Id":"6583868722","Type":"WatchEvent","CreatedAt":"2017-09-13T08:01:47","Actor":"HopeForToday","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6583716806","Type":"ForkEvent","CreatedAt":"2017-09-13T07:21:14","Actor":"CQLiangYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/CQLiangYao/standard","RelatedDescription":"Forked dotnet/standard to CQLiangYao/standard","RelatedBody":null},{"Id":"6583716103","Type":"WatchEvent","CreatedAt":"2017-09-13T07:21:04","Actor":"CQLiangYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6583384217","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T05:22:26","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329062268","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"I've now got the evaluation profile working in a state that let's me capture numbers across an entire solution. Here's the cost of these expressions if we were to do a solution-wide design-time build of the private customer solution that I've been testing with here: https://github.com/dotnet/project-system/issues/2789.\r\n\r\nThis is the top 6 expressions:\r\n\r\nFile|Line Number|Element|Expression|Inclusive (ms)|Exclusive (ms)\r\n---|---:|---|---|---:|---:\r\nNETStandard.Library.NETFramework.targets|3|_NETStandardLibraryNETFrameworkReference|`<_NETStandardLibraryNETFrameworkReference Include=\"$(MSBuildThisFileDirectory)\\ref\\*.dll\" Exclude=\"@(_NETStandardLibraryNETFrameworkReference-&gt;'$(MSBuildThisFileDirectory)\\ref\\%(FileName).dll'\"  />`|580.7|580.8\r\nNETStandard.Library.NETFramework.targets|6|_NETStandardLibraryNETFrameworkLib|`<_NETStandardLibraryNETFrameworkLib Include=\"$(MSBuildThisFileDirectory)\\lib\\*.dll\" Exclude=\"@(_NETStandardLibraryNETFrameworkLib-&gt;'$(MSBuildThisFileDirectory)\\ref\\%(FileName).dll'\"  />`|516.5|516.5\r\nNETStandard.Library.targets|7|Reference|`<Reference Condition=\"'$(_NetStandardLibraryRefPath)' != ''\" Include=\"$(_NetStandardLibraryRefPath)*.dll\" ><!-- Private = false to make these reference only --><Private>false</Private><!-- hide these from Assemblies view in Solution Explorer, they will be shown under packages --><Visible>false</Visible><Facade Condition=\"'%(FileName)' != 'netstandard'\">true</Facade><NuGetPackageId>NETStandard.Library</NuGetPackageId><NuGetPackageVersion>$(NETStandardLibraryPackageVersion)</NuGetPackageVersion></Reference>`|298.3|262.6\r\nMicrosoft.Managed.DesignTime.targets|46|ManagedXamlResourcesDirectory|`<ManagedXamlResourcesDirectory Condition=\"!Exists('$(ManagedXamlResourcesDirectory)')\" >$(MSBuildThisFileDirectory)$(LangName.Split('-')[0])</ManagedXamlResourcesDirectory>`|116.4|113.8\r\nMicrosoft.Common.CurrentVersion.targets|92|TargetPlatformSdkPath|`<TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\" >$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>`|53.7|52.8\r\nMicrosoft.Common.CurrentVersion.targets|83|FrameworkPathOverride|`<FrameworkPathOverride Condition=\"'$(FrameworkPathOverride)' == ''\" >$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), $(TargetFrameworkProfile), $(PlatformTarget), $(TargetFrameworkRootPath)))</FrameworkPathOverride>`|52.5|51.8\r\n"},{"Id":"6583100951","Type":"WatchEvent","CreatedAt":"2017-09-13T03:13:15","Actor":"pds-test1","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6583078049","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T03:03:32","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329044541","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"Daniel wrote an evaluation profiler so I can see the real cost here - I'm seeing that this costs between 8 - 10 ms per evaluation (the 4th highest expression)\r\n\r\nGiven a project that has 12 .NET Framework project references, and consumes 1 .NET Standard library, that cost would be approximately:\r\n\r\n- 2 x 12 references x 10 ms == 240 ms (note we're [double-evaluating](https://github.com/Microsoft/msbuild/issues/1276) references right now)\r\n- 1 x project itself x 10 ms == 10ms\r\n\r\nTotal: 250ms.\r\n\r\nStill playing around with the profiler - but will point to a bug that calls out all costs when I'm finished."},{"Id":"6580983866","Type":"IssueCommentEvent","CreatedAt":"2017-09-12T16:38:14","Actor":"amasoumi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-328910710","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"since you need to have NETStandard.Library.NETFramework.2.0.0-preview2-25405-01 to build references to the API and one of its dependency is NETStandard.Library (>= 2.0.0-preview2-25401-01) for some reason it will points to a different version of netstandard dll  even though you upgraded to the latest stable version of NETStandard.Library which is 2.0.0.0, so I think for now this is one option,\r\nhowever I agree that this is not a permeant solution until they release a stable version of NETStandard.Library.NETFramework"},{"Id":"6580928405","Type":"IssueCommentEvent","CreatedAt":"2017-09-12T16:26:33","Actor":"daveh101","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-328907096","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"@weshaggard I have 2 solutions that I am working on, typically both on different versions, **5.3.2** and **5.4.0**\r\n\r\nIt doesn't work with either of these.  There doesn't appear to be any pre-release version that can be used either"},{"Id":"6580859669","Type":"IssueCommentEvent","CreatedAt":"2017-09-12T16:12:07","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-328902833","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"@daveh101 can you tell us what version of Microsoft.NETCore.UniversalWindowsPlatform package you are referencing? "},{"Id":"6580850204","Type":"IssueCommentEvent","CreatedAt":"2017-09-12T16:10:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-328902241","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"While that might workaround this issue it isn't the correct solution. You might be getting lucky that the net461 netstandard.dll works in UWP but that is definitely not the one that should be used. There is a netstandard.dll that is specific to UWP and it should be in the meta-package Microsoft.NETCore.UniversalWindowsPlatform.\r\n\r\n@joperezr @nattress do you guys have any ideas why he might not be getting the netstandard.dll referenced automatically?"},{"Id":"6580480223","Type":"WatchEvent","CreatedAt":"2017-09-12T15:01:09","Actor":"Jamie-BitFlight","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6580009440","Type":"IssueCommentEvent","CreatedAt":"2017-09-12T13:35:12","Actor":"amasoumi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-328855071","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"@daveh101 , no problem, don't forget to give me rating 👍 "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6588716069","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:18:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24028#issuecomment-329374438","RelatedDescription":"Commented on issue \"stack smashing detected\" (#24028) at dotnet/corefx","RelatedBody":"Other things to look at besides validating the calling convention would be things like whether the bitness of the .NET process matches that of the compiled C binary, whether the data_convert native function itself is actually correct or whether it has a bug and is writing over stack memory it shouldn't be, whether sizeof(int) in the C function is 4 as expected, etc."},{"Id":"6588714781","Type":"PullRequestEvent","CreatedAt":"2017-09-14T05:18:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24032","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25714-00, beta-25714-00, respectively (master)\" (#24032) at dotnet/corefx","RelatedBody":""},{"Id":"6588709818","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:16:00","Actor":"sidshetye","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23629#issuecomment-329374068","RelatedDescription":"Commented on issue \"General low level primitive for ciphers (AES-GCM being the first)\" (#23629) at dotnet/corefx","RelatedBody":"## Regarding the deliberation process\r\n@bartonjs: We could argue all day if closed door decisions devoid of community involvement is an effective justification but we'll go off-topic, so I'll let that be. Plus without richer face to face or realtime comms, I don't want to upset anyone there.\r\n\r\n## Regarding streaming\r\n\r\n### 1. the 'streaming implies no AES-GCM security' argument\r\n\r\nSpecifically, steaming => return decrypted data to caller before tag verification => no security. This isn't sound. @bartonjs claims 'chosen ciphertext => watch output => recover key' while @drawaes claims 'control input for a block => therefore know output => \"work from there\" '\r\n\r\nWell, in AES-GCM, the *only* thing the tag does, is integrity verification (tamper protection). It has 0 impact on privacy. In fact, if you remove the GCM/GHASH tag processing from AES-GCM, you simply get AES-CTR mode. It's this construct that handles the privacy aspect. And CTR is malleable to bit flips but isn't \"broken\" in any of the ways you two are asserting (recovering key or plaintext) because that would mean the fundamental AES primitive is compromised. If your cryptanalyst (who is it?) knows something the rest of us don't know, he/she should be publishing it. The only thing possible is, an attacked can flip bit N and know that bit N of the plaintext was flipped - but they never know what the actual plaintext is.\r\n\r\nSo\r\n\r\n1) plaintext privacy is always enforced \r\n2) integrity verification is simply deferred (till end of stream) and \r\n3) no key is ever compromised. \r\n\r\nFor products and systems where streaming is foundational, you can now at least engineered a tradeoff where one momentarily steps down from AEAD to regular AES encryption - then step up back to AEAD upon tag verification. That unlocks several innovative concepts to embrace security instead of going \"You want to buffer all *that* - are you crazy? We can't do encryption!\". \r\n\r\nAll because you don't want to implement just `EncryptFinal` rather than `Encrypt` and `EncryptFinal` (or equivalents).\r\n\r\n### 2. Not specific to GCM! \r\n\r\nNow AES-GCM isn't some magical beast to have \"oops moments\" galore. It's simply AES-CTR + GHASH (a sort of hash if I may). Nonce considerations related to privacy are inherited from CTR mode and tag considerations related to integrity come from the variable tag sizes allowed in the spec. Still, AES-CTR + GHASH is very similar to something like AES-CBC + HMAC-SHA256 in that the first algorithm handles privacy and the second handles integrity. In AES-CBC + HMAC-SHA256, bit flips in ciphertext will corrupt corresponding block in decrypted text (unlike CTR) AND (like CTR), also deterministically flip bits in the following decrypted plaintext block. Again, an attacker won't know what the resulting plaintext will be - just that bits were flipped - just like CTR. Again, the integrity check (HMAC-SHA256) will catch it). But only processing the last byte. \r\n\r\nSo if your argument of holding back ALL decrypted data until integrity is OK is truly good - it should be applied consistently. So ALL data coming out of the AES-CBC path must be internally buffered for HMAC-SHA256 to pass? That basically means on .NET, no streaming data can even benefit from AEAD advances. .NET forces streaming data to downgrade. To pick between no encryption or regular encryption. No AEAD.\r\n\r\n### 3. It's the best we have\r\nData is getting larger and security needs to be stronger. Streaming is also a reality designers have to embrace. Until the world crafts a truly integrated AEAD algorithm which can natively detect corruption mid-stream tampering, we are stuck with encryption + authentication as bolted-on-buddies. True AEAD primitive are being researched but we've just got encryption + authentication for now. \r\n\r\nI care less about \"AES-GCM\" as much as I care about a fast, popular AEAD algorithm that can support streaming workloads - super prevalent in a data-rich, hyper-connected world.\r\n\r\n### 4. Use AES-CBC-HMAC, Use <insert workaround>\r\n\r\n> the Crypto Board would recommend NOT using GCM for first scenario, but rather CBC+HMAC.\r\n\r\nLeaving aside everything mentioned above or even the specifics of the scenario - suggesting AES-CBC-HMAC isn't free. It's [~3x slower than AES-GCM](https://software.intel.com/en-us/articles/aes-gcm-encryption-performance-on-intel-xeon-e5-v3-processors) since AES-CBC encrypt is non-parallelizable and since GHASH can be accelerated via the PCLMULQDQ instruction. So if you're at 1GB/sec with AES-GCM, you're now going to hit ~300MB/sec with AES-CBC-HMAC. This again perpetrates the \"Crypto slows you down, skip it\" mindset - one that security folks try hard to fight. \r\n\r\n> encrypting each 4k frame\r\n\r\nvideo codecs should suddenly do encryption? Or the encryption layer must now understand video codecs? It's just a bitstream at the data security layer. The fact that it's a video/genomic data/images/proprietary formats etc shouldn't be a security layer concern. An overall solution shouldn't co-mingle core responsibilities. \r\n\r\n## Nonce\r\nNIST allows for randomized IVs for length exceeding 96 bits. See section 8.2.2 at [NIST 800-38D](http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf). Nothing new here, nonce requirements come from CTR mode. Which is also [fairly standard across most stream ciphers](https://crypto.stackexchange.com/questions/30818/why-do-stream-ciphers-use-a-nonce). I don't understand the sudden fear towards nonces - it's always been `number used once`. Still, so while the `INonce` debate makes for a clunky interface at least it doesn't eliminate innovation like the no-stream-for-you imposition. I'll concede to INonce if we can get to innovate via streaming + security\r\n\r\n## I'd love to be proven wrong\r\nI'm just a guy who after a long day at work, gave up movie night with my kids to type this. I'm tired and could be wrong. But at least have an open fact based community dialog rather than anecdotes or \"committee reasons\" or some other voodoo. I'm in the business of promoting secure .NET and Azure innovations. I think we've got aligned goals.\r\n\r\n## Speaking of community dialog ...\r\nCan we please have a community Skype call? Expressing a complex topic like this blows into a giant wall of text. Pretty please?"},{"Id":"6588706331","Type":"IssuesEvent","CreatedAt":"2017-09-14T05:14:19","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/22354","RelatedDescription":"Closed issue \"Move {ReadOnly}Buffer<T> to System.Private.CoreLib, expose from System.Runtime contract\" (#22354) at dotnet/corefx","RelatedBody":"Needed for new Stream methods to use `Buffer<T>` in public APIs.\r\n\r\ncc: @ahsonkhan, @KrzysztofCwalina "},{"Id":"6588706318","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:14:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/22354#issuecomment-329373855","RelatedDescription":"Commented on issue \"Move {ReadOnly}Buffer<T> to System.Private.CoreLib, expose from System.Runtime contract\" (#22354) at dotnet/corefx","RelatedBody":"Done"},{"Id":"6588693262","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T05:07:54","Actor":"mellinoe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23992#issuecomment-329373045","RelatedDescription":"Commented on issue \"Clean Enlistment Test Failures\" (#23992) at dotnet/corefx","RelatedBody":"@kingces95 I don't think anybody is doing anything like that."},{"Id":"6588619388","Type":"IssuesEvent","CreatedAt":"2017-09-14T04:31:29","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19514","RelatedDescription":"Closed issue \"Test: System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix failed with \"Xunit.Sdk.EqualException\"\" (#19514) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix` has failed.\n\nAssert.Equal() Failure\n    Expected: Success\n    Actual:   TimedOut\n\n        Stack Trace:\n\n           at System.Net.NetworkInformation.Tests.PingTest.<>c__DisplayClass8_0.<SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix>b__1(PingReply pingReply) in /Users/buildagent/agent/_work/19/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 199\n       at System.Net.NetworkInformation.Tests.PingTest.<SendPingAsync>d__23.MoveNext() in /Users/buildagent/agent/_work/19/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 453\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.NetworkInformation.Tests.PingTest.<SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix>d__8.MoveNext() in /Users/buildagent/agent/_work/19/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 195\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nBuild : Master - 20170509.01 (Core Tests)\nFailing configurations:\n- OSX.1012.Amd64-x64\n  - Debug\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170509.01/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.PingTest~2FSendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix"},{"Id":"6588619298","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:31:26","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/19514#issuecomment-329368135","RelatedDescription":"Commented on issue \"Test: System.Net.NetworkInformation.Tests.PingTest/SendPingAsyncWithIPAddressAndTimeoutAndBufferAndPingOptions_Unix failed with \"Xunit.Sdk.EqualException\"\" (#19514) at dotnet/corefx","RelatedBody":"Closing per change above"},{"Id":"6588617132","Type":"PushEvent","CreatedAt":"2017-09-14T04:30:24","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/corefx/compare/a2a3c6b676bf851d8fb9a9b761ad82fff8d5de2f...5c671b14f74350907a939001b3d5c24c4e10b5aa","RelatedDescription":"Pushed to refs/heads/master at dotnet/corefx","RelatedBody":null},{"Id":"6588616929","Type":"IssuesEvent","CreatedAt":"2017-09-14T04:30:18","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23876","RelatedDescription":"Closed issue \"Test: System.Net.NetworkInformation.Tests.PingTest/SendPings_ReuseInstance_Hostname failed with \"System.Net.NetworkInformation.PingException : An exception occurred during a Ping request\"\" (#23876) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.NetworkInformation.Tests.PingTest/SendPings_ReuseInstance_Hostname` has failed.\n\nSystem.Net.NetworkInformation.PingException : An exception occurred during a Ping request.\n    ---- System.Net.NetworkInformation.PingException : An exception occurred during a Ping request.\n\n        Stack Trace:\n\n           at System.Net.NetworkInformation.Ping.<GetAddressAndSendAsync>d__48.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 364\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.NetworkInformation.Tests.PingTest.<SendPings_ReuseInstance_Hostname>d__15.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 349\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    ----- Inner Stack Trace -----\n       at System.Net.NetworkInformation.Ping.<SendWithPingUtility>d__60.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 210\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.NetworkInformation.Ping.<SendPingAsyncCore>d__58.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 31\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.NetworkInformation.Ping.<GetAddressAndSendAsync>d__48.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 353\nBuild : Master - 20170908.01 (Core Tests)\nFailing configurations:\n- OSX.1012.Amd64-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170908.01/workItem/System.Net.Ping.Functional.Tests/analysis/xunit/System.Net.NetworkInformation.Tests.PingTest~2FSendPings_ReuseInstance_Hostname"},{"Id":"6588616927","Type":"PullRequestEvent","CreatedAt":"2017-09-14T04:30:18","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24021","RelatedDescription":"Merged pull request \"Make ping tests reliable on OSX.\" (#24021) at dotnet/corefx","RelatedBody":"fixes #23876 #19514\r\n\r\ncc @danmosemsft "},{"Id":"6588600778","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:22:15","Actor":"hezc13","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24028#issuecomment-329367085","RelatedDescription":"Commented on issue \"stack smashing detected\" (#24028) at dotnet/corefx","RelatedBody":"However,when I compiled the same .c file to .dll file and used it in the same project in VS2015 on Windows ,it went normally. "},{"Id":"6588591826","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:17:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/23872#issuecomment-329366565","RelatedDescription":"Commented on issue \"Expose/test String.Create span-based method\" (#23872) at dotnet/corefx","RelatedBody":"@dotnet-bot test Packaging All Configurations x64 Debug Build please"},{"Id":"6588588511","Type":"PushEvent","CreatedAt":"2017-09-14T04:16:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/corefx/compare/0e1bf9d8256b73d1ab0a06d896c56ff7804c79db...a2a3c6b676bf851d8fb9a9b761ad82fff8d5de2f","RelatedDescription":"Pushed to refs/heads/master at dotnet/corefx","RelatedBody":null},{"Id":"6588588312","Type":"PullRequestEvent","CreatedAt":"2017-09-14T04:15:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24003","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreSetup, Standard to prerelease-02014-02, preview1-25714-01, preview1-25713-01, preview1-25713-01, respectively (master)\" (#24003) at dotnet/corefx","RelatedBody":""},{"Id":"6588586186","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:14:50","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24025#issuecomment-329366002","RelatedDescription":"Commented on issue \"Use Portable PDBs and turn on SourceLink\" (#24025) at dotnet/corefx","RelatedBody":"> Adding <DebugType Condition=\"'$(Coverage)' == 'true'\">pdbonly</DebugType> to dirs.props may be better. \r\n\r\nI'm not sure that'd significantly improve things. The Coverage prop is only relevant on the test build/target, which doesn't rebuild any src libs, so it wouldn't actually help in the case I outlined (though maybe other folks do things differently and it would help them)... I'd still need to rebuild the src lib, I'd just type /t:rebuild /p:Coverage=true instead of /t:rebuild /p:DebugType=pdbonly.\r\n\r\n> Or we can run the PDB converter tool before invoking the coverage tool.\r\n\r\nWe could. Honestly I think it's fine to say the libs being tested/covered need to have been built with /p:DebugType=pdbonly. But if we can come up with something better, cool."},{"Id":"6588580450","Type":"ForkEvent","CreatedAt":"2017-09-14T04:11:54","Actor":"charlieoliver","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/charlieoliver/corefx","RelatedDescription":"Forked dotnet/corefx to charlieoliver/corefx","RelatedBody":null},{"Id":"6588570483","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:06:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24028#issuecomment-329364842","RelatedDescription":"Commented on issue \"stack smashing detected\" (#24028) at dotnet/corefx","RelatedBody":"What calling convention does the native function expect, and have you tried setting that on the DllImport?"},{"Id":"6588557689","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:00:50","Actor":"kingces95","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23992#issuecomment-329364095","RelatedDescription":"Commented on issue \"Clean Enlistment Test Failures\" (#23992) at dotnet/corefx","RelatedBody":"What tool is everyone using to render the testResults.xml files and\\or generate a dashboard of the test results?"},{"Id":"6588555538","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:59:59","Actor":"kingces95","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23992#issuecomment-329363952","RelatedDescription":"Commented on issue \"Clean Enlistment Test Failures\" (#23992) at dotnet/corefx","RelatedBody":"![image](https://user-images.githubusercontent.com/4120386/30411553-9d66b954-98df-11e7-8bcb-57a0d97867cb.png)\r\n"},{"Id":"6588553408","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:59:05","Actor":"kingces95","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23992#issuecomment-329363788","RelatedDescription":"Commented on issue \"Clean Enlistment Test Failures\" (#23992) at dotnet/corefx","RelatedBody":"Sure. I'm running `OS Version: 10.0.15063 N/A Build 15063`. I'm running in a parallels VM on a MacBookPro. So I think you should be able to easily reproduce my environment. Start with a MBP, install latest version of Parallels, the follow the prompts. Parallels with automatically download windows and away you go.."},{"Id":"6588548190","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:56:46","Actor":"iSazonov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24001#issuecomment-329363372","RelatedDescription":"Commented on issue \"Enhance API to work with temporary files and directories\" (#24001) at dotnet/corefx","RelatedBody":"About security. From link above http://man7.org/linux/man-pages/man3/mkstemp.3.html:\r\n>In glibc versions 2.06 and earlier, the file is created with\r\n       permissions 0666, that is, read and write for all users.  This old\r\n       behavior may be a security risk, especially since other UNIX flavors\r\n       use 0600, and somebody might overlook this detail when porting\r\n       programs.  POSIX.1-2008 adds a requirement that the file be created\r\n       with mode 0600.\r\n\r\nWe see two important requirements:\r\n1. File must be open.\r\n2. File must have 0600 access mask.\r\n\r\nIt's not that critical important for Windows but it is best practice too. If we want to create temporary files in an arbitrary directory, it also becomes critical important.\r\n\r\nAbout workarounds. In addition to security, there are technical problems.\r\nIf we create a temporary file by standard way and then move it to an arbitrary directory and/or change the extension, we need to resolve the name conflicts: this utility makes millions of attempts in a loop to overcome such conflicts (\"File already exists\"). This is justified because all processes use a single general directory `/tmp`. (On Windows the limit is [65535 files](https://msdn.microsoft.com/en-us/library/system.io.path.gettempfilename(v=vs.110).aspx?#Anchor_2))\r\n\r\nI guess not all consumers care about these nuances.\r\nWe could offer them simple and secure API in .Net Core.\r\n"},{"Id":"6588524469","Type":"ForkEvent","CreatedAt":"2017-09-14T03:46:21","Actor":"HuDaodao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/HuDaodao/corefx","RelatedDescription":"Forked dotnet/corefx to HuDaodao/corefx","RelatedBody":null},{"Id":"6588491567","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:32:01","Actor":"jamesqo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/14354#issuecomment-329359947","RelatedDescription":"Commented on issue \"Proposal: Add System.HashCode to make it easier to generate good hash codes.\" (#14354) at dotnet/corefx","RelatedBody":"@gimpf You haven't posted in a while-- do you have a progress update on your implementations? :smiley:"},{"Id":"6588486272","Type":"WatchEvent","CreatedAt":"2017-09-14T03:29:44","Actor":"noSet","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/corefx","RelatedBody":null},{"Id":"6588466203","Type":"ForkEvent","CreatedAt":"2017-09-14T03:20:58","Actor":"MouriNaruto","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/MouriNaruto/corefx","RelatedDescription":"Forked dotnet/corefx to MouriNaruto/corefx","RelatedBody":null},{"Id":"6588448997","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:13:22","Actor":"hqueue","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24030#issuecomment-329357510","RelatedDescription":"Commented on issue \"Disable building Microsoft.XmlSerializer.Generator.Tests for ARM\" (#24030) at dotnet/corefx","RelatedBody":"@dotnet-bot please test Linux x64 Release Build"},{"Id":"6588402549","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:54:02","Actor":"hezc13","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24028#issuecomment-329354868","RelatedDescription":"Commented on issue \"stack smashing detected\" (#24028) at dotnet/corefx","RelatedBody":"I have modified the defination as follows:\r\n## the DLL declaration:\r\n`[DllImport(\"3desintf.so\",EntryPoint=\"data_convert\")]\r\n\r\nstatic extern int data_convert([MarshalAs(UnmanagedType.LPArray)]byte[] indata,int in_len,\r\n[MarshalAs(UnmanagedType.LPArray)]byte[] outdata,int flag,[MarshalAs(UnmanagedType.LPArray)]byte[] key);`\r\n## the data_convert function :\r\n`int  data_convert(unsigned char *in,int in_len,unsigned char * out,int flag,unsigned char *key)`\r\nbut the exception is still there"},{"Id":"6588359713","Type":"IssuesEvent","CreatedAt":"2017-09-14T02:36:28","Actor":"cscer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24031","RelatedDescription":"Opened issue \"cn-win7 , error on load assembly System.Private.CoreLib\" (#24031) at dotnet/corefx","RelatedBody":"Assert Failure\r\nExpression: [Recursive resource lookup bug]\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: Argument_AbsolutePathRequired\r\nStack Trace:\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.Reflection.Assembly.LoadFile(String path)\r\n\r\nwhere is the file System.Private.CoreLib.resource \r\n\r\n"},{"Id":"6588334993","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:26:11","Actor":"hqueue","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24030#issuecomment-329350720","RelatedDescription":"Commented on issue \"Disabling building Microsoft.XmlSerializer.Generator.Tests for ARM\" (#24030) at dotnet/corefx","RelatedBody":"If we can detect cross build environment, we can use a better fix as follows.\r\n\r\n- Detect cross build environment\r\n- Use `dotnet` in `ToolsDir` instead of `TestHostRootPath` when cross building.\r\n\r\nBut I have no idea how to detect build environment in managed build.\r\nDoes anyone know how ?\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6588739481","Type":"PullRequestEvent","CreatedAt":"2017-09-14T05:29:36","Actor":"zaytsev-victor","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22107","RelatedDescription":"Opened pull request \"Disabled cross function inlining if used the same type parameter name.\" (#22107) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\nCross function inlining in case of generic functions with the same type parameter name may breaks code logic\r\n\r\n**Bugs this fixes:**\r\nFixes #21907 \r\n\r\n**Risk**\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\nNo\r\n\r\n**Root cause analysis:**\r\nNot covered case\r\n\r\n**How was the bug found?**\r\ncustomer reported"},{"Id":"6588591386","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T04:17:32","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21839#issuecomment-329366549","RelatedDescription":"Commented on issue \"Make OOP to support 64bit\" (#21839) at dotnet/roslyn","RelatedBody":"@sharwell what change are you looking for?"},{"Id":"6588521940","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T03:45:16","Actor":"kingces95","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22091#issuecomment-329361592","RelatedDescription":"Commented on issue \"First touch: VisualStudioSetup.Next VS instance fails to create new Console App\" (#22091) at dotnet/roslyn","RelatedBody":"Using GFlags, attached to ServiceHub and got a FileNotFoundException in the RoslynServices .cctor that `System.Composition.TypedParts` wasn't found. Quite a pain using GFlags. Real shame the attach to child process power tool doesn't work... :(\r\n\r\n![image](https://user-images.githubusercontent.com/4120386/30411168-5fbf80ce-98dd-11e7-8881-3c908e21e83f.png)\r\n"},{"Id":"6588400323","Type":"IssuesEvent","CreatedAt":"2017-09-14T02:53:11","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21282","RelatedDescription":"Closed issue \"IForEachLoopStatement, IForLoopStatement, IForWhileUntilLoopStatement, IWhileUntilLoopStatement API Review\" (#21282) at dotnet/roslyn","RelatedBody":"We need to investigate this , \r\n- IForLoopStatement should not derive from IForWhileStatement ...etc "},{"Id":"6588400322","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:53:11","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21282#issuecomment-329354742","RelatedDescription":"Commented on issue \"IForEachLoopStatement, IForLoopStatement, IForWhileUntilLoopStatement, IWhileUntilLoopStatement API Review\" (#21282) at dotnet/roslyn","RelatedBody":"Fixed now..."},{"Id":"6588392712","Type":"PushEvent","CreatedAt":"2017-09-14T02:50:10","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/roslyn/compare/98075e1b9f891fbe8b2bbcc484accb132cd55336...21c77954170cac6410d3d2964afb1f94bcde11c5","RelatedDescription":"Pushed to refs/heads/features/ioperation at dotnet/roslyn","RelatedBody":null},{"Id":"6588392437","Type":"PullRequestEvent","CreatedAt":"2017-09-14T02:50:02","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21791","RelatedDescription":"Merged pull request \"Changes to the IOperation API shape for loop statements\" (#21791) at dotnet/roslyn","RelatedBody":"1. Flatten the loop statement hierarchy to only derive from ILoopStatement\r\n2. Separate out do loops and while loops\r\n3. Separate out the C# and VB for loops due to different semantics and syntax.\r\n\r\nFixes #21282"},{"Id":"6588392201","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:49:56","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21791#issuecomment-329354280","RelatedDescription":"Commented on issue \"Changes to the IOperation API shape for loop statements\" (#21791) at dotnet/roslyn","RelatedBody":"Integration tests are failing due to unrelated reason."},{"Id":"6588377962","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:43:59","Actor":"kingces95","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22091#issuecomment-329353435","RelatedDescription":"Commented on issue \"First touch: VisualStudioSetup.Next VS instance fails to create new Console App\" (#22091) at dotnet/roslyn","RelatedBody":"I expected enabling the VS power tool to debug child process would capture the `RoslynServices` process so that I could hit a BP in the `.cctor` but it actually didn't attach to the child. I wonder how folks generally attach to the child...\r\n\r\n![image](https://user-images.githubusercontent.com/4120386/30409697-c4da6c98-98d4-11e7-8133-fa2c4a896447.png)\r\n"},{"Id":"6588313799","Type":"WatchEvent","CreatedAt":"2017-09-14T02:17:29","Actor":"pedoc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/roslyn","RelatedBody":null},{"Id":"6588302340","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:12:41","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22010#issuecomment-329348883","RelatedDescription":"Commented on issue \"Create NameArguments code fixer\" (#22010) at dotnet/roslyn","RelatedBody":"@sharwell Thanks for the feedback. Last commit removes \"literal\" from the presentation and setting name.\r\n\r\nI'm now working on the refactoring, so that it doesn't trigger when the analyzer already reports a diagnostic.\r\nWhen I call `GetDiagnostics()` on an argument syntax, from within the refactoring code, I don't get the diagnostic introduced by the analyzer. Is that expected?"},{"Id":"6588293411","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T02:09:00","Actor":"kingces95","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22091#issuecomment-329348342","RelatedDescription":"Commented on issue \"First touch: VisualStudioSetup.Next VS instance fails to create new Console App\" (#22091) at dotnet/roslyn","RelatedBody":"I deleted the folders `15.0_DA80E4B2ROSLYNDEV` in both directories and was able to create a new project.\r\n\r\nI expected to be able to start editing the file but shortly thereafter I encounter a second exception in the `RoslynServices` `.cctor`. I tried to edit the `.cctor` to change it from a lambda to procedural so I could set a breakpoint but after the rebuild the breakpoint didn't bind. I'll investigate further but it's unexpected that change resulted in a BP that couldn't bind.\r\n\r\n![image](https://user-images.githubusercontent.com/4120386/30408860-7b36fb9c-98cf-11e7-8adf-6edabe8fb865.png)\r\n"},{"Id":"6588221168","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:39:04","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21791#issuecomment-329344158","RelatedDescription":"Commented on issue \"Changes to the IOperation API shape for loop statements\" (#21791) at dotnet/roslyn","RelatedBody":"@dotnet-bot retest windows_release_vs-integration_prtest please"},{"Id":"6588192785","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:26:51","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21791#issuecomment-329342557","RelatedDescription":"Commented on issue \"Changes to the IOperation API shape for loop statements\" (#21791) at dotnet/roslyn","RelatedBody":"@dotnet retest windows_release_vs-integration_prtest please"},{"Id":"6588192334","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:26:38","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21791#issuecomment-329342530","RelatedDescription":"Commented on issue \"Changes to the IOperation API shape for loop statements\" (#21791) at dotnet/roslyn","RelatedBody":"@dotnet-bot retest windows_debug_vs-integration_prtest please"},{"Id":"6588189092","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:25:14","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21711#issuecomment-329342353","RelatedDescription":"Commented on issue \"Add IOperation APIs for Dynamic invocations and indexer access\" (#21711) at dotnet/roslyn","RelatedBody":"@dotnet-bot retest windows_release_vs-integration_prtest please"},{"Id":"6588188559","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:25:00","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21711#issuecomment-329342324","RelatedDescription":"Commented on issue \"Add IOperation APIs for Dynamic invocations and indexer access\" (#21711) at dotnet/roslyn","RelatedBody":"@dotnet-bot retest windows_debug_vs-integration_prtest please"},{"Id":"6588188162","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T01:24:49","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21711#issuecomment-329342293","RelatedDescription":"Commented on issue \"Add IOperation APIs for Dynamic invocations and indexer access\" (#21711) at dotnet/roslyn","RelatedBody":"@dotnet-bot retest windows_debug_unit64_prtest please"},{"Id":"6588079809","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T00:37:30","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22106#issuecomment-329335552","RelatedDescription":"Commented on issue \"Design decisions made on the way to ref/span features\" (#22106) at dotnet/roslyn","RelatedBody":"CC: @dotnet/roslyn-compiler @MadsTorgersen "},{"Id":"6588077890","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:36:36","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22106","RelatedDescription":"Opened issue \"Design decisions made on the way to ref/span features\" (#22106) at dotnet/roslyn","RelatedBody":" \r\n# Design decisions made on the way to ref/span features ##\r\n\r\nMost of these decisions logically follow from the general directions as discussed in LDM meetings. In many cases they were vetted in LDM meeting by quick checks, in email or in online spec discussions. They are collected here to make sure they are recorded in one place to make sure once more that all stakeholders are ok with this going forward.\r\n  \r\nThis could also be a good resource when writing a testplan or a spec for these features.\r\n\r\n## where `readonly ref` variables are allowed\r\n- `ref readonly` parameters and returns are allowed anywhere where a byval parameters are allowed.\r\nThis includes indexers, operators (including conversions), delegates, lambdas, local functions.  \r\n- `ref readonly` returns allowed anywhere where `ref` returns are allowed. I.E. indexers, operators (including conversions), delegates, lambdas, local functions, but not in operators.\r\n- There are no `ref readonly` locals.\r\n- There are no warnings on `ref [readonly]` with reference types and primitives.\r\nIt may be pointless in general, but in some cases user must/want to pass primitives as `ref readonly`. Examples - overriding a generic method like ` Method(ref readonly T param)` when T was substituted to be `int`, or when having methods like `Volatile.Read(ref readonly int location)`\r\n\r\nSome cases where `ref readonly` is not allowed can be allowed in the future if there is a need.\r\n\r\n## aliasing in general\r\n- `ref readonly` arguments are not required to be lvalues. When argument is not an lvalue, a temporary is used.\r\n- `ref readonly` parameter may have default values. When not specified by the call site, they are passed via a temporary.\r\n- `ref readonly` arguments may have implicit conversions, including those that do not preserve identity. A temporary is used in those cases.\r\n- the life time of the temporaries matches at least the closest encompassing scope. (in reality could be smaller if no observable difference).   \r\n- for the purpose of lambda/async capturing `in` parameters are still opaque references and as such cannot be lifted. \r\n\r\n## syntax for `ref readonly` arguments\r\n- `ref readonly` arguments look exactly the same as ordinary byval parameters - no modifiers. This includes arguments of operators, and receivers of extension methods.\r\n\r\n```cs\r\nvoid (ref readonly int arg){...};\r\n\r\nM1(obj.field);\r\nM1(42);\r\nM1();\r\n\r\npublic static T1 operator +(ref readonly T1 x, ref readonly T1 y) {...};\r\n\r\na + b;\r\n```\r\n\r\n- returns in a `ref readonly` methods must specify `ref` to signify that reference is taken. (Note we never return a ref of a copy)\r\n\r\n```cs\r\nref readonly string M() => ref String.Empty;\r\n\r\n// error - needs 'ref'\r\nref readonly string M() => \"qq\";   \r\n\r\n// error - not an lvalue\r\nref readonly string M() => ref \"qq\";   \r\n```\r\n\r\n## binding and overload resolution\r\n- since the user provides no modifiers at the call site, the signatures will equally match ordinary byval parameters and `ref readonly` parameters. If both are present, an ambiguity error is reported.\r\n- in fact for the purpose of overload resolution `ref readonly` parameters behave as effectively byval parameters.   \r\n  \r\n## delegate conversions and method type inference\r\n- since both delegates and lambdas can express RefKind of parameters, the parameter RefKinds of successful conversion candidates must match, similarly to how it works with `ref/out` parameters.\r\n- similarly to `ref/out`, `ref readonly` is ignored in the course of method type inference inference except for the purposes of variance. \r\n- for the purpose of variance `ref readonly` is considered non-variant.\r\n\r\n```C#\r\nclass Program\r\n{\r\n    delegate void DRef<T>(ref T arg);\r\n    delegate void DIn<T>(ref readonly T arg);\r\n\r\n    static T Generic<T>(DIn<T> arg1, DIn<T> arg2) { return default; }\r\n\r\n    static void Main()\r\n    {\r\n        // error - parameter ref kind must match\r\n        DRef<Exception> d1 = (ref readonly Exception arg) => throw null;\r\n\r\n        // error - T inference is nonvariant/exact and therefore ambiguous\r\n        Generic((ref readonly Exception arg) => throw null, (ref readonly object arg) => throw null);\r\n    }\r\n}\r\n\r\n``` \r\n\r\n## async and spilling\r\n- async methods cannot have `ref readonly` parameters or returns \r\n- at call sites, unlike `ref` arguments, `ref readonly` arguments never cause spilling related errors. \r\nUser does not specify `ref` or `out` and as such spilling errors would be an unexpected nuisance. \r\n- when spilling by reference is possible (fields, array elements), we spill by reference and preserve aliasing.\r\n- when spilling by reference is **not** possible (ref methods, ref ternary), we spill by value. \r\n- NOTE: in rare cases this may cause an observable difference between calling with `await` in the signature and without. \r\nOrdinary `ref` in these cases just produces an error.  \r\n```C#\r\nvoid M1(ref readonly int arg1, ref readonly int arg2){...};\r\nref int M2() {...};\r\nasync Task<int> M3() {...};\r\n\r\n// valid. first argument is spilled via a copy\r\nM1(M2(), await M3()){...} \r\n\r\n```\r\n    \r\n## ref structs.\r\n- The syntax is `ref struct S1{ . .}` \r\n- A particular nuance here – `ref` is a **contextual** modifier. For historical reasons `ref` in declarations can also be a ref-type-operator. Therefore it must be contextual to avoid syntactical ambiguities. \r\n- The disambiguating context here is \"immediately preceeding `struct` keyword\".\r\n- There is an interaction with another contextual keyword in this space - `partial`. We now allow `partial` to be used before `ref struct`.\r\n```cs\r\n// valid\r\npublic unsafe ref struct S1{}  \r\n\r\n// also valid\r\nunsafe readonly public partial ref struct S1{}\r\n\r\n// not valid - 'ref' must go immediately before 'struct'\r\nunsafe ref readonly public partial struct S1{}\r\n  \r\n```\r\n- NOTE: there is no requirement for modifiers to match between parts of a partial type. That is done to facilitate code-generator scenarios. For the eventual semantic meaning we consider the union of all modifiers across partials. \r\n`ref` is not an exception from the existing rules.\r\n```cs\r\n// effectively a 'public readonly ref struct S1{..}' \r\n\r\npublic partial struct S1{}  \r\npartial ref struct S1{}  \r\nreadonly partial struct S1{}  \r\n\r\n```    \r\n## readonly structs\r\n- the syntax is `readonly struct`.\r\n- the `readonly` here is a true modifier and can be specified in any order with other modifiers.\r\n- `readonly` structs cannot have writeable fields, autoprops or field-like events\r\n\r\n## stack-refering spans \r\n- the syntax is `Span<int> sp = stackalloc int[100];`\r\n- `stackalloc int[100]` is now treated as a stack-allocated array literal and can be target-typed to `Span<T>` where `T` must match the type of the array.\r\n- we support target typing specifically to a well-known type `System.Span<T>`.\r\n- the StackAllocToSpan conversion is a standard conversion and can \"stack\" with user defined operators to form user-defined conversion, including implicit conversions. \r\nThe following is valid:\r\n```cs\r\n// Span<T> has implicit conversion to ReadOnlySpan<T>\r\nReadOnlySpan<int> sp = stackallock int[10]; \r\n\r\n```  \r\n- safety rules for ref-like structs:  \r\nDoc: https://github.com/dotnet/csharplang/blob/master/proposals/span-safety.md\r\n\r\n## `ref [readonly]` extension methods\r\n\r\n- we now support the following 3 cases:\r\n`T this` – existing case, ok for any kind of receiver type.\r\n`ref T this` – ok with structs or with generics constrained to structs\r\n`ref readonly T this` – ok with actual structs, but **not** ok with generic type parameter T regardless of constraints.\r\n\r\nThe purpose of `ref readonly` is to avoid unnecessary copy, but with generic types, nearly all uses inside the extension will have to be done through interface methods and `ref readonly` receiver will need to be copied every time. As a result the user will actually **increase** implicit copying, possibly dramatically.\r\nIt is never a good thing to use `ref readonly` with generics. We do not want this to lead user on wrong path. \r\n\r\n- receiver of a `ref` extension method must be an lvalue. Invoking a `ref` extension on a readonly field or an rvalue is an error.\r\n- `ref` receiver requires that receiver is identity-convertible to the type of `this` parameter. We do not make copies when invoking a method whose purpose is to mutate.\r\n- invoking a `ref readonly` extension on a readonly field or an rvalue is not an error.\r\n- `ref readonly` receiver will permit implicit conversions in the same way as static method would permit.\r\n\r\nNOTE: It is always possible to go from an extension method syntax to a static method invocation. This is preexisting design constraint since user could be forced to do the substitution in ambiguous situations.\r\n\r\n## metadata representation\r\n- readonly struct in metadata is just a struct decorated with `[IsReadOnly]` attribute\r\n- ref struct is a struct with an [IsByRefLike]` attribute  \r\n- [ref readonly] parameters/returns are byref parameters decorated with `[IsReadOnly]` attributes.\r\n- attributes used by these features are not allowed to be used directly in source. This is breaking in compiler upgrade scenario, but was historically done to not having to rationalize numerous combinations of these attributes and features that use them if such use is allowed.   \r\n- attributes used by these feature are either found in the containing compilation or \"embedded\" by the compile as a private type in the containing assembly.\r\n- embedded attributes are decorated with `[Embedded]` which itself is always embedded and visible/bindable from the source (so that user could not \"embed\" source types).     \r\n\r\n## metadata poisoning\r\n- `ref readonly` parameters are marked with `modreq(InAttribute)`, except for parameters of methods that cannot be \"overriden\" with a concrete implementation. This is done to prevent non-enlightened compiler to provide an implementation that does not respect the contract.  \r\n- Delegate/interface methods are considered \"overridable\" for the purpose above.\r\n- `ref readonly` returns are always marked with `modreq(InAttribute)`. This is done to prevent non-enlightened compiler writing through the reference. \r\n- `ref structs` are marked with `ObsoleteAttribute(“Types with embedded references are not supported in this version of your compiler.”, error=true)`. This is done to prevent non-enlightened compiler to use the types in unsafe ways.     \r\n- `ref structs` are poisoned conditionally. If a method is already [Obsolete] or [Deprecated]. We honor the attribute supplied by the user and cannot emit ours without a clash. We may consider giving a warning for such cases, but none is given right now. \r\n- poisoning is _mandatory_ for `ref readonly`. We will not import metadata where a method has `IsReadOnlyAttribute` saying that method returns `ref readonly` and yet does not have  `modreq(In)`\r\n- poisoning is optional when importing metadata to simplify the contract. When overriding \"unpoisoned\" signatures we will keep them \"unpoisoned\".\r\n"},{"Id":"6588064925","Type":"PullRequestEvent","CreatedAt":"2017-09-14T00:30:46","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22105","RelatedDescription":"Opened pull request \"Split out an EditorFeatures.Wpf\" (#22105) at dotnet/roslyn","RelatedBody":"**THIS PR IS CURRENTLY FOR PRIVATE REVIEW AND CI VALIDATION.**\r\n\r\nThis splits out an EditorFeatures.Wpf assembly, which contains the parts that depend on IWpfTextView and WPF itself. The parts that depend on the editor APIs but not these are left in EditorFeatures. A follow-up PR will actually remove the dependency on Microsoft.VisualStudio.Text.UI.Wpf, but that must be done with an update to the packages and thus has to happen in the dev15.5.x branch."},{"Id":"6588028394","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-14T00:14:33","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22056#discussion_r138771094","RelatedDescription":"Commented on pull request \"IDelegateCreationExpression\" (#22056) at dotnet/roslyn","RelatedBody":"I updated the comment, as it wasn't accurate on the conversion scenario anymore. Looking at my tests so far, it does not appear that this will ever be an IInvalidExpression. The only NoneOperations we have the moment here are BoundQueryLambdas, which https://github.com/dotnet/roslyn/pull/21356 will address by turning them into IAnonymousFunctionExpressions."},{"Id":"6588023824","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T00:12:36","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21839#issuecomment-329332266","RelatedDescription":"Commented on issue \"Make OOP to support 64bit\" (#21839) at dotnet/roslyn","RelatedBody":"for features we have unit tests. for service hub itself, all our integration tests test this infrastructure. \r\n\"Will we update one or more of the Jenkins jobs to use the 64-bit process?\", not sure what you meant by it?\r\n\r\nfor now, this wouldn't affect anything since new behavior is off by default. after this PR, I will send another PR, just enabling 64bit. and before we release (and after enough testing of 64bit), it will be moved to A/B testing."},{"Id":"6588017484","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-14T00:09:50","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21839#discussion_r138770542","RelatedDescription":"Commented on pull request \"Make OOP to support 64bit\" (#21839) at dotnet/roslyn","RelatedBody":"what do you mean? this is service hub config file that I added for AnyCpu service hub host.\r\n\r\nare you talking about file, or host id? these are new files I added."},{"Id":"6588013611","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-14T00:08:12","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21839#discussion_r138770337","RelatedDescription":"Commented on pull request \"Make OOP to support 64bit\" (#21839) at dotnet/roslyn","RelatedBody":"to log that information. I believe this data is logged now? not strictly related to 64bit work. but was one of data I was using when looking at 64bit perf."},{"Id":"6588010868","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-14T00:06:57","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21839#discussion_r138770180","RelatedDescription":"Commented on pull request \"Make OOP to support 64bit\" (#21839) at dotnet/roslyn","RelatedBody":"it is not changing, it is adding new option called gcAfter. 64bit require more explicit clean up than 32bit since it can leave a lot bigger unused memory space around. lessen learned from VBCSCompiler. this make sure if there was no activity on OOP for 5 mins, I will call explicit GC cleanup."},{"Id":"6587964313","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:48:11","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21870#issuecomment-329328786","RelatedDescription":"Commented on issue \"Add feature to offer to convert code to use deconstructions.\" (#21870) at dotnet/roslyn","RelatedBody":"retest windows_debug_unit32_prtest please"},{"Id":"6587963189","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:47:44","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21870#issuecomment-329328721","RelatedDescription":"Commented on issue \"Add feature to offer to convert code to use deconstructions.\" (#21870) at dotnet/roslyn","RelatedBody":"@TyOverby Another null ref in perf_correctness in https://ci.dot.net/job/dotnet_roslyn/job/master/job/perf_correctness_prtest/9445/"},{"Id":"6587962402","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T23:47:24","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21870#issuecomment-329328662","RelatedDescription":"Commented on issue \"Add feature to offer to convert code to use deconstructions.\" (#21870) at dotnet/roslyn","RelatedBody":"retest perf_correctness_prtest please"},{"Id":"6587951707","Type":"PullRequestEvent","CreatedAt":"2017-09-13T23:43:09","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22104","RelatedDescription":"Opened pull request \"Simplify some code as suggested in review.\" (#22104) at dotnet/roslyn","RelatedBody":"Fixes #20029\r\n\r\n@dotnet/roslyn-compiler @agocke Please review this tiny code cleanup."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"908126010171834368","CreatedAt":"2017-09-14T00:31:27+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 https://t.co/iOiV9qNspl and Configuration features https://t.co/6LCtKp9gfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":37,"RawContent":null},{"Id":"907775139210715137","CreatedAt":"2017-09-13T01:17:13+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Security and Quality Rollup https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":26,"RawContent":null},{"Id":"906146140000841728","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"dotnet","Text":"Getting Started with Windows Containers https://t.co/UnRPIRZySp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":181,"FavoriteCount":108,"RawContent":null},{"Id":"903669794150506500","CreatedAt":"2017-09-01T17:24:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf - streaming live directly to your favorite device. Don't miss out.\n\nIs it on your calendar yet?… https://t.co/SK3CUqUkrs","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":122,"FavoriteCount":100,"RawContent":null},{"Id":"902942589053108224","CreatedAt":"2017-08-30T17:14:23+00:00","UserScreenname":"dotnet","Text":"Introducing .NET IL Linker https://t.co/ji9Uhlalw2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":299,"FavoriteCount":203,"RawContent":null},{"Id":"902581598876459009","CreatedAt":"2017-08-29T17:19:56+00:00","UserScreenname":"dotnet","Text":"The Week in .NET: Let's Encrypt WebApp Renewer, CodeCamp Seattle 2017, and links!\nhttps://t.co/Mssa964piA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":42,"RawContent":null},{"Id":"900496427477901312","CreatedAt":"2017-08-23T23:14:13+00:00","UserScreenname":"dotnet","Text":"If you had $100 to spend improving Unit Testing in Visual Studio what would you spend it on? Tell us here: https://t.co/lppiVZVHeD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":49,"RawContent":null}]}},"RunOn":"2017-09-14T05:30:16.6835271Z","RunDurationInMilliseconds":5954}