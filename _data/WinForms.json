{"Data":{"GitHub":{"Issues":[{"Id":"511899000","IsPullRequest":true,"CreatedAt":"2019-10-25T05:30:52","Actor":"dotnet-maestro[bot]","Number":"2181","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191023.3\r\n- **Date Produced**: 10/23/2019 4:10 PM\r\n- **Commit**: 894bd005267af53f7d39ac988881e61193e67ae1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19523.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19523.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19523.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19523.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2181)","Url":"https://github.com/dotnet/winforms/pull/2181","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2181)"},{"Id":"511885330","IsPullRequest":true,"CreatedAt":"2019-10-25T03:44:03","Actor":"hughbe","Number":"2180","RawContent":null,"Title":"Cleanup SetParent interop","State":"closed","Body":"## Proposed Changes\r\n- Cleanup SetParent interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2180)","Url":"https://github.com/dotnet/winforms/pull/2180","RelatedDescription":"Closed or merged PR \"Cleanup SetParent interop\" (#2180)"},{"Id":"511909852","IsPullRequest":true,"CreatedAt":"2019-10-25T03:20:14","Actor":"dotnet-maestro[bot]","Number":"2182","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c0fa602a-d869-4965-7860-08d72198640e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191023.10\r\n- **Date Produced**: 10/24/2019 1:21 AM\r\n- **Commit**: 4b1103759bc91b46f9ecfe0c0d93a1742ef3c9ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19523.10\r\n\r\n[marker]: <> (End:c0fa602a-d869-4965-7860-08d72198640e)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19523.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19523.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19523.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2182)","Url":"https://github.com/dotnet/winforms/pull/2182","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#2182)"},{"Id":"511973135","IsPullRequest":true,"CreatedAt":"2019-10-25T03:07:38","Actor":"weltkante","Number":"2184","RawContent":null,"Title":"WIP: fix lock inversion","State":"closed","Body":"Fixes #1999\r\n\r\n## Proposed changes\r\n\r\n- Installing NoAssertListener and using NoAssertListener suffered from a deadlock due to lock inversion. The installation first takes the NoAssertContext lock then proceeds to install the TraceListener, which requires the TraceListenerCollection lock.\r\n\r\n  Other threads can continue running and may be logging/asserting. As soon as the NoAssertListener is installed he will be picked up and start receiving calls. When NoAssertListener is called into the overridden methods the caller will be holding the TraceListenerCollection lock. The override now proceeds to take the NoAssertContext lock. If installation did not yet complete you have a deadlock due to lock inversion.\r\n\r\n  Resolution is to enforce lock ordering by never taking the TraceListenerCollection lock when the NoAssertContext lock is already held. This makes installation/uninstallation more complex but prevents the deadlocks.\r\n\r\n## Customer Impact\r\n\r\n- None, test only\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None, test only\r\n\r\n### Before\r\n\r\n- Deadlocks observed where one thread was in the NoAssertContext constructor\r\n\r\n### After\r\n\r\n- Deadlocks should no longer have a thread in NoAssertContext constructor\r\n\r\n## Test methodology\r\n\r\n- WIP\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2184)","Url":"https://github.com/dotnet/winforms/pull/2184","RelatedDescription":"Closed or merged PR \"WIP: fix lock inversion\" (#2184)"},{"Id":"511714696","IsPullRequest":true,"CreatedAt":"2019-10-25T03:06:42","Actor":"RussKie","Number":"2177","RawContent":null,"Title":"WIP: Fix tests","State":"closed","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nCloses #1999\r\n\r\n\r\n## Proposed changes\r\n\r\n- Disable test parallelism\r\nMultiple experiments suggest that even in STA mode tests overwhelm the system either via race conditions or flooding the messaging loop which results in deadlocks and hangs.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None, test infra changes\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None, test infra changes\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2177)","Url":"https://github.com/dotnet/winforms/pull/2177","RelatedDescription":"Closed or merged PR \"WIP: Fix tests\" (#2177)"},{"Id":"512248591","IsPullRequest":true,"CreatedAt":"2019-10-25T03:06:11","Actor":"JeremyKuhne","Number":"2191","RawContent":null,"Title":"Fix NoAssertContext deadlock","State":"closed","Body":"The assert context listener would deadlock sometimes and wasn't particularly efficient. @weltkante discovered this in #2184 and encouraged me to rethink how to approach this.\r\n\r\nFixes #1999\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2191)","Url":"https://github.com/dotnet/winforms/pull/2191","RelatedDescription":"Closed or merged PR \"Fix NoAssertContext deadlock\" (#2191)"},{"Id":"512274085","IsPullRequest":false,"CreatedAt":"2019-10-25T02:51:06","Actor":"Amy-Li02","Number":"2193","RawContent":null,"Title":"The RadioButton's checked state is incorrect in runtime after setting radioButton.Select event","State":"open","Body":"* .NET Core Version: .NET Core 3.1.100-preview2-014532 from Release branch\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**More Info:**\r\n1. This is not a regression issue, it can repro from .NET Framework 2.0 to .NET Framework 4.8 latest build.\r\n2. When comment code **rButton.Select();**, this issue cannot repro.\r\n\r\n**Minimal repro:**\r\n1. Create a winforms .NET core app.\r\n2. Add the following code to the the constrator of Form1.\r\n```\r\n       RadioButton rButton = new RadioButton();\r\n       rButton.Text = \"rButton\";\r\n       rButton.Checked = false;\r\n       this.Controls.Add(rButton);\r\n       rButton.Select();\r\n```\r\n\r\n3. Press F5 to run the application.\r\n\r\n**Actual behavior:** \r\nThe RadioButton was checked.\r\n![Current](https://user-images.githubusercontent.com/49627022/67537656-ef6cd280-f70e-11e9-993a-475f62b69214.png)\r\n\r\n**Expected behavior:**\r\nThe RadioButton should not be checked.\r\n![Expected](https://user-images.githubusercontent.com/49627022/67537666-f5fb4a00-f70e-11e9-85a1-c79819bb2cfe.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/2193","RelatedDescription":"Open issue \"The RadioButton's checked state is incorrect in runtime after setting radioButton.Select event\" (#2193)"},{"Id":"512256603","IsPullRequest":false,"CreatedAt":"2019-10-25T01:33:55","Actor":"RussKie","Number":"2192","RawContent":null,"Title":"Flaky test: `Application_VisualStyleState_Set_ReturnsExpected` deadlock","State":"open","Body":"\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\nAs part of tests deadlock investigation, the major deadlock causing issue was eliminated in #2191, however that uncovered a secondary issue that `MonthCalendar_CalendarDimensions_SetAreaOfTwelve_GetReturnsExpected` could deadlock as well.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/67532139-e3821000-f710-11e9-83c8-d0352cc71b4e.png)\r\n\r\nAll but two threads appear to be waiting.\r\n\r\nThis thread is executing out code appears to be stuck sending \"theme changed\" messages\r\n```\r\nFlagged\t>\t71456\t11\tWorker Thread\t<No Name>\tSystem.Windows.Forms.dll!System.Windows.Forms.Application.SendThemeChangedRecursive\r\n\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n>\tSystem.Windows.Forms.dll!System.Windows.Forms.Application.SendThemeChangedRecursive(System.IntPtr handle = 0x00000000000727ca, System.IntPtr lparam = 0x0000000000000000) Line 648\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.SendThemeChangedRecursive(System.IntPtr handle = 0x0000000000971f24, System.IntPtr lparam = 0x0000000000000000) Line 643\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.SendThemeChangedRecursive(System.IntPtr handle = 0x00000000002320fe, System.IntPtr lparam = 0x0000000000000000) Line 643\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.SendThemeChanged(System.IntPtr handle = 0x00000000002320fe, System.IntPtr extraParameter = 0x0000000000000000) Line 625\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.VisualStyleState.set(System.Windows.Forms.VisualStyles.VisualStyleState value = NoneEnabled) Line 609\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.Tests.dll!System.Windows.Forms.Tests.ApplicationTests.Application_VisualStyleState_Set_ReturnsExpected(System.Windows.Forms.VisualStyles.VisualStyleState value = NoneEnabled) Line 43\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n \txunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker<System.__Canon>.CallTestMethod(object testClassInstance = {System.Windows.Forms.Tests.ApplicationTests}) Line 150\tC#\tNon-user code. Symbols loaded.\r\n\r\n```\r\nAnd this thread I presume responsible for handling events?\r\n```\r\nFlagged\t\t87564\t22\tWorker Thread\t.NET SystemEvents\tMicrosoft.Win32.SystemEvents.dll!Microsoft.Win32.SystemEvents.WindowThreadProc\r\n\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n>\tMicrosoft.Win32.SystemEvents.dll!Microsoft.Win32.SystemEvents.WindowThreadProc()\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Private.CoreLib.dll!System.Threading.ThreadHelper.ThreadStart_Context(object state)\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Private.CoreLib.dll!System.Threading.ThreadHelper.ThreadStart()\tUnknown\tNon-user code. Skipped loading symbols.\r\n\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nTests don't deadlock\r\n\r\n**Minimal repro:**\r\n\r\nUncomment tests and run `build -test`","Url":"https://github.com/dotnet/winforms/issues/2192","RelatedDescription":"Open issue \"Flaky test: `Application_VisualStyleState_Set_ReturnsExpected` deadlock\" (#2192)"},{"Id":"512087385","IsPullRequest":true,"CreatedAt":"2019-10-25T01:13:49","Actor":"mmitche","Number":"2186","RawContent":null,"Title":"Switch to label.N form for pre-release label","State":"closed","Body":"In order to facilitate better preview sorting, switch to label.N form for the pre-release label.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2186)","Url":"https://github.com/dotnet/winforms/pull/2186","RelatedDescription":"Closed or merged PR \"Switch to label.N form for pre-release label\" (#2186)"},{"Id":"511922555","IsPullRequest":true,"CreatedAt":"2019-10-25T00:09:50","Actor":"vladimir-krestov","Number":"2183","RawContent":null,"Title":"Fixing editors unit tests and the branch building","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes `release/3.1-uitypeeditors` branch unit tests to correct building.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Remove `ImageIndexEditor` property test case because `TreeNode` hasn't this property\r\n- Add `TypeForwardedTo` statements to get correct editors\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No, fixed only tests\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net Core version: 3.1.0-preview1.19458.7\r\n- Microsoft Windows [Version 10.0.18362.418]\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2183)","Url":"https://github.com/dotnet/winforms/pull/2183","RelatedDescription":"Closed or merged PR \"Fixing editors unit tests and the branch building\" (#2183)"},{"Id":"512201159","IsPullRequest":true,"CreatedAt":"2019-10-24T21:59:46","Actor":"AdamYoblick","Number":"2190","RawContent":null,"Title":"move sdl validation parameters to azdo variable group","State":"closed","Body":"## Proposed changes\r\n\r\n- Move SDL validation parameters to azdo variable group to allow us to change them without the need for a PR\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2190)","Url":"https://github.com/dotnet/winforms/pull/2190","RelatedDescription":"Closed or merged PR \"move sdl validation parameters to azdo variable group\" (#2190)"},{"Id":"512191625","IsPullRequest":true,"CreatedAt":"2019-10-24T21:31:06","Actor":"M-Lipin","Number":"2189","RawContent":null,"Title":"Porting Narrator announcement for StringCollectionEditor items","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2188 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding StringCollectionEditorTextBox class derived from standard TextBox with enhanced accessibility (UI Automation and UI Notification) support.\r\n- Adding UIA notification announcement for item navigation within StringCollectionEditorTextBox.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Visually impaired user will be able to distinguish the currently edited/selected/navigated string item within StringCollectionEditor control.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nNo announcement for SringCollectionEditor navigation.\r\n\r\n### After\r\n\r\nSringCollectionEditor item navigation is announced properly.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Automation tests (to run)\r\n- Unit tests (to be implemented)\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\nThere is no UI changes but changes in accessibility providers: IAccessible is partially changed to UI Automation.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\nNet Core version: 3.1.0-preview1.19458.7\r\nMicrosoft Windows [Version 10.0.18362.418]\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2189)","Url":"https://github.com/dotnet/winforms/pull/2189","RelatedDescription":"Open PR \"Porting Narrator announcement for StringCollectionEditor items\" (#2189)"},{"Id":"512188462","IsPullRequest":false,"CreatedAt":"2019-10-24T21:23:14","Actor":"M-Lipin","Number":"2188","RawContent":null,"Title":"Port Narrator announcement for StringCollectionEditor items","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nThere is no screen reader announcement for item navigation and selecting in StringCollectionEditor UI.\r\n\r\n**Actual behavior:**\r\nNarrator does not announce the StringCollectionEditor item when navigating up and down thru the items list.\r\n\r\n**Expected behavior:**\r\nNarrator announces the item when focus goes to item when navigating using keyboard/mouse.\r\n\r\n**Minimal repro:**\r\n* Create WinForms app with ComboBox or another list control which collection can be edited using StringCollectionEditor.\r\n* Add PropertyGrid control to the form and associate its selected object with previously added ComboBox.\r\n* Run the app try to edit the collection of items (add few items and navigate up/down using keyboard within StringCollectionEditor textbox.\r\n* Observe no announcement when navigation.","Url":"https://github.com/dotnet/winforms/issues/2188","RelatedDescription":"Open issue \"Port Narrator announcement for StringCollectionEditor items\" (#2188)"},{"Id":"512099536","IsPullRequest":true,"CreatedAt":"2019-10-24T18:42:35","Actor":"AdamYoblick","Number":"2187","RawContent":null,"Title":"fix tsa bug area path","State":"closed","Body":"## Proposed changes\r\n\r\n- Fix area path, since the old one no longer exists\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2187)","Url":"https://github.com/dotnet/winforms/pull/2187","RelatedDescription":"Closed or merged PR \"fix tsa bug area path\" (#2187)"},{"Id":"512020421","IsPullRequest":false,"CreatedAt":"2019-10-24T15:28:47","Actor":"DustinCampbell","Number":"2185","RawContent":null,"Title":"Necessary CodeDomSerializers not ported to WinForms","State":"open","Body":"The follow `CodeDomSerializer`s have not been ported to .NET Core WinForms, and are needed for designer scenarios:\r\n\r\n* `System.ComponentModel.Design.Serialization.LocalizationCodeDomSerializer`\r\n* `System.Windows.Forms.Design.ControlCodeDomSerializer`\r\n* `System.Windows.Forms.Design.DataGridViewRowCollectionCodeDomSerializer`\r\n* `System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer`\r\n* `System.Windows.Forms.Design.TableLayoutControlCollectionCodeDomSerializer`\r\n* `System.Windows.Forms.Design.ToolStripMenuItemCodeDomSerializer`\r\n\r\nEverything in WinForms that has a `DesignerSerializerAttribute` should be audited to ensure that the type specified by the attribute actually exists.\r\n\r\ncc @merriemcgaw ","Url":"https://github.com/dotnet/winforms/issues/2185","RelatedDescription":"Open issue \"Necessary CodeDomSerializers not ported to WinForms\" (#2185)"},{"Id":"511882661","IsPullRequest":true,"CreatedAt":"2019-10-24T11:27:01","Actor":"hughbe","Number":"2179","RawContent":null,"Title":"Extract AxHost nested classes","State":"open","Body":"Pull them out into their own files\r\n\r\nDiff is a bit weird sadly\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2179)","Url":"https://github.com/dotnet/winforms/pull/2179","RelatedDescription":"Open PR \"Extract AxHost nested classes\" (#2179)"},{"Id":"511769164","IsPullRequest":false,"CreatedAt":"2019-10-24T07:47:44","Actor":"Vino-Wang","Number":"2178","RawContent":null,"Title":"The empty DataGridView control cannot get a blue Narrator rectangle, just get the focus dot line","State":"open","Body":"* .NET Core Version: (.NET Core SDK 3.1 Preview 2 3.1.100.14533)\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nThe empty DataGridView control cannot get a blue Narrator rectangle, just get the focus dot line, so no any announcement about the empty dataGridView.\r\nBut when adding some columns to the DataGridView, the blue rectangle will on the currently specific cells with corresponding announcement by Narrator reading. Maybe this issue is by design, just report here and find the final confirmation from you guys.\r\n\r\nThis issue also can reproduce with latest .NET Framework 4.8 project.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe empty DataGridView control cannot get a blue Narrator rectangle, just get the focus dot line.\r\n\r\n**Expected behavior:**\r\nThe empty DataGridView control should get a blue Narrator rectangle.\r\n\r\n**Minimal repro:**\r\n1.\tRun the attached app,\r\n2.\tLaunch the Narrator and tab to navigate to the controls on the form.\r\n3.\tObserve the narrator blue rectangle between controls and DataGridView.\r\n[WindowsFormsApp3.zip](https://github.com/dotnet/winforms/files/3766270/WindowsFormsApp3.zip)","Url":"https://github.com/dotnet/winforms/issues/2178","RelatedDescription":"Open issue \"The empty DataGridView control cannot get a blue Narrator rectangle, just get the focus dot line\" (#2178)"},{"Id":"511286621","IsPullRequest":true,"CreatedAt":"2019-10-24T06:48:57","Actor":"dotnet-maestro[bot]","Number":"2168","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c0fa602a-d869-4965-7860-08d72198640e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191022.10\r\n- **Date Produced**: 10/23/2019 7:02 AM\r\n- **Commit**: 57b6a955d50a983d290a5add72c244e19a56cb2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19522.10\r\n\r\n[marker]: <> (End:c0fa602a-d869-4965-7860-08d72198640e)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha1.19521.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19522.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19522.3 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2168)","Url":"https://github.com/dotnet/winforms/pull/2168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#2168)"},{"Id":"511276413","IsPullRequest":true,"CreatedAt":"2019-10-24T05:29:42","Actor":"dotnet-maestro[bot]","Number":"2166","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191022.8\r\n- **Date Produced**: 10/22/2019 10:28 PM\r\n- **Commit**: b809e63d8ef475faaf6fecbe8bf77180f8e3550c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19522.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19522.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19522.8\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19522.8\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2166)","Url":"https://github.com/dotnet/winforms/pull/2166","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2166)"},{"Id":"511622222","IsPullRequest":true,"CreatedAt":"2019-10-24T00:45:10","Actor":"dotnet-maestro[bot]","Number":"2174","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4fa59404-cc5b-4313-dd47-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191023.6\r\n- **Date Produced**: 10/23/2019 10:04 PM\r\n- **Commit**: 10d8d0996dba48164eb035562afb32e8157e8d06\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview2.19523.6\r\n\r\n[marker]: <> (End:4fa59404-cc5b-4313-dd47-08d72a4caef5)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 3.1.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.7.0-preview2.19522.18 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19522.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19522.2 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2174)","Url":"https://github.com/dotnet/winforms/pull/2174","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/core-setup\" (#2174)"},{"Id":"511637356","IsPullRequest":false,"CreatedAt":"2019-10-24T00:24:45","Actor":"wtgodbe","Number":"2176","RawContent":null,"Title":"Re-enable SDL validation in release/3.1","State":"open","Body":"SDL Validation is still failing in the release/3.1 internal builds. We should figure out why, then re-enable it (once the branch opens back up after preview2 is finished). \r\n\r\nSee https://github.com/dotnet/winforms/pull/2175, https://github.com/dotnet/arcade/issues/4099.\r\n\r\nCC @AdamYoblick @RussKie @riarenas @JohnTortugo ","Url":"https://github.com/dotnet/winforms/issues/2176","RelatedDescription":"Open issue \"Re-enable SDL validation in release/3.1\" (#2176)"},{"Id":"511637119","IsPullRequest":true,"CreatedAt":"2019-10-24T00:24:19","Actor":"wtgodbe","Number":"2175","RawContent":null,"Title":"Disable SDL validation in release/3.1","State":"closed","Body":"Disable SDL validation to unblock the 3.1-preview2 builds\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2175)","Url":"https://github.com/dotnet/winforms/pull/2175","RelatedDescription":"Closed or merged PR \"Disable SDL validation in release/3.1\" (#2175)"},{"Id":"511616761","IsPullRequest":true,"CreatedAt":"2019-10-23T23:57:01","Actor":"wtgodbe","Number":"2173","RawContent":null,"Title":"Fix SDL validation in rel/3.1","State":"closed","Body":"Ports https://github.com/dotnet/winforms/pull/2150 to release/3.1 to unblock the preview2 builds.\r\n\r\nCC @AdamYoblick @RussKie \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2173)","Url":"https://github.com/dotnet/winforms/pull/2173","RelatedDescription":"Closed or merged PR \"Fix SDL validation in rel/3.1\" (#2173)"},{"Id":"511462757","IsPullRequest":false,"CreatedAt":"2019-10-23T17:17:36","Actor":"zsd4yr","Number":"2172","RawContent":null,"Title":"Write test(s) to ensure that all TypeConverter and Editor Attributes on internals are properly routed","State":"open","Body":"For each `TypeConverter` and `Editor` attribute connecting a type to its type converter or editor by a fully qualified string, we need a `TypeForwardTo` attribute in the corresponding facade. This is required as GenFacades will not automatically generate `TypeForwardTo` statements for internals. \r\n\r\nPlease see https://github.com/dotnet/winforms/pull/2078#discussion_r337787642 for more details on the history of this need and discussion.\r\n\r\nSuggestion: write a unit test that rolls over every assembly we own and uses reflection to determine which internal types, properties, and methods have these attributes. Then, for each of those that exist, determine whether or not that type was in an assembly that we now type forward from. If so, ensure that there is a manually added `TypeForwardTo` statement in the facades.","Url":"https://github.com/dotnet/winforms/issues/2172","RelatedDescription":"Open issue \"Write test(s) to ensure that all TypeConverter and Editor Attributes on internals are properly routed\" (#2172)"},{"Id":"511460169","IsPullRequest":false,"CreatedAt":"2019-10-23T17:12:05","Actor":"zsd4yr","Number":"2171","RawContent":null,"Title":"TypeConverter Attribute over DataGridViewColumn.DataPropertyName should resolve to System.Design","State":"open","Body":"https://github.com/dotnet/winforms/blob/b34582761bea089eb0d19aba8e43c4b90d90c98e/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewColumn.cs#L186-L194\r\n\r\nThis attribute was changed to resolve to the new assembly of this type in #1545 but as pointed out in https://github.com/dotnet/winforms/pull/2078#discussion_r337787642 this is not the approach we should take.\r\n\r\nFor a fix, we need to:\r\n* change the `AssembleRef` back to `SystemDesign`\r\n* manually add a TypeForwardTo for this internal type\r\n* test\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2171","RelatedDescription":"Open issue \"TypeConverter Attribute over DataGridViewColumn.DataPropertyName should resolve to System.Design\" (#2171)"},{"Id":"511418063","IsPullRequest":true,"CreatedAt":"2019-10-23T15:49:59","Actor":"hughbe","Number":"2170","RawContent":null,"Title":"Cleanup OLEIVERB/OLECLOSE enums","State":"open","Body":"## Proposed Changes\r\n- Cleanup OLEIVERB\r\n- Cleanup OLECLOSE\r\n- Add AxHost.DoVerb tests\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2170)","Url":"https://github.com/dotnet/winforms/pull/2170","RelatedDescription":"Open PR \"Cleanup OLEIVERB/OLECLOSE enums\" (#2170)"},{"Id":"511377544","IsPullRequest":true,"CreatedAt":"2019-10-23T14:50:42","Actor":"hughbe","Number":"2169","RawContent":null,"Title":"Cleanup ProgressBar code","State":"open","Body":"## Proposed Changes\r\n- Rename `ProgressBar` fields\r\n- Follow coding guidelines in `ProgressBar`\r\n\r\nTested by #2141 \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2169)","Url":"https://github.com/dotnet/winforms/pull/2169","RelatedDescription":"Open PR \"Cleanup ProgressBar code\" (#2169)"},{"Id":"511286490","IsPullRequest":true,"CreatedAt":"2019-10-23T12:22:46","Actor":"M-Lipin","Number":"2167","RawContent":null,"Title":"WIP: Fixing Narrator caps navigation to take into account control tab index","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2164 \r\n\r\n\r\n## Proposed changes\r\n\r\n- [x] Adding UIA navigation to the Form control;\r\n- [ ] Adding UIA support for Control;\r\n- [ ] Adding UIA previous and next navigation to base Control.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Narrator caps navigation will take into account control tab index.\r\n- There will be no mismatch between common tab navigation accompanied with Narrator announcement and Narrator caps navigation.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Middle risk as requires switching to UIA for all controls. Need to rebase on 5.0.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/67392238-da762f00-f5a8-11e9-8795-de00368c0cfe.png)\r\n\r\n\r\n### After\r\n\r\n* To be added (work in progress).\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n* To be tested.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n* To be added.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n* To be added.\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2167)","Url":"https://github.com/dotnet/winforms/pull/2167","RelatedDescription":"Open PR \"WIP: Fixing Narrator caps navigation to take into account control tab index\" (#2167)"},{"Id":"511272386","IsPullRequest":true,"CreatedAt":"2019-10-23T11:54:19","Actor":"vladimir-krestov","Number":"2165","RawContent":null,"Title":"WIP: Porting System.ComponentModel.Design.DateTimeEditor","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2019\r\nRelated issue: #1115\r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\n## Proposed changes\r\n\r\n- Add System.ComponentModel.Design.DateTimeEditor class\r\n- Make code refactoring\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Changed DateTime editor to compliance with .Net 4.8.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- TextBox editor:\r\n![image](https://user-images.githubusercontent.com/49272759/67389897-31c5d080-f5a4-11e9-91a4-5e93fb0717dd.png)\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n- DateTime editor:\r\n![image](https://user-images.githubusercontent.com/49272759/67385877-99781d80-f59c-11e9-847f-3b0b5f911ed4.png)\r\n\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual UI testing\r\n\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net Core version: 3.1.0-preview1.19458.7\r\n- Microsoft Windows [Version 10.0.18362.418]\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2165)","Url":"https://github.com/dotnet/winforms/pull/2165","RelatedDescription":"Open PR \"WIP: Porting System.ComponentModel.Design.DateTimeEditor\" (#2165)"},{"Id":"511254605","IsPullRequest":false,"CreatedAt":"2019-10-23T11:17:38","Actor":"M-Lipin","Number":"2164","RawContent":null,"Title":"Narrator focus is not moving in proper logical order when user is navigating by using caps + arrow keys (tab index is ignored)","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nNarrator focus is not moving in proper logical order when user is navigating by using caps + arrow keys: Narrator goes thru the controls in order which is the order of controls being added to the Controls collection of the form in design time (order of controls can be corrected by manual changing the order of adding the control to the collection of child controls.\r\n\r\n**Actual behavior:**\r\n![image](https://user-images.githubusercontent.com/23213980/67387124-e3620300-f59e-11e9-99a5-a8668018df23.png)\r\n\r\n**Expected behavior:**\r\nNarrator caps + arrow navigation should take into account control tab index and accessible hierarchy should also take into account control tab index. \r\n\r\n**Minimal repro:**\r\n* Create WinForms Application with one form\r\n* Add TextBox1 to the bottom part of the form\r\n* Add TextBox2 to the top part of form\r\n* Add TextBox3 to the middle part of form\r\n* Set tab index of TextBox2 to 1\r\n* Set tab index of TextBox3 to 2\r\n* Set tab index of TextBox1 to 3\r\n* Run the app and navigate using Narrator.\r\n* Observe Narrator caps + arrow right navigation goes firstly to TextBox1 -> TextBox2 -> TextBox3, but should go accordingly to tab index TextBox2 -> TextBox3 -> TextBox1 ","Url":"https://github.com/dotnet/winforms/issues/2164","RelatedDescription":"Open issue \"Narrator focus is not moving in proper logical order when user is navigating by using caps + arrow keys (tab index is ignored)\" (#2164)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-25T05:31:02.8725646Z","RunDurationInMilliseconds":881}