{"Data":{"GitHubIssues":{"Issues":[{"Id":"345484169","IsPullRequest":false,"CreatedAt":"2018-07-28T22:39:48","Actor":"vertonghenb","Number":"1224","RawContent":null,"Title":"Set @layout null","State":"open","Body":"Currently it's not possible to set a component's layout to null\r\nIn Razor we used to do something like this:\r\n```\r\n@{\r\nLayout = null\r\n}\r\n```\r\n\r\nIn Blazor we should be able to do something like this:\r\n`@layout null`\r\n\r\nThe workaround is to create an EmptyLayout component which is used. ","Url":"https://github.com/aspnet/Blazor/issues/1224","RelatedDescription":"Open issue \"Set @layout null\" (#1224)"},{"Id":"345477024","IsPullRequest":false,"CreatedAt":"2018-07-28T20:35:09","Actor":"Andrzej-W","Number":"1223","RawContent":null,"Title":"Server-side Blazor 0.5.1 doesn't update active class on NavLink element","State":"open","Body":"I have just published \"default\" server side application to Azure. I have made only one change in WeatherForecastService.cs\r\n```c#\r\nreturn Task.FromResult(Enumerable.Range(1, 500).Select(index => new WeatherForecast\r\n```\r\nAs you can see service now returns 500 instead of 5 forecasts.\r\n\r\nWe can click on `Home` and `Counter` menu links and everything works as expected. Try to click on `Fetch data`. At first everything works, but `active` class on `NavLink` (strictly speaking on `<a>` element) is not removed from `Home` or `Counter` and not added to `Fetch data`.\r\n\r\nhttp://blazorserwer.azurewebsites.net/\r\n","Url":"https://github.com/aspnet/Blazor/issues/1223","RelatedDescription":"Open issue \"Server-side Blazor 0.5.1 doesn't update active class on NavLink element\" (#1223)"},{"Id":"345455861","IsPullRequest":false,"CreatedAt":"2018-07-28T15:15:58","Actor":"chris-ray","Number":"1222","RawContent":null,"Title":"Server-side blazor needs to handle reconnection of websocket","State":"open","Body":"If after a delay, or a lost network connection the websocket disconnects. It seems it will never reconnect.\r\n\r\n![image](https://user-images.githubusercontent.com/4673182/43357925-3038f85a-924f-11e8-981f-1b5cc50086c1.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1222","RelatedDescription":"Open issue \"Server-side blazor needs to handle reconnection of websocket\" (#1222)"},{"Id":"345396287","IsPullRequest":false,"CreatedAt":"2018-07-28T11:27:28","Actor":"gvatsov","Number":"1220","RawContent":null,"Title":"Is it possible to trigger UI changes from the server's background worker?","State":"closed","Body":"Hello,\r\nToday is the day I understood about existence of Blazor and I read the documentations and running some demo projects all day long. Great idea, guys. Thank you!\r\nI've read in the [ASP.NET blog](https://blogs.msdn.microsoft.com/webdev/2018/07/25/blazor-0-5-0-experimental-release-now-available/) the following: \r\n\r\n> Blazor 0.5.0 takes the out-of-process model for Blazor and streeeetches it over a network connection so that you can run Blazor on the server. With Blazor 0.5.0 you can run your Blazor components server-side on .NET Core while UI updates, event handling, and JavaScript interop calls are handled over a SignalR connection.\r\n\r\n \r\nThe problem is I can't find any documentation how this is supposed to work. Would you assist me where should I look for more details how to implement this. My scenario includes a background worker which using SignalR to add some items to the client. I wonder if this is possible at this state of the project, because a few lines above in the same post it is said: \r\n\r\n> For example, you might run Blazor in a Web Worker thread so that it runs separately from the UI thread. Events would get pushed from the UI thread to the Blazor worker thread, and Blazor would push UI updates to the UI thread as needed. This scenario isn't supported yet, but it's something Blazor was designed to handle.\r\n\r\n\r\nI honestly can't tell the difference of these two statements, so any help would be greatly appreciated.\r\nThanks and keep the good work going :)\r\nGeorgi","Url":"https://github.com/aspnet/Blazor/issues/1220","RelatedDescription":"Closed issue \"Is it possible to trigger UI changes from the server's background worker?\" (#1220)"},{"Id":"345434765","IsPullRequest":false,"CreatedAt":"2018-07-28T09:25:18","Actor":"uazo","Number":"1221","RawContent":null,"Title":"[Server side] memory leak: invalid disposed IdsEntry in OutOfProcessRenderBatch","State":"open","Body":"With server side Blazor, the out of process render returns invalid id values for disposing component and event handler.\r\n\r\n![image](https://user-images.githubusercontent.com/29201891/43355191-89886dce-9258-11e8-99f0-96dae0128397.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1221","RelatedDescription":"Open issue \"[Server side] memory leak: invalid disposed IdsEntry in OutOfProcessRenderBatch\" (#1221)"},{"Id":"345393991","IsPullRequest":false,"CreatedAt":"2018-07-27T23:30:10","Actor":"Andrzej-W","Number":"1219","RawContent":null,"Title":"Experiment: Blazor Client vs Server performance","State":"open","Body":"Default Blazor application is relatively simple, but for those interested I have just published two versions:\r\n\r\nhttp://blazorserwer.azurewebsites.net/ (blazorserver name is already taken)\r\nhttp://blazorclient.azurewebsites.net/\r\n\r\nBoth applications are in the same S1 plan in Western Europe data centre. Blazor version 0.5.1.\r\n\r\nWhat is worth testing?\r\n1. Click on `Home` and `Counter` menu. In Blazor client version there is no internet transmission at all. In server version `click` is transmitted to the server and server responds with updated page. About 1.5 - 2 KB.\r\n2. You can also click on `Click me` button in `Counter` page. Yet again no transmission in client version and about 600 bytes in server version on every click.\r\n3. Select `Fetch data`. In client version data is transmitted from the server in JSON format - about 5 KB. In server version we receive 26 KB. I have increased number of items to 50.\r\n\r\nIn my opinion server version looks responsive. It is normal that some transmission is required in experiment number 1 and 2. **But I think that in experiment number 3 server version transmits to much data.** If I understand correctly server has to send whole table in HTML format. This table is very simple:\r\n```html\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Date</th>\r\n                <th>Temp. (C)</th>\r\n                <th>Temp. (F)</th>\r\n                <th>Summary</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n                <tr>\r\n                    <td>7/28/2018</td>\r\n                    <td>28</td>\r\n                    <td>0</td>\r\n                    <td>Freezing</td>\r\n                </tr>\r\n                ~~~~\r\n```\r\nSingle table row has about 65-70 characters. Multiply this by 50, add ~200 bytes for page header and first paragraph, and we are well below 5 KB. Why do you need 26 KB to send it.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1219","RelatedDescription":"Open issue \"Experiment: Blazor Client vs Server performance\" (#1219)"},{"Id":"345392923","IsPullRequest":false,"CreatedAt":"2018-07-27T23:22:09","Actor":"galvesribeiro","Number":"1218","RawContent":null,"Title":"Allow internal types to be invoked by JavaScript interop","State":"open","Body":"We should be able to mark `public` methods on `internal` types as `[JSInvokable]` since most of the lib developer, like myself, don't want to expose internal types to the end user.\r\n\r\nI know that there is the idea that `JSInvokable` is inherently `public` and that mislead the idea that the types using it should be as well. I also know that you can hide a member with `EditorBrowseableAttribute(false)`, but that is just an IDE thing and not truly protecting internal APIs from misuse.\r\n\r\nSo, please consider change the scan logic to also look into `internal` types.\r\n\r\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1218","RelatedDescription":"Open issue \"Allow internal types to be invoked by JavaScript interop\" (#1218)"},{"Id":"345322083","IsPullRequest":false,"CreatedAt":"2018-07-27T18:22:52","Actor":"chucker","Number":"1217","RawContent":null,"Title":"Chrome debug proxy apparently _requires_ to load debug symbols for all referenced assemblies","State":"open","Body":"(See also #1199?)\r\n\r\nDebugging a Blazor project in Chrome as described in the 0.5 release notes fails as soon as a DLL is referenced for which debug symbols don't exist. (In my case, I had BlazorExtensions.Logging referenced.)\r\n\r\nMono/Cecil reports an error of:\r\n\r\n```\r\ngot exception System.AggregateException: One or more errors occurred. (Format of the executable (.exe) or library (.dll) is invalid.) ---> System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n```\r\n\r\nAnd Chrome's debug session closes immediately, with:\r\n\r\n>Debugging connection was closed. reason: WebSocket disconnected\r\n\r\nBlazor should probably skip trying to debug assemblies for which debug symbols cannot be loaded.\r\n\r\nThis is distinct from #1199 in that @galvesribeiro hadn't actually even _tried_ to debug code (but I did), in which case loading debug symbols probably shouldn't happen at all.","Url":"https://github.com/aspnet/Blazor/issues/1217","RelatedDescription":"Open issue \"Chrome debug proxy apparently _requires_ to load debug symbols for all referenced assemblies\" (#1217)"},{"Id":"345321896","IsPullRequest":false,"CreatedAt":"2018-07-27T18:22:14","Actor":"SteveSandersonMS","Number":"1216","RawContent":null,"Title":"Referencing Microsoft.AspNetCore.Blazor.Server disables server-side tag helpers","State":"open","Body":"Repro:\r\n\r\n * Create a Blazor hosted or server-side app\r\n * In the server project, make it render a Razor page on the server (add `AddMvc` if not already present, then put `Index.cshtml` into a `Pages` directory)\r\n * Add `@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers` if you don't have it in `_ViewImports.cshtml` already\r\n * Observe that if you have syntax like `<img src=\"~/blah.jpg\" />`, it does *not* resolve the `~` - it literally emits the URL `~/blah.jpg`\r\n\r\nI expect that Blazor's MSBuild targets are hijacking the server-side Razor compilation process, eliminating the normal server-side tag helpers, or something of that sort.","Url":"https://github.com/aspnet/Blazor/issues/1216","RelatedDescription":"Open issue \"Referencing Microsoft.AspNetCore.Blazor.Server disables server-side tag helpers\" (#1216)"},{"Id":"344874055","IsPullRequest":false,"CreatedAt":"2018-07-27T17:38:27","Actor":"uazo","Number":"1198","RawContent":null,"Title":"Issue on htmlblock render","State":"closed","Body":"Consider this (please note: all in 1 line without space)\r\n```\r\n<NavLink class=\"nav-link\" href=\"fetchdata\"><span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Fetch data</NavLink></li>\r\n```\r\n\r\nextension will compile with\r\n\r\n```\r\nbuilder.OpenComponent<Microsoft.AspNetCore.Blazor.Routing.NavLink>(48);\r\nbuilder.AddAttribute(49, \"class\", \"nav-link\");\r\nbuilder.AddAttribute(50, \"href\", \"fetchdata\");\r\nbuilder.AddMarkupContent(51, \"<span class=\\\"oi oi-list-rich\\\" aria-hidden=\\\"true\\\"></span>\");\r\nbuilder.AddAttribute(52, \"ChildContent\", (Microsoft.AspNetCore.Blazor.RenderFragment)((builder2) => {\r\n    builder2.AddContent(53, \" Fetch data\");\r\n}\r\n));\r\nbuilder.CloseComponent();\r\n```\r\n\r\nthat's incorrect because add an attribute after a content.","Url":"https://github.com/aspnet/Blazor/issues/1198","RelatedDescription":"Closed issue \"Issue on htmlblock render\" (#1198)"},{"Id":"344997310","IsPullRequest":false,"CreatedAt":"2018-07-27T17:38:19","Actor":"MarkStega","Number":"1203","RawContent":null,"Title":"Bootstrap menu not rendering properly in Blazor 0.5","State":"closed","Body":"The following code in my navmenu.cshtml fails to render properly. Attached are two images. navbar-properlyrendered.png & navbar-blazorrendered.png show the odd styling (notice the layout of the three links) in Blazor. \r\n\r\nThe proper rendering is in a static html page with the bootstrap css/js imports. The Blazor rendering is from a project derived from the template produced Blazor client.\r\n\r\n`nav class=\"navbar navbar-expand-md bg-dark navbar-dark\"\r\n\r\n    a class=\"navbar-brand\" href=\"#\"&gt;Navbar&lt;/a\r\n\r\n    button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\"\r\n\r\n        span class=\"navbar-toggler-icon\"\r\n\r\n    /button\r\n\r\n    div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\"\r\n\r\n        ul class=\"navbar-nav\"\r\n\r\n            li class=\"nav-item\"\r\n\r\n                a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a\r\n\r\n            /li\r\n\r\n            li class=\"nav-item\"\r\n\r\n                a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a\r\n\r\n            /li\r\n\r\n            li class=\"nav-item\"\r\n\r\n                a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a\r\n\r\n            /li\r\n\r\n        /ul\r\n\r\n    /div\r\n\r\n/nav\r\n\r\nNAVBAR-PROPERLY-RENDERED\r\n![navbar-properly rendered](https://user-images.githubusercontent.com/634561/43286679-cec4be56-90f0-11e8-9f3f-eec2389c869b.png)\r\n\r\nNAVBAR-BLAZOR-RENDERED\r\n![navbar-blazor rendered](https://user-images.githubusercontent.com/634561/43286678-ceb8ebbc-90f0-11e8-9ad0-457005cc81b0.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1203","RelatedDescription":"Closed issue \"Bootstrap menu not rendering properly in Blazor 0.5\" (#1203)"},{"Id":"345013561","IsPullRequest":false,"CreatedAt":"2018-07-27T17:38:01","Actor":"stavroskasidis","Number":"1204","RawContent":null,"Title":"@ChildContent issues with blazor 0.5.0","State":"closed","Body":"I discovered a bug with **@ChildContent**, causing it to not render properly. Here is how to reproduce (in Blazor client-side/wasm) :\r\n\r\n\r\n\r\n#### _MyComponent.cshtml_\r\n```html\r\n<div>\r\n    @ChildContent\r\n</div>\r\n@functions{\r\n    [Parameter] RenderFragment ChildContent { get; set; }\r\n}\r\n```\r\n\r\n#### _Index.cshtml_\r\n```html\r\n<div>\r\n     <!-- this is not being rendered -->\r\n    <MyComponent><i class=\"test\">I am not being rendered</i></MyComponent> \r\n\r\n     <!-- this is being rendered (notice the space at the beginning of the content) -->\r\n    <MyComponent> <i class=\"test\">I am rendered</i></MyComponent>\r\n</div>\r\n```\r\n\r\n#### _Output_\r\n```html\r\n<div>\r\n    \r\n    <!--!--><div>\r\n    \r\n</div>\r\n\r\n    \r\n    <!--!--><div>\r\n     <!--!--><i class=\"test\">I am rendered</i>\r\n</div>\r\n</div>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1204","RelatedDescription":"Closed issue \"@ChildContent issues with blazor 0.5.0\" (#1204)"},{"Id":"345298595","IsPullRequest":true,"CreatedAt":"2018-07-27T17:13:50","Actor":"SteveSandersonMS","Number":"1214","RawContent":null,"Title":"Fix JS interop returning arrays","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1214","RelatedDescription":"Closed or merged PR \"Fix JS interop returning arrays\" (#1214)"},{"Id":"345015187","IsPullRequest":false,"CreatedAt":"2018-07-27T17:12:40","Actor":"galvesribeiro","Number":"1205","RawContent":null,"Title":"Failure to serialize Array on Async interop","State":"closed","Body":"Hello folks,\r\n\r\nWhile updating the Storage extension to 0.5.0, I've found a potential bug with the *async* interop.\r\n\r\nIf I send an an array, lets say `WeatherForecast[]` from C# -> JS, it works just fine. When JS is sending back an array as return of of a method, the runtime just stops. Nothing happen. No errors, nothing.\r\n\r\nTo reproduce:\r\n\r\nOn a TS/JS:\r\n```typescript\r\n  public GetItem(myArray: any): any {\r\n    return myArray\r\n  };\r\n```\r\n\r\nOn C#:\r\nThat works:\r\n```csharp\r\n        public WeatherForecast[] GetItem(WeatherForecast[] myArray)\r\n        {\r\n            return ((IJSInProcessRuntime)JSRuntime.Current).Invoke<WeatherForecast[]>(\"GetItem\", myArray);\r\n        }\r\n```\r\n\r\nThat *doesn't* works:\r\n```csharp\r\n        public Task<WeatherForecast[]> GetItem(WeatherForecast[] myArray)\r\n        {\r\n            return JSRuntime.Current.InvokeAsync<WeatherForecast[]>(\"GetItem\", myArray);\r\n        }\r\n```\r\n\r\nIn other words... If we call it sync it works, but if we call async, it fail.\r\n\r\nMy first thought was something wrong with the serialization, but that works in the sync mode, so we discarded it.\r\n\r\nWe are suspecting [`endInvokeDotNetFromJS`](https://github.com/aspnet/Blazor/blob/3a27d9b81cad6b3cfa3ca14ba5b8a3453b5d0f03/src/Microsoft.JSInterop/JavaScriptRuntime/src/Microsoft.JSInterop.ts#L198) isn't being caller or is failing somehow. \r\n\r\nI would appreciate any help on that.\r\n\r\nThanks","Url":"https://github.com/aspnet/Blazor/issues/1205","RelatedDescription":"Closed issue \"Failure to serialize Array on Async interop\" (#1205)"},{"Id":"345302048","IsPullRequest":false,"CreatedAt":"2018-07-27T17:12:12","Actor":"Eilon","Number":"1215","RawContent":null,"Title":"The NuGet package description shouldn't be \"package description\" but rather a description of the package","State":"open","Body":"Example: https://www.nuget.org/packages/Microsoft.AspNetCore.Blazor.Server/0.5.0\r\n\r\nBut it affects many or even all of the packages.","Url":"https://github.com/aspnet/Blazor/issues/1215","RelatedDescription":"Open issue \"The NuGet package description shouldn't be \"package description\" but rather a description of the package\" (#1215)"},{"Id":"345045583","IsPullRequest":true,"CreatedAt":"2018-07-27T17:04:50","Actor":"SteveSandersonMS","Number":"1207","RawContent":null,"Title":"Temporarily disable HtmlBlockPass","State":"closed","Body":"We've received a number of bug reports about 0.5.0 having regressions for markup that people are commonly using (#1204, #1203, #1198, #1193). It looks like each of these relate to the new optimization in 0.5.0 that represents static HTML as markup frames.\r\n\r\nIt's not yet totally decided, but one possible way forwards for us would be:\r\n\r\n* Via this PR, temporarily disable the compiler part of markup blocks and release as 0.5.1 tomorrow\r\n   * This wouldn't stop people from using `MarkupString` (etc) as the runtime bits would be left enabled. I don't think any of the bugs above relate to the runtime bits anyway.\r\n   * People just trying to render HTML as normal like before would no longer be affected.\r\n* We also collect precise repro cases for each of the above issues\r\n* We fix any `HtmlBlockPass` issues or any runtime issues and re-enable it in 0.6.0 (or 0.5.2 if we decide to do a further patch).\r\n\r\nWe'll make a final call on this tomorrow morning. cc @rynowak @danroth27 ","Url":"https://github.com/aspnet/Blazor/pull/1207","RelatedDescription":"Closed or merged PR \"Temporarily disable HtmlBlockPass\" (#1207)"},{"Id":"345200191","IsPullRequest":false,"CreatedAt":"2018-07-27T16:10:54","Actor":"MarkStega","Number":"1211","RawContent":null,"Title":"Bootstrap menu not functioning properly in Blazor 0.5","State":"closed","Body":"Extracted from #1203 as I had what should have been two separate issues in the same issue report. See #1203 for the html source.\r\n\r\nIf one encodes a responsive bootstrap menu then two function fail in Blazor. The first is that the menu items disappear before the hamburger appears. The second is that the hamburger menu does nothing.\r\n\r\nBoth issues are due to the lack of the bootstrap required js code.\r\n\r\nIn index.html I replaced\r\n`link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\"`\r\nwith\r\n`link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\r\n\r\nscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\r\n\r\nscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\r\n\r\nscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"`\r\n\r\nThere are less than & greater than symbols starting each line, I haven't figured out how to show html source.\r\n\r\nIn any case, I still have the odd styling, but the hamburger is functional.\r\n\r\nSince the intent is to support bootstrap shouldn't index.html have references to the js (either from local source or  the CDNs) since it is needed for full functionality?","Url":"https://github.com/aspnet/Blazor/issues/1211","RelatedDescription":"Closed issue \"Bootstrap menu not functioning properly in Blazor 0.5\" (#1211)"},{"Id":"345278468","IsPullRequest":false,"CreatedAt":"2018-07-27T15:53:07","Actor":"uazo","Number":"1213","RawContent":null,"Title":"How to retain EventHandlerId","State":"open","Body":"Consider this:\r\n\r\n```\r\n<button class=\"btn btn-primary\"\r\n        onclick=\"@(e => IncrementCount(1))\">\r\n    Click me +1\r\n</button>\r\n\r\n@for (int t = 2; t != 4; t++)\r\n{\r\n    <button class=\"btn btn-primary\"\r\n            onclick=\"@(e => IncrementCount(t))\">\r\n        Click me +@t\r\n    </button>\r\n}\r\n\r\n@functions {\r\n  int currentCount = 0;\r\n\r\n  void IncrementCount(int t)\r\n  {\r\n      currentCount += t;\r\n      this.StateHasChanged();\r\n  }\r\n```\r\n\r\nblazor will generate three `EventHandlerId`. \r\nWhen I press the button, the first `EventHandlerId` is retained (just because the ladba \"point\" at the same address) but the others are simple new labda expression, so blazor will delete and recreate the handler. In a list with many elements and many handler, it's a performance problem.\r\n\r\na way to retain can be:\r\n\r\n```\r\n@for (int t = 2; t != 4; t++)\r\n{\r\n    <button class=\"btn btn-primary\"\r\n            onclick=\"@Action(t, e => IncrementCount(t))\">\r\n        Click me +@t\r\n    </button>\r\n}\r\n\r\n\r\n  Dictionary<MethodInfo, Dictionary<object, Action<UIEventArgs>>>\r\n    _retainedActions = new Dictionary<MethodInfo, Dictionary<object, Action<UIEventArgs>>>();\r\n\r\n  public Action<UIEventArgs> Action<T>(T args1, Action<UIEventArgs> action)\r\n  {\r\n      if (_retainedActions.TryGetValue(action.Method, out var list) == false)\r\n      {\r\n          list = new System.Collections.Generic.Dictionary<object, Action<UIEventArgs>>();\r\n          _retainedActions[action.Method] = list;\r\n      }\r\n\r\n      if (list.TryGetValue(args1, out var value) == false)\r\n      {\r\n          value = (e) => action(e);\r\n          list[args1] = value;\r\n      }\r\n      return value;\r\n  }\r\n```\r\n\r\nother ideas? ","Url":"https://github.com/aspnet/Blazor/issues/1213","RelatedDescription":"Open issue \"How to retain EventHandlerId\" (#1213)"},{"Id":"345160339","IsPullRequest":false,"CreatedAt":"2018-07-27T15:27:16","Actor":"osintsevvladimir","Number":"1210","RawContent":null,"Title":"[Server-side] Property binding does not work in 0.5.0","State":"closed","Body":"Loading property in the KBPButton.cshtml file is always **false**.\r\n\r\nExample:\r\n\r\n**Index.cshtml**\r\n```\r\n@page \"/\"\r\n\r\n<KBPButton Text=\"Test button 1\" Click=\"@ClickHandler\"></KBPButton>\r\n<KBPButton Text=\"Test button 2\" Loading=\"@Loading\"></KBPButton>\r\n\r\n@functions {\r\n\r\n    [Parameter] protected bool Loading { get; set; }\r\n\r\n    public void ClickHandler()\r\n    {\r\n        Loading = !Loading;\r\n    }\r\n}\r\n```\r\n\r\n**KBPButtonComponent.cs**\r\n```\r\npublic abstract class KBPButtonComponent : BlazorComponent\r\n{\r\n    [Parameter]\r\n    protected string Text { get; set; }\r\n\r\n    [Parameter]\r\n    public bool Loading { get; set; }\r\n\r\n    [Parameter]\r\n    protected Action<bool> LoadingChanged { get; set; }\r\n\r\n    [Parameter]\r\n    protected Action Click { get; set; }\r\n\r\n    protected void ClickHandler()\r\n    {\r\n        Click?.Invoke();\r\n    }\r\n}\r\n```\r\n\r\n**KBPButton.cshtml**\r\n```\r\n@inherits Controls.KBPButtonComponent;\r\n\r\n<a class=\"kbpbutton\" onclick=\"@ClickHandler\">\r\n    @if (Loading)\r\n    {\r\n        <span class=\"kbpbutton__loading\">\r\n            <i class=\"fa fa-spinner fa-spin\"></i>\r\n        </span>\r\n    }\r\n    @Text\r\n</a>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1210","RelatedDescription":"Closed issue \"[Server-side] Property binding does not work in 0.5.0\" (#1210)"},{"Id":"345238175","IsPullRequest":false,"CreatedAt":"2018-07-27T14:02:22","Actor":"uazo","Number":"1212","RawContent":null,"Title":"Blazor Server and Client side and Javascript","State":"open","Body":"Blazor Server and Client side, yes, and now?\r\n\r\n### PRO CLIENT SIDE\r\n\r\n- Speed? **N/A** (firefox is ok, chrome no)\r\nmono interpret is slow, and there are no forecasts about compiling with AOT or directly in WASM\r\n\r\n- Quick startup? **No**\r\n\r\n- Remove JS? **No**\r\nWASM does not have access to the DOM yet, so JS is always in the way\r\n\r\n- Does it work anywhere? **No**\r\nOnly latest browsers and devices\r\n\r\n\r\n### PRO SERVER SIDE\r\n\r\n- Speed? **Yup**\r\nThe same project in Server Mode is a splinter\r\n\r\n- Quick startup? **Yup**\r\nDownload only static elements.\r\n\r\n- Remove JS? **No**\r\nJS is always there. And accessing the DOM remotely (when it will be implemented) will give performance problems certainty.\r\n\r\n- Does it work anywhere? **Yup**\r\nEureka!\r\n\r\n\r\nin the medium term, therefore, for the Blazor development of enterprise applications, the Server Mode is definitely to be preferred, at least until WASM will have access to the DOM (without js) and Mono will permit it, and always that the compiler in the meantime will have WASM targets (because current performance is really low when compared to javascript).\r\n\r\nBut the biggest problem with Server Mode is to interact with the DOM to create the interfaces, which is essential. Developing a new UI library with Blazor without javascript really means starting all over again (unless there are tools from ts to c #, do they exist?).\r\n\r\nCurrently with Blazor it is not possible to reuse ready-made UI libraries, developed in javascript, except for very complicated DOTNET-JS calls (just thinking about it I get a headache).\r\n\r\nWhat is missing is the ability to abstract the js portion of blazor making it extensible using typescript, to allow a dotnet side component (local or remote) to have associated a custom component in the javascript side.\r\n\r\nAt this address https://uazo.github.io/BlazorFX/StandaloneApp/ an application test that uses DevExpress components for rendering: the blazor side components are dotnet (without any reference to interop with js), while rendering is done from javascript elements (DevExtreme from the react version). The dotnet component and the javascript component talks through exchange of custom properties and events (like react). In effect, the glue is a middleware beetween blazor and react, simple to do because DevExtreme is not a native react library but the implementation is simple.\r\n\r\nSo what do you say? Have you ever thought about it? It could also be a temporary solution, which would not deny in future having even full dotnet components (as today for react, not all components are full react made)\r\n\r\nFor those who want the repo is available with all the changes to the base code of blazor (https://github.com/uazo/Blazor/tree/remove-custom-tag).","Url":"https://github.com/aspnet/Blazor/issues/1212","RelatedDescription":"Open issue \"Blazor Server and Client side and Javascript\" (#1212)"},{"Id":"345118349","IsPullRequest":true,"CreatedAt":"2018-07-27T07:22:04","Actor":"uazo","Number":"1209","RawContent":null,"Title":"fix @ChildContent in HtmlBlock codegen","State":"open","Body":"fix #1198 and I think also #1204, ref #1207","Url":"https://github.com/aspnet/Blazor/pull/1209","RelatedDescription":"Open PR \"fix @ChildContent in HtmlBlock codegen\" (#1209)"},{"Id":"345046058","IsPullRequest":false,"CreatedAt":"2018-07-27T00:12:49","Actor":"vertonghenb","Number":"1208","RawContent":null,"Title":"[Server Side] Add Support for cross Browser tab state per user","State":"closed","Body":"First of all the serversideblazor rocks, this is rather an enhancement.\r\n\r\nIn modern SPA's people tend to use the `localstorage `or cookies to store cross browser tab data for a user. Since we're working on the server I can image we can store this data cross tab via DI.\r\n\r\nCurrently we can store user data of the client side by creating an `AppState ` class and adding it to DI as a Scoped Service, which is stored per user per tab. However if we could add a class or service which is cross tab we can eliminate the use of localstorage. \r\n\r\nBasically add a class per user per browser tab/connection in DI, is it even possible?","Url":"https://github.com/aspnet/Blazor/issues/1208","RelatedDescription":"Closed issue \"[Server Side] Add Support for cross Browser tab state per user\" (#1208)"},{"Id":"345033852","IsPullRequest":false,"CreatedAt":"2018-07-26T23:00:00","Actor":"chanan","Number":"1206","RawContent":null,"Title":"Components (Pages) randomly not building in 0.5.0","State":"open","Body":"Not sure if I can reproduce this in a smaller project.\r\n\r\nI have a project: https://github.com/chanan/BlazorStrap that is a Blazor library plus a site the uses that library. The project was upgraded from 0.3.0 -> 0.5.0 (Skipped of 0.4.0 due to a blocking bug in 0.4.0). After upgrading both projects, I did a clean and then a build from within Visual Studio. I started checking the site and I noticed that many Components that have routes give me this error:\r\n\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.InvalidOperationException: 'Router' cannot find any component with a route for '/alerts2'.\r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x1c7cb70 + 0x000b4> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1be5e90 + 0x0003e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6cfb0 + 0x00082> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6ce20 + 0x0008a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1b6cb00 + 0x000ca> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1b6c298 + 0x0024a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1b65ea8 + 0x000a6> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b63350 + 0x000b8> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b62f78 + 0x00040> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b62718 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b54240 + 0x0006e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b53f28 + 0x0003a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b53e30 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1b47360 + 0x000e0> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1aef5d0 + 0x00090> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ad10d0 + 0x00078> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ab57c8 + 0x0010c> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ab4f48 + 0x00020> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Sample.Program.Main (System.String[] args) [0x00001] in C:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Program.cs:9 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x1c7cb70 + 0x000b4> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1be5e90 + 0x0003e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6cfb0 + 0x00082> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6ce20 + 0x0008a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1b6cb00 + 0x000ca> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1b6c298 + 0x0024a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1b65ea8 + 0x000a6> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b63350 + 0x000b8> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b62f78 + 0x00040> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b62718 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b54240 + 0x0006e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b53f28 + 0x0003a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b53e30 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1b47360 + 0x000e0> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1aef5d0 + 0x00090> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ad10d0 + 0x00078> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ab57c8 + 0x0010c> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ab4f48 + 0x00020> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Sample.Program.Main (System.String[] args) [0x00001] in C:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Program.cs:9 \r\n    at Object.callMethod (blazor.webassembly.js:1)\r\n    at Object.callEntryPoint (blazor.webassembly.js:1)\r\n    at blazor.webassembly.js:1\r\n    at blazor.webassembly.js:1\r\n    at Object.next (blazor.webassembly.js:1)\r\n    at i (blazor.webassembly.js:1)\r\ncallMethod @ blazor.webassembly.js:1\r\ncallEntryPoint @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\nr @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\nn @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n``` \r\n\r\nYou will note that the route is /alerts2 - that is due to try to change the route from /alerts to a different route and see if it worked. It didnt.\r\n\r\nLooking in the obj folder I see the Pages folder but the Alerts.g.i.cs and Alerts.g.cs are missing (as well as some others, but some are there). \r\n\r\nI removed everything from Alerts.cshtml so it now looks like so:\r\n\r\n```\r\n@page \"/alerts2\"\r\n\r\n<h1>Alerts</h1>\r\n```\r\n\r\nThe build output shows no error.\r\n\r\nHowever curiously, the error list does show:\r\n\r\n```\r\nError\tfatal-error\t(ESLint) ESLint encountered a parsing error.\tSample JavaScript Content Files\tC:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Pages\\Alerts.cshtml\t1\tActive\r\n```\r\n\r\nWhich makes no sense since I don't have anything that file at the moment.\r\n\r\nNo sure how I can get a reproduction sample other than I can upload to my repo the current state of BlazorStrap","Url":"https://github.com/aspnet/Blazor/issues/1206","RelatedDescription":"Open issue \"Components (Pages) randomly not building in 0.5.0\" (#1206)"},{"Id":"344994789","IsPullRequest":false,"CreatedAt":"2018-07-26T20:31:58","Actor":"chris-ray","Number":"1202","RawContent":null,"Title":"Run server-side blazor on full framework (net461)","State":"open","Body":"Currently we can run ASP.NET Core 2 apps targeting the full framework. This allows me to wrap up some of my legacy code that has full-framework dependencies and put a nice ASP.NET Core 2 web api around it.\r\n\r\nIt would be great if Server-Side blazor was allowed to run on full framework for the same reason. Are there any specific impediments to supporting this? ","Url":"https://github.com/aspnet/Blazor/issues/1202","RelatedDescription":"Open issue \"Run server-side blazor on full framework (net461)\" (#1202)"},{"Id":"344952356","IsPullRequest":false,"CreatedAt":"2018-07-26T19:54:58","Actor":"stroker5","Number":"1201","RawContent":null,"Title":"Changing code in Chrome Inspector bug","State":"closed","Body":"Hello! I have discovered a stranger behavior on the development.\r\n\r\nSteps:\r\nCreate a simple form with bindings and events.\r\nDelete a line of html code, for experimental design purpose, for example a `<br>`\r\nNavigate to other page.\r\n\r\nThe console throws the following error:\r\nblazor.server.js:23 Uncaught TypeError: Cannot read property 'removeChild' of null\r\n    at e (blazor.server.js:23)\r\n    at e (blazor.server.js:23)\r\n    at Object.e [as removeLogicalChild] (blazor.server.js:23)\r\n    at e.applyEdits (blazor.server.js:23)\r\n    at e.updateComponent (blazor.server.js:23)\r\n    at Object.t.renderBatch (blazor.server.js:16)\r\n    at e.<anonymous> (blazor.server.js:38)\r\n    at blazor.server.js:16\r\n    at Array.forEach (<anonymous>)\r\n    at e.invokeClientMethod (blazor.server.js:16)\r\n\r\nNow the form appears in all the pages...\r\n![image](https://user-images.githubusercontent.com/8848170/43280249-d48b6d26-90ff-11e8-934d-049a3ec62c9a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/8848170/43280273-e3f67a4e-90ff-11e8-9075-eeda60e34077.png)\r\n\r\nThanks! 😄 ","Url":"https://github.com/aspnet/Blazor/issues/1201","RelatedDescription":"Closed issue \"Changing code in Chrome Inspector bug\" (#1201)"},{"Id":"344853535","IsPullRequest":false,"CreatedAt":"2018-07-26T19:00:54","Actor":"danielmeza","Number":"1197","RawContent":null,"Title":"DotNet.invokeMethodAsync faild when invoke Task<T> method on c# code","State":"closed","Body":"When I try to call a async generic method from JavaScript I get this error: The assembly '{assemblyName}' does not contain a public method with [{nameof(JSInvokableAttribute)}(\\\"{methodIdentifier}\\\")].\r\n`\r\n        [JSInvokable]\r\n        public static Task<string> GetAccessToken(string connectionId)\r\n`\r\nits related to ScanAssemblyForCallableMethods in https://github.com/aspnet/Blazor/blob/master/src/Microsoft.JSInterop/DotNetDispatcher.cs  \r\n\r\nIt's a missing feature on this implementation?\r\nAnd if it's, is someone working on implementing?","Url":"https://github.com/aspnet/Blazor/issues/1197","RelatedDescription":"Closed issue \"DotNet.invokeMethodAsync faild when invoke Task<T> method on c# code\" (#1197)"},{"Id":"344760837","IsPullRequest":false,"CreatedAt":"2018-07-26T15:56:00","Actor":"skyne98","Number":"1195","RawContent":null,"Title":"DLLImport Native Libraries ","State":"closed","Body":"Hey everyone!\nI was wondering if it is possible already, or theoretically should be possible to use native LLVM WASM backend, or Emscripten to allow the app to use it's required native binaries?\n\nAs far as I understand, that should be possible to achieve and will allow to easily use already existing C# libraries such as LLVMSharp in the browser.\n\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1195","RelatedDescription":"Closed issue \"DLLImport Native Libraries \" (#1195)"},{"Id":"344900295","IsPullRequest":false,"CreatedAt":"2018-07-26T15:44:58","Actor":"radek7210","Number":"1200","RawContent":null,"Title":"Chrome: ASP.NET Core Hosted Blazor app does not start if Windows authentication is enabled (Blazor 0.5.0)","State":"open","Body":"Scenario: I have a Blazor app created using the „ASP.NET Core hosted“ template, using IISExpress to run the app. On the server project, I have the „Enable Windows authentication“ checkbox ticked, ie. the corresponding part of lauchSettings.json file is\r\n```code\r\n\"iisSettings\": {\r\n    \"windowsAuthentication\": true,\r\n    \"anonymousAuthentication\": false,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:8000/\",\r\n      \"sslPort\": 0\r\n    }\r\n  }\r\n```\r\n\r\nWhen I try to launch the application in Chrome, the Console shows an error and the application will not start:\r\n\r\n```code\r\nblazor.webassembly.js:1 GET http://localhost:8000/_framework/blazor.boot.json 401 (Unauthorized)\r\nblazor.webassembly.js:1 Uncaught (in promise) SyntaxError: Unexpected token < in JSON at position 0\r\n    at Object.<anonymous> (blazor.webassembly.js:1)\r\n    at blazor.webassembly.js:1\r\n    at Object.next (blazor.webassembly.js:1)\r\n    at i (blazor.webassembly.js:1)\r\n```\r\n\r\nThe “Network” tab indicates a problem with loading the blazor.boot.json file using the “fetch” method (screenshot attached).\r\n![chromefetcherror](https://user-images.githubusercontent.com/41726008/43272916-6e5f7bcc-90fb-11e8-9fdf-3eab4083d6a6.png)\r\n\r\n \r\n\r\nThe problem started to show after updating Blazor to 0.5.0. Before the update, all was working fine.\r\nI’ve tried many things to troubleshoot the issue:\r\n- in Firefox and in Edge, the same app works fine\r\n- I have tried to set-up CORS middleware on the server-side, no luck (but then I am not sure if this issue is related to CORS at all)\r\n- if I run the Fiddler debugging proxy sitting between Chrome and the IISExpress server, the issue miraculously disappears and the application launches fine even in Chrome (after disabling Fiddler, the issue re-appears)\r\n- tried to empty Chrome cache, disabled all extensions in Chrome, disabled all unnecessary middlewares in the server app -> no luck\r\n\r\nDo you have any suggestions what might be wrong? Thanks.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1200","RelatedDescription":"Open issue \"Chrome: ASP.NET Core Hosted Blazor app does not start if Windows authentication is enabled (Blazor 0.5.0)\" (#1200)"},{"Id":"344874568","IsPullRequest":false,"CreatedAt":"2018-07-26T14:43:04","Actor":"galvesribeiro","Number":"1199","RawContent":null,"Title":"404 on PDBs","State":"open","Body":"Hey folks!\r\n\r\nAfter the update to 0.5.0 on BlazorExtensions components, I'm starting to see weird errors on the console pointing that some .pdb files are missing:\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/43269101-87d0b90a-90c8-11e8-8e22-4eec758112de.png)\r\n\r\nFor the record, I'm not even trying to debug. Just running the [BlazorExtensions.Logger test project](https://github.com/BlazorExtensions/Logging/tree/master/test/Blazor.Extensions.Logging.Test) \r\n\r\nCan someone shed a light on that?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1199","RelatedDescription":"Open issue \"404 on PDBs\" (#1199)"},{"Id":"344840763","IsPullRequest":true,"CreatedAt":"2018-07-26T13:19:49","Actor":"uazo","Number":"1196","RawContent":null,"Title":"fix dispose components & EventHandler in OutOfProcess Render","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1196","RelatedDescription":"Open PR \"fix dispose components & EventHandler in OutOfProcess Render\" (#1196)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-29T05:30:02.7736379Z","RunDurationInMilliseconds":1409}