{"Data":{"Blog":{"FeedItems":[{"Title":"Colonial Life Drives Field Sales Productivity with .NET, Mobile, and DevOps","PublishedOn":"2018-01-05T19:59:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET community is millions of developers strong, with people around the world turning ideas into apps across web, mobile, desktop, and the newest connected device platforms. Colonial Life’s...","Href":"https://blog.xamarin.com/colonial-life-drives-field-sales-productivity-net-mobile-devops/","RawContent":null},{"Title":"CoreML Programming with Xamarin.Mac and F#","PublishedOn":"2018-01-04T18:08:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Xamarin technologies are most commonly used to develop mobile applications, Xamarin.Mac makes it easy to use your preferred .NET language to develop desktop Mac apps. There are many C#...","Href":"https://blog.xamarin.com/coreml-programming-xamarin-mac-f/","RawContent":null},{"Title":"Xamarin Developer Events This January","PublishedOn":"2018-01-03T19:10:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s only the beginning of the year, but there are already many opportunities to get out and start building on your mobile app development education! Network with local user groups to learn...","Href":"https://blog.xamarin.com/xamarin-developer-events-january/","RawContent":null},{"Title":"The Top 12 Xamarin Blog Posts of 2017","PublishedOn":"2018-01-02T20:36:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2017 marked our first full year as part of the Microsoft family. Along the way, we saw new operating systems, new devices, and updates to the tools we use every day, and the many authors behind the...","Href":"https://blog.xamarin.com/top-12-xamarin-blog-posts-2017/","RawContent":null},{"Title":"Contest: Get Started with Xamarin","PublishedOn":"2017-12-15T20:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Xamarin, we pride ourselves on creating and providing great educational tools for developers. Between our extensive developer center, and the interactive classes at Xamarin University,...","Href":"https://blog.xamarin.com/contest-get-started-xamarin/","RawContent":null},{"Title":"Introducing the SmartHotel360 Reference Mobile Apps","PublishedOn":"2017-12-14T20:52:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you managed to catch any of Microsoft Connect(); 2017, you probably saw a beautiful suite of apps for a fictitious smart hospitality company called SmartHotel360 that showcases the future of...","Href":"https://blog.xamarin.com/introducing-smarthotel360-reference-mobile-apps/","RawContent":null},{"Title":"Iterate Faster with the Xamarin Live Player and iOS Coded User Interface","PublishedOn":"2017-12-13T17:25:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Live Player is a fantastic tool to rapidly iterate and develop Xamarin applications without ever having to compile. One can easily update an application&#8217;s user interface and business...","Href":"https://blog.xamarin.com/iterate-faster-xamarin-live-player-ios-coded-user-interface/","RawContent":null},{"Title":"Updates to the Xamarin iOS Designer","PublishedOn":"2017-12-12T18:00:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Designer for iOS is a visual designer that allows you to edit Storyboard and Xib files directly in Visual Studio and Visual Studio for Mac. Crafting your UI with a designer instead of...","Href":"https://blog.xamarin.com/updates-xamarin-ios-designer/","RawContent":null},{"Title":"Introduction to tvOS","PublishedOn":"2017-12-11T20:03:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, Apple announced the AppleTV 4K, an improved version of the AppleTV launched in 2015, which brought us a new platform to develop for in tvOS. With the touch-enabled Siri remote, we have a new...","Href":"https://blog.xamarin.com/introduction-to-tvos/","RawContent":null},{"Title":"Native Forms is Polished and Shiny in Xamarin.Forms 2.5.0","PublishedOn":"2017-12-08T20:37:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since we previewed Native Forms in June, we’ve been working to smooth the rough edges and polish it up for Xamarin.Forms 2.5.0 by fixing bugs and integrating the excellent feedback from the community....","Href":"https://blog.xamarin.com/native-forms-polished-shiny-xamarin-forms-2-5-0/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7062333318","Type":"IssuesEvent","CreatedAt":"2018-01-05T16:49:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1150","RelatedDescription":"Closed issue \"Early <AndroidAsset> caching results in differences w.r.t. other platforms, use case limits.\" (#1150) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Extract the attached workspace, load the top-level solution.\r\n2. For each of the four client projects (under Clients solution folder), build and run.\r\n3. Observe the on-screen text (Android, iOS, UWP) or command line output (CLI).\r\n\r\n[BuildArtifacts.zip](https://github.com/xamarin/xamarin-android/files/1598945/BuildArtifacts.zip)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nIn all cases, \"This is actual content for asset A.\" is indicated.\r\n\r\n### Actual Behavior\r\n\r\nFor all of { CLI, iOS, UWP }, \"This is actual content for asset A.\" is indicated.\r\nFor { Android }, \"This is a placeholder for asset A.\" is indicated.\r\n\r\n(Further commentary to follow.)\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.5.2\r\nVisualStudio.15.Release/15.5.2+27130.2010\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual Basic 2017   00369-60000-00001-AA028\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA028\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00369-60000-00001-AA028\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA028\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31125.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27128.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.753 (6575bd113)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.0.25 (HEAD/d8c6e504f)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7062332570","Type":"PullRequestEvent","CreatedAt":"2018-01-05T16:48:56","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1161","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] ReOrder when Assets are Processed.\" (#1161) at xamarin/xamarin-android","RelatedBody":"Context #1150\r\n\r\nThe way the current system works is that the `UpdateAndroidAssets`\r\ntarget is called as part of the `ResolveReferencesDependsOn`. This\r\nmakes it impossible to do any kind of processing of assets after\r\nthe project has already built. It also menas that a straight up\r\ncall to `Build` will result in all the assets being copied into\r\nthe intermediate directory. If your project has a large number\r\nof assets that is going to take time. Note this might also be\r\ncalled as part of a designtime build at the moment... not good.\r\n\r\nSo is there a reason why we call `UpdateAndroidAssets` before\r\n`Compile`? We don't generate any entries in the Designer.cs files\r\nfor them.. We don't clean them up.. we dont appear to do anything\r\nexcept package them! So the anser looks to be a resounding NO!\r\n\r\nSo we shall move the `UpdateAndroidAssets` to be part of the\r\n`_CreateBaseApkDependsOnTargets`. This means they will be\r\nprocessed just before we create the base apk. This will\r\noccur after compilation has completed. So we have a win win..\r\n\r\nThis commit also includes a unit test which does some post processing\r\nafter the `Compile` target to update an asset, it makes sure that\r\npost processing does work."},{"Id":"7062271033","Type":"IssuesEvent","CreatedAt":"2018-01-05T16:35:02","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1162","RelatedDescription":"Opened issue \"ResolveAssemblies tasks uses reference assemblies\" (#1162) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Get and Build repro https://github.com/marcominerva/XamarinAndroidIssue\r\n\r\nIf you instead the build log you will see that \r\n\r\n```\r\nUsing \"ResolveAssemblies\" task from assembly \"/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Build.Tasks.dll\".\r\n```\r\n\r\nhas few `...ref/netstandard2.0/...` references which is wrong as they should never be used as an input to linker or any post compilation processing\r\n\r\nThis issue is possibly related to #1154 \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nNo error during execution.\r\n\r\n### Actual Behavior\r\n\r\n[Mono] Assembly Loader probing location: 'System.Memory'.\r\n[monodroid-assembly] Could not load assembly 'System.Memory' during startup registration.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nXamarin.Android\r\nVersion: 8.1.0.25 (Visual Studio Community)\r\nAndroid SDK: /Users/marek/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 25.0.5\r\nSDK Build Tools Version: 25.0.3\r\n\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n   ```\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.buffers/4.4.0/ref/netstandard2.0 as it is a Reference Assembly\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.memory/4.4.0-preview2-25405-01/ref/netstandard2.0 as it is a Reference Assembly\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1500,2): warning : Ignoring /Users/marek/.nuget/packages/system.runtime.compilerservices.unsafe/4.4.0/ref/netstandard2.0 as it is a Reference Assembly\r\n```\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7061163889","Type":"PullRequestEvent","CreatedAt":"2018-01-05T12:02:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1158","RelatedDescription":"Merged pull request \"Bump to mono/2017-10/e70439f1\" (#1158) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=61002\r\nContext: https://github.com/mono/mono/issues/6339"},{"Id":"7061108557","Type":"PullRequestEvent","CreatedAt":"2018-01-05T11:46:36","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1161","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] ReOrder when Assets are Processed.\" (#1161) at xamarin/xamarin-android","RelatedBody":"Context #1150\r\n\r\nThe way the current system works is that the `UpdateAndroidAssets`\r\ntarget is called as part of the `ResolveReferencesDependsOn`. This\r\nmakes it impossible to do any kind of processing of assets after\r\nthe project has already built. It also menas that a straight up\r\ncall to `Build` will result in all the assets being copied into\r\nthe intermediate directory. If your project has a large number\r\nof assets that is going to take time. Note this might also be\r\ncalled as part of a designtime build at the moment... not good.\r\n\r\nSo is there a reason why we call `UpdateAndroidAssets` before\r\n`Compile`? We don't generate any entries in the Designer.cs files\r\nfor them.. We don't clean them up.. we dont appear to do anything\r\nexcept package them! So the anser looks to be a resounding NO!\r\n\r\nSo we shall move the `UpdateAndroidAssets` to be part of the\r\n`_CreateBaseApkDependsOnTargets`. This means they will be\r\nprocessed just before we create the base apk. This will\r\noccur after compilation has completed. So we have a win win..\r\n\r\nThis commit also includes a unit test which does some post processing\r\nafter the `Compile` target to update an asset, it makes sure that\r\npost processing does work."},{"Id":"7060426404","Type":"IssuesEvent","CreatedAt":"2018-01-05T08:42:49","Actor":"paradisehuman","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1160","RelatedDescription":"Opened issue \"eglGetDisplay failed EGL_BAD_PARAMETER\" (#1160) at xamarin/xamarin-android","RelatedBody":"\r\n[EelaTaxi.zip](https://github.com/xamarin/xamarin-android/files/1605941/EelaTaxi.zip)\r\n### Steps to Reproduce\r\n\r\n1. Set linking on SDK and User Assemblies \r\n2. Check AOT Compilation\r\n3. Check Use LLVM Optimizing Compiler\r\n4. Archive the packge\r\n5. Run on Huawei Honor3 or Huawei G700 or Huawei G610 or Huawei Y330\r\n\r\nI attached the APK file.\r\n\r\n### Expected Behavior\r\nRuning\r\n\r\n the Program\r\n### Actual Behavior\r\nForce close on splashview\r\n### Version Information\r\n\r\nVisual Studio 15.5.2\r\n\r\n### Log File\r\n\r\n> android.view.HardwareRenderer$GlRenderer.initializeEgl\r\n> HardwareRenderer.java - line 878\r\n> java.lang.RuntimeException: eglGetDisplay failed EGL_BAD_PARAMETER\r\n> eglGetDisplay failed EGL_BAD_PARAMETER\r\n> 1- android.view.HardwareRenderer$GlRenderer.initializeEgl HardwareRenderer.java:878\r\n> 2- android.view.HardwareRenderer$GlRenderer.initialize HardwareRenderer.java:829\r\n> 3- android.view.ViewRootImpl.performTraversals ViewRootImpl.java:1806\r\n> 4- android.view.ViewRootImpl.doTraversal ViewRootImpl.java:1211\r\n> 5- android.view.ViewRootImpl$TraversalRunnable.run ViewRootImpl.java:5039\r\n> 6- android.view.Choreographer$CallbackRecord.run Choreographer.java:776\r\n> 7- android.view.Choreographer.doCallbacks Choreographer.java:579\r\n> 8- android.view.Choreographer.doFrame Choreographer.java:548\r\n> 9- android.view.Choreographer$FrameDisplayEventReceiver.run Choreographer.java:762\r\n> 10- android.os.Handler.handleCallback Handler.java:800\r\n> 11- android.os.Handler.dispatchMessage Handler.java:100\r\n> 12- android.os.Looper.loop Looper.java:194\r\n> 13- android.app.ActivityThread.main ActivityThread.java:5433\r\n> 14- java.lang.reflect.Method.invokeNative Method.java\r\n> 15- java.lang.reflect.Method.invoke Method.java:525\r\n> 16- com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run ZygoteInit.java:924\r\n> 17- com.android.internal.os.ZygoteInit.main ZygoteInit.java:691\r\n> 18- dalvik.system.NativeStart.main NativeStart.java"},{"Id":"7060108364","Type":"PullRequestEvent","CreatedAt":"2018-01-05T06:49:46","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1159","RelatedDescription":"Opened pull request \"[WIP] Sanitize Xamarin.Android.sln: fix several inconsistency bits.\" (#1159) at xamarin/xamarin-android","RelatedBody":"Manually editing solution file is uncool and error prone, but since the\r\nentire xamarin-android source tree is not designed cleanly it is impossible\r\nto use IDEs to do the right job.\r\n\r\nAs stated at https://github.com/xamarin/xamarin-android/issues/1129 ,\r\nwe should eliminate this Xamarin.Android.sln as a source file and it should\r\nbe only generated, not directly committed to the tree. But to achieve that\r\nwe first need to find the right structure and right content.\r\n\r\nSo far, there were handful of issues that either missed or incorrectly\r\nadded solution items with inconsistent configurations.\r\n\r\nThese inconsistent parts were found by the solution content analyzer at\r\nhttps://github.com/xamarin/xamarin-android/issues/1129#issuecomment-355484902"},{"Id":"7059651108","Type":"PullRequestEvent","CreatedAt":"2018-01-05T03:06:04","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1079","RelatedDescription":"Closed pull request \"[build] fix Novell/*.MonoDroid.*.targets copy during build\" (#1079) at xamarin/xamarin-android","RelatedBody":"For a little while, our build has been copying three files to the root\r\nof our build tree:\r\n- Novell/MonoDroid.FSharp.targets\r\n- Novell/Novell.MonoDroid.Common.targets\r\n- Novell/Novell.MonoDroid.CSharp.targets\r\n\r\nThese files are copied to build output in the\r\nXamarin.Android.Build.Tasks project, but they should go in\r\n`bin/$(Configuration)` not the root of the build tree.\r\n\r\nWhile looking at binary log output, I noticed the\r\nXamarin.Android.Build.Tests project was doing the copy due to having a\r\n`<ProjectReference />` to Xamarin.Android.Build.Tasks.\r\n\r\nAdding `<Private>False</Private>` to the `<ProjectReference />` fixes\r\nthese files from being copied, and doesn't appear to have any other ill\r\neffects."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7066068693","Type":"IssuesEvent","CreatedAt":"2018-01-07T05:28:05","Actor":"paradisehuman","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1518","RelatedDescription":"Opened issue \"No view found for id 0x9 (unknown) for fragment FragmentContainer\" (#1518) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\nI have a ListView on MasterPage detail\r\n\r\n   ```csharp\r\npublic class MainPage : ContentPage\r\n    {\r\n        private bool _isRefreshExecuted;\r\n        private readonly ObservableCollection<MainPageItem> _requestList;\r\n        private WokerMainPageViewModel _model;\r\n        private readonly ICommand _refreshCommand;\r\n        public ListView RequestListView { get; set; }\r\n\r\n        public MainPage()\r\n        {\r\n            NavigationPage.SetBackButtonTitle(this, \"\");\r\n            _requestList = new ObservableCollection<MainPageItem>();\r\n            _refreshCommand = new Command(async () =>\r\n            {\r\n                _model.List = await AppWorker.DependencyInjection().Resolve<IWorkerTaxiMainPageService>().GetAllRequestAsync();\r\n                if (_model.List == null)\r\n                {\r\n                    _model.IsEmpty = true;\r\n                    return;\r\n                }\r\n                _model.IsEmpty = _model.List.Count <= 0;\r\n                GetTripListFromServer();\r\n            });\r\n            RequestListView = new ListView\r\n            {\r\n                ItemTemplate = new DataTemplate(() =>\r\n                {\r\n                    var requestPageCell = new MainPageCell();\r\n                    return requestPageCell;\r\n                }),\r\n                VerticalOptions = LayoutOptions.FillAndExpand,\r\n                HorizontalOptions = LayoutOptions.FillAndExpand,\r\n                SeparatorVisibility = SeparatorVisibility.Default,\r\n                IsPullToRefreshEnabled = true,\r\n                RefreshCommand = _refreshCommand\r\n\r\n            };\r\n            RequestListView.SetBinding(targetProperty: ListView.IsRefreshingProperty, path: \"IsRefresh\");\r\n            var emptyLable = new Label\r\n            {\r\n                Style = (Style)Application.Current.Resources[index: \"LableStyle\"],\r\n                HorizontalOptions = LayoutOptions.Center,\r\n                VerticalOptions = LayoutOptions.Center,\r\n                VerticalTextAlignment = TextAlignment.Center,\r\n                HorizontalTextAlignment = TextAlignment.Center,\r\n                Text = \"هنوز سفری برای شما ثبت نشده\\n برای تازه سازی، صفحه را از بالا به پایین بکشید\"\r\n                \r\n            };\r\n            emptyLable.SetBinding(targetProperty: IsVisibleProperty, path: \"IsEmpty\");\r\n            var stack = new StackLayout\r\n            {\r\n                Padding = new Thickness { Top = 5},\r\n                Children = {emptyLable,RequestListView}\r\n            };\r\n            Content = stack;\r\n            CrossFirebasePushNotification.Current.OnNotificationReceived += (s, p) =>\r\n            {\r\n                if (!p.Data.ContainsKey(\"id\")) return;\r\n                if (CrossSettings.Current.GetValueOrDefault(\"LastPage\", null) != \"Eela.Taxi.Pages.Worker.MainPage\") return;\r\n                if (!p.Data.ContainsKey(\"type\")) return;\r\n                Enum.TryParse(p.Data[\"type\"].ToString(), out NotificationTypes type);\r\n                switch (type)\r\n                {\r\n                    case NotificationTypes.SubmitRequestByUser:\r\n                    {\r\n                        Device.BeginInvokeOnMainThread(() => { _refreshCommand.Execute(0); });\r\n                        break;\r\n                    }\r\n                    case NotificationTypes.RefreshWorkerMainPageList:\r\n                    {\r\n                        if (CrossSecureStorage.Current.GetValue(\"Id\") != p.Data[\"workerId\"].ToString())\r\n                            Device.BeginInvokeOnMainThread(() => { _refreshCommand.Execute(0); });\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        private void GetTripListFromServer()\r\n        {\r\n            if (_isRefreshExecuted) return;\r\n            _isRefreshExecuted = true;\r\n            _model.IsRefresh = true;\r\n            if (_requestList != null)\r\n            {\r\n                _requestList.Clear();\r\n                if (_model.List != null)\r\n                {\r\n                    if (Application.Current.Properties[\"Culture\"].ToString() == \"fa-IR\")\r\n                        foreach (var item in _model.List)\r\n                        {\r\n                            _requestList.Add(item: new MainPageItem\r\n                            {\r\n                                RequestId = item.RequestId,\r\n                                SourceAddress = item.SourceAddress,\r\n                                DestinationAddress = item.DestinationAddress\r\n                            });\r\n                        }\r\n                    else\r\n                        foreach (var item in _model.List)\r\n                        {\r\n                            _requestList.Add(item: new MainPageItem\r\n                            {\r\n                                RequestId = item.RequestId,\r\n                                SourceAddress = item.SourceAddress,\r\n                                DestinationAddress = item.DestinationAddress\r\n                            });\r\n                        }\r\n                }\r\n\r\n                RequestListView.ItemsSource = null;\r\n                RequestListView.ItemsSource = _requestList;\r\n            }\r\n\r\n            _model.IsRefresh = false;\r\n            _isRefreshExecuted = false;\r\n        }\r\n\r\n        protected override void OnAppearing()\r\n        {\r\n            base.OnAppearing();\r\n            CrossSettings.Current.AddOrUpdateValue(\"LastPage\", GetType().FullName);\r\n            _model = (WokerMainPageViewModel)BindingContext;\r\n            _refreshCommand.Execute(0);\r\n        } \r\n\r\n        protected override bool OnBackButtonPressed()\r\n        {\r\n            Device.BeginInvokeOnMainThread(async () =>\r\n            {\r\n                var confirm = await Application.Current.MainPage.DisplayAlert(\r\n                    Taxi.Resources.Common.ResourceManager.GetString(\"Warning\",\r\n                        new CultureInfo(Application.Current.Properties[\"Culture\"].ToString())),\r\n                    Taxi.Resources.Common.ResourceManager.GetString(\"ExitWarning\",\r\n                        new CultureInfo(Application.Current.Properties[\"Culture\"].ToString())),\r\n                    Taxi.Resources.Common.ResourceManager.GetString(\"Yes\",\r\n                        new CultureInfo(Application.Current.Properties[\"Culture\"].ToString())),\r\n                    Taxi.Resources.Common.ResourceManager.GetString(\"No\",\r\n                        new CultureInfo(Application.Current.Properties[\"Culture\"].ToString())));\r\n                if (confirm)\r\n                {\r\n                    DependencyService.Get<ICloseApplication>().ExitApplication();\r\n                }\r\n\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n```\r\n### Steps to Reproduce\r\n\r\n1. Run the Program \r\n2. Refresh the ListView\r\n3. Post to server and get some data\r\n\r\n### Expected Behavior\r\nRefresh the data\r\n### Actual Behavior\r\nForce Close in some situations for some Andorid 4.2.1 or 4.2.2 devices\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- Last known good version:-\r\n- IDE: Visual Studio 15.5.2\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  -\r\n  - Android: 4.2.2\r\n  - UWP:  -\r\n- Android Support Library Version: 26.1.0.1\r\n- Affected Devices:\r\nGalaxy S3 Mini Value Edition,Galaxy J1 Ace\r\n\r\n```\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState\r\nFragmentManager.java - line 1413\r\njava.lang.IllegalArgumentException: No view found for id 0x9 (unknown) for fragment FragmentContainer{424ae2c0 #0 id=0x9}\r\nNo view found for id 0x9 (unknown) for fragment FragmentContainer{424ae2c0 #0 id=0x9}\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState FragmentManager.java:1413\r\nandroid.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState FragmentManager.java:1740\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState FragmentManager.java:1809\r\nandroid.support.v4.app.BackStackRecord.executeOps BackStackRecord.java:799\r\nandroid.support.v4.app.FragmentManagerImpl.executeOps FragmentManager.java:2580\r\nandroid.support.v4.app.FragmentManagerImpl.executeOpsTogether FragmentManager.java:2367\r\nandroid.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute FragmentManager.java:2322\r\nandroid.support.v4.app.FragmentManagerImpl.execPendingActions FragmentManager.java:2229\r\nandroid.support.v4.app.FragmentManagerImpl$1.run FragmentManager.java:700\r\nandroid.os.Handler.handleCallback Handler.java:733\r\nandroid.os.Handler.dispatchMessage Handler.java:95\r\nandroid.os.Looper.loop Looper.java:136\r\nandroid.app.ActivityThread.main ActivityThread.java:5590\r\njava.lang.reflect.Method.invokeNative Method.java\r\njava.lang.reflect.Method.invoke Method.java:515\r\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run ZygoteInit.java:1280\r\ncom.android.internal.os.ZygoteInit.main ZygoteInit.java:1096\r\ndalvik.system.NativeStart.main NativeStart.java\r\n```\r\n"},{"Id":"7065406600","Type":"IssuesEvent","CreatedAt":"2018-01-06T19:40:01","Actor":"breyed","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1517","RelatedDescription":"Opened issue \"Runtime XAML binding errors logged but not viewable\" (#1517) at xamarin/Xamarin.Forms","RelatedBody":"[BindingExpression.ApplyCore](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/BindingExpression.cs) calls `Log.Warning` if there's a runtime problem with XAML. However, these errors never show up in Visual Studio for Windows.\r\n\r\nWhen debugging using Visual Studio for Windows, any binding errors should minimally show up in the Output Window in the Debug section. Even better would be an option to break execution when such a warning occurs.\r\n\r\nThe problem occurs with at least UWP and iOS."},{"Id":"7065339344","Type":"PullRequestEvent","CreatedAt":"2018-01-06T18:49:25","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1515","RelatedDescription":"Closed pull request \"[iOS]ability to custom iPhone X Home Indicator Auto Hidden behavior\" (#1515) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nability to custom iPhone X Home Indicator Auto Hidden behavior\r\n"},{"Id":"7065336682","Type":"IssuesEvent","CreatedAt":"2018-01-06T18:47:15","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1516","RelatedDescription":"Closed issue \"Visual Studio 2017 Preview - Can not create a Xamarin.Forms Application\" (#1516) at xamarin/Xamarin.Forms","RelatedBody":"I am currently using this version of Visual Studio:\r\n![image](https://user-images.githubusercontent.com/20356633/34642624-7864bf98-f316-11e7-9bc0-cdeac54c9e7d.png)\r\n\r\nWhenever I try to create a Xamarin.Forms project I get the following error: \r\n![image](https://user-images.githubusercontent.com/20356633/34642626-7fb61f9e-f316-11e7-9d88-8e032c46c0b8.png)\r\n\r\nAfter I click the Okay button I get the following window which actually does not change anything:\r\n![image](https://user-images.githubusercontent.com/20356633/34642628-8937c450-f316-11e7-909a-e5989ec601f8.png)\r\n"},{"Id":"7065299716","Type":"IssuesEvent","CreatedAt":"2018-01-06T18:19:44","Actor":"etrupja","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1516","RelatedDescription":"Opened issue \"Visual Studio 2017 Preview - Can not create a Xamarin.Forms Application\" (#1516) at xamarin/Xamarin.Forms","RelatedBody":"I am currently using this version of Visual Studio:\r\n![image](https://user-images.githubusercontent.com/20356633/34642624-7864bf98-f316-11e7-9bc0-cdeac54c9e7d.png)\r\n\r\nWhenever I try to create a Xamarin.Forms project I get the following error: \r\n![image](https://user-images.githubusercontent.com/20356633/34642626-7fb61f9e-f316-11e7-9d88-8e032c46c0b8.png)\r\n\r\nAfter I click the Okay button I get the following window which actually does not change anything:\r\n![image](https://user-images.githubusercontent.com/20356633/34642628-8937c450-f316-11e7-909a-e5989ec601f8.png)\r\n"},{"Id":"7065262383","Type":"PullRequestEvent","CreatedAt":"2018-01-06T17:52:37","Actor":"bosxixi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1515","RelatedDescription":"Opened pull request \"[iOS]ability to custom iPhone X Home Indicator Auto Hidden behavior\" (#1515) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nability to custom iPhone X Home Indicator Auto Hidden behavior\r\n"},{"Id":"7064948960","Type":"IssuesEvent","CreatedAt":"2018-01-06T14:06:00","Actor":"rraallvv","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1504","RelatedDescription":"Closed issue \"Cant convert between TextSize and FontSize from Android.Widget.Button to Xamarin.Forms.Button\" (#1504) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI've already asked some related questions [here](https://forums.xamarin.com/discussion/115698/how-to-covert-textsize-to-fontsizes-from-xamarin-android-to-forms) and [here](https://stackoverflow.com/q/48080491/1436359)\r\n\r\nThe issue is that it seems there isn't a way to convert `TextSize` to `FontSize` from Android  to Xamarin.Forms and vice-versa. Given a scaled density and a font size of certain values for Android, I would expect that Xamarin.Forms would render the text of the same size if I set `FontSize = myTextSize / displayMetrics.ScaledDensity`\r\n\r\nThat isn't the case though, that I ended up doing was to find a conversion factor like this `conversionScale = (float)renderer.Element.FontSize / renderer.Control.TextSize`, so that `FontSize = myTextSize * conversionScale` would do the conversion instead.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Clone [this repository.](https://github.com/rraallvv/xamarin-button-issue)\r\n2. Run the app on a device or emulator.\r\n\r\n### Expected Behavior\r\nBoth the button and the label should have their text rendered on screen of the same size that the text overlay in red color.\r\n\r\n### Actual Behavior\r\nThe text on the button is bigger that the text on the label even when they are of the same native TextSize \r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms version 2.5.0.121934\r\n- Last known good version: Don't know if this is the same in previous versions\r\n- IDE: Visual Studio for Mac Community version 7.3.2\r\n- Platform Target Frameworks:\r\n  - Android: Oreo 8.0\r\n- Nuget Packages:\r\n  - Xamarin.Android.Support.Animated.Vector.Drawable.25.4.0.2\r\n  - Xamarin.Android.Support.Annotations.25.4.0.2\r\n  - Xamarin.Android.Support.Compat.25.4.0.2\r\n  - Xamarin.Android.Support.Core.UI.25.4.0.2\r\n  - Xamarin.Android.Support.Core.Utils.25.4.0.2\r\n  - Xamarin.Android.Support.Design.25.4.0.2\r\n  - Xamarin.Android.Support.Fragment.25.4.0.2\r\n  - Xamarin.Android.Support.Media.Compat.25.4.0.2\r\n  - Xamarin.Android.Support.Transition.25.4.0.2\r\n  - Xamarin.Android.Support.v4.25.4.0.2\r\n  - Xamarin.Android.Support.v7.AppCompat.25.4.0.2\r\n  - Xamarin.Android.Support.v7.CardView.25.4.0.2\r\n  - Xamarin.Android.Support.v7.MediaRouter.25.4.0.2\r\n  - Xamarin.Android.Support.v7.Palette.25.4.0.2\r\n  - Xamarin.Android.Support.v7.RecyclerView.25.4.0.2\r\n  - Xamarin.Android.Support.Vector.Drawable.25.4.0.2\r\n  - Xamarin.Forms.2.5.0.121934\r\n- Affected Devices:\r\n  - Acer Iconia B1-770\r\n\r\n### Screenshots\r\n\r\n![portrait](https://i.imgur.com/2d0UcSA.png)\r\n![landscape](https://i.imgur.com/zoXlafv.png)\r\n\r\n### Reproduction Link\r\n[This repository has an example to reproduce the issue.](https://github.com/rraallvv/xamarin-button-issue)\r\n  \r\n  "}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7065403747","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:37:46","Actor":"migueldeicaza","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3171","RelatedDescription":"Opened pull request \"Bump to bring the socketeventargs fix (https://github.com/mono/mono/i…\" (#3171) at xamarin/xamarin-macios","RelatedBody":"…ssues/6428)"},{"Id":"7065281403","Type":"PullRequestEvent","CreatedAt":"2018-01-06T18:06:07","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3170","RelatedDescription":"Opened pull request \"[metalperformanceshaders] Fix MPSImageLanczosScale base class change\" (#3170) at xamarin/xamarin-macios","RelatedBody":"Sadly this creates a breaking change since the `ScaleTransform`\nproperty was re-introduced with an incorrect signature in the new\nbase class `MPSImageScale`\n\nUnless someone has an idea how to avoid it (I don't see an option)\nthen we'll have to document it in the 15.7 release notes."},{"Id":"7065194857","Type":"PullRequestEvent","CreatedAt":"2018-01-06T17:04:32","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3169","RelatedDescription":"Opened pull request \"[tests][xtro] Don't generate empty (0 length) files\" (#3169) at xamarin/xamarin-macios","RelatedBody":"Empty results/files are common when things goes well - but are just\nnoisy, never helpful."},{"Id":"7063151870","Type":"PullRequestEvent","CreatedAt":"2018-01-05T20:15:57","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3168","RelatedDescription":"Opened pull request \"[msbuild] Repack all iOS Task assemblies into Xamarin.iOS.Tasks.dll\" (#3168) at xamarin/xamarin-macios","RelatedBody":"This is the same patch as was committed/accepted in PR #3007 (and later reverted) but should\r\nhopefully work better now that the Move task has been fixed by PR #3104.\r\n"},{"Id":"7063098265","Type":"PullRequestEvent","CreatedAt":"2018-01-05T20:01:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3167","RelatedDescription":"Merged pull request \"[foundation] Remove iOS 5.0.1 specific code from NSFileManager\" (#3167) at xamarin/xamarin-macios","RelatedBody":"This was short-lived (changed in iOS 5.1) and it's now below our\nminimum support (iOS 6)"},{"Id":"7062768294","Type":"PullRequestEvent","CreatedAt":"2018-01-05T18:36:53","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3167","RelatedDescription":"Opened pull request \"[foundation] Remove iOS 5.0.1 specific code from NSFileManager\" (#3167) at xamarin/xamarin-macios","RelatedBody":"This was short-lived (changed in iOS 5.1) and it's now below our\nminimum support (iOS 6)"},{"Id":"7062385673","Type":"PullRequestEvent","CreatedAt":"2018-01-05T17:00:24","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3165","RelatedDescription":"Merged pull request \"[Backport][SceneKit] Workaround SCNAnimationEvent breaking change introduced in iOS 11 (#3160)\" (#3165) at xamarin/xamarin-macios","RelatedBody":"This fixes xamarin-macios#3145 and xamarin/xamarin-macios#3146\r\n\r\nThis workarounds an Apple breaking change (since `SCNAnimation` protocol is new in iOS 11):\r\n\r\nThe Old definition was\r\n> typedef void (^SCNAnimationEventBlock)(CAAnimation animation, id _Nonnull animatedObject, BOOL playingBackward)\r\n\r\nThe new ObjC definition is:\r\n> typedef void (^SCNAnimationEventBlock)(id<SCNAnimation> animation, id animatedObject, BOOL playingBackward);\r\n\r\nand it is bound as:\r\n> delegate void SCNAnimationEventHandler (CAAnimation animation, NSObject animatedObject, bool playingBackward);\r\n\r\nand for watchOS and XAMCORE_4_0 it is bound as:\r\n> delegate void SCNAnimationEventHandler (ISCNAnimationProtocol animation, NSObject animatedObject, bool playingBackward);\r\n\r\nFortunatelly `CAAnimation` conforms to `SCNAnimation` protocol and\r\nwe are now abusing this fact and forcing its creation with `GetINativeObject`\r\nthis way we keep a single API and we can always completely fix this\r\nwhen XAMCORE_4_0 happens following suit with apple's breaking change."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"949688768231104512","CreatedAt":"2018-01-06T17:07:01+00:00","UserScreenname":"xamarinhq","Text":"Add Augmented Reality to your #XamarinAndroid apps with #ARCore: https://t.co/TwpBAAMyUJ https://t.co/EvDnR69pjy","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":27,"RawContent":null},{"Id":"949372052758302723","CreatedAt":"2018-01-05T20:08:30+00:00","UserScreenname":"xamarinhq","Text":"Learn how Colonial Life drives field sales productivity with #dotNET and #DevOps using #XamarinForms:… https://t.co/Y1wBTN0TJA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"949323858972233734","CreatedAt":"2018-01-05T16:57:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":17,"RawContent":null},{"Id":"948981959132368901","CreatedAt":"2018-01-04T18:18:24+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/VAkrZo84pP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null},{"Id":"948961974766972934","CreatedAt":"2018-01-04T16:59:00+00:00","UserScreenname":"xamarinhq","Text":"Add native Android Facebook Authentication to your app using #Azure App Service in this guide from @jamesmontemagno: https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":15,"RawContent":null},{"Id":"948635192490590211","CreatedAt":"2018-01-03T19:20:29+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/sV84us2Np4 https://t.co/tduUDgg9oS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":6,"RawContent":null},{"Id":"948604119945760768","CreatedAt":"2018-01-03T17:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:… https://t.co/tuqMBJJWpq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"948294578192437248","CreatedAt":"2018-01-02T20:47:00+00:00","UserScreenname":"xamarinhq","Text":"Did your favorite make the cut? Get the full list of the top #Xamarin blog posts of 2017, and see the top post of t… https://t.co/dVcXEnCo7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":26,"RawContent":null},{"Id":"947216981937319938","CreatedAt":"2017-12-30T21:25:01+00:00","UserScreenname":"xamarinhq","Text":"The countdown is winding down! Post No. 2 in the #12DaysofXamarin walks you through implementing push notifications… https://t.co/uiyyYhL6zW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"946830183532724235","CreatedAt":"2017-12-29T19:48:01+00:00","UserScreenname":"xamarinhq","Text":"Just getting started with #XamarinForms? Let PM @davidortinau show you how to beat the learning curve in post No. 3… https://t.co/0y63QrYo5f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":20,"RawContent":null},{"Id":"946788653736583169","CreatedAt":"2017-12-29T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":15,"RawContent":null},{"Id":"946472572895588353","CreatedAt":"2017-12-28T20:07:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with C# 7 with @jamesmontemagno in the 4th post in our #12DaysofXamarin countdown: https://t.co/nWuAmDsr0R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":31,"RawContent":null},{"Id":"946430293401067521","CreatedAt":"2017-12-28T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/VlbopDlbd6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":21,"RawContent":null},{"Id":"946110438961541121","CreatedAt":"2017-12-27T20:08:01+00:00","UserScreenname":"xamarinhq","Text":"Our eBook on building \"Enterprise Application Patterns using #XamarinForms\" takes the 5th spot in our… https://t.co/HPidr9WU7g","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":119,"FavoriteCount":56,"RawContent":null},{"Id":"946049788914683905","CreatedAt":"2017-12-27T16:07:01+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/YpY9vtHgsp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"945745033117995009","CreatedAt":"2017-12-26T19:56:01+00:00","UserScreenname":"xamarinhq","Text":"\"5 Ways to Boost #XamarinForms App Startup Time\" from David Ortinau marks the halfway point at No. 6 the… https://t.co/ch9JL4J1fe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":39,"RawContent":null},{"Id":"944704928630693888","CreatedAt":"2017-12-23T23:03:01+00:00","UserScreenname":"xamarinhq","Text":"Today in the #12DaysofXamarin, learn how to make your UIs adaptive with #XamarinForms with the 7th most popular… https://t.co/0g7tgzIrEZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":118,"FavoriteCount":56,"RawContent":null},{"Id":"944297266629705728","CreatedAt":"2017-12-22T20:03:07+00:00","UserScreenname":"xamarinhq","Text":"Get started with async/await in the 8th post of the #12DaysofXamarin: https://t.co/MgpLPtLd2z https://t.co/Yt2iACcgfI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":13,"RawContent":null},{"Id":"944251690777284608","CreatedAt":"2017-12-22T17:02:01+00:00","UserScreenname":"xamarinhq","Text":"Don't miss your chance to win a three-month @XamarinU subscription just for checking out our new Getting Started Gu… https://t.co/QhYiE3ZQJU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-01-07T05:30:40.5344209Z","RunDurationInMilliseconds":4333}