{"Data":{"Blog":{"FeedItems":[{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":11,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":49,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6641937333","Type":"PullRequestEvent","CreatedAt":"2017-09-27T04:20:08","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14184","RelatedDescription":"Merged pull request \"[RyuJIT/ARM32] Fast tail call: Init LSRA to use R12 to save jump target\" (#14184) at dotnet/coreclr","RelatedBody":"To save jump target of fast tail call on ARM32, we use r12.\r\nIt is not affect to generated code on arm32 yet, because call->IsFastTailCall() is always false now."},{"Id":"6641901262","Type":"PullRequestEvent","CreatedAt":"2017-09-27T04:05:48","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14216","RelatedDescription":"Opened pull request \"Improve Monitor scaling\" (#14216) at dotnet/coreclr","RelatedBody":"Improve Monitor scaling\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/13978\r\n- Refactored AwareLock::m_MonitorHeld into a class LockState with operations to mutate the state\r\n- Allowed the lock to be taken by a non-waiter when there is a waiter to prevent creating lock convoys\r\n- Added a bit to LockState to indicate that a waiter is signaled to wake, to avoid waking more than one waiter at a time. A waiter that wakes by observing the signal unsets this bit. See AwareLock::EnterEpilogHelper().\r\n- Added a spinner count to LockState. Spinners now register and unregister themselves and lock releasers don't wake a waiter when there is a registered spinner (the spinner guarantees to take the lock if it's available when unregistering itself)\r\n  - This was necessary mostly on Windows to reduce CPU usage to the expected level in contended cases with several threads. I believe it's the priority boost Windows gives to signaled threads, which seems to cause waiters to much more frequently succeed in acquiring the lock. This causes a CPU usage problem because once the woken waiter releases the lock, on the next lock attempt it will become a spinner. This keeps repeating, converting several waiters into spinners unnecessarily. Before registering spinners, I saw typically 4-6 spinners under contention (with delsys inside and outside the lock) when I expected to have only 1-2 spinners at most. It's still not perfect, unregistering as a spinner and registering as a waiter need to be atomic such that there is no gap in-between during which a waiter can be woken unnecessarily. This may need a bit more refactoring, I'll leave it for another time.\r\n  - It costs an interlocked operation before and after the spin loop, doesn't seem to be too significant since spinning is a relatively slow path anyway, and the reduction in CPU usage in turn reduces contention on the lock and lets more useful work get done\r\n- Updated waiters to spin a bit before going back to waiting, reasons are explained in AwareLock::EnterEpilogHelper()\r\n- Removed AwareLock::Contention() and any references (this removes the 10 repeats of the entire spin loop in that function). With the lock convoy issue gone, this appears to no longer be necessary.\r\n\r\nPerf\r\n- On Windows, throughput has increased significantly starting at slightly lower than proc count threads. On Linux, latency and throughput have increased more significantly at similar proc counts.\r\n- Most of the larger regressions are in the unlocked fast paths. The code there hasn't changed and is almost identical (minor layout differences), I'm just considering this noise until we figure out how to get consistently faster code generated.\r\n- The smaller regressions are within noise range. I did notice at lower thread counts (2 and 4) with lower spin counts, there is a \r\n\r\nProcessor for numbers below: Core i7 6700 4-core 8-thread\r\n\r\nMonitor spin tests\r\n---\r\n\r\n- With default spin counts\r\n- Code is in https://github.com/dotnet/coreclr/pull/13670.\r\n\r\n```\r\nSpin (Windows x64)                                      Left score        Right score       ∆ Score %\r\n------------------------------------------------------  ----------------  ----------------  ---------\r\nMonitorEnterExitLatency 02T                                665.73 ±0.46%     660.39 ±0.54%     -0.80%\r\nMonitorEnterExitLatency 04T                               1499.47 ±0.52%    1502.81 ±0.29%      0.22%\r\nMonitorEnterExitLatency 08T                               1731.28 ±0.10%    1743.89 ±0.14%      0.73%\r\nMonitorEnterExitLatency 16T                               1707.25 ±0.31%    1747.36 ±0.24%      2.35%\r\nMonitorEnterExitThroughput Delay 01T                      5138.81 ±0.09%    5120.83 ±0.10%     -0.35%\r\nMonitorEnterExitThroughput Delay 02T                      4959.48 ±0.15%    4981.27 ±0.10%      0.44%\r\nMonitorEnterExitThroughput Delay 04T                      4462.47 ±0.69%    4760.78 ±0.05%      6.68%\r\nMonitorEnterExitThroughput Delay 08T                      3745.69 ±0.03%    4698.01 ±0.26%     25.42%\r\nMonitorEnterExitThroughput Delay 16T                      3711.20 ±0.34%    4725.44 ±0.38%     27.33%\r\nMonitorEnterExitThroughput_AwareLock 1T                  61200.72 ±0.03%   58933.89 ±0.06%     -3.70%\r\nMonitorEnterExitThroughput_ThinLock 1T                   59430.78 ±0.05%   59396.10 ±0.03%     -0.06%\r\nMonitorReliableEnterExitLatency 02T                        706.79 ±0.24%     705.74 ±0.41%     -0.15%\r\nMonitorReliableEnterExitLatency 04T                       1491.37 ±0.26%    1525.77 ±0.17%      2.31%\r\nMonitorReliableEnterExitLatency 08T                       1722.46 ±0.06%    1703.50 ±0.08%     -1.10%\r\nMonitorReliableEnterExitLatency 16T                       1679.43 ±0.29%    1710.93 ±0.19%      1.88%\r\nMonitorReliableEnterExitThroughput Delay 01T              5064.57 ±0.14%    5083.21 ±0.16%      0.37%\r\nMonitorReliableEnterExitThroughput Delay 02T              4917.33 ±0.11%    4962.94 ±0.09%      0.93%\r\nMonitorReliableEnterExitThroughput Delay 04T              4710.53 ±0.22%    4728.52 ±0.12%      0.38%\r\nMonitorReliableEnterExitThroughput Delay 08T              3733.62 ±0.04%    4745.75 ±0.12%     27.11%\r\nMonitorReliableEnterExitThroughput Delay 16T              3648.78 ±0.37%    4718.97 ±0.31%     29.33%\r\nMonitorReliableEnterExitThroughput_AwareLock 1T          58397.83 ±0.06%   58527.30 ±0.11%      0.22%\r\nMonitorReliableEnterExitThroughput_ThinLock 1T           58441.90 ±0.03%   56825.30 ±0.03%     -2.77%\r\nMonitorTryEnterExitWhenUnlockedThroughput_AwareLock 1T   57540.11 ±0.05%   58440.14 ±0.05%      1.56%\r\nMonitorTryEnterExitWhenUnlockedThroughput_ThinLock 1T    57684.81 ±0.04%   57747.39 ±0.06%      0.11%\r\nMonitorTryEnterWhenLockedThroughput_AwareLock 1T        261834.12 ±0.12%  244767.50 ±0.07%     -6.52%\r\nMonitorTryEnterWhenLockedThroughput_ThinLock 1T         241360.92 ±0.15%  261689.44 ±0.04%      8.42%\r\n------------------------------------------------------  ----------------  ----------------  ---------\r\nTotal                                                     7513.73 ±0.19%    7828.46 ±0.16%      4.19%\r\n```\r\n\r\n```\r\nSpin (Linux x64)                                        Left score        Right score       ∆ Score %\r\n------------------------------------------------------  ----------------  ----------------  ---------\r\nMonitorEnterExitLatency 02T                               3561.29 ±0.64%    3606.19 ±0.31%      1.26%\r\nMonitorEnterExitLatency 04T                               3440.76 ±0.12%    3464.48 ±0.12%      0.69%\r\nMonitorEnterExitLatency 08T                               2292.54 ±0.50%    3429.38 ±0.46%     49.59%\r\nMonitorEnterExitLatency 16T                               2095.67 ±0.67%    3433.30 ±0.30%     63.83%\r\nMonitorEnterExitThroughput Delay 01T                      5043.59 ±0.31%    5008.86 ±0.26%     -0.69%\r\nMonitorEnterExitThroughput Delay 02T                      4972.94 ±0.04%    4955.36 ±0.03%     -0.35%\r\nMonitorEnterExitThroughput Delay 04T                      4707.27 ±0.08%    4650.77 ±0.06%     -1.20%\r\nMonitorEnterExitThroughput Delay 08T                      2637.27 ±0.20%    4601.87 ±0.22%     74.49%\r\nMonitorEnterExitThroughput Delay 16T                      2312.48 ±0.81%    4650.57 ±0.11%    101.11%\r\nMonitorEnterExitThroughput_AwareLock 1T                  58822.27 ±0.03%   57910.71 ±0.10%     -1.55%\r\nMonitorEnterExitThroughput_ThinLock 1T                   57274.55 ±0.15%   56441.84 ±0.22%     -1.45%\r\nMonitorReliableEnterExitLatency 02T                       3558.43 ±0.27%    3553.18 ±0.61%     -0.15%\r\nMonitorReliableEnterExitLatency 04T                       2920.09 ±0.20%    3440.91 ±0.14%     17.84%\r\nMonitorReliableEnterExitLatency 08T                       2269.82 ±0.05%    3052.08 ±6.08%     34.46%\r\nMonitorReliableEnterExitLatency 16T                       2086.47 ±0.75%    3275.11 ±2.67%     56.97%\r\nMonitorReliableEnterExitThroughput Delay 01T              5169.16 ±0.64%    5189.40 ±0.14%      0.39%\r\nMonitorReliableEnterExitThroughput Delay 02T              5075.91 ±0.26%    5074.15 ±0.05%     -0.03%\r\nMonitorReliableEnterExitThroughput Delay 04T              4602.26 ±1.49%    4767.14 ±0.05%      3.58%\r\nMonitorReliableEnterExitThroughput Delay 08T              2773.58 ±0.07%    4744.31 ±0.28%     71.05%\r\nMonitorReliableEnterExitThroughput Delay 16T              2438.12 ±0.66%    4776.94 ±0.13%     95.93%\r\nMonitorReliableEnterExitThroughput_AwareLock 1T          56198.53 ±0.11%   55248.53 ±0.07%     -1.69%\r\nMonitorReliableEnterExitThroughput_ThinLock 1T           56322.95 ±0.11%   55207.00 ±0.24%     -1.98%\r\nMonitorTryEnterExitWhenUnlockedThroughput_AwareLock 1T   54299.42 ±0.10%   54580.95 ±0.07%      0.52%\r\nMonitorTryEnterExitWhenUnlockedThroughput_ThinLock 1T    55292.39 ±0.20%   53787.62 ±0.26%     -2.72%\r\nMonitorTryEnterWhenLockedThroughput_AwareLock 1T        216569.65 ±0.26%  213135.11 ±0.32%     -1.59%\r\nMonitorTryEnterWhenLockedThroughput_ThinLock 1T         225565.05 ±0.68%  230333.25 ±0.22%      2.11%\r\n------------------------------------------------------  ----------------  ----------------  ---------\r\nTotal                                                     8698.50 ±0.36%   10232.00 ±0.53%     17.63%\r\n```\r\n\r\nRaw numbers\r\n---\r\n\r\nCode is in https://github.com/dotnet/coreclr/issues/13978\r\n\r\nDefault spin heuristics\r\n---\r\n\r\n```\r\nWB = Windows baseline\r\nWC = Windows changed\r\nLB = Linux baseline\r\nLC = Linux changed\r\nL/ms = Locks taken per millisecond\r\nCpu = Number of threads worth of full CPU usage\r\n```\r\n\r\nWB Tc | L/ms | Cpu | WC L/ms | Cpu | LB L/ms | Cpu | LC L/ms | Cpu\r\n--: | --: | --: | --: | --: | --: | --: | --: | --:\r\n1 | 5344.76 | 1 | 5262.77 | 1 | 5148.87 | 1 | 5044.62 | 1\r\n1 | 5391.14 | 1 | 5433.34 | 1 | 5368.91 | 1 | 5262.98 | 1\r\n1 | 5348.51 | 1 | 5296.45 | 1 | 5111.95 | 1 | 4988.24 | 1\r\n2 | 5168.75 | 2 | 5110.51 | 2 | 4938.35 | 2 | 4882.07 | 2\r\n2 | 5130.30 | 2 | 5130.79 | 2 | 4989.40 | 2 | 4857.45 | 2\r\n2 | 5156.88 | 2 | 5117.37 | 2 | 4958.15 | 2 | 4932.81 | 2\r\n4 | 4671.16 | 4 | 4885.46 | 4 | 4732.73 | 4 | 4655.51 | 3\r\n4 | 4846.14 | 4 | 4847.92 | 4 | 4390.75 | 4 | 4597.65 | 3\r\n4 | 9572.59 | 4 | 4839.56 | 4 | 4731.39 | 4 | 4652.74 | 3\r\n8 | 3967.98 | 8 | 4832.56 | 4 | 2827.30 | 8 | 4621.80 | 3\r\n8 | 4379.97 | 8 | 4901.81 | 4 | 2824.45 | 8 | 4574.13 | 3\r\n8 | 4413.90 | 8 | 4826.43 | 4 | 2819.81 | 8 | 4642.79 | 3\r\n16 | 3867.15 | 8 | 4826.82 | 4 | 2413.83 | 8 | 4634.02 | 3\r\n16 | 4846.04 | 8 | 4815.79 | 4 | 2524.47 | 8 | 4604.29 | 3\r\n16 | 5695.38 | 8 | 4853.34 | 4 | 2363.39 | 8 | 4633.61 | 3\r\n32 | 3454.42 | 8 | 4615.44 | 4 | 1150.34 | 8 | 4665.71 | 3\r\n32 | 6477.07 | 8 | 4508.67 | 4 | 1607.75 | 8 | 4665.56 | 3\r\n32 | 7059.96 | 8 | 4479.78 | 4 | 1777.20 | 8 | 4659.60 | 3\r\n64 | 3282.26 | 8 | 4611.93 | 4 | 0.70 | 8 | 4573.43 | 3\r\n64 | 4991.26 | 8 | 4883.61 | 4 | 0.72 | 8 | 4672.35 | 3\r\n64 | 7521.77 | 8 | 4907.73 | 4 | 0.56 | 8 | 4654.06 | 3\r\n128 | 3149.11 | 8 | 4836.03 | 4 | 0.62 | 8 | 4621.83 | 3\r\n128 | 8962.21 | 8 | 4872.29 | 4 | 0.61 | 8 | 4565.08 | 3\r\n128 | 7503.35 | 8 | 4858.68 | 4 | 0.72 | 8 | 4667.60 | 3\r\n256 | 3310.44 | 8 | 4755.44 | 4 | 82.47 | 8 | 4648.06 | 3\r\n256 | 6567.14 | 8 | 4852.55 | 4 | 0.82 | 8 | 4626.99 | 3\r\n256 | 5420.92 | 8 | 4884.91 | 4 | 0.79 | 8 | 4657.88 | 3\r\n512 | 2081.56 | 8 | 4900.86 | 4 | 0.61 | 8 | 4648.02 | 3\r\n512 | 4125.43 | 8 | 4863.88 | 4 | 0.71 | 8 | 4578.18 | 3\r\n512 | 3685.25 | 8 | 4898.62 | 4 | 0.77 | 8 | 4601.07 | 3\r\n1024 | 1436.46 | 8 | 4842.57 | 4 | 0.61 | 8 | 4593.89 | 3\r\n1024 | 2900.22 | 8 | 4880.87 | 4 | 0.91 | 8 | 4627.16 | 3\r\n1024 | 3808.18 | 8 | 4917.50 | 4 | 0.81 | 8 | 4615.44 | 3\r\n\r\nLower spin counts\r\n---\r\n\r\n```\r\nset COMPlus_SpinInitialDuration=0x1\r\nset COMPlus_SpinLimitProcFactor=0x80\r\nset COMPlus_SpinBackoffFactor=0x2\r\nset COMPlus_SpinRetryCount=0x0\r\n```\r\n\r\nWB Tc | L/ms | Cpu | WC L/ms | Cpu | LB L/ms | Cpu | LC L/ms | Cpu\r\n--: | --: | --: | --: | --: | --: | --: | --: | --:\r\n1 | 5335.34 | 1 | 5264.16 | 1 | 4493.90 | 1 | 5019.77 | 1\r\n1 | 5448.57 | 1 | 5439.20 | 1 | 4866.98 | 1 | 4872.09 | 1\r\n1 | 5325.00 | 1 | 5297.86 | 1 | 5078.65 | 1 | 4541.78 | 1\r\n2 | 4923.72 | 2 | 4859.70 | 2 | 4494.79 | 2 | 4565.30 | 2\r\n2 | 4929.58 | 2 | 4834.64 | 2 | 4052.52 | 2 | 4582.16 | 2\r\n2 | 4888.14 | 2 | 4865.00 | 2 | 3864.39 | 2 | 4572.25 | 2\r\n4 | 4546.01 | 4 | 4357.90 | 3 | 90.96 | 2 | 3448.15 | 3\r\n4 | 4531.11 | 4 | 4367.87 | 3 | 100.28 | 2 | 3449.68 | 3\r\n4 | 4541.45 | 4 | 4357.42 | 3 | 125.34 | 2 | 3542.46 | 3\r\n8 | 3752.67 | 8 | 4317.60 | 3 | 86.85 | 2 | 4700.69 | 3\r\n8 | 3765.35 | 8 | 4367.94 | 3 | 83.59 | 2 | 4592.01 | 3\r\n8 | 3716.64 | 8 | 4289.56 | 3 | 81.16 | 2 | 4554.52 | 3\r\n16 | 97.13 | 8 | 4241.93 | 3 | 74.24 | 2 | 4550.29 | 2\r\n16 | 96.85 | 8 | 4242.78 | 3 | 84.72 | 2 | 4416.01 | 2\r\n16 | 97.21 | 8 | 4239.82 | 3 | 78.49 | 2 | 4560.80 | 2\r\n32 | 97.11 | 8 | 4382.21 | 3 | 89.36 | 2 | 4405.91 | 2\r\n32 | 96.83 | 8 | 4371.04 | 3 | 85.16 | 2 | 4255.65 | 2\r\n32 | 97.18 | 8 | 4330.79 | 3 | 86.11 | 2 | 4158.98 | 2\r\n64 | 96.86 | 8 | 4385.51 | 3 | 71.96 | 2 | 3839.43 | 2\r\n64 | 97.08 | 8 | 4375.39 | 3 | 83.92 | 2 | 4145.21 | 2\r\n64 | 96.84 | 8 | 4369.57 | 3 | 77.99 | 2 | 4261.37 | 2\r\n\r\nSpinning disabled\r\n---\r\n\r\n```\r\nset COMPlus_SpinInitialDuration=0x1\r\nset COMPlus_SpinLimitProcFactor=0x0\r\nset COMPlus_SpinBackoffFactor=0x2\r\nset COMPlus_SpinRetryCount=0x0\r\n```\r\n\r\nWB Tc | L/ms | Cpu | WC L/ms | Cpu | LB L/ms | Cpu | LC L/ms | Cpu\r\n--: | --: | --: | --: | --: | --: | --: | --: | --:\r\n1 | 5268.41 | 1.0 | 5343.09 | 1 | 5030.34 | 1.0 | 5034.13 | 1\r\n1 | 5464.13 | 1.0 | 5348.70 | 1 | 5361.13 | 1.0 | 5028.44 | 1\r\n1 | 5255.47 | 1.0 | 5317.01 | 1 | 5055.16 | 1.0 | 4867.83 | 1\r\n2 | 157.00 | 1.5 | 2930.07 | 2 | 92.38 | 1.5 | 2475.49 | 2\r\n2 | 272.23 | 1.5 | 2964.10 | 2 | 93.58 | 1.5 | 2418.42 | 2\r\n2 | 269.83 | 1.5 | 2939.90 | 2 | 89.18 | 1.5 | 2374.65 | 2\r\n4 | 215.94 | 1.5 | 2835.81 | 2 | 101.05 | 1.5 | 2125.89 | 2\r\n4 | 213.10 | 1.5 | 2713.06 | 2 | 99.78 | 1.5 | 2002.67 | 2\r\n4 | 214.34 | 1.5 | 2725.35 | 2 | 119.61 | 1.5 | 2089.86 | 2\r\n8 | 215.03 | 1.5 | 2908.95 | 2 | 102.79 | 1.5 | 4650.46 | 2\r\n8 | 219.86 | 1.5 | 2853.62 | 2 | 86.06 | 1.5 | 4718.31 | 2\r\n8 | 209.58 | 1.5 | 2882.41 | 2 | 110.83 | 1.5 | 4561.14 | 2\r\n16 | 217.18 | 1.5 | 2886.65 | 2 | 96.64 | 1.5 | 4770.49 | 2\r\n16 | 213.08 | 1.5 | 2884.71 | 2 | 94.27 | 1.5 | 4687.61 | 2\r\n16 | 220.32 | 1.5 | 2870.19 | 2 | 96.02 | 1.5 | 4735.26 | 2"},{"Id":"6641875166","Type":"PullRequestEvent","CreatedAt":"2017-09-27T03:55:56","Actor":"parjong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14215","RelatedDescription":"Opened pull request \"[x86/Linux] Use FCDECL2_VI instead of FCDECL_VV\" (#14215) at dotnet/coreclr","RelatedBody":"COMSingle::ModF/COMDouble::ModF passes a pointer (which should be treated as a integer value) as 2nd argument, but are declared with _VV tag."},{"Id":"6641760038","Type":"PullRequestEvent","CreatedAt":"2017-09-27T03:11:49","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14214","RelatedDescription":"Opened pull request \"Add ThreadPool.QueueUserWorkItem(..., bool preferLocal)\" (#14214) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/12442\r\ncc: @kouvel, @tarekgh, @benaadams, @geoffkizer "},{"Id":"6641709551","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:52:27","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14213","RelatedDescription":"Opened issue \"Ability to invoke interface method on generic struct without boxing\" (#14213) at dotnet/coreclr","RelatedBody":"Related to:\r\nhttps://github.com/dotnet/csharplang/issues/905\r\nhttps://github.com/dotnet/coreclr/issues/12877\r\n\r\nIn a method like:\r\n```C#\r\npublic void Foo<T>(T t)\r\n{\r\n    ...\r\n}\r\n```\r\nI want to be able to do the equivalent of:\r\n```C#\r\nif (t is ISomeInterface)\r\n{\r\n    ((ISomeInterface)t).InterfaceMethod();\r\n}\r\n```\r\nbut without incurring the associated boxing.  I can work around https://github.com/dotnet/coreclr/issues/12877 with a hack like https://github.com/dotnet/coreclr/commit/9a0630152c4339324ba9ac0fa886f9fb4916e759#diff-bc8ce62cfb625ddcc19d1f21b5c8b5c1R457, but that only addresses the `is` check; I'm not aware of any way currently to do the invocation without an allocation.\r\n\r\nExample where this would be valuable:\r\nhttps://github.com/dotnet/coreclr/commit/9a0630152c4339324ba9ac0fa886f9fb4916e759#diff-bc8ce62cfb625ddcc19d1f21b5c8b5c1R427\r\nRight now for this optimization in async methods, we have no way to special-case all `ValueTask<T>`s, instead having to special-case just those `ValueTask<T>`s for `T`s we list here explicitly.  If we had the ability to do the above pattern, we could make `ValueTask<T>` implement an internal interface that provided a `Task AsTask()` method that would let us fish out and use the underlying `Task`, which enable us to apply the optimization for all `ValueTask<T>`, regardless of the `T`."},{"Id":"6641670104","Type":"PullRequestEvent","CreatedAt":"2017-09-27T02:39:40","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14178","RelatedDescription":"Merged pull request \"Avoid async method delegate allocation\" (#14178) at dotnet/coreclr","RelatedBody":"Previously when a task-returning async method would yield for the first time, there would be four allocations: the task, the state machine object boxed to the heap, a context \"runner\" object, and a delegate that points to the boxed state machine's MoveNext method.  A recent PR (https://github.com/dotnet/coreclr/pull/13105) changed this to avoid the separate box object and the runner, but that still left the task and the delegate.\r\n\r\nThis PR avoids the delegate as well in a common case.  For async methods that only ever await Task/Task`1, that aren't using a custom sync context/scheduler, and for which tracing isn't enabled, we know the inner workings of both the builder and the awaiter and can thus bypass the awaiter's pattern APIs; instead of creating the delegate that gets passed to the awaiter and then stored in the wrapped task's continuation slot/list, we can instead just store the boxed state machine directly in the slot/list. \r\n\r\nAs a simple example just to highlight the allocation difference:\r\n```C#\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static async Task Main()\r\n    {\r\n        for (int i = 0; i < 1000; i++)\r\n        {\r\n            await SomeMethod();\r\n        }\r\n    }\r\n\r\n    static async Task SomeMethod()\r\n    {\r\n        await Task.Run(() => Thread.Sleep(1));\r\n    }\r\n}\r\n```\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/2642209/30833875-d2cfb18e-a21e-11e7-86b3-51157b2df1f4.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/2642209/30833886-ddd3f266-a21e-11e7-9307-6448c2b91636.png)\r\n\r\ncc: @kouvel, @tarekgh, @jkotas\r\n\r\n@AndyAyersMS, I had to workaround #12877 and https://github.com/dotnet/coreclr/issues/14177, and the workaround for #12877 isn't stellar so I'll be happy to undo it once that issue is addressed.\r\n\r\n@benaadams, it'd be good to know if/how this affects your scenarios."},{"Id":"6641627421","Type":"PullRequestEvent","CreatedAt":"2017-09-27T02:25:15","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14197","RelatedDescription":"Merged pull request \"Fixed Linux test build\" (#14197) at dotnet/coreclr","RelatedBody":"Fixed error occurred on Linux \r\n`tests/publishdependency.targets(49,5): error : Your project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"ubuntu.14.04-x64\": { } }' to your project.json and then re-run NuGet restore. [tests/runtest.proj]`"},{"Id":"6641556989","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:00:10","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14212","RelatedDescription":"Opened issue \"netcoreapp2.0 - System.AccessViolationException using native dll\" (#14212) at dotnet/coreclr","RelatedBody":"_From @darkengines on September 27, 2017 0:57_\n\nSorry if this is not the right place for this issue.\r\n\r\n## Steps to reproduce\r\nCreate a new netcoreapp2.0 project\r\n\r\n- Add reference to Google.OrTools\r\n- Set target platform to x64\r\n- Use the following Main function:\r\n\r\n```\r\nstatic void Main(string[] args) {\r\n    var solver = new Solver(\"Test\");\r\n}\r\n```\r\n\r\n- Run\r\n\r\n## Expected  behavior\r\nThe solver should be instanciated and the program should terminate without exception.\r\n\r\n## Actual behavior\r\nThe solver instanciation throws an exception:\r\n`System.AccessViolationException : 'Attempted to read or write protected memory. This is often an indication that other memory is corrupt.'`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nOutils en ligne de commande .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n## Notes\r\nThe library currently works  on the net46 framework.\r\nAn issue is also opened on the google side: https://github.com/google/or-tools/issues/463\r\n\r\n## Question\r\nKnowing that this dll uses a Swig wrapper, is there any indication that could be provided to https://github.com/google/or-tools/issues/463?\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/corefx#24272_"},{"Id":"6641505992","Type":"IssuesEvent","CreatedAt":"2017-09-27T01:44:09","Actor":"dotnet-mc-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14211","RelatedDescription":"Opened issue \"Test failure: tracing_eventsourcesmoke._eventsourcesmoke_eventsourcesmoke_/_eventsourcesmoke_eventsourcesmoke_cmd\" (#14211) at dotnet/coreclr","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `tracing_eventsourcesmoke._eventsourcesmoke_eventsourcesmoke_/_eventsourcesmoke_eventsourcesmoke_cmd` has failed.\n\n\n    Unhandled Exception: System.InvalidOperationException: Reflection failed.\n       at Tracing.Tests.Common.TraceConfiguration..ctor(String outputFile, UInt32 circularBufferMB)\n       at Tracing.Tests.EventPipeSmoke.GetConfig(EventSource eventSource, String outputFile)\n       at Tracing.Tests.EventPipeSmoke.Main(String[] args)\n    /Users/dotnet-bot/dotnetbuild/work/42bcafb0-b746-483a-85b6-b26da539be03/Work/f9fcc466-c4c2-4001-9488-7da883984e2b/Unzip/eventsourcesmoke/eventsourcesmoke.sh: line 243: 57128 Abort trap: 6           $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\n    \n    \n    Return code:      1\n    Raw output file:      /Users/dotnet-bot/dotnetbuild/work/42bcafb0-b746-483a-85b6-b26da539be03/Work/f9fcc466-c4c2-4001-9488-7da883984e2b/Unzip/Reports\\tracing.eventsourcesmoke\\eventsourcesmoke\\eventsourcesmoke.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    /Users/dotnet-bot/dotnetbuild/work/42bcafb0-b746-483a-85b6-b26da539be03/Payload/corerun eventsourcesmoke.exe\n    \\tStart: Enable tracing.\n    configurationType == null\n    Expected: 100\n    Actual: 134\n    END EXECUTION - FAILED\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/Users/dotnet-bot/dotnetbuild/work/42bcafb0-b746-483a-85b6-b26da539be03/Payload\n    > /Users/dotnet-bot/dotnetbuild/work/42bcafb0-b746-483a-85b6-b26da539be03/Work/f9fcc466-c4c2-4001-9488-7da883984e2b/Unzip/eventsourcesmoke/eventsourcesmoke.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20170927.01 (Core Tests)\nFailing configurations:\n- osx.1012.amd64\n  - x64\n- windows.10.arm64\n  - arm\n- Windows.7.Amd64\n  - x64\n- Windows.10.Amd64.Core\n  - x64\n- Windows.81.Amd64\n  - x64\n- Windows.10.Nano.Amd64\n  - x64\n- Windows.10.Amd64\n  - x64\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170927.01/workItem/tracing.eventsourcesmoke.XUnitWrapper/analysis/xunit/tracing_eventsourcesmoke._eventsourcesmoke_eventsourcesmoke_~2F_eventsourcesmoke_eventsourcesmoke_cmd"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6641739104","Type":"PullRequestEvent","CreatedAt":"2017-09-27T03:03:45","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7712","RelatedDescription":"Merged pull request \"Insert SDK 2.0.2-vspre-20170927-1\" (#7712) at dotnet/cli","RelatedBody":"Includes changes from https://github.com/dotnet/sdk/pull/1610"},{"Id":"6641563028","Type":"PullRequestEvent","CreatedAt":"2017-09-27T02:02:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7705","RelatedDescription":"Merged pull request \"Merge release/2.0-vs into release/2.0.0\" (#7705) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli \r\n"},{"Id":"6641432224","Type":"PullRequestEvent","CreatedAt":"2017-09-27T01:15:50","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7712","RelatedDescription":"Opened pull request \"Insert SDK 2.0.2-vspre-20170927-1\" (#7712) at dotnet/cli","RelatedBody":"Includes changes from https://github.com/dotnet/sdk/pull/1610"},{"Id":"6640180760","Type":"IssuesEvent","CreatedAt":"2017-09-26T19:18:42","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6747","RelatedDescription":"Closed issue \"dotnet-install.ps1 not working on Powershell Core 6.0.0-beta\" (#6747) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall/use Powershell Core 6.0.0-beta on Windows (!)\r\nload script from https://raw.githubusercontent.com/dotnet/cli/release/2.0.0/scripts/obtain/dotnet-install.ps1\r\nExecute the script \r\n\r\n\r\n\r\n## Expected  behavior\r\ndownload and install dotnetcore\r\n\r\n## Actual behavior\r\nException calling \"IsBypassed\" with \"1\" argument(s): \"Operation is not supported on this platform.\"\r\nAt ......\\dotnet-install.ps1:170 char:20\r\n\r\nLine 170:\r\n    if($DefaultProxy -and (-not $DefaultProxy.**IsBypassed**($Uri))){\r\n\r\n\r\n## Environment data \r\n($psversiontable)\r\nPSVersion                      6.0.0-beta\r\nPSEdition                      Core\r\nBuildVersion                   3.0.0.0\r\nCLRVersion\r\nGitCommitId                    v6.0.0-beta.1\r\nOS                             Microsoft Windows 10.0.14393\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\n\r\nProbably a feature request and not a bug !?\r\nNano Server is using PS-Core !?\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6640175419","Type":"IssuesEvent","CreatedAt":"2017-09-26T19:17:27","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7392","RelatedDescription":"Closed issue \"dotnet-install.sh prints text out of order (escaping issue?)\" (#7392) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nRun the script twice!\r\n`./scripts/obtain/dotnet-install.sh -c master`\r\n\r\n## Expected  behavior\r\n\r\nA clear message:\r\n```\r\nSDK version 2.1.0-preview1-007018 is already installed.\r\ndotnet-install: Adding to current process PATH: `/home/badersur/.dotnet`. Note: This change will be visible only when sourcing script.\r\ndotnet-install: Installation finished successfully.\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\n is already installed.DK version 2.1.0-preview1-007018\r\ndotnet-install: Adding to current process PATH: `/home/badersur/.dotnet`. Note: This change will be visible only when sourcing script.\r\ndotnet-install: Installation finished successfully.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.0-preview1-007018)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007018\r\n Commit SHA-1 hash:  6a64e17857\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  17.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /home/badersur/Downloads/dotnet/sdk/2.1.0-preview1-007018/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6640072862","Type":"PullRequestEvent","CreatedAt":"2017-09-26T18:54:24","Actor":"janvorli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7711","RelatedDescription":"Opened pull request \"Add Dockerfile for RHEL 6 builds\" (#7711) at dotnet/cli","RelatedBody":"This change enables building CLI for RHEL 6 in docker container. I also needed to fix one more place where the parameters were being parsed in a way that was causing a problem if the argument value string matched a substring of another argument. Like ` --runtime-id rhel.6-x64 --docker rhel.6` in the RHEL 6 build.\r\n\r\nThe Dockerfile builds and installs more recent git that in necessary for building CLI. I will later move it to the original docker image that the image we are building is based on. It takes about a minute only though, so it is not causing a problem."},{"Id":"6639928721","Type":"IssuesEvent","CreatedAt":"2017-09-26T18:23:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7495","RelatedDescription":"Closed issue \"dotnetcli fails when solution has a dcproj included\" (#7495) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`docker pull pms1969/docker-sln-fails-dotnetcli`\r\nthen\r\n`docker run --rm pms1969/docker-sln-fails-dotnetcli`\r\n\r\nThis is a base aspnetcore2.0 project solution with the added docker support from VS2017.\r\n\r\n## Expected  behavior\r\nThe `run` command executes the build.sh file which is a `dotnet restore` followed by a `dotnet build`.\r\nI'd expect this to work.\r\n\r\n## Actual behavior\r\n```\r\n.\r\n.\r\n.\r\n  Restore completed in 10.93 sec for /root/app/WebApplication1/WebApplication1.csproj.\r\n/root/app/docker-compose.dcproj : error MSB4236: The SDK 'Microsoft.Docker.Sdk' specified could not be found.\r\n/root/app/docker-compose.dcproj : warning NU1503: Skipping restore for project '/root/app/docker-compose.dcproj'. The project file may be invalid or missing targets required for restore. [/root/app/WebApplication1.sln]\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/root/app/docker-compose.dcproj : error MSB4236: The SDK 'Microsoft.Docker.Sdk' specified could not be found.\r\n  WebApplication1 -> /root/app/WebApplication1/bin/Debug/netcoreapp2.0/WebApplication1.dll\r\n\r\nBuild FAILED.\r\n\r\n/root/app/docker-compose.dcproj : error MSB4236: The SDK 'Microsoft.Docker.Sdk' specified could not be found.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:06.03\r\n```\r\n\r\nAs you can see, it fails.  I've tried excluding it from specific build configurations, but this still happens, which forces the exclusion of the docker project from the solution.  This isn't so helpful for the devs who could really do with running it as it will be run in production.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nλ docker run --rm -ti pms1969/docker-sln-fails-dotnetcli:latest dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nalthough I can confirm that I've had the same problem when running this on a windows box with dotnetcore 2.0 installed.\r\n\r\n\r\n\r\n\r\nHopefully that's all the information that's required.....\r\n\r\nNB:  I think it would be useful if `dcproj` files were excluded form the list of solutions/projects found by the dotnet cli.  Since it is added at the root of the solution, you are currently forced to explicitly state the project/solution file you want to run against the tool - which will pretty much never by the `dcproj` file.\r\n\r\n"},{"Id":"6639905634","Type":"IssuesEvent","CreatedAt":"2017-09-26T18:18:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7494","RelatedDescription":"Closed issue \"Unable to build .net 4.5 project with .NET Core 2.0 SDK\" (#7494) at dotnet/cli","RelatedBody":"I'm using dotnetcli 2.0 (.zip edition) downloaded from here https://www.microsoft.com/net/download/core. I'm trying to build a .net 4.5 project on a clean windows 2016. I got the following error:\r\n\r\n> Microsoft.Common.CurrentVersion.targets(1122,5):\r\n error MSB3644: The reference assemblies for framework \".NETFramework,Version=v4.5\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\r\n\r\nIs this a bug or I should have some prerequisites installed?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6639901258","Type":"IssuesEvent","CreatedAt":"2017-09-26T18:17:39","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7502","RelatedDescription":"Closed issue \"SecurityException: Unable to retrieve security descriptor for this frame.\" (#7502) at dotnet/cli","RelatedBody":"_From @valcs007 on August 7, 2017 23:27_\n\nGetting this  below error in my ASP.Net Core 1.1 app/IIS 8.\r\n\r\nTried to impersonate @ middleware level but ran into various issues, so trying to impersonate as a actual windows user instead of IIS app pool user @ the controller level.\r\n\r\nHave this below code in my controller\r\n```  c#\r\n public class SearchController : Controller\r\n    { \r\n.......\r\n            var winIdent = HttpContext.User.Identity as WindowsIdentity;\r\n            if (winIdent != null)\r\n            {                \r\n                 WindowsIdentity.RunImpersonated(winIdent.AccessToken, () =>\r\n                {\r\n                    numMatches = shim.GetNumMatches(scm);\r\n                });\r\n            }\r\n.................\r\n}\r\n```\r\n\r\n**Error:**\r\nSecurityException: Unable to retrieve security descriptor for this frame.\r\n\r\nAny help will be appreciated.;\n\n_Copied from original issue: aspnet/Identity#1349_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6640682941","Type":"IssuesEvent","CreatedAt":"2017-09-26T21:05:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/442","RelatedDescription":"Closed issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"Investigating a customer's solution which is experiencing performance issues due to slow design-time builds even with `<DefaultCompileItems>false</DefaultCompileItems>` set, 4% of a design-time build is just finding the .NET Standard refs:\r\n\r\nhttps://github.com/dotnet/standard/blob/bbbfd46d4298f0d764213256e858cc197d802208/netstandard/pkg/targets/NETStandard.Library.targets#L7-L16\r\n\r\nThis is on my SSD, on a slow disk like the customer was running this probably takes even longer. \r\n\r\nWhen I remove these includes, I go from:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303723-3275a9bc-81d2-11e7-8452-2e68cda05ef5.png)\r\n\r\nto:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303730-3c5ec0bc-81d2-11e7-9399-a53354054e83.png)\r\n\r\nTo avoid paying for this lookup over and over again when these are a fixed set of files, can we please auto-generate this?"},{"Id":"6640226448","Type":"PullRequestEvent","CreatedAt":"2017-09-26T19:29:03","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/510","RelatedDescription":"Merged pull request \"[release/2.0.0] Use a file list rather than globbing NETStandard assemblies\" (#510) at dotnet/standard","RelatedBody":"This change minimizes the amount of work done during project evaluation by directly\r\nsetting the reference items to all the files/paths we know are part of the package.\r\n\r\nPort of https://github.com/dotnet/standard/pull/507"},{"Id":"6639876312","Type":"IssuesEvent","CreatedAt":"2017-09-26T18:12:13","Actor":"shuohus","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/512","RelatedDescription":"Opened issue \"Output path in .NET Standard 2.0 csproj file is not granted.\" (#512) at dotnet/standard","RelatedBody":"I tried to set the output file in the csproj file to bin\\Debug\\. After I save the project file, the UI still shows bin\\Debug\\netstandard2.0\\, but the project file does have the line: \r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n  </PropertyGroup>\r\n\r\nThe compiler does not grant this line either. The assembly is still stored in bin\\Debug\\netstandard2.0."},{"Id":"6639727346","Type":"IssuesEvent","CreatedAt":"2017-09-26T17:40:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/442","RelatedDescription":"Reopened issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"Investigating a customer's solution which is experiencing performance issues due to slow design-time builds even with `<DefaultCompileItems>false</DefaultCompileItems>` set, 4% of a design-time build is just finding the .NET Standard refs:\r\n\r\nhttps://github.com/dotnet/standard/blob/bbbfd46d4298f0d764213256e858cc197d802208/netstandard/pkg/targets/NETStandard.Library.targets#L7-L16\r\n\r\nThis is on my SSD, on a slow disk like the customer was running this probably takes even longer. \r\n\r\nWhen I remove these includes, I go from:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303723-3275a9bc-81d2-11e7-8452-2e68cda05ef5.png)\r\n\r\nto:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303730-3c5ec0bc-81d2-11e7-9399-a53354054e83.png)\r\n\r\nTo avoid paying for this lookup over and over again when these are a fixed set of files, can we please auto-generate this?"},{"Id":"6635887169","Type":"PullRequestEvent","CreatedAt":"2017-09-26T01:28:06","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/511","RelatedDescription":"Merged pull request \"Update init-tools scripts to override tools directory\" (#511) at dotnet/standard","RelatedBody":"For source-build we want to share the same tools and dotnet sdk\r\nfor all the child repos. This change allows the tools directory to\r\nbe overridden.\r\n\r\ncc @eerhardt "},{"Id":"6635845753","Type":"IssuesEvent","CreatedAt":"2017-09-26T01:11:04","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/442","RelatedDescription":"Closed issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"Investigating a customer's solution which is experiencing performance issues due to slow design-time builds even with `<DefaultCompileItems>false</DefaultCompileItems>` set, 4% of a design-time build is just finding the .NET Standard refs:\r\n\r\nhttps://github.com/dotnet/standard/blob/bbbfd46d4298f0d764213256e858cc197d802208/netstandard/pkg/targets/NETStandard.Library.targets#L7-L16\r\n\r\nThis is on my SSD, on a slow disk like the customer was running this probably takes even longer. \r\n\r\nWhen I remove these includes, I go from:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303723-3275a9bc-81d2-11e7-8452-2e68cda05ef5.png)\r\n\r\nto:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29303730-3c5ec0bc-81d2-11e7-9399-a53354054e83.png)\r\n\r\nTo avoid paying for this lookup over and over again when these are a fixed set of files, can we please auto-generate this?"},{"Id":"6635371861","Type":"PullRequestEvent","CreatedAt":"2017-09-25T22:11:33","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/511","RelatedDescription":"Opened pull request \"Update init-tools scripts to override tools directory\" (#511) at dotnet/standard","RelatedBody":"For source-build we want to share the same tools and dotnet sdk\r\nfor all the child repos. This change allows the tools directory to\r\nbe overridden.\r\n\r\ncc @eerhardt "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6641767788","Type":"IssuesEvent","CreatedAt":"2017-09-27T03:14:30","Actor":"anthonywanted","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24278","RelatedDescription":"Opened issue \"Thounds of threads call System.Threading.WaitHandle.WaitOne\" (#24278) at dotnet/corefx","RelatedBody":"Our application running a signalR server and thrift server. While it runs 2 days or more, it use cpu 100% and threads count up to thounds, just suddenly. \r\nI dump a core dump, and run sos EEStack, thounds of threads stack looks like this\r\n![image](https://user-images.githubusercontent.com/26265122/30893942-66942e36-a373-11e7-80db-83aef70e0e2e.png)\r\n\r\nHere is the zabbix graphs\r\n![image](https://user-images.githubusercontent.com/26265122/30894185-cfb627ba-a374-11e7-8af9-86ea245c521d.png)\r\n![image](https://user-images.githubusercontent.com/26265122/30894209-f2ba4f52-a374-11e7-86c5-5becc4c09806.png)\r\n\r\n\r\nHere is the code, core dump is showing some problem in \r\n`cancelTokenSource.Token.WaitHandle.WaitOne();`\r\n`public class AccessServer\r\n    {\r\n        private ILogUtility logger = LogFactory.Create(typeof(AccessServer));\r\n\r\n        private CancellationTokenSource cancelTokenSource = new CancellationTokenSource();\r\n\r\n        protected IWebHost webHost;\r\n\r\n        public void Run()\r\n        {\r\n            try\r\n            {\r\n                var settings = ConfigurationUtility.GetSettings<Settings>(\"appsettings\");\r\n                var commonSettings = ConfigurationUtility.GetSettings<CommonSettings>(\"commonsettings\");\r\n                string serviceName = typeof(IAccessService).GetThriftServiceName();\r\n                int port = settings.ThriftPorts[serviceName];\r\n\r\n                StartupService.Current\r\n                .LoadAllAssemblyInBaseDirectory()\r\n                .UseAutofac()\r\n                .RegisterMapper()\r\n                .InitStartupTask()\r\n                .InitUpstreamMessageManager()\r\n                .Start();\r\n\r\n                webHost = new WebHostBuilder()\r\n                    .UseKestrel(o => { })\r\n                    .UseContentRoot(Directory.GetCurrentDirectory())\r\n                    .UseStartup<Startup>()\r\n                    .UseUrls(settings.LocalServer)\r\n                    .Build();\r\n\r\n                webHost.Start();\r\n                $\"SignalR running on {settings.LocalServer}\".WriteInfoLog();\r\n                StartupService.Current.StartThriftServices(commonSettings.LocalServerIP, port, cancelTokenSource,\r\n                   new List<(Type Type, string ServiceName, string ServiceNameConfig)>() { (typeof(IAccessService), $\"{serviceName}-{commonSettings.LocalServerIP.Replace(\".\", \"-\")}-{port}\", serviceName) });\r\n\r\n                cancelTokenSource.Token.WaitHandle.WaitOne();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                logger.Error($\"Access run error：{ex.Message}\", ex);\r\n            }\r\n        }\r\n    }`\r\n\r\n"},{"Id":"6641750600","Type":"IssuesEvent","CreatedAt":"2017-09-27T03:08:08","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24277","RelatedDescription":"Opened issue \"System.Net.Http.Functional.Tests.CancellationTest.ReadAsStreamAsync_ReadAsync_Cancel_BodyNeverStarted_TaskCanceledQuickly failed in CI\" (#24277) at dotnet/corefx","RelatedBody":"Failed test: System.Net.Http.Functional.Tests.CancellationTest.ReadAsStreamAsync_ReadAsync_Cancel_BodyNeverStarted_TaskCanceledQuickly \r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_release/268/testReport/System.Net.Http.Functional.Tests/CancellationTest/ReadAsStreamAsync_ReadAsync_Cancel_BodyNeverStarted_TaskCanceledQuickly/\r\n\r\nConfiguration: OuterLoop_netcoreapp_win7_release\r\n\r\nMESSAGE:\r\n~~~\r\nElapsed time 00:00:59.8682196 should be less than 30 seconds, was 59.8682196\\r\\nExpected: True\\r\\nActual: False\r\n~~~\r\nSTACK TRACE:\r\n~~~\r\nat System.Net.Http.Functional.Tests.CancellationTest.<>c__DisplayClass4_1.<<ReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly>b__0>d.MoveNext() in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.Net.Http\\tests\\FunctionalTests\\CancellationTest.cs:line 157 \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\nat System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\Common\\tests\\System\\Net\\Http\\LoopbackServer.cs:line 67 \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\nat System.Net.Http.Functional.Tests.CancellationTest.<ReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly>d__4.MoveNext() in D:\\j\\workspace\\outerloop_net---15cfbbd5\\src\\System.Net.Http\\tests\\FunctionalTests\\CancellationTest.cs:line 114 \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n~~~"},{"Id":"6641573913","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:05:46","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24276","RelatedDescription":"Opened issue \"Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test/SetDelegate_ConnectionSucceeds failed with \"System.ComponentModel.Win32Exception : The Local Security Authority cannot be contacted\"\" (#24276) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test/SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, Tls11, Tls12, requestOnlyThisProtocol: True)` has failed.\n\nSystem.Security.Authentication.AuthenticationException : A call to SSPI failed, see inner exception.\\r\n    ---- System.ComponentModel.Win32Exception : The Local Security Authority cannot be contacted\n\n        Stack Trace:\n\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\n       at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\n       at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\n       at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\n       at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\n       at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\n       at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)\n       at System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation, AsyncCallback asyncCallback, Object asyncState)\n       at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__35_1(X509Certificate arg1, Boolean arg2, SslProtocols arg3, AsyncCallback callback, Object state)\n       at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2,TArg3](Func`6 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions)\n       at System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation)\n       at System.Net.Test.Common.LoopbackServer.<AcceptSocketAsync>d__11.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass3_1.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n       at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<SetDelegate_ConnectionSucceeds>d__3.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    ----- Inner Stack Trace -----\n    \nBuild : Master - 20170927.01 (Core Tests)\nFailing configurations:\n- Windows.7.Amd64-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170927.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test~2FSetDelegate_ConnectionSucceeds(acceptedProtocol:%20Tls,%20Tls11,%20Tls12,%20requestOnlyThisProtocol:%20True)"},{"Id":"6641565736","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:03:00","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24275","RelatedDescription":"Opened issue \"Test: System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_ServerNeedsNonStandardAuthAndSetCredential_StatusCodeUnauthorized failed with \"System.Net.Http.WinHttpException : A certificate is required to complete client authentication\"\" (#24275) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_ServerNeedsNonStandardAuthAndSetCredential_StatusCodeUnauthorized(authHeaders: \\\"WWW-Authenticate: CustomAuth\\\\r\\\\n\\\")` has failed.\n\nSystem.Net.Http.HttpRequestException : An error occurred while sending the request.\\r\n    ---- System.Net.Http.WinHttpException : A certificate is required to complete client authentication\n\n        Stack Trace:\n\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass44_0.<<GetAsync_ServerNeedsNonStandardAuthAndSetCredential_StatusCodeUnauthorized>b__0>d.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t)\n       at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()\n       at System.Threading.Tasks.Task.<>c.<.cctor>b__279_1(Object obj)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n       at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n       at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<GetAsync_ServerNeedsNonStandardAuthAndSetCredential_StatusCodeUnauthorized>d__44.MoveNext()\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n    ----- Inner Stack Trace -----\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n       at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()\n       at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\nBuild : Master - 20170927.01 (Core Tests)\nFailing configurations:\n- Windows.7.Amd64-x86\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170927.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FGetAsync_ServerNeedsNonStandardAuthAndSetCredential_StatusCodeUnauthorized(authHeaders:%20%5C%22WWW-Authenticate:%20CustomAuth%5C%5Cr%5C%5Cn%5C%22)"},{"Id":"6641557416","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:00:18","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24274","RelatedDescription":"Opened issue \"Test: System.Drawing.Imaging.Tests.EncoderParameterTests/Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException failed with \"Xunit.Sdk.ThrowsException\"\" (#24274) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Drawing.Imaging.Tests.EncoderParameterTests/Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues: -1)` has failed.\n\nAssert.Throws() Failure\n    Expected: typeof(System.OutOfMemoryException)\n    Actual:   (No exception was thrown)\n\n        Stack Trace:\n\n           at System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(Int32 numberOfValues) in /root/corefx-1017977/src/System.Drawing.Common/tests/Imaging/EncoderParameterTests.cs:line 324\nBuild : Master - 20170927.01 (Core Tests)\nFailing configurations:\n- Ubuntu.1710.Amd64-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170927.01/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1)"},{"Id":"6641557154","Type":"IssuesEvent","CreatedAt":"2017-09-27T02:00:13","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24272","RelatedDescription":"Closed issue \"netcoreapp2.0 - System.AccessViolationException using native dll\" (#24272) at dotnet/corefx","RelatedBody":"Sorry if this is not the right place for this issue.\r\n\r\n## Steps to reproduce\r\nCreate a new netcoreapp2.0 project\r\n\r\n- Add reference to Google.OrTools\r\n- Set target platform to x64\r\n- Use the following Main function:\r\n\r\n```\r\nstatic void Main(string[] args) {\r\n    var solver = new Solver(\"Test\");\r\n}\r\n```\r\n\r\n- Run\r\n\r\n## Expected  behavior\r\nThe solver should be instanciated and the program should terminate without exception.\r\n\r\n## Actual behavior\r\nThe solver instanciation throws an exception:\r\n`System.AccessViolationException : 'Attempted to read or write protected memory. This is often an indication that other memory is corrupt.'`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nOutils en ligne de commande .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n## Notes\r\nThe library currently works  on the net46 framework.\r\nAn issue is also opened on the google side: https://github.com/google/or-tools/issues/463\r\n\r\n## Question\r\nKnowing that this dll uses a Swig wrapper, is there any indication that could be provided to https://github.com/google/or-tools/issues/463?\r\n\r\n\r\n\r\n\r\n"},{"Id":"6641479795","Type":"IssuesEvent","CreatedAt":"2017-09-27T01:35:38","Actor":"anurse","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24273","RelatedDescription":"Opened issue \"EventCounters not reporting data in 2.0\" (#24273) at dotnet/corefx","RelatedBody":"I have a sample app that uses EventCounters: https://github.com/anurse/EventCounterTest\r\n\r\nIn the app, I write to an event counter every 100ms, and I configure a listener to aggregate event counters every 1s:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.Tracing;\r\n\r\nnamespace EventCounterTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args) => AsyncMain(args).Wait();\r\n\r\n        static async Task AsyncMain(string[] args)\r\n        {\r\n            var cts = new CancellationTokenSource();\r\n            Console.CancelKeyPress += (sender, a) =>\r\n            {\r\n                cts.Cancel();\r\n                a.Cancel = true;\r\n            };\r\n\r\n            var listener = new HostingEventSourceListener();\r\n\r\n            Console.WriteLine(\"Press Ctrl-C to stop\");\r\n            for (var i = 0; !cts.Token.IsCancellationRequested; i++)\r\n            {\r\n                var url = $\"https://localhost/?iter={i}\";\r\n\r\n                MinimalEventCounterSource.Log.Request(url, i);\r\n                try\r\n                {\r\n                    await Task.Delay(100, cts.Token);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    [EventSource(Name = \"Samples-EventCounterDemos-Minimal\")]\r\n    public sealed class MinimalEventCounterSource : EventSource\r\n    {\r\n        public static MinimalEventCounterSource Log = new MinimalEventCounterSource();\r\n        private EventCounter _requestCounter;\r\n\r\n        private MinimalEventCounterSource()\r\n        {\r\n            _requestCounter = new EventCounter(\"request\", this);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Call this method to indicate that a request for a URL was made which tool a particular amount of time\r\n        /// </summary>\r\n        public void Request(string url, float elapsedMSec)\r\n        {\r\n            WriteEvent(1, url, elapsedMSec);    // This logs it to the event stream if events are on.    \r\n            _requestCounter.WriteMetric(elapsedMSec);        // This adds it to the EventCounter called 'Request' if PerfCounters are on\r\n        }\r\n    }\r\n\r\n    public class HostingEventSourceListener : EventListener\r\n    {\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Name.Equals(\"Samples-EventCounterDemos-Minimal\"))\r\n            {\r\n                EnableEvents(eventSource, EventLevel.LogAlways, EventKeywords.All, new Dictionary<string, string>()\r\n                {\r\n                    { \"EventCounterIntervalSec\", \"1\" }\r\n                });\r\n            }\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            Console.WriteLine($\"{eventData.EventName}\");\r\n            foreach (var payload in eventData.Payload)\r\n            {\r\n                if (payload is IDictionary<string, object> payloadDictionary)\r\n                {\r\n                    foreach (var data in payloadDictionary)\r\n                    {\r\n                        Console.WriteLine($\" {data.Key} - {data.Value}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen I run the app in `netcoreapp1.1`, I get the following output:\"\r\n\r\n```\r\nPress Ctrl-C to stop\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nEventCounters\r\n Name - request\r\n Mean - 4.5\r\n StandardDerivation - 2.872281\r\n Count - 10\r\n Min - 0\r\n Max - 9\r\n IntervalSec - 1.015035\r\nRequest\r\n...\r\n```\r\n\r\nSo the EventCounter is firing at the requested interval.\r\n\r\nHowever, if I switch the target framework to `netcoreapp2.0` and re-run the app, I get this output:\r\n\r\n```\r\nPress Ctrl-C to stop\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\nRequest\r\n...\r\n```\r\n\r\nThe EventCounters event is never fired. The same behavior is seen with out-of-process monitoring in PerfView. The only difference between the projects is the target framework.\r\n\r\nI investigated a little further and noticed that [in 2.0.0](https://github.com/dotnet/corefx/blob/release/2.0.0/src/System.Diagnostics.Tracing/src/System/Diagnostics/Tracing/EventCounter.cs#L246) the code that attaches the EventCounter to the EventSource is `#ifdef`ed:\r\n\r\nhttps://github.com/dotnet/corefx/blob/653cb2fc7844dddeff43b03638bc0140bc4fc61c/src/System.Diagnostics.Tracing/src/System/Diagnostics/Tracing/EventCounter.cs#L248\r\n\r\nHowever, when I view the assembly in my 2.0.0 shared runtime folder in ILspy, I see that the method is empty (Looking at \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.0\\System.Diagnostics.Tracing.dll\", and I verified against the DLL in the ZIP as well):\r\n\r\n![image](https://user-images.githubusercontent.com/7574/30891472-71614b18-a2e8-11e7-944e-ad74cd5bce02.png)\r\n\r\nLooking at 1.1.x, I see the code is present (Looking at \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\1.1.4\\System.Diagnostics.Tracing.dll\"):\r\n\r\n![image](https://user-images.githubusercontent.com/7574/30891490-8c0bf346-a2e8-11e7-8c09-6bfb7250ceee.png)\r\n\r\nIt looks like maybe this code was `#ifdef`ed out of the 2.0 build :(\r\n\r\n/cc @DamianEdwards @davidfowl @JunTaoLuo @vancem "},{"Id":"6641387101","Type":"IssuesEvent","CreatedAt":"2017-09-27T00:57:01","Actor":"darkengines","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24272","RelatedDescription":"Opened issue \"netcoreapp2.0 - System.AccessViolationException using native dll\" (#24272) at dotnet/corefx","RelatedBody":"Sorry if this is not the right place for this issue.\r\n\r\n## Steps to reproduce\r\nCreate a new netcoreapp2.0 project\r\n\r\n- Add reference to Google.OrTools\r\n- Set target platform to x64\r\n- Use the following Main function:\r\n\r\n```\r\nstatic void Main(string[] args) {\r\n    var solver = new Solver(\"Test\");\r\n}\r\n```\r\n\r\n- Run\r\n\r\n## Expected  behavior\r\nThe solver should be instanciated and the program should terminate without exception.\r\n\r\n## Actual behavior\r\nThe solver instanciation throws an exception:\r\n`System.AccessViolationException : 'Attempted to read or write protected memory. This is often an indication that other memory is corrupt.'`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nOutils en ligne de commande .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n## Notes\r\nThe library currently works  on the net46 framework.\r\nAn issue is also opened on the google side: https://github.com/google/or-tools/issues/463\r\n\r\n## Question\r\nKnowing that this dll uses a Swig wrapper, is there any indication that could be provided to https://github.com/google/or-tools/issues/463?\r\n\r\n\r\n\r\n\r\n"},{"Id":"6641377207","Type":"IssuesEvent","CreatedAt":"2017-09-27T00:52:54","Actor":"ApocDev","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24271","RelatedDescription":"Opened issue \"\"Cyclic\" (but not cyclic) generic structure results in ReflectionTypeLoadException\" (#24271) at dotnet/corefx","RelatedBody":"In the full .NET platform, the following is a non-issue, however in .NET Core/Standard, it results in a ReflectionTypeLoadException (with a fairly useless exception message)\r\n\r\nGiven the following structures:\r\n\r\n```\r\n    public struct GenericStruct<T> where T : struct\r\n    {\r\n        public IntPtr Ptr;\r\n    }\r\n\r\n    public struct StructA\r\n    {\r\n        public GenericStruct<StructB> B;\r\n    }\r\n\r\n    public struct StructB\r\n    {\r\n        public GenericStruct<StructA> A;\r\n    }\r\n```\r\n\r\nNotice that StructA has a reference to StructB, and vice versa, however neither structure actually implements a field containing either. (They boil down to `IntPtr Ptr`)\r\n\r\nIn the full framework, these types of things are allowed, and (at least personally) used heavily in certain interop scenarios to help with native code interfaces that use a lot of templates.\r\n\r\nLoading the assembly via `AssemblyLoadContext.Default.LoadFromAssemblyPath` and calling `GetTypes` on it results in the following ReflectionTypeLoadException:\r\n\r\n> Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.\r\nCould not load type 'GenericStructureTest.StructB' from assembly 'GenericStructureTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\nCould not load type 'GenericStructureTest.StructA' from assembly 'GenericStructureTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6641993275","Type":"PullRequestEvent","CreatedAt":"2017-09-27T04:43:44","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22084","RelatedDescription":"Merged pull request \"Add breaking change doc for TypedReference delegate conversion.\" (#22084) at dotnet/roslyn","RelatedBody":"Related to https://github.com/dotnet/roslyn/issues/21979\r\n@VSadov Please review.\r\n"},{"Id":"6641929905","Type":"IssuesEvent","CreatedAt":"2017-09-27T04:17:08","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/12864","RelatedDescription":"Closed issue \"Question about coalesce behavior with struct\" (#12864) at dotnet/roslyn","RelatedBody":"I have the following struct:\n\n```\npublic struct MyStruct\n{\n    public int? Value { get; private set; }\n\n    public MyStruct(int? value)\n    {\n        this.Value = value;\n    }\n\n    public static implicit operator MyStruct(int? i)\n    {\n        return new MyStruct(2);\n    }\n}\n```\n\nThen when I call it with \n`var test = null ?? new MyStruct(1);`\n\ntest is of type MyStruct and test.Value equals 1. \nI would expect a compiler error because MyStruct cannot be null or, at very least, I would expect that test.Value would be equal to 2.\n\nSo is it a bug or am I missing something?\n"},{"Id":"6641877621","Type":"IssuesEvent","CreatedAt":"2017-09-27T03:56:51","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/438","RelatedDescription":"Closed issue \"Proposal: conditional with value type and null.\" (#438) at dotnet/roslyn","RelatedBody":"Currently (at least pre-roslyn), the code `int? x = a ? 1 : null` gives the error\n\n```\nCS0173: Type of conditional expression cannot be determined because there is no implicit conversion between 'int' and '<null>'\n```\n\nand instead you have to type `int? x = a ? 1 : (int?)null`.\n\nCan this be changed in a future version?\n"},{"Id":"6641875733","Type":"IssuesEvent","CreatedAt":"2017-09-27T03:56:07","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11886","RelatedDescription":"Closed issue \"Make (condition ? 1 : null) just work\" (#11886) at dotnet/roslyn","RelatedBody":"The ?: operator is awkward to use when one of the branches is `null` and the other branch is a non-nullable value type.\n\n```\nvar nullableInteger = condition ? 1 : null; // instead of:\nvar nullableInteger = condition ? 1 : default(int?); // or:\nvar nullableInteger = condition ? (int?)1 : null;\n```\n\n(Code taken from https://github.com/dotnet/roslyn/issues/2136#issuecomment-224903866).\n\nFor some reason this pattern seems to come up frequently. Often, it's only a subexpression. For that reason a statement-based solution such as the following is not always working (and is not good style anyway):\n\n```\nint? nullableInteger = null;\nif (condition) nullableInteger = 1;\n```\n\nIs there a way the C# language could be changed to make this just work?\n"},{"Id":"6641245964","Type":"IssuesEvent","CreatedAt":"2017-09-26T23:58:18","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22362","RelatedDescription":"Opened issue \"GetOperation inconsistency with VariableDeclaratorSyntax in VB\" (#22362) at dotnet/roslyn","RelatedBody":"In VB, whether or not `GetOperation` will work with a `VariableDeclaratorSyntax` depends on whether or nod the variable declaration is in the form of `As New`. In this case it works successfully:\r\n\r\n```VB.NET\r\nDim a As New M\r\n```\r\n\r\nIn this case, it returns Nothing:\r\n\r\n```VB.NET\r\nDim a As Integer = 1\r\n```\r\n\r\nThis is because of how `GetVariableDeclarationStatementVariables` works, http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Operations/VisualBasicOperationFactory_Methods.vb,3cc49210c7e7ca7d,references. In the case of a `BoundLocalDeclaration`, we create the `IVariableDeclaration` with `boundLocalDeclaration.Syntax`. This syntax node is `a`, the `ModifiedIdentifierSyntax`. The `As New` case uses the `BoundAsNewLocalDeclarations.Syntax`, which is the `VariableDeclarationSyntax` node.\r\n\r\nFixing up the successful bind case here is relatively trivial, as the parent of the `ModifiedIdentifierSyntax` is the `VariableDeclaratorSyntax` we're looking for. However, the invalid syntax case gets a bit tricker. Given the following code:\r\n\r\n```VB.NET\r\nDim a, b As Integer = 1\r\n```\r\n\r\nWe get a `BoundDimStatement` with two `BoundLocalDeclaration`s under it, both of which use the `ModifiedIdentifierSyntax` as their node. The second `BoundLocalDeclaration` will have the initializer. @AlekseyTs and I did some brainstorming offline, and the theory we've come up with is to somehow detect this case and deduplicate the `IVariableDeclaration` statement, putting both `ILocalSymbol`s in a single `IVariableDeclaration`, with the initializer from the last bound node.\r\n\r\nIn order to do this, Aleksey proposed that we could modify the bound nodes, such that we see a shape at the end that corresponds to the IOperation shape we want. I'm thinking that we should be able to get away with detecting this scenario by determining if consecutive `BoundLocalDeclaration` nodes have the same `VariableDeclaratorSyntax` as parent nodes to their syntax nodes, as this is the only scenario that can occur in.\r\n\r\nAs part of this, we should also consider adding a bool property of `AsNewInitializer`, as we cannot currently tell the different between `Dim a As M = New M()` and `Dim a As New M()`"},{"Id":"6641225213","Type":"PullRequestEvent","CreatedAt":"2017-09-26T23:50:20","Actor":"khyperia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22039","RelatedDescription":"Merged pull request \"Do not emit PDB path in PE file if not generating PDB\" (#22039) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/21935\r\n\r\nThis regression was caused by this region of change: https://github.com/dotnet/roslyn/commit/b66f68c485fb1c6bbfa69c62490ff47d37d5dae5#diff-9ab09861519e8dfab2c0787cad46ab15L2412\r\n\r\nIn particular, before the change, if `pdbFilePath != null` and `pdbStreamProvider == null`, the resulting `pePdbPath == null`.\r\n\r\nAfter the change, if `pePdbFilePath != null` and `pdbStreamProvider == null`, `pePdbFilePath == the_original_value`.\r\n\r\n(conditions simplified a bit to make it more readable)\r\n\r\nSo, this PR fixes it up to keep the behavior before the change.\r\n\r\n(Putting the PDB path in the PE file is keyed off that variable being null or not)\r\n\r\n---\r\n\r\nI don't know how to test this change. I have manually verified it works, but advice on how to unit-test this (and prevent further regressions) would be appreciated."},{"Id":"6641206098","Type":"PullRequestEvent","CreatedAt":"2017-09-26T23:42:45","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22076","RelatedDescription":"Merged pull request \"Property Reference Underlying Instance Type\" (#22076) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/21769, by making the type of the implicit IInstanceReferenceExpression match the type of the object being constructed, rather than the type defining the property. In order to do this in C#, I had to add a symbol to the bound node. I also added support for VB, as it currently just has NoneOperation for this node."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6641779415","Type":"PullRequestEvent","CreatedAt":"2017-09-27T03:19:32","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4622","RelatedDescription":"Opened pull request \"Add ThreadPool.QueueUserWorkItem(..., bool preferLocal)\" (#4622) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/14214 to corert"},{"Id":"6641015978","Type":"IssuesEvent","CreatedAt":"2017-09-26T22:35:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4214","RelatedDescription":"Closed issue \"GC Crash in Thread Start on Release Mode Builds\" (#4214) at dotnet/corert","RelatedBody":"There is an intermittent GC crash in garbage collection on Ubuntu during thread startup. #4124 exposes this issue. For every 100 runs of the Threading test in Ubuntu built in Release mode on #4124, between 2 and 6 will crash with this error. I've attached the [crash dump](https://github.com/dotnet/corert/files/1166917/GC.Crash.Dump.zip).\r\n\r\nHere is a callstack from one of the crashes:\r\n```\r\n#0  0x000000000041366d in GcEnumObject(Object**, unsigned int, void (*)(Object**, ScanContext*, unsigned int), ScanContext*) ()\r\n#1  0x000000000041247e in EnumGcRefsCallback(void*, void**, unsigned int) ()\r\n#2  0x0000000000461f3f in GcInfoDecoder::EnumerateLiveSlots(REGDISPLAY*, bool, unsigned int, void (*)(void*, void**, unsigned int), void*) ()\r\n#3  0x0000000000463b71 in UnixNativeCodeManager::EnumGcRefs(MethodInfo*, void*, REGDISPLAY*, GCEnumContext*) ()\r\n#4  0x000000000041243b in RedhawkGCInterface::EnumGcRefs(ICodeManager*, MethodInfo*, void*, REGDISPLAY*, void*, void*) ()\r\n#5  0x000000000041e617 in Thread::GcScanRootsWorker(void*, void*, StackFrameIterator&) ()\r\n#6  0x000000000041e480 in Thread::GcScanRoots(void*, void*) ()\r\n#7  0x0000000000413492 in GCToEEInterface::GcScanRoots(void (*)(Object**, ScanContext*, unsigned int), int, int, ScanContext*) ()\r\n#8  0x0000000000432c5e in WKS::gc_heap::mark_phase(int, unsigned int) ()\r\n#9  0x00000000004304d0 in WKS::gc_heap::gc1() ()\r\n#10 0x00000000004390fc in WKS::gc_heap::garbage_collect(int) ()\r\n#11 0x000000000042d287 in WKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) ()\r\n#12 0x000000000042ee27 in WKS::gc_heap::try_allocate_more_space(alloc_context*, unsigned long, int) ()\r\n#13 0x000000000045180d in WKS::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int) ()\r\n#14 0x00000000004122f6 in RhpGcAlloc ()\r\n#15 0x00000000004677e4 in RhpNewObject ()\r\n#16 0x0000000000476470 in S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject ()\r\n#17 0x0000000000487e9c in S_P_CoreLib_Internal_Runtime_ThreadStatics__AllocateThreadStaticStorageForType ()\r\n#18 0x0000000000483840 in S_P_CoreLib_Internal_Runtime_ThreadStatics__GetThreadStaticBaseForType ()\r\n#19 0x00000000004b2304 in S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__StartThread ()\r\n#20 0x00000000004ab9fd in S_P_CoreLib_Internal_Runtime_Augments_RuntimeThread__ThreadEntryPoint ()\r\n#21 0x00007fd717b66184 in start_thread (arg=0x7fd6f5ffb700) at pthread_create.c:312\r\n#22 0x00007fd717892ffd in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\r\n```\r\n\r\nI've traced the issue to `src/Native/Runtime/coreclr/gcinfodecoder.cpp`. \r\n\r\n`GCInfoDecoder::ReportRegisterToGC` (called inline in `ReportSlotToGC`, which is in turn inlined into `EnumerateLiveSlots`), calls `GetRegisterSlot`. Sometimes, `GetRegisterSlot` returns null on non-Windows systems. This happens to be one of those times apparently. CoreCLR has a code block below to handle this situation, but it is `ifdef`d out with flags that we do not use on CoreRT. If the null value makes it to the call to the callback `pCallBack`, then the system crashes, so we need to add a fallback like CoreCLR.\r\n\r\nThe machinery it uses to support its fallback (a `pCurrentContext` member on the `REGDISPLAY` struct), is not in CoreRT, so the fix isn't a simple `ifdef` change.\r\n"},{"Id":"6640970215","Type":"PullRequestEvent","CreatedAt":"2017-09-26T22:20:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4621","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4621) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6640963968","Type":"PullRequestEvent","CreatedAt":"2017-09-26T22:18:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4621","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4621) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6640781629","Type":"PullRequestEvent","CreatedAt":"2017-09-26T21:29:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4452","RelatedDescription":"Merged pull request \"Improved System.Decimal performance\" (#4452) at dotnet/corert","RelatedBody":"As discussed in https://github.com/dotnet/coreclr/issues/10642#issuecomment-321104523, I've done some perf work on core decimal functions. The goal is to get faster than the native (OleAut) implementation currently used in CoreCLR and then move System.Decimal to the shared partition.\r\n\r\nHaven't done any 32-bit specific optimizations, so that might need some more work. @jkotas is this approach OK? I added CMP first because I changed it the most. I've been testing it by binary-comparing the results between native/CoreRT/CoreRT2, but I imagine this would be a bit overkill for CoreCLR tests (large parts of Decimal[.DecCalc].cs would have to be included in the tests folder)? For the CoreRT build I used pre-recorded input and expected output files, but for 440 different decimals it's ~9MB. Would it make sense to trim the input set down to for example 100 decimals and include the ~0.5MB reference data file in tests?\r\n\r\n---\r\n\r\nPerf measured using a weighted [random distribution of decimals](https://gist.github.com/pentp/260d9641ce4490c94f708d64e7fbd7c8) that might better represent real world use (gist is sorted for better overview). A total of 440^2=~190K combinations were tested (excluding overflows/div-by-0).\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 2 (10.0.15063)\r\nProcessor=Intel Core i7-7700K CPU 4.20GHz (Kaby Lake), ProcessorCount=8\r\n.NET Core SDK=\r\n  [Host] : .NET Core ? (Framework 4.6.25731.0), 64bit RyuJIT\r\n\r\nEvaluateOverhead=False  Toolchain=InProcessToolchain  WarmupCount=1  \r\n```\r\n### 64-bit\r\n |  CMP |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 21.83 ns | 0.0176 ns | 0.0165 ns |   1.00 |\r\n |  CoreRT | 38.32 ns | 0.0465 ns | 0.0435 ns |   1.75 |\r\n | CoreRT2 | 11.13 ns | 0.0038 ns | 0.0030 ns |   0.50 |\r\n\r\n |  ADD |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 28.05 ns | 0.0121 ns | 0.0108 ns |   1.00 |\r\n |  CoreRT | 50.58 ns | 0.0944 ns | 0.0883 ns |   1.80 |\r\n | CoreRT2 | 23.99 ns | 0.0184 ns | 0.0172 ns |   0.86 |\r\n\r\n |  MUL |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 29.86 ns | 0.0063 ns | 0.0056 ns |   1.00 |\r\n |  CoreRT | 31.38 ns | 0.0348 ns | 0.0326 ns |   1.05 |\r\n | CoreRT2 | 18.67 ns | 0.0160 ns | 0.0150 ns |   0.62 |\r\n\r\n |  DIV |      Mean |     Error |    StdDev | Scaled |\r\n |-------- |----------:|----------:|----------:|-------:|\r\n |  Native | 116.90 ns | 0.3287 ns | 0.2745 ns |   1.00 |\r\n |  CoreRT | 183.50 ns | 0.2975 ns | 0.2783 ns |   1.57 |\r\n | CoreRT2 |  78.49 ns | 0.0675 ns | 0.0631 ns |   0.67 |\r\n\r\n### 32-bit\r\n |  CMP |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 16.53 ns | 0.0087 ns | 0.0078 ns |   1.00 |\r\n |  CoreRT | 48.12 ns | 0.0387 ns | 0.0362 ns |   2.91 |\r\n | CoreRT2 | 15.90 ns | 0.0160 ns | 0.0142 ns |   0.96 |\r\n\r\n | ADD |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 28.84 ns | 0.0097 ns | 0.0091 ns |   1.00 |\r\n |  CoreRT | 65.52 ns | 0.0695 ns | 0.0650 ns |   2.27 |\r\n | CoreRT2 | 36.35 ns | 0.0075 ns | 0.0063 ns |   1.26 |\r\n\r\n |  MUL |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 19.26 ns | 0.0144 ns | 0.0134 ns |   1.00 |\r\n |  CoreRT | 49.18 ns | 0.0704 ns | 0.0658 ns |   2.55 |\r\n | CoreRT2 | 28.61 ns | 0.0186 ns | 0.0155 ns |   1.48 |\r\n\r\n |  DIV |     Mean |     Error |    StdDev | Scaled |\r\n |-------- |---------:|----------:|----------:|-------:|\r\n |  Native | 121.2 ns | 0.0571 ns | 0.0476 ns |   1.00 |\r\n |  CoreRT | 236.1 ns | 0.1411 ns | 0.1320 ns |   1.95 |\r\n | CoreRT2 | 122.5 ns | 0.0959 ns | 0.0897 ns |   1.01 |\r\n\r\n### 64-bit CoreRT (same test data, basic measurement code):\r\n\r\n |  Method |     Before |     After |\r\n |-------- |---------:|---------:|\r\n |  CMP | 34.1 ns | 12.4 ns |\r\n |  ADD | 50.0 ns | 25.2 ns |\r\n |  MUL | 31.9 ns | 19.0 ns |\r\n |  DIV | 183.3 ns | 79.6 ns |"},{"Id":"6639576146","Type":"PullRequestEvent","CreatedAt":"2017-09-26T17:07:20","Actor":"ph1ll","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4620","RelatedDescription":"Opened pull request \"Add placeholder build option for WebAssembly\" (#4620) at dotnet/corert","RelatedBody":"This commit adds a placeholder build target for WebAssembly to the bash and batch build scripts (#4504).\r\n\r\nAt present, an error is displayed advising that the wasm build is not yet implemented before exiting.\r\n\r\nI was hoping to try and take a look at the cmake scripts for #4505, and this seemed like a sensible first step. "},{"Id":"6636429767","Type":"PullRequestEvent","CreatedAt":"2017-09-26T05:25:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4616","RelatedDescription":"Closed pull request \"update RyuJITVersion\" (#4616) at dotnet/corert","RelatedBody":"I have some problems running Linux with the last ruyjit, so create PR to run lab tests."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":36,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":24,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":16,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":65,"FavoriteCount":52,"RawContent":null},{"Id":"910985746386911237","CreatedAt":"2017-09-21T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Introducing Razor Pages - Join the session here:… https://t.co/NTQg6urmhQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"910970647702065152","CreatedAt":"2017-09-21T20:55:02+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: The #CSharp async await workout - a hands-on coding dem… https://t.co/JDvyBkgvww","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2017-09-27T05:30:18.5367214Z","RunDurationInMilliseconds":6726}