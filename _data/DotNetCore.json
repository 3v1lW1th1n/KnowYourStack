{"Data":{"Blog":{"FeedItems":[{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6781874852","Type":"IssuesEvent","CreatedAt":"2017-10-30T04:16:48","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14732","RelatedDescription":"Closed issue \"[RyuJIT/x86][JitStressRegs=8] Assertion failed '!nextRefPosition->RequiresRegister()'\" (#14732) at dotnet/coreclr","RelatedBody":"This is similar to #14624. It is an overly aggressive assert that needs to be loosened when the register candidates have been constrained for stress testing.\r\nIt appeared in the ARM altjit stress testing, but is actually an x86 failure."},{"Id":"6781874850","Type":"PullRequestEvent","CreatedAt":"2017-10-30T04:16:48","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14733","RelatedDescription":"Merged pull request \"Fix another overly agressive assert\" (#14733) at dotnet/coreclr","RelatedBody":"Fix #14732"},{"Id":"6780450193","Type":"PullRequestEvent","CreatedAt":"2017-10-29T14:22:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14741","RelatedDescription":"Merged pull request \"Update Hashtable.cs\" (#14741) at dotnet/coreclr","RelatedBody":"Fix little misspelling."},{"Id":"6780008977","Type":"PullRequestEvent","CreatedAt":"2017-10-29T08:40:47","Actor":"AndreasCag","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14741","RelatedDescription":"Opened pull request \"Update Hashtable.cs\" (#14741) at dotnet/coreclr","RelatedBody":"Fix little misspelling."},{"Id":"6779973014","Type":"IssuesEvent","CreatedAt":"2017-10-29T08:06:24","Actor":"ashishnegi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14740","RelatedDescription":"Opened issue \"Running dotnet as low priviledge process\" (#14740) at dotnet/coreclr","RelatedBody":"Hi \r\n\r\nOn our test servers, we want to run dotnet with `Network Service` account, which has low privileges.\r\n However, `dotnet testapp.dll` gives us `Access Denied`.\r\n\r\nI tried setting `set DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true` and `set NUGET_FALLBACK_PACKAGES=%cd%\\fallback_folder` and then run `dotnet`.\r\n\r\nThis does not help.\r\n\r\ndotnet version is `2.0.2`.\r\n\r\nI tried `set COREHOST_TRACE=1` to see if i get any debug info. But only `Access Denied` is printed on `stderr`.\r\n\r\nHow can i debug why dotnet is failing to start ?"},{"Id":"6779436797","Type":"PullRequestEvent","CreatedAt":"2017-10-28T22:56:49","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14739","RelatedDescription":"Opened pull request \"Clean up YieldProcessorNormalized\" (#14739) at dotnet/coreclr","RelatedBody":"Separated YieldProcessorNormalized changes from PR https://github.com/dotnet/coreclr/pull/14216 to simplify that PR:\r\n- Moved YieldProcessorNormalized into separate files\r\n- Cleaned up YieldProcessorNormalized"},{"Id":"6779105587","Type":"IssuesEvent","CreatedAt":"2017-10-28T18:51:29","Actor":"shravan2x","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14738","RelatedDescription":"Opened issue \"High memory usage on Ubuntu 16\" (#14738) at dotnet/coreclr","RelatedBody":"_This is a cross post from https://github.com/aspnet/Home/issues/2052 and https://github.com/aspnet/KestrelHttpServer/issues/2141. I am also posting here under the recommendation of @benaadams._\r\n\r\nI run a number of ASP .NET Core 1.1 servers on Ubuntu. This is the `htop` view of one of the processes:\r\n\r\n![image](https://user-images.githubusercontent.com/4096676/27004803-bad831ac-4dd5-11e7-8bc0-e54871eaf91f.png)\r\n\r\nThe process appears to be using 20G of VIRT. I understand that this is not actually allocated memory, but is the highest among all processes running on the entire system. This is view of a number of apps:\r\n\r\n![image](https://user-images.githubusercontent.com/4096676/27004820-0b96467e-4dd6-11e7-9d36-8e9d37e5f317.png)\r\n\r\nEvery one of the `20.xG` VIRTs is an ASP.NET Core app (and every other app in the 1000M range is `mono`). The actual ASP.NET server itself runs on Kestrel, is very simple and serves only static pages via MVC.\r\n\r\n1. Is there a reason for such a high `VIRT`?\r\n2. Why does an app that only serves static pages have 47M of _private_ memory? (I'm aware some other language like PHP or even plain HTML might be better suited for my use, but I use ASP since it is more customizable and fun to work with)\r\n\r\nPlease note that since this scenario lies on a production server, the version is 1.1. I apologize if it has already been resolved in another issue.\r\n\r\n**UPDATE**: This issue still persists on .NET Core 2.0 and ASP.NET Core 2.0."},{"Id":"6779058851","Type":"PullRequestEvent","CreatedAt":"2017-10-28T18:18:50","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14737","RelatedDescription":"Opened pull request \"Simplify Comparer/EqualityComparers\" (#14737) at dotnet/coreclr","RelatedBody":"- Make EnumEqualityComparer sealed. This helps with JIT optimizations.\r\n- Delete SByteEnumEqualityComparer and ShortEnumEqualityComparer because of they are not needed anymore. The optimization that they were introduced for is done by the JIT now.\r\n- Deleted ForwardedFrom attributes on types that do not need them"},{"Id":"6779043085","Type":"IssuesEvent","CreatedAt":"2017-10-28T18:07:48","Actor":"tmds","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14687","RelatedDescription":"Closed issue \"Missing lttng jit inline success/failed events\" (#14687) at dotnet/coreclr","RelatedBody":"Program.cs:\r\n```C#\r\nusing System;\r\n\r\nnamespace console\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Inlined(\"1\");\r\n            NotInlined(\"1\");\r\n        }\r\n\r\n        private static int Inlined(string value)\r\n        {\r\n            return int.Parse(value);\r\n        }\r\n\r\n        private static int NotInlined(string value)\r\n        {\r\n            try\r\n            {\r\n                return int.Parse(value);\r\n            }\r\n            catch (Exception) { return 0; }\r\n        }\r\n    }\r\n}\r\n```\r\nlttng session:\r\n```\r\nlttng create\r\nlttng enable-event -u DotNETRuntime:MethodJitInliningFailed,DotNETRuntime:MethodJitInliningSucceeded\r\nlttng start\r\n// dotnet console.dll\r\nlttng stop\r\nlttng destroy\r\n```\r\ncomplete babeltrace log:\r\n```\r\n[10:51:12.022986139] (+?.?????????) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 282, ___data___length = 282, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 98, [87] = 0, [88] = 111, [89] = 0, [90] = 111, [91] = 0, [92] = 108, [93] = 0, [94] = 32, [95] = 0, [96] = 32, [97] = 0, [98] = 40, [99] = 0, [100] = 41, [101] = 0, [102] = 0, [103] = 0, [104] = 100, [105] = 0, [106] = 121, [107] = 0, [108] = 110, [109] = 0, [110] = 97, [111] = 0, [112] = 109, [113] = 0, [114] = 105, [115] = 0, [116] = 99, [117] = 0, [118] = 67, [119] = 0, [120] = 108, [121] = 0, [122] = 97, [123] = 0, [124] = 115, [125] = 0, [126] = 115, [127] = 0, [128] = 0, [129] = 0, [130] = 73, [131] = 0, [132] = 76, [133] = 0, [134] = 95, [135] = 0, [136] = 83, [137] = 0, [138] = 84, [139] = 0, [140] = 85, [141] = 0, [142] = 66, [143] = 0, [144] = 95, [145] = 0, [146] = 85, [147] = 0, [148] = 110, [149] = 0, [150] = 98, [151] = 0, [152] = 111, [153] = 0, [154] = 120, [155] = 0, [156] = 105, [157] = 0, [158] = 110, [159] = 0, [160] = 103, [161] = 0, [162] = 83, [163] = 0, [164] = 116, [165] = 0, [166] = 117, [167] = 0, [168] = 98, [169] = 0, [170] = 0, [171] = 0, [172] = 105, [173] = 0, [174] = 110, [175] = 0, [176] = 115, [177] = 0, [178] = 116, [179] = 0, [180] = 97, [181] = 0, [182] = 110, [183] = 0, [184] = 99, [185] = 0, [186] = 101, [187] = 0, [188] = 32, [189] = 0, [190] = 98, [191] = 0, [192] = 111, [193] = 0, [194] = 111, [195] = 0, [196] = 108, [197] = 0, [198] = 32, [199] = 0, [200] = 32, [201] = 0, [202] = 40, [203] = 0, [204] = 41, [205] = 0, [206] = 0, [207] = 0, [208] = 60, [209] = 0, [210] = 110, [211] = 0, [212] = 117, [213] = 0, [214] = 108, [215] = 0, [216] = 108, [217] = 0, [218] = 62, [219] = 0, [220] = 0, [221] = 0, [222] = 60, [223] = 0, [224] = 110, [225] = 0, [226] = 117, [227] = 0, [228] = 108, [229] = 0, [230] = 108, [231] = 0, [232] = 62, [233] = 0, [234] = 0, [235] = 0, [236] = 60, [237] = 0, [238] = 110, [239] = 0, [240] = 117, [241] = 0, [242] = 108, [243] = 0, [244] = 108, [245] = 0, [246] = 62, [247] = 0, [248] = 0, [249] = 0, [250] = 0, [251] = 0, [252] = 0, [253] = 0, [254] = 116, [255] = 97, [256] = 114, [257] = 103, [258] = 101, [259] = 116, [260] = 32, [261] = 110, [262] = 111, [263] = 116, [264] = 32, [265] = 100, [266] = 105, [267] = 114, [268] = 101, [269] = 99, [270] = 116, [271] = 32, [272] = 109, [273] = 97, [274] = 110, [275] = 97, [276] = 103, [277] = 101, [278] = 100, [279] = 0, [280] = 0, [281] = 0 ] }\r\n[10:51:12.023209331] (+0.000223192) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 350, ___data___length = 350, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 112, [87] = 0, [88] = 77, [89] = 0, [90] = 84, [91] = 0, [92] = 58, [93] = 0, [94] = 32, [95] = 0, [96] = 48, [97] = 0, [98] = 48, [99] = 0, [100] = 48, [101] = 0, [102] = 48, [103] = 0, [104] = 55, [105] = 0, [106] = 70, [107] = 0, [108] = 48, [109] = 0, [110] = 57, [111] = 0, [112] = 50, [113] = 0, [114] = 53, [115] = 0, [116] = 66, [117] = 0, [118] = 70, [119] = 0, [120] = 57, [121] = 0, [122] = 57, [123] = 0, [124] = 53, [125] = 0, [126] = 56, [127] = 0, [128] = 32, [129] = 0, [130] = 32, [131] = 0, [132] = 40, [133] = 0, [134] = 41, [135] = 0, [136] = 0, [137] = 0, [138] = 100, [139] = 0, [140] = 121, [141] = 0, [142] = 110, [143] = 0, [144] = 97, [145] = 0, [146] = 109, [147] = 0, [148] = 105, [149] = 0, [150] = 99, [151] = 0, [152] = 67, [153] = 0, [154] = 108, [155] = 0, [156] = 97, [157] = 0, [158] = 115, [159] = 0, [160] = 115, [161] = 0, [162] = 0, [163] = 0, [164] = 73, [165] = 0, [166] = 76, [167] = 0, [168] = 95, [169] = 0, [170] = 83, [171] = 0, [172] = 84, [173] = 0, [174] = 85, [175] = 0, [176] = 66, [177] = 0, [178] = 95, [179] = 0, [180] = 85, [181] = 0, [182] = 110, [183] = 0, [184] = 98, [185] = 0, [186] = 111, [187] = 0, [188] = 120, [189] = 0, [190] = 105, [191] = 0, [192] = 110, [193] = 0, [194] = 103, [195] = 0, [196] = 83, [197] = 0, [198] = 116, [199] = 0, [200] = 117, [201] = 0, [202] = 98, [203] = 0, [204] = 0, [205] = 0, [206] = 105, [207] = 0, [208] = 110, [209] = 0, [210] = 115, [211] = 0, [212] = 116, [213] = 0, [214] = 97, [215] = 0, [216] = 110, [217] = 0, [218] = 99, [219] = 0, [220] = 101, [221] = 0, [222] = 32, [223] = 0, [224] = 112, [225] = 0, [226] = 77, [227] = 0, [228] = 84, [229] = 0, [230] = 58, [231] = 0, [232] = 32, [233] = 0, [234] = 48, [235] = 0, [236] = 48, [237] = 0, [238] = 48, [239] = 0, [240] = 48, [241] = 0, [242] = 55, [243] = 0, [244] = 70, [245] = 0, [246] = 48, [247] = 0, [248] = 57, [249] = 0, [250] = 50, [251] = 0, [252] = 53, [253] = 0, [254] = 66, [255] = 0, [256] = 70, [257] = 0, [258] = 57, [259] = 0, [260] = 57, [261] = 0, [262] = 53, [263] = 0, [264] = 56, [265] = 0, [266] = 32, [267] = 0, [268] = 32, [269] = 0, [270] = 40, [271] = 0, [272] = 41, [273] = 0, [274] = 0, [275] = 0, [276] = 60, [277] = 0, [278] = 110, [279] = 0, [280] = 117, [281] = 0, [282] = 108, [283] = 0, [284] = 108, [285] = 0, [286] = 62, [287] = 0, [288] = 0, [289] = 0, [290] = 60, [291] = 0, [292] = 110, [293] = 0, [294] = 117, [295] = 0, [296] = 108, [297] = 0, [298] = 108, [299] = 0, [300] = 62, [301] = 0, [302] = 0, [303] = 0, [304] = 60, [305] = 0, [306] = 110, [307] = 0, [308] = 117, [309] = 0, [310] = 108, [311] = 0, [312] = 108, [313] = 0, [314] = 62, [315] = 0, [316] = 0, [317] = 0, [318] = 0, [319] = 0, [320] = 0, [321] = 0, [322] = 116, [323] = 97, [324] = 114, [325] = 103, [326] = 101, [327] = 116, [328] = 32, [329] = 110, [330] = 111, [331] = 116, [332] = 32, [333] = 100, [334] = 105, [335] = 114, [336] = 101, [337] = 99, [338] = 116, [339] = 32, [340] = 109, [341] = 97, [342] = 110, [343] = 97, [344] = 103, [345] = 101, [346] = 100, [347] = 0, [348] = 0, [349] = 0 ] }\r\n[10:51:12.025546916] (+0.002337585) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 282, ___data___length = 282, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 118, [87] = 0, [88] = 111, [89] = 0, [90] = 105, [91] = 0, [92] = 100, [93] = 0, [94] = 32, [95] = 0, [96] = 32, [97] = 0, [98] = 40, [99] = 0, [100] = 41, [101] = 0, [102] = 0, [103] = 0, [104] = 100, [105] = 0, [106] = 121, [107] = 0, [108] = 110, [109] = 0, [110] = 97, [111] = 0, [112] = 109, [113] = 0, [114] = 105, [115] = 0, [116] = 99, [117] = 0, [118] = 67, [119] = 0, [120] = 108, [121] = 0, [122] = 97, [123] = 0, [124] = 115, [125] = 0, [126] = 115, [127] = 0, [128] = 0, [129] = 0, [130] = 73, [131] = 0, [132] = 76, [133] = 0, [134] = 95, [135] = 0, [136] = 83, [137] = 0, [138] = 84, [139] = 0, [140] = 85, [141] = 0, [142] = 66, [143] = 0, [144] = 95, [145] = 0, [146] = 85, [147] = 0, [148] = 110, [149] = 0, [150] = 98, [151] = 0, [152] = 111, [153] = 0, [154] = 120, [155] = 0, [156] = 105, [157] = 0, [158] = 110, [159] = 0, [160] = 103, [161] = 0, [162] = 83, [163] = 0, [164] = 116, [165] = 0, [166] = 117, [167] = 0, [168] = 98, [169] = 0, [170] = 0, [171] = 0, [172] = 105, [173] = 0, [174] = 110, [175] = 0, [176] = 115, [177] = 0, [178] = 116, [179] = 0, [180] = 97, [181] = 0, [182] = 110, [183] = 0, [184] = 99, [185] = 0, [186] = 101, [187] = 0, [188] = 32, [189] = 0, [190] = 118, [191] = 0, [192] = 111, [193] = 0, [194] = 105, [195] = 0, [196] = 100, [197] = 0, [198] = 32, [199] = 0, [200] = 32, [201] = 0, [202] = 40, [203] = 0, [204] = 41, [205] = 0, [206] = 0, [207] = 0, [208] = 60, [209] = 0, [210] = 110, [211] = 0, [212] = 117, [213] = 0, [214] = 108, [215] = 0, [216] = 108, [217] = 0, [218] = 62, [219] = 0, [220] = 0, [221] = 0, [222] = 60, [223] = 0, [224] = 110, [225] = 0, [226] = 117, [227] = 0, [228] = 108, [229] = 0, [230] = 108, [231] = 0, [232] = 62, [233] = 0, [234] = 0, [235] = 0, [236] = 60, [237] = 0, [238] = 110, [239] = 0, [240] = 117, [241] = 0, [242] = 108, [243] = 0, [244] = 108, [245] = 0, [246] = 62, [247] = 0, [248] = 0, [249] = 0, [250] = 0, [251] = 0, [252] = 0, [253] = 0, [254] = 116, [255] = 97, [256] = 114, [257] = 103, [258] = 101, [259] = 116, [260] = 32, [261] = 110, [262] = 111, [263] = 116, [264] = 32, [265] = 100, [266] = 105, [267] = 114, [268] = 101, [269] = 99, [270] = 116, [271] = 32, [272] = 109, [273] = 97, [274] = 110, [275] = 97, [276] = 103, [277] = 101, [278] = 100, [279] = 0, [280] = 0, [281] = 0 ] }\r\n[10:51:12.025757444] (+0.000210528) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 282, ___data___length = 282, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 98, [87] = 0, [88] = 111, [89] = 0, [90] = 111, [91] = 0, [92] = 108, [93] = 0, [94] = 32, [95] = 0, [96] = 32, [97] = 0, [98] = 40, [99] = 0, [100] = 41, [101] = 0, [102] = 0, [103] = 0, [104] = 100, [105] = 0, [106] = 121, [107] = 0, [108] = 110, [109] = 0, [110] = 97, [111] = 0, [112] = 109, [113] = 0, [114] = 105, [115] = 0, [116] = 99, [117] = 0, [118] = 67, [119] = 0, [120] = 108, [121] = 0, [122] = 97, [123] = 0, [124] = 115, [125] = 0, [126] = 115, [127] = 0, [128] = 0, [129] = 0, [130] = 73, [131] = 0, [132] = 76, [133] = 0, [134] = 95, [135] = 0, [136] = 83, [137] = 0, [138] = 84, [139] = 0, [140] = 85, [141] = 0, [142] = 66, [143] = 0, [144] = 95, [145] = 0, [146] = 85, [147] = 0, [148] = 110, [149] = 0, [150] = 98, [151] = 0, [152] = 111, [153] = 0, [154] = 120, [155] = 0, [156] = 105, [157] = 0, [158] = 110, [159] = 0, [160] = 103, [161] = 0, [162] = 83, [163] = 0, [164] = 116, [165] = 0, [166] = 117, [167] = 0, [168] = 98, [169] = 0, [170] = 0, [171] = 0, [172] = 105, [173] = 0, [174] = 110, [175] = 0, [176] = 115, [177] = 0, [178] = 116, [179] = 0, [180] = 97, [181] = 0, [182] = 110, [183] = 0, [184] = 99, [185] = 0, [186] = 101, [187] = 0, [188] = 32, [189] = 0, [190] = 98, [191] = 0, [192] = 111, [193] = 0, [194] = 111, [195] = 0, [196] = 108, [197] = 0, [198] = 32, [199] = 0, [200] = 32, [201] = 0, [202] = 40, [203] = 0, [204] = 41, [205] = 0, [206] = 0, [207] = 0, [208] = 60, [209] = 0, [210] = 110, [211] = 0, [212] = 117, [213] = 0, [214] = 108, [215] = 0, [216] = 108, [217] = 0, [218] = 62, [219] = 0, [220] = 0, [221] = 0, [222] = 60, [223] = 0, [224] = 110, [225] = 0, [226] = 117, [227] = 0, [228] = 108, [229] = 0, [230] = 108, [231] = 0, [232] = 62, [233] = 0, [234] = 0, [235] = 0, [236] = 60, [237] = 0, [238] = 110, [239] = 0, [240] = 117, [241] = 0, [242] = 108, [243] = 0, [244] = 108, [245] = 0, [246] = 62, [247] = 0, [248] = 0, [249] = 0, [250] = 0, [251] = 0, [252] = 0, [253] = 0, [254] = 116, [255] = 97, [256] = 114, [257] = 103, [258] = 101, [259] = 116, [260] = 32, [261] = 110, [262] = 111, [263] = 116, [264] = 32, [265] = 100, [266] = 105, [267] = 114, [268] = 101, [269] = 99, [270] = 116, [271] = 32, [272] = 109, [273] = 97, [274] = 110, [275] = 97, [276] = 103, [277] = 101, [278] = 100, [279] = 0, [280] = 0, [281] = 0 ] }\r\n[10:51:12.025879234] (+0.000121790) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 350, ___data___length = 350, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 112, [87] = 0, [88] = 77, [89] = 0, [90] = 84, [91] = 0, [92] = 58, [93] = 0, [94] = 32, [95] = 0, [96] = 48, [97] = 0, [98] = 48, [99] = 0, [100] = 48, [101] = 0, [102] = 48, [103] = 0, [104] = 55, [105] = 0, [106] = 70, [107] = 0, [108] = 48, [109] = 0, [110] = 57, [111] = 0, [112] = 50, [113] = 0, [114] = 53, [115] = 0, [116] = 66, [117] = 0, [118] = 70, [119] = 0, [120] = 57, [121] = 0, [122] = 57, [123] = 0, [124] = 53, [125] = 0, [126] = 56, [127] = 0, [128] = 32, [129] = 0, [130] = 32, [131] = 0, [132] = 40, [133] = 0, [134] = 41, [135] = 0, [136] = 0, [137] = 0, [138] = 100, [139] = 0, [140] = 121, [141] = 0, [142] = 110, [143] = 0, [144] = 97, [145] = 0, [146] = 109, [147] = 0, [148] = 105, [149] = 0, [150] = 99, [151] = 0, [152] = 67, [153] = 0, [154] = 108, [155] = 0, [156] = 97, [157] = 0, [158] = 115, [159] = 0, [160] = 115, [161] = 0, [162] = 0, [163] = 0, [164] = 73, [165] = 0, [166] = 76, [167] = 0, [168] = 95, [169] = 0, [170] = 83, [171] = 0, [172] = 84, [173] = 0, [174] = 85, [175] = 0, [176] = 66, [177] = 0, [178] = 95, [179] = 0, [180] = 85, [181] = 0, [182] = 110, [183] = 0, [184] = 98, [185] = 0, [186] = 111, [187] = 0, [188] = 120, [189] = 0, [190] = 105, [191] = 0, [192] = 110, [193] = 0, [194] = 103, [195] = 0, [196] = 83, [197] = 0, [198] = 116, [199] = 0, [200] = 117, [201] = 0, [202] = 98, [203] = 0, [204] = 0, [205] = 0, [206] = 105, [207] = 0, [208] = 110, [209] = 0, [210] = 115, [211] = 0, [212] = 116, [213] = 0, [214] = 97, [215] = 0, [216] = 110, [217] = 0, [218] = 99, [219] = 0, [220] = 101, [221] = 0, [222] = 32, [223] = 0, [224] = 112, [225] = 0, [226] = 77, [227] = 0, [228] = 84, [229] = 0, [230] = 58, [231] = 0, [232] = 32, [233] = 0, [234] = 48, [235] = 0, [236] = 48, [237] = 0, [238] = 48, [239] = 0, [240] = 48, [241] = 0, [242] = 55, [243] = 0, [244] = 70, [245] = 0, [246] = 48, [247] = 0, [248] = 57, [249] = 0, [250] = 50, [251] = 0, [252] = 53, [253] = 0, [254] = 66, [255] = 0, [256] = 70, [257] = 0, [258] = 57, [259] = 0, [260] = 57, [261] = 0, [262] = 53, [263] = 0, [264] = 56, [265] = 0, [266] = 32, [267] = 0, [268] = 32, [269] = 0, [270] = 40, [271] = 0, [272] = 41, [273] = 0, [274] = 0, [275] = 0, [276] = 60, [277] = 0, [278] = 110, [279] = 0, [280] = 117, [281] = 0, [282] = 108, [283] = 0, [284] = 108, [285] = 0, [286] = 62, [287] = 0, [288] = 0, [289] = 0, [290] = 60, [291] = 0, [292] = 110, [293] = 0, [294] = 117, [295] = 0, [296] = 108, [297] = 0, [298] = 108, [299] = 0, [300] = 62, [301] = 0, [302] = 0, [303] = 0, [304] = 60, [305] = 0, [306] = 110, [307] = 0, [308] = 117, [309] = 0, [310] = 108, [311] = 0, [312] = 108, [313] = 0, [314] = 62, [315] = 0, [316] = 0, [317] = 0, [318] = 0, [319] = 0, [320] = 0, [321] = 0, [322] = 116, [323] = 97, [324] = 114, [325] = 103, [326] = 101, [327] = 116, [328] = 32, [329] = 110, [330] = 111, [331] = 116, [332] = 32, [333] = 100, [334] = 105, [335] = 114, [336] = 101, [337] = 99, [338] = 116, [339] = 32, [340] = 109, [341] = 97, [342] = 110, [343] = 97, [344] = 103, [345] = 101, [346] = 100, [347] = 0, [348] = 0, [349] = 0 ] }\r\n[10:51:12.025997698] (+0.000118464) puter DotNETRuntime:MethodJitInliningFailed: { cpu_id = 4 }, { length = 282, ___data___length = 282, __data__ = [ [0] = 100, [1] = 0, [2] = 121, [3] = 0, [4] = 110, [5] = 0, [6] = 97, [7] = 0, [8] = 109, [9] = 0, [10] = 105, [11] = 0, [12] = 99, [13] = 0, [14] = 67, [15] = 0, [16] = 108, [17] = 0, [18] = 97, [19] = 0, [20] = 115, [21] = 0, [22] = 115, [23] = 0, [24] = 0, [25] = 0, [26] = 73, [27] = 0, [28] = 76, [29] = 0, [30] = 95, [31] = 0, [32] = 83, [33] = 0, [34] = 84, [35] = 0, [36] = 85, [37] = 0, [38] = 66, [39] = 0, [40] = 95, [41] = 0, [42] = 85, [43] = 0, [44] = 110, [45] = 0, [46] = 98, [47] = 0, [48] = 111, [49] = 0, [50] = 120, [51] = 0, [52] = 105, [53] = 0, [54] = 110, [55] = 0, [56] = 103, [57] = 0, [58] = 83, [59] = 0, [60] = 116, [61] = 0, [62] = 117, [63] = 0, [64] = 98, [65] = 0, [66] = 0, [67] = 0, [68] = 105, [69] = 0, [70] = 110, [71] = 0, [72] = 115, [73] = 0, [74] = 116, [75] = 0, [76] = 97, [77] = 0, [78] = 110, [79] = 0, [80] = 99, [81] = 0, [82] = 101, [83] = 0, [84] = 32, [85] = 0, [86] = 118, [87] = 0, [88] = 111, [89] = 0, [90] = 105, [91] = 0, [92] = 100, [93] = 0, [94] = 32, [95] = 0, [96] = 32, [97] = 0, [98] = 40, [99] = 0, [100] = 41, [101] = 0, [102] = 0, [103] = 0, [104] = 100, [105] = 0, [106] = 121, [107] = 0, [108] = 110, [109] = 0, [110] = 97, [111] = 0, [112] = 109, [113] = 0, [114] = 105, [115] = 0, [116] = 99, [117] = 0, [118] = 67, [119] = 0, [120] = 108, [121] = 0, [122] = 97, [123] = 0, [124] = 115, [125] = 0, [126] = 115, [127] = 0, [128] = 0, [129] = 0, [130] = 73, [131] = 0, [132] = 76, [133] = 0, [134] = 95, [135] = 0, [136] = 83, [137] = 0, [138] = 84, [139] = 0, [140] = 85, [141] = 0, [142] = 66, [143] = 0, [144] = 95, [145] = 0, [146] = 85, [147] = 0, [148] = 110, [149] = 0, [150] = 98, [151] = 0, [152] = 111, [153] = 0, [154] = 120, [155] = 0, [156] = 105, [157] = 0, [158] = 110, [159] = 0, [160] = 103, [161] = 0, [162] = 83, [163] = 0, [164] = 116, [165] = 0, [166] = 117, [167] = 0, [168] = 98, [169] = 0, [170] = 0, [171] = 0, [172] = 105, [173] = 0, [174] = 110, [175] = 0, [176] = 115, [177] = 0, [178] = 116, [179] = 0, [180] = 97, [181] = 0, [182] = 110, [183] = 0, [184] = 99, [185] = 0, [186] = 101, [187] = 0, [188] = 32, [189] = 0, [190] = 118, [191] = 0, [192] = 111, [193] = 0, [194] = 105, [195] = 0, [196] = 100, [197] = 0, [198] = 32, [199] = 0, [200] = 32, [201] = 0, [202] = 40, [203] = 0, [204] = 41, [205] = 0, [206] = 0, [207] = 0, [208] = 60, [209] = 0, [210] = 110, [211] = 0, [212] = 117, [213] = 0, [214] = 108, [215] = 0, [216] = 108, [217] = 0, [218] = 62, [219] = 0, [220] = 0, [221] = 0, [222] = 60, [223] = 0, [224] = 110, [225] = 0, [226] = 117, [227] = 0, [228] = 108, [229] = 0, [230] = 108, [231] = 0, [232] = 62, [233] = 0, [234] = 0, [235] = 0, [236] = 60, [237] = 0, [238] = 110, [239] = 0, [240] = 117, [241] = 0, [242] = 108, [243] = 0, [244] = 108, [245] = 0, [246] = 62, [247] = 0, [248] = 0, [249] = 0, [250] = 0, [251] = 0, [252] = 0, [253] = 0, [254] = 116, [255] = 97, [256] = 114, [257] = 103, [258] = 101, [259] = 116, [260] = 32, [261] = 110, [262] = 111, [263] = 116, [264] = 32, [265] = 100, [266] = 105, [267] = 114, [268] = 101, [269] = 99, [270] = 116, [271] = 32, [272] = 109, [273] = 97, [274] = 110, [275] = 97, [276] = 103, [277] = 101, [278] = 100, [279] = 0, [280] = 0, [281] = 0 ] }\r\n```\r\n\r\nThese 6 DotNETRuntime:MethodJitInliningFailed are all for dynamicClass.IL_STUB_UnboxingStub.\r\nI was expecting events for console.Program.Inlined and console.Program.NotInlined. Probably there should be more events.\r\n\r\nPerhaps events are not flushed on application shutdown?\r\n\r\nCC @brianrob @vancem"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6779036462","Type":"IssuesEvent","CreatedAt":"2017-10-28T18:03:10","Actor":"rkeithhill","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7927","RelatedDescription":"Closed issue \"Need command list installed runtimes and SDKs\" (#7927) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nTell a project contributor to find out which versions of the .NET Core SDK they have installed to help you troubleshoot a build problem they are having.  \r\n\r\n## Expected  behavior\r\nYou tell the user to run `dotnet list` to get a list of installed runtimes and SDKs.  Or perhaps there is a switch to control which is listed.\r\n\r\n## Actual behavior\r\nBasically you tell them [this](https://github.com/dotnet/announcements/issues/34) for the runtimes:\r\n\r\nOperating System | Location\r\n-- | --\r\nWindows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\\r\nmacOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/\r\nSupported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/\r\n\r\nand to dir another set of directories for the SDKs.  That's a spew.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6777778291","Type":"IssuesEvent","CreatedAt":"2017-10-28T00:58:01","Actor":"rkeithhill","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7928","RelatedDescription":"Opened issue \"dotnet is not finding 2.0.0 SDK on system with it installed in the user's AppData dir\" (#7928) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn a clean system (no previous .NET Core installs) Install 2.0.2 SDK from http://dot.net\r\nGit clone the PowerShell repo: `git clone --recursive https://github.com/PowerShell/PowerShell.git`\r\nOpen PowerShell prompt and cd to PowerShell repo\r\nExecute: `Import-Module .\\build.psm1`, then `Start-PSBootstrap` and finally `Start-PSBuild`.\r\nThat will install .NET Core 2.0.0 into the user's AppData folder\r\nNote: we have a global.json file in the repo root that pegs the SDK at 2.0.0\r\nThe Start-PSBuild command does a `dotnet --version` check and fails if it isn't `2.0.0`.\r\n\r\n## Expected  behavior\r\nglobal.json set to 2.0.0 should cause `dotnet --version` to return 2.0.0.\r\n\r\n## Actual behavior\r\n`dotnet --version` returns 2.0.2 so this particular user can't build even though he has 2.0.0 SDK installed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nNot sure.  The original [issue](https://github.com/PowerShell/PowerShell/issues/5260) was filed on the PowerShell repo.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6777768034","Type":"IssuesEvent","CreatedAt":"2017-10-28T00:50:55","Actor":"rkeithhill","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7927","RelatedDescription":"Opened issue \"Need command list installed runtimes and SDKs\" (#7927) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nTell a project contributor to find out which versions of the .NET Core SDK they have installed to help you troubleshoot a build problem they are having.  \r\n\r\n## Expected  behavior\r\nYou tell the user to run `dotnet list` to get a list of installed runtimes and SDKs.  Or perhaps there is a switch to control which is listed.\r\n\r\n## Actual behavior\r\nBasically you tell them [this](https://github.com/dotnet/announcements/issues/34) for the runtimes:\r\n\r\nOperating System | Location\r\n-- | --\r\nWindows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\\r\nmacOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/\r\nSupported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/\r\n\r\nand to dir another set of directories for the SDKs.  That's a spew.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6777710621","Type":"IssuesEvent","CreatedAt":"2017-10-28T00:15:01","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7926","RelatedDescription":"Opened issue \"Update the --info output\" (#7926) at dotnet/cli","RelatedBody":"Update --info to the following scheme:\r\n\r\n```bash\r\n$ dotnet --info\r\n.NET Core SDK Information:\r\n  SDK Version:  x.y.z\r\n  SDK Build:    e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\nRuntime Environment:\r\n  OS Name:      Mac OS X\r\n  OS Version:   10.12\r\n  OS Platform:  Darwin\r\n  RID:          osx.10.12-x64\r\n  Base Path:    /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\n.NET Core Host (dotnet) Information:\r\n  Host Version: x.y.z\r\n  Host Build:   fab8861ac7faf042c87a5c2f9f2d04c98b69f297\r\n\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6777537245","Type":"PullRequestEvent","CreatedAt":"2017-10-27T22:53:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7924","RelatedDescription":"Merged pull request \"Updating the version of the command line parser.\" (#7924) at dotnet/cli","RelatedBody":""},{"Id":"6777534505","Type":"PullRequestEvent","CreatedAt":"2017-10-27T22:52:53","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7890","RelatedDescription":"Merged pull request \"update fsharp compiler for preview release\" (#7890) at dotnet/cli","RelatedBody":"Update dotnet cli to latest F# compiler."},{"Id":"6777494387","Type":"IssuesEvent","CreatedAt":"2017-10-27T22:36:59","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7696","RelatedDescription":"Closed issue \"Use MSBuild /restore for implicit restore\" (#7696) at dotnet/cli","RelatedBody":"Commands that perform an implicit restore (invoke MSBuild /t:Restore and then build normally) should move to use the `/restore` command-line flag to reduce JIT compile time.\r\n\r\nSee https://github.com/Microsoft/msbuild/pull/2414\r\n"},{"Id":"6777492803","Type":"IssuesEvent","CreatedAt":"2017-10-27T22:36:24","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7009","RelatedDescription":"Closed issue \"Cannot pass /clp:NoSummary to dotnet build\" (#7009) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n```\r\ndotnet build /clp:NoSummary\r\n```\r\n\r\n## Expected  behavior\r\n\r\nNo build summary shall be displayed (e.g. duplicated errors).\r\n\r\nThe behaviour should be the same as using it with msbuild:\r\n\r\n```\r\n$ dotnet msbuild /clp:NoSummary\r\nMicrosoft (R) Build Engine version 15.3.388.41745 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nProgram.cs(5,21): error CS0116: A namespace cannot directly contain members such as fields or methods [/Users/martin.ullrich/tmp/tmp.csproj]\r\n```\r\n\r\n## Actual behavior\r\n\r\nBuild summary is displayed:\r\n\r\n```\r\n$ dotnet build /clp:NoSummary\r\nMicrosoft (R) Build Engine version 15.3.388.41745 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nProgram.cs(5,21): error CS0116: A namespace cannot directly contain members such as fields or methods [/Users/martin.ullrich/tmp/tmp.csproj]\r\n\r\nBuild FAILED.\r\n\r\nProgram.cs(5,21): error CS0116: A namespace cannot directly contain members such as fields or methods [/Users/martin.ullrich/tmp/tmp.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.50\r\n```\r\n\r\nThis seems to be because the implementation of the `build` verb always appends `/clp:Summary` to the arguments, overriding the passed in arguments.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0-preview2-006502)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006502\r\n Commit SHA-1 hash:  07dfded669\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0-preview2-006502/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25407-01\r\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6777483938","Type":"PullRequestEvent","CreatedAt":"2017-10-27T22:33:11","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7896","RelatedDescription":"Merged pull request \"Use msbuild /restore instead of a separate process\" (#7896) at dotnet/cli","RelatedBody":"Use msbuild /restore instead of separate invocations where possible\r\n\r\nFix #7696\r\n\r\nThis saves 300ms on my machine for incremental build of a simple console app (from 1.4s to 1.1s).\r\n\r\nWe still have to miss out on this optimization when there is -f|--framework argument because we cannot force a TargetFramework global property on to the restore evaluation. Doing so completely breaks restore by applying the TargetFramework to all projects transitively. The correct behavior is to restore for all frameworks, then build/publish/etc for the given target framework. Achieving that still requires two distinct msbuild process invocations.\r\n\r\nThis also changes the verbosity of implicit restore from quiet to that of the subsequent command (default=minimal). Similar to global properties, we cannot specify a distinct console verbosity for the /restore portion of the overall execution. For consistency, we apply the same verbosity change to the case where we still use two separate msbuild invocations.\r\n\r\nOutput Before:\r\n```\r\n[Logo]\r\n  qwert -> D:\\temp\\qwert\\bin\\Debug\\netcoreapp2.0\\qwert.dll.\r\n[Summary]\r\n```\r\n\r\nOutput After:\r\n```\r\n[Logo]\r\n  Restoring packages for D:\\temp\\qwert\\qwert.csproj...\r\n  Installing Newtonsoft.Json 10.0.3.\r\n  Restore completed in 763.37 ms for D:\\temp\\qwert\\qwert.csproj.\r\n  qwert -> D:\\temp\\qwert\\bin\\Debug\\netcoreapp2.0\\qwert.dll\r\n[Summary]\r\n```\r\n\r\nIn the incremental no-op restore case, only the line about \"Restore completed in X for Y\" is added. \r\n\r\nhttps://github.com/NuGet/Home/issues/4695 tracks reducing restores output when verbosity is minimal.\r\n\r\n\r\nThis also fixes an issue where the separate restore invocation's msbuild log would be overwritten by the subsequent command execution. However, this remains unfixed in the case where we still use two separate msbuild invocations.\r\n\r\nThe first two commits are strictly separate, but were getting in the way of test changes I needed to make so I tackled them here.\r\n* Remove necessary handling of verbosity in RestoreCommand\r\n* Fix #7009, Cannot pass /clp:NoSummary to dotnet build\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6778790926","Type":"PullRequestEvent","CreatedAt":"2017-10-28T15:19:20","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/563","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02128-02 (master)\" (#563) at dotnet/standard","RelatedBody":""},{"Id":"6778163753","Type":"IssuesEvent","CreatedAt":"2017-10-28T06:47:01","Actor":"safern","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/560","RelatedDescription":"Closed issue \"msbuild error - .NET 4.7.1 console app referrencing dotnet standard 2.0 lib\" (#560) at dotnet/standard","RelatedBody":"Hello, \r\nI got in troubles on my dev environments with switching from .NET Framework 4.6.1 to  4.7.1.\r\nFinally I tried to create simple solution with (console app 4.7.1+ lib ,targeting .netstandard2.0), which build  ended up with:\r\nerror CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nBasically, according to  [Immo Landwerth's video ](https://www.youtube.com/watch?v=u67Eu_IgEMs) it should work :) , but It did't. \r\ndifferences to the video env, I encountered are to the environment on video are:\r\n-  I have newer VS 2017 15.4.1 then I have omitted to install .NET 4.6.2,.NET 4.7 \r\n![image](https://user-images.githubusercontent.com/11144487/32121786-521311cc-bb5e-11e7-9b55-e72aa01bd8d7.png)\r\n- .NET Core SDK 2.0.2\r\n- didn't work on both Win10 1607 build 14393.17770 and 1709 bild 16299.19\r\n\r\nHere we are the solution  [CSOMTest.zip](https://github.com/dotnet/standard/files/1423300/CSOMTest.zip)\r\n"},{"Id":"6777662687","Type":"PullRequestEvent","CreatedAt":"2017-10-27T23:49:20","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/561","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02127-10 (master)\" (#561) at dotnet/standard","RelatedBody":""},{"Id":"6777661672","Type":"PullRequestEvent","CreatedAt":"2017-10-27T23:48:49","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/562","RelatedDescription":"Merged pull request \"Merge dev/release/2.0.0 branch to master\" (#562) at dotnet/standard","RelatedBody":"cc @eerhardt @dagood "},{"Id":"6777517406","Type":"PullRequestEvent","CreatedAt":"2017-10-27T22:46:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/562","RelatedDescription":"Opened pull request \"Merge dev/release/2.0.0 branch to master\" (#562) at dotnet/standard","RelatedBody":"cc @eerhardt @dagood "},{"Id":"6777280643","Type":"PullRequestEvent","CreatedAt":"2017-10-27T21:26:06","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/561","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02127-10 (master)\" (#561) at dotnet/standard","RelatedBody":""},{"Id":"6776899813","Type":"IssuesEvent","CreatedAt":"2017-10-27T19:45:03","Actor":"rychlym","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/560","RelatedDescription":"Opened issue \"msbuild error - .NET 4.7.1 console app referrencing dotnet standard 2.0 lib\" (#560) at dotnet/standard","RelatedBody":"Hello, \r\nI got in troubles on my dev environments with switching from .NET Framework 4.6.1 to  4.7.1.\r\nFinally I tried to create simple solution with (console app 4.7.1+ lib ,targeting .netstandard2.0), which build  ended up with:\r\nerror CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nBasically, according to  [Immo Landwerth's video ](https://www.youtube.com/watch?v=u67Eu_IgEMs) it should work :) , but It did't. \r\ndifferences to the video env, I encountered are to the environment on video are:\r\n-  I have newer VS 2017 15.4.1 then I have omitted to install .NET 4.6.2,.NET 4.7 \r\n![image](https://user-images.githubusercontent.com/11144487/32121786-521311cc-bb5e-11e7-9b55-e72aa01bd8d7.png)\r\n- .NET Core SDK 2.0.2\r\n- didn't work on both Win10 1607 build 14393.17770 and 1709 bild 16299.19\r\n\r\n"},{"Id":"6776610191","Type":"PullRequestEvent","CreatedAt":"2017-10-27T18:32:55","Actor":"chcosta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/553","RelatedDescription":"Merged pull request \"Add transport feed as a source\" (#553) at dotnet/standard","RelatedBody":""},{"Id":"6776142839","Type":"IssuesEvent","CreatedAt":"2017-10-27T16:41:03","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/559","RelatedDescription":"Closed issue \".Net Plaform Standard implementation on .Net 4.7 has version inconsistency for System.Net.Http\" (#559) at dotnet/standard","RelatedBody":"@santhoshkumarmksss commented on [Thu Oct 26 2017](https://github.com/dotnet/core/issues/1050)\n\nI have been using WCF service with .Net 4.7 version and it has project reference of Standard library with version 1.6. If I am using reflection getting bellow error\r\n\r\nSystem.IO.FileLoadException: 'Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'\r\n\r\nCode which generates error:\r\n  Type type = (from assembly in AppDomain.CurrentDomain.GetAssemblies()\r\n                         where assembly.GetName().Name == \"TestStandard\"\r\n                         select assembly.GetType(\"MoE.ERS.DTO.ResourceRequests.PlaygroupResourceRequestDTO\")).FirstOrDefault();\r\n\r\nI have attached sample project reference for which i am getting below error. Also i tried binding redirect in Web.config and still no luck. \r\n\r\nAny quick help will be much appreciated.\r\n\r\n[WcfService1.zip](https://github.com/dotnet/core/files/1420552/WcfService1.zip)\r\n\r\n\r\n\r\n\n\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6781597369","Type":"IssuesEvent","CreatedAt":"2017-10-30T02:10:27","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24946","RelatedDescription":"Opened issue \"Expose RuntimeWrappedException constructor\" (#24946) at dotnet/corefx","RelatedBody":"High-fidelity interpretters need to be to create RuntimeWrappedException. There is no public constructor for RuntimeWrappedException today.\r\n\r\n# Proposed API\r\n```C#\r\npublic class RuntimeWrappedException\r\n{\r\n    public RuntimeWrappedException(object thrownObject);\r\n}\r\n```\r\n\r\n# Details\r\nThe constructor is public in the CoreLib implementation already. It is used by our own `System.Linq.Expression` interpretter (see #24945). This issue is about exposing it in the contract so that 3rd party libraries have access to it as well.\r\n"},{"Id":"6781560114","Type":"PullRequestEvent","CreatedAt":"2017-10-30T01:52:31","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24945","RelatedDescription":"Opened pull request \"Remove private reflection agaist RuntimeWrappedException constructor\" (#24945) at dotnet/corefx","RelatedBody":"RuntimeWrappedException constructor is public in CoreLib now. It can be called directly."},{"Id":"6781550270","Type":"PullRequestEvent","CreatedAt":"2017-10-30T01:47:39","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24944","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx to prerelease-02128-02, preview1-25829-02, preview1-25830-01, respectively (master)\" (#24944) at dotnet/corefx","RelatedBody":""},{"Id":"6781226620","Type":"IssuesEvent","CreatedAt":"2017-10-29T22:27:58","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24796","RelatedDescription":"Closed issue \"[Api] StackTraceFormatting{Options} \" (#24796) at dotnet/corefx","RelatedBody":"## Motivation\r\nStack traces are very noisy as they *post*-exception stacks (and ones used to produce the exception, like `ThrowHelper`s); that are the same for every exception:\r\n```\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() \r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task) \r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult() \r\n   at Program.<DelayedAsync>d__2.MoveNext()\r\n```\r\nWhen only \r\n```\r\n   at Program.<DelayedAsync>d__2.MoveNext()\r\n```\r\nIs useful in diagnosing the exception.\r\n\r\nA way is needed to discard these post-error helper stacks; to make the stack-trace more useful and less noise.\r\n\r\n## Proposed Api\r\n\r\nAdds extra .ctor overload + param to `DebuggerNonUserCodeAttribute`\r\n\r\n```csharp\r\n[Flags]\r\npublic enum StackTraceFormattingOptions\r\n{\r\n    None                   = 0,\r\n    StackTraceHidden       = 1 << 0\r\n    ...\r\n}\r\n```\r\n```csharp\r\npublic partial class DebuggerNonUserCodeAttribute\r\n{\r\n    /// <summary>Initializes the <see cref=\"DebuggerNonUserCodeAttribute\"/>.</summary>\r\n    /// <param name=\"stackTraceOptions\">The <see cref=\"StackTraceFormattingOptions\"/> hint.</param>\r\n    public DebuggerNonUserCodeAttribute(StackTraceFormattingOptions stackTraceOptions)\r\n    {\r\n        StackTraceOptions = stackTraceOptions;\r\n    }\r\n\r\n    /// <summary>Gets the <see cref=\"StackTraceFormattingOptions\"/>.</summary>\r\n    internal StackTraceFormattingOptions StackTraceOptions { get; }\r\n}\r\n```\r\nAdds StackTrace formatting configuration (which can be switched at runtime; if more detailed traces are needed)\r\n```csharp\r\n[Flags]\r\npublic enum StackTraceFormatting\r\n{\r\n    None = 0,\r\n    ExcludeStackTraceHidden   = 1 << 0, // DebuggerNonUserCode /w StackTraceHidden\r\n    ExcludeDispatchBoundaries = 1 << 1,\r\n    ExcludeNonUserCode        = 1 << 2  // DebuggerNonUserCode\r\n    ...\r\n}\r\n```\r\n```csharp\r\npublic partial class StackTrace\r\n{\r\n    public static StackTraceFormatting FormattingOptions { get; set; }\r\n}\r\n```\r\n\r\n\r\n**Related:**\r\n* \"Make stack traces readable\" https://github.com/dotnet/corefx/issues/24627\r\n* \"Improved formatting for async stack traces\" https://github.com/dotnet/coreclr/issues/2813\r\n* \"Provide an API for traversing/reasoning about async call stacks\" https://github.com/dotnet/corefx/issues/1370\r\n* \"BuilderMethodAttribute\" https://github.com/dotnet/corefx/issues/24795"},{"Id":"6781169150","Type":"IssuesEvent","CreatedAt":"2017-10-29T21:50:52","Actor":"LHCGreg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24943","RelatedDescription":"Opened issue \"Calling Dispose() on a socket inside a synchronous Accept() on Linux hangs\" (#24943) at dotnet/corefx","RelatedBody":"Operation System: Debian Stretch\r\nTested with git master (coreclr SHA 67a66156d0307b49522a13618522d289268bc1f9 and corefx SHA 389d7ee)\r\n\r\nReproduction code: https://gist.github.com/LHCGreg/a8a144da68d59f225a4b2c4bd1cbd05d\r\n\r\nThis program takes three arguments. First argument is 'async' or 'sync' for whether to call Accept() or AcceptAsync(). Second argument is 'shutdown' to try to stop listening socket by calling Shutdown(SocketShutdown.Both), then Dispose(), or 'dispose' to just call Dispose(). Third argument is 'signal' to register signal handlers for SIGINT (or ctrl+c on windows) and SIGTERM (netcore only), or 'auto' to automatically try to stop the listening socket after 3 seconds.\r\n\r\nReproduction steps:\r\n\r\nOn Linux, run\r\n\r\n```\r\ndotnet SocketStopTest.dll sync dispose auto\r\n```\r\n\r\nExpected result: A SocketException is thrown from the Accept() call and the program terminates.\r\n\r\nActual result: The program hangs inside Socket.Dispose().\r\n\r\nOn Windows, both full framework and .net core, calling Dispose() on a Socket that is in a synchronous Accept() call will break it out of the Accept() call with a SocketException. On Linux, it hangs inside the Dispose(). On Linux, calling Shutdown(SocketShutdown.Both) before calling Dispose() works and causes a SocketException to be thrown from the Accept(), although the exception message is a little weird: \"Invalid argument\". But on Windows, whether full framework or .net core, calling Shutdown(SocketShutdown.Both) apparently hangs when called from regular code or throws a SocketException on the Shutdown (and does not interrupt the Accept) when called from a ctrl+c handler with a message of \"A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied\"\r\n\r\nWith AcceptAsync(), Dispose() generally works as expected on Windows full framework, Windows .net core, and Linux .net core, with the small exception of Windows full framework raising ObjectDisposedException from the accept task instead of SocketException.\r\n\r\nSee outcome.txt in the gist for outcomes of all combinations of Windows net47 vs Windows netcore vs Linux netcore, Accept() vs. AsyncAccept(), Shutdown(SocketShutdown.Both) + Dispose() vs. just Dispose(), and socket stopped from delayed Task vs. ctrl+c/SIGINT handler vs. SIGTERM handler.\r\n\r\nIt's also far from clear from documentation what the correct way of interrupting an Accepting socket is. One might guess to call Dispose() on it, but calling Shutdown would be another reasonable guess and works on Linux but not Windows."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6781101331","Type":"IssuesEvent","CreatedAt":"2017-10-29T21:08:31","Actor":"pquiring","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22905","RelatedDescription":"Opened issue \"IdentifierName Node missing symbol info\" (#22905) at dotnet/roslyn","RelatedBody":"**Version Used**:  2.4.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. compile sample code\r\n2. print SyntaxNode tree\r\n\r\n**Expected Behavior**:\r\nIdentifierName node has symbol info\r\n\r\n**Actual Behavior**:\r\nIn the invocation to setCallback() the IdentifierName SyntaxNode for setCallback has no symbol info making it difficult to analyze code.  The invocation to call() has proper symbol info.\r\n\r\nThanks\r\n\r\n```\r\nusing System;\r\n\r\nnamespace test\r\n{\r\n    public delegate void funcptr(int x);\r\n\r\n    public class Base {\r\n        funcptr ptr;\r\n        public void setCallback(funcptr ptr) {\r\n            this.ptr = ptr;\r\n        }\r\n        public void call() {\r\n            ptr(1);\r\n        }\r\n    }\r\n\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Base b = new Base();\r\n            b.setCallback((int x) => {Console.WriteLine(\"x=\" + x);});\r\n            b.call();\r\n        }\r\n    }\r\n}\r\n\r\n```"},{"Id":"6781073711","Type":"IssuesEvent","CreatedAt":"2017-10-29T20:51:45","Actor":"kswoll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22904","RelatedDescription":"Opened issue \"C# compiler should report the correct variable when reporting CS0170\" (#22904) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 15.4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nTry to compile this code:\r\n```\r\nStruct M() \r\n{\r\n\tStruct s;\r\n\t\r\n\tStruct Return()\r\n\t{\r\n\t\treturn s;\r\n\t}\r\n\r\n\ttry\r\n\t{\r\n\t\ts = new Struct();\r\n\t\treturn Return();\r\n\t}\r\n\tcatch (Exception)\r\n\t{\r\n\t\treturn Return();\r\n\t}\r\n}\r\n\r\nstruct Struct\r\n{\r\n\tTimeSpan timeSpan;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nFor the compiler to report:\r\n\r\n> CS0165 Use of possibly unassigned variable `s`\r\n\r\nIdentifying the `return Return();` line inside the `catch` block.\r\n\r\n**Actual Behavior**:\r\n\r\nThe compiler reports:\r\n\r\n> CS0170 Use of possibly unassigned field `_ticks`\r\n\r\nI believe the current behavior is a bug as the error message is very confusing since I didn't have any field `_ticks` in my code."},{"Id":"6780769271","Type":"IssuesEvent","CreatedAt":"2017-10-29T17:40:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22902","RelatedDescription":"Closed issue \"Tuple name inference fail to infer @this element name\" (#22902) at dotnet/roslyn","RelatedBody":"**Version Used**:  master\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Sample\r\n{\r\n    public void FooBar(int x)\r\n    {\r\n        // (Sample, int x)\r\n        var tpl = (this, x);\r\n    }\r\n}\r\n```\r\n\r\nThe inferred type is `(Sample, int x)`, but could be `(Sample @this, int x)`.\r\n\r\nI work on perf critical application and to avoid closure computation I often pass a tuple into a method similar to [`ConcurrentDictionary.GetOrAdd`](https://github.com/dotnet/corefx/blob/afcbd9a5b9e4ecde2db3a69afd093631f1db91c5/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L1010):\r\n\r\n```csharp\r\nclass Sample\r\n{\r\n    private readonly ConcurrentDictionary<int, string> _cd = new ConcurrentDictionary<int, string>();\r\n\r\n    public string GetValue(int value, bool extraState)\r\n    {\r\n        return _cd.GetOrAdd(\r\n            value,\r\n            (key, tpl) =>\r\n            {\r\n                return tpl.@this.ComputeValue(key, tpl.extraState);\r\n            },\r\n            (extraState, @this: this));\r\n    }\r\n\r\n    private string ComputeValue(int value, bool extraState) => value.ToString();\r\n}\r\n```\r\n\r\nAnd in this case, I have to specify a name of the tuple element manually. I understand that my use case is not that common, but I'm curious is there any specific reason why such inference is not implemented? Or this case was just missed?"},{"Id":"6780144062","Type":"IssuesEvent","CreatedAt":"2017-10-29T10:34:28","Actor":"tannergooding","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/16016","RelatedDescription":"Closed issue \"Our 'Building, Debugging, and Testing on Windows' documentation needs updating\" (#16016) at dotnet/roslyn","RelatedBody":"The following doc needs to be updated to list the current requirements of the repo and should list the instructions for building the repo using Dev15 RC2.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md"},{"Id":"6780110792","Type":"IssuesEvent","CreatedAt":"2017-10-29T10:05:39","Actor":"Soarc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22903","RelatedDescription":"Opened issue \"MissingMethodException when using ValueTuples defined in netstandard2.0 lib from net461\" (#22903) at dotnet/roslyn","RelatedBody":"Microsoft Visual Studio 2017 professional, 15.4.1\r\n\r\n**Steps to reproduce**\r\n\r\n1. Create netstandard2.0 library and define method that returns value tuple\r\n2. Create net461 console application and add reference to that library.\r\n3. Call method created in 1.\r\n\r\nI've created sample project that reproduces issue\r\nhttps://github.com/Soarc/RoslynCompilerIssue\r\n\r\n**Expected Behavior**:\r\nAt least should not compile with CS8137 error, until ValueTuples reference added to net461 project.\r\n\r\n**Actual Behavior**:\r\nThrows MissingMethodException at runtime.\r\n\r\nBTW my visual studio throws exception in very weird manner, and actual exception can only be seen in output window.\r\n"},{"Id":"6779834541","Type":"IssuesEvent","CreatedAt":"2017-10-29T05:49:26","Actor":"SergeyTeplyakov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22902","RelatedDescription":"Opened issue \"Tuple name inference fail to infer @this element name\" (#22902) at dotnet/roslyn","RelatedBody":"**Version Used**:  master\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Sample\r\n{\r\n    public void FooBar(int x)\r\n    {\r\n        // (Sample, int x)\r\n        var tpl = (this, x);\r\n    }\r\n}\r\n```\r\n\r\nThe inferred type is `(Sample, int x)`, but could be `(Sample @this, int x)`.\r\n\r\nI work on perf critical application and to avoid closure computation I often pass a tuple into a method similar to [`ConcurrentDictionary.GetOrAdd`](https://github.com/dotnet/corefx/blob/afcbd9a5b9e4ecde2db3a69afd093631f1db91c5/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L1010):\r\n\r\n```csharp\r\nclass Sample\r\n{\r\n    private readonly ConcurrentDictionary<int, string> _cd = new ConcurrentDictionary<int, string>();\r\n\r\n    public string GetValue(int value, bool extraState)\r\n    {\r\n        return _cd.GetOrAdd(\r\n            value,\r\n            (key, tpl) =>\r\n            {\r\n                return tpl.@this.ComputeValue(key, tpl.extraState);\r\n            },\r\n            (extraState, @this: this));\r\n    }\r\n\r\n    private string ComputeValue(int value, bool extraState) => value.ToString();\r\n}\r\n```\r\n\r\nAnd in this case, I have to specify a name of the tuple element manually. I understand that my use case is not that common, but I'm curious is there any specific reason why such inference is not implemented? Or this case was just missed?"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6780565617","Type":"PullRequestEvent","CreatedAt":"2017-10-29T15:33:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4831","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4831) at dotnet/corert","RelatedBody":""},{"Id":"6780565268","Type":"PullRequestEvent","CreatedAt":"2017-10-29T15:32:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4831","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4831) at dotnet/corert","RelatedBody":""},{"Id":"6778771939","Type":"PullRequestEvent","CreatedAt":"2017-10-28T15:06:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4830","RelatedDescription":"Merged pull request \"Fix docker image used for official builds from Debian to Ubuntu\" (#4830) at dotnet/corert","RelatedBody":"We never supported Debian and whatever was making this work stopped working.\r\n\r\nI confirmed this is the last thing we need to fix official builds and publishing for the repo. 🍾 "},{"Id":"6778590382","Type":"PullRequestEvent","CreatedAt":"2017-10-28T12:58:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4830","RelatedDescription":"Opened pull request \"Fix docker image used for official builds from Debian to Ubuntu\" (#4830) at dotnet/corert","RelatedBody":"We never supported Debian and whatever was making this work stopped working.\r\n\r\nI confirmed this is the last thing we need to fix official builds and publishing for the repo. 🍾 "},{"Id":"6777731016","Type":"PullRequestEvent","CreatedAt":"2017-10-28T00:26:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4829","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4829) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6777659814","Type":"PullRequestEvent","CreatedAt":"2017-10-27T23:47:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4829","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4829) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6777207015","Type":"PullRequestEvent","CreatedAt":"2017-10-27T21:04:43","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4828","RelatedDescription":"Merged pull request \"Add correct AssemblyMetadataAttribute for Framework Assembly\" (#4828) at dotnet/corert","RelatedBody":"With Project file cotains Property <IsDotNetFrameworkProductAssembly>true</IsDotNetFrameworkProductAssembly>, the final assembly will contain the following assembly attribute and will consider as Framework Assembly.\r\n[assembly: AssemblyMetadata(\".NETFrameworkAssembly\", \"\")]"},{"Id":"6777069284","Type":"PullRequestEvent","CreatedAt":"2017-10-27T20:28:25","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4828","RelatedDescription":"Opened pull request \"Add correct AssemblyMetadataAttribute for Framework Assembly\" (#4828) at dotnet/corert","RelatedBody":"With Project file cotains Property <IsDotNetFrameworkProductAssembly>true</IsDotNetFrameworkProductAssembly>, the final assembly will contain the following assembly attribute and will consider as Framework Assembly.\r\n[assembly: AssemblyMetadata(\".NETFrameworkAssembly\", \"\")]"},{"Id":"6777040944","Type":"PullRequestEvent","CreatedAt":"2017-10-27T20:21:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4827","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4827) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6777035985","Type":"PullRequestEvent","CreatedAt":"2017-10-27T20:19:46","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4827","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4827) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":76,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":22,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":384,"FavoriteCount":346,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":30,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":79,"RawContent":null}]}},"RunOn":"2017-10-30T05:30:17.9241268Z","RunDurationInMilliseconds":6450}