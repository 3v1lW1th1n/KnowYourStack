{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7066006527","Type":"IssuesEvent","CreatedAt":"2018-01-07T04:23:41","Actor":"firelizzard18","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8342","RelatedDescription":"Opened issue \"Creating a local CLI took package\" (#8342) at dotnet/cli","RelatedBody":"I have a project, `dotnet-mycmd`. I want to use this as a tool in another project via `DotNetCliToolReference`. I've exported a nupkg to a folder and added that folder to the target project's `RestoreSources`. I then added the tool reference and attempted to `dotnet restore`.\r\n\r\nThis succeeds when the project is named something like `mycmd` but fails in all sorts of ways when its named `dotnet-mycmd`. And of course it doesn't work as a tool when the name isn't prefixed with `dotnet-`.\r\n\r\nIn my reproduction ([test.zip](https://github.com/dotnet/cli/files/1609495/test.zip)):\r\n  * A is a netstandard lib\r\n  * A2 is a netstandard lib dependent on A\r\n  * B/dotnet-mycmd is a netcoreapp dependent on A and A2\r\n  * C is a netstandard lib dependent on A with a tool reference to B/dotnet-mycmd\r\n\r\nCurrently, I'm getting these errors (in my reproduction attempt):\r\n```\r\n% dotnet restore C\r\n  Restoring packages for /Users/me/Source/test/C/C.csproj...\r\n  Restore completed in 10.04 ms for /Users/me/Source/test/A/A.csproj.\r\n  Restore completed in 22.78 ms for /Users/me/Source/test/C/C.csproj.\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package dotnet-mycmd. No packages exist with this id in source(s): nuget.org\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Value cannot be null. [/Users/me/Source/test/C/C.csproj]\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Parameter name: path [/Users/me/Source/test/C/C.csproj]\r\n```\r\n\r\nThese are the errors I was getting before I tried to reproduce the issue, translated into the projects I created for the reproduction:\r\n```\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A. No packages exist with this id in source(s): nuget.org\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A2. No packages exist with this id in source(s): nuget.org\r\n```\r\n"},{"Id":"7065459618","Type":"PullRequestEvent","CreatedAt":"2018-01-06T20:18:38","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8341","RelatedDescription":"Opened pull request \"Update to ASP.NET Core shared framework 2.1.0-preview1-28006\" (#8341) at dotnet/cli","RelatedBody":"In 2.1.0, ASP.NET Core is replacing the runtime package store with a shared framework, similar to Microsoft.NETCore.App. This PR updates packages and installers to pull the sharedfx instead of the runtime store.\r\n\r\nIn this PR:\r\n - updates to 2.1.0-preview1-28006\r\n - Unifies aspnetcore packages and installer downloads to one version variable\r\n - Unifies to one aspnetcore myget feed\r\n\r\nNot in this PR:\r\n - debian agnostic aspnetcore installers\r\n - orchestrated build support\r\n - because the \"trampoline\" from the 2.0 runtime store to 2.1 shared framework is not yet implemented in corehost, I'll send a second PR soon to include the 2.0 runtime store alongside the 2.1 aspnetcore shared fx. Our goal is to have the host updated so this can be removed before rtm."},{"Id":"7064116145","Type":"PullRequestEvent","CreatedAt":"2018-01-06T02:17:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8336","RelatedDescription":"Merged pull request \"Reacting to core-setup changes for 'DEB' distro agnostic installers\" (#8336) at dotnet/cli","RelatedBody":"Reacting to core-setup changes for 'DEB' distro agnostic installers. \r\n\r\nExample:\r\nThese installers:\r\ndotnet-runtime-2.1.0-preview1-26103-03-debian.8-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-debian.9-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.14.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.16.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.17.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.17.10-x64.deb\r\nhave been coalesced to: \r\nruntime-2.1.0-preview1-26104-06-x64.deb\r\n\r\nContains: https://github.com/dotnet/cli/pull/8325\r\nUpdate CoreSetup to preview1-26105-01\r\n\r\n\r\n\r\n"},{"Id":"7064042382","Type":"IssuesEvent","CreatedAt":"2018-01-06T01:25:58","Actor":"rohit21agrawal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8340","RelatedDescription":"Opened issue \"dotnet publish doesn't copy references with privateassets=all to publish directory\" (#8340) at dotnet/cli","RelatedBody":"Repro steps:\r\n\r\n1) Create a new netcoreapp or netstandard library and add net46 as framework as well\r\n2) add a package dependency like newtonsoft.json and set privateassets=all\r\n3) run dotnet publish --self-contained for both frameworks\r\n\r\nnewtonsoft.json is copied to publish dir for net46 while it is not copied to publish dir for netstandard/netcoreapp frameworks."},{"Id":"7063674803","Type":"PullRequestEvent","CreatedAt":"2018-01-05T22:45:42","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8339","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26105-02 (master)\" (#8339) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7063475395","Type":"IssuesEvent","CreatedAt":"2018-01-05T21:46:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8334","RelatedDescription":"Closed issue \"Install scripts likely need to be updated to support acquiring the asp.net shared framework.\" (#8334) at dotnet/cli","RelatedBody":"People are going to want to do something similar to this but get ASP.NET + the Core Shared runtime.\r\n\r\n```\r\nwget https://dot.net/v1/dotnet-install.sh\r\nchmod 700 dotnet-install.sh\r\n./dotnet-install.sh --channel 2.0 --install-dir \"$netdir\" --shared-runtime --no-path\r\n```\r\n"},{"Id":"7063423789","Type":"IssuesEvent","CreatedAt":"2018-01-05T21:31:33","Actor":"kunalspathak","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8338","RelatedDescription":"Opened issue \"dotnet build -c throws exception instead of error message\" (#8338) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n` dotnet build -c`\r\n\r\n## Expected  behavior\r\n\r\nSome friendly error message\r\n\r\n## Actual behavior\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7063328416","Type":"IssuesEvent","CreatedAt":"2018-01-05T21:04:41","Actor":"mikeharder","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8337","RelatedDescription":"Opened issue \"Error running CLI on Linux when installed to \"$HOME/dotnet\"\" (#8337) at dotnet/cli","RelatedBody":"## Summary\r\nIt seems the problem only repros when:\r\n \r\n1. dotnet is installed at `$HOME/dotnet`\r\n2. The command is run as `dotnet` which loads the file from `$PATH`\r\n3. The command is run from `$HOME`, not any other directory\r\n\r\n## Steps to reproduce\r\n1. Ubuntu 16.04 LTS\r\n2. Install dotnet-sdk-2.1.3 using apt-get (https://www.microsoft.com/net/learn/get-started/linuxubuntu)\r\n3. `mkdir ~/dotnet`\r\n4. `cd ~/dotnet`\r\n5. `wget https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.0-preview1-007840/dotnet-sdk-2.2.0-preview1-007840-linux-x64.tar.gz`\r\n6. `tar -zxvf dotnet-sdk-2.2.0-preview1-007840-linux-x64.tar.gz`\r\n7. `cd ~`\r\n8. `nano .profile`\r\nA. Add “$HOME/dotnet” to front of path\r\n9. `source .profile`\r\n10. `which dotnet`\r\nA. Verify the path is `/home/username/dotnet/dotnet`\r\n11. `dotnet -?`\r\nA. Expected: Shows help\r\nB. Actual: `Did you mean to run dotnet SDK commands? Please install dotnet SDK from: http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409`\r\n12. `~/dotnet/dotnet -?`\r\nA. Works fine\r\n13. `mkdir foo`\r\n14. `cd foo`\r\n15. `dotnet -?`\r\nA. Works fine\r\n16. `mv ~/dotnet ~/dotnet-foo`\r\n17. `nano .profile`\r\nA. Change `$HOME/dotnet` to `$HOME/dotnet-foo`\r\n18. `source .profile`\r\n19. `which dotnet`\r\nA. Verify the path is `/home/username/dotnet-foo/dotnet`\r\n20. `dotnet -?`\r\nA. Works fine\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7058805790","Type":"PullRequestEvent","CreatedAt":"2018-01-04T21:57:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02404-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7056464684","Type":"IssuesEvent","CreatedAt":"2018-01-04T12:53:29","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Closed issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7054495904","Type":"PullRequestEvent","CreatedAt":"2018-01-04T01:09:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7054119223","Type":"PullRequestEvent","CreatedAt":"2018-01-03T22:46:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7053032329","Type":"IssuesEvent","CreatedAt":"2018-01-03T18:01:03","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/605","RelatedDescription":"Closed issue \"NETStandard 2.0 Project Template not working properly.\" (#605) at dotnet/standard","RelatedBody":"I've an issue when creating project template in VS 2017 15.5.1 version.\r\n\r\nWhen i create a project template and use it to create a project. There is no file existed in there regarding my project templates have many files.\r\n\r\nSteps to re-produce the bug:\r\n- Create a NETStandard2 class library in VS 2017.\r\n- Create multiple files in there.\r\n- Export Template for that projects.\r\n- Copy that template into: C:\\Users\\{Username}\\Documents\\Visual Studio 2017\\Templates\\ProjectTemplates \r\n- Create a project base on that template.\r\n\r\nAnyone have any idea for this one?"},{"Id":"7053021857","Type":"IssuesEvent","CreatedAt":"2018-01-03T17:58:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Closed issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Environment\r\n- Windows 10 (Version 10.0.16299)\r\n- Visual Studio 2017 15.5.2\r\n- .NET Core SDK 2.1.3 (64-bit) installed\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that initialises the `IFoo` private field\r\n\r\n\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n\r\nNote that I have a parameterless contructor for `DummyController`.\r\n\r\n5. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`InvalidOpeartionException` is thrown with the inner exception `MissingMethodException`.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n\r\n## Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n\r\n## Moving the initialisation of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"},{"Id":"7052970315","Type":"PullRequestEvent","CreatedAt":"2018-01-03T17:45:56","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02402-04 (master)\" (#610) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7065910259","Type":"IssuesEvent","CreatedAt":"2018-01-07T02:42:11","Actor":"jamesqo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26207","RelatedDescription":"Opened issue \"Add string.Contains overloads to mirror string.IndexOf\" (#26207) at dotnet/corefx","RelatedBody":"## Proposed API\r\n\r\n```cs\r\nbool Contains(string value, int index);\r\nbool Contains(string value, int startIndex, int count);\r\n\r\nbool Contains(string value, StringComparison comparisonType);\r\nbool Contains(string value, int index, StringComparison comparisonType);\r\nbool Contains(string value, int startIndex, int count, StringComparison comparisonType);\r\n```\r\n\r\n## Rationale\r\n\r\n- It seems inconsistent that `Contains`, a method that compares strings, does not accept a `StringComparison` argument while many other string-comparing methods do.\r\n- Adding the index-based overloads may prevent some string allocations because people can do `str.Contains(other, 3, 10)` instead of `str.Substring(3, 10).Contains(other)`."},{"Id":"7065832983","Type":"IssuesEvent","CreatedAt":"2018-01-07T01:42:10","Actor":"SamuelCox","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26206","RelatedDescription":"Closed issue \"NullReferenceException when awaiting a task only in a unit test\" (#26206) at dotnet/corefx","RelatedBody":"Got a bit of a weird one here.\r\nIf you clone https://github.com/SamuelCox/LifeManager and run the only test in CalendarServiceTests in LifeManager.CalendarService.Tests project, you should see the following stack trace:\r\n\r\n`` at LifeManager.CalendarService.Services.CalendarService.<CreateEvent>d__2.MoveNext() in C:\\projects\\lifemanager\\LifeManager\\LifeManager.CalendarService\\Services\\CalendarService.cs:line 24\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at LifeManager.CalendarService.Tests.CalendarServiceTests.<CreateEvent_ShouldCallRepositoryAdd>d__2.MoveNext() in C:\\projects\\lifemanager\\LifeManager\\LifeManager.CalendarService.Tests\\CalendarServiceTests.cs:line 37\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NUnit.Framework.Internal.AsyncInvocationRegion.AsyncTaskInvocationRegion.WaitForPendingOperationsToComplete(Object invocationResult)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.RunAsyncTestMethod(TestExecutionContext context) ``\r\n\r\nI've debugged this and nothing is null. It's just the await that blows up. I've also re-read over async await and I should be able to do what I'm trying to do here. It's entirely possible I'm doing something completely wrong here, but I'm not sure what it is. Equally, it could be something with NUnit, but I'm starting here.\r\n\r\nThe really odd thing is, that the code I'm unit testing works if I do it outside of a unit test, i.e, in Program.cs in LifeManager.CalendarService. I also tried deleting the test csproj and recreating it. Bit baffled here, any help is appreciated.\r\n  \r\n  "},{"Id":"7065764015","Type":"IssuesEvent","CreatedAt":"2018-01-07T00:32:50","Actor":"SamuelCox","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26206","RelatedDescription":"Opened issue \"NullReferenceException when awaiting a task only in a unit test\" (#26206) at dotnet/corefx","RelatedBody":"Got a bit of a weird one here.\r\nIf you clone https://github.com/SamuelCox/LifeManager and run the only test in CalendarServiceTests in LifeManager.CalendarService.Tests project, you should see the following stack trace:\r\n\r\nat LifeManager.CalendarService.Services.CalendarService.<CreateEvent>d__2.MoveNext() in C:\\projects\\lifemanager\\LifeManager\\LifeManager.CalendarService\\Services\\CalendarService.cs:line 24\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at LifeManager.CalendarService.Tests.CalendarServiceTests.<CreateEvent_ShouldCallRepositoryAdd>d__2.MoveNext() in C:\\projects\\lifemanager\\LifeManager\\LifeManager.CalendarService.Tests\\CalendarServiceTests.cs:line 37\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NUnit.Framework.Internal.AsyncInvocationRegion.AsyncTaskInvocationRegion.WaitForPendingOperationsToComplete(Object invocationResult)\r\n   at NUnit.Framework.Internal.Commands.TestMethodCommand.RunAsyncTestMethod(TestExecutionContext context)\r\n\r\nI've debugged this and nothing is null. It's just the await that blows up. I've also re-read over async await and I should be able to do what I'm trying to do here. It's entirely possible I'm doing something completely wrong here, but I'm not sure what it is."},{"Id":"7065746889","Type":"PullRequestEvent","CreatedAt":"2018-01-07T00:15:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26205","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-26106-02, preview1-26106-02, preview1-26106-05, beta-26106-02, beta-26106-02, respectively (master)\" (#26205) at dotnet/corefx","RelatedBody":""},{"Id":"7065728374","Type":"PullRequestEvent","CreatedAt":"2018-01-06T23:58:42","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25680","RelatedDescription":"Merged pull request \"Making sure errors with the BIO's are picked up\" (#25680) at dotnet/corefx","RelatedBody":"Currently just an investigation of #25676"},{"Id":"7065471260","Type":"IssuesEvent","CreatedAt":"2018-01-06T20:27:20","Actor":"cartermp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/6706","RelatedDescription":"Reopened issue \"Create Silverlight 5 targeting pack\" (#6706) at dotnet/corefx","RelatedBody":"Please publish a targeting pack for building Silverlight 5 projects with CLI.\nEssentially something like this:\nhttps://gist.github.com/onovotny/93ecd8021c0f0cf7b4f4\n\nThere may be limitations for item types that require custom tasks/targets, but this handles the bulk of non-GUI libs useful in an xproj.\n\nThe scenario is porting/maintaining projects that need to cross-compile to existing full frameworks.\n"},{"Id":"7065471226","Type":"IssuesEvent","CreatedAt":"2018-01-06T20:27:19","Actor":"cartermp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/6706","RelatedDescription":"Closed issue \"Create Silverlight 5 targeting pack\" (#6706) at dotnet/corefx","RelatedBody":"Please publish a targeting pack for building Silverlight 5 projects with CLI.\nEssentially something like this:\nhttps://gist.github.com/onovotny/93ecd8021c0f0cf7b4f4\n\nThere may be limitations for item types that require custom tasks/targets, but this handles the bulk of non-GUI libs useful in an xproj.\n\nThe scenario is porting/maintaining projects that need to cross-compile to existing full frameworks.\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7066070212","Type":"PullRequestEvent","CreatedAt":"2018-01-07T05:29:40","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24083","RelatedDescription":"Opened pull request \"Move PEModuleBuilder.AdditionalTypes override to EE\" (#24083) at dotnet/roslyn","RelatedBody":""},{"Id":"7065821541","Type":"IssuesEvent","CreatedAt":"2018-01-07T01:31:04","Actor":"jamesqo","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24082","RelatedDescription":"Opened issue \"Bug in NormalizeWhitespace\" (#24082) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.6.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nStore this string in the variable `text`:\r\n\r\n```cs\r\npublic override void OnSaveInstanceState(Bundle savedInstanceState)\r\n{\r\n    base.OnSaveInstanceState(savedInstanceState);\r\n    // Save UI state changes to the savedInstanceState.\r\n    // This bundle will be passed to onCreate if the process is\r\n    // killed and restarted.\r\n    savedInstanceState.PutBoolean(\"MyBoolean\", true);\r\n    savedInstanceState.PutDouble(\"myDouble\", 1.9);\r\n    savedInstanceState.PutInt(\"MyInt\", 1);\r\n    savedInstanceState.PutString(\"MyString\", \"Welcome back to Android\");\r\n    // etc.\r\n}\r\n\r\n\r\npublic override void OnRestoreInstanceState(Bundle savedInstanceState)\r\n{\r\n    base.OnRestoreInstanceState(savedInstanceState);\r\n    // Restore UI state from the savedInstanceState.\r\n    // This bundle has also been passed to onCreate.\r\n    bool myBoolean = savedInstanceState.GetBoolean(\"MyBoolean\");\r\n    double myDouble = savedInstanceState.GetDouble(\"myDouble\");\r\n    int myInt = savedInstanceState.GetInt(\"MyInt\");\r\n    string myString = savedInstanceState.GetString(\"MyString\");\r\n}\r\n```\r\n\r\nThen:\r\n\r\n```cs\r\n            var tree2 = CSharpSyntaxTree.ParseText(text, new CSharpParseOptions(kind: SourceCodeKind.Script));\r\n            var root2 = tree2.GetRoot();\r\n            root2 = root2.NormalizeWhitespace();\r\n            Console.WriteLine(root2);\r\n```\r\n\r\n**Expected Behavior**: Outputs the same code\r\n\r\n**Actual Behavior**: The line with `// etc.` gets unindented\r\n\r\n```cs\r\npublic override void OnSaveInstanceState(Bundle savedInstanceState)\r\n{\r\n    base.OnSaveInstanceState(savedInstanceState);\r\n    // Save UI state changes to the savedInstanceState.\r\n    // This bundle will be passed to onCreate if the process is\r\n    // killed and restarted.\r\n    savedInstanceState.PutBoolean(\"MyBoolean\", true);\r\n    savedInstanceState.PutDouble(\"myDouble\", 1.9);\r\n    savedInstanceState.PutInt(\"MyInt\", 1);\r\n    savedInstanceState.PutString(\"MyString\", \"Welcome back to Android\");\r\n// etc.\r\n}\r\n\r\npublic override void OnRestoreInstanceState(Bundle savedInstanceState)\r\n{\r\n    base.OnRestoreInstanceState(savedInstanceState);\r\n    // Restore UI state from the savedInstanceState.\r\n    // This bundle has also been passed to onCreate.\r\n    bool myBoolean = savedInstanceState.GetBoolean(\"MyBoolean\");\r\n    double myDouble = savedInstanceState.GetDouble(\"myDouble\");\r\n    int myInt = savedInstanceState.GetInt(\"MyInt\");\r\n    string myString = savedInstanceState.GetString(\"MyString\");\r\n}\r\n```\r\n"},{"Id":"7065744511","Type":"PullRequestEvent","CreatedAt":"2018-01-07T00:13:18","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23228","RelatedDescription":"Merged pull request \"recursive-patterns(3): Implement the decision DAG and subsumption checking.\" (#23228) at dotnet/roslyn","RelatedBody":"Implement the decision tree and subsumption checking.\r\n\r\n- Remove `BoundDagEvaluation.Symbol` from the public API\r\n- `BoundDagTemp` is not permitted a null type (it must record some type)\r\n- Adjust test for new lowering of pattern-is\r\n- Adjust tests per changes in *is pattern* code generation\r\n- Lower `RecursivePattern.VariableAccess`\r\n- Retire or comment out (for now) some retiring code.\r\n- Move `MatchConstantValue` into the class with its only client.\r\n- Use the more efficient equality for double, decimal, etc switches.\r\n- Implement and test support for tuples.\r\n- Implement building the decision DAG and its subsumption errors.\r\n- Remove unused internal APIs\r\n- Eliminate cascaded flow analysis errors caused by errors in case labels (for the previous pattern switch implementation too).\r\n- Address issues from review of https://github.com/dotnet/roslyn/pull/23208\r\n\r\nWe do not yet have lowering or code generation for \"recursive pattern switch\" statements.\r\n\r\nThis is the third of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous. Until the previous PR https://github.com/dotnet/roslyn/pull/23209 is integrated, you will also see the changes from that PR included here. You should review https://github.com/dotnet/roslyn/pull/23208 (DONE) and https://github.com/dotnet/roslyn/pull/23209 first, and only review new deltas in this review.\r\n  "},{"Id":"7065740304","Type":"PullRequestEvent","CreatedAt":"2018-01-07T00:09:11","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23635","RelatedDescription":"Merged pull request \"Simplify codegen for struct declaration patterns\" (#23635) at dotnet/roslyn","RelatedBody":"Use a slightly simpler lowering for pattern-matching with type parameters and value types.\r\n\r\n### Customer scenario\r\n\r\nUse pattern-matching with a value type, e.g. `if (o is int i) ...`. Note that the quality of the code can be improved.\r\n\r\n### Bugs this fixes\r\n\r\nNone. It is an improvement in the quality of the generated code.\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\nTiny. This is a replacement of one code pattern by a slightly better but equivalent one.\r\n\r\n### Performance impact\r\n\r\nSlight performance improvement for compiled applications.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nN/A\r\n\r\n### How was the bug found?\r\n\r\nCustomer noticed the potential for improving the code.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n"},{"Id":"7065731925","Type":"PullRequestEvent","CreatedAt":"2018-01-07T00:01:43","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24074","RelatedDescription":null,"RelatedBody":""},{"Id":"7065731813","Type":"PullRequestEvent","CreatedAt":"2018-01-07T00:01:35","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24074","RelatedDescription":"Closed pull request \"[WIP] The argument that stands for the receiver of a `ref` extension method must be always passed as `ref`\" (#24074) at dotnet/roslyn","RelatedBody":""},{"Id":"7065668493","Type":"PullRequestEvent","CreatedAt":"2018-01-06T23:04:39","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24081","RelatedDescription":"Opened pull request \"Skip pseudo-variables with use-site errors\" (#24081) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nLocals window in the debugger is empty after stepping over method with unrecognized return type.\r\n\r\n### Bugs this fixes\r\n\r\n535899\r\n\r\n### Workarounds, if any\r\n\r\nRun to next statement rather than stepping.\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n"},{"Id":"7065531936","Type":"PullRequestEvent","CreatedAt":"2018-01-06T21:14:24","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24080","RelatedDescription":"Opened pull request \"Extend eligible params types to array generic interfaces\" (#24080) at dotnet/roslyn","RelatedBody":"Proposal: https://github.com/dotnet/csharplang/issues/179"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7066007901","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:25:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5223","RelatedDescription":"Opened pull request \"Fix build and VS warnings\" (#5223) at dotnet/corert","RelatedBody":"Fixes #1194"},{"Id":"7066005185","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:22:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5222","RelatedDescription":"Opened pull request \"Enable Type equality optimizations\" (#5222) at dotnet/corert","RelatedBody":"Contributes to #5180"},{"Id":"7065972797","Type":"IssuesEvent","CreatedAt":"2018-01-07T03:47:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1566","RelatedDescription":"Closed issue \"dotnet-compile --native should work outside x64 Native Tools Command Prompt \" (#1566) at dotnet/corert","RelatedBody":"A port of the dotnet/cli#301 issue.\n"},{"Id":"7065910732","Type":"PullRequestEvent","CreatedAt":"2018-01-07T02:42:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5221","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#5221) at dotnet/corert","RelatedBody":""},{"Id":"7065849651","Type":"PullRequestEvent","CreatedAt":"2018-01-07T01:54:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5221","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#5221) at dotnet/corert","RelatedBody":""},{"Id":"7065586779","Type":"PullRequestEvent","CreatedAt":"2018-01-06T21:58:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5214","RelatedDescription":"Merged pull request \" Fix marshalling code to meet the CIL backwards branch constraint\" (#5214) at dotnet/corert","RelatedBody":"The marshalling code was keeping return value pushed value on IL stack during whole\r\nunmarshalling sequece. It made it easy for backward branches in the unmarshalling\r\ncode to break the CIL backwards branch constraint. The fix is to push the return value\r\nonto IL stack right before returning.\r\n\r\nFixes #5152"},{"Id":"7065586777","Type":"IssuesEvent","CreatedAt":"2018-01-06T21:58:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5152","RelatedDescription":"Closed issue \"Fix marshalling code to meet the CIL backwards branch constraint\" (#5152) at dotnet/corert","RelatedBody":"See #5149 - we can't use the validating IL emitter to generate marshalling code because the generated code fails to satisfy ECMA-335 III.1.7.5 on backwards branch constraints.\r\n"},{"Id":"7065457360","Type":"PullRequestEvent","CreatedAt":"2018-01-06T20:16:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5220","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5220) at dotnet/corert","RelatedBody":""},{"Id":"7065457230","Type":"PullRequestEvent","CreatedAt":"2018-01-06T20:16:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5220","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5220) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7065986791","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:02:28","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1844","RelatedDescription":"Merged pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1844) at dotnet/sdk","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"7064146280","Type":"PullRequestEvent","CreatedAt":"2018-01-06T02:41:21","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1844","RelatedDescription":"Opened pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1844) at dotnet/sdk","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"7063853615","Type":"PullRequestEvent","CreatedAt":"2018-01-05T23:52:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1819","RelatedDescription":"Merged pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1819) at dotnet/sdk","RelatedBody":"cc: @livarcocc @weshaggard @AlexGhiondea\r\n\r\nInserting the new support package to the SDK that will fix the binding redirects for 4.7.1."},{"Id":"7063805566","Type":"PullRequestEvent","CreatedAt":"2018-01-05T23:32:33","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1843","RelatedDescription":"Opened pull request \"Pack for tools\" (#1843) at dotnet/sdk","RelatedBody":"Add PackAsTool in csproj, and run dotnet pack. The result will be in\r\ntool format nupkg"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-01-07T05:30:22.2530274Z","RunDurationInMilliseconds":8562}