{"Data":{"GitHub":{"Issues":[{"Id":"423999176","IsPullRequest":true,"CreatedAt":"2019-03-22T00:35:53","Actor":"codemzs","Number":"3064","RawContent":null,"Title":"Add cancellation checkpoint in ValueToKeyMappingTransfomer.","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3064","RelatedDescription":"Open PR \"Add cancellation checkpoint in ValueToKeyMappingTransfomer.\" (#3064)"},{"Id":"423996817","IsPullRequest":false,"CreatedAt":"2019-03-22T00:23:59","Actor":"singlis","Number":"3063","RawContent":null,"Title":"Predict expects the Label as input","State":"open","Body":"## Issue\r\nWhen calling Predict, our Predict method will take in the same input as what is used for the training pipeline. This is a bit \"odd\" as we force the user to define a \"Label\" variable that does nothing nor is it needed for the output.\r\n\r\nUsing the example from #3037, we have something like this:\r\n```\r\n    let predictor = mlContext.Model.CreatePredictionEngine(transformer)\r\n    let prediction:Prediction = predictor.Predict({Area=0; Price = 209000})\r\n```\r\n\r\nWhere Area is our \"Label\", because this is required by the pipeline, we have to add this in as part of the input. \r\n\r\nCould our pipeline change to only consume the data that is needed to do the prediction? And ideally have something like this:\r\n```\r\nlet prediction:Prediction = predictor.Predict(209000)\r\n```\r\ncc @glebuk  for any additional comments.","Url":"https://github.com/dotnet/machinelearning/issues/3063","RelatedDescription":"Open issue \"Predict expects the Label as input\" (#3063)"},{"Id":"423996084","IsPullRequest":true,"CreatedAt":"2019-03-22T00:20:27","Actor":"codemzs","Number":"3062","RawContent":null,"Title":"Add Cancellation checkpoint in Normalizer transfomer.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3062","RelatedDescription":"Open PR \"Add Cancellation checkpoint in Normalizer transfomer.\" (#3062)"},{"Id":"423993829","IsPullRequest":false,"CreatedAt":"2019-03-22T00:09:55","Actor":"singlis","Number":"3061","RawContent":null,"Title":"Null Reference Exception when Concatenating with a single value","State":"open","Body":"### Issue\r\nDiscovered from #3037, a user can call `Concatenate `and specify a single string. When this happens, a NullReference exception is thrown. Here is the code sample:\r\n```\r\n        EstimatorChain()\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))  // This causes the error, should be (\"Features\", \"Features\")\r\n            .AppendCacheCheckpoint(mlContext)\r\n            .Append(mlContext.Regression.Trainers.Sdca(\"Label\", \"Features\"))\r\n            , mlContext\r\n\r\n```\r\n\r\nHere is the callstack:\r\n\r\n```\r\n>\tMicrosoft.ML.Core.dll!Microsoft.ML.SchemaShape.Column.GetTypeString() Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.CheckInputSchema(Microsoft.ML.SchemaShape inputSchema) Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.Fit(Microsoft.ML.IDataView input) Line 60\tC#\r\n \tConsoleApp32.dll!Program.main(string[] argv) Line 33\tF#\r\n```\r\nThe problem is that a NullReference exception looks like a bug and its not obvious to the user on what is the cause of the problem.\r\n\r\n## Expected\r\nWe should instead notify the user that: \r\n1) A bad argument was passed in\r\n2) That its the Concatenate transform that has the bad argument\r\n\r\n### Solution A\r\nWe simply check the length of the name array that is passed to Concatenate and throw the correct exception.\r\n\r\n### Solution B\r\nAnother possible solution is to change the behavior so that when one column is specified for `Concatenate`, the name is treated as the source and destination -- so this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))\r\n```\r\nwould be the same as this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n```\r\n\r\ncc @glebuk for additional feedback","Url":"https://github.com/dotnet/machinelearning/issues/3061","RelatedDescription":"Open issue \"Null Reference Exception when Concatenating with a single value\" (#3061)"},{"Id":"423990970","IsPullRequest":false,"CreatedAt":"2019-03-21T23:56:42","Actor":"singlis","Number":"3060","RawContent":null,"Title":"Automatic conversion of data in the pipeline","State":"open","Body":"## Issue\r\nWhen providing data to a pipeline there is an expectation that we put on the user to know the data type the trainer is expecting. This is a painful experience for end-users as it requires them to not only know what data types they need to convert to, but also results in them having to add more steps to their pipeline to accommodate.\r\n\r\nThe example from #3037 demonstrates this issue as this pipeline is taking in integer values for the Label and Features and passing this into the SDCA trainer. Because the data is integer based, the pipeline uses `ConvertType ` to convert from int to float, followed by a `Concatenate` to generate a vector type (note this is in F# but still applies to C#)\r\n```\r\n        let mlContext = MLContext()\r\n        EstimatorChain()\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n           .AppendCacheCheckpoint(mlContext)\r\n           .Append(mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Label\", \"Features\"))\r\n           , mlContext\r\n```\r\nWithout conversions, the user will hit an exception saying that the expected type for a Label is of type float followed by the expected type for Features should be a vector of floats. \r\n\r\n## Suggestion\r\nWe should hide these details from the user as this would make the pipeline easier to load and simplify a user's pipeline. Taking the example above, if you were to remove the conversion steps, it would look something like this:\r\n```\r\n   let trainer = mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Area\", \"Price\")\r\n```\r\n\r\ncc @glebuk for any additional input","Url":"https://github.com/dotnet/machinelearning/issues/3060","RelatedDescription":"Open issue \"Automatic conversion of data in the pipeline\" (#3060)"},{"Id":"423988794","IsPullRequest":true,"CreatedAt":"2019-03-21T23:46:45","Actor":"shmoradims","Number":"3059","RawContent":null,"Title":"Updated xml docs for Poisson, OLS, and OGD regression trainers.","State":"open","Body":"Related to #2522 ","Url":"https://github.com/dotnet/machinelearning/pull/3059","RelatedDescription":"Open PR \"Updated xml docs for Poisson, OLS, and OGD regression trainers.\" (#3059)"},{"Id":"423404589","IsPullRequest":true,"CreatedAt":"2019-03-21T23:40:01","Actor":"zeahmed","Number":"3036","RawContent":null,"Title":"Added tests for text featurizer options (Part2).","State":"closed","Body":"This PR finally fixes #2967. Test created in this PR are for the following parameters in options class\r\n* WordNgramExtractor\r\n* CharNgramExtractor\r\n* Numeric Feature Normalizer (L1, L2, etc).\r\n\r\nThe intend here is to test that TextFeaturizer is instantiated for every parameter in the options class. Here, we are not testing the internal components of TextFeaturizer.","Url":"https://github.com/dotnet/machinelearning/pull/3036","RelatedDescription":"Closed or merged PR \"Added tests for text featurizer options (Part2).\" (#3036)"},{"Id":"423973690","IsPullRequest":true,"CreatedAt":"2019-03-21T22:44:04","Actor":"Ivanidzo4ka","Number":"3058","RawContent":null,"Title":"CrossValidationSplit in mlContext.Data","State":"open","Body":"Just a QOL.\r\nfixes https://github.com/dotnet/machinelearning/issues/3049\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3058","RelatedDescription":"Open PR \"CrossValidationSplit in mlContext.Data\" (#3058)"},{"Id":"423956830","IsPullRequest":false,"CreatedAt":"2019-03-21T21:47:32","Actor":"eerhardt","Number":"3057","RawContent":null,"Title":"Add code analyzer support for IDataView Preview method","State":"open","Body":"We should write a code analyzer that checks to see if people are calling the `IDataView.Preview()` extension method, and if so it gives them an error/warning to not do that. It is only for debugging purposes.\r\n\r\n@TomFinley @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/3057","RelatedDescription":"Open issue \"Add code analyzer support for IDataView Preview method\" (#3057)"},{"Id":"423955410","IsPullRequest":true,"CreatedAt":"2019-03-21T21:43:26","Actor":"yaeldekel","Number":"3056","RawContent":null,"Title":"Fix bug in TextLoader","State":"open","Body":"Fixes #2996. (This PR replaces #3011).","Url":"https://github.com/dotnet/machinelearning/pull/3056","RelatedDescription":"Open PR \"Fix bug in TextLoader\" (#3056)"},{"Id":"423953186","IsPullRequest":true,"CreatedAt":"2019-03-21T21:36:58","Actor":"abgoswam","Number":"3055","RawContent":null,"Title":"Rename ImageType to ImageDataViewType","State":"open","Body":"Fixes #3050 \r\n\r\n- Renamed ImageType to ImageDataViewType\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3055","RelatedDescription":"Open PR \"Rename ImageType to ImageDataViewType\" (#3055)"},{"Id":"423949354","IsPullRequest":false,"CreatedAt":"2019-03-21T21:26:18","Actor":"Ivanidzo4ka","Number":"3054","RawContent":null,"Title":"Textloader behavior for non present columns","State":"open","Body":"```\r\nMLContext mlContext = new MLContext();\r\nmlContext.Log += MlContext_Log;\r\nvar loader = mlContext.Data.CreateTextLoader(new Data.TextLoader.Options()\r\n{\r\n    Columns = new[] { new Data.TextLoader.Column(\"A\", Data.DataKind.Int32, 0),\r\n                      new Data.TextLoader.Column(\"B\", Data.DataKind.Single, 1),\r\n                      new Data.TextLoader.Column(\"C\", Data.DataKind.Single, 2),\r\n                      new Data.TextLoader.Column(\"D\", Data.DataKind.Single, 3),\r\n                      new Data.TextLoader.Column(\"E\", Data.DataKind.Single, 4),\r\n                      new Data.TextLoader.Column(\"F\", Data.DataKind.Single, 5),\r\n                      new Data.TextLoader.Column(\"G\", Data.DataKind.Single, 6),}\r\n                      });\r\nvar data =loader.Load(\"sample.txt\");\r\nvar pr = data.Preview();\r\n}\r\n\r\nprivate static void MlContext_Log(object sender, LoggingEventArgs e)\r\n{\r\n    Console.WriteLine(e.Message);\r\n}\r\n```\r\n[sample.txt](https://github.com/dotnet/machinelearning/files/2994016/sample.txt)\r\n\r\nRight now if I inspect any column other than \"A\" I would see array of zeros.\r\nI see no messages in log regarding: column with index 1 not found.\r\nI'm not sure why it's zeros and not NaN (so we can treat them as missing values).\r\nI don't know what behavior should TextLoader have, either fail or send warning messages, but I found it strange what we don't do anything right now.","Url":"https://github.com/dotnet/machinelearning/issues/3054","RelatedDescription":"Open issue \"Textloader behavior for non present columns\" (#3054)"},{"Id":"423927392","IsPullRequest":false,"CreatedAt":"2019-03-21T20:29:28","Actor":"yaeldekel","Number":"3053","RawContent":null,"Title":"Defining a TextLoader with `hasHeader=true` and no data sample results in no slot names","State":"open","Body":"Related to issue #2663. We need to document the fact that if we create a `TextLoader` specifying `hasHeader=true` but without a data sample, then we are actually just letting the loader know that it needs to skip the first line when it eventually loads from a text file. The output schema of that `TextLoader` will not contain slot names, since the schema is created when the loader is created, and not when `Load` is called.","Url":"https://github.com/dotnet/machinelearning/issues/3053","RelatedDescription":"Open issue \"Defining a TextLoader with `hasHeader=true` and no data sample results in no slot names\" (#3053)"},{"Id":"423924370","IsPullRequest":true,"CreatedAt":"2019-03-21T20:21:52","Actor":"abgoswam","Number":"3052","RawContent":null,"Title":"Expose advanced options for the NormalizingEstimator ","State":"open","Body":"Fixes  #3047 \r\n\r\n- Introduces 5 APIs required to expose advanced options for each of the normalizing estimators in ML.NET {MinMax, MeanVariance, LogMeanVariance, Binning, SupervisedBinning}\r\n- The APIs are added into the Experimental nuget, till  we finalize a  proper design for #2884 \r\n- Added tests","Url":"https://github.com/dotnet/machinelearning/pull/3052","RelatedDescription":"Open PR \"Expose advanced options for the NormalizingEstimator \" (#3052)"},{"Id":"423917863","IsPullRequest":false,"CreatedAt":"2019-03-21T20:05:18","Actor":"MaximRouiller","Number":"3051","RawContent":null,"Title":"LoadFromTextFile invalid model throw NullReferenceException","State":"open","Body":"### System information\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to load a model from [this Kaggle](https://www.kaggle.com/harlfoxem/housesalesprediction/kernels). My model definition skipped a column index.\r\n\r\n- **What happened?**\r\n\r\nNullReferenceException\r\n\r\n- **What did you expect?**\r\n\r\nA user-friendly error message. \r\n\r\n### Source code / logs\r\n\r\n```\r\npublic class KingCountyHouseData\r\n{\r\n        [LoadColumn(0)]\r\n        public string Id { get; set; }\r\n\r\n        [LoadColumn(1)]\r\n        public string SaleDate { get; set; }\r\n        public float Price { get; set; } // <== this was missed\r\n\r\n        [LoadColumn(2)]  // <=== this should be +1\r\n        public float Bedrooms { get; set; }\r\n\r\n        [LoadColumn(3)]  // <=== this should be +1\r\n        public float Bathrooms { get; set; }\r\n\r\n        [LoadColumn(4)]  // <=== this should be +1\r\n        public float LivingAreaSquareFoot { get; set; }\r\n\r\n        [LoadColumn(5)]  // <=== this should be +1\r\n        public float Floors { get; set; }\r\n\r\n        [LoadColumn(6)]  // <=== this should be +1\r\n        public bool Waterfront { get; set; }\r\n\r\n        //.... more fields below.\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3051","RelatedDescription":"Open issue \"LoadFromTextFile invalid model throw NullReferenceException\" (#3051)"},{"Id":"423880131","IsPullRequest":false,"CreatedAt":"2019-03-21T18:29:42","Actor":"eerhardt","Number":"3050","RawContent":null,"Title":"Rename ImageType to ImageDataViewType","State":"open","Body":"With #2297 we decided to suffix all the IDataView type classes with `DataViewType` instead of just `Type`. However, we missed `ImageType`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.ImageAnalytics/ImageType.cs#L12\r\n\r\nWe should rename this class as well to match the rest in the hierarchy. This will need to be done before v1.0 since it would be a breaking change to rename it later.","Url":"https://github.com/dotnet/machinelearning/issues/3050","RelatedDescription":"Open issue \"Rename ImageType to ImageDataViewType\" (#3050)"},{"Id":"423870703","IsPullRequest":false,"CreatedAt":"2019-03-21T18:07:11","Actor":"daholste","Number":"3049","RawContent":null,"Title":"Get cross val data splits","State":"open","Body":"Today, the very useful TrainTestSplit API hangs off MLContext. (This, of course, divides an input dataset into train and test portions.)\r\n\r\nIt would also be quite useful if you could expose a similar method -- CrossValSplit, which would split the data into cross val folds.\r\n\r\nUsing the same train/test splits across many training iterations would allow caching / re-use of various parts of the training pipeline across multiple iterations","Url":"https://github.com/dotnet/machinelearning/issues/3049","RelatedDescription":"Open issue \"Get cross val data splits\" (#3049)"},{"Id":"423868546","IsPullRequest":false,"CreatedAt":"2019-03-21T18:01:48","Actor":"CESARDELATORRE","Number":"3048","RawContent":null,"Title":"MLContext class reference-doc should explain the seed parameter better and further introduction about the catalogs, etc.","State":"open","Body":"This is the reference doc for MLContext constructor:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.mlcontext.-ctor?view=ml-dotnet#Microsoft_ML_MLContext__ctor_System_Nullable_System_Int32__System_Int32_ \r\n\r\nCurrently, it just says the following about the 'seed' parameter:\r\n\r\n_\"Random seed. Set to null for a non-deterministic environment.\"_\r\n\r\nThe info provided here is too simple. This should be the place to explain in further details what the MLContext class is for.\r\n\r\nEspecially, the `seed `parameter should be properly explained here. Why do we have such a parameter in the constructor and when to use it (deterministic results, etc.) with further explanations and example cases.\r\n\r\nAlso, explain if the `seed ` parameter is applicable or impacts only when using MLContext for training (creating a model) or if `seed `parameter matters or not if you are just loading a model from a .ZIP file and scoring with it etc.\r\n\r\nFinally, if it is recommended in most cases to have a seed, why don't we put any value as a by default value for the `seed ` parameter? For getting started users, the seed parameter feels really strange..\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3048","RelatedDescription":"Open issue \"MLContext class reference-doc should explain the seed parameter better and further introduction about the catalogs, etc.\" (#3048)"},{"Id":"423857474","IsPullRequest":false,"CreatedAt":"2019-03-21T17:36:55","Actor":"artidoro","Number":"3047","RawContent":null,"Title":"Enable setting NormalizingEstimator options","State":"open","Body":"In PR #2959 we hid the NormalizingEstimator `ColumnOptions`. Currently users cannot set advanced parameters for the estimator.\r\n\r\nThe reason for not doing that was that `NormalizingEstimator` has 5 `ColumnOptions` classes and would have required at least that many overloads. So we opted for **waiting for the full `Options`** object to be made accessible and make sure that **no breaking API change** was going to be required. \r\n\r\nHowever, as per further discussion in #2884 and offline we decided that we would not make `Options` available before v1. We therefore need another solution.\r\n\r\nOne possible approach would be to add five new extensions to MLContext each presenting all the settings in one of the NormalizingEstiamtor `ColumnOptions`. The extensions could indicate in their name the type of normalization to perform.\r\n\r\nNote that this is not a breaking API change.","Url":"https://github.com/dotnet/machinelearning/issues/3047","RelatedDescription":"Open issue \"Enable setting NormalizingEstimator options\" (#3047)"},{"Id":"423856597","IsPullRequest":true,"CreatedAt":"2019-03-21T17:35:01","Actor":"Ivanidzo4ka","Number":"3046","RawContent":null,"Title":"[WIP] Attempt to fix error messages types","State":"open","Body":"fixes https://github.com/dotnet/machinelearning/issues/3045\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/3037\r\n>Error messages are painful - I4, R4 etc. etc. - most people will not know what these are.\r\n\r\nLet's see is it so easy as I think, or I need to change all baseline","Url":"https://github.com/dotnet/machinelearning/pull/3046","RelatedDescription":"Open PR \"[WIP] Attempt to fix error messages types\" (#3046)"},{"Id":"423844703","IsPullRequest":false,"CreatedAt":"2019-03-21T17:09:24","Actor":"eerhardt","Number":"3045","RawContent":null,"Title":"DataViewType ToString should not use old DataKind names","State":"open","Body":"All the DataViewType ToString methods are returning DataKind names instead of \"normal .NET\" type names.\r\n\r\n```\r\nI4\r\nU8\r\nR4\r\netc.\r\n```\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/5b22420d28c0cacc9b265d043555b6d11a017b91/src/Microsoft.ML.DataView/DataViewType.cs#L203-L222\r\n\r\nWe should change these to use typical .NET type names, like we have in the public API.\r\n\r\nNote: there are a bunch of tests that will need to be fixed with this since it baselines these names in baseline files.","Url":"https://github.com/dotnet/machinelearning/issues/3045","RelatedDescription":"Open issue \"DataViewType ToString should not use old DataKind names\" (#3045)"},{"Id":"423764572","IsPullRequest":true,"CreatedAt":"2019-03-21T14:39:36","Actor":"TomFinley","Number":"3044","RawContent":null,"Title":"Remove model saving/loading inconsistencies","State":"open","Body":"Fixes #3025.","Url":"https://github.com/dotnet/machinelearning/pull/3044","RelatedDescription":"Open PR \"Remove model saving/loading inconsistencies\" (#3044)"},{"Id":"423612907","IsPullRequest":false,"CreatedAt":"2019-03-21T08:19:39","Actor":"lwansbrough","Number":"3043","RawContent":null,"Title":"Add support for Isolation Forests","State":"open","Body":"Isolation forests appear to be one of the best options available for anomaly detection. I was disappointed to see that ML.NET doesn't support this algorithm.\r\n\r\nI don't have much experience in this field, but these people do and they seem to agree: http://www.eurecom.fr/en/publication/5334/download/data-publi-5334_2.pdf\r\n\r\nOne important aspect of isolation forests is that they allow for unsupervised online learning. There are endless applications for such an algorithm. I'm hoping to see this available in ML.NET in the future!","Url":"https://github.com/dotnet/machinelearning/issues/3043","RelatedDescription":"Open issue \"Add support for Isolation Forests\" (#3043)"},{"Id":"423584919","IsPullRequest":true,"CreatedAt":"2019-03-21T06:15:53","Actor":"sfilipi","Number":"3042","RawContent":null,"Title":"Hash sample","State":"open","Body":"Towards #1209\r\n\r\nAdding a sample for the Hash extension.\r\nDisabling the compiler check for whether the members of a class are in use.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3042","RelatedDescription":"Open PR \"Hash sample\" (#3042)"},{"Id":"423583970","IsPullRequest":true,"CreatedAt":"2019-03-21T06:10:48","Actor":"sfilipi","Number":"3041","RawContent":null,"Title":"Data catalog done","State":"closed","Body":"Towards #1209 \r\n\r\nAdding a sample for the `Hash` extension. \r\nDisabling the compiler check for whether the members of a class are in use. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3041","RelatedDescription":"Closed or merged PR \"Data catalog done\" (#3041)"},{"Id":"423534776","IsPullRequest":false,"CreatedAt":"2019-03-21T00:58:31","Actor":"glebuk","Number":"3040","RawContent":null,"Title":"Samples needed to show how to examine model weights","State":"open","Body":"Currently it is very difficult to inspect model parameters.  It requires a lot of casting and non-trivial DOM navigation to get to actual weights of the model.\r\nIt would be good to have samples that inspect:\r\n1. Weights of a linear model\r\n2. Splits and nodes of a tree model\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3040","RelatedDescription":"Open issue \"Samples needed to show how to examine model weights\" (#3040)"},{"Id":"423522971","IsPullRequest":true,"CreatedAt":"2019-03-20T23:58:21","Actor":"ganik","Number":"3039","RawContent":null,"Title":"[WIP] Add GetPrecisionRecallCurve API","State":"open","Body":"fixes #2645","Url":"https://github.com/dotnet/machinelearning/pull/3039","RelatedDescription":"Open PR \"[WIP] Add GetPrecisionRecallCurve API\" (#3039)"},{"Id":"423466041","IsPullRequest":false,"CreatedAt":"2019-03-20T20:49:56","Actor":"prathyusha12345","Number":"3038","RawContent":null,"Title":"Getting exception when trying to evaulate in sample -PCA based Anomaly Detection","State":"open","Body":"\r\n### Issue\r\n\r\nI am trying to create a new sample based on PCA based Anomaly Detection i.e CreditRisk Detection. i am using the **German Credit Risk** data as dataset from [here](https://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data)). It contains label values as 1 and 2 with 1-positive and 2-negative.\r\n\r\nI am trying to train the model on train data by dropping label column as PCA based anomaly detection trains on unsupervised data. When I am trying to evaluate I am getting the **error** as below\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/54717972-addfcd80-4b16-11e9-8222-0efccdfe8252.png)\r\n\r\n\r\n### Source code / logs\r\n\r\nthe source code is available at the PR [https://github.com/dotnet/machinelearning-samples/pull/321](url)","Url":"https://github.com/dotnet/machinelearning/issues/3038","RelatedDescription":"Open issue \"Getting exception when trying to evaulate in sample -PCA based Anomaly Detection\" (#3038)"},{"Id":"423432935","IsPullRequest":false,"CreatedAt":"2019-03-20T19:27:10","Actor":"isaacabraham","Number":"3037","RawContent":null,"Title":"Working with in-memory data in F# from scripts is *painful*","State":"open","Body":"Working with latest F#4.5 and net standard I'm having huge problems trying to do even the most basic explorations with the latest ML .NET. Is there any example showing an absolutely basic example for an in-memory dataset using a simple ML algorithm?\r\n\r\nI'm talking something as simple as an example from e.g. [scikit-learn](https://mcalglobal.com/2018/02/22/machine-learning-hello-world-using-python/) e.g. the following hello world is 7 lines of code, and if you leave at the data loading side of things and just focus on the ML side of things - which is exactly what I want to do - it's the following *three lines of code*.\r\n\r\n```\r\nmodel = linear_model.LinearRegression()\r\nmodel.fit(sqfeet, price)\r\nmodel.predict( pd.DataFrame([1750]))\r\n```\r\n\r\nLets try and port this into F#. Here's the source data as a simple F# list.\r\n\r\n```fsharp\r\ntype Observation = { Area:int; Price:int }\r\nlet data =\r\n    [ { Area = 1100; Price = 119000 }\r\n      { Area = 1200; Price = 126000 }\r\n      { Area = 1300; Price = 133000 }\r\n      { Area = 1400; Price = 150000 }\r\n      { Area = 1500; Price = 161000 }\r\n      { Area = 1600; Price = 163000 }\r\n      { Area = 1700; Price = 169000 }\r\n      { Area = 1800; Price = 182000 }\r\n      { Area = 1900; Price = 201000 }\r\n      { Area = 2000; Price = 209000 } ]\r\n```\r\n\r\nI've spent a good few hours fighting with the API to try and get some - any - results. **I can't figure it out**.\r\n\r\nIssues I've encountered:\r\n\r\n1. Discoverability. The API is pretty large and not (in my personal opinion) easy to navigate your way around. The namespaces need to be reworked so that the most obvious types are easy and obvious to get to.\r\n1. F# scripts are a pain because of the \"occasional\" reliance on native DLLs. However, you can work around this (or fall back to console applications if needed).\r\n1. Error messages are painful - `I4`, `R4` etc. etc. - most people will not know what these are.\r\n1. Vector types - it seems that in order to \"use\" data with a trainer you need to \"convert\" data from e.g. `float32` into a \"vector\" of `float32`. There's no explanation of what a \"vector\" in the context of ML .NET is, nor how to create one. Is it a .NET type? How do I create it? More than that, why as a developer should I have to care about it? I just want to give some of my data to the library as quickly and easily as possible.\r\n1. Why do I need to convert from ints or floats into float32s to do some machine learning? Again, this raises the barrier to entry. This is an internal implementation detail of ML .NET, it's nothing that should be forced on the developer.\r\n1. Why do I need the `MLContext`? What does it do? Does it store some \"hidden state\"? What? Why?\r\n\r\nI managed to overcome some issues by randomly fumbling around with some existing samples until I got something that seemed to not error any more:\r\n\r\n```fsharp\r\nlet estimator, mlContext =\r\n    let mlContext = MLContext(Nullable 1)\r\n\r\n    let trainer = mlContext.Regression.Trainers.StochasticDualCoordinateAscent(DefaultColumnNames.Label, \"Features\")\r\n\r\n    EstimatorChain()\r\n        .Append(mlContext.Transforms.Conversion.ConvertType(Transforms.TypeConvertingEstimator.ColumnOptions(\"ConvertedArea\", DataKind.Single, \"Area\")))\r\n        .Append(mlContext.Transforms.CopyColumns(DefaultColumnNames.Label, \"ConvertedArea\"))\r\n        .Append(mlContext.Transforms.Conversion.ConvertType(Transforms.TypeConvertingEstimator.ColumnOptions(\"ConvertedPrice\", DataKind.Single, \"Price\")))\r\n        .Append(mlContext.Transforms.Concatenate(\"Features\", \"ConvertedPrice\"))\r\n        .AppendCacheCheckpoint(mlContext)\r\n        .Append(trainer), mlContext\r\n```\r\n\r\nNext. I try to fit my data to this model:\r\n\r\n```fsharp\r\nlet dv = mlContext.Data.LoadFromEnumerable(data)\r\nlet trained = estimator.Fit(dv)\r\n```\r\n\r\nThis returns, but then calls to `CreatePredictionEngine` fail with the error `System.ArgumentOutOfRangeException: Could not find input column 'Area'`:\r\n\r\n```fsharp\r\ntype PredictionInput = { Price : int }\r\n[<CLIMutable>]\r\ntype PredictionOutput = { Area : int }\r\n\r\nlet z = trained.CreatePredictionEngine<PredictionInput, PredictionOutput>(mlContext)\r\n\r\nz.Predict { Price = 1000 }\r\n```\r\n\r\nTo get to this stage has taken 4-8 hours of effort (including spending 30-45 minutes with your team personally :-)). I don't consider myself a complete beginner when it comes to .NET / F# / machine learning - if it takes this long to get up and running, most people will simply not bother and go to scikit-learn, breeze or whatever else it out there.\r\n\r\nI would love to see a *simple* API that looked something like this:\r\n\r\n```fsharp\r\nlet model = Trainers.Regression.StochasticDualCoordinateAscend.fit(data, \"Area\", \"Price\")\r\nlet prediction = model.Predict(1234)\r\n```\r\n\r\nor\r\n\r\n```fsharp\r\nlet model = Trainers.Regression.StochasticDualCoordinateAscend.fit(data, fun d -> d.Area, fun d -> d.Price)\r\nlet prediction = model.Predict(1234)\r\n```\r\n\r\netc. etc.\r\n\r\nI get that there are more complicated scenarios - but I feel that this library should really be starting from the lowest common denominator and working from there. At the moment it seems to be the other way around.","Url":"https://github.com/dotnet/machinelearning/issues/3037","RelatedDescription":"Open issue \"Working with in-memory data in F# from scripts is *painful*\" (#3037)"},{"Id":"423355075","IsPullRequest":true,"CreatedAt":"2019-03-20T19:07:15","Actor":"shmoradims","Number":"3035","RawContent":null,"Title":"Binary FastTree/Forest samples using T4 templates.","State":"closed","Body":"Related to #2522. The *.cs files are auto-generated. Please review the .tt and .ttinclude files.","Url":"https://github.com/dotnet/machinelearning/pull/3035","RelatedDescription":"Closed or merged PR \"Binary FastTree/Forest samples using T4 templates.\" (#3035)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-22T05:30:34.3063356Z","RunDurationInMilliseconds":605}