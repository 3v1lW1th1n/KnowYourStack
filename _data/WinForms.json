{"Data":{"GitHub":{"Issues":[{"Id":"568741043","IsPullRequest":true,"CreatedAt":"2020-02-21T05:15:03","Actor":"gpetrou","Number":"2896","RawContent":null,"Title":"Remove unused MSAA_MENU_SIG and MSAAMENUINFO","State":"open","Body":"## Proposed changes\r\n\r\n- Remove unused MSAA_MENU_SIG and MSAAMENUINFO.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2896)","Url":"https://github.com/dotnet/winforms/pull/2896","RelatedDescription":"Open PR \"Remove unused MSAA_MENU_SIG and MSAAMENUINFO\" (#2896)"},{"Id":"567000599","IsPullRequest":true,"CreatedAt":"2020-02-21T01:55:39","Actor":"vladimir-krestov","Number":"2875","RawContent":null,"Title":"Adding PropertyGridViewAccessibleObject unit tests","State":"closed","Body":"Fixes #1832\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for PropertyGridViewAccessibleObject\r\n- Move PropertyGrid tests to PropertyGridAccessibleObjectTests class\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- SDK Version: 5.0.100-alpha1-016143\r\n- Microsoft Windows [Version 10.0.18363.592]\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2875)","Url":"https://github.com/dotnet/winforms/pull/2875","RelatedDescription":"Closed or merged PR \"Adding PropertyGridViewAccessibleObject unit tests\" (#2875)"},{"Id":"568262093","IsPullRequest":true,"CreatedAt":"2020-02-21T01:42:10","Actor":"hughbe","Number":"2888","RawContent":null,"Title":"Add MdiClient tests","State":"closed","Body":"## Proposed Changes\r\n- Add MdiClient tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2888)","Url":"https://github.com/dotnet/winforms/pull/2888","RelatedDescription":"Closed or merged PR \"Add MdiClient tests\" (#2888)"},{"Id":"568472426","IsPullRequest":true,"CreatedAt":"2020-02-21T00:11:33","Actor":"gpetrou","Number":"2894","RawContent":null,"Title":"Add NFR enum to Interop User32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add NFR enum to Interop User32.\r\n- Remove NFR constants and replace their usages with the above enum values.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2894)","Url":"https://github.com/dotnet/winforms/pull/2894","RelatedDescription":"Closed or merged PR \"Add NFR enum to Interop User32\" (#2894)"},{"Id":"568535586","IsPullRequest":true,"CreatedAt":"2020-02-20T23:41:33","Actor":"Tanya-Solyanik","Number":"2895","RawContent":null,"Title":"removed DesignerCategory attribute from Form class","State":"closed","Body":"As @weltkante pointed out, DesignerCategory attribute is inheritable and if we have this attribute on Form class, we are enforsing this category on all user forms/controls and blocking designer. Thank you!\r\nI'm removing this attribute in this change. \r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2895)","Url":"https://github.com/dotnet/winforms/pull/2895","RelatedDescription":"Closed or merged PR \"removed DesignerCategory attribute from Form class\" (#2895)"},{"Id":"568085242","IsPullRequest":true,"CreatedAt":"2020-02-20T19:25:54","Actor":"Tanya-Solyanik","Number":"2887","RawContent":null,"Title":"show file in code view ","State":"closed","Body":"UserControl.cs has no content to show in the designer, thus setting the default editor to Code view.\r\nFormatControl and MaskedTextBox.TextEdtorDropDown, would load in the designer eventually, thus not changing the files, only removing association with designer in the project.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2887)","Url":"https://github.com/dotnet/winforms/pull/2887","RelatedDescription":"Closed or merged PR \"show file in code view \" (#2887)"},{"Id":"568468583","IsPullRequest":true,"CreatedAt":"2020-02-20T17:48:22","Actor":"gpetrou","Number":"2893","RawContent":null,"Title":"Add DTS enum to Interop ComCtl32","State":"open","Body":"## Proposed changes\r\n\r\n- Add DTS enum to Interop ComCtl32.\r\n- Remove DTS constants and replace their usages with the above enum values.\r\n- Remove unused DI_NORMAL constant.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2893)","Url":"https://github.com/dotnet/winforms/pull/2893","RelatedDescription":"Open PR \"Add DTS enum to Interop ComCtl32\" (#2893)"},{"Id":"568450638","IsPullRequest":true,"CreatedAt":"2020-02-20T17:14:52","Actor":"hughbe","Number":"2892","RawContent":null,"Title":"Cleanup attribute declarations","State":"open","Body":"## Proposed Changes\r\n- Cleanup attribute declarations\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2892)","Url":"https://github.com/dotnet/winforms/pull/2892","RelatedDescription":"Open PR \"Cleanup attribute declarations\" (#2892)"},{"Id":"568284131","IsPullRequest":true,"CreatedAt":"2020-02-20T13:21:46","Actor":"dotnet-maestro[bot]","Number":"2890","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200219.14\r\n- **Date Produced**: 2/20/2020 4:52 AM\r\n- **Commit**: 4660949bde1083e8b1efba3096dd145d590a0b17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20119.14\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20119.14\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20119.14\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20119.14\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20119.14\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2890)","Url":"https://github.com/dotnet/winforms/pull/2890","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2890)"},{"Id":"568289193","IsPullRequest":false,"CreatedAt":"2020-02-20T13:10:48","Actor":"ygc369","Number":"2891","RawContent":null,"Title":"[Proposal] Add a new kind of dialog box ---- InputDialog","State":"open","Body":"InputDialog can be used to get user's input text. VB already has this kind of dialog box. I hope that C# winform can have a more powerful one. (Although C# can use VB's InputBox, but it is ugly.)","Url":"https://github.com/dotnet/winforms/issues/2891","RelatedDescription":"Open issue \"[Proposal] Add a new kind of dialog box ---- InputDialog\" (#2891)"},{"Id":"568264381","IsPullRequest":true,"CreatedAt":"2020-02-20T12:25:27","Actor":"hughbe","Number":"2889","RawContent":null,"Title":"Add WebBrowser tests","State":"open","Body":"## Proposed Changes\r\n- Add WebBrowser tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2889)","Url":"https://github.com/dotnet/winforms/pull/2889","RelatedDescription":"Open PR \"Add WebBrowser tests\" (#2889)"},{"Id":"566631748","IsPullRequest":true,"CreatedAt":"2020-02-20T00:27:51","Actor":"Tanya-Solyanik","Number":"2869","RawContent":null,"Title":"Read Name property instead of name field when serializing ColumnHeader.Name ","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2867 \r\n\r\n\r\n## Proposed changes\r\n\r\nThe `name` field is not set in this code, however it is read in ShouldSerializeName. Thus ShouldSerialize always returns `false` and ColumnHeader names are never serialized into `InitializeComponent` method. Thus `Name` property is always null at run time. However this property is used as a key  when accessing column display order. See issue for details. \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nlistView1.Columns.IndexOfKey(\"columnHeader1\") - always return `-1`\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-Winforms Core designer will be generating different code compared to the Framework designer.  \r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nUnit test\r\n \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2869)","Url":"https://github.com/dotnet/winforms/pull/2869","RelatedDescription":"Closed or merged PR \"Read Name property instead of name field when serializing ColumnHeader.Name \" (#2869)"},{"Id":"566143432","IsPullRequest":false,"CreatedAt":"2020-02-20T00:27:51","Actor":"vsfeedback","Number":"2867","RawContent":null,"Title":"`ListView.IndexOfKey()` returns incorrect value","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/887266/problema-com-listview.html)._\n\n---\nBom dia á todos, o que ocorre é o seguinte, quando inserimos um controle **ListView em um Form VB**, acontece que eu declaro em **Design as colunas deste ListView e sempre coloco na propriedade (Name) das colunas** um nome realtivo á esta coluna, até aí tudo bem em _Design_!\n\nMas o problema suge no momento em **Execução**, sendo que em execução todas as propriedades (Name) das colunas se torna uma **string vazia**, então o que acontece acredito seja um problema no VB, pois em **Design o mesmo mantém os campos das colunas da ListView (Name)** só que em execução perdemos estes campos!\n\nEntão fiz o teste de adicionar na programação todos os campos das colunas (Name) e os mesmos colocando na programação se mantém em todo o processo da execução, então vejo que o problema é manter o mesmo que foi feito em Design também em execução!\n\nEspero que tenham compreendido a minha explicação e que isso realmente seja um porblema que possa ser corrigido em uma atualização futura!\n\nGrato,\nRenato\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/17/2020, 07:42 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Zheng Li [MSFT] on 1/19/2020, 10:15 AM: \n\n<p>Dear customer, thanks for your feedback.</p>\n<p>I can’t repoduce the issue accordind to ypur description, Please see the reproduce  gif, and figure out if there have wrong steps. And could you please provide more info for us to investigate the issue in the future, such as your reproduce Video, or reproduce gif.</p>\n<p>In addtion, have you have the same experience in before, such VS 16.2, VS 2017. And if the issue also can reproduce on C# Windows Form Application.</p>\n<p>Repro Gif:</p><p><img src=\"https://developercommunity.visualstudio.com/storage/temp/114635-feedback.gif\">Thanks</p><p>\nZheng</p>\n\n#### Renato Maia on 1/23/2020, 00:52 AM: \n\nSee that the program is running without change and with its column names declared in the control, but as soon as it is executed, it no longer has this information! So I put the name of the columns in code and it doesn&#39;t lose in execution!\n#### Renato Maia on 1/21/2020, 07:16 PM: \n\nGood morning my friend, thanks for the feedback you gave and the work you had in making a GIF of the procedure, well what I can say you did correctly what is happening, but the problem is generated when the application is running , because when running these Listview columns (Name) are completely reset (string.empty), that is, you don&#39;t have any more information about them running, so you must insert them again in code, so the system keeps these columns (Name) in Listview! So I can use the columns .IndexOfKey, because I believe that you remember more (name) than Interger to return it!<br><br>* I using Google Translate for creat this text!\n#### Zheng Li [MSFT] on 1/22/2020, 11:00 AM: \n\n<p>Dear customer, thankk for your response.</p>\n<p>For the issue, could you please provide more details for use? such as your repro reproduce steps/Gif/Video etc.</p>\n<p>There have some confused that about the “The issue generated when application is runing”,what’s meaning? it’s that calling the columns(Name) in running? how to implement it?</p>\n<p>Will be appreciate if you also can provide your project for us to investigate the issuein future?</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Zheng Li [MSFT] on 2/5/2020, 04:25 PM: \n\n<p>Thanks for your response, Ciould you please provide reproduce steps &amp; project for us tp investigate the issue in tthe future.</p>\n<p>Thanks<br>\nZheng</p>\n\n#### Visual Studio Feedback System on 2/12/2020, 08:17 PM: \n\nWe will close this report in 14 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.\n#### Renato Maia on 2/13/2020, 00:53 AM: \n\nHi friend, i send details of problem to user Zheng Li, no have more details with me! I send the video of project and see the problem!\n#### Zheng Li [MSFT] on 2/17/2020, 02:29 PM: \n\n<p>Dear customer, thanks for your help and details info.</p>\n<p>For the issue, we found the root cause is that Docs say that ColumnHeaderCollection.IndexOfKey uses <a target='_blank' href=\"http://ColumnHeader.Name\">ColumnHeader.Name</a> property as the key. However designer does not generate ‘<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> =”columnHeader1”; line in InitializeComponent in designer.cs. As a result, runtime does not have this value and uses an empty string as a key in the columns collection.</p>\n<p>And we provide the workaround for now, please refer it, and we are investigate it for now, will give you a response once have ny process.</p>\n<p><strong>Workaround</strong><br>\nSo when I do this:<br>\npublic Form1()<br>\n{<br>\nInitializeComponent();<br>\n<a target='_blank' href=\"http://columnHeader1.Name\">columnHeader1.Name</a> = “columnHeader1”;<br>\n<a target='_blank' href=\"http://columnHeader2.Name\">columnHeader2.Name</a> = “columnHeader2”;<br>\n}</p>\n<pre><code>    private void button1_Click(object sender, EventArgs e)\n    {\n        Text = &quot;IndexofKey &quot; + listView1.Columns.IndexOfKey(&quot;columnHeader1&quot;);\n    }\n</code></pre>\n<p>This code works as expected and returns 0.</p>\n<p>Thanks<br>\nZheng</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/2867","RelatedDescription":"Closed issue \"`ListView.IndexOfKey()` returns incorrect value\" (#2867)"},{"Id":"567784198","IsPullRequest":false,"CreatedAt":"2020-02-19T19:14:35","Actor":"filipnavara","Number":"2886","RawContent":null,"Title":"Runtime crash due to localization and the way designer serializes keyboard shortcuts","State":"open","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nSteps to reproduce:\r\n- Create a blank .NET Framework WinForms application with a Form.\r\n- Set the Form to `Localizable = true` in the designer.\r\n- Add context menu with single item.\r\n- Set the `ShortcutKeys` on the item to `Control+C`.\r\n- Observe that the application works just fine on .NET Framework 4.8.\r\n- Switch locale at startup to German by `System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(\"de-DE\");`\r\n- Observe that the application still starts just fine on .NET Framework 4.8.\r\n- Change the application to target `netcoreapp31` and it immediately crashes on startup.\r\n\r\nThe reason for the crash is that the .resx file contains the shortcut key serialized as\r\n```\r\n  <data name=\"booToolStripMenuItem.ShortcutKeys\" type=\"System.Windows.Forms.Keys, System.Windows.Forms\">\r\n    <value>Ctrl+C</value>\r\n  </data>\r\n```\r\n\r\nNotice that the serialized value starts with `Ctrl`, not `Control`. It is produced and consumed by `KeysConverter` class that is [locale dependent](https://github.com/dotnet/winforms/blob/df89eb965dd59fd15341972e3a6ce33e51a86317/src/System.Windows.Forms/src/System/Windows/Forms/KeysConverter.cs#L44-L66). While the value `Control` would work in any locale due to the fallback to names in the `Keys` enum the value `Ctrl` is taken from a dictionary that contains localized names. On .NET Core 3.1 in the German localization the name for `Control` key is `Strg`. Thus the value `Ctrl+C` in the resource file is invalid and causes conversion error at runtime.\r\n\r\nNotably we migrated a large project from .NET Framework to .NET Core where we hit this issue. The .NET Framework also has similar issue in code but the localizations may differ which would explain why the problem is not hit.\r\n\r\nManually fixing the value in the .resx file to `Control+C` makes the application work in any locale but any further editing in the designer breaks it again.\r\n\r\n**Expected behavior:**\r\n\r\nNo crash. The resources generated by the designer should be locale independent.\r\n\r\n**Minimal repro:**\r\n\r\nHere's the sample app created using the steps above. It is multi-targeting both .NET Framework and .NET Core so it can run in both variation from inside Visual Studio.\r\n\r\n[WindowsFormsApp2.zip](https://github.com/dotnet/winforms/files/4226867/WindowsFormsApp2.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/2886","RelatedDescription":"Open issue \"Runtime crash due to localization and the way designer serializes keyboard shortcuts\" (#2886)"},{"Id":"567554245","IsPullRequest":true,"CreatedAt":"2020-02-19T13:16:48","Actor":"dotnet-maestro[bot]","Number":"2885","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200218.1\r\n- **Date Produced**: 2/18/2020 2:20 PM\r\n- **Commit**: b40d0c89c230189b4c6aeb32c0a43218b4bc3359\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20118.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20118.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20118.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20118.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20118.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2885)","Url":"https://github.com/dotnet/winforms/pull/2885","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2885)"},{"Id":"567526912","IsPullRequest":false,"CreatedAt":"2020-02-19T12:11:56","Actor":"M-Lipin","Number":"2884","RawContent":null,"Title":"Update documentation and guides related to WinForms Accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**.NET Core Version:**\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nYes\r\n\r\n**Problem description:**\r\nWinForms documentation and guides do not fully describe the steps and options about setting accessibility properties:\r\n* https://github.com/dotnet/docs/blob/live/docs/framework/winforms/controls/providing-accessibility-information-for-controls-on-a-windows-form.md\r\n* https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.accessiblename?view=netframework-4.8\r\n* https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.accessibledefaultactiondescription?view=netframework-4.8\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nDocumentation and guides should be descriptive to allow app developers to implement accessible applications using WinForms controls.\r\n\r\n**Minimal repro:**\r\nCreate WinForms app, add several WinForms controls to the form, try to get information how to set up accessibility properties to make the application fully accessible.\r\nThere is no default information except the `AccessibleName` has default value 'null'.","Url":"https://github.com/dotnet/winforms/issues/2884","RelatedDescription":"Open issue \"Update documentation and guides related to WinForms Accessibility\" (#2884)"},{"Id":"567370280","IsPullRequest":true,"CreatedAt":"2020-02-19T08:01:46","Actor":"gpetrou","Number":"2883","RawContent":null,"Title":"Add NIF and NIIF enums to Interop Shell32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add NIF and NIIF enums to Interop Shell32.\r\n- Remove NIF and NIIF constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2883)","Url":"https://github.com/dotnet/winforms/pull/2883","RelatedDescription":"Closed or merged PR \"Add NIF and NIIF enums to Interop Shell32\" (#2883)"},{"Id":"567359529","IsPullRequest":true,"CreatedAt":"2020-02-19T07:29:15","Actor":"gpetrou","Number":"2882","RawContent":null,"Title":"Remove unused FADF constants","State":"closed","Body":"## Proposed changes\r\n\r\n- Remove unused FADF constants.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2882)","Url":"https://github.com/dotnet/winforms/pull/2882","RelatedDescription":"Closed or merged PR \"Remove unused FADF constants\" (#2882)"},{"Id":"567353289","IsPullRequest":true,"CreatedAt":"2020-02-19T07:07:26","Actor":"RussKie","Number":"2880","RawContent":null,"Title":"Run tests in x86 and x64","State":"closed","Body":"Resolves #2879\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2880)","Url":"https://github.com/dotnet/winforms/pull/2880","RelatedDescription":"Closed or merged PR \"Run tests in x86 and x64\" (#2880)"},{"Id":"567321279","IsPullRequest":false,"CreatedAt":"2020-02-19T07:07:26","Actor":"RussKie","Number":"2879","RawContent":null,"Title":"Run CI tests in x86 and x64","State":"closed","Body":"Right now all our tests are run in \"Any CPU\" mode. However we have a number of interop API that are platform specific, and we are unable to test those.\r\n\r\nCI tests must run under x86 and x64. When time comes they will also must be run under arm64 as well.","Url":"https://github.com/dotnet/winforms/issues/2879","RelatedDescription":"Closed issue \"Run CI tests in x86 and x64\" (#2879)"},{"Id":"567358637","IsPullRequest":true,"CreatedAt":"2020-02-19T07:02:52","Actor":"gpetrou","Number":"2881","RawContent":null,"Title":"Add CreateICW to Interop Gdi32","State":"open","Body":"## Proposed changes\r\n\r\n- Add CreateICW to Interop Gdi32.\r\n- Remove CreateIC from UnsafeNativeMethods and replace its usages.\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2881)","Url":"https://github.com/dotnet/winforms/pull/2881","RelatedDescription":"Open PR \"Add CreateICW to Interop Gdi32\" (#2881)"},{"Id":"567116986","IsPullRequest":true,"CreatedAt":"2020-02-19T05:06:20","Actor":"gpetrou","Number":"2876","RawContent":null,"Title":"Add GDTR enum to Interop ComCtl32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add GDTR enum to Interop ComCtl32.\r\n- Remove GDTR constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2876)","Url":"https://github.com/dotnet/winforms/pull/2876","RelatedDescription":"Closed or merged PR \"Add GDTR enum to Interop ComCtl32\" (#2876)"},{"Id":"567288777","IsPullRequest":true,"CreatedAt":"2020-02-19T04:18:21","Actor":"RussKie","Number":"2878","RawContent":null,"Title":"Update branding","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2878)","Url":"https://github.com/dotnet/winforms/pull/2878","RelatedDescription":"Closed or merged PR \"Update branding\" (#2878)"},{"Id":"567281412","IsPullRequest":false,"CreatedAt":"2020-02-19T02:53:10","Actor":"Thea-Zhao","Number":"2877","RawContent":null,"Title":"Combobox list nodes do not show expanded when Inspect focus on the dropdown list value","State":"open","Body":"* .NET Core Version: .NET Core SDK 5.0.100-preview.1.20116.7 + the VSIX Inserted into Dev16 16.6.0 [29816.22.master]\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes \r\n\r\n**Problem description:**\r\n\r\nCombobox list nodes do not show expanded when Inspect focus on the dropdown list value\r\n\r\n**More Info:**\r\n1. This is not a regression issue, it's can reproduce in the .NET Framework project and Core 3.1 project.\r\n2. This issue can reproduce when the property values is ComboBox control in the PropertyGrid.\r\n3. This issue cannot reproduce by ComboBox control or the control type is ComboBox control in the DGV cell.\r\n\r\n**Minimal repro:**\r\n\r\n1. Run attached app.\r\n2. Open the inspect tool.\r\n3. Click the dropdown list after the property RightToLeftLayout, and select one node.\r\n4. Observer the inspect.\r\n[SeparateIssue.zip](https://github.com/dotnet/winforms/files/4222873/SeparateIssue.zip)\r\n\r\n**Actual behavior:**\r\nInspect list node is not expanded.\r\n![Actual](https://user-images.githubusercontent.com/53589182/74797011-0071be80-527f-11ea-8314-a588ce2338f7.png)\r\n\r\n**Expected behavior:**\r\nInspect list node is expanded.\r\n![Expected](https://user-images.githubusercontent.com/53589182/74796909-c0124080-527e-11ea-8d83-5547594c0558.png)","Url":"https://github.com/dotnet/winforms/issues/2877","RelatedDescription":"Open issue \"Combobox list nodes do not show expanded when Inspect focus on the dropdown list value\" (#2877)"},{"Id":"566819527","IsPullRequest":false,"CreatedAt":"2020-02-19T02:45:50","Actor":"Marie-Shi","Number":"2872","RawContent":null,"Title":"An error dialog pops up after right click selected text","State":"closed","Body":"* .NET Core Version: \r\n.Net Core 3.1.200-preview-014986 from 3.1 Release branch + VISX inserted in the Dev16 16.6.0[29817.27.master]\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n1.\tThis issue can also reproduce with Framework project and WPF project.\r\n2.\tThis is a regression issue, it can reproduce from Dev16 16.0[29816.11.master] to latest master branch build, it cannot reproduce on release branch.\r\n\r\n**Steps to reproduce:**\r\n1.\tCreate a Winforms Core application.\r\n2.\tSelected \"InitializeComponent\" in Form1.cs, and right click it.\r\n\r\n**Actual behavior:**\r\nAn error dialog pops up after right click selected text. After clicking \"OK\" button, VS crash.\r\n![VS_crash_rightclick_selected_text](https://user-images.githubusercontent.com/45864017/74730547-4760b380-5281-11ea-9a28-75330cdf8d88.png)\r\n\r\n**Expected behavior:**\r\nThere is no error dialog pops up after right click selected text. The behavior should be like below:\r\n![VS_expected_rightclick_selected_text](https://user-images.githubusercontent.com/45864017/74731052-42503400-5282-11ea-90f0-d5cdf0836ddd.png)","Url":"https://github.com/dotnet/winforms/issues/2872","RelatedDescription":"Closed issue \"An error dialog pops up after right click selected text\" (#2872)"},{"Id":"566886750","IsPullRequest":true,"CreatedAt":"2020-02-18T13:17:46","Actor":"hughbe","Number":"2874","RawContent":null,"Title":"Cleanup ToolStripItem","State":"open","Body":"## Proposed Changes\r\n- Cleanup ToolStripItem\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2874)","Url":"https://github.com/dotnet/winforms/pull/2874","RelatedDescription":"Open PR \"Cleanup ToolStripItem\" (#2874)"},{"Id":"566877811","IsPullRequest":true,"CreatedAt":"2020-02-18T13:16:42","Actor":"dotnet-maestro[bot]","Number":"2873","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200217.3\r\n- **Date Produced**: 2/17/2020 7:54 PM\r\n- **Commit**: bd2a2b09716ddb54cb1e40f087beaaeeef859118\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20117.3\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20117.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2873)","Url":"https://github.com/dotnet/winforms/pull/2873","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2873)"},{"Id":"566805857","IsPullRequest":true,"CreatedAt":"2020-02-18T10:47:15","Actor":"vladimir-krestov","Number":"2871","RawContent":null,"Title":"Adding unit tests for DataGridViewAccessibleObject","State":"open","Body":"Fixes #1833\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests\r\n- Fix IsReadOnly property for DataGridViewAccessibleObject and DataGridViewRowAccessibleObject\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- SDK Version: 5.0.100-alpha1-016143\r\n- Microsoft Windows [Version 10.0.18363.592]\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2871)","Url":"https://github.com/dotnet/winforms/pull/2871","RelatedDescription":"Open PR \"Adding unit tests for DataGridViewAccessibleObject\" (#2871)"},{"Id":"566771850","IsPullRequest":false,"CreatedAt":"2020-02-18T09:51:37","Actor":"M-Lipin","Number":"2870","RawContent":null,"Title":"AccessibleName default values for WinForms Controls","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**.NET Core Version:**\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\n**Runtime Environment:**\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nAt this moment there is a number of issues with Accessible name:\r\n-  missing `AccessibleName` for some controls (for instance `ComboBox` or `TextBox`, which have null `AccessibleName` by default)\r\n\r\n- term duplication in the default `AccessibleName` and accessible control type (UI Automation control type) localized name for other controls (like announcement _\"Spinner spinner\"_ for `NumericUpDown` control which has _\"Spinner\"_ accessible name and _\"spinner\"_ en-us control type localized name)\r\n\r\n- indistinguishability of controls to visually impaired users when announced by Narrator if there are multiple controls of same type on the form (for instance two `PropertyGrid` controls have same _\"PropertyGrid\"_ accessible name)\r\n\r\n**Considerations**\r\nThe question comes with the #2818 and #2820. The issues does not fit into a requirement or an improvement. This is because the app developer is not blocked by the lack of accessible name. The standard way to associate an accessible name with a control is as follows:\r\n- is to place a label (a control with `Text` property) in front of this control in the tab order. Then `AccessibleObject.Name` will read it;\r\n- the next option for app developer is to actually set `myControl1.AccessibleName = \"descriptive name\"'.\r\nAs suggested in #2820, 'AccessibleName' is a synonym of 'ControlType'. 'ControlType = Slider'; 'AccessibleName = TrackBar'. This is not helpful, as the name should not contain 'ControlType'.  We are providing names for controls that are not exposed to the developer, 'TrackBar' does not fit this case. \r\n\r\nOn the opposite side, app developer may forget to set 'AccessibleName' or place a Label in front of a control. Anyway, an app developer can set some accessible name as an empty string if it is necessary for him. The explanation can be found in #2382.\r\n\r\nBut there are several issues with default accessible names that are synonymous to control types.\r\n1. It does not produce accessible applications by default. Consider the following UI:\r\n![image](https://user-images.githubusercontent.com/23213980/74722923-c5559800-524a-11ea-9cde-1dc568b24326.png)\r\nLooking at the image above, do you know what value to enter into this control? What will it be used for?\r\nIt seems that an AT user will not know what to do with control of type 'Spinner' that is named '\"Numeric\"' because this name does not explain what value the number in the control represents.\r\nSuch a name does not solve the problem that Accessible Name property is designed to solve, it does not explain business logic behind this control. This solution will not improve applications of accessibility of WinForms controls.\r\n\r\n2. An application developer has a smaller chance to fix the above mentioned accessibility issue in this application because we suppressed Accessibility Insights (AI) error report.\r\nThe suggestion here is that this is an application developer responsibility to provide meaningful 'AccessibleName' and responsibility of AI tool to teach the developer how to write accessible applications. Role of the WinForms developer is to provide public API that allows app developer to set a meaningful accessible name. We provide hard-coded accessible names only for UI elements that don't expose public APIs to the app developers.\r\nApplication developers should to make applications accessible. We are not enforcing keyboard shortcuts or taborder either, because these depend on the business logic.\r\n\r\nTaking into account above considerations, we have two points here:\r\n- **AccesibleName** is for application specific naming which will provide the information about the business purpose of the control.\r\n- **AccessibleDescription** is also is application specific description and is not related to the control implementation.\r\n- **AccessibleControlType** is for providing WinForms control type.\r\n\r\nLike in the following example: 'Age NumericUpDown' where\r\n- 'Age' is an 'AccessibleName' which should be provided by application developer and is not WinForms developer responsibility (it seems that by default an empty accessible name should be provided for both 'Numeric' and 'Domain' 'UpDown' controls)\r\n- 'NumericUpDown' is the localized control type that is the WinForms developer responsibility as they provide the set of control types and thereby should provide localized accessible control types for each available control.\r\n\r\nSo it seems that we need to start the work here to ensure that WinForms controls API does not provide accessible names as these should be application-related business-specific accessible names and should not copy the control type name or its part to accessible name (keep it blank). And on the other hand WinForms developers need to provide meaningful localized control types for all controls.  \r\n\r\nAnd the result of this work should be like follows (application developers will implement accessible names in their application):\r\n|Before the fix | Control types and default empty accessible names | Controls in the custom application |\r\n|-|-|-|\r\n| \"\" TextBox (altready OK) | \"\" TextBox | \"First name\" TextBox (example) |\r\n| \"\" CombBox (altready OK) | \"\" CombBox | \"Occupation\" ComboBox (example) |\r\n| \"Numeric\" Spinner (issue) | \"\" Numeric UpDown | \"Age\" Numeric UpDown (example) |\r\n| \"Domain\" Spinner (issue) | \"\" Domain UpDown | \"Rating\" Domain UpDown (example) |\r\n| \"Property Grid\" pane (issue) | \"\" Property Grid | \"Skills\" Property Grid (example) |\r\n\r\n**Proposed changes and expected behavior:**\r\n- Need to show error by AI if application developer does not provide business specific accessible name. So we need to make Accessible names empty for the controls exposed to developers.\r\n- Accessible names of the controls which are not public should not be empty.\r\n\r\n**Minimal repro:**\r\n- Create the app with WinForms controls and ensure that by default Accessible names are empty and localized control types show the control type specific names.\r\n- Accessible names can be set via control API (AccessibleName property) or by adding the label before the control.\r\n- Control child elements should not have default accessible names or accessible names which contain control type names.","Url":"https://github.com/dotnet/winforms/issues/2870","RelatedDescription":"Open issue \"AccessibleName default values for WinForms Controls\" (#2870)"},{"Id":"566284279","IsPullRequest":true,"CreatedAt":"2020-02-17T13:16:45","Actor":"dotnet-maestro[bot]","Number":"2868","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200216.1\r\n- **Date Produced**: 2/16/2020 2:07 PM\r\n- **Commit**: 2086e534f12e6116889ee480646ef54c1f781887\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20116.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20116.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2868)","Url":"https://github.com/dotnet/winforms/pull/2868","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2868)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-21T05:30:55.8432847Z","RunDurationInMilliseconds":756}