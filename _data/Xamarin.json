{"Data":{"Blog":{"FeedItems":[{"Title":"Implement Drawer and Split UI with the Xamarin.Forms MasterDetailPage","PublishedOn":"2018-04-26T18:00:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Drawer navigation and master-detail UI are two powerful patterns that guide users through content in applications with significant amounts of data or many pages. Xamarin.Forms provides the...","Href":"https://blog.xamarin.com/implement-drawer-split-ui-xamarin-forms-masterdetailpage/","RawContent":null},{"Title":"Using TensorFlow and Azure to Add Image Classification to Your Android Apps","PublishedOn":"2018-04-23T18:51:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"TensorFlow is a well established, open source machine learning and deep learning framework that can be used to create and run a wide range of different models, usually using powerful machines in the...","Href":"https://blog.xamarin.com/android-apps-tensorflow/","RawContent":null},{"Title":"Community Books on Xamarin Development","PublishedOn":"2018-04-20T15:01:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin development is constantly growing and evolving to meet the needs of developers. To help you find the right resources for your development education, we&#8217;ve curated a list of community...","Href":"https://blog.xamarin.com/community-books-xamarin-development/","RawContent":null},{"Title":"Automatic Provisioning with Visual Studio 2017","PublishedOn":"2018-04-18T17:22:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS device provisioning is largely regarded by all iOS developers, Xamarin or otherwise, as being one of the biggest barriers to getting started with iOS. To test and deploy your app on a device, you...","Href":"https://blog.xamarin.com/automatic-provisioning-visual-studio-2017/","RawContent":null},{"Title":"A Brief History of .NET Standard","PublishedOn":"2018-04-16T16:21:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin (and before that, Mono) allowed .NET code to run on multiple platforms for years. These days, there&#8217;s a new push in cross-platform with .NET Core and .NET Standard. This post looks at...","Href":"https://blog.xamarin.com/history-dot-net-standard/","RawContent":null},{"Title":"Using the iOS 11 Drag and Drop APIs in Xamarin.iOS Apps","PublishedOn":"2018-04-13T17:07:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS 11 introduced drag and drop, a feature that allows users to easily move or copy data within or between apps. With drag and drop, users can: Select items to drag Add extra items to a drag after it...","Href":"https://blog.xamarin.com/drag-and-drop-apis-for-xamarin-apps/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7599520430","Type":"PullRequestEvent","CreatedAt":"2018-04-27T20:22:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1611","RelatedDescription":"Opened pull request \"[mono-sdks] Pass the Host{Cc,Cxx}{32,64} parameters (Take 2!)\" (#1611) at xamarin/xamarin-android","RelatedBody":"Will hopefully allow LLVM to be configured on Linux..."},{"Id":"7599421530","Type":"PullRequestEvent","CreatedAt":"2018-04-27T19:58:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1610","RelatedDescription":"Opened pull request \"[tests] Report errors last in `RunApkTests` (Take 2!)\" (#1610) at xamarin/xamarin-android","RelatedBody":"Context: https://jenkins.mono-project.com/job/xamarin-android-pr-builder/2963/testReport/\r\n\r\nA build for PR #1489 ran 1110 tests; it *should* have run over 35,000.\r\nWhere are the missing tests?\r\n\r\nWhat's missing are the `.apk` on-device tests; BCL tests make up\r\n*most* of our expected test count.\r\n\r\nAnalysis of the build log shows that the on-device tests *are*\r\nrunning, with test results being downloaded:\r\n\r\n\t…/android-toolchain/sdk/platform-tools/adb -s emulator-5570  pull \"/data/data/Xamarin.Android.Bcl_Tests/files/.__override__/TestResults.xUnit.xml\" \"…/xamarin-android/tests/../bin/TestDebug/TestResult-Xamarin.Android.Bcl_Tests.xunit.xml\"\r\n\t...\r\n\t/data/data/Xamarin.Android.Bcl_Tests/files/.__override__/TestResults.xUnit.xml: 1 file pulled. 53.5 MB/s (3273412 bytes in 0.058s)\r\n\r\nbut those results don't appear on the `testReport` URL.\r\n\r\nThe problem is that the `RenameApkTestCases` target is never being\r\nexecuted, and the `RenameApkTestCases` is responsible for copying the\r\n`TestResult*` files where Jenkins looks for them:\r\n\r\n\tDone building target \"ReleaseAndroidTarget\" in project \"RunApkTests.targets\" -- FAILED.:\r\n\r\nThe `RenameApkTestCases` target executes *after*\r\n`ReleaseAndroidTarget`, but because `ReleaseAndroidTarget` failed, the\r\n`RenameApkTestCases` target isn't executed.\r\n\r\nMeanwhile, `ReleaseAndroidTarget` reports an error to ensure that\r\nerrors aren't overlooked; see commit 3b893cd4.\r\n\r\nAllow the `RenameApkTestCases` target to execute by adding a new\r\n`ReportComponentFailures` target. The `ReleaseAndroidTarget` will no\r\nlonger report errors, allowing the `RenameApkTestCases` target to\r\nexecute, while if any tests *do* fail, the `ReportComponentFailures`\r\ntarget will generate an appropriate error.\r\n\r\nFurthermore, update all the `<MSBuild/>` invocations within\r\n`RunTests.targets` and add `ContinueOnError=\"ErrorAndContinue\"` to all\r\nof them, to help ensure that we run all the tests we have, even if\r\nprevious tests fail."},{"Id":"7599315813","Type":"PullRequestEvent","CreatedAt":"2018-04-27T19:34:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1609","RelatedDescription":"Opened pull request \"Bump to mono/2018-02/a0228295\" (#1609) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/issues/7685\r\nContext: https://github.com/mono/mono/issues/8403\r\nContext: https://github.com/mono/mono/issues/8409"},{"Id":"7599277075","Type":"PullRequestEvent","CreatedAt":"2018-04-27T19:25:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1465","RelatedDescription":"Merged pull request \"New code-behind/layout binding generator\" (#1465) at xamarin/xamarin-android","RelatedBody":" Implement code-behind to access layout elements without FindViewById\r\n\r\nThis patch implements code-behind generation which allows one to find and access\r\nlayout elements (widgets) without having to call the `FindViewById` or\r\n`FindFragment` APIs, instead merely accessing a C# property which will do all\r\nthe work of finding and returning the right widget.\r\n\r\nAs opposed to the old implementation, two approaches are available.\r\n\r\nFirst approach\r\n==============\r\n\r\nGenerates \"binding\" code, that is a stand-alone class with\r\nproperties to access the widgets. All the generated classes are placed in the\r\n`Binding` namespace and their names follow the base name of the layout being\r\nbound. Therefore, a class for layout named `Main.axml` will be named\r\n`Binding.Main` and a class for layout `my_other_layout.xml` will be named\r\n`Binding.my_other_layout`. The main advantage of this approach is that no\r\nmodifications layout files are necessary.\r\n\r\nThe class can be instantiated in a number of ways:\r\n\r\n  * By passing instance of an activity *after* setting the activity layout in\r\n    the usual way:\r\n\r\n        var items = new Binding.Main (this)\r\n\r\n  * By passing instance of a *View* to the constructor after loading the correct\r\n    layout into the view:\r\n\r\n        var items = new Binding.my_other_layout (some_view);\r\n\r\n  * By changing the Activity layout setting code to call a new overload of the\r\n    SetContentView method:\r\n\r\n        var items = SetContentView<Binding.Main> ();\r\n\r\nAfter the binding is instantiated, one can find the widgets by simply accessing\r\nthe correct property:\r\n\r\n        Button btn = items.MyButton;\r\n\r\nGiven the following layout:\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n       <Button android:id=\"@+id/myButton\" />\r\n       <fragment  xamarin:managedType=\"CommonSampleLibrary.LogFragment\"\r\n           android:name=\"commonsamplelibrary.LogFragment\"\r\n           android:id=\"@+id/log_fragment\" />\r\n       <fragment android:name=\"CommonSampleLibrary.LogFragment\"\r\n           android:id=\"@+id/secondary_log_fragment\" />\r\n    </LinearLayout>\r\n\r\nSimilar code will be generated (some elements are removed for brevity -\r\nwhitespace, line pragmas, comments and using statements):\r\n\r\n    namespace Binding\r\n    {\r\n      sealed class Main : global::Xamarin.Android.Design.LayoutBinding\r\n      {\r\n        public override int ResourceLayoutID => global::Xamarin.Android.Tests.CodeBehindBuildTests.Resource.Layout.Main;\r\n\r\n        public Main (global::Xamarin.Android.Design.ILayoutBindingClient client) : base (client) {}\r\n\r\n        Button __myButton;\r\n        public Button myButton => FindView (global::Xamarin.Android.Tests.CodeBehindBuildTests.Resource.Id.myButton, ref __myButton);\r\n\r\n        CommonSampleLibrary.LogFragment __log_fragment;\r\n        public CommonSampleLibrary.LogFragment log_fragment => FindFragment (global::Xamarin.Android.Tests.CodeBehindBuildTests.Resource.Id.log_fragment, ref __log_fragment);\r\n\r\n        global::Android.App.Fragment __secondary_log_fragment;\r\n        public global::Android.App.Fragment secondary_log_fragment => FindFragment (global::Xamarin.Android.Tests.CodeBehindBuildTests.Resource.Id.secondary_log_fragment, ref __secondary_log_fragment);\r\n\r\n        CommonSampleLibrary.LogFragment __tertiary_log_fragment;\r\n        public CommonSampleLibrary.LogFragment tertiary_log_fragment => FindFragment (global::Xamarin.Android.Tests.CodeBehindBuildTests.Resource.Id.tertiary_log_fragment, ref __tertiary_log_fragment);\r\n      }\r\n    }\r\n\r\n`Xamarin.Android.Design.LayoutBinding` is a new class added to make it possible\r\nto instantiate the binding for both an Activity and a View.\r\n\r\nSecond approach\r\n===============\r\n\r\nBuilds on the first one and requires slightly more changes\r\nto the code. It is similar to the old approach in that it generates a partial\r\nactivity class which defines a number of properties, right in the Activity, to\r\naccess the layout widgets. In order for this to work, it is first necessary to\r\nmodify the associated layout by adding two attributes to the root element of the\r\nlayout:\r\n\r\n  * XML namespace declaration:\r\n\r\n       xmlns:xamarin=\"http://schemas.xamarin.com/android/xamarin/tools\"\r\n\r\n  * Specification of *full* type names for activities which will use the\r\n    generated code (a semicolon-separated list, at least one type is required):\r\n\r\n       xamarin:classes=\"Xamarin.Android.Tests.CodeBehindBuildTests.MainActivity;Xamarin.Android.Tests.CodeBehindBuildTests.AnotherMainActivity\"\r\n\r\nAfter the above is done, all the activities mentioned in the `xamarin:classes`\r\nattribute have to be modified by adding the `partial` modifier to the Activity\r\nclass declaration. No other changes are necessary as the code-behind overrides\r\nall the `SetContentView` methods to instantiate the correct `Binding` class and\r\nuse it to seamlessly access the layout widgets. Widgets are accessed via\r\nstandard properties, e.g.:\r\n\r\n    Button btn = MyButton;\r\n\r\nGiven the same layout as in `First approach`, with the two XML attributes added:\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n                  xmlns:xamarin=\"http://schemas.xamarin.com/android/xamarin/tools\"\r\n\t\t  xamarin:classes=\"Xamarin.Android.Tests.CodeBehindBuildTests.MainActivity\">\r\n       <Button android:id=\"@+id/myButton\" />\r\n       <fragment  xamarin:managedType=\"CommonSampleLibrary.LogFragment\"\r\n           android:name=\"commonsamplelibrary.LogFragment\"\r\n           android:id=\"@+id/log_fragment\" />\r\n       <fragment android:name=\"CommonSampleLibrary.LogFragment\"\r\n           android:id=\"@+id/secondary_log_fragment\" />\r\n    </LinearLayout>\r\n\r\nWe get the following code generated (the `Binding.Main` class remains exactly\r\nthe same and can still be used independently):\r\n\r\n    namespace Xamarin.Android.Tests.CodeBehindBuildTests\r\n    {\r\n      partial class MainActivity\r\n      {\r\n        Binding.Main __layout_binding;\r\n\r\n        public override void SetContentView (global::Android.Views.View view) {\r\n          __layout_binding = new global::Binding.Main (view);\r\n          bool callBase = true;\r\n          OnSetContentView (view, ref callBase);\r\n          if (callBase)\r\n            base.SetContentView (view);\r\n        }\r\n\r\n        public override void SetContentView (global::Android.Views.View view, global::Android.Views.ViewGroup.LayoutParams @params) {\r\n          // Code similar to above\r\n        }\r\n\r\n        public override void SetContentView (int layoutResID) {\r\n          // Code similar to above\r\n        }\r\n\r\n        partial void OnSetContentView (global::Android.Views.View view, ref bool callBaseAfterReturn);\r\n        partial void OnSetContentView (global::Android.Views.View view, global::Android.Views.ViewGroup.LayoutParams @params, ref bool callBaseAfterReturn);\r\n        partial void OnSetContentView (int layoutResID, ref bool callBaseAfterReturn);\r\n\r\n        public Button myButton => __layout_binding?.myButton;\r\n        public CommonSampleLibrary.LogFragment log_fragment => __layout_binding?.log_fragment;\r\n        public global::Android.App.Fragment secondary_log_fragment => __layout_binding?.secondary_log_fragment;\r\n        public CommonSampleLibrary.LogFragment tertiary_log_fragment => __layout_binding?.tertiary_log_fragment;\r\n      }\r\n    }\r\n\r\nThe `OnSetContentView` partial methods may be implemented in your code to\r\ncustomize `SetContentView` behavior since it's no longer possible to override\r\nthem in your \"main\" activity code."},{"Id":"7599060481","Type":"IssuesEvent","CreatedAt":"2018-04-27T18:37:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1606","RelatedDescription":"Closed issue \"Don't verify types if you store to a pointer byref\" (#1606) at xamarin/xamarin-android","RelatedBody":"This is integration tracking issue for https://github.com/mono/mono/issues/8403\n\n> VS bug [#607666](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/607666)"},{"Id":"7599040370","Type":"PullRequestEvent","CreatedAt":"2018-04-27T18:33:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1602","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] _UpdateAndroidResgen always runs.\" (#1602) at xamarin/xamarin-android","RelatedBody":"Commit a50e00bb broke the build in such that `_UpdateAndroidResgen`\r\nalways runs. This is because the resource file last modified date\r\nwas always newer than the `R.cs.flag`.\r\n\r\nAs a result of reading the fix to set the last write, this then broke `_GenerateAndroidResourceDir`. \r\nThis is because the `build.props` ended up being newer than the resource files in `@(_AndroidResourceDest)` causing the target to run when it shouldn't. So we also introduce an `_AndroidResFlagFile` to control when we need to generate the resource directory in the `$(IntermediateOutputPath)`.\r\n\r\nUnit tests have been updated to make sure these target do not run when they are no supposed to."},{"Id":"7598976762","Type":"PullRequestEvent","CreatedAt":"2018-04-27T18:19:55","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1604","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] coded warnings for <BuildApk /> task\" (#1604) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\n`<BuildApk />` is in need of two warning codes to be fully fleshed out:\r\n- `XA4301` is now fully documented and tested\r\n- `XA0107` is *new* and now fully documented. `<ResolveAssemblies />`\r\nalso needed to use this warning code. I was not able to write a test\r\nthat produces this warning, since it does not happen under normal\r\ncircumstances\r\n\r\nOther changes:\r\n- The `BuildWithNativeLibraries` test was using `StringAssertEx.ContainsText`\r\nthis calls `Assert.Pass` internally (which throws) so the subsequent\r\nassertions were not being checked.\r\n- Added missing overloads for `LogCodedError` and `LogCodedWarning` in\r\n`AsyncTask`."},{"Id":"7598258798","Type":"PullRequestEvent","CreatedAt":"2018-04-27T15:48:36","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1605","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Stop `_LinkAssembliesNoShrink` running all the time.\" (#1605) at xamarin/xamarin-android","RelatedBody":"This has been a long standing issue that we never caught...\r\nThe `Output` on the `_LinkAssembliesNoShrink` target was\r\nincorrect. It was using `$(MonoAndroidIntermediateDir)`\r\nrather than `$(MonoAndroidIntermediateAssemblyDir)`.\r\n\r\nAs a result it was always looking for the output files in the\r\nproject root directory.. They never existed so the target\r\nALWAYS ran!."},{"Id":"7598136341","Type":"IssuesEvent","CreatedAt":"2018-04-27T15:27:01","Actor":"justintoth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1608","RelatedDescription":"Opened issue \"Unable to open file for read: No such file or directory (APT0000) Intermittent Build Error\" (#1608) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nOur Xamarin Android app only builds and deploys successfully probably 25% of the time, and when updating the contents of an axml file then building it pretty much never succeeds. I then have to go through a process of cleaning, rebuilding, uninstalling the app from the device, closing and reopening Visual Studio for Mac, etc... This has always been the case with Xamarin dating back to Xamarin Studio because it's so much more buggy than the real Visual Studio IDE, however it's gotten much worse in the latest release. It's painful to have to go through these steps 30x per day just to test out changes.\r\n\r\n1. Open our Xamarin Android solution (can provide through secure method.)\r\n2. Try combination of building / rebuilding / cleaning / deploying app to a device, especially after changing the contents of an axml file (e.g. add a new element so that ResourceDesigner is updated.)\r\n3. Notice that when building it sometimes gives a APT0000 build error that is associated with a tmp file, which is some sort of Xamarin file, not a real file in my solution.\r\n\r\n### Expected Behavior\r\n\r\nThe app builds successfully EVERY TIME, not 25% of the time like it currently does.\r\n\r\n### Actual Behavior\r\n\r\n> /Users/justintoth/Documents/rpr-mobile/android-application/obj/Debug-Dev/lp/36/jl/res/values-az/values.xml.tmp: Error APT0000: Unable to open file for read: No such file or directory (APT0000) (com.rpr.mobile.droid)\r\n> /Users/justintoth/Documents/rpr-mobile/android-application/obj/Debug-Dev/lp/36/jl/res/values-az/values.xml.tmp.bk: Error APT0000: Unable to open file for read: No such file or directory (APT0000) (com.rpr.mobile.droid)\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.4.3 (build 10)\r\nInstallation UUID: 62cf1ad2-0db0-41e1-ac78-aeb509d79f60\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3 (14154)\r\nBuild 9E145\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.1.29 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Community)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Community)\r\nAndroid SDK: /android/sdk\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704030010\r\nGit revision: 5af3e98549653fcc5335896ccc296343d08f31bb\r\nBuild date: 2018-04-12 12:32:07-04\r\nXamarin addins: fadb82fb0fe2668cb7789f8b524aec6fb8568ee7\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n### Log File\r\n\r\nhttps://gist.github.com/justintoth/d797e9432a7b47c71bf5c5fd90c99cdb"},{"Id":"7597958961","Type":"IssuesEvent","CreatedAt":"2018-04-27T14:56:04","Actor":"justintoth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1607","RelatedDescription":"Opened issue \"Found conflicts between different versions of the same dependent assembly\" (#1607) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open our Xamarin Android solution (which I can provide to someone on the Xamarin team through some secure method.)\r\n2. Build the solution.\r\n3. Notice how there are build warnings about different version conflicts, which started in the latest Xamarin release.\r\n\r\n### Expected Behavior\r\n\r\nThere are no warnings related to different version conflicts when building the project, as we're using the latest versions of each package.\r\n\r\n### Actual Behavior\r\n\r\nBuilding gives the following warnings:\r\n\r\n> /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(5,5): Warning MSB3277: Found conflicts between different versions of \"Microsoft.CSharp\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. (MSB3277) (com.rpr.mobile.droid)\r\n> /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(5,5): Warning MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the \"runtime\" node in the application configuration file: <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Runtime\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.1.0.0\" newVersion=\"4.1.0.0\" /></dependentAssembly></assemblyBinding><assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Threading.Tasks\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding> (MSB3247) (com.rpr.mobile.droid)\r\n> /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(3,3): Warning MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the \"runtime\" node in the application configuration file: <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Runtime\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding><assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Threading.Tasks\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding> (MSB3247) (com.rpr.mobile.droid)\r\n> /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(5,5): Warning MSB3277: Found conflicts between different versions of \"Microsoft.CSharp\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. (MSB3277) (com.rpr.mobile.droid)\r\n> /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(5,5): Warning MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the \"runtime\" node in the application configuration file: <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Runtime\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.1.0.0\" newVersion=\"4.1.0.0\" /></dependentAssembly></assemblyBinding><assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Threading.Tasks\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding> (MSB3247) (com.rpr.mobile.droid)\r\n> /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(3,3): Warning MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the \"runtime\" node in the application configuration file: <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Runtime\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding><assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"><dependentAssembly><assemblyIdentity name=\"System.Threading.Tasks\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" /><bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" /></dependentAssembly></assemblyBinding> (MSB3247) (com.rpr.mobile.droid)\r\n> \r\n\r\n### Version Information\r\n\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.4.3 (build 10)\r\nInstallation UUID: 62cf1ad2-0db0-41e1-ac78-aeb509d79f60\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.1\r\n\t1.0.4\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3 (14154)\r\nBuild 9E145\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.1.29 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Community)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Community)\r\nAndroid SDK: /android/sdk\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704030010\r\nGit revision: 5af3e98549653fcc5335896ccc296343d08f31bb\r\nBuild date: 2018-04-12 12:32:07-04\r\nXamarin addins: fadb82fb0fe2668cb7789f8b524aec6fb8568ee7\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1"},{"Id":"7597883789","Type":"IssuesEvent","CreatedAt":"2018-04-27T14:43:29","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1606","RelatedDescription":"Opened issue \"Don't verify types if you store to a pointer byref\" (#1606) at xamarin/xamarin-android","RelatedBody":"This is integration tracking issue for https://github.com/mono/mono/issues/8403"},{"Id":"7596267200","Type":"PullRequestEvent","CreatedAt":"2018-04-27T09:08:07","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1605","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Stop `_LinkAssembliesNoShrink` running all the time.\" (#1605) at xamarin/xamarin-android","RelatedBody":"This has been a long standing issue that we never caught...\r\nThe `Output` on the `_LinkAssembliesNoShrink` target was\r\nincorrect. It was using `$(MonoAndroidIntermediateDir)`\r\nrather than `$(MonoAndroidIntermediateAssemblyDir)`.\r\n\r\nAs a result it was always looking for the output files in the\r\nproject root directory.. They never existed so the target\r\nALWAYS ran!."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7600206034","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:53:30","Actor":"markjulmar","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2563","RelatedDescription":"Opened issue \"FlexLayout has trouble when rendering in a ContentView on Android\" (#2563) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n`FlexLayout` doesn't layout elements the same when placed into a `ContentView` that is added to a `ContentPage` on Android. It works properly on iOS and UWP.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download [sample project](https://github.com/XamarinUniversity/build2018-labs/tree/master/lab2/start)\r\n2. Run the app in Android, provide a name, color and click \"Enter Circle\".\r\n3. Notice that the entry field is about 200px _above_ the bottom of the screen - it should be at the bottom.\r\n4. Select a message, this navigates to a new screen that hosts the _same_ `ContentView` but in a `Grid` host with other content above it - notice that now the entry is at the bottom.\r\n\r\n### Basic Information\r\n\r\n- Xamarin.Forms 3.0.0.427558-pre4\r\n- IDE: VS2017 15.6 and 15.7\r\n\r\n### Screenshots\r\n**Android (bad)**\r\n![Android (bad)](https://user-images.githubusercontent.com/5099741/39389207-df255e4a-4a4b-11e8-973d-9facfd0cbdbb.png)\r\n\r\n**UWP (good)**\r\n![uwp](https://user-images.githubusercontent.com/5099741/39389195-cf68a0ca-4a4b-11e8-94ba-0f1a5d2ac4c5.png)\r\n\r\n**iOS (good)**\r\n![iOS](https://user-images.githubusercontent.com/5099741/39389198-d2d34dc8-4a4b-11e8-9e65-331b500f2e52.jpg)\r\n\r\n### Reproduction Link\r\nHere's a sample project: https://github.com/XamarinUniversity/build2018-labs/tree/master/lab2/start\r\n"},{"Id":"7599827685","Type":"IssuesEvent","CreatedAt":"2018-04-27T21:36:56","Actor":"brianlagunas","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2562","RelatedDescription":"Opened issue \"Resetting MainPage causes blank screen to render\" (#2562) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen you set the Application.MainPage to an instance of a TabbedPage that has a ContentPage on it's Modal nav stack, a blank screen is shown and the ContentPage is no longer on the TabbedPage's modal nav stack after the MainPage property is set.  The hardware back button will then close the app.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the repro app in an emulator\r\n2. Click the Rest button on ViewA\r\n3. Review the code comments to step through and observe the values\r\n4. Observe the blank screen in the emulator\r\n\r\nOffending code\r\n```\r\n        private void _button_Clicked(object sender, EventArgs e)\r\n        {\r\n            //build up navigation stack\r\n            var tabbedPage = new TabbedPage();\r\n            tabbedPage.Navigation.PushModalAsync(new ViewB());\r\n\r\n            //shoud have 1, this is correct\r\n            var numberOfPages = tabbedPage.Navigation.ModalStack.Count;\r\n\r\n            //reset main page - ViewB should be showing, but it's a blank screen\r\n            App.Current.MainPage = tabbedPage;\r\n\r\n            //should have 1 page on modal stack as before, but now there is 0\r\n            numberOfPages = tabbedPage.Navigation.ModalStack.Count;\r\n        }\r\n```\r\n\r\n### Expected Behavior\r\n\r\nViewB should be correctly added to the TabbedPage's modal nav stack and rendered on the emulator. When the hardware back button is click, the TabbedPage should now be shown and ViewB should be popped off the stack.\r\n\r\n### Actual Behavior\r\n\r\nA blank screen is show\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version: NA\r\n- IDE: VS 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  \r\n  - Android: \r\n  - UWP:\r\n- Nuget Packages: Xamarin.Forms and it's dependencies\r\n\r\n### Screenshots\r\n**App launch**\r\n![image](https://user-images.githubusercontent.com/835562/39386087-29778322-4a30-11e8-9762-aade32ac59d9.png)\r\n\r\n**Button Click**\r\n![image](https://user-images.githubusercontent.com/835562/39386109-41836904-4a30-11e8-81ae-50649b866d5d.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/brianlagunas/MainPageToTabbedPageIssue\r\n"},{"Id":"7599310113","Type":"PullRequestEvent","CreatedAt":"2018-04-27T19:33:10","Actor":"kzu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2561","RelatedDescription":"Opened pull request \"Do not assume XAML namespace prefix in use\" (#2561) at xamarin/Xamarin.Forms","RelatedBody":"If the users chooses to change the XAML namespace prefix from x to something else (which is totally valid still in XML and XAML (WPF/UWP) land), XF will fail to parse the XAML attributes correctly.\r\n\r\nThis should not be the case since the XML infoset is the same in either case.\r\n\r\nFixes #2560"},{"Id":"7598906260","Type":"IssuesEvent","CreatedAt":"2018-04-27T18:04:35","Actor":"kzu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2560","RelatedDescription":"Opened issue \"XamlParser should not assume XML namespace prefix\" (#2560) at xamarin/Xamarin.Forms","RelatedBody":"If the users chooses to change the XAML namespace prefix from `x` to something else (which is totally valid still in XML and XAML (WPF/UWP) land), XF will fail to parse the XAML attributes correctly. \r\n\r\nThis should not be the case since the XML infoset is the same in either case. \r\n\r\nThe improper code is at [XamlParser](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Xaml/XamlParser.cs#L214-L222) and [XamlParse](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Xaml/XamlParser.cs#L231-L253) which instead of using the `LocalName` of the attribute, it's using its full `Name` that includes the prefix. That is not necessary since the `NamespaceURI` for it has already been checked."},{"Id":"7598898560","Type":"IssuesEvent","CreatedAt":"2018-04-27T18:02:56","Actor":"hauteur","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2559","RelatedDescription":"Opened issue \"Xamarin custom renderer for UWP not working\" (#2559) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nChanges to the Control property in a custom renderer for UWP/Xamarin DatePicker and TimePicker have no effect.  There are no errors, it just doesn't display - for example, setting Color.BorderBrush does nothing.  The exact same code applied to a regular picker work just fine.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a Xamarin Forms project and a UWP project\r\n2.  Create a custom renderer for a DatePicker control\r\n3. Add code to change the border (BorderBrush, BorderThickness)\r\n4. Run the code\r\n\r\n### Expected Behavior\r\nThe border should be set\r\n\r\n### Actual Behavior\r\nThere is no effect\r\n\r\n### Basic Information\r\n\r\n- Version with issue:  Xamarin Forms 1.x through 2.5.1\r\n- Last known good version:  None\r\n- IDE:  Visual Studio 2017 and Visual Studio for Mac\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - UWP:  16299\r\n- Nuget Packages:  Xamarin.Forms\r\n- Affected Devices:  UWP\r\n\r\n### Reproduction Link\r\n\r\nhttps://www.dropbox.com/s/nuhm596kkewkph3/UwpRenderer.zip?dl=0\r\n"},{"Id":"7598551359","Type":"IssuesEvent","CreatedAt":"2018-04-27T16:47:22","Actor":"luccasclezar","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2558","RelatedDescription":"Opened issue \"[Android] Button's shadow being clipped when inside layout\" (#2558) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI'm opening this issue as instructed here: https://bugzilla.xamarin.com/show_bug.cgi?id=58277\r\n\r\nI'm still experiencing the bug described in the related bugzilla thread.\r\n\r\n### Steps to Reproduce\r\n\r\nAs said in the thread, just create a page with this UI:\r\n\r\n    var buttonLayout = new Grid\r\n    {\r\n        RowDefinitions =\r\n        {\r\n            new RowDefinition { Height = new GridLength(1, GridUnitType.Auto) }\r\n        },\r\n        RowSpacing = 12,\r\n        Padding = new Thickness(16)\r\n    };\r\n\r\n    buttonLayout.AddChild(new Button { BackgroundColor = Color.FromHex(\"#ffffff\"), Text = \"Button1\" }, 0, 0);\r\n    Content = buttonLayout;\r\n\r\nObs. As the default button has some padding, the clipping is only noticeable when raised (clicked).\r\n\r\n### Expected Behavior\r\n\r\nThe shadow is not clipped.\r\n\r\n### Actual Behavior\r\n\r\nThe shadow is clipped.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version: none\r\n- Platform Target Frameworks:\r\n  - Android: 8.1, 8.0, 7.1\r\n\r\n### Screenshots\r\n\r\n![screenshot](https://user-images.githubusercontent.com/12024080/39373698-c9408a78-4a1e-11e8-89d3-247ed16e1cca.png)\r\n\r\nLeft: The clipped shadow\r\nRight: The same button with a workaround (hidden ContentView added to the same layout the button is, better described in the bugzilla thread and in the repro project)\r\n\r\n### Reproduction Link\r\n\r\n[ShadowTest.zip](https://github.com/xamarin/Xamarin.Forms/files/1955927/ShadowTest.zip)"},{"Id":"7597587214","Type":"PullRequestEvent","CreatedAt":"2018-04-27T13:51:56","Actor":"paymicro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2557","RelatedDescription":"Opened pull request \"[UWP] Animate ListView.ScrollTo (#2486)\" (#2557) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nadded animate code to `ListView.ScrollTo` in `UWP`\r\n\r\n### Bugs Fixed ###\r\n\r\nFixes https://github.com/xamarin/Xamarin.Forms/issues/2486\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nIf parameter `shouldAnimate` is true, then scrolling should be animated =)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7596940804","Type":"PullRequestEvent","CreatedAt":"2018-04-27T11:37:24","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2556","RelatedDescription":"Opened pull request \"Namescope enhancements\" (#2556) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n - turn Element.FindByName() public\r\n - reduce the amount of time (both Xaml and XamlC) we need to actually set the NameScope on an object\r\n - add a IReferenceProvider\r\n   - allows custom markups replicating x:Reference\r\n   - more efficient x:Reference\r\n  \r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\nAdded\r\n```\r\npublic object Element.FindByName(string name);\r\n\r\npublic interface Xamarin.Forms.Xaml.IReferenceProvider\r\n{\r\n    object FindByName(string name);\r\n}\r\n```\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7599977649","Type":"PullRequestEvent","CreatedAt":"2018-04-27T22:21:48","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4011","RelatedDescription":"Opened pull request \"[mtouch/mmp] Fix deprecation notice for --force-thread-check/--disable-thread-check.\" (#4011) at xamarin/xamarin-macios","RelatedBody":"The --linker-optimize option is an early version of the current --optimize\noption, and apparently I forgot to update everything when the option changed\nname."},{"Id":"7599640573","Type":"PullRequestEvent","CreatedAt":"2018-04-27T20:49:53","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4010","RelatedDescription":"Opened pull request \"[monotouch-test] Fix WeakReferenceTest.WeakTest to work on watchOS/LLVM.\" (#4010) at xamarin/xamarin-macios","RelatedBody":"Change WeakReferenceTest.WeakTest so that it doesn't fetch values that should\nbe garbage collected on the main thread.\n\nDoing so on the main thread may cause those values to stay in registers as\ntemporary values, thus preventing the garbage collector from collecting them.\n\nInstead do the fetching in a background thread, whose stack won't exist\nanymore once it's finished.\n\nFixes this test failure when running on watchOS device in release mode:\n\n    [FAIL] WeakReferenceTest.WeakTest : 't.Obj4' should be null\n\nThe reason it only happens on watchOS in release mode, is probably because\nLLVM puts temporary values in different registers than Mono's AOT compiler\ndoes."},{"Id":"7599571791","Type":"IssuesEvent","CreatedAt":"2018-04-27T20:33:52","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4009","RelatedDescription":"Opened issue \"[msbuild] Why is msbuild windows is handling reference assemblies differently from msbuild mac?\" (#4009) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nIn relation to https://github.com/xamarin/xamarin-macios/issues/3199 we found a [Stack Overflow post](https://stackoverflow.com/questions/49646078/xamrin-ios-aot-compilation-fails-from-mac-but-builds-fine-from-pc) that seemed to indicate that msbuild on Windows was behaving differently from msbuild on the Mac.\r\n\r\n### Expected Behavior\r\n\r\nSimilar behavior on windows an mac (so the XI fix for Mac is obsolete).\r\n\r\n### Actual Behavior\r\n\r\nMSBuild Windows seems to be working fine wrt nugget packages with reference assemblies and not MSBuild Mac.\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\nXVS version info: https://gist.github.com/VincentDondain/3075397af439d44b1f38483c733876e4\r\nVSMac version info: https://gist.github.com/VincentDondain/31877a28c4b92512ece902d7cfe34150\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\nHere's the Mac build log for the test project: https://gist.github.com/VincentDondain/acd03178d0ce92a4c95ef7cdb96c701b (with the fix https://github.com/xamarin/xamarin-macios/commit/e297e99378868e219c88a23a04e25388ce194978 so the reference assembly is skipped and mtouch can AOT).\r\n\r\nHere's the Windows build log for a similar test project: https://gist.github.com/VincentDondain/9fade72f7236d3800a1a992c1ce4adb6. It doesn't have the XI fix because it's using XI 11.9.1.24 and yet mtouch seems to be correctly getting the `lib` assembly for System.Runtime.CompilerServices.Unsafe and not the `ref` one.\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\nhttps://www.dropbox.com/s/kxt3isgzn74nq35/Issue3199.zip?dl=0\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7599514034","Type":"PullRequestEvent","CreatedAt":"2018-04-27T20:20:36","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3991","RelatedDescription":"Merged pull request \"[msbuild/mac] Skip reference assemblies passed to mmp\" (#3991) at xamarin/xamarin-macios","RelatedBody":"- Similar to issue #3199: Could not AOT the assembly System.Runtime.CompilerServices.Unsafe.dll (MT3001)\n  (https://github.com/xamarin/xamarin-macios/issues/3199)\n- Test case: https://www.dropbox.com/s/49jxl8iftmlymes/Issue3199Test3.zip?dl=0\n\nProblem\n=======\n\nGiven a Nuget Package added via the \"package reference\" mechanism and the said package having netstandard `lib` **and** `ref` folders;\n`mmp`, if given `--aot:all` was getting reference assemblies and couldn't AOT them as those assemblies are only facades.\n\nSolution\n========\n\nSkipping the assemblies that have `/ref/` in their path seems like the simplest and yet most functional solution to the problem.\n\nAs it turn out, there is some logic already in place that copies the `lib` assemblies to the destination folder. It seems equivalent to marking them as \"Local Copy\".\nWhat this does is that it makes those assemblies available to msbuild via `@(ReferenceCopyLocalPaths)`. This gives us the opportunity to safely remove the `ref` assemblies from `@(ReferencePath)`.\n\n*Note: `mmp` is getting the assemblies to reference via a combination of `@(ReferencePath)` and `@(ReferenceCopyLocalPaths)`.*"},{"Id":"7598612298","Type":"IssuesEvent","CreatedAt":"2018-04-27T17:00:41","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4008","RelatedDescription":"Opened issue \" condition `mono_domain_get () == mono_get_root_domain ()' not met error generated on building metal image processing samples\" (#4008) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build https://github.com/xamarin/ios-samples/tree/master/ios8/MetalImageProcessing with Release|iPhone config from command line using msbuild.\r\n\r\n### Expected Behavior\r\nApp should build successfully\r\n\r\n### Actual Behavior\r\nApp failed to build with an error, Assertion at /Users/builder/data/lanes/5944/7e782c1e/source/xamarin-macios/external/mono/mono/metadata/gc.c:847, condition `mono_domain_get () == mono_get_root_domain ()' not met\r\nThis is the first time  such an issue is seen in bots. \r\n\r\n### Environment\r\n\r\n```\r\nOperating System: Mac OS X 10.13.4\r\nMono version: 5.10.1.57 (ea8a24b1bbf)  (2018-04-24 14:53:01 -04:00)\r\nXA version: 8.3.0.18 (HEAD/1f8462ef1) \r\nXI version: 11.10.1.177 (d15-7: 7e782c1e) \r\nXM version: 4.4.1.176 (master: 7e782c1e)  (2018-04-25 15:27:14 -04:00)\r\nXVS version: \r\nXS version: 7.5.0.1212 (c82e5cc)  (2018-04-19 16:57:22 -04:00)\r\n```\r\n\r\n### Build Logs\r\n\r\nBuild Log: http://xqa.blob.core.windows.net/gist/report-1f27cd1cc6244f9894172c3bbec5a287.txt\r\n\r\n### Example Project (If Possible)\r\nhttps://github.com/xamarin/ios-samples/tree/master/ios8/MetalImageProcessing\r\n\r\n## Additional Info:\r\nI couldn't reproduce the issue on the same bot with the same command line inputs\r\nManual Build Log : https://gist.github.com/GouriKumari/79ad5ce69ce6c9b995ef5f56d1736d53 .\r\nLogging this to keep track of the issue. \r\n\r\n"},{"Id":"7598321426","Type":"PullRequestEvent","CreatedAt":"2018-04-27T16:00:23","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4005","RelatedDescription":"Merged pull request \"[monotouch-test] Make BundleTest.TestPreferredLocalizations laxer.\" (#4005) at xamarin/xamarin-macios","RelatedBody":"Change test to verify that all preferred localizations are in the list of\navailable localizations (instead of hardcoding an expected result of 'en').\n\nThis makes the TestPreferredLocalizations work if the device language is 'es',\nin which case the preferred language between 'en' and 'es' is obviously 'es'."},{"Id":"7598314464","Type":"IssuesEvent","CreatedAt":"2018-04-27T15:59:00","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3999","RelatedDescription":"Closed issue \" BaseOptimizeGeneratedCodeTest.SetupBlockPerfTest failed on an AppleTV device\" (#3999) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Update System to Xamarin.iOS d15-7, 11.10.1.177 (d15-7: 7e782c1e) \r\n2. Execute LinkAll test on Apple TV with release config\r\n\r\n### Expected Behavior\r\nAll tests succeed\r\n### Actual Behavior\r\n[FAIL] OptimizeGeneratedCodeTest.BaseOptimizeGeneratedCodeTest.SetupBlockPerfTest :   At least 8x speedup\r\n\r\n### Environment\r\n\r\n```\r\nOperating System: Mac OS X 10.13.4\r\nMono version: 5.10.1.47 (8eb8f7d5e74)  (2018-04-13 20:18:12 -04:00)\r\nXA version: 8.3.0.19 (HEAD/342b2ce96) \r\nXI version: 11.10.1.177 (d15-7: 7e782c1e) \r\nXM version: 4.4.1.176 (master: 7e782c1e)  (2018-04-25 15:27:14 -04:00)\r\nXVS version: \r\nXS version: 7.5.0.1222 (48907c1)  (2018-04-20 18:20:07 -04:00)\r\n[Device] Name: XQA-AppleTV-4, Version: 10.2.2, Arch: , FormFactor: AppleTV\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nBuild Log: http://xqa.blob.core.windows.net/gist/report-953bd3fa1c984fd2a14fe800fbe3193c.txt\r\nTest + Device Log : http://xqa.blob.core.windows.net/gist/linkall-tvos11-44-2685652fd1ecb4eddd80ebefb1562b316473fa559b11-44-26-d78dae353e104b44be07618ddb2a100d.zip\r\n\r\n### Example Project (If Possible)\r\n\r\nxamarin-macios/tests/linker/ios/linkall/linkall-tvos\r\n\r\n### Additional Info:\r\n1. Tests returned a value 6.4901681106337019d, less than the expected one (8x). \r\n2. This issue didn't occur on Apple TV 11.3 device. \r\n3. Reporting it since there is a mono change with this commit. \r\n\r\n"},{"Id":"7598310111","Type":"PullRequestEvent","CreatedAt":"2018-04-27T15:58:14","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4006","RelatedDescription":"Merged pull request \"[tests] Adjust SetupBlockPerfTest to expect at least a 6x speedup instead of 8x. Fixes maccore #649.\" (#4006) at xamarin/xamarin-macios","RelatedBody":"Adjust SetupBlockPerfTest to expect at least a 6x speedup instead of 8x, since\nthe test is randomly hitting the assert. None of the reported failures so far\nhas had a speedup of less than 6x, so hopefully it will be better now.\n\nFixes https://github.com/xamarin/maccore/issues/649."},{"Id":"7597929555","Type":"IssuesEvent","CreatedAt":"2018-04-27T14:51:10","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4007","RelatedDescription":"Closed issue \"Don't verify types if you store to a pointer byref\" (#4007) at xamarin/xamarin-macios","RelatedBody":"This is integration tracking issue for https://github.com/mono/mono/issues/8403"},{"Id":"7597851266","Type":"IssuesEvent","CreatedAt":"2018-04-27T14:37:59","Actor":"marek-safar","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4007","RelatedDescription":"Opened issue \"Don't verify types if you store to a pointer byref\" (#4007) at xamarin/xamarin-macios","RelatedBody":"This is integration tracking issue for https://github.com/mono/mono/issues/8403"},{"Id":"7597399478","Type":"IssuesEvent","CreatedAt":"2018-04-27T13:17:06","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3785","RelatedDescription":"Closed issue \"iOS project does not load to solution\" (#3785) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  Open solution containing iOS project\r\n2.  Project was not loaded\r\n3.  If you load solution explicitly message box with text \r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nAccess to the path 'D:\\sources\\Fingrad\\Dev.Fingrad\\src\\Dashboard\\iPhoneDashboard\\iPhoneDashboard.csproj' is denied.\r\n---------------------------\r\nОК   \r\n---------------------------\r\nappears in spite of opening project as file for editing is allowed.\r\n\r\n### Expected Behavior\r\nProject loads as before.\r\n### Actual Behavior\r\nProject does not load\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.6.0\r\nVisualStudio.15.Release/15.6.0+27428.1\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2017   00369-90000-00000-AA513\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# Tools 10.1 for F# 4.1   00369-90000-00000-AA513\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10212.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40214.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51214.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40215.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCreateLayoutWizard   1.0\r\nCreate layout wizard.\r\n\r\nDevExpress.DeploymentTool   1.0\r\nA useful tool for deploying DevExpress assemblies.\r\n\r\nDevExpress.ExpressApp.DesignPackage   1.0\r\nDevExpress VSIX Package\r\n\r\nDevExpress.Win.LayoutAssistant Extension   1.0\r\nDevExpress.Win.LayoutAssistant Visual Studio Extension Detailed Info\r\n\r\nGitHub.VisualStudio   2.4.2.1331\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51212.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nP4VS - Helix Plugin for Visual Studio   2017.2.161.4623\r\nP4VS is the Perforce Helix integration for Microsoft Visual Studio. P4VS provides developers working within Visual Studio access to Helix version control features, including check in/check out, view file history, and more.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61801.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.27406.00\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Cross Platform Mobile Development (iOS)   15.0.27309.00\r\nVisual C++ for Cross Platform Mobile Development (iOS)\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.749 (9b0fce36d)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.58 (cee1369d0)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.15 (HEAD/22d97e153)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.8.0.20 (1c6f300)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\nXtraReports package   1.0\r\nXtraReports package```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n[iPhoneDashboard.zip](https://github.com/xamarin/xamarin-macios/files/1829486/iPhoneDashboard.zip)\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\n\n> VS bug [#587111](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/587111)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989898469933494275","CreatedAt":"2018-04-27T16:06:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/CLM721aiRu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":8,"RawContent":null},{"Id":"989568663995994112","CreatedAt":"2018-04-26T18:15:29+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/j7zEZKejRt https://t.co/uR4Wn80zw2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":77,"FavoriteCount":29,"RawContent":null},{"Id":"989535349708816384","CreatedAt":"2018-04-26T16:03:06+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/mCkzHchAxL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"989169416758841344","CreatedAt":"2018-04-25T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Implement or improve end-to-end mobile #DevOps in your apps with this series from @gshackles on the #VSAppCenter bl… https://t.co/eg1dVsOYzK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":21,"RawContent":null},{"Id":"988809546146701312","CreatedAt":"2018-04-24T15:59:01+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/bAWyV5Zt2G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":14,"RawContent":null},{"Id":"988493654808498176","CreatedAt":"2018-04-23T19:03:47+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/qyMCa5TERh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":98,"FavoriteCount":37,"RawContent":null},{"Id":"988444639064666114","CreatedAt":"2018-04-23T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/lnoWKsVf6F","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"988180901405364225","CreatedAt":"2018-04-22T22:21:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/WHbOgNnjfL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":16,"RawContent":null},{"Id":"987830341409832966","CreatedAt":"2018-04-21T23:08:01+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/VcwvXVvsi6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":113,"FavoriteCount":52,"RawContent":null},{"Id":"987416244490993664","CreatedAt":"2018-04-20T19:42:32+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":50,"RawContent":null},{"Id":"987362257762967553","CreatedAt":"2018-04-20T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/4JyHATQW2I","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":71,"FavoriteCount":17,"RawContent":null},{"Id":"986658974685679617","CreatedAt":"2018-04-18T17:33:25+00:00","UserScreenname":"xamarinhq","Text":"Automatic iOS app provisioning with #VS2017 15.7 Preview 3: https://t.co/vFjy3uXtie https://t.co/sLhjkaHc9X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":101,"FavoriteCount":55,"RawContent":null},{"Id":"986626430950920192","CreatedAt":"2018-04-18T15:24:06+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/piucqHprNe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":120,"FavoriteCount":51,"RawContent":null},{"Id":"986268805629345792","CreatedAt":"2018-04-17T15:43:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/eK0geeikW6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":22,"RawContent":null},{"Id":"985953326079594496","CreatedAt":"2018-04-16T18:49:25+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":37,"RawContent":null},{"Id":"985907924479479811","CreatedAt":"2018-04-16T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/HMGMdGgDYr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"985296899346456576","CreatedAt":"2018-04-14T23:21:01+00:00","UserScreenname":"xamarinhq","Text":"Try out the #Xamarin Android Device Manager Preview, a tool for creating, editing, and controlling Android virtual… https://t.co/POMrs2vlnD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":33,"RawContent":null},{"Id":"984843662428459008","CreatedAt":"2018-04-13T17:20:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/1JLVLvKR0M","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":26,"RawContent":null},{"Id":"984821292938465285","CreatedAt":"2018-04-13T15:51:07+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/KTX4gcGjqZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":12,"RawContent":null},{"Id":"984463408073408513","CreatedAt":"2018-04-12T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/tX03cw88GD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-04-28T05:30:46.2503429Z","RunDurationInMilliseconds":4384}