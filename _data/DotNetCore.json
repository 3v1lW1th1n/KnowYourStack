{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":44,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null},{"Title":"F# and .NET Core Roadmap Update","PublishedOn":"2017-08-14T00:00:00","CommentsCount":58,"FacebookCount":0,"Summary":"Now that .NET Core 2.0 has been released, we wanted to take some time to talk about F# and .NET Core. F# and .NET Core 1.0 F# has been supported on .NET Core and .NET Standard since their 1.0 releases. In the months leading up to the release of .NET Core 1.0, Enrico Sada from... <a aria-label=\"read more about F# and .NET Core Roadmap Update\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6606845503","Type":"PullRequestEvent","CreatedAt":"2017-09-19T03:00:15","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14058","RelatedDescription":"Opened pull request \"Move initialization of YieldProcessorNormalized to the finalizer thread\" (#14058) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/13984\r\n- Also moved relevant functions out of the Thread class as requested in the issue\r\n- For some reason, after moving the functions out of the Thread class, YieldProcessorNormalized was not getting inlined anymore. It seems to be important to have it be inlined such that the memory loads are hoisted out of outer loops. To remove the dependency on the compiler to do it (even with forceinline it's not possible to hoist sometimes, for instance InterlockedCompareExchnage loops), changed the signatures to do what is intended."},{"Id":"6606838199","Type":"PullRequestEvent","CreatedAt":"2017-09-19T02:57:21","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14057","RelatedDescription":"Opened pull request \"Change AsSpan() to property Span and rename AsMemory to Memory\" (#14057) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/13801\r\n\r\ncc @KrzysztofCwalina, @stephentoub "},{"Id":"6606696345","Type":"PullRequestEvent","CreatedAt":"2017-09-19T01:59:16","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14056","RelatedDescription":"Opened pull request \"[RyuJIT/ARM32] [WIP] [DO NOT MERGE] Enabling fast tail call feature\" (#14056) at dotnet/coreclr","RelatedBody":"It enables fast tail call feature on ryujit/arm32.\r\nFor tail call, r12 used to save target address (r12 is not caller & callee save register)\r\n\r\n\r\n"},{"Id":"6606547611","Type":"PullRequestEvent","CreatedAt":"2017-09-19T00:56:15","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14055","RelatedDescription":"Opened pull request \"Support PR trigger of ARM JIT stress jobs\" (#14055) at dotnet/coreclr","RelatedBody":"Add a list of jobs known to the ARM64 CI, and allow those to be triggered.\r\n\r\nAlso, (1) allow Release triggered jobs to run tests (before, the label said\r\n\"Build and Test\", but no test was done), (2) let arm64 debug do a PRI 1 test\r\nbuild, like ARM32 (reduce differences between these similar tasks)."},{"Id":"6606502351","Type":"PullRequestEvent","CreatedAt":"2017-09-19T00:36:09","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14054","RelatedDescription":"Opened pull request \"Fix rlimit setting of RLIM_NOFILE on OSX\" (#14054) at dotnet/coreclr","RelatedBody":"This change fixes an issue with rlimit setting of RLIM_NOFILE. The problem\r\nis that the rlim_max that we get from getrlimit is too large and so setting\r\nthe rlimit_cur to that value fails. The OSX man page for rlimit has a compat\r\nnote about it, stating that the rlimit_cur needs to be limited to\r\nmin(OPEN_MAX, rlim_max) if one wants to set it to rlim_max.\r\n\r\nAs an add-on change, I've also adds missing conversion from EMFILE errno\r\nto ERROR_TOO_MANY_OPEN_FILES that has obscured the setrlimit issue since\r\nthe failure due to small limit was being reported as ERROR_GEN_FAILURE."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6607097853","Type":"IssuesEvent","CreatedAt":"2017-09-19T04:52:47","Actor":"randomizedthinking","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7678","RelatedDescription":"Opened issue \"dotnet: failed to create a F# project on Debian with SDK 2.0.0\" (#7678) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n    dotnet new console -lang F#\r\n\r\n## Expected  behavior\r\n\r\nA F# project is created.\r\n\r\n## Actual behavior\r\n\r\nThe following error is received.\r\n\r\n    The template \"Console Application\" was created successfully.                                                                                                                                                                                  \r\n    \r\n    Processing post-creation actions...\r\n    Running 'dotnet restore' on /home/xxx/fsharp/fsharp.fsproj...\r\n      Restoring packages for /home/xxx/fsharp/fsharp.fsproj...\r\n    \r\n    Restore failed.\r\n    Post action failed.\r\n    Description: Restore NuGet packages required by this project.\r\n    Manual instructions: Run 'dotnet restore'\r\n\r\nAlso, a manual call of `dotnet restore` does nothing. Build and run will fail as well.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n    .NET Command Line Tools (2.0.0)\r\n    \r\n    Product Information:\r\n     Version:            2.0.0\r\n     Commit SHA-1 hash:  cdcd1928c9\r\n    \r\n    Runtime Environment:\r\n     OS Name:     debian\r\n     OS Version:  9\r\n     OS Platform: Linux\r\n     RID:         linux-x64\r\n     Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n    \r\n    Microsoft .NET Core Shared Framework Host\r\n    \r\n      Version  : 2.0.0\r\n      Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d"},{"Id":"6606211633","Type":"IssuesEvent","CreatedAt":"2017-09-18T22:44:32","Actor":"moozzyk","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7677","RelatedDescription":"Opened issue \"System.ArgumentOutOfRangeException thrown if verbosity has an incorrect value\" (#7677) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI used `debug` instead `d` for `-v` and instead of error saying that the used verbosity is not valid I got this:\r\n```\r\ndotnet restore -v debug\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collectio\r\nn.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.LogVerbosityForAllTopLevelCommand(ICollection`1 result, ParseResult\r\n parseResult, String topLevelCommandName)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n## Expected  behavior\r\nA meaningful error message\r\n\r\n## Actual behavior\r\nArgumentOutOfRangeException\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.0-preview1-007042)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007042\r\n Commit SHA-1 hash:  e94a82c9a3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\XXX\\.dotnet\\x64\\sdk\\2.1.0-preview1-007042\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n"},{"Id":"6605465162","Type":"IssuesEvent","CreatedAt":"2017-09-18T19:37:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7345","RelatedDescription":"Closed issue \"F# compiler error message contains odd characters\" (#7345) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nCreate an F# library with following code\r\n\r\n```F#\r\nnamespace Lib\r\n\r\nmodule Say =    \r\n    let hello =\r\n        printf \"%s\" 1\r\n```\r\n\r\nRun \r\n```\r\ndotnet build\r\n```\r\n\r\n## Expected  behavior\r\n\r\n```\r\nC:\\Temp\\f#\\Lib>dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  CSLib -> C:\\Temp\\f#\\CSLib\\bin\\Debug\\netstandard2.0\\CSLib.dll\r\nC:\\Temp\\f#\\Lib\\Library.fs(5,21): error FS0001: This expression was expected to have type 'string' but here has type 'int' [C:\\Temp\\f#\\Lib\\Lib.fsproj]\r\n\r\nBuild FAILED.\r\n```\r\n\r\n## Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/41759/28852321-1c1ae286-76dd-11e7-9846-48e8d9530e87.png)\r\n\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.0.0-preview3-006910)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview3-006910\r\n Commit SHA-1 hash:  ad12b539a7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview3-006910\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6605455193","Type":"IssuesEvent","CreatedAt":"2017-09-18T19:34:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7427","RelatedDescription":"Closed issue \"dotnet restore creates inaccessible obj directory\" (#7427) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n_I was migrating projects from .netcore 1.x to 2.0.0-preview2-006497. I got errors about \"Microsoft.Composition 1.0.27\" being restored using .NETFramework 4.6.1 instead of .netcore which may cause compatibility problems. I have noticed that my .netcore 2.0 projects created from scratch do not have any obj directory so I entered my .netcore 1.0 project, removed obj recursively and did \"dotnet restore\"._\r\n\r\n```\r\n>rmdir /S obj\r\nobj, Are you sure (Y/N)? Y\r\n\r\n>dotnet restore\r\n  Restoring packages for C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj...\r\n  Restore completed in 20,33 ms for C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj.\r\n  Restore completed in 19,8 ms for C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj.\r\n  Restore completed in 26,83 ms for C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj.\r\nC:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj : warning NU1701: Package 'Microsoft.Composition 1.0.27' was restored using '.NETPortable,Version=v0.0,Profile=Profile259, .NETFramework,Version=v4.6.1' instead the project target framework '.NETCoreApp,Version=v2.0'. This may cause compatibility problems.\r\n  Generating MSBuild file C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\obj\\ShopShop.csproj.nuget.g.props.\r\nC:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\NuGet.targets(102,5): error : Access to the path 'C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\obj\\364bb939-b2cf-49fe-bbc0-a88c647295a6.tmp' is denied. [C:\\Users\\slavomir.danas\\Documents\\Visual Studio 2017\\Projects\\ShopShop\\ShopShop\\ShopShop.csproj]\r\n```\r\n\r\nAn attempt to take ownership from elevated prompt fails, the folder is probably owned by systemaccount  that prevent even local Administrators to take over.\r\n```\r\n>takeown /F .\\obj /R\r\nERROR: Access is denied.\r\n\r\n>takeown /F .\\obj /R /A\r\nERROR: Access is denied.\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\"obj\" directory gets created with current user rights.\r\n\r\n## Actual behavior\r\nInaccessible folder that blocks the whole project.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0-preview2-006497)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006497\r\n Commit SHA-1 hash:  06a2093335\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25407-01\r\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6605302890","Type":"PullRequestEvent","CreatedAt":"2017-09-18T18:59:41","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7676","RelatedDescription":"Opened pull request \"Skip DefaultProxy resolution code if an exception is thrown\" (#7676) at dotnet/cli","RelatedBody":"Addresses: https://github.com/dotnet/cli/issues/6747"},{"Id":"6605259177","Type":"IssuesEvent","CreatedAt":"2017-09-18T18:49:54","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6344","RelatedDescription":"Closed issue \"Document and clarify the parameters for dotnet-install\" (#6344) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nFollow the instructions here to try to install version 1.1.1 of the shared runtime: https://docs.microsoft.com/en-us/dotnet/articles/core/tools/dotnet-install-script\r\n\r\n## Expected  behavior\r\n\r\nIt works\r\n\r\n## Actual behavior\r\n\r\n_None_ of the channel names documented there work.  Web searches return nothing that documents what do use.\r\n\r\nBy _guessing_ I found that the correct channel name for installing 1.1.1 is '1.1.0'.  E.g. \r\n\r\n`source ./dotnet-install.sh --channel 'release/1.1.0' --version '1.1.1'  --shared-runtime`\r\n\r\n## Environment data\r\nUbuntu 16.04\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6605240346","Type":"IssuesEvent","CreatedAt":"2017-09-18T18:45:38","Actor":"d223chen","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7675","RelatedDescription":"Opened issue \"error: Value cannot be null. error: Parameter name: projectUniqueName\" (#7675) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet add package WindowsAzure.Storage --version 1.7.0`\r\n\r\n## Expected  behavior\r\nSome success message indicating that the package has been added as a reference to the *.csproj file in the current working directory.\r\n\r\n## Actual behavior\r\nMicrosoft (R) Build Engine version 15.1.1012.6693\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Writing C:\\Users\\dchen\\AppData\\Local\\Temp\\tmpE349.tmp\r\ninfo : Adding PackageReference for package 'WindowsAzure.Storage' into project 'C:\\Source\\dchen\\...\\...\\...\\....csproj'.\r\nerror: Value cannot be null.\r\nerror: Parameter name: projectUniqueName\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.3)\r\n\r\nProduct Information:\r\n Version:            1.0.3\r\n Commit SHA-1 hash:  37224c9917\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6602801945","Type":"IssuesEvent","CreatedAt":"2017-09-18T09:59:01","Actor":"eriawan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/497","RelatedDescription":"Opened issue \"Creating .NET Standard 2.0 class library project will always have reference to Microsoft.NETCore.Platforms 1.1.0 by default\" (#497) at dotnet/standard","RelatedBody":"# Summary\r\n\r\nCreating a .NET Standard 2.0 class library project should have correct reference to Microsoft.NETCore.Platform 2.0.0, but actual reference points to version 1.1.0 by default.\r\n\r\n# Detail description\r\n\r\nEnvironments:\r\n\r\n- Windows 10 Anniversary Update\r\n- Visual Studio 2017 Enterprise with update: 15.3.3 and .NET Core workload installed (also tested with Visual Studio 2017 15.3.1 and using Community Edition)\r\n\r\nSteps to reproduce:\r\n- Create a .NET Standard class library \r\n- expand the Dependency node on the Solution Explorer\r\n\r\nThis is the steps screenshot:\r\n![create_netstandard_library](https://user-images.githubusercontent.com/8773147/30537081-8f26b310-9c92-11e7-82eb-59263813eedb.gif)\r\n\r\n\r\nBy default, the creation of .NET Standard 2 class library should always point to v2.0.0 not the 1.1.0.\r\n\r\nThis is the close-up screenshot of the dependencies:\r\n\r\n![netstandard_dependencies](https://user-images.githubusercontent.com/8773147/30537090-9952c694-9c92-11e7-852c-cfca75bdbe1f.png)\r\n\r\n \r\n# Expected result\r\n\r\nThe references should point to **Microsoft.NETCore.Platforms** _**v2.0.0**_ instead of older version, because this version is the version used by .NET Standard 2.0.\r\n \r\nIs this a bug or by design?\r\n\r\ncc @terrajobst and @weshaggard "},{"Id":"6598912195","Type":"IssuesEvent","CreatedAt":"2017-09-16T12:56:18","Actor":"ddobric","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/496","RelatedDescription":"Opened issue \"APIs of Net\" (#496) at dotnet/standard","RelatedBody":"What is the roadmap of https://apisof.net ?\r\n\r\nIt is a very helpful application. However it should be improved.\r\nRight now, even certificate has expired. : DLG_FLAGS_SEC_CERT_DATE_INVALID\r\n\r\nThanks\r\n\r\n\r\n\r\n\r\n"},{"Id":"6592952439","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:00:23","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Closed issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app, but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nPlease know we also tried different combinations of including the System.Runtime package, without result.  \r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6592432642","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Closed issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nNote: This is the most expensive condition in the entire build and give it only runs for .NET Standard projects it's overhead will be higher for a solution containing only .NET Standard projects.\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6606986887","Type":"IssuesEvent","CreatedAt":"2017-09-19T03:59:49","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24137","RelatedDescription":"Opened issue \"Test: System.Net.Http.Functional.Tests.CancellationTest/ReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly failed with \"System.IO.IOException\"\" (#24137) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.Http.Functional.Tests.CancellationTest/ReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly(startResponseBody: True)` has failed.\n\nAssert.Throws() Failure\\r\n    Expected: typeof(System.OperationCanceledException)\\r\n    Actual:   typeof(System.IO.IOException): Exception from HRESULT: 0x80072EF1\n\n        Stack Trace:\n\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\ExceptionServices\\ExceptionDispatchInfo.cs:line 61\n       at System.IO.WinRtToNetFxStreamAdapter.<ReadAsyncInternal>d__43.MoveNext$catch$0() in E:\\A\\_work\\491\\s\\corefx\\src\\System.Runtime.WindowsRuntime\\src\\System\\IO\\WinRtToNetFxStreamAdapter.cs:line 843\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\ExceptionServices\\ExceptionDispatchInfo.cs:line 61\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 178\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 147\n       at System.Runtime.CompilerServices.ConfiguredTaskAwaitable$1<System.Int32>.ConfiguredTaskAwaiter.GetResult() in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 477\n       at System.IO.BufferedStream.<ReadFromUnderlyingStreamAsync>d__50.MoveNext() in E:\\A\\_work\\491\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\IO\\BufferedStream.cs:line 739\n    --- End of stack trace from previous location where exception was thrown ---\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\ExceptionServices\\ExceptionDispatchInfo.cs:line 61\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 178\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\\dd\\ndp\\fxcore\\CoreRT\\src\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 147\n    \nBuild : Master - 20170918.03 (UWP ILC Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS3-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20170918.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.CancellationTest~2FReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly(startResponseBody:%20True)"},{"Id":"6606974891","Type":"IssuesEvent","CreatedAt":"2017-09-19T03:54:22","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24136","RelatedDescription":"Opened issue \"UWP F5 Tests (Master): All work items have fireball issue\" (#24136) at dotnet/corefx","RelatedBody":"UWP F5 Tests (Master): All work items have fireball issue\r\n\r\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20170918.03\r\n\r\nAlmost failed on **Windows.10.Amd64.ClientRS3-x64**\r\n"},{"Id":"6606868904","Type":"IssuesEvent","CreatedAt":"2017-09-19T03:09:41","Actor":"lextm","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24135","RelatedDescription":"Opened issue \"BadImageFormatException with Span<T> with xUnit.net\" (#24135) at dotnet/corefx","RelatedBody":"`Span<T>` has been so special, that a strange runtime exception can occur. Reported to xUnit.net already, https://github.com/xunit/xunit/issues/1457 but not sure if the issue is merely caused by xUnit.net. I hope a better exception as well as more meaningful call stack can be thrown if possible."},{"Id":"6606841838","Type":"PullRequestEvent","CreatedAt":"2017-09-19T02:58:49","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24134","RelatedDescription":"Opened pull request \"Change AsSpan to property Span and rename AsMemory to Memory\" (#24134) at dotnet/corefx","RelatedBody":"The CI will be green after this PR goes through: https://github.com/dotnet/coreclr/pull/14057\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/13801\r\nPart of https://github.com/dotnet/corefx/issues/23862\r\n\r\ncc @KrzysztofCwalina, @stephentoub "},{"Id":"6606813099","Type":"IssuesEvent","CreatedAt":"2017-09-19T02:47:13","Actor":"weitzhandler","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24126","RelatedDescription":"Closed issue \"Please introduce a default blank templates for posting issues\" (#24126) at dotnet/corefx","RelatedBody":"In the [API Review Process / Steps](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md#steps) section, there is a link to a good API proposal example.\r\n\r\nIt could be a lot easier and more productive to make a default template so that when users create an issue they can choose to fill in the questions or just <kbd>Ctrl</kbd>+<kbd>A</kbd> and start typing to make one of their own.\r\n\r\nSee also:\r\n- [Issue and PR templates](https://github.com/blog/2111-issue-and-pull-request-templates)\r\n- [Creating an issue template for your repository](https://help.github.com/articles/creating-an-issue-template-for-your-repository)"},{"Id":"6606757896","Type":"PullRequestEvent","CreatedAt":"2017-09-19T02:24:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/23813","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to , servicing-25713-01, respectively (release/1.1.0)\" (#23813) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6607010984","Type":"IssuesEvent","CreatedAt":"2017-09-19T04:11:14","Actor":"kingces95","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21899","RelatedDescription":"Closed issue \"Roslyn First Touch Development Crash when using VisualStudioSetup \" (#21899) at dotnet/roslyn","RelatedBody":"I follow the instructions [to build and deploy Rosyln to an isolated VS 2017](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md). The clone, restore and build succeed from the command line. I then launch the Roslyn.sln project, set `VisualStudioSetup` as the startup project, hit F5, create a new .NET Core Console project in the launched VS 2017 instance, start adding some code which has some syntax errors (may be unrelated), and then the instance crashes and terminates. I expect no crash.\r\n\r\n````\r\n// if we reached here, IRemoteHostClientFactory must exist.\r\n// this will make VS.Next dll to be loadedvar client = await\r\n_workspace.Services.GetRequiredService<IRemoteHostClientFactory>().CreateAsync(_workspace, cancellationToken).ConfigureAwait(false);\r\n````\r\n\r\n````\tmscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.__Canon>.Start<Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientFactory.<CreateAsync>d__0>\tUnknown\tNon-user code. Skipped loading symbols.\r\nMicrosoft.VisualStudio.LanguageServices.Next.dll!Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientFactory.CreateAsync\tUnknown\tNon-user code. Skipped loading symbols.\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.EnableAsync Line 164\tC#\tSymbols loaded.\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.Enable.AnonymousMethod__0 Line 96\tC#\tSymbols loaded.\r\n````\r\n\r\nWith the following `System.TypeLoadException`:\r\n\r\n>Method 'TryCreateConnectionAsync' in type 'Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient' from assembly 'Microsoft.VisualStudio.LanguageServices.Next, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.\r\n\r\nI'm using `VisualStudioSetup` instead of `VisualStudioSetup.Next` because I'd like to work on a new language featured and assume from this line in the docs that I should use `VisualStudioSetup`.\r\n>If you're regularly working on new language features, you may wish to consider building both the CompilerExtension and VisualStudioSetup projects to ensure the real build and live analysis are synchronized. \r\n\r\nI only mention this because of the comment `this will make VS.Next dll to be loadedvar client = await` may imply that the code expects me to have launched using VisualStudioSetup.Next "},{"Id":"6606784548","Type":"IssuesEvent","CreatedAt":"2017-09-19T02:35:23","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22186","RelatedDescription":"Opened issue \"Roslyn test projects should not produce ref assemblies\" (#22186) at dotnet/roslyn","RelatedBody":"Producing ref assemblies adds a little cost. Assuming that we only have terminal test projects, we should be able to dispense with that. \r\nWe should only produce ref assemblies for non-terminal projects."},{"Id":"6606591632","Type":"IssuesEvent","CreatedAt":"2017-09-19T01:15:15","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21748","RelatedDescription":"Closed issue \"Add two new UnaryOperatorKinds for increment and decrement operators\" (#21748) at dotnet/roslyn","RelatedBody":"We decided to remove these kinds in an earlier meeting but Aleksey wants to bring it up in the next design meeting. See https://github.com/dotnet/roslyn/pull/21407#discussion_r135352992"},{"Id":"6606588807","Type":"PullRequestEvent","CreatedAt":"2017-09-19T01:14:02","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22153","RelatedDescription":"Merged pull request \"Add two new OperationKinds for increment and decrement operators\" (#22153) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/21748"},{"Id":"6606457512","Type":"PullRequestEvent","CreatedAt":"2017-09-19T00:17:06","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22185","RelatedDescription":"Opened pull request \"back ported only portion that is causing perf issues in dev15.4.x fro…\" (#22185) at dotnet/roslyn","RelatedBody":"…m master.\r\n\r\nthis basically prevent symbol info indexer from creating/calculating same checksum again and again for every documents in the solution.\r\n\r\nthis should make it to do it only once per project rather than document, and only update it when there is a change in the project.\r\n\r\n**Customer scenario**\r\n\r\nCustomer opens a big solution in VS and start to use it for a while and VS crashes due to OOM.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=489731&_a=edit\r\n\r\n**Workarounds, if any**\r\n\r\ncurrently, there is no workaround.\r\n\r\n**Risk**\r\n\r\nLow, we cache 20 bytes per project. so. 500 projects solution consumes 10K bytes more memory.\r\n\r\n**Performance impact**\r\n\r\nIt should get rid of OOM caused by this issue. and prevent us from re-doing same work multiple times (for every documents) to 1 per project. and only once for a project that is actually changed, rather than all projects that depends on the project that changed.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes.\r\n\r\n**Root cause analysis:**\r\n\r\ncode didn't check the case where same work is asked multiple times and re-did the same work multiple times. previously, when versions are used, this was fine, since checking versions are cheap, but now we use checksum, and calculating checksums are expansive compared to getting versions, so it caused this issue.\r\n\r\n**How was the bug found?**\r\n\r\ndogfooding, watson and feedbacks.\r\n\r\n"},{"Id":"6606425610","Type":"IssuesEvent","CreatedAt":"2017-09-19T00:03:45","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18697","RelatedDescription":"Closed issue \"OOP crashes VS on solution TODO parsing\" (#18697) at dotnet/roslyn","RelatedBody":"**Version Used**: Roslyn Nightly 2.3.0.6161309\r\n\r\n**Steps to Reproduce**:\r\n1. Open Roslyn.sln\r\n2. Wait\r\n\r\n**Actual:**\r\n\r\ndevenv crashes due to OOP\r\n```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.ObjectDisposedException: The semaphore has been disposed.\r\n   at System.Threading.SemaphoreSlim.CheckDispose()\r\n   at System.Threading.SemaphoreSlim.Release(Int32 releaseCount)\r\n   at StreamJsonRpc.DelimitedMessageHandler.<WriteAsync>d__23.MoveNext()\r\n   at StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__56`1.MoveNext()\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.<CreateAsync>d__6.MoveNext()\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientFactory.<CreateAsync>d__0.MoveNext()\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.<EnableAsync>d__18.MoveNext()\r\n   at Microsoft.CodeAnalysis.TodoComments.AbstractTodoCommentService.<GetTodoCommentsAsync>d__7.MoveNext()\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.TodoComments.TodoCommentIncrementalAnalyzer.<GetTodoCommentsAsync>d__8.MoveNext()\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.TodoComments.TodoCommentIncrementalAnalyzer.<AnalyzeSyntaxAsync>d__7.MoveNext()\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<>c__DisplayClass31_1`1.<<RunAnalyzersAsync>b__0>d.MoveNext()\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.<GetOrDefaultAsync>d__33`2.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<GetOrDefaultAsync>d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<GetOrDefaultAsync>d__33`2<System.__Canon,System.__Canon> ByRef)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3<System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<System.__Canon>>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+<RunAnalyzersAsync>d__31`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n"},{"Id":"6606385536","Type":"IssuesEvent","CreatedAt":"2017-09-18T23:47:46","Actor":"kentcb","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22184","RelatedDescription":"Opened issue \"csharp_prefer_simple_default_expression has faulty heuristic\" (#22184) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS Enterprise 2017 15.3.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add `csharp_prefer_simple_default_expression` to your .editorconfig with a value of `true:error`\r\n2. Add the statement `object i = default(int)` to your code.\r\n\r\n**Expected Behavior**:\r\n\r\nNo error should be triggered, since the target type (`object`) is more general than the type specified to `default`.\r\n\r\n**Actual Behavior**:\r\n\r\nAn error is triggered, suggesting the statement be simplified to:\r\n```C#\r\nobject i = default;\r\n```\r\nWhich obviously has different semantics.\r\n\r\nThis problem is particularly pertinent to the declaration of dependency or bindable properties:\r\n```C#\r\npublic static readonly BindableProperty SomeProperty = BindableProperty.Create(\r\n    nameof(Some),\r\n    typeof(Me),\r\n    defaultValue: default(int));\r\n```\r\nThis triggers the rule when it should not, since `defaultValue` is of type `object`."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"908763937100898304","CreatedAt":"2017-09-15T18:46:21+00:00","UserScreenname":"dotnet","Text":"Sneak peak at .NET Conf 2017 with @BethMassi and @runfaster2000 https://t.co/4TjjHQrUja","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":23,"RawContent":null},{"Id":"908559275990982656","CreatedAt":"2017-09-15T05:13:06+00:00","UserScreenname":"dotnet","Text":"Announcing SignalR for https://t.co/iOiV9qNspl Core 2.0 https://t.co/quJIZyhUdB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":342,"FavoriteCount":269,"RawContent":null},{"Id":"908126010171834368","CreatedAt":"2017-09-14T00:31:27+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 https://t.co/iOiV9qNspl and Configuration features https://t.co/6LCtKp9gfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":119,"FavoriteCount":74,"RawContent":null},{"Id":"907775139210715137","CreatedAt":"2017-09-13T01:17:13+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Security and Quality Rollup https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":26,"RawContent":null},{"Id":"906146140000841728","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"dotnet","Text":"Getting Started with Windows Containers https://t.co/UnRPIRZySp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":184,"FavoriteCount":108,"RawContent":null},{"Id":"903669794150506500","CreatedAt":"2017-09-01T17:24:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf - streaming live directly to your favorite device. Don't miss out.\n\nIs it on your calendar yet?… https://t.co/SK3CUqUkrs","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":123,"FavoriteCount":100,"RawContent":null},{"Id":"902942589053108224","CreatedAt":"2017-08-30T17:14:23+00:00","UserScreenname":"dotnet","Text":"Introducing .NET IL Linker https://t.co/ji9Uhlalw2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":301,"FavoriteCount":204,"RawContent":null},{"Id":"902581598876459009","CreatedAt":"2017-08-29T17:19:56+00:00","UserScreenname":"dotnet","Text":"The Week in .NET: Let's Encrypt WebApp Renewer, CodeCamp Seattle 2017, and links!\nhttps://t.co/Mssa964piA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":42,"RawContent":null}]}},"RunOn":"2017-09-19T05:30:15.8180142Z","RunDurationInMilliseconds":5934}