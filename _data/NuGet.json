{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10380518665","Type":"IssuesEvent","CreatedAt":"2019-09-09T23:49:56","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7535","RelatedDescription":"Opened issue \"MAS 2.5.2 - Pointer Cancellation\" (#7535) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380503396","Type":"IssuesEvent","CreatedAt":"2019-09-09T23:46:04","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7534","RelatedDescription":"Opened issue \"Implement WCAG 2.1\" (#7534) at NuGet/NuGetGallery","RelatedBody":"There are new accessibility standards that we need to abide by. We need to analyze our site to determine if there are any issues with our analysis of them.\n\nNote that I have not included the following standards, which do not apply to us:\n- MAS 2.1.4: Character Key Shortcuts\n- MAS 2.5.1: Pointer Gestures\n- MAS 2.5.2: Pointer Cancellation\n- MAS 2.5.4: Motion Actuation\n"},{"Id":"10380486419","Type":"IssuesEvent","CreatedAt":"2019-09-09T23:41:52","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7533","RelatedDescription":"Opened issue \"MAS 4.1.3 - Status Messages\" (#7533) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380449220","Type":"PullRequestEvent","CreatedAt":"2019-09-09T23:32:44","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7526","RelatedDescription":"Merged pull request \"Update CODEOWNERS file\" (#7526) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380434493","Type":"IssuesEvent","CreatedAt":"2019-09-09T23:29:14","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7532","RelatedDescription":"Opened issue \"MAS 2.5.3 - Label in Name\" (#7532) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380374032","Type":"IssuesEvent","CreatedAt":"2019-09-09T23:14:20","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7531","RelatedDescription":"Opened issue \"MAS 1.4.13 - Content on Hover or Focus\" (#7531) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380162291","Type":"PullRequestEvent","CreatedAt":"2019-09-09T22:27:07","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7530","RelatedDescription":"Opened pull request \"[SDL] Gallery.Core uses the SHA512 for copy checks. \" (#7530) at NuGet/NuGetGallery","RelatedBody":"Gallery.Core uses the SHA512 for copy checks. \r\n\r\nTowards fixing MD5 task:\r\nNuGet/Engineering#2377\r\nNuGet/Engineering#2672\r\n\r\nThe integration test has covered the tests for this change. "},{"Id":"10380148522","Type":"IssuesEvent","CreatedAt":"2019-09-09T22:24:17","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7529","RelatedDescription":"Opened issue \"MAS 1.4.12 Text spacing\" (#7529) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10380102395","Type":"IssuesEvent","CreatedAt":"2019-09-09T22:15:14","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7528","RelatedDescription":"Opened issue \"MAS 1.4.11 - Non-text contrast\" (#7528) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10379979870","Type":"IssuesEvent","CreatedAt":"2019-09-09T21:52:23","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7506","RelatedDescription":"Closed issue \"[Azure Search] Documents with null isExcludedByDefault are excluded from default search\" (#7506) at NuGet/NuGetGallery","RelatedBody":"This is not a big deal right now since the default search is dominated by documents initialized by `Db2AzureSearch`, but theoretically a new package ID can could be introduced by `Catalog2AzureSearch` that has a null `isExcludedByDefault` and will therefore never appear in the default search results.\r\n\r\n`Db2AzureSearch` is the only job that sets `isExcludedByDefault` so package IDs introduced (or relisted) after the index rebuild will never appear in the default search because the Azure Search services looks for `isExcludedByDefault eq false`. We can easily fix this by switching to `isExcludedByDefault ne true` to include both the `false` and the `null` case.\r\n\r\nThis can easily be seen here:\r\nhttps://azuresearch-usnc.dev.nugettest.org/search/query?sortBy=created-desc\r\n\r\nNotice the newest packages is on 2019-09-03. Whereas the newest is on 2019-09-05 here:\r\nhttps://azuresearch-usnc.dev.nugettest.org/search/query?sortBy=created-desc&q=e2e\r\n\r\n/cc @shishirx34 "},{"Id":"10379919403","Type":"PullRequestEvent","CreatedAt":"2019-09-09T21:41:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7522","RelatedDescription":"Merged pull request \"Add organization membership and transform actions use POST\" (#7522) at NuGet/NuGetGallery","RelatedBody":"The following actions are no longer performed with action links from emails. Instead the email links redirect to a web page where the user can click a form button (which does a POST) that does the same action as before.\r\n\r\n- Accept organization migration request\r\n  - Available to recipient\r\n- Reject organization migration request\r\n  - Available to recipient\r\n- Cancel organization migration request\r\n  - Available to sender\r\n- Accept organization membership request\r\n  - Available to recipient\r\n- Reject organization membership request\r\n  - Available to recipient\r\n\r\nTo make this work for cancelling migration requests, I had to modify the UI since there was no part of the website that allowed the user to cancel a migration.\r\n\r\nI also cleaned up the obfuscator tests since I wanted to be sure my new redirect endpoints were properly obfuscating usernames and tokens.\r\n\r\nI also added a better error message for the case when a user starts an organization migration and they log in as the wrong user during the migration flow. Previously it just showed a generic failure message.\r\n\r\nAddress https://github.com/NuGet/Engineering/issues/2679\r\n\r\n# Screenshots\r\n\r\n## Cancel migration\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64496836-f1adc700-d25d-11e9-9f75-d4fd548e3e97.png)\r\n\r\n## Accept or reject migration\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64496897-7f89b200-d25e-11e9-8abf-135de020b8fa.png)\r\n\r\n## Accept or reject membership\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64496913-ae078d00-d25e-11e9-8c6e-8713d3a9622e.png)\r\n\r\n"},{"Id":"10379883381","Type":"PullRequestEvent","CreatedAt":"2019-09-09T21:35:49","Actor":"nkolev92","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7527","RelatedDescription":"Closed pull request \"Fix codeowners bug, misstyped (miscopied) alias for @cristinamanum\" (#7527) at NuGet/NuGetGallery","RelatedBody":"🤕 "},{"Id":"10379877092","Type":"PullRequestEvent","CreatedAt":"2019-09-09T21:34:45","Actor":"nkolev92","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7527","RelatedDescription":"Opened pull request \"Fix codeowners bug, misstyped (miscopied) alias for @cristinamanum\" (#7527) at NuGet/NuGetGallery","RelatedBody":"🤕 "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10380641214","Type":"IssuesEvent","CreatedAt":"2019-09-10T00:22:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8565","RelatedDescription":"Opened issue \"Project Dependencies of ProjectReferences marked as PrivateAssets should not be included in the lock file up to date check\" (#8565) at NuGet/Home","RelatedBody":"[8493.zip](https://github.com/NuGet/Home/files/3593090/8493.zip)\r\n\r\nExtract the above project, run dotnet restore --locked-mode\r\n\r\nMotivation from https://github.com/NuGet/Home/issues/8493. \r\n\r\nIssue being hit by @bddckr \r\n\r\nfyi @tebeco Not your specific issue, but one that the discussion produced. \r\n\r\nI want to keep this issue focused to the problem at hand. \r\n\r\nSpecifically refer to https://github.com/NuGet/Home/issues/8493#issuecomment-526537492. \r\n\r\nNote that this has never worked correctly, so not a regression (in 4.9, it simply didn't validate it)\r\n\r\nThe fix is: https://github.com/NuGet/NuGet.Client/blob/638f34578d2221abc1259286ce2d4c132600cea7/src/NuGet.Core/NuGet.ProjectModel/ProjectLockFile/PackagesLockFileUtilities.cs#L168\r\n\r\nWe should strip out the PrivateAssets=All project references from `p2pSpecProjectRestoreMetadataFrameworkInfo.ProjectReferences`. \r\n\r\nfyi @rrelyea  "},{"Id":"10379788263","Type":"IssuesEvent","CreatedAt":"2019-09-09T21:20:36","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8516","RelatedDescription":"Closed issue \"Solution PM UI - Deprecation warning icon has issues\" (#8516) at NuGet/Home","RelatedBody":"![image](https://user-images.githubusercontent.com/2878341/63895701-bc26f500-c9a4-11e9-91c3-08f27f91c915.png)\r\n\r\n\r\n1. Create a solution with 1 project.\r\n1. Install a deprecated package.\r\n1. Open the solution level PM UI\r\n1. Go to the installed tab.\r\n\r\nYou will see that the installed label has a warning icon, but in the packages list you cannot distinguish visually which package is deprecated. This is an issue. \r\n\r\nNote that this is not an issue on the project level PM UI. \r\n\r\n![image](https://user-images.githubusercontent.com/2878341/63895798-0c9e5280-c9a5-11e9-9eef-2024bebb9fe5.png)\r\n\r\nThis leads to an underwhelming experience, that I believe we should fix before shipping. \r\n\r\n//cc @rrelyea @anangaur @xavierdecoster @scottbommarito @NuGet/nuget-client "},{"Id":"10379786786","Type":"IssuesEvent","CreatedAt":"2019-09-09T21:20:23","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8541","RelatedDescription":"Closed issue \"Deprecation info is not visible, by default, on installed tab\" (#8541) at NuGet/Home","RelatedBody":"Feature: Deprecation\r\n\r\nThe idea of the feature on VS was to show the deprecation info as warning ⚠️ on the INSTALLED tab. Clicking on this tab leads to the packages listed and are deprecated using the warning ⚠️ icon on package’s installed version. Clicking on this reveals the warning ⚠️ icon and deprecation info on the details pane. Essentially the warning ⚠️ icons leads to the issue details.\r\n\r\nThis doesn’t happen today because the installed tab shows the package details of the latest version by default and not if the one that’s installed.\r\n\r\nProposed fix, reviewed by UX:\r\n* There is no need to show both the installed  version and the latest version on the installed tab. We can show just the one installed:\r\n\r\nVersion: \\<Installed version in the drop down> UnistallButton\r\n\r\nWill update the proposed UX soon."},{"Id":"10378796011","Type":"IssuesEvent","CreatedAt":"2019-09-09T18:58:15","Actor":"karann-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8437","RelatedDescription":"Closed issue \"Docs for the deterministic pack switch\" (#8437) at NuGet/Home","RelatedBody":""},{"Id":"10378251654","Type":"IssuesEvent","CreatedAt":"2019-09-09T17:42:37","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8536","RelatedDescription":"Closed issue \"Publish release notes for 5.3\" (#8536) at NuGet/Home","RelatedBody":"Likely should ship release notes for 5.3 when preview3 ships.\nFinalize soon."},{"Id":"10378022155","Type":"IssuesEvent","CreatedAt":"2019-09-09T17:10:17","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8564","RelatedDescription":"Opened issue \"[Centrally managing NuGet packages and versions] Prototype - dotnet.exe commands\" (#8564) at NuGet/Home","RelatedBody":"Understand what is needed for \n\n| Command | Status | Notes |\n| --- | --- | --- |\n| add | | |\n| add --version | | |\n| remove | | |\n| consolidate | | |\n| consolidate --dry-run | | |\nSpec : https://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions"},{"Id":"10378018476","Type":"IssuesEvent","CreatedAt":"2019-09-09T17:09:47","Actor":"alexgav","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8560","RelatedDescription":"Closed issue \"How to suppress error NU1202 'Package is not compatible with netcoreapp'\" (#8560) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet.exe \r\n\r\nNuGet version (x.x.x.xxx): 2.8.7.0 on Linux\r\n\r\ndotnet.exe --version (if appropriate): 2.2.107\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Ubuntu 18.04.3 LTS\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a netcoreapp2.2 reference netframework472 package. If you have permissions, you can use my app \r\n\r\n2. Try to run dotnet restore on Linux \r\n\r\n\r\nHere's the thing. I'm getting *warning* NU1701 when restoring this on Windows, and I am able to easily suppress it. I'm getting *error* NU1202 for the same exact package reference when trying to restore that project on Linux, and I can't figure out a way to suppress that error.\r\n\r\nI know the reference netframework472 code runs fine on netcore, including on Linux, as I tested it without using <PackageReference ...> first. So the issue here really is \"how do I suppress that error?\". Also, why am I getting a different error on linux than warning on Windows for the same exact package? \r\n\r\nHere's my sample package reference\r\n\r\n`<PackageReference Include=\"Microsoft.VisualStudio.Language.StandardClassification\" Version=\"$(CoreEditorAssemblyVersion)\" NoWarn=\"NU1701\" />`\r\n\r\nBTW, I'm MSFT employee, alias alexgav, so feel free to ping me internally.\r\n\r\nThanks,\r\nAlex"},{"Id":"10376643222","Type":"IssuesEvent","CreatedAt":"2019-09-09T14:27:29","Actor":"sae42","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8563","RelatedDescription":"Opened issue \"VSLangProj/PackageReferences, Package Restore with .NET Core 3.0 and FrameworkReferences\" (#8563) at NuGet/Home","RelatedBody":"\r\n**Visual Studio project system and Framework References for NuGet client**\r\n\r\nI've updated to using Visual Studio 2019 16.3 Preview 3 with .NET Core Preview 9. As a third-party language vendor I have an implementation of VSLangProj150/PackageReferences. It is unclear to me whether the implementation of get_InstalledPackages should include the new FrameworkReference element or not.\r\n\r\nBefore Preview 9 I could return the implicit Microsoft.NETCore.App package. However, after installing preview 9 I get an error when executing a NuGet restore (through the VS interface, not from MSBuild):\r\n\r\n... (1,1-1) : error NU1102 : Unable to find package Microsoft.NETCore.App with version (>= 3.0.0-preview9-19423-09)\r\n... (1,1-1) : error NU1102 : - Found 74 version(s) in nuget.org [ Nearest version: 3.0.0-preview8-28405-07 ]\r\n... : error NU1102 : - Found 0 version(s) in Microsoft Visual Studio Offline Packages\r\n\r\nCan someone give guidance or clarity about how a project system should return Framework References to NuGet client in this scenario? I can just stop returning this and the problem goes away, but I assume at some point there will be third party Framework References that would need to be restored.\r\n\r\n\r\nOS version:\r\nWindows 10 1903\r\n"},{"Id":"10374505921","Type":"IssuesEvent","CreatedAt":"2019-09-09T09:45:22","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8562","RelatedDescription":"Opened issue \"[Test Failure]The “Update” button is still clickable in “Browse” tab on PM UI when the package with latest version has been installed\" (#8562) at NuGet/Home","RelatedBody":"## Details about Problem\r\nVS Version: D16.3 29307.09\r\nNuGet Version: Release-5.3.x\\5.3.0.6231\r\nOS Version: Windows-10-Enterprise-19H1-04-05-2019.\r\n## Detailed repro steps \r\n1. Launch Visual Studio 2019.\r\n2. Create a C# Console Application (.Net Core) project and open PM UI in Solution Explorer window.\r\n3. Install a package (e.g. Newtonsoft.json) with latest version into the project.\r\n## Expected\r\nThe “Update” button should be gray in browse tab on PM UI right panel as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/64520707-48340780-d329-11e9-8b8a-f26ba4221b4f.png)\r\n## Actual\r\nThe “Update” button still is clickable in “Browse” tab on PM UI when the package with latest version has been installed as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/64520762-5f72f500-d329-11e9-9407-a0aa0cbb4d97.png)\r\n## Notes\r\n1. The issue does not repro on D16.3\\29305.141 + NuGet Client Release-5.3.x\\5.3.0.6224.\r\n2. When switching to the “Installed” tab, the “Update” button is gray, and then switch to the “Browse” tab, the “Update” button turns gray.\r\n\r\n\r\n"},{"Id":"10371708848","Type":"IssuesEvent","CreatedAt":"2019-09-08T22:14:16","Actor":"centreboard","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8561","RelatedDescription":"Opened issue \"Rerunning 'dotnet add package ...' creates duplicate in non-SDK\" (#8561) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (dotnet.exe):\r\n\r\ndotnet.exe --version:\r\nBoth 2.2.103 and 3.0.100-preview9-014004\r\n\r\nOS version:\r\nwin10 1903\r\n\r\nWorked before? If so, with which NuGet version:\r\nWorks in SDK projects and through Rider and VS UI\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. For a non-SDK project using PackageReferences and containing\r\n`<PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.1\" />`\r\n\r\n2. Run `dotnet add package Newtonsoft.Json` to update to 12.0.2\r\n\r\n3.  Project now contains a new entry instead of updating the reference\r\n```\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />\r\n```\r\n4. Run `dotnet add package Newtonsoft.Json` again, another entry is added\r\n```\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />\r\n```\r\n\r\n## Other suggested things\r\n\r\n### Sample non-SDK Project\r\n[ClassLibrary1.zip](https://github.com/NuGet/Home/files/3588111/ClassLibrary1.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-10T05:30:44.0314144Z","RunDurationInMilliseconds":2941}