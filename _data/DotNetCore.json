{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/07/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3734","PublishedOn":"2019-01-29T00:30:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are getting closer to the final version now! This release includes several accessibility, performance and reliability fixes across the major framework libraries. We will continue to stabilize this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/announcing-net-framework-4-8-early-access-build-3734/","RawContent":null},{"Title":"Help us plan the future of .NET and Big Data","PublishedOn":"2019-01-28T22:05:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We’re currently looking into how we can make .NET great for Big Data scenarios.    Please fill out the survey below and help shape how we can improve .NET for Big Data by sharing your experiences,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/help-us-plan-the-future-of-net-and-big-data/","RawContent":null},{"Title":"Debugging .NET Apps with Time Travel Debugging (TTD)","PublishedOn":"2019-01-25T19:32:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"When you are debugging an application, there are many tools and techniques you can use, like logs, memory dumps and Event Tracing for Windows (ETW). In this post, we will talk about Time Travel...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/25/debugging-net-apps-with-time-travel-debugging-ttd/","RawContent":null},{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2019 Preview 2","PublishedOn":"2019-01-24T15:30:31+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Another preview of Visual Studio 2019, another update on the cool stuff going into it! We&#8217;re pleased to announce some updates to the .NET Core tools for Visual Studio 2019. You can try these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-core-tooling-update-for-visual-studio-2019-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9036891501","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:11:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22480","RelatedDescription":"Merged pull request \"Move Array's SZGenericArrayEnumerator to shared partition\" (#22480) at dotnet/coreclr","RelatedBody":""},{"Id":"9036890399","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:10:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22485","RelatedDescription":"Merged pull request \"Delete EnvironmentAugments\" (#22485) at dotnet/coreclr","RelatedBody":""},{"Id":"9036876227","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:01:03","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22498","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#22498) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9036966535","Type":"IssuesEvent","CreatedAt":"2019-02-09T05:04:59","Actor":"mairaw","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10744","RelatedDescription":"Opened issue \"dotnet clean also supports solution files\" (#10744) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet clean --help` says that the argument is a project but it seems that the command accepts solution as well.\r\nRunning on a folder with no solution or project gives the following error message:\r\n`MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.`\r\n\r\n## Expected  behavior\r\n`dotnet clean --help` would say it supports solution.\r\n\r\n## Actual behavior\r\n`dotnet clean --help` says it supports project files.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9036959667","Type":"IssuesEvent","CreatedAt":"2019-02-09T05:00:17","Actor":"mairaw","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10743","RelatedDescription":"Opened issue \"dotnet migrate --help says \"Migration failed.\" before printing help\" (#10743) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet migrate --help\r\n\r\n## Expected  behavior\r\nOnly help would be displayed.\r\n\r\n## Actual behavior\r\nMessage \"Migration failed.\" + help is displayed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"},{"Id":"9036915491","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:28:55","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10742","RelatedDescription":"Opened pull request \"Merge release/2.2.2xxto release/3.0.1xx 2\" (#10742) at dotnet/cli","RelatedBody":""},{"Id":"9036748075","Type":"PullRequestEvent","CreatedAt":"2019-02-09T02:40:23","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10741","RelatedDescription":"Merged pull request \"Update to Sdk.2.1.600-preview-63808-04.\" (#10741) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/10628"},{"Id":"9036533207","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:55:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10735","RelatedDescription":"Merged pull request \"MSBuild 16.0.438 (2.1.6xx)\" (#10735) at dotnet/cli","RelatedBody":"Corresponding internal VS PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/163672"},{"Id":"9036515320","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:48:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10740","RelatedDescription":"Merged pull request \"Updating branding for preview3 and adding a build trigger to the release branch\" (#10740) at dotnet/cli","RelatedBody":"Updating branding for preview3 and adding a build trigger to the release branch.\r\n"},{"Id":"9036514234","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:48:12","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10739","RelatedDescription":"Merged pull request \"Updating branding to preview4\" (#10739) at dotnet/cli","RelatedBody":""},{"Id":"9036462797","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:28:47","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10741","RelatedDescription":"Opened pull request \"Update to Sdk.2.1.600-preview-63808-04.\" (#10741) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/10628"},{"Id":"9036419920","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:13:35","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10733","RelatedDescription":"Merged pull request \"Fix typo: s/Interective/Interactive/\" (#10733) at dotnet/cli","RelatedBody":"NOTE: I will backport this to release/2.1.6xx along with the corresponding loc handback\r\n\r\nFix #10728 \r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8988505913","Type":"IssuesEvent","CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Opened issue \"NETStandard, T4 templates, and System.Numerics.VEctors\" (#1064) at dotnet/standard","RelatedBody":"W have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: <TargetFrameworks>netstandard2.0;net46;uap10.0.14393</TargetFrameworks>\r\nThe assembly to reflect on is loaded with <#@ assembly name=…\r\nIf the first target in the list is net46 or uap, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: <PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" />\r\nOur prrevious workaround was to do the build-time code generation on net46 or uap, but we want to move to netstandard only builds soon. How can this error be dealt with?\r\n"},{"Id":"8987877444","Type":"IssuesEvent","CreatedAt":"2019-01-31T19:03:58","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/926","RelatedDescription":"Closed issue \"Track .NET Core similar to other platforms\" (#926) at dotnet/standard","RelatedBody":"@weshaggard started this work in his [wesh/netcoreapp_compat](https://github.com/dotnet/standard/tree/wesh/netcoreapp_compat) branch."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9036943816","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:49:23","Actor":"slozier","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35199","RelatedDescription":"Opened pull request \"SBCSCodePageEncoding: Don't call DecoderFallback.CreateFallbackBuffer until needed\" (#35199) at dotnet/corefx","RelatedBody":""},{"Id":"9036919300","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:31:49","Actor":"slozier","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/35198","RelatedDescription":"Closed pull request \"Remove unnecessary instantiation in SBCSCodePageEncoding\" (#35198) at dotnet/corefx","RelatedBody":""},{"Id":"9036908668","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:23:56","Actor":"slozier","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35198","RelatedDescription":"Opened pull request \"Remove unnecessary instantiation in SBCSCodePageEncoding\" (#35198) at dotnet/corefx","RelatedBody":""},{"Id":"9036897402","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:15:28","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35192","RelatedDescription":"Merged pull request \"Remove Fedora from helix test queues to unblock PRs\" (#35192) at dotnet/corefx","RelatedBody":"Lets remove the fedora helix queues hitting: https://github.com/dotnet/core-eng/issues/5204 since there has been no response from the eng team and to unblock PRs until we get a response. Specially during the weekend as we don't expect a response in the meantime. \r\n\r\ncc: @stephentoub @danmosemsft "},{"Id":"9036892956","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:12:17","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35197","RelatedDescription":"Opened pull request \"Support building corefx in VS2019\" (#35197) at dotnet/corefx","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/34613\r\nFixes: https://github.com/dotnet/corefx/issues/34413\r\n\r\nCMake 3.14.0-rc1 is now out the door and can be downloaded from: https://cmake.org/download/\r\n\r\nThis version now supports the new toolset version which is `142` and now contains a VS2019 project generator. Note that since in VS2019 Preview1 the toolset version was still `141` it is required to have VS2019 Preview2 for it to work correctly.\r\n\r\ncc: @stephentoub @ViktorHofer @danmosemsft @ahsonkhan  @ericstj "},{"Id":"9036892302","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:11:53","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35196","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert,coreclr\" (#35196) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar"},{"Id":"9036872279","Type":"PullRequestEvent","CreatedAt":"2019-02-09T03:58:26","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35183","RelatedDescription":"Merged pull request \"Move EventCounter to shared CoreLib\" (#35183) at dotnet/corefx","RelatedBody":"This needs to be done to complete https://github.com/dotnet/coreclr/issues/20372. Moving EventCounter to the shared CoreLib portion in CoreFX first as Jan suggested in https://github.com/dotnet/coreclr/pull/22475. "},{"Id":"9036730143","Type":"IssuesEvent","CreatedAt":"2019-02-09T02:29:51","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35195","RelatedDescription":"Opened issue \"HTTP2: SocketsHttpHandler doesn't downgrade to HTTP/1.1 during Windows authentication\" (#35195) at dotnet/corefx","RelatedBody":"When SocketsHttpHandler connects to a server using HTTP/2, it is unable to downgrade to HTTP/1.1 when the server requests Windows authentication (Negotiate or NTLM).  The net result is that 401 is returned to the client without even trying to reconnect (with HTTP/1.1) and send credentials.\r\n\r\n<repro will be posted later>\r\n"},{"Id":"9036727783","Type":"PullRequestEvent","CreatedAt":"2019-02-09T02:28:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35194","RelatedDescription":"Opened pull request \"[release/2.2] Fix BigInteger parsing of substring span (#35185)\" (#35194) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/35185 to release/2.2."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9036989153","Type":"IssuesEvent","CreatedAt":"2019-02-09T05:21:43","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33091","RelatedDescription":"Closed issue \"Proposal: Parallel async\" (#33091) at dotnet/roslyn","RelatedBody":"Typical function\r\n\r\n```csharp\r\nasync Task<Result> MyFunc(){\r\nvar result1 = await getResult1();\r\nvar result2 = await getResult2();\r\nvar result3 = await getResult3(result1);\r\nreturn CombineResult(result2, result3);\r\n}\r\n```\r\n\r\nit might be preprocessed to something like this. \r\n\r\n```csharp\r\nasync Task<Result> MyFunc(){\r\nvar __result1 = getResult1();   //1\r\nvar result1 = await __result1;  \r\nvar __result2 = getResult2(); // 2\r\nvar result2 = await __result2;\r\nvar __result3 = getResult3(result1); //3\r\nvar result3 = await __result3;\r\nreturn CombineResult(result2, result3);\r\n}\r\n```\r\n\r\nsuggestion is to make those function calls float up during preprocessing, until there is a curly bracket found or an assignment to variable used as a parameter to function call\r\n\r\n```csharp\r\nasync Task<Result>MyFunc(){\r\nvar __result1 = getResult1(); // 1\r\nvar __result2 = getResult2(); // 2\r\nvar result1 = await __result1;\r\nvar __result3 = getResult3(result1); // 3\r\nvar result2 = await __result2;\r\nvar result3 = await __result3;\r\nreturn CombineResult(result2, result3);\r\n}\r\n```\r\n\r\nHere 1 and 2 will automatically run in parallel, 3 will execute once 1 is finished.\r\n\r\nThis would be a breaking change, so new keyword might be used. Did not think it all through."},{"Id":"9036889769","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:10:17","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32845","RelatedDescription":"Merged pull request \"Performance improvements for formatting analyzer\" (#32845) at dotnet/roslyn","RelatedBody":"Recommended review strategy: review each commit.\r\n\r\nOn request I can easily break up the pull request to simplify review of individual changes, but keep in mind nearly all of the *observable* performance improvement comes from the final changes in the PR.\r\n\r\nTimes prior to this change:\r\n\r\n* 46150ms\r\n* 46215ms\r\n* 47086ms\r\n\r\nTimes with `IFormattingRule` replaced with `AbstractFormattingRule` (eliminate interface dispatch):\r\n\r\n* 46215ms\r\n* 45208ms\r\n* 45355ms\r\n\r\n<details><summary>Times with virtual dispatch and elimination of <tt>ThreadLocal&lt;List&lt;T&gt;&gt;</tt>:</summary>\r\n\r\nMoved to #32952 \r\n\r\n* 45618ms\r\n* 44991ms\r\n* 46964ms\r\n\r\n</details>\r\n\r\n<details><summary>Times with above plus <tt>IndentationOptions</tt>:</summary>\r\n\r\nChange is not included in this pull request.\r\n\r\n* 48296ms\r\n* 45684ms\r\n* 44475ms\r\n\r\n</details>\r\n\r\n<br/>\r\n\r\nTimes with generics expanded to per-operation non-generic types.\r\n\r\n* 40041ms\r\n* 40309ms\r\n* 41543ms"},{"Id":"9036675918","Type":"PullRequestEvent","CreatedAt":"2019-02-09T02:00:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33248","RelatedDescription":"Merged pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33248) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9036643067","Type":"PullRequestEvent","CreatedAt":"2019-02-09T01:43:32","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33269","RelatedDescription":"Opened pull request \"Completion List is broken for #r and #load in C# Interactive Window\" (#33269) at dotnet/roslyn","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781898"},{"Id":"9036609650","Type":"IssuesEvent","CreatedAt":"2019-02-09T01:27:36","Actor":"kendrahavens","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33268","RelatedDescription":"Opened issue \"Include naming convention when exporting from Tools > Options to .editorconfig\" (#33268) at dotnet/roslyn","RelatedBody":"Originally submitted on [developer community](https://developercommunity.visualstudio.com/content/idea/411815/include-also-naming-convention-when-export-to-edit.html).\r\n\r\n**Version Used**: \r\nVisual Studio 2019 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Create a naming rule in editor settings.\r\n2. Export code style settings to editorconfig\r\n\r\n**Expected Behavior**:\r\nEditorconfig has generated naming rule that follows the [dotnet_naming](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions) conventions.\r\n\r\n**Actual Behavior**:\r\nEditorconfig does not export naming rules.\r\n"},{"Id":"9036514123","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:48:09","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33267","RelatedDescription":"Opened pull request \"Use TaggedTextExtension method for getting ClassificationTypeName\" (#33267) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/33266\r\n\r\n@heejaechang "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9036892470","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:11:59","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6978","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6978) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9036889286","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:10:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6977","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#6977) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang"},{"Id":"9036876441","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:01:11","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6977","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6977) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"9036863865","Type":"PullRequestEvent","CreatedAt":"2019-02-09T03:52:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6976","RelatedDescription":"Opened pull request \"Remove workaround for OSX detection\" (#6976) at dotnet/corert","RelatedBody":"Fixes #6975"},{"Id":"9036845019","Type":"PullRequestEvent","CreatedAt":"2019-02-09T03:40:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6974","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6974) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d"},{"Id":"9036808093","Type":"IssuesEvent","CreatedAt":"2019-02-09T03:17:05","Actor":"miramaris","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6975","RelatedDescription":"Opened issue \"TargetOS incorrectly set to Unix on macOS\" (#6975) at dotnet/corert","RelatedBody":"When attempting to build on macOS I get the following error when running `dotnet publish -r osx-x64 -c release`:\r\n\r\n```\r\n/Users/anka/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27409-01/build/Microsoft.NETCore.Native.Unix.props(103,5): error : Platform linker ('clang-3.9') not found. Try installing clang-3.9 or the appropriate package for your platform to resolve the problem.\r\n```\r\n\r\nThis is weird because if I'm reading [this line](https://github.com/dotnet/corert/blob/69d7b8e7a63cebdd6a44e0f047a6574855f3ac8f/src/BuildIntegration/Microsoft.NETCore.Native.Unix.props#L103) correctly, that particular error message should only occur on Linux, not macOS (which uses `clang` as opposed to `clang-3.9`).\r\n\r\nHere's the output from `dotnet --info` just in case that's helpful.\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.103/\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n.NET Core SDKs installed:\r\n  2.2.103 [/usr/local/share/dotnet/sdk]\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n"},{"Id":"9036342741","Type":"PullRequestEvent","CreatedAt":"2019-02-08T23:48:09","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6974","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6974) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9035303081","Type":"PullRequestEvent","CreatedAt":"2019-02-08T20:02:11","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6973","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6973) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9034315704","Type":"PullRequestEvent","CreatedAt":"2019-02-08T17:08:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6967","RelatedDescription":"Closed pull request \"Update corert for shared GCSettings\" (#6967) at dotnet/corert","RelatedBody":"To be cherry-picked into the mirror of https://github.com/dotnet/coreclr/pull/22483"},{"Id":"9034255388","Type":"PullRequestEvent","CreatedAt":"2019-02-08T16:59:33","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6973","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6973) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9033917703","Type":"PullRequestEvent","CreatedAt":"2019-02-08T16:10:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6972","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6972) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @marek-safar"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9036911180","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:25:44","Actor":"kouvel","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2925","RelatedDescription":"Opened pull request \"Expose option to disable tier 0 JIT for configuring from a project file\" (#2925) at dotnet/sdk","RelatedBody":"- For scenarios that don't mind giving up some startup time (but not too much), it may be a reasonable option when it is desirable to avoid spending two JIT cycles on methods\r\n- I'd like to use this mode as the default for microbenchmarks in the performance repo and the most convenient way of doing so would be to have a way to specify it in a project file, to keep benchmarks easily runnable with `dotnet run`. It serves as a soft workaround to https://github.com/dotnet/coreclr/issues/19751 while still allowing perf improvements from tiering to show when R2R is being used, in benchmarks that could help to get more representative numbers."},{"Id":"9036908751","Type":"PullRequestEvent","CreatedAt":"2019-02-09T04:24:03","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2917","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.0.0-rtm.5821 into sdk\" (#2917) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.0.0-rtm.5821 into sdk release/2.2.2xx branch"},{"Id":"9036637017","Type":"PullRequestEvent","CreatedAt":"2019-02-09T01:40:39","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2922","RelatedDescription":"Merged pull request \"Updating branding for preview3 and adding a build trigger to the release branch.\" (#2922) at dotnet/sdk","RelatedBody":""},{"Id":"9036423412","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:14:47","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2923","RelatedDescription":"Merged pull request \"Update branding to preview4\" (#2923) at dotnet/sdk","RelatedBody":""},{"Id":"9036384187","Type":"PullRequestEvent","CreatedAt":"2019-02-09T00:01:26","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2924","RelatedDescription":"Opened pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#2924) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"open","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Open PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"open","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Open PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"407958761","IsPullRequest":true,"CreatedAt":"2019-02-09T04:11:22","Actor":"marek-safar","Number":"22480","RawContent":null,"Title":"Move Array's SZGenericArrayEnumerator to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22480","RelatedDescription":"Closed or merged PR \"Move Array's SZGenericArrayEnumerator to shared partition\" (#22480)"},{"Id":"408015074","IsPullRequest":true,"CreatedAt":"2019-02-09T04:10:39","Actor":"jkotas","Number":"22485","RawContent":null,"Title":"Delete EnvironmentAugments","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22485","RelatedDescription":"Closed or merged PR \"Delete EnvironmentAugments\" (#22485)"},{"Id":"408395512","IsPullRequest":true,"CreatedAt":"2019-02-09T04:01:02","Actor":"Dotnet-GitSync-Bot","Number":"22498","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/coreclr/pull/22498","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#22498)"},{"Id":"408381583","IsPullRequest":true,"CreatedAt":"2019-02-09T01:22:32","Actor":"grant-d","Number":"22497","RawContent":null,"Title":"Perf: Consolidate implementation of LeadingZeroCount","State":"open","Body":"There are several implementations of `LeadingZeroCount ` in the stack, with differing or branch-heavy implementations.\r\nThis PR consolidates them into a central implementation that uses intrinsics & optimized software fallbacks.\r\n\r\nRelated to https://github.com/dotnet/coreclr/pull/22333\r\n\r\nAll methods pass units.","Url":"https://github.com/dotnet/coreclr/pull/22497","RelatedDescription":"Open PR \"Perf: Consolidate implementation of LeadingZeroCount\" (#22497)"},{"Id":"408373156","IsPullRequest":true,"CreatedAt":"2019-02-09T00:25:02","Actor":"RussKeldorph","Number":"22496","RawContent":null,"Title":"Move runincontext to src/tools","State":"open","Body":"This SDK-style project is causing problems on some machines with VS\r\ninstalls that can't build it.  For now, move it to a place where it\r\ndoesn't build with the tests.","Url":"https://github.com/dotnet/coreclr/pull/22496","RelatedDescription":"Open PR \"Move runincontext to src/tools\" (#22496)"},{"Id":"408287565","IsPullRequest":true,"CreatedAt":"2019-02-09T00:23:37","Actor":"RussKeldorph","Number":"22492","RawContent":null,"Title":"[DO NOT MERGE] Dummy change","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22492","RelatedDescription":"Closed or merged PR \"[DO NOT MERGE] Dummy change\" (#22492)"},{"Id":"408372420","IsPullRequest":true,"CreatedAt":"2019-02-09T00:19:47","Actor":"jashook","Number":"22495","RawContent":null,"Title":"Enable arm64 linux musl builds","State":"open","Body":"Note that -clang5.0 is required to be passed.","Url":"https://github.com/dotnet/coreclr/pull/22495","RelatedDescription":"Open PR \"Enable arm64 linux musl builds\" (#22495)"},{"Id":"408344684","IsPullRequest":true,"CreatedAt":"2019-02-08T22:15:04","Actor":"janvorli","Number":"22494","RawContent":null,"Title":"Fix Assembly::Load context for collectible assemblies","State":"open","Body":"This change fixes a problem when Assembly::Load is called from an\r\nassembly in a collectible AssemblyLoadContext. In that case, we ended up\r\nloading it into the default context instead of the context of the\r\ncalling assembly.\r\n\r\nI have also bumped into a couple of functions that are not used anymore, so I have removed them.","Url":"https://github.com/dotnet/coreclr/pull/22494","RelatedDescription":"Open PR \"Fix Assembly::Load context for collectible assemblies\" (#22494)"},{"Id":"408333592","IsPullRequest":true,"CreatedAt":"2019-02-08T21:37:36","Actor":"jashook","Number":"22493","RawContent":null,"Title":"Correct assert to add R8 as a potential valid register.","State":"open","Body":"This fixes asserts that use JMP and varargs on Arm64.","Url":"https://github.com/dotnet/coreclr/pull/22493","RelatedDescription":"Open PR \"Correct assert to add R8 as a potential valid register.\" (#22493)"},{"Id":"408283268","IsPullRequest":true,"CreatedAt":"2019-02-08T19:06:52","Actor":"RussKeldorph","Number":"22491","RawContent":null,"Title":"Re-point Jenkins to new Ubuntu ARM64 queue","State":"closed","Body":"Reverts dotnet/coreclr#22347","Url":"https://github.com/dotnet/coreclr/pull/22491","RelatedDescription":"Closed or merged PR \"Re-point Jenkins to new Ubuntu ARM64 queue\" (#22491)"},{"Id":"408282680","IsPullRequest":true,"CreatedAt":"2019-02-08T19:02:17","Actor":"dotnet-maestro-bot","Number":"22490","RawContent":null,"Title":"Update BuildTools, CoreFx, CoreSetup, IbcData, PgoData to preview1-03706-01, preview.19108.6, preview-27408-3, master-20190208.1, master-20190208.1, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22490","RelatedDescription":"Open PR \"Update BuildTools, CoreFx, CoreSetup, IbcData, PgoData to preview1-03706-01, preview.19108.6, preview-27408-3, master-20190208.1, master-20190208.1, respectively (master)\" (#22490)"},{"Id":"407971606","IsPullRequest":false,"CreatedAt":"2019-02-08T17:07:52","Actor":"omariom","Number":"22482","RawContent":null,"Title":"JIT sometimes doesn't inline calls via initonly static ref typed fields.","State":"closed","Body":"Thanks to [this change ](https://github.com/dotnet/coreclr/pull/20886) JIT can now devirtualize and inline   virtual calls when it finds that a static readonly field has already been intialized with a reference to an instance of a sealed derived class. \r\nLike here\r\n\r\n``` C#\r\nprivate static readonly Comparer<T> cmpr = CreateComparer();\r\n\r\nprivate void HappenedToBeJittedFirst(T x, T y) => eqCmpr.Equals(x, y);\r\n\r\nprivate void LuckyOne(T x, T y) =>  eqCmpr.Equals(x, y);\r\n```\r\n\r\nBut if the field is hidden behind a get only property, JIT inlines the getter and devirtualizes the call but fails to inline it.\r\n\r\nThe repro:\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static int CompareInts(int x, int y) => ComparerT<int>.Default.Compare(x, y);\r\n\r\nclass ComparerT<T>\r\n{\r\n    public static readonly Comparer<T> Default = CreateDefaultComparer();\r\n    //public static Comparer<T> Default { get; } = CreateDefaultComparer();\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static Comparer<T> CreateDefaultComparer()\r\n    {\r\n        return (Comparer<T>)Activator.CreateInstance(typeof(MyGenericComparer<>).MakeGenericType(typeof(T)));\r\n    }\r\n}\r\n\r\nsealed partial class MyGenericComparer<T> : Comparer<T> where T : IComparable<T>\r\n{\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override int Compare(T x, T y)\r\n    {\r\n        if (x != null)\r\n        {\r\n            if (y != null) return x.CompareTo(y);\r\n            return 1;\r\n        }\r\n        if (y != null) return -1;\r\n        return 0;\r\n    }\r\n\r\n    public override bool Equals(object obj) => obj != null && GetType() == obj.GetType();\r\n    public override int GetHashCode() => GetType().GetHashCode();\r\n}\r\n```\r\n\r\nThis is `CompareInts` when it uses the field. `ComparerT<int>.Default.Compare(x, y)` is replaced with\r\nthe body of `int.CompareTo`:\r\n```ASM\r\n       0F1F440000           nop      \r\n\r\nG_M49158_IG02:\r\n       8BC1                 mov      eax, ecx\r\n       3BC2                 cmp      eax, edx\r\n       7D07                 jge      SHORT G_M49158_IG03\r\n       B9FFFFFFFF           mov      ecx, -1\r\n       EB0D                 jmp      SHORT G_M49158_IG05\r\n\r\nG_M49158_IG03:\r\n       3BC2                 cmp      eax, edx\r\n       7E07                 jle      SHORT G_M49158_IG04\r\n       B901000000           mov      ecx, 1\r\n       EB02                 jmp      SHORT G_M49158_IG05\r\n\r\nG_M49158_IG04:\r\n       33C9                 xor      ecx, ecx\r\n\r\nG_M49158_IG05:\r\n       8BC1                 mov      eax, ecx\r\n\r\nG_M49158_IG06:\r\n       C3                   ret \r\n```\r\n\r\nWhen `Default` is a property. The call is static, but not inlined.\r\n```ASM\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop      \r\n       448BC1               mov      r8d, ecx\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M49157_IG02:\r\n       48B9B02BCB3047010000 mov      rcx, 0x14730CB2BB0\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       418BD0               mov      edx, r8d\r\n       448BC0               mov      r8d, eax\r\n       E8DEFDFFFF           call     MyGenericComparer`1:Compare(int,int):int:this\r\n       90                   nop      \r\n\r\nG_M49157_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret \r\n```\r\n\r\nSeems like attempt to inline devirtualized call happens too late.\r\n\r\n@AndyAyersMS, is it a known issue?","Url":"https://github.com/dotnet/coreclr/issues/22482","RelatedDescription":"Closed issue \"JIT sometimes doesn't inline calls via initonly static ref typed fields.\" (#22482)"},{"Id":"407990717","IsPullRequest":true,"CreatedAt":"2019-02-08T16:57:49","Actor":"stephentoub","Number":"22483","RawContent":null,"Title":"Move GCSettings to shared","State":"closed","Body":"Mainly just type definitions and error handling that gets shared.  Also fixes a few exceptions to use the right parameter name, and moves an error string to resources.","Url":"https://github.com/dotnet/coreclr/pull/22483","RelatedDescription":"Closed or merged PR \"Move GCSettings to shared\" (#22483)"},{"Id":"408238571","IsPullRequest":true,"CreatedAt":"2019-02-08T16:56:17","Actor":"mikedn","Number":"22489","RawContent":null,"Title":"Remove GTF_REVERSE_OPS checks from LSRA","State":"open","Body":"GTF_REVERSE_OPS is cleared during rationalization.\r\n\r\nPulled out of #21711 as that's way too large.","Url":"https://github.com/dotnet/coreclr/pull/22489","RelatedDescription":"Open PR \"Remove GTF_REVERSE_OPS checks from LSRA\" (#22489)"},{"Id":"408173480","IsPullRequest":true,"CreatedAt":"2019-02-08T16:28:28","Actor":"Dotnet-GitSync-Bot","Number":"22488","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/22488","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22488)"},{"Id":"408170894","IsPullRequest":true,"CreatedAt":"2019-02-08T14:17:05","Actor":"gleocadie","Number":"22487","RawContent":null,"Title":"Add a new version of ContentionEnd event","State":"open","Body":"Add a new version of the ContenionEnd event which contains the duration of the contention.\r\n\r\n#21524 ","Url":"https://github.com/dotnet/coreclr/pull/22487","RelatedDescription":"Open PR \"Add a new version of ContentionEnd event\" (#22487)"},{"Id":"408073829","IsPullRequest":false,"CreatedAt":"2019-02-08T09:42:20","Actor":"MichalStrehovsky","Number":"22486","RawContent":null,"Title":"Microsoft.NETCore.Jit not getting published","State":"open","Body":"There hasn't been a new version of the [Microsoft.NETCore.Jit](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.Jit) package published on MyGet since January 18th. We use this package in the CPAOT ReadyToRun compiler project (and CoreRT).","Url":"https://github.com/dotnet/coreclr/issues/22486","RelatedDescription":"Open issue \"Microsoft.NETCore.Jit not getting published\" (#22486)"},{"Id":"407969817","IsPullRequest":true,"CreatedAt":"2019-02-08T06:01:50","Actor":"sandreenko","Number":"22481","RawContent":null,"Title":"Fix the desktop warning","State":"closed","Body":"Introduced by #22023 ","Url":"https://github.com/dotnet/coreclr/pull/22481","RelatedDescription":"Closed or merged PR \"Fix the desktop warning\" (#22481)"},{"Id":"407991880","IsPullRequest":false,"CreatedAt":"2019-02-08T03:24:25","Actor":"stephentoub","Number":"22484","RawContent":null,"Title":"Status of MDAs?","State":"open","Body":"The runtime still has code related to MDAs, e.g.\r\nhttps://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/mda.cs\r\n\r\nIs there a plan for these moving forward? Should some of them, e.g. ReportErrorSafeHandleRelease/FireInvalidGCHandleCookieProbe/etc., be turned into EventSource events and the rest deleted?","Url":"https://github.com/dotnet/coreclr/issues/22484","RelatedDescription":"Open issue \"Status of MDAs?\" (#22484)"},{"Id":"407901109","IsPullRequest":true,"CreatedAt":"2019-02-08T02:40:34","Actor":"echesakovMSFT","Number":"22471","RawContent":null,"Title":"Disable more baseservices/threading/interlocked tests on Ubuntu.Arm64","State":"closed","Body":"In the last two weeks the following tests have failed:\r\n* baseservices/threading/interlocked/exchange/ExchangeTClass - 5 times\r\n* baseservices/threading/interlocked/exchange/ExchangeTString - 13 times\r\n* baseservices/threading/interlocked/exchange/ExchangeTString_1 - 12 times\r\n* baseservices/threading/interlocked/exchange/ExchangeTString_2 - 20 times\r\n\r\nIn addition to the previously disabled tests (in #22304):\r\n* baseservices/threading/interlocked/compareexchange/CompareExchangeTClass - 9 times\r\n* baseservices/threading/interlocked/compareexchange/CompareExchangeTClass_1 - 32 times\r\n\r\nAll the failures happened on Ubuntu.1804.Arm64 in AzDO Pri1 jobs\r\n\r\n**Related issue:** #22303","Url":"https://github.com/dotnet/coreclr/pull/22471","RelatedDescription":"Closed or merged PR \"Disable more baseservices/threading/interlocked tests on Ubuntu.Arm64\" (#22471)"},{"Id":"407923397","IsPullRequest":true,"CreatedAt":"2019-02-07T23:48:08","Actor":"sywhang","Number":"22475","RawContent":null,"Title":"Move EventCounter back to System.Private.CoreLib","State":"closed","Body":"This is the first PR that addresses #20372. \r\n\r\nFYI this branch - https://github.com/sywhang/coreclr/tree/add-runtime-perfcounters - contains all the changes I've made so far, but I'm breaking things up into smaller PRs so that they can be more easily reviewed. \r\n\r\ncc @tommcdon @shirhatti ","Url":"https://github.com/dotnet/coreclr/pull/22475","RelatedDescription":"Closed or merged PR \"Move EventCounter back to System.Private.CoreLib\" (#22475)"},{"Id":"407947822","IsPullRequest":true,"CreatedAt":"2019-02-07T23:44:17","Actor":"benaadams","Number":"22479","RawContent":null,"Title":"[WIP] Use CompareOrdinalHelper for SpanHelpers.SequenceCompareTo","State":"open","Body":"Rather than a custom implementation, use the Vectorized `SpanHelpers.SequenceCompareTo` for \r\n```csharp\r\nint CompareOrdinalHelper(string strA, string strB)\r\n```\r\nAs per (which already uses it)\r\n```csharp\r\nint CompareOrdinalHelper(string strA, int indexA, int countA, string strB, int indexB, int countB)\r\n```\r\nPerformance should be additionally improved after https://github.com/dotnet/coreclr/pull/22187\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22479","RelatedDescription":"Open PR \"[WIP] Use CompareOrdinalHelper for SpanHelpers.SequenceCompareTo\" (#22479)"},{"Id":"407941006","IsPullRequest":false,"CreatedAt":"2019-02-07T23:18:40","Actor":"BruceForstall","Number":"22478","RawContent":null,"Title":"[arm64] Update CodeGen::genPushCalleeSavedRegisters() comments","State":"open","Body":"Part of code review feedback on https://github.com/dotnet/coreclr/pull/22023 was to update the frame pictures for  `CodeGen::genPushCalleeSavedRegisters` to include the GS cookie location.\r\n","Url":"https://github.com/dotnet/coreclr/issues/22478","RelatedDescription":"Open issue \"[arm64] Update CodeGen::genPushCalleeSavedRegisters() comments\" (#22478)"},{"Id":"407937606","IsPullRequest":true,"CreatedAt":"2019-02-07T23:06:09","Actor":"AndyAyersMS","Number":"22477","RawContent":null,"Title":"JIT: change how we block gc refs from callee saves for inline pinvokes","State":"open","Body":"Add a new marker instruction that we emit once we've enabled preepmtive gc in\r\nthe inline pinvoke method prolog. Use that to kill off callee saves registers\r\nwith GC references, instead of waiting until the call.\r\n\r\nThis closes a window of vulnerability we see in GC stress where if a stress\r\ninterrupt happens between the point at which we enable preeemptive GC and\r\nthe point at which we make the call, we may report callee saves as GC live\r\nwhen they're actually dead.\r\n\r\nCloses #19211.","Url":"https://github.com/dotnet/coreclr/pull/22477","RelatedDescription":"Open PR \"JIT: change how we block gc refs from callee saves for inline pinvokes\" (#22477)"},{"Id":"407936058","IsPullRequest":false,"CreatedAt":"2019-02-07T23:00:37","Actor":"BruceForstall","Number":"22476","RawContent":null,"Title":"[arm64] asymmetry in prolog/epilog reg pair save/restore offsets","State":"open","Body":"`CodeGen::genPrologSaveRegPair` uses pre-index if `spDelta >= -512`. \r\n\r\n`CodeGen::genEpilogRestoreRegPair` uses post-index if `spDelta <= 504`. This is incorrect. It should mirror the prolog code, and use `spDelta <= 512`. Since we generate the inverse unwind codes in the epilog that we do in the prolog, we can still generate save_regp_x with a 512 offset.\r\n\r\nThe only issue with this asymmetry is that a function with frame size of exactly 512 that uses pre-indexing in the prolog will not get a matching epilog, or matching epilog codes. However, the epilog will work fine.\r\n\r\n(note: this comment in `CodeGen::genPrologSaveRegPair` is incorrect, and thus confusing: `else // (spDelta < -512))`)\r\n\r\n(note: this comment in `CodeGen::genEpilogRestoreRegPair` is incorrect, and thus confusing: `else // (spDelta > 504))`)","Url":"https://github.com/dotnet/coreclr/issues/22476","RelatedDescription":"Open issue \"[arm64] asymmetry in prolog/epilog reg pair save/restore offsets\" (#22476)"},{"Id":"407922351","IsPullRequest":true,"CreatedAt":"2019-02-07T22:16:31","Actor":"sandreenko","Number":"22474","RawContent":null,"Title":"[WIP][no review] Stress test chaos","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22474","RelatedDescription":"Open PR \"[WIP][no review] Stress test chaos\" (#22474)"},{"Id":"407913730","IsPullRequest":false,"CreatedAt":"2019-02-07T21:51:42","Actor":"BrianBohe","Number":"22473","RawContent":null,"Title":"We can encapsulate the creation of siVarLoc in case a change in the way of reporting variables","State":"open","Body":"We had this code https://github.com/dotnet/coreclr/blob/master/src/jit/codegencommon.cpp#L10366-L10525 that actually is in charge of filling the \"siVarLoc\" structure depending of the case of variable type and if it's in a register, the stack or both.\r\n\r\nI believe it can be moved to Compiler.h in order to make \"genSetScopeInfo\" a little more clearer/shorter. Also it would be easier to change the way one is reporting the debugger info for variables if it is something desired (or that could change).\r\n\r\nI have open this PR for this:\r\n[https://github.com/dotnet/coreclr/pull/22472](https://github.com/dotnet/coreclr/pull/22472)","Url":"https://github.com/dotnet/coreclr/issues/22473","RelatedDescription":"Open issue \"We can encapsulate the creation of siVarLoc in case a change in the way of reporting variables\" (#22473)"},{"Id":"407848782","IsPullRequest":true,"CreatedAt":"2019-02-07T21:27:38","Actor":"jkoritzinsky","Number":"22470","RawContent":null,"Title":"WIP: Create portable PEDecoder wrapper library for IJW Host","State":"closed","Body":"The IJW Host needs to have access to the PEDecoder class from coreclr. The IJW host has to live in core-setup since it needs to share code from the hosting layer.  Additionally, because of technical constraints on the IJW host, the host must have access to the PEDecoder class while under the Windows loader lock (aka we cannot dynamically load any dlls/call LoadLibrary at the time we need the PEDecoder). Also, the PEDecoder class is written very heavily in a coreclr-centric design with `CONTRACT`s and `CHECK`s, making it difficult to port over to core-setup without effectively rewriting it completely.\r\n\r\nSo, one option we came up with was creating a portable standard C or C++ wrapper around the PEDecoder class, create a static library out of it, and flow it from coreclr to core-setup, where the IJW host could link to it.\r\n\r\nCurrent progress:\r\n\r\n- [X] Create a wrapper that exposes the APIs needed by the IJW host.\r\n- [X] Binplace the static library and header into expected output locations.\r\n- [] Create package for the static library.\r\n\r\ncc: @jeffschwMSFT @AaronRobinsonMSFT @vitek-karas ","Url":"https://github.com/dotnet/coreclr/pull/22470","RelatedDescription":"Closed or merged PR \"WIP: Create portable PEDecoder wrapper library for IJW Host\" (#22470)"},{"Id":"407903244","IsPullRequest":true,"CreatedAt":"2019-02-07T21:22:39","Actor":"BrianBohe","Number":"22472","RawContent":null,"Title":"Moving creation of siVarLoc when generating scope info for reporting siScopeVariables","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22472","RelatedDescription":"Open PR \"Moving creation of siVarLoc when generating scope info for reporting siScopeVariables\" (#22472)"},{"Id":"407838489","IsPullRequest":true,"CreatedAt":"2019-02-07T18:34:06","Actor":"rpetrusha","Number":"22469","RawContent":null,"Title":"Changed Math field constant values","State":"open","Body":"## Changed Math field constant values\r\n\r\nCurrently, there are disparities between:\r\n\r\n- The declared value (2.7182818284590452354) and round-trippable value (2.7182818284590451) of Math.E.\r\n- The declared value (3.14159265358979323846) and round-trippable value (3.1415926535897931) of MathF.E.\r\n- The declared value (2.71828183) and round-trippable value (2.71828175) of Math.PI.\r\n- The declared value (3.14159265) and round-trippable value (3.14159274) of MathF.PI.\r\n\r\nThis PR modifies the declared value to correspond to the value produced by the \"G17\" format string for Double values (which displays a Double in full precision) and the \"G9\" format string for Single values (which displays a Single in full precision).\r\n\r\n//cc @tannergooding @nguerrera @stephentoub  \r\n\r\nRelated to dotnet/corefx#35141\r\n","Url":"https://github.com/dotnet/coreclr/pull/22469","RelatedDescription":"Open PR \"Changed Math field constant values\" (#22469)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"408399380","IsPullRequest":false,"CreatedAt":"2019-02-09T05:04:59","Actor":"mairaw","Number":"10744","RawContent":null,"Title":"dotnet clean also supports solution files","State":"open","Body":"## Steps to reproduce\r\n`dotnet clean --help` says that the argument is a project but it seems that the command accepts solution as well.\r\nRunning on a folder with no solution or project gives the following error message:\r\n`MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.`\r\n\r\n## Expected  behavior\r\n`dotnet clean --help` would say it supports solution files as well.\r\n\r\n## Actual behavior\r\n`dotnet clean --help` says it supports project files.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10744","RelatedDescription":"Open issue \"dotnet clean also supports solution files\" (#10744)"},{"Id":"408399081","IsPullRequest":false,"CreatedAt":"2019-02-09T05:00:17","Actor":"mairaw","Number":"10743","RawContent":null,"Title":"dotnet migrate --help says \"Migration failed.\" before printing help","State":"open","Body":"## Steps to reproduce\r\ndotnet migrate --help\r\n\r\n## Expected  behavior\r\nOnly help would be displayed.\r\n\r\n## Actual behavior\r\nMessage \"Migration failed.\" + help is displayed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/dotnet/cli/issues/10743","RelatedDescription":"Open issue \"dotnet migrate --help says \"Migration failed.\" before printing help\" (#10743)"},{"Id":"408397299","IsPullRequest":true,"CreatedAt":"2019-02-09T04:28:55","Actor":"wli3","Number":"10742","RawContent":null,"Title":"Merge release/2.2.2xxto release/3.0.1xx","State":"open","Body":"Please review carefully. I updated versions.props by diffing with build/versions.props which is quiet different in 2.2.2xxx vs 3.0.1xx","Url":"https://github.com/dotnet/cli/pull/10742","RelatedDescription":"Open PR \"Merge release/2.2.2xxto release/3.0.1xx\" (#10742)"},{"Id":"408373704","IsPullRequest":true,"CreatedAt":"2019-02-09T02:40:22","Actor":"wli3","Number":"10741","RawContent":null,"Title":"Update to Sdk.2.1.600-preview-63808-04.","State":"closed","Body":"https://github.com/dotnet/cli/issues/10628","Url":"https://github.com/dotnet/cli/pull/10741","RelatedDescription":"Closed or merged PR \"Update to Sdk.2.1.600-preview-63808-04.\" (#10741)"},{"Id":"408345283","IsPullRequest":true,"CreatedAt":"2019-02-09T00:55:30","Actor":"rainersigwald","Number":"10735","RawContent":null,"Title":"MSBuild 16.0.438 (2.1.6xx)","State":"closed","Body":"Corresponding internal VS PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/163672","Url":"https://github.com/dotnet/cli/pull/10735","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.438 (2.1.6xx)\" (#10735)"},{"Id":"408348560","IsPullRequest":true,"CreatedAt":"2019-02-09T00:48:36","Actor":"livarcocc","Number":"10740","RawContent":null,"Title":"Updating branding for preview3 and adding a build trigger to the release branch","State":"closed","Body":"Updating branding for preview3 and adding a build trigger to the release branch.\r\n","Url":"https://github.com/dotnet/cli/pull/10740","RelatedDescription":"Closed or merged PR \"Updating branding for preview3 and adding a build trigger to the release branch\" (#10740)"},{"Id":"408348340","IsPullRequest":true,"CreatedAt":"2019-02-09T00:48:11","Actor":"livarcocc","Number":"10739","RawContent":null,"Title":"Updating branding to preview4","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10739","RelatedDescription":"Closed or merged PR \"Updating branding to preview4\" (#10739)"},{"Id":"408272605","IsPullRequest":true,"CreatedAt":"2019-02-09T00:13:34","Actor":"nguerrera","Number":"10733","RawContent":null,"Title":"Fix typo: s/Interective/Interactive/","State":"closed","Body":"NOTE: I will backport this to release/2.1.6xx along with the corresponding loc handback\r\n\r\nFix #10728 \r\n","Url":"https://github.com/dotnet/cli/pull/10733","RelatedDescription":"Closed or merged PR \"Fix typo: s/Interective/Interactive/\" (#10733)"},{"Id":"407840988","IsPullRequest":true,"CreatedAt":"2019-02-08T22:31:25","Actor":"nugetlurker","Number":"10725","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10725","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into cli\" (#10725)"},{"Id":"408346976","IsPullRequest":true,"CreatedAt":"2019-02-08T22:22:52","Actor":"rainersigwald","Number":"10738","RawContent":null,"Title":" MSBuild 16.0.439 (2.2.2xx)","State":"open","Body":"Corresponding internal VS PR: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/163710","Url":"https://github.com/dotnet/cli/pull/10738","RelatedDescription":"Open PR \" MSBuild 16.0.439 (2.2.2xx)\" (#10738)"},{"Id":"408346571","IsPullRequest":true,"CreatedAt":"2019-02-08T22:21:40","Actor":"rainersigwald","Number":"10737","RawContent":null,"Title":"MSBuild 16.0.438 (2.2.2xx)","State":"open","Body":"Corresponding internal VS PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/163672","Url":"https://github.com/dotnet/cli/pull/10737","RelatedDescription":"Open PR \"MSBuild 16.0.438 (2.2.2xx)\" (#10737)"},{"Id":"407294063","IsPullRequest":true,"CreatedAt":"2019-02-08T22:21:09","Actor":"singhsarab","Number":"10716","RawContent":null,"Title":"Updating 2.2 test templates","State":"closed","Body":"Updating the test templates for net 2.2x with precendence fix.\r\n","Url":"https://github.com/dotnet/cli/pull/10716","RelatedDescription":"Closed or merged PR \"Updating 2.2 test templates\" (#10716)"},{"Id":"408345780","IsPullRequest":true,"CreatedAt":"2019-02-08T22:18:48","Actor":"rainersigwald","Number":"10736","RawContent":null,"Title":"MSBuild 16.0.439 (2.1.6xx)","State":"open","Body":"Corresponding internal VS PR: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/163710","Url":"https://github.com/dotnet/cli/pull/10736","RelatedDescription":"Open PR \"MSBuild 16.0.439 (2.1.6xx)\" (#10736)"},{"Id":"408315939","IsPullRequest":false,"CreatedAt":"2019-02-08T20:41:40","Actor":"natemcmaster","Number":"10734","RawContent":null,"Title":"dotnet tool update does not have a `--version` parameter so can't be used for prereleases","State":"open","Body":"## Steps to reproduce\r\n```\r\ndotnet tool update Microsoft.DotNet.Darc -g --add-source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n```\r\n\r\n## Expected  behavior\r\nI would love to be able to specify something like `--version '*'` or `--prerelease`, but neither option exists.\r\n\r\n## Actual behavior\r\n![image](https://user-images.githubusercontent.com/2696087/52504747-31b0ac80-2b9e-11e9-92fe-4ef47c8313cf.png)\r\n\r\n<details>\r\n\r\n```\r\nerror NU1103: Unable to find a stable package microsoft.dotnet.darc with version\r\nerror NU1103:   - Found 595 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json [ Nearest version: 1.0.0-beta.18477.9 ]\r\nerror NU1103:   - Found 0 version(s) in /usr/local/share/dotnet/sdk/NuGetFallbackFolder\r\nerror NU1103:   - Found 0 version(s) in nuget.org\r\nTool 'microsoft.dotnet.darc' failed to update due to the following:\r\nThe tool package could not be restored.\r\nTool 'microsoft.dotnet.darc' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\n</details>\r\n\r\n## Workaround\r\n\r\n```sh\r\n( dotnet tool uninstall -g Microsoft.DotNet.Darc || true ) && dotnet tool install --version '1.1.0-*' -g Microsoft.DotNet.Darc  --add-source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n```\r\n\r\nUse `dotnet tool uninstall` + `dotnet tool install`. Use caution because `dotnet tool uninstall` fails if the tool is already uninstalled.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /Users/namc/src/aspnet/Extensions/.dotnet/sdk/3.0.100-preview-010184/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27404-9\r\n  Commit:  5ff1240bef\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010184 [/Users/namc/src/aspnet/Extensions/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27330-4 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27404-9 [/Users/namc/src/aspnet/Extensions/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10734","RelatedDescription":"Open issue \"dotnet tool update does not have a `--version` parameter so can't be used for prereleases\" (#10734)"},{"Id":"408143015","IsPullRequest":true,"CreatedAt":"2019-02-08T19:09:29","Actor":"dotnet-maestro[bot]","Number":"10732","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19107.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10732","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10732)"},{"Id":"408047565","IsPullRequest":true,"CreatedAt":"2019-02-08T15:33:17","Actor":"wli3","Number":"10731","RawContent":null,"Title":"reference NuGet.Packaging.core explicitly","State":"closed","Body":"nuget moved all type from NuGet.Packaging.Core to NuGet.Packaging and added type forwarding in 5.0.0-rtm.5821. However to allow old msbuild tasks like Arcade tasks still function without recompile, NuGet.Packaging.Core need to be referenced explicitly so the NuGet.Packaging.Core.dll will be part of the SDK and be available for type forwarding","Url":"https://github.com/dotnet/cli/pull/10731","RelatedDescription":"Closed or merged PR \"reference NuGet.Packaging.core explicitly\" (#10731)"},{"Id":"408039841","IsPullRequest":false,"CreatedAt":"2019-02-08T07:46:29","Actor":"LightVolk","Number":"10730","RawContent":null,"Title":"Why dotnet sln cound not create solution folder under added project?","State":"open","Body":"I have very big solution (500+ projects) and Visual Studio can not open it fast. Ok.\r\nI know about command **dotnet sln Solution.sln add NewProject.csproj**.\r\n\r\nBut i want to have command arguments of Solution Folder hierarchy.\r\n\r\nFor example: **dotnet sln Solution.sln add NewProject.csproj  -hier FirstSolutionFolder\\SecondSolutionFolder** and command add it into FirstSolutionFolder\\SecondSolutionFolder\\NewProject.csproj  \r\n\r\n\r\nCan you add this functionality in next versions of dotnet cli?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10730","RelatedDescription":"Open issue \"Why dotnet sln cound not create solution folder under added project?\" (#10730)"},{"Id":"407510534","IsPullRequest":true,"CreatedAt":"2019-02-08T02:09:31","Actor":"peterhuene","Number":"10720","RawContent":null,"Title":"Implement child process reaping. ","State":"closed","Body":"This PR implements child process reaping in the event of termination\r\nof a CLI command.\r\n\r\nOn Windows, the child process is added to a job object that is set to\r\nterminate the child (and its tree) upon the termination of the parent\r\ndotnet process.  On Windows 7 and Server 2008, the dotnet process cannot\r\nalready be associated with a job object for the reaping to occur.  On\r\nlater Windows versions, a nested job will be created so the reaping will\r\nstill occur.  After the child process exits, the job object is closed\r\nwithout terminating the remaining processes in the job; this allows for\r\nthe child process to spawn additional processes that outlive the child.\r\n\r\nOn POSIX operating systems, a SIGTERM is intercepted and forwarded on to\r\nthe child process only. Like the SIGINT forwarding, it is up to the\r\nchild process to decide what to do with the SIGTERM signal (the default\r\nis to abort).\r\n\r\nAdditionally, this fix further expands upon the previous fix to `dotnet\r\nrun` to properly handle SIGINT so that all child processes now benefit\r\nfrom the fixed behavior.  This means MSBuild-forwarding commands like\r\n`dotnet build` now behave as if MSBuild were directly being executed with\r\nrespect to Ctrl-C handling.\r\n\r\nFixes #7426.","Url":"https://github.com/dotnet/cli/pull/10720","RelatedDescription":"Closed or merged PR \"Implement child process reaping. \" (#10720)"},{"Id":"407841013","IsPullRequest":true,"CreatedAt":"2019-02-07T23:53:06","Actor":"nugetlurker","Number":"10726","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10726","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into cli\" (#10726)"},{"Id":"407933608","IsPullRequest":true,"CreatedAt":"2019-02-07T22:51:55","Actor":"wli3","Number":"10729","RawContent":null,"Title":"Remove skip first run flag","State":"open","Body":"fix #10364\r\n\r\nReplace one big flag with DOTNET_ADD_GLOBAL_TOOLS_TO_PATH and DOTNET_USE_SHORT_FIRST_RUN_MESSAGE","Url":"https://github.com/dotnet/cli/pull/10729","RelatedDescription":"Open PR \"Remove skip first run flag\" (#10729)"},{"Id":"407927887","IsPullRequest":false,"CreatedAt":"2019-02-07T22:33:40","Actor":"nguerrera","Number":"10728","RawContent":null,"Title":"fsi help is misspelled","State":"open","Body":"## Steps to reproduce\r\n\r\n`dotnet --help`\r\n\r\n## Expected  behavior\r\n\r\nfsi help is spelled correctly\r\n\r\n## Actual behavior\r\n\r\nfsi help is misspelled\r\n\r\n\r\n```\r\n  fsi               Start F# Interective / execute F# scripts.\r\n````\r\n\r\ns/Interective/Interactive/\r\n\r\n@KevinRansom \r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10728","RelatedDescription":"Open issue \"fsi help is misspelled\" (#10728)"},{"Id":"407463348","IsPullRequest":true,"CreatedAt":"2019-02-07T22:12:34","Actor":"nguerrera","Number":"10719","RawContent":null,"Title":"Fix VS option to disallow previews in resolver","State":"closed","Body":"When the resolver was retargeted to net472, #if NET46 became unused, causing the default x-plat behavior of never disallowing previews to be used.\r\n\r\nThis had not been caught because:\r\n\r\n1. VS 16 is the only version with a resolver having this bug and it is still in preview and therefore grays out the option to disallow previews of SDK.\r\n\r\n2. VSSettings have to be mocked in unit tests\r\n\r\nAlso:\r\n\r\n* Fix unnecessary deployment of embedded Microsoft.VisualStudio.Setup.Configuration.Interop.\r\n* Remove explicit package dependency on NETStandard.Library on the unofficial nupkg of resolver\r\n* Remove unnecessary unused #if NET46/NET451 that can now use the same API on net472 as netstandard/netcoreapp\r\n","Url":"https://github.com/dotnet/cli/pull/10719","RelatedDescription":"Closed or merged PR \"Fix VS option to disallow previews in resolver\" (#10719)"},{"Id":"407606344","IsPullRequest":false,"CreatedAt":"2019-02-07T20:43:39","Actor":"vitek-karas","Number":"10722","RawContent":null,"Title":"Add an extra line after first run experience message","State":"closed","Body":"Clean Linux machine.\r\nInstall .NET Core SDK 2.2 per the instructions on the web.\r\nRun\r\n`dotnet tool install -g dotnetsay`\r\n\r\nNow from the same terminal run\r\n`dotnetsay`\r\n\r\nThis will fail saying that it can't find `dotnetsay` command.\r\n\r\nStarting a new terminal and running `dotnetsay` will now work.\r\n\r\nThis is confusing, if we can't make this work in the original terminal, we should at last write out a warning that a new terminal needs to be started.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10722","RelatedDescription":"Closed issue \"Add an extra line after first run experience message\" (#10722)"},{"Id":"407853504","IsPullRequest":false,"CreatedAt":"2019-02-07T19:12:05","Actor":"livarcocc","Number":"10727","RawContent":null,"Title":"Publish command is treating .NET Framework web project with new SDK project file format as a .NET Core project","State":"open","Body":"_From @amybingzhao on February 7, 2019 18:51_\n\n### Steps to reproduce\r\n1. start with an existing .NET Framework 4.6 solution that includes a web project\r\n2. from the command line, run `msbuild -p:DeployOnBuild=true -p:WebPublishMethod=Package -p:PackageAsSingleFile=true` --> a zip is outputted with Content items and a bin folder containing relevant dll's\r\n3. Convert the project to use the new csproj (but still running .NET Framework 4.6)\r\n4. from the command line, run `msbuild -p:DeployOnBuild=true -p:WebPublishMethod=Package -p:PackageAsSingleFile=true` --> the .zip file that gets outputted contains the contents of the output directory (i.e. a bunch of dll's, views, and items we've specified to be copied to the output directory via the <CopyToOutputDirectory> tag), rather than Content items and the bin folder.\r\n\r\n### Expected  behavior\r\na deployable zip w/ Content items, config-related fiels (e.g. web.config), and a bin folder w/ dll's\r\n\r\n### Actual behavior\r\na zip w/ the contents of the output directory\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.5.180.51428 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nOS info:\r\nWindows 7\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nVisual Studio 2017 Professional Edition\r\ndotnet CLI: version 2.1.2\r\n\n\n_Copied from original issue: Microsoft/msbuild#4157_","Url":"https://github.com/dotnet/cli/issues/10727","RelatedDescription":"Open issue \"Publish command is treating .NET Framework web project with new SDK project file format as a .NET Core project\" (#10727)"},{"Id":"407689126","IsPullRequest":true,"CreatedAt":"2019-02-07T18:34:36","Actor":"dotnet-maestro[bot]","Number":"10724","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19106.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10724","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10724)"},{"Id":"407667267","IsPullRequest":false,"CreatedAt":"2019-02-07T16:01:42","Actor":"powercode","Number":"10723","RawContent":null,"Title":"Add supportedOS manifest resource to dotnet.exe on windows builds","State":"closed","Body":"## Steps to reproduce\r\nRunning tests using dotnet.exe will load the assembly under test into the dotnet.exe process. Without a manifest, System.Environment.OSVersion will return compatibility values, and not the values of the actual operating system.\r\n\r\nBy adding a manifest as a resource in the executable, we can explicitly say that we support Windows 10.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n    <description>.NET Core Host</description>\r\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n        <security>\r\n            <requestedPrivileges>\r\n                <requestedExecutionLevel\r\n                    level=\"asInvoker\"\r\n                    uiAccess=\"false\"\r\n                />\t\r\n            </requestedPrivileges>\r\n        </security>\r\n    </trustInfo>\r\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\"> \r\n        <application> \r\n            <!-- Windows 10 --> \r\n            <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>\r\n            <!-- Windows 8.1 -->\r\n            <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\r\n            <!-- Windows 8 -->\r\n            <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>\r\n            <!-- Windows 7 -->\r\n            <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\r\n        </application> \r\n    </compatibility>\r\n</assembly>\r\n```\r\n\r\nThe manifest can be specified with the `/win32manifest:file` option to the compiler, and the msbuild property is `Win32Manifest`.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```output\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10723","RelatedDescription":"Closed issue \"Add supportedOS manifest resource to dotnet.exe on windows builds\" (#10723)"},{"Id":"407224876","IsPullRequest":true,"CreatedAt":"2019-02-07T13:01:23","Actor":"dotnet-maestro[bot]","Number":"10715","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10715","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10715)"},{"Id":"407554642","IsPullRequest":true,"CreatedAt":"2019-02-07T06:07:13","Actor":"nkolev92","Number":"10721","RawContent":null,"Title":"Add interactive for the list command","State":"open","Body":"Fix for https://github.com/NuGet/Home/issues/7605 and https://github.com/NuGet/Home/issues/7727. \r\n\r\nThe list command talks to the sources, so it needs an interactive switch. \r\n\r\n//cc @wli3 \r\n\r\nI have trouble building locally. (build.cmd doesn't seem to be the right thing).\r\n\r\nI'll bug people tomorrow to complete the fix. \r\n\r\n```\r\n \"C:\\Users\\NK\\Documents\\Code\\dotnet\\cli\\build.proj\" (default target) (1) ->\r\n         C:\\Users\\NK\\Documents\\Code\\dotnet\\cli\\Directory.Build.props(38,3): error MSB4019: The imported project \"C:\\Users\\NK\\Documents\\Code\\dotnet\\cli\\bin\\obj\\GitCommitInfo.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [C:\\Users\\NK\\Documents\\Code\\dotnet\\cli\\build.proj]\r\n```","Url":"https://github.com/dotnet/cli/pull/10721","RelatedDescription":"Open PR \"Add interactive for the list command\" (#10721)"},{"Id":"407381667","IsPullRequest":true,"CreatedAt":"2019-02-06T21:32:59","Actor":"livarcocc","Number":"10718","RawContent":null,"Title":"Reverting NuGet to a 16.0 P2 state.","State":"closed","Body":"This will put us back to the same state we currently are regarding NuGet but with newer Roslyn and FSharp.","Url":"https://github.com/dotnet/cli/pull/10718","RelatedDescription":"Closed or merged PR \"Reverting NuGet to a 16.0 P2 state.\" (#10718)"},{"Id":"407380584","IsPullRequest":true,"CreatedAt":"2019-02-06T20:40:53","Actor":"livarcocc","Number":"10717","RawContent":null,"Title":"Reverting NuGet to a 16.0 P2 state.","State":"closed","Body":"This will put us back to the same state we currently are regarding NuGet but with newer Roslyn and FSharp.","Url":"https://github.com/dotnet/cli/pull/10717","RelatedDescription":"Closed or merged PR \"Reverting NuGet to a 16.0 P2 state.\" (#10717)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"408398430","IsPullRequest":true,"CreatedAt":"2019-02-09T04:49:23","Actor":"slozier","Number":"35199","RawContent":null,"Title":"SBCSCodePageEncoding: Don't call DecoderFallback.CreateFallbackBuffer until needed","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/35199","RelatedDescription":"Open PR \"SBCSCodePageEncoding: Don't call DecoderFallback.CreateFallbackBuffer until needed\" (#35199)"},{"Id":"408397014","IsPullRequest":true,"CreatedAt":"2019-02-09T04:31:49","Actor":"slozier","Number":"35198","RawContent":null,"Title":"Remove unnecessary instantiation in SBCSCodePageEncoding","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/35198","RelatedDescription":"Closed or merged PR \"Remove unnecessary instantiation in SBCSCodePageEncoding\" (#35198)"},{"Id":"408385087","IsPullRequest":true,"CreatedAt":"2019-02-09T04:15:28","Actor":"safern","Number":"35192","RawContent":null,"Title":"Remove Fedora from helix test queues to unblock PRs","State":"closed","Body":"Lets remove the fedora helix queues hitting: https://github.com/dotnet/core-eng/issues/5204 since there has been no response from the eng team and to unblock PRs until we get a response. Specially during the weekend as we don't expect a response in the meantime. \r\n\r\ncc: @stephentoub @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/35192","RelatedDescription":"Closed or merged PR \"Remove Fedora from helix test queues to unblock PRs\" (#35192)"},{"Id":"408396234","IsPullRequest":true,"CreatedAt":"2019-02-09T04:12:17","Actor":"safern","Number":"35197","RawContent":null,"Title":"Support building corefx in VS2019","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/34613\r\nFixes: https://github.com/dotnet/corefx/issues/34413\r\n\r\nCMake 3.14.0-rc1 is now out the door and can be downloaded from: https://cmake.org/download/\r\n\r\nThis version now supports the new toolset version which is `142` and now contains a VS2019 project generator. Note that since in VS2019 Preview1 the toolset version was still `141` it is required to have VS2019 Preview2 for it to work correctly.\r\n\r\ncc: @stephentoub @ViktorHofer @danmosemsft @ahsonkhan  @ericstj ","Url":"https://github.com/dotnet/corefx/pull/35197","RelatedDescription":"Open PR \"Support building corefx in VS2019\" (#35197)"},{"Id":"408396204","IsPullRequest":true,"CreatedAt":"2019-02-09T04:11:51","Actor":"Dotnet-GitSync-Bot","Number":"35196","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/35196","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#35196)"},{"Id":"408313174","IsPullRequest":true,"CreatedAt":"2019-02-09T03:58:25","Actor":"sywhang","Number":"35183","RawContent":null,"Title":"Move EventCounter to shared CoreLib","State":"closed","Body":"This needs to be done to complete https://github.com/dotnet/coreclr/issues/20372. Moving EventCounter to the shared CoreLib portion in CoreFX first as Jan suggested in https://github.com/dotnet/coreclr/pull/22475. ","Url":"https://github.com/dotnet/corefx/pull/35183","RelatedDescription":"Closed or merged PR \"Move EventCounter to shared CoreLib\" (#35183)"},{"Id":"408388623","IsPullRequest":false,"CreatedAt":"2019-02-09T02:29:51","Actor":"davidsh","Number":"35195","RawContent":null,"Title":"HTTP2: SocketsHttpHandler doesn't downgrade to HTTP/1.1 during Windows authentication","State":"open","Body":"When SocketsHttpHandler connects to a server using HTTP/2, it is unable to downgrade to HTTP/1.1 when the server requests Windows authentication (Negotiate or NTLM).  The net result is that 401 is returned to the client without even trying to reconnect (with HTTP/1.1) and send credentials.\r\n\r\n```c#\r\n// Repro will be posted later\r\n```","Url":"https://github.com/dotnet/corefx/issues/35195","RelatedDescription":"Open issue \"HTTP2: SocketsHttpHandler doesn't downgrade to HTTP/1.1 during Windows authentication\" (#35195)"},{"Id":"408388527","IsPullRequest":true,"CreatedAt":"2019-02-09T02:28:20","Actor":"stephentoub","Number":"35194","RawContent":null,"Title":"[release/2.2] Fix BigInteger parsing of substring span (#35185)","State":"open","Body":"Port https://github.com/dotnet/corefx/pull/35185 to release/2.2.","Url":"https://github.com/dotnet/corefx/pull/35194","RelatedDescription":"Open PR \"[release/2.2] Fix BigInteger parsing of substring span (#35185)\" (#35194)"},{"Id":"408350389","IsPullRequest":true,"CreatedAt":"2019-02-09T02:24:52","Actor":"stephentoub","Number":"35187","RawContent":null,"Title":"Don't force-allocate x509ChainPolicy collections in X509Chain.Build","State":"closed","Body":"Previously X509ChainPolicy would always allocate its collections, but now it lazily allocates them.  However, X509Chain.Build is forcing them to be allocated even when they're not needed.  Stop doing that.\r\n\r\ncc: @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/35187","RelatedDescription":"Closed or merged PR \"Don't force-allocate x509ChainPolicy collections in X509Chain.Build\" (#35187)"},{"Id":"408333561","IsPullRequest":true,"CreatedAt":"2019-02-09T02:24:34","Actor":"stephentoub","Number":"35185","RawContent":null,"Title":"Fix BigInteger parsing of substring span","State":"closed","Body":"Line-by-line port of https://github.com/dotnet/coreclr/pull/17808.\r\n\r\n(This code is almost identical; it'd be nice to unify on the source shared from CoreLib.)\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35176\r\ncc: @tannergooding, @jkotas","Url":"https://github.com/dotnet/corefx/pull/35185","RelatedDescription":"Closed or merged PR \"Fix BigInteger parsing of substring span\" (#35185)"},{"Id":"408223779","IsPullRequest":false,"CreatedAt":"2019-02-09T02:24:32","Actor":"Metalnem","Number":"35176","RawContent":null,"Title":"BigInteger.TryParse out-of-bounds access","State":"closed","Body":"**BigInteger.TryParse** overloads accepting **ReadOnlySpan\\<char>** are ignoring the length of the span, and are reading beyond its end if there are more digits available. Here's the program to reproduce this:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Numerics;\r\n\r\nnamespace BigInt\r\n{\r\n  public class Program\r\n  {\r\n    public static void Main(string[] args)\r\n    {\r\n      var s = \"123456789\";\r\n      var span = s.AsSpan(0, 1);\r\n\r\n      if (BigInteger.TryParse(span, out var result))\r\n      {\r\n        Console.WriteLine(result);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis program should be printing **1**, but it's printing **123456789** instead. My running environment looks like this:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.103/\r\n```\r\n\r\nFound via [SharpFuzz](https://github.com/Metalnem/sharpfuzz).","Url":"https://github.com/dotnet/corefx/issues/35176","RelatedDescription":"Closed issue \"BigInteger.TryParse out-of-bounds access\" (#35176)"},{"Id":"408366815","IsPullRequest":true,"CreatedAt":"2019-02-09T02:24:12","Actor":"Dotnet-GitSync-Bot","Number":"35190","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corefx/pull/35190","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35190)"},{"Id":"408386781","IsPullRequest":true,"CreatedAt":"2019-02-09T02:10:31","Actor":"grant-d","Number":"35193","RawContent":null,"Title":"Units for BitOps.TrailingZeroCount","State":"open","Body":"Units for `BitOps.TrailingZeroCount` implementation in PR: https://github.com/dotnet/coreclr/pull/22333\r\n","Url":"https://github.com/dotnet/corefx/pull/35193","RelatedDescription":"Open PR \"Units for BitOps.TrailingZeroCount\" (#35193)"},{"Id":"408337868","IsPullRequest":true,"CreatedAt":"2019-02-09T01:40:42","Actor":"davidfowl","Number":"35186","RawContent":null,"Title":"GetMemory/GetSpan takes a minimum size","State":"closed","Body":"- We changed the contract of IBufferWriter to be more usable by making the sizeHint a minimum size. If the caller requests memory over the max pool size then we allocate.\r\n- In the default case where we're using the shared array pool, we let the underlying pool handle this (it does internally).","Url":"https://github.com/dotnet/corefx/pull/35186","RelatedDescription":"Closed or merged PR \"GetMemory/GetSpan takes a minimum size\" (#35186)"},{"Id":"408356325","IsPullRequest":true,"CreatedAt":"2019-02-09T01:05:55","Actor":"safern","Number":"35188","RawContent":null,"Title":"Set UseSharedCompilation to true","State":"closed","Body":"cc: @ericstj @tannergooding @danmosemsft @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/35188","RelatedDescription":"Closed or merged PR \"Set UseSharedCompilation to true\" (#35188)"},{"Id":"408375535","IsPullRequest":false,"CreatedAt":"2019-02-09T00:41:48","Actor":"qixu001","Number":"35191","RawContent":null,"Title":"HttpListener.Start() throws ArgumentNullException in some cases in Linux platform (dotnet core 2.1/2.2, etc)","State":"open","Body":"The problem is very similar to this:https://github.com/Microsoft/vscode-docs-authoring/issues/101\r\nhere's the callstack:\r\nSystem.ArgumentNullException: Value cannot be null.\r\n   at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)\r\n   at System.Net.HttpEndPointListener.ProcessAccept(SocketAsyncEventArgs args)\r\n   at System.Net.HttpEndPointListener.Accept(SocketAsyncEventArgs e)\r\n   at System.Net.HttpEndPointListener..ctor(HttpListener listener, IPAddress addr, Int32 port, Boolean secure)\r\n   at System.Net.HttpEndPointManager.GetEPListener(String host, Int32 port, HttpListener listener, Boolean secure)\r\n   at System.Net.HttpEndPointManager.AddPrefixInternal(String p, HttpListener listener)\r\n   at System.Net.HttpEndPointManager.AddListener(HttpListener listener)\r\n   at System.Net.HttpListener.Start()\r\n\r\nTaking a look at the source code, it looks that the issue happens when server is starting, client sends requests to the server. And the code that fails is likely because in HttpEndPointListener, the unregisteredConnections is null when the call of ProcessAccept comes from the cor of HttpEndPointerListener when the _unregisteredConnections is not initialized.\r\n  lock (epl._unregisteredConnections)\r\n            {\r\n                epl._unregisteredConnections[conn] = conn;\r\n            }\r\n","Url":"https://github.com/dotnet/corefx/issues/35191","RelatedDescription":"Open issue \"HttpListener.Start() throws ArgumentNullException in some cases in Linux platform (dotnet core 2.1/2.2, etc)\" (#35191)"},{"Id":"408356356","IsPullRequest":false,"CreatedAt":"2019-02-08T22:58:24","Actor":"stephentoub","Number":"35189","RawContent":null,"Title":"Unify CoreLib/System.Runtime.Numerics formatting/parsing code","State":"open","Body":"Once upon a time it seems as though System.Runtime.Numerics forked the integer formatting/parsing code that's in CoreLib.  That CoreLib code has since evolved, and is also now being mirrored to corefx, where System.Runtime.Numerics could include it rather than maintaining its own copy.\r\n\r\ncc: @tannergooding ","Url":"https://github.com/dotnet/corefx/issues/35189","RelatedDescription":"Open issue \"Unify CoreLib/System.Runtime.Numerics formatting/parsing code\" (#35189)"},{"Id":"408327114","IsPullRequest":true,"CreatedAt":"2019-02-08T22:24:31","Actor":"safern","Number":"35184","RawContent":null,"Title":"Revert \"Upgrading Roslyn to 3.0.0-beta2-final (#35134)\"","State":"closed","Body":"This slowed down our builds and a lot of CI jobs (specially AllConfigurations) are timing out.\r\n\r\nThis could be because before we where using the built-in bits of the compiler that come with the SDK and are crossgen'd and now we're using ones coming from the compiler toolset package.\r\n\r\nWe can investigate further what it needs to upgrade the compiler without impacting our builds perf and then upgrade.\r\n\r\ncc: @stephentoub @danmosemsft @ericstj @ViktorHofer @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/35184","RelatedDescription":"Closed or merged PR \"Revert \"Upgrading Roslyn to 3.0.0-beta2-final (#35134)\"\" (#35184)"},{"Id":"408239813","IsPullRequest":true,"CreatedAt":"2019-02-08T20:29:19","Actor":"Dotnet-GitSync-Bot","Number":"35177","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/35177","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35177)"},{"Id":"408307605","IsPullRequest":false,"CreatedAt":"2019-02-08T20:15:45","Actor":"ahsonkhan","Number":"35182","RawContent":null,"Title":"Utf8JsonWriter shouldn't throw ArgumentException if IBufferWriter failed to return requested memory","State":"open","Body":"It should throw a more appropriate exception like `InvalidOperationException`.\r\n\r\n`ArgumentException` should only be thrown at a particular callsite for truly invalid arguments (for example, passing -1 for some length that must be >= 0). Currently we throw `ArgumentException` after potentially several valid writes when the `IBufferWriter<byte>` passed to the ctor refused to give more space. This can lead to a call like WriteStartObject() to throw `ArgumentException` which conveys the wrong message.\r\n\r\nhttps://github.com/dotnet/corefx/blob/3c30357d51b96339021b4ee52f38445c31248bb2/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.cs#L788-L799\r\n\r\ncc @KrzysztofCwalina, @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/35182","RelatedDescription":"Open issue \"Utf8JsonWriter shouldn't throw ArgumentException if IBufferWriter failed to return requested memory\" (#35182)"},{"Id":"408026184","IsPullRequest":true,"CreatedAt":"2019-02-08T20:01:36","Actor":"davidfowl","Number":"35171","RawContent":null,"Title":"Use the array pool by default instead of going through the MemoryPool","State":"closed","Body":"The shared MemoryPool allocates an object per call to Rent. This might not be a problem in all cases but it's an unfortunate side effect of using the default implementation today. We can avoid this by leaving the default `MemoryPool<T>` null and instead using the shared ArrayPool by default (which pools the underlying array)\r\n\r\nPS: I can't figure out how to run anything locally, so I'm just going to see what the CI tells me 😄 \r\n\r\nBefore\r\n\r\n```\r\n#13 ViaPipeReader\r\nTook: 4,953 ms\r\nAllocated: 512 kb\r\nPeak Working Set: 16,044 kb\r\nGen 0 collections: 0\r\nGen 1 collections: 0\r\nGen 2 collections: 0\r\n```\r\n\r\nAfter\r\n\r\n```\r\n#13 ViaPipeReader\r\nTook: 4,906 ms\r\nAllocated: 72 kb\r\nPeak Working Set: 15,584 kb\r\nGen 0 collections: 0\r\nGen 1 collections: 0\r\nGen 2 collections: 0\r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/35171","RelatedDescription":"Closed or merged PR \"Use the array pool by default instead of going through the MemoryPool\" (#35171)"},{"Id":"408286650","IsPullRequest":false,"CreatedAt":"2019-02-08T19:13:17","Actor":"chrizy","Number":"35181","RawContent":null,"Title":"HttpClient issue when calling older ASP.Net webAPIs from net core","State":"open","Body":"I’m having an issue when calling an ASP.Net 5.2.3 WebAPI (framework 4.7.2) when using net core as the client. The issue does not happen If compile the test console app using framework 4.7.2. The issue is that the message body does not get serialized in the API controller and will always by null.\r\n\r\nnetwork traces below for the same code running against each runtime. It looks like some extra bytes is being added in net core.\r\nThanks\r\n\r\n**.net core 2.2 (fails)**\r\n\r\n```\r\nPOST http://croy201703/CrmServer/api/v1/login HTTP/1.1\r\nTransfer-Encoding: chunked\r\nContent-Type: application/json; charset=utf-8\r\nHost: croy201703\r\n\r\n48\r\n{\"username\":\"Admin\",\"password\":\"Admin\",\"installID\":\"test\",\"force\":false}\r\n0\r\n```\r\n\r\n\r\n**.net framework 4.7.2 (works OK)**\r\n\r\n```\r\nPOST http://croy201703/CrmServer/api/v1/login HTTP/1.1\r\nContent-Type: application/json; charset=utf-8\r\nHost: croy201703\r\nContent-Length: 72\r\n\r\n{\"username\":\"Admin\",\"password\":\"Admin\",\"installID\":\"test\",\"force\":false}\r\n\r\n```\r\n\r\nApplication calling code used for both tests\r\n```\r\n            var baseURL = \"http://croy201703/CrmServer/\";\r\n            var username = \"Admin\";\r\n            var password = \"Admin\";\r\n\r\n            // Login\r\n            var httpClient = new HttpClient()\r\n            {\r\n                BaseAddress = new Uri(baseURL)\r\n            };\r\n            var loginRequest = new { Username = username, Password = password, InstallID = \"test\", Force = false };\r\n            var loginResponse = await httpClient.PostAsJsonAsync(\"api/v1/login\", loginRequest);\r\n\r\n```\r\nalso tried with not passing as an anonymous type\r\n","Url":"https://github.com/dotnet/corefx/issues/35181","RelatedDescription":"Open issue \"HttpClient issue when calling older ASP.Net webAPIs from net core\" (#35181)"},{"Id":"408285687","IsPullRequest":false,"CreatedAt":"2019-02-08T19:10:55","Actor":"jlchavez","Number":"35180","RawContent":null,"Title":"IsolatedStorageFile GetUserStoreForAssembly inconsistency","State":"open","Body":"This is a shared issue with .net core/standard and .net framework.\r\n\r\nI have a library, for example let's name it WebPx.VirtualStorage, that calls the IsolatedStorageFile methods to get an IsoltatedStorage instance by User and Assembly, so this is the \"Calling Assembly\", but when I run a Web App or a Test Console App, those applications magically become the \"Calling Assembly\" and then the files are not really shared on an Isolated Storage by Assembly, it works like if I had requested IsolatedStorageScope.Application instead of IsolatedStorageScope.Assembly.\r\n\r\nIn .net framework, I could pass Evidence with a StrongName that forced for my assembly, so that I could ensure that the IsolatedStorage mechanism would always use that assembly name as the base for generating the physical path.\r\n\r\nEven if Code Access Security is not supported, it should be allowed to pass a StrongName as Evidence, resolving issue #10935, and that the currently available methods should not throw an exception if used #18706, so that it can be forced \"as a workaround\" or adapt to special requirements, but that would require us to wait for the next release of .net core, so it would be great to fix both things,, and resolve the Assembly Scope, for what we develop forward with .net core/framework.\r\n\r\n```\r\nprivate static IsolatedStorageFile GetStore()\r\n{\r\n  IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForAssembly();\r\n  return store;\r\n}\r\n```\r\n\r\nIn .net framework I could do\r\n\r\n```\r\n  var scope = IsolatedStorageScope.Assembly | IsolatedStorageScope.User;\r\n  var strongName = new StrongName(new StrongNamePublicKeyBlob(DecodeHexString(\"00..8B\")), \"WebPx.VirtualStorage\", new Version(6, 0, 0, 6));\r\n  var evidence = new Evidence(new EvidenceBase[] { strongName }, null);\r\n  var store = IsolatedStorageFile.GetStore(scope, null, null, evidence, null);\r\n```\r\n\r\nI might build a sample code with unit testing, if you need this sample, but i'm short of time with this, I have to build an alternate component for IsolatedStorage since this won't work for my current project, and it can't wait for a \"release\"... but while debugging I found that the folders changed:\r\n\r\nFor LocalStorageTest:\r\n`C:\\ProgramData\\IsolatedStorage\\mczgwee5.xly\\jd41pqrd.wl3\\StrongName.juocmblnfld5nltit5r1ajx4gg3qntvy\\AssemFiles\\`\r\nWith AssemblyIdentity for StrongName 'WebPx.LocalStorageTest'\r\n\r\nFor ConsoleAppTest:\r\n`C:\\ProgramData\\IsolatedStorage\\mczgwee5.xly\\jd41pqrd.wl3\\StrongName.osl54eaiwhirxv5vd1i5surmygahi1fs\\AssemFiles\\`\r\nWith AssemblyIdentity for StrongName 'WebPx.Web...'\r\n\r\nFor WebAppTest (unsigned assembly of course):\r\n`C:\\ProgramData\\IsolatedStorage\\mczgwee5.xly\\jd41pqrd.wl3\\Url.2gdf4ta0vupauvpaclwaqxofqoayi1e2\\AssemFiles\\`\r\nWith AssemblyIdentity for Url: \r\n`file:///C:/Source/WebPx8/Master/Src/Web/WebPx/WebPx.Web/Samples/ErrorHandlingSample/bin/Debug/netcoreapp2.1/ErrorHandlingSample.dll`","Url":"https://github.com/dotnet/corefx/issues/35180","RelatedDescription":"Open issue \"IsolatedStorageFile GetUserStoreForAssembly inconsistency\" (#35180)"},{"Id":"408253339","IsPullRequest":true,"CreatedAt":"2019-02-08T17:35:58","Actor":"stephentoub","Number":"35179","RawContent":null,"Title":"Reduce memory allocation in Http2Stream","State":"open","Body":"- Pool response buffers via ArrayPool\r\n- Don't allocate a separate sync object\r\n- Shrink the size of a few types\r\n\r\nThis (in particular the buffers, the rest were just really low hanging fruit I noticed along the way) has a very measurable impact on the amount of allocation happening, though we're still aways away from where we are for HTTP/1.1.\r\n\r\nBelow is a C# test app, which I'm running against a localhost server created just by doing `dotnet new web` with .NET Core 3.0 Preview 2; the only tweak I made to it was to remove the logging configuration from the generated json file.  The test app as written below just makes 50K GET requests (all serialized one after the other) to https://localhost:5001/, which outputs \"hello world\" in a response body.\r\n\r\nHere's example run on my machine when using HTTP/1.1:\r\n```\r\n00:00:07.1380364: 24 / 2 / 0\r\n00:00:07.0321134: 25 / 3 / 0\r\n00:00:07.1096999: 24 / 3 / 0\r\n00:00:07.1130195: 25 / 4 / 0\r\n00:00:07.1667388: 24 / 5 / 0\r\n00:00:07.1335548: 25 / 5 / 0\r\n00:00:07.0896373: 24 / 6 / 0\r\n```\r\nThe output is execution time followed by gen0, gen1, and gen2 GCs.\r\n\r\nNow here's HTTP/2 prior to this change:\r\n```\r\n00:00:07.7105986: 89 / 3 / 0\r\n00:00:07.7240805: 89 / 4 / 0\r\n00:00:07.7693986: 89 / 4 / 0\r\n00:00:07.6759160: 88 / 5 / 0\r\n00:00:07.7105327: 89 / 6 / 0\r\n00:00:07.6869135: 89 / 7 / 0\r\n00:00:07.7373724: 88 / 7 / 0\r\n```\r\nand after this change:\r\n```\r\n00:00:07.7463253: 35 / 3 / 0\r\n00:00:07.9400427: 34 / 3 / 0\r\n00:00:07.8681804: 35 / 4 / 0\r\n00:00:07.7955239: 35 / 5 / 0\r\n00:00:07.7796479: 34 / 6 / 0\r\n00:00:07.6910270: 35 / 7 / 0\r\n00:00:07.7161377: 34 / 7 / 0\r\n```\r\nso a marked improvement, but still much more than HTTP/1.1.\r\n\r\nUnfortunately the difference increases in both time and memory when requests start happening in parallel.  Tweaking the concurrency level in the test from 1 to Environment.ProcessorCount, such that on my 8-core I end up making 400K requests, I get these results for HTTP/1.1:\r\n```\r\n00:00:08.7074793: 204 / 2 / 1\r\n00:00:08.8334615: 204 / 3 / 0\r\n00:00:08.7282221: 203 / 4 / 0\r\n00:00:08.5498555: 205 / 5 / 0\r\n00:00:08.4470234: 204 / 6 / 0\r\n00:00:08.6309900: 203 / 7 / 0\r\n00:00:08.7555510: 204 / 7 / 0\r\n```\r\nthese for HTTP/2 prior to my change:\r\n```\r\n00:00:20.4351018: 837 / 2 / 0\r\n00:00:20.3068919: 828 / 5 / 1\r\n00:00:20.5228177: 828 / 7 / 0\r\n00:00:20.4031636: 827 / 9 / 0\r\n00:00:19.8560855: 829 / 16 / 0\r\n00:00:19.9637692: 830 / 19 / 0\r\n00:00:20.2521657: 830 / 22 / 1\r\n```\r\nand these for HTTP/2 with my change:\r\n```\r\n00:00:16.8593566: 332 / 2 / 0\r\n00:00:16.7375893: 329 / 4 / 1\r\n00:00:16.4571576: 327 / 5 / 0\r\n00:00:16.3972835: 326 / 7 / 0\r\n00:00:16.6289501: 327 / 9 / 0\r\n00:00:16.1113589: 329 / 10 / 0\r\n00:00:16.2596736: 328 / 12 / 0\r\n```\r\nAgain, the change helps significantly, but it still a long ways behind 1.1, especially now in throughput, which suggests the HTTP/2 implementation currently has some synchronization bottleneck that's throttling throughput.  That'll need to be investigated separately.\r\n\r\nOne other interesting thing I note which I don't yet have a good explanation for is while the number of gen0 and gen2 GCs remains fairly stable across all of these versions, the number of gen1 GCs gently climbs, and trend that seems to continue without end (for at least a few minutes, which is all I gave it).  We should investigate that, as well.\r\n\r\nFinally, note that all of this is running on one machine, both client and the ASP.NET Core server, so everything should be taken with grains of salt.\r\n\r\nC# code:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.IO;\r\nusing System.Net.Http;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing System.Threading.Tasks;\r\n\r\nclass Test\r\n{\r\n    public static async Task Main(string[] args)\r\n    {\r\n        if (args.Length >= 1 && args[0] == \"2\")\r\n        {\r\n            Environment.SetEnvironmentVariable(\"DOTNET_SYSTEM_NET_HTTP_SOCKETSHTTPHANDLER_HTTP2SUPPORT\", \"true\");\r\n        }\r\n\r\n        int concurrentRequests = 1; //Environment.ProcessorCount;\r\n        var invoker = new HttpMessageInvoker(new SocketsHttpHandler());\r\n        var message = new HttpRequestMessage(HttpMethod.Get, $\"https://localhost:5001/\");\r\n\r\n        var sw = new Stopwatch();\r\n        while (true)\r\n        {\r\n            int gen0 = GC.CollectionCount(0), gen1 = GC.CollectionCount(1), gen2 = GC.CollectionCount(2);\r\n            sw.Restart();\r\n            await Task.WhenAll(Enumerable.Range(0, concurrentRequests).Select(_ => Task.Run(async () =>\r\n            {\r\n                for (int i = 0; i < 50_000; i++)\r\n                {\r\n                    using (HttpResponseMessage r = await invoker.SendAsync(message, default))\r\n                    using (Stream s = await r.Content.ReadAsStreamAsync())\r\n                    {\r\n                        await s.CopyToAsync(Stream.Null);\r\n                    }\r\n                }\r\n            })));\r\n            sw.Stop();\r\n            Console.WriteLine($\"{sw.Elapsed}: {GC.CollectionCount(0) - gen0} / {GC.CollectionCount(1)} / {GC.CollectionCount(2) - gen2}\");\r\n        }\r\n    }\r\n\r\n    private static X509Certificate2 GetServerCertificate()\r\n    {\r\n        var certCollection = new X509Certificate2Collection();\r\n        certCollection.Import(s_testCertBytes, \"testcertificate\", X509KeyStorageFlags.DefaultKeySet);\r\n        return certCollection.Cast<X509Certificate2>().First(c => c.HasPrivateKey);\r\n    }\r\n\r\n    private static readonly byte[] s_testCertBytes = Convert.FromBase64String(@\"MIIVBAIBAzCCFMAGCSqGSIb3DQEHAaCCFLEEghStMIIUqTCCCooGCSqGSIb3DQEHAaCCCnsEggp3MIIKczCCCm8GCyqGSIb3DQEMCgECoIIJfjCCCXowHAYKKoZIhvcNAQwBAzAOBAhCAauyUWggWwICB9AEgglYefzzX/jx0b+BLU/TkAVj1KBpojf0o6qdTXV42drqIGhX/k1WwF1ypVYdHeeuDfhH2eXHImwPTw+0bACY0dSiIHKptm0sb/MskoGI8nlOtHWLi+QBirJ9LSUZcBNOLwoMeYLSFEWWBT69k/sWrc6/SpDoVumkfG4pZ02D9bQgs1+k8fpZjZGoZp1jput8CQXPE3JpCsrkdSdiAbWdbNNnYAy4C9Ej/vdyXJVdBTEsKzPYajAzo6Phj/oS/J3hMxxbReMtj2Z0QkoBBVMc70d+DpAK5OY3et872D5bZjvxhjAYh5JoVTCLTLjbtPRn1g7qh2dQsIpfQ5KrdgqdImshHvxgL92ooC1eQVqQffMnZ0/LchWNb2rMDa89K9CtAefEIF4ve2bOUZUNFqQ6dvd90SgKq6jNfwQf/1u70WKE86+vChXMMcHFeKso6hTE9+/zuUPNVmbRefYAtDd7ng996S15FNVdxqyVLlmfcihX1jGhTLi//WuMEaOfXJ9KiwYUyxdUnMp5QJqO8X/tiwnsuhlFe3NKMXY77jUe8F7I+dv5cjb9iKXAT+q8oYx1LcWu2mj1ER9/b2omnotp2FIaJDwI40Tts6t4QVH3bUNE9gFIfTMK+WMgKBz/JAGvC1vbPSdFsWIqwhl7mEYWx83HJp/+Uqp5f+d8m4phSan2rkHEeDjkUaoifLWHWDmL94SZBrgU6yGVK9dU82kr7jCSUTrnga8qDYsHwpQ22QZtu0aOJGepSwZU7NZNMiyX6QR2hI0CNMjvTK2VusHFB+qnvw+19DzaDT6P0KNPxwBwp07KMQm3HWTRNt9u6gKUmo5FHngoGte+TZdY66dAwCl0Pt+p1v18XlOB2KOQZKLXnhgikjOwYQxFr3oTb2MjsP6YqnSF9EpYpmiNySXiYmrYxVinHmK+5JBqoQCN2C3N24slZkYq+AYUTnNST7Ib2We3bBICOFdVUgtFITRW40T+0XZnIv8G1Kbaq/1avfWI/ieKKxyiYp/ZNXaxc+ycgpsSsAJEuhb83bUkSBpGg9PvFEF0DXm4ah67Ja1SSTmvrCnrOsWZXIpciexMWRGoKrdvd7Yzj9E8hiu+CGTC4T6+7FxVXJrjCg9zU9G2U6g7uxzoyjGj1wqkhxgvl9pPbz6/KqDRLOHCEwRF4qlWXhsJy4levxGtifFt6n7DWaNSsOUf8Nwpi+d4fd7LQ7B5tW/y+/vVZziORueruCWO4LnfPhpJ70g18uyN7KyzrWy29rpE46rfjZGGt0WDZYahObPbw6HjcqSOuzwRoJMxamQb2qsuQnaBS6Bhb5PAnY4SEA045odf/u9uC7mLom2KGNHHz6HrgEPas2UHoJLuxYvY1pza/29akuVQZQUvMA5yMFHHGYZLtTKtCGdVGwX0+QS6ovpV93xux4I/5TrD5U8z9RmTdAx03R3MUhkHF7Zbv5egDNsVar+41YWG4VkV1ZXtsZRKJf0hvKNvrpH0e7fVKBdXljm5PXOSg2VdtkhhOpnKKSMcv6MbGWVi/svWLnc7Qim4A4MDaz+bFVZmh3oGJ7WHvRQhWIcHUL+YJx+064+4IKXZJ/2a/+b2o7C8mJ3GGSBx831ADogg6MRWZx3UY19OZ8YMvpzmZEBRZZnm4KgNpj+SQnf6pGzD2cmnRhzG60LSNPb17iKbdoUAEMkgt2tlMKXpnt1r7qwsIoTt407cAdCEsUH7OU/AjfFmSkKJZ7vC5HweqZPnhgJgZ6LYHlfiRzUR1xeDg8JG0nb0vb7LUE4nGPy39/TxIGos7WNwGpG1QVL/8pKjFdjwREaR8e5CSTlQ7gxHV+G3FFvFGpA1p8cRFzlgE6khDLrSJIUkhkHMA3oFwwAzBNIKVXjToyxCogDqxWya0E1Hw5rVCS/zOCS1De2XQbXs//g46TW0wTJwvgNbs0xLShf3XB+23meeEsMTCR0+igtMMMsh5K/vBUGcJA27ru/KM9qEBcseb/tqCkhhsdj1dnH0HDmpgFf5DfVrjm+P6ickcF2b+Ojr9t7XHgFszap3COpEPGmeJqNOUTuU53tu/O774IBgqINMWvvG65yQwsEO06jRrFPRUGb0eH6UM4vC7wbKajnfDuI/EXSgvuOSZ9wE8DeoeK/5We4pN7MSWoDl39gI/LBoNDKFYEYuAw/bhGp8nOwDKki4a16aYcBGRClpN3ymrdurWsi7TjyFHXfgW8fZe4jXLuKRIk19lmL1gWyD+3bT3mkI2cU2OaY2C0fVHhtiBVaYbxBV8+kjK8q0Q70zf0r+xMHnewk9APFqUjguPguTdpCoH0VAQST9Mmriv/J12+Y+fL6H+jrtDY2zHPxTF85pA4bBBnLA7Qt9TKCe6uuWu5yBqxOV3w2Oa4Pockv1gJzFbVnwlEUWnIjbWVIyo9vo4LBd03uJHPPIQbUp9kCP/Zw+Zblo42/ifyY+a+scwl1q1dZ7Y0L92yJCKm9Qf6Q+1PBK+uU9pcuVTg/Imqcg5T7jFO5QCi88uwcorgQp+qoeFi0F9tnUecfDl6d0PSgAPnX9XA0ny3bPwSiWOA8+uW73gesxnGTsNrtc1j85tail8N6m6S2tHXwOmM65J4XRZlzzeM4D/Rzzh13xpRA9kzm9T2cSHsXEYmSW1X7WovrmYhdOh9K3DPwSyG4tD58cvC7X79UbOB+d17ieo7ZCj+NSLVQO1BqTK0QfErdoVHGKfQG8Lc/ERQRqj132Mhi2/r5Ca7AWdqD7/3wgRdQTJSFXt/akpM44xu5DMTCISEFOLWiseSOBtzT6ssaq2Q35dCkXp5wVbWxkXAD7Gm34FFXXyZrJWAx45Y40wj/0KDJoEzXCuS4Cyiskx1EtYNNOtfDC5wngywmINFUnnW0NkdKSxmDJvrT6HkRKN8ftik7tP4ZvTaTS28Z0fDmWJ+RjvZW+vtF6mrIzYgGOgdpZwG0ZOSKrXKrY3xpMO16fXyawFfBosLzCty7uA57niPS76UXdbplgPanIGFyceTg1MsNDsd8vszXd4KezN2VMaxvw+93s0Uk/3Mc+5MAj+UhXPi5UguXMhNo/CU7erzyxYreOlAI7ZzGhPk+oT9g/MqWa5RpA2IBUaK/wgaNaHChfCcDj/J1qEl6YQQboixxp1IjQxiV9bRQzgwf31Cu2m/FuHTTkPCdxDK156pyFdhcgTpTNy7RPLDGB3TATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkrBgEEAYI3EQExUB5OAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwB0AHIAbwBuAGcAIABDAHIAeQBwAHQAbwBnAHIAYQBwAGgAaQBjACAAUAByAG8AdgBpAGQAZQByMGcGCSqGSIb3DQEJFDFaHlgAQwBlAHIAdABSAGUAcQAtADcAOQA4AGUANQA4AGIANQAtAGMAOQA2ADQALQA0ADcAZQA2AC0AYQAzADIAOQAtADAAMQBjAGEAZABmADcANgAyAGEANgA5MIIKFwYJKoZIhvcNAQcGoIIKCDCCCgQCAQAwggn9BgkqhkiG9w0BBwEwHAYKKoZIhvcNAQwBBjAOBAh+t0PMVhyoagICB9CAggnQwKPcfNq8ETOrNesDKNNYJVXnWoZ9Qjgj9RSpj+pUN5I3B67iFpXClvnglKbeNarNCzN4hXD0I+ce+u+Q3iy9AAthG7uyYYNBRjCWcBy25iS8htFUm9VoV9lH8TUnS63Wb/KZnowew2HVd8QI/AwQkRn8MJ200IxR/cFD4GuVO/Q76aqvmFb1BBHItTerUz7t9izjhL46BLabJKx6Csqixle7EoDOsTCA3H1Vmy2/Hw3FUtSUER23jnRgpRTA48M6/nhlnfjsjmegcnVBoyCgGaUadGE5OY42FDDUW7wT9VT6vQEiIfKSZ7fyqtZ6n4+xD2rVySVGQB9+ROm0mywZz9PufsYptZeB7AfNOunOAd2k1F5y3qT0cjCJ+l4eXr9KRd2lHOGZVoGq+e08ylBQU5HB+Tgm6mZaEO2QgzXOAt1ilS0lDii490DsST62+v58l2R45ItbRiorG/US7+HZHjHUY7EsDUZ+gn3ZZNqh1lAoli5bC1xcjEjNdqq0knyCAUaNMG59UhCWoB6lJpRfVEeQOm+TjgyGw6t3Fx/6ulNPc1V/wcascmahH3kgHL146iJi1p2c2yIJtEB+4zrbYv7xH73c8qXVh/VeuD80I/+QfD+GaW0MllIMyhCHcduFoUznHcDYr5GhJBhU62t6sNnSjtEU1bcd20oHrBwrpkA7g3/Mmny33IVrqooWFe876lvQVq7GtFu8ijVyzanZUs/Cr7k5xX3zjh6yUMAbPiSnTHCl+SEdttkR936fA6de8vIRRGj6eAKqboRxgC1zgsJrj7ZVI7h0QlJbodwY2jzyzcC5khn3tKYjlYeK08iQnzeK5c9JVgQAHyB4uOyfbE50oBCYJE7npjyV7LEN2f7a3GHX4ZWI3pTgbUv+Q1t8BZozQ4pcFQUE+upYucVL3Fr2T8f7HF4G4KbDE4aoLiVrYjy0dUs7rCgjeKu21UPA/BKx4ebjG+TZjUSGf8TXqrJak1PQOG4tExNBYxLtvBdFoOAsYsKjTOfMYpPXp4vObfktFKPcD1dVdlXYXvS5Dtz3qEkwmruA9fPQ6FYi+OFjw0Pkwkr5Tz+0hRMGgb1JRgVo8SVlW/NZZIEbKJdW5ZVLyMzdd1dC0ogNDZLPcPR/HENe2UXtq+0qQw0ekZ+aC2/RvfAMr5XICX8lHtYmQlAFGRhFNuOysHj7V2AJTuOx2wCXtGzrTPc6eyslsWyJign8bD1r+gkejx/qKBwwTvZF1aSmiQmFnmMm0jLj7n8v7v6zHCFTuKF1bHZ44eIwMaUDl6MAgHDdvkPl56rYgq/TM3dKuXnu47GLiRei0EXTT9OMCKcI6XYICsge81ET3k15VfLyI1LNufgqAsafnwl31yqntscXW0NsxW6SkmyXaW1mndxejLBQRjik3civBGTgxgKQbZaO9ZGOrjsSogcCSne+s0zLDxEFjmaYYtpIaU8SFWDja5jyo0jvM3OHUwvElvndZJgreFGG5cKHgwgGKdkYgx6YAvucrgQwqKE/+nxuhkKWtV9D4h9qFAqZbWc9jOPtWx9h3U3gX3NTLY/4Z4iy/FXR9KnKUtCmD1MSRRIOiMca1sNTga3mP/+qSS5u+pyon5c4c/jLdEW0GapDz/yvQcc0MP/21vSoeIkUN+w/RzUBvxrawhHGx+FeLlI249+LBKNBQu4Fbw6G9AYpPJf3PdNc0GRMnantA4B7Rm2NsSGdqqrEMuCw1XxzR6ki4jbLC/ASbcVMr54YsBw+45sggenFshRrYm0QXoUM5XoqEtesby6YfPAjBldyB/QcuULV6QyAeL44YmxOnKD5E5qQwgfcZUxN01eBgbeSS7bZI3zpFwAMdMQ+dtwHXMuhVXuUGLmNTvNe9DupfPGKbaM8louY1Xw4fmg4PaY7MP2mdYQlEXvSg2geICJVuGRBirH+Xv8VPr7lccN++LXv2NmggoUo/d18gvhY8XtOrOMon1QGANPh7SzBjR3v19JD170Z6GuZCLtMh681YkKwW/+Em5rOtexoNQRTjZLNSTthtMyLfAqLk6lZnbbh+7VdCWVfzZoOzUNV+fVwwvyR9ouIzrvDoZ5iGRZU8rEuntap6rBrf9F3FMsz4mvPlCAMp15sovLFpVI8t+8OmKmqQH3LOwd03s6iMJ+0YEWrCaTQYu3kEKoOWC3uhGE8XLSjZBqc3kwVIlzVzOBr97SGjG88JYVDW2FrjQbIv+1yTzOYzMnCDUW3T8GMtfYEQbN6ZtBaD9i4ZeZlQCdkfGuNC6OYO98L7fU4frgff8nNfeka8kHtvNMn4CosFKBRXA5y+kqEE0Qk5feZhfM8NX9x3O0CJobm4HC57VxJ3c0jTe2SA0gAfB4g0keghmDzYgjQAuIY/o1LMKFiBNue4fnXlhU1L402Zlx/lzKDera6o3Xgh9IXj3ZqyFlXa9bkyKDtek0ephTZulLc3NLeb1a3KZxId8OmplR8OcZsHluEu+Z3Der0j8Ro7X7kOnNkUxuTV2blqZ4V8DsYKATeKv4ffc1Ub8MLBd9hMs8ehjmC5jkYApM5HvXl4411mPN6MrF8f2hPVgqrd3p/M80c8wNWjvWIvPLr9Tjqk71hKBq3+Hu0oI1zuoTY2BOhBLyvpjM+mvRd8UlrFJTLGTyCAXvAhIDRIVyrGuscO5Y0sfDc+82Bvrua4FyhZkjb1r8GrGciH0V5HHKjg5dewWnr21qf4q96yf2/ZjoldFFvKiCd8wum9ZV1OaTbjjg46oSpIyBzxl4qpfrgT1ZX1MvGW4uAJ7WQHjSAex7VGr1Sl+ghe5PQBbURyFiu9PnBRMOMjGYkI2lngd3bdehc+i2fPnNe5LgdsBbmUKmEJH96rlkFT8Co+NYBWKBUsBXyfC+kwXDRyNrt2r7VafWWz/cwK0/AJ/Ucq4vz8E0mzy03Gs+ePW+tP9JOHP6leF0TLhbItvQl3DJy0gj6TyrO9S077EVyukFCXeH1/yp04lmq4G0urU+pUf2wamP4BVNcVsikPMYo/e75UI330inXG4+SbJ40q/MQIfYnXydhVmWVCUXkfRFNbcCu7JclIrzS1WO26q6BOgs2GhA3nEan8CKxa85h/oCaDPPMGhkQtCU75vBqQV9Hk2+W5zMSSj7R9RiH34MkCxETtY8IwKa+kiRAeMle8ePAmT6HfcBOdTsVGNoRHQAOZewwUycrIOYJ/54WOmcy9JZW9/clcgxHGXZq44tJ3BDHQQ4qBgVd5jc9Qy9/fGS3YxvsZJ3iN7IMs4Jt3GWdfvwNpJaCBJjiiUntJPwdXMjAeUEZ16Tmxdb1l42rjFSCptMJS2N2EPSNb36+staNgzflctLLpmyEK4wyqjA7MB8wBwYFKw4DAhoEFIM7fHJcmsN6HkU8HxypGcoifg5MBBRXe8XL349R6ZDmsMhpyXbXENCljwICB9A=\");\r\n}\r\n```\r\n\r\ncc: @geoffkizer, @rmkerr, @wfurt, @davidsh, @caesar1995 \r\nFixes https://github.com/dotnet/corefx/issues/31301.  That issue is specifically about Http2Stream, but at the moment the life span around Http2Stream isn't entirely clear, and the buffers represent the bulk of it.  We can revisit pooling Http2Stream later, in particular if/when we've moved to use reusable IValueTaskSource implementations for the response header/data TCS instances; at that point, we would be able to pool the Http2Stream, its credit manager, those TCS instances, and any other objects that end up being a part of this instance.","Url":"https://github.com/dotnet/corefx/pull/35179","RelatedDescription":"Open PR \"Reduce memory allocation in Http2Stream\" (#35179)"},{"Id":"408246939","IsPullRequest":false,"CreatedAt":"2019-02-08T17:17:56","Actor":"michael-hawker","Number":"35178","RawContent":null,"Title":"\"The parameter is incorrect.\" System.Collections.ListDictionaryInternal","State":"open","Body":"I get this error all the time when working on UWP XAML and it's meaningless.\r\n\r\nWhat does this really mean is happening, and how do I know where it is coming from?  There's never a stacktrace in VS.  I know the component is failing, but no idea what's causing the problem.\r\n\r\nIs there a way we can improve this message and debugging experience?","Url":"https://github.com/dotnet/corefx/issues/35178","RelatedDescription":"Open issue \"\"The parameter is incorrect.\" System.Collections.ListDictionaryInternal\" (#35178)"},{"Id":"408213896","IsPullRequest":true,"CreatedAt":"2019-02-08T15:57:59","Actor":"hughbe","Number":"35175","RawContent":null,"Title":"Cleanup some Syndication dead code","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/35175","RelatedDescription":"Open PR \"Cleanup some Syndication dead code\" (#35175)"},{"Id":"408173538","IsPullRequest":true,"CreatedAt":"2019-02-08T14:38:50","Actor":"Dotnet-GitSync-Bot","Number":"35174","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/35174","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#35174)"},{"Id":"408165108","IsPullRequest":false,"CreatedAt":"2019-02-08T14:02:19","Actor":"TylerBrinkley","Number":"35173","RawContent":null,"Title":"LINQ results implicit support for IReadOnlyCollection<T>","State":"open","Body":"When possible, given the input arguments are countable, i.e. have a `Count` or `Length` property, I think the following LINQ methods' results should implicitly implement `IReadOnlyCollection<T>` and thus would be countable for something like populating a default size for a collection from an `IEnumerable<T>` parameter through the use of a check for `IReadOnlyCollection<T>`.\r\n\r\n* `Select`\r\n* `Concat`\r\n* `Cast`\r\n* `OrderBy`\r\n* `OrderByDescending`\r\n* `ThenBy`\r\n* `ThenByDescending`\r\n* `Append`\r\n* `Prepend`\r\n* `Range`\r\n* `Repeat`\r\n* `Reverse`\r\n* `Skip`\r\n* `SkipLast`\r\n* `Take`\r\n* `TakeLast`\r\n* `Zip`\r\n\r\nMy motivation for this issue was spun off from #31868.","Url":"https://github.com/dotnet/corefx/issues/35173","RelatedDescription":"Open issue \"LINQ results implicit support for IReadOnlyCollection<T>\" (#35173)"},{"Id":"408030729","IsPullRequest":true,"CreatedAt":"2019-02-08T07:04:39","Actor":"saucecontrol","Number":"35172","RawContent":null,"Title":"Update brotli to v1.0.7, speed up MSVC-built versions","State":"open","Body":"Brotli has been updated to v1.0.7 in the Google repo.  The first commit in this PR syncs up with the latest release tag (mostly ARM fixes and some code reformatting).\r\n\r\nAdditionally, there are 2 places in the encoder where GCC intrinsics for TZCNT and BSR are used.  I have Added the MSVC equivalents so that we don't have a performance penalty compared to GCC (and compatible) builds.  I submitted a [matching PR](https://github.com/google/brotli/pull/636) over in the Google repo, but the maintainers there have yet to respond.\r\n\r\nI noticed a slight performance regression between 2.1 and the 3.0 previews, which had been updated to Brotli v1.0.5.  This change makes up that perf difference and more.\r\n\r\n``` ini\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.556 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E3-1505M v6 3.00GHz, 1 CPU, 8 logical and 4 physical cores\r\nFrequency=2929685 Hz, Resolution=341.3336 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-preview-010184\r\n  [Host]        : .NET Core 2.1.7 (CoreCLR 4.6.27129.04, CoreFX 4.6.27129.04), 64bit RyuJIT\r\n  2.1.7         : .NET Core 2.1.7 (CoreCLR 4.6.27129.04, CoreFX 4.6.27129.04), 64bit RyuJIT\r\n  3.0-preview-2 : .NET Core 3.0.0-preview-27324-5 (CoreCLR 4.6.27322.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n  PR            : .NET Core 24973de7-9f09-4c96-a4b3-c4463fc81b91 (CoreCLR 4.6.27403.0, CoreFX 4.7.19.7311), 64bit RyuJIT\r\n\r\nJit=RyuJit  Platform=X64  Runtime=Core  \r\n\r\n```\r\n|          Method |           Job | Toolchain | Compressed Size |       Mean |     Error |    StdDev | Ratio | RatioSD |\r\n|---------------- |-------------- |---------- |------ |-----------:|----------:|----------:|------:|--------:|\r\n|  Alice29_q0_w12 |         2.1.7 |   Default | 78217 |   1.488 ms | 0.0237 ms | 0.0222 ms |  1.00 |    0.00 |\r\n|  Alice29_q0_w12 | 3.0-preview-2 |   Default | 78217 |   1.499 ms | 0.0266 ms | 0.0249 ms |  1.01 |    0.00 |\r\n|  Alice29_q0_w12 |            PR |   CoreRun | 78217 |   1.279 ms | 0.0149 ms | 0.0139 ms |  0.86 |    0.00 |\r\n|                 |               |           |       |            |           |           |       |         |\r\n|  Alice29_q5_w16 |         2.1.7 |   Default | 53089 |   7.308 ms | 0.0709 ms | 0.0663 ms |  1.00 |    0.00 |\r\n|  Alice29_q5_w16 | 3.0-preview-2 |   Default | 53089 |   7.808 ms | 0.0862 ms | 0.0719 ms |  1.07 |    0.00 |\r\n|  Alice29_q5_w16 |            PR |   CoreRun | 53089 |   6.061 ms | 0.0455 ms | 0.0404 ms |  0.83 |    0.01 |\r\n|                 |               |           |       |            |           |           |       |         |\r\n| Alice29_q11_w24 |         2.1.7 |   Default | 46487 | 275.866 ms | 2.6656 ms | 2.4934 ms |  1.00 |    0.00 |\r\n| Alice29_q11_w24 | 3.0-preview-2 |   Default | 46487 | 286.640 ms | 2.5965 ms | 2.4288 ms |  1.04 |    0.00 |\r\n| Alice29_q11_w24 |            PR |   CoreRun | 46487 | 260.619 ms | 2.2509 ms | 1.9954 ms |  0.94 |    0.00 |\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35172","RelatedDescription":"Open PR \"Update brotli to v1.0.7, speed up MSVC-built versions\" (#35172)"},{"Id":"408003565","IsPullRequest":true,"CreatedAt":"2019-02-08T04:39:15","Actor":"baulig","Number":"35170","RawContent":null,"Title":"Fix ServerAsyncAuthenticateTest.","State":"open","Body":"I don't quite understand how this test could possibly work before without throwing a certificate validation exception in `AuthenticateAsClientAsync()`.\r\n\r\nIt was calling `new SslStream(clientConnection.GetStream())` to create the client stream (without passing any certificate validation callback), then called `AuthenticateAsClientAsync(serverName,null,clientSslProtocols,false)` on the returned object.  This should fail with a certificate validation exception.\r\n\r\nAdded a validation callback to the client stream that's accepting any server certificate.","Url":"https://github.com/dotnet/corefx/pull/35170","RelatedDescription":"Open PR \"Fix ServerAsyncAuthenticateTest.\" (#35170)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"408122881","IsPullRequest":true,"CreatedAt":"2019-02-09T02:00:06","Actor":"dotnet-bot","Number":"33248","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33248","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33248)"},{"Id":"408383783","IsPullRequest":true,"CreatedAt":"2019-02-09T01:43:32","Actor":"ivanbasov","Number":"33269","RawContent":null,"Title":"Completion List is broken for #r and #load in C# Interactive Window","State":"open","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781898","Url":"https://github.com/dotnet/roslyn/pull/33269","RelatedDescription":"Open PR \"Completion List is broken for #r and #load in C# Interactive Window\" (#33269)"},{"Id":"408382107","IsPullRequest":false,"CreatedAt":"2019-02-09T01:27:36","Actor":"kendrahavens","Number":"33268","RawContent":null,"Title":"Include naming convention when exporting from Tools > Options to .editorconfig","State":"open","Body":"Originally submitted on [developer community](https://developercommunity.visualstudio.com/content/idea/411815/include-also-naming-convention-when-export-to-edit.html).\r\n\r\n**Version Used**: \r\nVisual Studio 2019 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Create a naming rule in editor settings.\r\n2. Export code style settings to editorconfig\r\n\r\n**Expected Behavior**:\r\nEditorconfig has generated naming rule that follows the [dotnet_naming](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions) conventions.\r\n\r\n**Actual Behavior**:\r\nEditorconfig does not export naming rules.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33268","RelatedDescription":"Open issue \"Include naming convention when exporting from Tools > Options to .editorconfig\" (#33268)"},{"Id":"408376455","IsPullRequest":true,"CreatedAt":"2019-02-09T00:48:09","Actor":"JoeRobich","Number":"33267","RawContent":null,"Title":"Use TaggedTextExtension method for getting ClassificationTypeName","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/33266\r\n\r\n@heejaechang ","Url":"https://github.com/dotnet/roslyn/pull/33267","RelatedDescription":"Open PR \"Use TaggedTextExtension method for getting ClassificationTypeName\" (#33267)"},{"Id":"408374100","IsPullRequest":false,"CreatedAt":"2019-02-09T00:31:32","Actor":"heejaechang","Number":"33266","RawContent":null,"Title":"Assert in completion in razor file","State":"open","Body":"repro step is just create razor project and add empty cstml file at the root.\r\n\r\nremove everything in the cstml and type this at the top\r\n\r\n@await Html.PartialAsync\r\n\r\n...\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/52513328-fb375980-2bbe-11e9-94cf-6b741cc30f71.png)\r\n\r\n...\r\n\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nUnexpected value 'ExtensionMethod' of type 'System.String'\r\n\r\n\r\n\r\n   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(Object o)\r\n\r\n   at Microsoft.CodeAnalysis.Classification.ClassificationTags.GetClassificationTypeName(String textTag)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetVisibleDisplayString(TaggedText part, Boolean includeLeftToRightMarker)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetRun(TaggedText part, IClassificationFormatMap formatMap, ClassificationTypeMap typeMap)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetTextBlock(ImmutableArray`1 parts)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.ProcessDescription(Task`1 obj)\r\n\r\n   at System.Threading.Tasks.ContinuationTaskFromResultTask`1.InnerInvoke()\r\n\r\n   at System.Threading.Tasks.Task.Execute()\r\n\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n\r\n\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n","Url":"https://github.com/dotnet/roslyn/issues/33266","RelatedDescription":"Open issue \"Assert in completion in razor file\" (#33266)"},{"Id":"408369064","IsPullRequest":true,"CreatedAt":"2019-02-09T00:00:28","Actor":"dotnet-bot","Number":"33265","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33265","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#33265)"},{"Id":"408367913","IsPullRequest":true,"CreatedAt":"2019-02-08T23:53:58","Actor":"jasonmalinowski","Number":"33264","RawContent":null,"Title":"Compute relative folder information if we aren't given it","State":"open","Body":"We added a new API IProjectSiteEx.AddFileEx that takes the link metadata for an item so we don't have to query an IVsHierarchy to figure out where the file is linked into. If we don't have a link though, we should compute the relative folder to the project directory and use that.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33171","Url":"https://github.com/dotnet/roslyn/pull/33264","RelatedDescription":"Open PR \"Compute relative folder information if we aren't given it\" (#33264)"},{"Id":"408353776","IsPullRequest":false,"CreatedAt":"2019-02-08T22:47:58","Actor":"vsfeedback","Number":"33263","RawContent":null,"Title":" C# implicitly change nullability of property","State":"open","Body":"This is a proposed improvement of the null checking of properties in C#.\nI have a nullable property in the base class (see SearchParameters.Url in the example code). The constructor of the child class (SuccessAnalysisParameters) ensures this property is not null.\n\nWhen using the child class, I didn't expect a warning to tell me this property can be null. This is a false positive.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414634/c-implicitly-change-nullability-of-property.html\nVSTS ticketId: 756307_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33263","RelatedDescription":"Open issue \" C# implicitly change nullability of property\" (#33263)"},{"Id":"408346339","IsPullRequest":true,"CreatedAt":"2019-02-08T22:20:45","Actor":"jasonmalinowski","Number":"33262","RawContent":null,"Title":"Ensure that MSBuildWorkspace deals with duplicate ProjectReferences","State":"open","Body":"The workspace isn't supposed to allow duplicate ProjectReferences, but currently due to #12101 it does. This dedups (correctly) at the surface and also adds a test to ensure this isn't broken.\r\n\r\nFixes #31390. Further work will address #12101, but no matter how we address that it's good to have tests at the MSBuildWorkspace layer to make sure some additional bugs don't creep in there in it's processing.\r\n\r\nSpecial thanks to @alexbuyn for #32557 that helped alert to the root cause here, and @aolszowka for also chiming in with a bit of details about their scenario to confirm this should help fix it.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nCustomer uses a tool built atop MSBuildWorkspace, and they have a project with duplicate ProjectReferences where the exact same project is being referenced twice in the exact same way. This tool will probably crash when ran on this solution.\r\n\r\n### Bugs this fixes\r\n\r\n#31390\r\n\r\n### Workarounds, if any\r\n\r\nFix the duplicate project reference. Unfortunately the crash is deep within the CompilationTracker, which won't really hint to the user that anything is wrong.\r\n\r\n### Risk\r\n\r\nVery low, the actual core fix is just replacing an ImmutableArray with an ImmutableHashSet. This API is not used in Visual Studio and thus does not pose a risk there.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNot clear. The underlying Workspace bug is positively ancient.\r\n\r\n### Root cause analysis\r\n\r\nWe didn't have any tests, and it wasn't obvious the underlying Workspace bug would actual result in crashes.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reports.\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/33262","RelatedDescription":"Open PR \"Ensure that MSBuildWorkspace deals with duplicate ProjectReferences\" (#33262)"},{"Id":"408323989","IsPullRequest":true,"CreatedAt":"2019-02-08T21:06:55","Actor":"jaredpar","Number":"33261","RawContent":null,"Title":"Nullable constraint checking outside method bodies","State":"open","Body":"Our constraint validation around nullability was only being done properly inside method bodies. This implements the checking in all other places: method signatures, base type lists, using static, etc ...\r\n\r\ncloses #32953","Url":"https://github.com/dotnet/roslyn/pull/33261","RelatedDescription":"Open PR \"Nullable constraint checking outside method bodies\" (#33261)"},{"Id":"408313052","IsPullRequest":false,"CreatedAt":"2019-02-08T20:32:51","Actor":"miloush","Number":"33260","RawContent":null,"Title":"NullReferenceException when renaming a member (The file '' could not be refactored)","State":"open","Body":"**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.2+28602.52 but I have seen this occasionally for several builds now including VS15.\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/10546952/52504402-47df5c80-2be0-11e9-9b48-da88d2a3e3f7.png)\r\n\r\nin a WPF project, this time renaming static property of a static partial class.\r\n\r\n**Expected Behavior**: No exception, or at least file name filled in so that I can judge whether to continue or cancel.\r\n\r\n**Steps to Reproduce**: Sadly I don't have steps to reproduce, but I have a stack:\r\n\r\nA NullReferenceException is thrown in a task:\r\n```\r\nMicrosoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.CreateFileContextForBuffer(Microsoft.VisualStudio.Text.ITextBuffer buffer)\r\nMicrosoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.CodeAnalysis.Xaml.Shared.TextBufferExtensions.GetFileInformationContextAsync.AnonymousMethod__0()\r\nmscorlib.dll!System.Threading.Tasks.Task<Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.IXamlFileInformationContext>.InnerInvoke()\r\nmscorlib.dll!System.Threading.Tasks.Task.Execute()\r\n```\r\n\r\nand the callsite is:\r\n```\r\nmscorlib.dll!System.Threading.Tasks.Task<System.__Canon>.Result.get()\tUnknown\r\nMicrosoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.GetFileContextScope(string fileName, Microsoft.VisualStudio.TextManager.Interop.IVsTextLines textLines, out Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.IXamlFileInformationContext fileContext = null)\tUnknown\r\nMicrosoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.CreateContextIfReferences(string[] rglpszRQNames = {string[1]}, Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.ReferenceOptions options = All, Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.FileContext fileContext = {Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.FileContext}, out Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor invisibleEditor)\tUnknown\r\nMicrosoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify.OnBeforeGlobalSymbolRenamed(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy, uint itemid, uint cRQNames, string[] rglpszRQName = {string[1]}, string lpszNewName, out System.Array prgAdditionalCheckoutVSITEMIDs = {uint[0]})\tUnknown\r\n[Native to Managed Transition]\t\r\n[Managed to Native Transition]\t\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.VsRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> changedDocumentIDs, Microsoft.CodeAnalysis.ISymbol symbol, string newName = \"InformationSheets\", bool throwOnFailure = false)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Extensions.IRefactorNotifyServiceExtensions.TryOnBeforeGlobalSymbolRenamed(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Editor.IRefactorNotifyService> refactorNotifyServices, Microsoft.CodeAnalysis.Workspace workspace = {Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace}, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> changedDocuments = Count = 1, Microsoft.CodeAnalysis.ISymbol symbol = The runtime is unable to evaluate this expression., string newName = \"InformationSheets\", bool throwOnFailure = false)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.DocumentId> changedDocumentIDs, string replacementText)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Microsoft.CodeAnalysis.Solution newSolution = {Microsoft.CodeAnalysis.Solution}, Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext = {Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitContext})\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext, bool previewChanges = false)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext)\tUnknown\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action<Microsoft.CodeAnalysis.Editor.Host.IWaitContext> action)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(bool previewChanges)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs args = {Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs}, Microsoft.VisualStudio.Commanding.CommandExecutionContext context)\tUnknown\r\nMicrosoft.VisualStudio.Text.UI.dll!Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand<Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs>(Microsoft.VisualStudio.Commanding.ICommandHandler commandHandler, Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs args, System.Action nextCommandHandler = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.}, Microsoft.VisualStudio.Commanding.CommandExecutionContext executionContext)\tUnknown\r\nMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute.AnonymousMethod__1()\tUnknown\r\nMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(object errorSource = {Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler}, System.Action call = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.}, System.Predicate<System.Exception> exceptionFilter = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.})\tUnknown\r\nMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute.AnonymousMethod__0()\tUnknown\r\nMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.ExecuteCommandHandlerChain(Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerServiceState state = {Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerServiceState}, System.Action handlerChain, System.Action nextCommandHandler = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.})\tUnknown\r\nMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute<Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs>(System.Func<Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs> argsFactory, System.Action nextCommandHandler)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteReturnKeyCommand(System.Action next)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteVisualStudio2000(uint commandId, System.IntPtr pvaIn, System.Action next)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000.__executeNextCommandTarget|0()\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers<Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs>(System.Collections.Generic.IList<Microsoft.CodeAnalysis.Editor.ICommandHandler<Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs>> commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs args, System.Action lastHandler)\tUnknown\r\nMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute<Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs>(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs args, System.Action lastHandler)\tUnknown\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteReturn(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget)\tUnknown\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType)\tUnknown\r\nMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup = {System.Guid}, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn = 0x00000000, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\nMicrosoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(ref System.Guid pguidCmdGroup = {System.Guid}, uint nCmdID = 3, uint nCmdexecopt = 0, System.IntPtr pvaIn = 0x00000000, System.IntPtr pvaOut = 0x00000000)\tUnknown\r\nMicrosoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)\tUnknown\r\n```\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33260","RelatedDescription":"Open issue \"NullReferenceException when renaming a member (The file '' could not be refactored)\" (#33260)"},{"Id":"408311006","IsPullRequest":true,"CreatedAt":"2019-02-08T20:26:22","Actor":"tmat","Number":"33259","RawContent":null,"Title":"Update install x-copy build","State":"open","Body":"Fall back to xcopy msbuild for execution of Arcade SDK tasks.\r\n\r\nInfrastructure only change.","Url":"https://github.com/dotnet/roslyn/pull/33259","RelatedDescription":"Open PR \"Update install x-copy build\" (#33259)"},{"Id":"408122780","IsPullRequest":true,"CreatedAt":"2019-02-08T19:30:14","Actor":"dotnet-bot","Number":"33247","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33247","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33247)"},{"Id":"408283356","IsPullRequest":true,"CreatedAt":"2019-02-08T19:04:12","Actor":"sharwell","Number":"33258","RawContent":null,"Title":"Allow file banner comments to be documentation comments","State":"open","Body":"Fixes #33251","Url":"https://github.com/dotnet/roslyn/pull/33258","RelatedDescription":"Open PR \"Allow file banner comments to be documentation comments\" (#33258)"},{"Id":"408282874","IsPullRequest":false,"CreatedAt":"2019-02-08T19:02:48","Actor":"333fred","Number":"33257","RawContent":null,"Title":"Type Parameters are not being correctly inferred on indexers","State":"open","Body":"```C#\r\nusing System.Collections.Generic;\r\nclass C\r\n{\r\n    void M(object? o)\r\n    {\r\n        L(o)[0].ToString(); // Should get a warning\r\n        foreach (var x in L(o))\r\n        {\r\n            x.ToString(); // Should get a warning\r\n        }\r\n    }\r\n\r\n    List<T> L<T>(T t) => null!;\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33257","RelatedDescription":"Open issue \"Type Parameters are not being correctly inferred on indexers\" (#33257)"},{"Id":"408259890","IsPullRequest":false,"CreatedAt":"2019-02-08T17:55:06","Actor":"AlekseyTs","Number":"33256","RawContent":null,"Title":"Unexpected errors are reported when type imported from metadata implements interface property in way that doesn't follow C# language rules","State":"open","Body":"```\r\n        [ConditionalFact(typeof(CoreClrOnly))]\r\n        public void ExplicitBase_134()\r\n        {\r\n            var ilSource = @\"\r\n.assembly extern System.Runtime\r\n{\r\n  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:\r\n  .ver 4:2:1:0\r\n}\r\n.assembly extern System.Console\r\n{\r\n  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:\r\n  .ver 4:1:1:0\r\n}\r\n\r\n.assembly ExplicitBase_134\r\n{\r\n  .hash algorithm 0x00008004\r\n  .ver 0:0:0:0\r\n}\r\n.module ExplicitBase_134.dll\r\n// MVID: {22493430-1D63-4B15-9B42-F868AA6D50D5}\r\n.imagebase 0x10000000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003       // WINDOWS_CUI\r\n.corflags 0x00000001    //  ILONLY\r\n// Image base: 0x00AD0000\r\n\r\n\r\n// =============== CLASS MEMBERS DECLARATION ===================\r\n\r\n.class interface public abstract auto ansi B\r\n       implements I1,\r\n                  C,\r\n                  I2\r\n{\r\n} // end of class B\r\n\r\n.class interface public abstract auto ansi I1\r\n       implements C\r\n{\r\n  .method public hidebysig specialname virtual final \r\n          instance char  C.get_F1() cil managed\r\n  {\r\n    .override C::get_F1\r\n    // Code size       3 (0x3)\r\n    .maxstack  8\r\n    IL_0000:  ldc.i4.s   49\r\n    IL_0002:  ret\r\n  } // end of method I1::C.get_F1\r\n\r\n  .property instance char C.F1()\r\n  {\r\n    .get instance char I1::C.get_F1()\r\n  } // end of property I1::C.F1\r\n} // end of class I1\r\n\r\n.class interface public abstract auto ansi I2\r\n       implements C\r\n{\r\n  .method public hidebysig specialname virtual final \r\n          instance void  C.set_F1(char 'value') cil managed\r\n  {\r\n    .override C::set_F1\r\n    // Code size       12 (0xc)\r\n    .maxstack  8\r\n    IL_0000:  ldstr      \"\"set 2\"\"\r\n    IL_0005:  call       void [System.Console]System.Console::WriteLine(string)\r\n    IL_000a:  nop\r\n    IL_000b:  ret\r\n  } // end of method I2::C.set_F1\r\n\r\n  .property instance char C.F1()\r\n  {\r\n    .set instance void I2::C.set_F1(char)\r\n  } // end of property I2::C.F1\r\n} // end of class I2\r\n\r\n.class interface public abstract auto ansi C\r\n{\r\n  .method public hidebysig newslot specialname abstract virtual \r\n          instance char  get_F1() cil managed\r\n  {\r\n  } // end of method C::get_F1\r\n\r\n  .method public hidebysig newslot specialname abstract virtual \r\n          instance void  set_F1(char 'value') cil managed\r\n  {\r\n  } // end of method C::set_F1\r\n\r\n  .property instance char F1()\r\n  {\r\n    .get instance char C::get_F1()\r\n    .set instance void C::set_F1(char)\r\n  } // end of property C::F1\r\n} // end of class C\r\n\r\n.class public auto ansi beforefieldinit D\r\n       extends [System.Runtime]System.Object\r\n       implements B,\r\n                  I1,\r\n                  C,\r\n                  I2\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    // Code size       8 (0x8)\r\n    .maxstack  8\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  call       instance void [System.Runtime]System.Object::.ctor()\r\n    IL_0006:  nop\r\n    IL_0007:  ret\r\n  } // end of method A::.ctor\r\n} // end of class A\r\n\";\r\n\r\n            var source1 = @\"\r\nclass A : B\r\n{\r\n    void Test()\r\n    {\r\n        _ = base(B).F1;\r\n        base(B).F1 = 'x';\r\n    }\r\n}\r\n\";\r\n\r\n            var reference = CompileIL(ilSource, prependDefaultHeader: false);\r\n\r\n            var compilation1 = CreateCompilation(source1, references: new[] { reference },\r\n                                                 options: TestOptions.DebugDll, targetFramework: TargetFramework.NetStandardLatest);\r\n            compilation1.VerifyDiagnostics(\r\n                // (2,11): error CS0535: 'A' does not implement interface member 'C.F1'\r\n                // class A : B\r\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, \"B\").WithArguments(\"A\", \"C.F1\").WithLocation(2, 11)\r\n                );\r\n\r\n            var source2 = @\"\r\nclass A : D, C\r\n{\r\n    char C.F1 { get => 'A'; set => System.Console.WriteLine(\"\"set A\"\");}\r\n\r\n    void Test()\r\n    {\r\n        System.Console.WriteLine(base(B).F1);\r\n        base(B).F1 = 'x';\r\n    }\r\n\r\n    static void Main()\r\n    {\r\n        new A().Test();\r\n        C d = new D();\r\n        System.Console.WriteLine(d.F1);\r\n        d.F1 = 'x';\r\n    }\r\n}\r\n\";\r\n            var compilation2 = CreateCompilation(source2, references: new[] { reference },\r\n                                                 options: TestOptions.DebugExe, targetFramework: TargetFramework.NetStandardLatest);\r\n            compilation2.VerifyDiagnostics();\r\n\r\n            var c = compilation2.GetTypeByMetadataName(\"C\");\r\n            var f1 = c.GetMember<PropertySymbol>(\"F1\");\r\n            var d = compilation2.GetTypeByMetadataName(\"D\");\r\n\r\n            Assert.Null(d.FindImplementationForInterfaceMember(f1));\r\n            Assert.Equal(\"System.Char I1.F1.get\", d.FindImplementationForInterfaceMember(f1.GetMethod).ToTestDisplayString());\r\n            Assert.Equal(\"void I2.F1.set\", d.FindImplementationForInterfaceMember(f1.SetMethod).ToTestDisplayString());\r\n\r\n            CompileAndVerify(compilation2, expectedOutput:\r\n@\"\r\n1\r\nset 2\r\n1\r\nset 2\r\n\"\r\n);\r\n\r\n            var source3 = @\"\r\nclass A : D, B\r\n{\r\n    static void Main()\r\n    {\r\n        C a = new A();\r\n        System.Console.WriteLine(a.F1);\r\n        a.F1 = 'x';\r\n    }\r\n}\r\n\";\r\n            var compilation3 = CreateCompilation(source3, references: new[] { reference },\r\n                                                 options: TestOptions.DebugExe, targetFramework: TargetFramework.NetStandardLatest);\r\n            compilation3.VerifyDiagnostics();\r\n            CompileAndVerify(compilation3, expectedOutput:\r\n@\"\r\n1\r\nset 2\r\n\"\r\n);\r\n        }\r\n```\r\n\r\nObserved: An error is reported for compilation1.\r\nExpected: No errors should be reported, compilation2 and compilation3 demonstrate that runtime considers Interface C fully implemented by interface B. ","Url":"https://github.com/dotnet/roslyn/issues/33256","RelatedDescription":"Open issue \"Unexpected errors are reported when type imported from metadata implements interface property in way that doesn't follow C# language rules\" (#33256)"},{"Id":"408122913","IsPullRequest":true,"CreatedAt":"2019-02-08T17:53:16","Actor":"dotnet-bot","Number":"33249","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33249","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33249)"},{"Id":"408233042","IsPullRequest":false,"CreatedAt":"2019-02-08T16:43:14","Actor":"DustinCampbell","Number":"33255","RawContent":null,"Title":"Fix Formatting code fix appears above Add Using, breaking user muscle memory","State":"open","Body":"**Version Used**: Dev16 Preview 3\r\n\r\n![image](https://user-images.githubusercontent.com/116161/52492045-50527b80-2b7d-11e9-81e6-540a5b896e39.png)\r\n\r\nTrying to add using for `System.Diagnostics` in the screenshot above is broken because a space has already been typed, causing `Fix formatting` to appear. This is a very irritating muscle memory break!","Url":"https://github.com/dotnet/roslyn/issues/33255","RelatedDescription":"Open issue \"Fix Formatting code fix appears above Add Using, breaking user muscle memory\" (#33255)"},{"Id":"408030338","IsPullRequest":true,"CreatedAt":"2019-02-08T16:36:54","Actor":"JoeRobich","Number":"33243","RawContent":null,"Title":"Dev16.1 preview1 vs deps migration","State":"closed","Body":"part of preview4 snap @RikkiGibson ","Url":"https://github.com/dotnet/roslyn/pull/33243","RelatedDescription":"Closed or merged PR \"Dev16.1 preview1 vs deps migration\" (#33243)"},{"Id":"408012699","IsPullRequest":true,"CreatedAt":"2019-02-08T15:51:06","Actor":"RikkiGibson","Number":"33241","RawContent":null,"Title":"Dev16.1 preview1 vs deps migration","State":"closed","Body":"part of preview4 snap @JoeRobich ","Url":"https://github.com/dotnet/roslyn/pull/33241","RelatedDescription":"Closed or merged PR \"Dev16.1 preview1 vs deps migration\" (#33241)"},{"Id":"408188474","IsPullRequest":false,"CreatedAt":"2019-02-08T14:59:42","Actor":"sharwell","Number":"33254","RawContent":null,"Title":"The \"current line\" indicator disappeared when deleting spaces twice","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/238276\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the following code:\r\n\r\n    ```csharp\r\n    static void Main(string[] args)\r\n    {\r\n        int a, b, c, d;\r\n        a = 1;\r\n        b = 2;\r\n        c = 3;\r\n        d = 4;\r\n    }\r\n    ```\r\n\r\n2. Set a breakpoint on `c = 3;`\r\n3. Start debugging and wait for the breakpoint to get hit\r\n4. Delete the spaces before `c = 3;`\r\n5. Press <kbd>Ctrl</kbd>+<kbd>Z</kbd>\r\n6. Repeat step (4)\r\n\r\n**Expected Behavior**:\r\n\r\nThe debugger still shows `c = 3;` as the current line (with the yellow arrow).\r\n\r\n**Actual Behavior**:\r\n\r\nAfter step (6), the yellow arrow goes away and the current line is now shown.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33254","RelatedDescription":"Open issue \"The \"current line\" indicator disappeared when deleting spaces twice\" (#33254)"},{"Id":"408181296","IsPullRequest":false,"CreatedAt":"2019-02-08T14:43:00","Actor":"sharwell","Number":"33253","RawContent":null,"Title":"Smart Indent does not handle fluent sequences correctly","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/237805\r\n\r\n**Steps to Reproduce**:\r\n\r\nPress <kbd>Enter</kbd> at the location of the `$$`:\r\n\r\n```csharp\r\npublic class Test\r\n{\r\n    public void Test()\r\n    {\r\n        new List<DateTime>()\r\n            .Where(d => d.Kind == DateTimeKind.Local ||\r\n                        d.Kind == DateTimeKind.Utc)$$\r\n            .ToArray();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\npublic class Test\r\n{\r\n    public void Test()\r\n    {\r\n        new List<DateTime>()\r\n            .Where(d => d.Kind == DateTimeKind.Local ||\r\n                        d.Kind == DateTimeKind.Utc)\r\n            $$\r\n            .ToArray();\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\npublic class Test\r\n{\r\n    public void Test()\r\n    {\r\n        new List<DateTime>()\r\n            .Where(d => d.Kind == DateTimeKind.Local ||\r\n                        d.Kind == DateTimeKind.Utc)\r\n                        $$\r\n            .ToArray();\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33253","RelatedDescription":"Open issue \"Smart Indent does not handle fluent sequences correctly\" (#33253)"},{"Id":"408176530","IsPullRequest":false,"CreatedAt":"2019-02-08T14:31:23","Actor":"sharwell","Number":"33252","RawContent":null,"Title":"Hovering over cast evaluates property value in debugger","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/233955\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new WPF application\r\n2. In the main window constructor, add the following:\r\n\r\n    ```csharp\r\n    BooleanToVisibilityConverter converter = new BooleanToVisibilityConverter();\r\n    Visibility x = (Visibility)converter.Convert(true, null, null, null);\r\n    ```\r\n\r\n3. Set a breakpoint on one of the lines above\r\n4. When the breakpoint is hit, hover over the `(Visibility)` type cast\r\n\r\n**Expected Behavior**:\r\n\r\nQuick Info is not shown (default behavior for hovering over a *type* while debugging).\r\n\r\n**Actual Behavior**:\r\n\r\nQuick Info shows the value of `this.Visibility` (default behavior for hovering over a *property* while debugging).\r\n","Url":"https://github.com/dotnet/roslyn/issues/33252","RelatedDescription":"Open issue \"Hovering over cast evaluates property value in debugger\" (#33252)"},{"Id":"408143231","IsPullRequest":false,"CreatedAt":"2019-02-08T13:02:35","Actor":"sharwell","Number":"33251","RawContent":null,"Title":"Sort Usings moves incorrect documentation-style header comment ","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 2\r\n\r\n🔗 Originally reported as https://developercommunity.visualstudio.com/content/problem/446125/code-clean-mess-with-using-statements.html\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add using directives to the top of a file, where the first is not in the correct location\r\n2. Add a file header comment using documentation comment syntax (even though it's not valid at this location)\r\n3. Run Sort Usings\r\n\r\n\r\n```csharp\r\n/** This is a documentation comment; it should have only contained one starting asterisk.\r\n */\r\n\r\nusing Y;\r\nusing X;\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\n/** This is a documentation comment; it should have only contained one starting asterisk.\r\n */\r\n\r\nusing X;\r\nusing Y;\r\n```\r\n\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nusing Y;\r\n/** This is a documentation comment; it should have only contained one starting asterisk.\r\n */\r\n\r\nusing X;\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33251","RelatedDescription":"Open issue \"Sort Usings moves incorrect documentation-style header comment \" (#33251)"},{"Id":"408131392","IsPullRequest":false,"CreatedAt":"2019-02-08T12:27:11","Actor":"alrz","Number":"33250","RawContent":null,"Title":"Do not suggest static members in property pattern clause context","State":"open","Body":"**Version Used**: 2019 P2\r\n\r\n**Steps to Reproduce**:\r\n\r\n![image](https://user-images.githubusercontent.com/3105979/52478249-08057e80-2bba-11e9-947a-3023b3c1b29a.png)\r\n\r\n\r\nAlso upon selection I expect the colon to be inserted too, since it appears on the list.","Url":"https://github.com/dotnet/roslyn/issues/33250","RelatedDescription":"Open issue \"Do not suggest static members in property pattern clause context\" (#33250)"},{"Id":"408110699","IsPullRequest":false,"CreatedAt":"2019-02-08T11:23:35","Actor":"miloush","Number":"33246","RawContent":null,"Title":"C# Interactive reports localized exception messages","State":"open","Body":"**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.2+28602.52\r\n\r\n**Steps to Reproduce**:\r\n\r\nIn C# Interactive window, execute `-;`\r\n\r\n**Expected Behavior**: `(1,2): error CS1525: Invalid expression term ';'` (the same as in VS 2017)\r\n\r\n**Actual Behavior**: `(1,2): error CS1525: Neplatný výraz ;`\r\n\r\n* Only English Visual Studio Language Pack installed.\r\n* No .NET Framework language pack installed (as per Control Panel anyway).\r\n* Both VS 2017 and VS 2019 report `en-GB` for `System.Threading.Thread.CurrentThread.CurrentUICulture.Name`.\r\n* Both VS 2017 and VS 2019 show English error in the Error window.\r\n* My Windows display language (and Thread.CurrentUICulture) is en-GB and all UI is in English.\r\n* My preferred language list starts with en-GB and cs-CZ (in this order). en-GB entry is marked as Default app language, Default input language and Windows display language.\r\n* Formatting, system locale (and Thread.CurrentCulture) is cs-CZ.\r\n* The only thing I could think of remotely blaming is the automatic OS language pack installation of all preferred languages, it says language pack installed for at least 9 languages in the preferred language list, including cs-CZ (and these are installed in random order). Nevertheless, VS 2017 still shows the errors in English as expected.","Url":"https://github.com/dotnet/roslyn/issues/33246","RelatedDescription":"Open issue \"C# Interactive reports localized exception messages\" (#33246)"},{"Id":"408057483","IsPullRequest":false,"CreatedAt":"2019-02-08T08:53:02","Actor":"ygoe","Number":"33245","RawContent":null,"Title":"Cannot be used in a project built with VS2015","State":"open","Body":"**Version Used**: \r\n2.10.0 (NuGet)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a WPF .NET 4.6.2 project with VS2017 and install this NuGet package\r\n2. Add real busieness code\r\n3. Copy the source code to a machine with nothing but .NET 4.6.2 + SDK and VS2015\r\n4. Build with VS2015\r\n\r\n**Expected Behavior**:\r\nBuilds\r\n\r\n**Actual Behavior**:\r\nDoes not build because suddenly it can't find types like `Func<,>` or the `>` operator of `int` or `IList<>`. It recommends me to add a reference to \"netstandard 2.0.0.0\". I don't have that DLL laying around here. Seems like the Roslyn package broke all project references.\r\n\r\nThe project worked everywhere before, without the Roslyn package. It has 300k LoC in 800 source files.","Url":"https://github.com/dotnet/roslyn/issues/33245","RelatedDescription":"Open issue \"Cannot be used in a project built with VS2015\" (#33245)"},{"Id":"408055829","IsPullRequest":false,"CreatedAt":"2019-02-08T08:46:52","Actor":"davkean","Number":"33244","RawContent":null,"Title":"Default code fix for unused values from properties is not useful","State":"open","Body":"Below contains two instances of IDE0059:\r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nclass Program\r\n{\r\n    private static readonly Dictionary<string, int> _foo;\r\n    static void Main(string[] args)\r\n    {\r\n        var value2 = Console.Out;\r\n\r\n        _foo.TryGetValue(\"Foo\", out int value2);\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tCategory\tSuppression State\r\nMessage\tIDE0059\tValue assigned to 'value1' is never used\tConsoleApp11\tD:\\Personal\\davkean\\ConsoleApp11\\ConsoleApp11\\Program.cs\t9\tStyle\tActive\r\nMessage\tIDE0059\tValue assigned to 'value2' is never used\tConsoleApp11\tD:\\Personal\\davkean\\ConsoleApp11\\ConsoleApp11\\Program.cs\t11\tStyle\tActive\r\n```\r\n\r\nBoth would be fixed in two very different ways, the first case I would delete the entire line, the second I would use a discard (_). \r\n\r\nRunning the \"fix all\" that fixes these two situations, results in the following:\r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nclass Program\r\n{\r\n    private static readonly Dictionary<string, int> _foo;\r\n    static void Main(string[] args)\r\n    {\r\n        _ = Console.Out;\r\n\r\n        _foo.TryGetValue(\"Foo\", out int _);\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis is not useful, that redundant assignment from Console.Out *could* have a side effect, but most the time I'm going to delete the entire line. Given I have ~500 instances of above situations, I can't run the fix all for the out variables because it goes ahead and introduces a bunch of discards for my unused property values. This results in me inspect every fix manually.\r\n\r\nCan we please split these two cases? They are likely to have two very different fixes.","Url":"https://github.com/dotnet/roslyn/issues/33244","RelatedDescription":"Open issue \"Default code fix for unused values from properties is not useful\" (#33244)"},{"Id":"408022949","IsPullRequest":false,"CreatedAt":"2019-02-08T06:25:46","Actor":"davkean","Number":"33242","RawContent":null,"Title":"ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body","State":"open","Body":"1. Highlight between the $$ (after removing them)\r\n\r\n``` C#\r\n\r\n        private sealed class GraphIconCache\r\n        {\r\n            private ImmutableHashSet<ImageMoniker> _registeredIcons = ImmutableHashSet<ImageMoniker>.Empty;\r\n\r\n            private ImmutableDictionary<(int id, Guid guid), string> _iconNameCache = ImmutableDictionary<(int id, Guid guid), string>.Empty;\r\n\r\n            private readonly IVsImageService2 _imageService;\r\n\r\n            public static async Task<GraphIconCache> CreateAsync(IAsyncServiceProvider serviceProvider)\r\n            {\r\n                var imageService = (IVsImageService2)await serviceProvider.GetServiceAsync(typeof(SVsImageService));\r\n\r\n                return new GraphIconCache(imageService);\r\n            }\r\n\r\n            private GraphIconCache(IVsImageService2 imageService) => _imageService = $$imageService$$;\r\n\r\n            public string GetName(ImageMoniker icon)\r\n            {\r\n                return ImmutableInterlocked.GetOrAdd(ref _iconNameCache, (id: icon.Id, guid: icon.Guid), i => $\"{i.guid:D};{i.id}\");\r\n            }\r\n\r\n            public void Register(ImageMoniker icon)\r\n            {\r\n                if (ImmutableInterlocked.Update(ref _registeredIcons, (knownIcons, arg) => knownIcons.Add(arg), icon))\r\n                {\r\n                    _imageService.TryAssociateNameWithMoniker(GetName(icon), icon);\r\n                }\r\n            }\r\n        }\r\n\r\n```\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax'.\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.AddInvocationAtCallSiteAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.GenerateBodyForCallSiteContainerAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33242","RelatedDescription":"Open issue \"ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body\" (#33242)"},{"Id":"408012354","IsPullRequest":false,"CreatedAt":"2019-01-08T02:57:39","Actor":"davkean","Number":"33240","RawContent":null,"Title":"PropertiesShouldNotBeWriteOnlyAnalyzer threw an exception of type 'System.NullReferenceException'","State":"open","Body":"``` C#\r\n        protected override ImmutableDictionary<string, string> GetMap => s_getOutputTypeExMap;\r\n        protected override ImmutableDictionary<string, string> SetMap => s_setOutputTypeExMap;\r\n```\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tCategory\tSuppression State\tDetail Description\r\nError\tAD0001\tAnalyzer 'Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\tMicrosoft.VisualStudio.ProjectSystem.Managed.VS\t\t1\tCompiler\tActive\tAnalyzer 'Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: Microsoft.VisualStudio.ProjectSystem.Managed.VS\r\nISymbol: GetMap (Property)\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.HaveSameReturnTypes(Symbol member1, TypeMap typeMap1, Symbol member2, TypeMap typeMap2, TypeCompareKind typeComparison)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.Equals(Symbol member1, Symbol member2)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.IsInterfaceMemberImplementation(Symbol candidateMember, Symbol interfaceMember, Boolean implementingTypeIsFromSomeCompilation)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindPotentialImplicitImplementationMemberDeclaredInType(Symbol interfaceMember, Boolean implementingTypeIsFromSomeCompilation, TypeSymbol currType, Symbol& implicitImpl, Symbol& closeMismatch)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationForInterfaceMember(Symbol interfaceMember, TypeSymbol implementingType, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationAndDiagnosticsForInterfaceMember(Symbol interfaceMember)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMemberWithDiagnostics(Symbol interfaceMember)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMember(Symbol interfaceMember)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(ISymbol interfaceMember)\r\n   at Analyzer.Utilities.Extensions.ISymbolExtensions.IsImplementationOfAnyImplicitInterfaceMember[TSymbol](ISymbol symbol)\r\n   at Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer.AnalyzeSymbol(SymbolAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c.<ExecuteSymbolActionsCore>b__40_1(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33240","RelatedDescription":"Open issue \"PropertiesShouldNotBeWriteOnlyAnalyzer threw an exception of type 'System.NullReferenceException'\" (#33240)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"408396211","IsPullRequest":true,"CreatedAt":"2019-02-09T04:11:58","Actor":"Dotnet-GitSync-Bot","Number":"6978","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6978","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6978)"},{"Id":"408395526","IsPullRequest":true,"CreatedAt":"2019-02-09T04:10:00","Actor":"Dotnet-GitSync-Bot","Number":"6977","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/6977","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6977)"},{"Id":"408395031","IsPullRequest":true,"CreatedAt":"2019-02-09T03:52:49","Actor":"jkotas","Number":"6976","RawContent":null,"Title":"Remove workaround for OSX detection","State":"open","Body":"Fixes #6975","Url":"https://github.com/dotnet/corert/pull/6976","RelatedDescription":"Open PR \"Remove workaround for OSX detection\" (#6976)"},{"Id":"408366847","IsPullRequest":true,"CreatedAt":"2019-02-09T03:40:28","Actor":"Dotnet-GitSync-Bot","Number":"6974","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corert/pull/6974","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6974)"},{"Id":"408392377","IsPullRequest":false,"CreatedAt":"2019-02-09T03:17:05","Actor":"miramaris","Number":"6975","RawContent":null,"Title":"TargetOS incorrectly set to Unix on macOS","State":"open","Body":"When attempting to build on macOS I get the following error when running `dotnet publish -r osx-x64 -c release`:\r\n\r\n```\r\n/Users/anka/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27409-01/build/Microsoft.NETCore.Native.Unix.props(103,5): error : Platform linker ('clang-3.9') not found. Try installing clang-3.9 or the appropriate package for your platform to resolve the problem.\r\n```\r\n\r\nThis is weird because if I'm reading [this line](https://github.com/dotnet/corert/blob/69d7b8e7a63cebdd6a44e0f047a6574855f3ac8f/src/BuildIntegration/Microsoft.NETCore.Native.Unix.props#L103) correctly, that particular error message should only occur on Linux, not macOS (which uses `clang` as opposed to `clang-3.9`).\r\n\r\nHere's the output from `dotnet --info` just in case that's helpful.\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.103/\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n.NET Core SDKs installed:\r\n  2.2.103 [/usr/local/share/dotnet/sdk]\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/corert/issues/6975","RelatedDescription":"Open issue \"TargetOS incorrectly set to Unix on macOS\" (#6975)"},{"Id":"408239863","IsPullRequest":true,"CreatedAt":"2019-02-08T20:02:11","Actor":"Dotnet-GitSync-Bot","Number":"6973","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6973","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6973)"},{"Id":"407990857","IsPullRequest":true,"CreatedAt":"2019-02-08T17:08:25","Actor":"stephentoub","Number":"6967","RawContent":null,"Title":"Update corert for shared GCSettings","State":"closed","Body":"To be cherry-picked into the mirror of https://github.com/dotnet/coreclr/pull/22483","Url":"https://github.com/dotnet/corert/pull/6967","RelatedDescription":"Closed or merged PR \"Update corert for shared GCSettings\" (#6967)"},{"Id":"408173597","IsPullRequest":true,"CreatedAt":"2019-02-08T16:10:47","Actor":"Dotnet-GitSync-Bot","Number":"6972","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @marek-safar","Url":"https://github.com/dotnet/corert/pull/6972","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6972)"},{"Id":"408023356","IsPullRequest":false,"CreatedAt":"2019-02-08T16:05:55","Actor":"homer90","Number":"6969","RawContent":null,"Title":"CoreRT DLL loaded InMemory Crashes on Console.WriteLine","State":"closed","Body":"In regards to issue #6958\r\n\r\n@MichalStrehovsky:\r\n> \r\n> You can build MemoryModule as a library and p/invoke into it from C#.\r\n\r\nI built https://github.com/fancycode/MemoryModule/tree/master/example/DllLoader as dll and p/invoke from my netcore exe, calling the following functions:\r\n\r\nLoadFromFile\r\nhttps://github.com/fancycode/MemoryModule/blob/e4c1b3566c6af89c32d1a0b2b8957ab62dc8dae9/example/DllLoader/DllLoader.cpp#L18\r\n\r\nLoadFromMemory\r\nhttps://github.com/fancycode/MemoryModule/blob/e4c1b3566c6af89c32d1a0b2b8957ab62dc8dae9/example/DllLoader/DllLoader.cpp#L87\r\n\r\n\r\nI use 1 C++ DLL and 1 C# .NET Core DLL compiled to native code.\r\n\r\nC++ DLL:\r\n```\r\nextern \"C\" __declspec(dllexport) int add(int a, int b)\r\n{\r\n\tprintf(\"hello from cpp dll\\n\");\r\n\treturn a + b;\r\n}\r\n```\r\n\r\nC# DLL:\r\n```\r\nnamespace corertdll\r\n{\r\n    public class mathematics\r\n    {\r\n        [NativeCallable(EntryPoint = \"add\", CallingConvention = CallingConvention.Cdecl)]\r\n        public static int add(int a, int b)\r\n        {\r\n            Console.WriteLine(\"hello from corert dll\");\r\n            return a + b;\r\n        }\r\n}\r\n```\r\n\r\nWithin my application I first call LoadFromFile and then LoadFromMemory on both DLLs to compare results.\r\n\r\nUsing the C++ DLL I get the following output (works):\r\n```\r\nhello from cpp dll  // printf in dll\r\nFrom file: 3 // https://github.com/fancycode/MemoryModule/blob/master/example/DllLoader/DllLoader.cpp#L31\r\nhello from cpp dll // printf in dll\r\nFrom memory: 3 // https://github.com/fancycode/MemoryModule/blob/master/example/DllLoader/DllLoader.cpp#L112\r\n```\r\n\r\nHowever the C# DLL doesn't work when loading from memory (crashes on LoadFromMemory):\r\n```\r\nhello from corert dll // Console.WriteLine\r\nFrom file: 3 // https://github.com/fancycode/MemoryModule/blob/master/example/DllLoader/DllLoader.cpp#L31\r\n// ! crash here\r\n```\r\n\r\nMy understanding is that both dlls should behave the same as they are compiled to native code. And they do when commenting out the Console.WriteLine and print codelines. As soon as it hits Console.WriteLine in the C# DLL it crashes when loaded from Memory.\r\n\r\n@jkotas, @MichalStrehovsky:\r\nIs there any way to show stacktrace/logs why it crashed? I tried compiling in debug mode but no info whatsoever is shown. Are there some compiler options I could change (like https://aka.ms/OptimizeCoreRT) to get more details?\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6969","RelatedDescription":"Closed issue \"CoreRT DLL loaded InMemory Crashes on Console.WriteLine\" (#6969)"},{"Id":"407803985","IsPullRequest":true,"CreatedAt":"2019-02-08T14:18:56","Actor":"Dotnet-GitSync-Bot","Number":"6964","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @tarekgh @marek-safar @marek-safar @stephentoub","Url":"https://github.com/dotnet/corert/pull/6964","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6964)"},{"Id":"408111853","IsPullRequest":false,"CreatedAt":"2019-02-08T11:26:50","Actor":"zaccharles","Number":"6971","RawContent":null,"Title":"SetEnvironmentVariable throws NotImplementedException","State":"open","Body":"Hi,\r\n\r\nI'm wondering why `SetEnvironmentVariable` is just throwing a `NotImplementedException` [here](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/System/Environment.CoreRT.Unix.cs#L26)? I'd be happy to help fix this if someone can point me in the right direction...","Url":"https://github.com/dotnet/corert/issues/6971","RelatedDescription":"Open issue \"SetEnvironmentVariable throws NotImplementedException\" (#6971)"},{"Id":"408060977","IsPullRequest":true,"CreatedAt":"2019-02-08T10:20:26","Actor":"MichalStrehovsky","Number":"6970","RawContent":null,"Title":"Avoid failing compilation with RootAllApplicationAssemblies","State":"closed","Body":"When rooting all applicaiton assemblies is requested but the input doesn't form a proper closure, we won't be able to root all types. Skip those that can't be loaded so that we don't fail compilation.","Url":"https://github.com/dotnet/corert/pull/6970","RelatedDescription":"Closed or merged PR \"Avoid failing compilation with RootAllApplicationAssemblies\" (#6970)"},{"Id":"408007393","IsPullRequest":true,"CreatedAt":"2019-02-08T05:59:36","Actor":"jkotas","Number":"6968","RawContent":null,"Title":"Update xunit version","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6968","RelatedDescription":"Closed or merged PR \"Update xunit version\" (#6968)"},{"Id":"407956295","IsPullRequest":false,"CreatedAt":"2019-02-08T00:21:48","Actor":"dstaley","Number":"6966","RawContent":null,"Title":"Create Windows Docker image that can build CoreRT apps","State":"open","Body":"It would be awesome if there was a prebuilt Windows Docker image that contained everything necessary to build a CoreRT app. Currently attempting to install the VS Build Tools in a Windows container is a non-trivial effort.\r\n\r\nThis is something I'm currently struggling with, so if I figure it out I'll be sure to post my solution.","Url":"https://github.com/dotnet/corert/issues/6966","RelatedDescription":"Open issue \"Create Windows Docker image that can build CoreRT apps\" (#6966)"},{"Id":"407561916","IsPullRequest":false,"CreatedAt":"2019-02-07T20:09:50","Actor":"homer90","Number":"6961","RawContent":null,"Title":"NativeLibrary Sample not working?","State":"closed","Body":"I am building the NativeLibrary Sample (https://github.com/dotnet/corert/tree/master/samples/NativeLibrary) like this: dotnet publish /p:NativeLib=Shared -c Release -r win-x64\r\n\r\nI end up with a .dll file.\r\n\r\nHowever I cannot consume the exported function with another program. \r\nUsing http://www.nirsoft.net/utils/dll_export_viewer.html I looked up the exports and there are none.\r\n\r\nIs this sample up-to-date?","Url":"https://github.com/dotnet/corert/issues/6961","RelatedDescription":"Closed issue \"NativeLibrary Sample not working?\" (#6961)"},{"Id":"407750634","IsPullRequest":true,"CreatedAt":"2019-02-07T17:37:52","Actor":"MichalStrehovsky","Number":"6963","RawContent":null,"Title":"Advance signature blob for each parameter","State":"closed","Body":"Fixes #6962.","Url":"https://github.com/dotnet/corert/pull/6963","RelatedDescription":"Closed or merged PR \"Advance signature blob for each parameter\" (#6963)"},{"Id":"407811364","IsPullRequest":true,"CreatedAt":"2019-02-07T17:24:00","Actor":"tonerdo","Number":"6965","RawContent":null,"Title":"[Interpreter] Array","State":"open","Body":"This PR adds support for single-dimension zero-based arrays. It adds interpretation of the following opcodes:\r\n\r\n* `newarr`\r\n* `ldlen`\r\n* `stelem.*`\r\n* `ldelem.*`\r\n\r\nwhich allows methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static int[] GetArray()\r\n{\r\n    int[] array = new int[5];\r\n    array[0] = 23;\r\n    array[1] = 34;\r\n    array[2] = 43;\r\n    array[3] = 122;\r\n    array[4] = 4;\r\n    return array;\r\n}\r\n\r\npublic static int GetArrayElement(int[] array, int index)\r\n{\r\n    return array[index];\r\n}\r\n\r\npublic static int GetArrayLength(int l)\r\n{\r\n    return new int[l].Length;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corert/pull/6965","RelatedDescription":"Open PR \"[Interpreter] Array\" (#6965)"},{"Id":"407653392","IsPullRequest":false,"CreatedAt":"2019-02-07T14:08:37","Actor":"tonerdo","Number":"6962","RawContent":null,"Title":"TypeInfo.GetMethod returns incorrect method signature when first argument is an array","State":"closed","Body":"While working on adding array support to the interpreter I stumbled on the following issue. Assume we have the following method in the interpreted assembly:\r\n\r\n```csharp\r\npublic static int GetArrayElement(int[] array, int index)\r\n{\r\n        return array[index];\r\n}\r\n```\r\nWhen querying for that method in the CoreRT app using `TypeInfo.GetMethod(\"GetArrayElement\")` it returns a method info object with signature `Int32 GetArrayElement(Int32[], Int32[])` instead of `Int32 GetArrayElement(Int32[], Int32)`, this of-course raises an argument exception.\r\n\r\nNull is returned when I explicitly specify the method argument types `TypeInfo.GetMethod(\"GetArrayElement\", new [] { typeof(int[]), typeof(int) })`\r\n\r\ncc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/issues/6962","RelatedDescription":"Closed issue \"TypeInfo.GetMethod returns incorrect method signature when first argument is an array\" (#6962)"},{"Id":"407119732","IsPullRequest":true,"CreatedAt":"2019-02-06T10:44:44","Actor":"jkotas","Number":"6960","RawContent":null,"Title":"Implement LPUTF8Str string marshaling","State":"closed","Body":"Fixes #6945","Url":"https://github.com/dotnet/corert/pull/6960","RelatedDescription":"Closed or merged PR \"Implement LPUTF8Str string marshaling\" (#6960)"},{"Id":"407047937","IsPullRequest":true,"CreatedAt":"2019-02-06T01:36:20","Actor":"szhaomsft","Number":"6959","RawContent":null,"Title":"fix grpc link issue","State":"open","Body":"this is a fix to https://github.com/dotnet/corert/issues/6375\r\n\r\nwith that,  one can link using dotnet core","Url":"https://github.com/dotnet/corert/pull/6959","RelatedDescription":"Open PR \"fix grpc link issue\" (#6959)"},{"Id":"406980554","IsPullRequest":false,"CreatedAt":"2019-02-05T22:43:04","Actor":"homer90","Number":"6958","RawContent":null,"Title":"Assembly Load(byte[]) with native compiled exe/dll","State":"closed","Body":"I am really excited and fascinated by CoreRT!\r\nPorting one of my existing projects I struggle with this code:\r\n```\r\nvar bytes = File.ReadAllBytes(@\"C:\\corert\\native_helper.dll\");\r\nConsole.WriteLine($\"bytes: {bytes.Length}\");\r\nvar assembly = Assembly.Load(bytes);\r\n```\r\n\r\nMy main program/exe (c# compiled to native code) wants to load my library \"native_helper.dll\" bytes (also c# compiled to native code). It throws this error: \r\n> bytes: 3379120\r\n> \"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\"\r\n\r\nIn System.Private.CoreLib.dll it checks for \"AppDomain.CheckLoadByteArraySupported();\" and I guess that's where it crashes.\r\n\r\nI searched through the samples and tried serveral options in .csproj. I ended up with those:\r\n```\r\n<OutputType>Library</OutputType>\r\n<NativeLib>Shared</NativeLib>\r\n```\r\n\r\nHow can I load assembly bytes into my program like in .NET Framework (code above)? Is this even possible after compiling it into native code? Thanks guys!\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6958","RelatedDescription":"Closed issue \"Assembly Load(byte[]) with native compiled exe/dll\" (#6958)"},{"Id":"406929889","IsPullRequest":true,"CreatedAt":"2019-02-05T19:06:01","Actor":"MichalStrehovsky","Number":"6957","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6957","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6957)"},{"Id":"406784362","IsPullRequest":true,"CreatedAt":"2019-02-05T17:03:53","Actor":"MichalStrehovsky","Number":"6954","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6954","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#6954)"},{"Id":"406877639","IsPullRequest":false,"CreatedAt":"2019-02-05T16:53:07","Actor":"filipnavara","Number":"6956","RawContent":null,"Title":"Win32 API invoked on macOS","State":"open","Body":"The [OSX10.12 Debug and CoreFX tests job](https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1293/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07) in PR #6955 failed with the following error:\r\n\r\n```\r\n08:46:04 xUnit.net console test runner (64-bit .NET Core)\r\n08:46:04 Copyright (C) 2014 Outercurve Foundation.\r\n08:46:04 \r\n08:46:04 Discovering: System.Collections.Tests\r\n08:46:05 Discovered:  System.Collections.Tests\r\n08:46:05 Starting:    System.Collections.Tests\r\n08:46:06 Unhandled Exception: EETypeRva:0x017EDFF8: \r\n08:46:06    at xunit.console!<BaseAddress>+0x7940c1\r\n08:46:06    at xunit.console!<BaseAddress>+0x6fe667\r\n08:46:06    at System.Diagnostics.StackTrace..ctor(Int32, Boolean) + 0x8f\r\n08:46:06    at System.Diagnostics.DebugProvider.Fail(String, String) + 0x4d\r\n08:46:06    at System.Diagnostics.Debug.Fail(String, String) + 0x45\r\n08:46:06    at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x43\r\n08:46:06    at System.Diagnostics.Debug.Assert(Boolean) + 0x28\r\n08:46:06    at xunit.console!<BaseAddress>+0x688755\r\n08:46:06    at xunit.console!<BaseAddress>+0x7c6608\r\n08:46:06    at xunit.console!<BaseAddress>+0x79f36b\r\n08:46:06    at xunit.console!<BaseAddress>+0x79ebc7\r\n08:46:06    at xunit.console!<BaseAddress>+0x79e9b6\r\n08:46:06    at xunit.console!<BaseAddress>+0x7c6281\r\n08:46:06    at xunit.console!<BaseAddress>+0x6943f3\r\n08:46:06    at xunit.console!<BaseAddress>+0x68b879\r\n08:46:06    at xunit.console!<BaseAddress>+0x6a718a\r\n08:46:06    at xunit.console!<BaseAddress>+0x6a7351\r\n08:46:06    at xunit.console!<BaseAddress>+0x68bac5\r\n08:46:06    at xunit.console!<BaseAddress>+0x6c2ae8\r\n08:46:06    at xunit.console!<BaseAddress>+0x6c247f\r\n08:46:06    at xunit.console!<BaseAddress>+0x6b3b3b\r\n08:46:06    at xunit.console!<BaseAddress>+0x90ea54\r\n08:46:06    at System.Threading.Tasks.TaskFactory`1.StartNew(Func`1, CancellationToken, TaskCreationOptions, TaskScheduler) + 0x6c\r\n08:46:06    at System.Threading.Tasks.Task.Run[TResult](Func`1, CancellationToken) + 0xcc\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_0.<RunTestCollectionsAsync>b__1(Func`1) + 0x3f\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_0.<RunTestCollectionsAsync>b__2(Tuple`2) + 0xae\r\n08:46:06    at xunit.console!<BaseAddress>+0x865cb7\r\n08:46:06    at xunit.console!<BaseAddress>+0x7ea9b9\r\n08:46:06    at xunit.console!<BaseAddress>+0xa50eea\r\n08:46:06    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1) + 0x82\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<RunTestCollectionsAsync>d__14.MoveNext() + 0x359\r\n08:46:06    at xunit.console!<BaseAddress>+0xa8a25a\r\n08:46:06    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&) + 0x1f\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(IMessageBus, CancellationTokenSource) + 0x8d\r\n08:46:06    at Xunit.Sdk.TestAssemblyRunner`1.<RunAsync>d__41.MoveNext() + 0x320\r\n08:46:06    at xunit.console!<BaseAddress>+0xa90aa9\r\n08:46:06    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&) + 0x34\r\n08:46:06    at Xunit.Sdk.TestAssemblyRunner`1.RunAsync() + 0x7b\r\n08:46:06    at Xunit.Sdk.XunitTestFrameworkExecutor.<RunTestCases>d__6.MoveNext() + 0xc0\r\n08:46:06    at xunit.console!<BaseAddress>+0xa8c91a\r\n08:46:06    at System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[TStateMachine](TStateMachine&) + 0x1b\r\n08:46:06    at Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0xa8\r\n08:46:06    at Xunit.Sdk.TestFrameworkExecutor`1.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x98\r\n08:46:06    at Xunit.Xunit2.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x3d\r\n08:46:06    at Xunit.XunitFrontController.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x4c\r\n08:46:06    at Xunit.ConsoleClient.Program.ExecuteAssembly(Object, String, XunitProjectAssembly, Boolean, Boolean, Boolean, Boolean, Nullable`1, Nullable`1, ExtendedXunitFilters) + 0x7d6\r\n08:46:06    at Xunit.ConsoleClient.Program.RunProject(String, ExtendedXunitProject, Boolean, Boolean, Boolean, Nullable`1, Nullable`1, Nullable`1) + 0x59b\r\n08:46:06    at Xunit.ConsoleClient.Program.Main(String[]) + 0x3ad\r\n08:46:06    at xunit.console!<BaseAddress>+0xa4c2ff\r\n08:46:06    at xunit.console!<BaseAddress>+0xa4c381\r\n08:46:06 \r\n08:46:07 Finished:    System.Collections.Tests\r\n08:46:07 System.DllNotFoundException: Unable to load DLL 'api-ms-win-core-kernel32-legacy-l1-1-0.dll': The specified module could not be found.\r\n```\r\n\r\nThe Assert failure is likely something broken in the PR, but the call to `PInvoke_RaiseFailFastException` (src/System.Private.CoreLib/src/Interop/Interop.manual.cs) on non-Windows system is likely something broken.","Url":"https://github.com/dotnet/corert/issues/6956","RelatedDescription":"Open issue \"Win32 API invoked on macOS\" (#6956)"},{"Id":"406871094","IsPullRequest":true,"CreatedAt":"2019-02-05T16:38:46","Actor":"filipnavara","Number":"6955","RawContent":null,"Title":"Improve thread pool performance on Unix","State":"open","Body":"There's couple of objectives to these changes:\r\n- Improve performance of thread pool on Unix for certain workloads [while not regressing it for others]\r\n- Make the LowLevel* synchronization primitives self-dependent and remove the dependency on `WaitSubsystem`, to allow sharing them with Mono\r\n- Bring the code closer to CoreCLR in case someone decides to switch to the managed thread pool one day\r\n\r\nList of changes:\r\n- `FirstLevelSpinWaiter` is renamed to `LowLevelSpinWaiter` for consistency with the usage of `LowLevel` prefix in the wait subsystem\r\n- The constants and `Wait` method of `LowLevelSpinWaiter` are exposed for reuse from `LowLevelLifoSemaphore`\r\n- `LowLevelLifoSemaphore` is updated to more closely mimic CoreCLR's CLRLifoSemaphore spinning logic\r\n- `LowLevelLifoSemaphore.Unix.cs` is reimplemented on top of `LowLevel[Monitor/Lock]` to remove dependency on the complex `WaitSubsystem` and its contention on a single lock\r\n\r\nI used [improvised benchmark](https://gist.github.com/filipnavara/8e6aa10131e68d313934b006aea82abd) based on code from https://github.com/dotnet/coreclr/pull/13670#issuecomment-325858065. It is likely flawed, but it should be useful for basic comparison.\r\n\r\nBenchmark results are included below. On macOS it is consistent improvement over baseline with no regression on sustained load. I will run the benchmarks on Windows too and report the results. At the moment I don't have a Linux setup to test this on.\r\n\r\nThis is part of a bigger patch series that is supposed to make the portable thread pool implementation sharable across .NET runtimes. Initially I target CoreRT/Unix and Mono, but I would like to allow building CoreCLR with it for comparison purposes as well.\r\n\r\n/cc @kouvel @jkoritzinsky @jkotas @benaadams @marek-safar ","Url":"https://github.com/dotnet/corert/pull/6955","RelatedDescription":"Open PR \"Improve thread pool performance on Unix\" (#6955)"},{"Id":"406643392","IsPullRequest":true,"CreatedAt":"2019-02-05T06:55:41","Actor":"Dotnet-GitSync-Bot","Number":"6953","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6953","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6953)"},{"Id":"406617961","IsPullRequest":true,"CreatedAt":"2019-02-05T06:06:09","Actor":"Dotnet-GitSync-Bot","Number":"6952","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6952","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6952)"},{"Id":"406527943","IsPullRequest":false,"CreatedAt":"2019-02-04T21:30:21","Actor":"letmaik","Number":"6951","RawContent":null,"Title":"Support for anonymous types","State":"open","Body":"I'm trying to serialize JSON using `Newtonsoft.JSON` by making use of anonymous types and even though CoreRT doesn't raise an error I have tried to play around with `rd.xml` to fix this issue, without success:\r\n\r\n```cs\r\nvar a = JObject.FromObject(new { // anonymous type here\r\n  foo = \"bar\"\r\n});\r\nConsole.WriteLine(a.ToString()); // prints {}\r\n\r\n// not relying on reflection works:\r\nvar b = new JObject();\r\nb.Add(\"foo\", \"bar\");\r\nConsole.WriteLine(b.ToString()); // prints { \"foo\": \"bar\" }\r\n```\r\n\r\nIn short, does CoreRT fully support reflection on anonymous types? It's worrying that no error is thrown here if this is an unsupported feature. Or maybe just a bug?","Url":"https://github.com/dotnet/corert/issues/6951","RelatedDescription":"Open issue \"Support for anonymous types\" (#6951)"},{"Id":"406486287","IsPullRequest":true,"CreatedAt":"2019-02-04T20:46:25","Actor":"Dotnet-GitSync-Bot","Number":"6950","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6950","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6950)"},{"Id":"406434183","IsPullRequest":false,"CreatedAt":"2019-02-04T17:21:10","Actor":"alpencolt","Number":"6949","RawContent":null,"Title":"[Question] Assembly loading","State":"open","Body":"I'm interesting in assembly loading functional `Assembly.LoadFile()`. How it can implemented and will it be implemented? I see two ways how to do it:\r\n- First option is using interpreter #5011 (as I see @tonerdo has huge progress)\r\n- Second is using Native Library mode (https://github.com/dotnet/corert/tree/master/samples/NativeLibrary). Libraries can be precopiled an loaded (like `dlopen`). Can it work?\r\n\r\ncc @jkotas @kvochko @iarischenko @kbaladurin ","Url":"https://github.com/dotnet/corert/issues/6949","RelatedDescription":"Open issue \"[Question] Assembly loading\" (#6949)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"408397107","IsPullRequest":true,"CreatedAt":"2019-02-09T04:25:43","Actor":"kouvel","Number":"2925","RawContent":null,"Title":"Expose option to disable tier 0 JIT for configuring from a project file","State":"open","Body":"- For scenarios that don't mind giving up some startup time (but not too much), it may be a reasonable option when it is desirable to avoid spending two JIT cycles on methods\r\n- I'd like to use this mode as the default for microbenchmarks in the performance repo and the most convenient way of doing so would be to have a way to specify it in a project file, to keep benchmarks easily runnable with `dotnet run`. It serves as a soft workaround to https://github.com/dotnet/coreclr/issues/19751 while still allowing perf improvements from tiering to show when R2R is being used, in benchmarks that could help to get more representative numbers.","Url":"https://github.com/dotnet/sdk/pull/2925","RelatedDescription":"Open PR \"Expose option to disable tier 0 JIT for configuring from a project file\" (#2925)"},{"Id":"407840981","IsPullRequest":true,"CreatedAt":"2019-02-09T04:24:00","Actor":"nugetlurker","Number":"2917","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2917","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into sdk\" (#2917)"},{"Id":"408352052","IsPullRequest":true,"CreatedAt":"2019-02-09T01:40:38","Actor":"livarcocc","Number":"2922","RawContent":null,"Title":"Updating branding for preview3 and adding a build trigger to the release branch.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2922","RelatedDescription":"Closed or merged PR \"Updating branding for preview3 and adding a build trigger to the release branch.\" (#2922)"},{"Id":"408353445","IsPullRequest":true,"CreatedAt":"2019-02-09T00:14:47","Actor":"livarcocc","Number":"2923","RawContent":null,"Title":"Update branding to preview4","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2923","RelatedDescription":"Closed or merged PR \"Update branding to preview4\" (#2923)"},{"Id":"408369264","IsPullRequest":true,"CreatedAt":"2019-02-09T00:01:26","Actor":"dotnet-bot","Number":"2924","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2924","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2924)"},{"Id":"407841007","IsPullRequest":true,"CreatedAt":"2019-02-08T23:46:37","Actor":"nugetlurker","Number":"2918","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5821 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5821 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2918","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5821 into sdk\" (#2918)"},{"Id":"408192687","IsPullRequest":false,"CreatedAt":"2019-02-08T15:09:50","Actor":"bitbonk","Number":"2921","RawContent":null,"Title":"Forms dll not found when using Forms in a dependent DLL referenced by a project without Microsoft.NET.Sdk.WindowsDesktop","State":"open","Body":"We have some .NET Core applications that reference 3rd party assemblies (initially made for .NET Classic) that occasionally open a custom message box and therefore references Windows Forms.\r\n\r\nNow that .NET Core 3.0 supports Windows Forms we can finally use those assemblies in .NET Core applications who themselves do not use Windows Forms at all.\r\n\r\nHowever currently (SDK 3.0.100-preview-010184), the main application csproj that references this 3rd party assembly must be set to `<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">` event though it is just a simple console app and has no knowledge of the fact that one of its dependencies uses windows forms. If I do not set the SDK as above, I get the following exception: \r\n\r\n> System.IO.FileNotFoundException\r\n>   HResult=0x80070002\r\n>   Message=Could not load file or assembly 'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\r\n>   Source=winformslib\r\n>   StackTrace:\r\n>    at winforms.PublicApi.Show() in C:\\temp\\winforms\\winformslib\\Form1.cs:line 32\r\n>    at app.Program.Main(String[] args) in C:\\temp\\winforms\\app\\Program.cs:line 11\r\n\r\nHere is the code that can be used to reproduce the issue:\r\n\r\n*app.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\winformslib\\winformslib.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n*Program.cs*\r\n```\r\nusing System;\r\nusing winforms;\r\n\r\nnamespace app\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"I will now open a windos form\");\r\n            PublicApi.Show();\r\n            Console.WriteLine(\"It should be open now\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*winformslib.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n*Form1.cs*\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\n\r\nnamespace winforms\r\n{\r\n    internal partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n\r\n        private void buttonExit_Click(object sender, EventArgs e)\r\n        {\r\n            Application.Exit();\r\n        }\r\n    }\r\n\r\n    public static class PublicApi\r\n    {\r\n        public static void Show()\r\n        {\r\n            var form = new Form1();\r\n            form.Show();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/sdk/issues/2921","RelatedDescription":"Open issue \"Forms dll not found when using Forms in a dependent DLL referenced by a project without Microsoft.NET.Sdk.WindowsDesktop\" (#2921)"},{"Id":"408142603","IsPullRequest":true,"CreatedAt":"2019-02-08T14:41:28","Actor":"dotnet-maestro[bot]","Number":"2920","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19107.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19107.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2920","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2920)"},{"Id":"407980129","IsPullRequest":true,"CreatedAt":"2019-02-08T02:17:33","Actor":"dsplaisted","Number":"2919","RawContent":null,"Title":"Use Microsoft.NETCore.App.Ref targeting pack","State":"open","Body":"Use the new Microsoft.NETCore.App.Ref targeting pack.\r\n\r\nSending this PR to get CI coverage.\r\n\r\nThis includes all the commits from #2887, which hasn't been merged yet.","Url":"https://github.com/dotnet/sdk/pull/2919","RelatedDescription":"Open PR \"Use Microsoft.NETCore.App.Ref targeting pack\" (#2919)"},{"Id":"405976816","IsPullRequest":true,"CreatedAt":"2019-02-07T18:43:43","Actor":"dotnet-bot","Number":"2898","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2898","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2898)"},{"Id":"407762335","IsPullRequest":false,"CreatedAt":"2019-02-07T16:03:27","Actor":"tester962","Number":"2916","RawContent":null,"Title":"Port \"Microsoft.WindowsDesktop.App\" to ARM/ARM64 Windows","State":"closed","Body":"Hi! I can't find the \"Microsoft.WindowsDesktop.App\" framework in ARM builds of the SDK.\r\nCan this be added?","Url":"https://github.com/dotnet/sdk/issues/2916","RelatedDescription":"Closed issue \"Port \"Microsoft.WindowsDesktop.App\" to ARM/ARM64 Windows\" (#2916)"},{"Id":"407688681","IsPullRequest":true,"CreatedAt":"2019-02-07T14:21:30","Actor":"dotnet-maestro[bot]","Number":"2915","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19106.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19106.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2915","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2915)"},{"Id":"407523414","IsPullRequest":false,"CreatedAt":"2019-02-07T03:01:57","Actor":"dsplaisted","Number":"2914","RawContent":null,"Title":"Decide whether to remove support for `dotnet store`","State":"open","Body":"The [runtime package store feature](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store) was used for ASP.NET Core in .NET Core 2.0, but was replaced by a shared framework for ASP.NET Core in 2.1.\r\n\r\nUsing the `dotnet store` command, it's also possible to create your own runtime store.  However, this has been a bit of a bug farm in .NET Core 3.0 (with all of the framework composition changes).  So we may want to remove support for creating a runtime store in the .NET Core 3 SDK.","Url":"https://github.com/dotnet/sdk/issues/2914","RelatedDescription":"Open issue \"Decide whether to remove support for `dotnet store`\" (#2914)"},{"Id":"407391022","IsPullRequest":true,"CreatedAt":"2019-02-07T02:57:23","Actor":"dsplaisted","Number":"2913","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"CI legs on #2887 started timing out when I updated stage 0, so this PR isolates the stage 0 update to see if that's the problem.","Url":"https://github.com/dotnet/sdk/pull/2913","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#2913)"},{"Id":"407278108","IsPullRequest":false,"CreatedAt":"2019-02-07T02:17:13","Actor":"vitek-karas","Number":"2912","RawContent":null,"Title":"Self contained publish on linux includes .a files","State":"closed","Body":"Using relatively new 3.0 SDK\r\n\r\n```\r\nmkdir ca1\r\ncd ca1\r\ndotnet new console\r\ndotnet publish --self-contained -r linux-x64\r\n```\r\n\r\nIn the publish directory there are 6 `.a` files which don't seem to have any purpose. Basically for every native library (`.so`) coming from CoreFx, there's a corresponding `.a` as well:\r\n```\r\n-rwxrw-rw- 1 vitek vitek 2836614 Feb  5 04:05 System.IO.Compression.Native.a\r\n-rwxrw-rw- 1 vitek vitek   27254 Feb  5 04:05 System.IO.Ports.Native.a\r\n-rwxrw-rw- 1 vitek vitek  396432 Feb  5 04:05 System.Native.a\r\n-rwxrw-rw- 1 vitek vitek   79868 Feb  5 04:05 System.Net.Http.Native.a\r\n-rwxrw-rw- 1 vitek vitek   29400 Feb  5 04:05 System.Net.Security.Native.a\r\n-rwxrw-rw- 1 vitek vitek  906184 Feb  5 04:05 System.Security.Cryptography.Native.OpenSsl.a\r\n```\r\nI don't think these files are needed for anything. \r\nPer customer report this also reproes on MacOS, but I didn't verify.","Url":"https://github.com/dotnet/sdk/issues/2912","RelatedDescription":"Closed issue \"Self contained publish on linux includes .a files\" (#2912)"},{"Id":"407224370","IsPullRequest":true,"CreatedAt":"2019-02-06T14:17:06","Actor":"dotnet-maestro[bot]","Number":"2911","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19105.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2911","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2911)"},{"Id":"406573912","IsPullRequest":false,"CreatedAt":"2019-02-05T23:36:39","Actor":"pranavkm","Number":"2906","RawContent":null,"Title":"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.","State":"closed","Body":"## Repro steps\r\n\r\n1. dotnet new console\r\n2. Edit the project file to disable implicit fx reference and instead add an explicit reference to `Microsoft.NETCore.App`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n3. `dotnet build`\r\n\r\nBuild fails saying it was unable to copy the AssemblyName.exe file\r\n\r\n> C:\\Users\\Pranav\\.dotnet\\x64\\sdk\\3.0.100-preview-010184\\Microsoft.Common.CurrentVersion.targets(4560,5): error MSB3030: Could not copy the file \"D:\\temp\\test1\\obj\\Debug\\netcoreapp3.0\\test1.exe\" because it was not found. [D:\\temp\\test1\\test1.csproj]\r\n\r\nSetting `<UseAppHost>false</UseAppHost>` in the project file fixes things.\r\n\r\n*Background*:\r\nThe RazorSdk builds in a separate repo that's an arcade dependency to AspNetCore. The Sdk's test applications build against test shims rather than the actual AspNetCore fx to avoid cyclical dependencies. To do so, they set `DisableImplicitFrameworkReferences = true`.","Url":"https://github.com/dotnet/sdk/issues/2906","RelatedDescription":"Closed issue \"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.\" (#2906)"},{"Id":"406926342","IsPullRequest":false,"CreatedAt":"2019-02-05T18:56:25","Actor":"natemcmaster","Number":"2910","RawContent":null,"Title":"Building a targeting and runtime pack locally","State":"open","Body":"In aspnet/AspNetCore, I'd like to build a large number of projects that fall into two groups\r\n\r\nA) produces an assembly in the AspNetCore framework\r\nB) references the AspNetCore framework\r\n\r\nWith the 3.0 Preview 2 SDK, I can get this working, but it feels hacky. Here's what I've done:\r\n\r\n* Change the repo bootstrapping to install to `$repoRoot/.dotnet`\r\n* Overridden NetCoreTargetingPackRoot  `<NetCoreTargetingPackRoot>$(RepoRoot).dotnet\\packs\\</NetCoreTargetingPackRoot>`\r\n* Created a dummy projects which copy build assets into NetCoreTargetingPackRoot. For example, Microsoft.AspNetCore.App.Ref.csproj copies assemblies into `$(RepoRoot).dotnet\\packs\\Microsoft.AspNetCore.App.Ref\\3.0.0-preview-t000\\ref\\netcoreapp3.0\\`\r\n* Add `<KnownFrameworkReference Update=\"Microsoft.AspNetCore.App\" ....`. This overrides bundled metadata so the SDK will look for \"my\" versions. (In aspnet, we use 't000' to mean 'local build')\r\n* Update all projects with a `FrameworkReference` to also have a ProjectReference (ReferenceOutputAssembly=false) to ensure the references are built first. (Done  repo-wide via Directory.Build.targets)\r\n\r\n## Problem\r\n\r\nThis \"pollutes\" the installation of the SDK with an imitation of a targeting pack. This will be problematic for build environments such as https://github.com/dotnet/source-build in which the repo is expected to use an externally-provided SDK: See https://github.com/dotnet/source-build/blob/master/Documentation/RepoApi.md. It would make it tricky to implement this \"API\" well:\r\n\r\n    /path/to/aspnet/build.sh -DotNetBuildFromSource true -DotNetCoreSdkDir \"/path/to/dotnet\"\r\n\r\nWe may not have write-access to DotNetCoreSdkDir.\r\n\r\n## Proposal\r\n\r\nI think the problem has a simple solution, so here's my proposal.\r\n\r\n1. Update `ResolveFrameworkReferences` to support resolving targeting and runtime packs from multiple folders\r\n2. Allow user projects to specify additional folders via property (this lets me control precedence)\r\n\r\nExample: `<NetCoreTargetingPackPaths>$(RepoRoot)tmp\\whatever\\;$(NetCoreTargetingPackPaths)</NetCoreTargetingPackPaths>`\r\n\r\ncc @pakrym @dagood @dsplaisted @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2910","RelatedDescription":"Open issue \"Building a targeting and runtime pack locally\" (#2910)"},{"Id":"406771721","IsPullRequest":true,"CreatedAt":"2019-02-05T14:16:27","Actor":"dotnet-maestro[bot]","Number":"2909","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19104.18\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19104.18\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2909","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2909)"},{"Id":"406604347","IsPullRequest":false,"CreatedAt":"2019-02-05T02:21:52","Actor":"nguerrera","Number":"2908","RawContent":null,"Title":"Improve performance of ResolveFrameworkReferences and related tasks/targets","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2887#issuecomment-460488924\r\n","Url":"https://github.com/dotnet/sdk/issues/2908","RelatedDescription":"Open issue \"Improve performance of ResolveFrameworkReferences and related tasks/targets\" (#2908)"},{"Id":"406574224","IsPullRequest":true,"CreatedAt":"2019-02-05T00:01:48","Actor":"dotnet-bot","Number":"2907","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2907","RelatedDescription":"Open PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2907)"},{"Id":"406413046","IsPullRequest":true,"CreatedAt":"2019-02-04T19:36:34","Actor":"johnbeisner","Number":"2904","RawContent":null,"Title":"Perform a fetch before the checkout","State":"closed","Body":"The 'checkout' command can error sometimes:\r\n```\r\nEXEC : error : pathspec 'c967e0f' did not match any file(s) known to git. [C:\\work2\\sdk\\src\\Tests\\Microsoft.NET.PerformanceTests\\Microsoft.NET.PerformanceTests.csproj]\r\nC:\\work2\\sdk\\src\\Tests\\Microsoft.NET.PerformanceTests\\Microsoft.NET.PerformanceTests.csproj(52,5): error MSB3073: The command \"git checkout --quiet c967e0f\" exited with code 1.\r\n```","Url":"https://github.com/dotnet/sdk/pull/2904","RelatedDescription":"Closed or merged PR \"Perform a fetch before the checkout\" (#2904)"},{"Id":"406426405","IsPullRequest":false,"CreatedAt":"2019-02-04T17:02:21","Actor":"livarcocc","Number":"2905","RawContent":null,"Title":"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name","State":"open","Body":"We have git repo with whitespace in name \"Test repo\". Once I cloned it in Windows 8.1 I got path \"C:\\somepath\\Test%20repo\". This path was generated by git clone command. When I open ASP.NET Core project under this path I can't see cs files at all. Once I change %20 to simple ' ' space it works. Not sure is this .NET Core or VS2017 or even git, but it once you have such path with %20 .net core projects fails.\r\n\r\nThe git part is not really needed. Just adding %20 to the name of the project will lead to the error.","Url":"https://github.com/dotnet/sdk/issues/2905","RelatedDescription":"Open issue \"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name\" (#2905)"},{"Id":"406318950","IsPullRequest":true,"CreatedAt":"2019-02-04T14:11:15","Actor":"dotnet-maestro[bot]","Number":"2903","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19103.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19103.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2903","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2903)"},{"Id":"406134970","IsPullRequest":false,"CreatedAt":"2019-02-03T21:46:46","Actor":"LordMike","Number":"2902","RawContent":null,"Title":"GenerateDepsFile: The process cannot access the file '...\\MyProject.deps.json' because it is being used by another process.","State":"open","Body":"**UPDATE: While writing this, rather long, post -- I've managed to produce a small reproduction example, see bottom**\r\n\r\nWe've recently upgraded our builds to run on faster hardware with more cpu cores, and are now ~100% of the time seeing the below error in a number of repositories. The error here is from Windows, but our CI servers run on linux and have the same error (see logs below).\r\n\r\nWe run the following commandlines:\r\n\r\n> \"C:\\Program Files\\dotnet\\dotnet.exe\" restore C:\\Project\\MyProject.sln\r\n> \"C:\\Program Files\\dotnet\\dotnet.exe\" build C:\\Project\\MyProject.sln --configuration Debug --framework netstandard2.0 --no-restore\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error MSB4018\r\n\r\nThe \"GenerateDepsFile\" task failed unexpectedly. [C:\\Project\\MyProject.csproj]\r\nSystem.IO.IOException: The process cannot access the file 'C:\\Project\\bin\\Debug\\netstandard2.0\\MyProject.deps.json' because it is being used by another process. [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.File.Create(String path) [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Project\\MyProject.csproj]\r\n```\r\n\r\n#### Observations:\r\n\r\n* This fails on my local Windows desktop roughly 33% of the time. Rerunning the build (no cleanup) always succeeds (seems to be a race condition, so HW speeds play a role). On our Linux CI servers, it fails 100% of the time currently\r\n* The deps file in question is _always_ the same file for a given repository / builds. The file is for a shared library between multiple projects.\r\n* A plain `dotnet build MyProject.sln -f netstandard2.0` (no build script) also exhibits this issue.\r\n* A `dotnet build MyProject.sln` seemingly always succeeds (locally and on CI server), at least for three consecutive attempts right now.\r\n* All the projects in the `MyProject.sln` have `netstandard2.0` - but a number of them have more targets (ie. netcoreapp)\r\n* ~We have more projects, f.ex. for tests, but they're in `MyProject-Tests.sln`. These projects only target `netcoreapp2.x` - we've split the solutions both for speed when developing and to be able to build artifacts without compiling the tests (since we can't build certain projects from the solution only ... that's another issue entirely)~ _(not relevant)_\r\n* Limiting the build to one process (msbuild: `/m:1`) seems to \"solve\" the problem.\r\n* At work (inaccessible currently), I performed some Procmon captures to see the difference between successful and failing runs\r\n  * It turns out, that two `dotnet.exe` processes attempt to create the `.deps.json` files\r\n  * When succeeding, there is a clear seperation between two CreateFile() calls, where the first creates the file, and the second call (from the second PID) finds the file already there and does nothing (not even reads it)\r\n  * When failing, the two processes make calls overlapping each other, leading to both of them discovering the file as missing, and both trying to create it (one obviously failing, producing the stacktrace above) -- classical concurrency issue.\r\n\r\nSo. \r\n\r\n* It should be that when two projects reference a third, shared, project .. that this shared one is built exactly once .. right?.. How come two attempts are made at writing the same `.deps.json` files?\r\n* How come this seemingly works fine, when building for all target frameworks?\r\n\r\n#### Versions:\r\n* Local, Windows 10 x64, `dotnet 2.2.101`\r\n* Linux CI, docker, `dotnet 2.2.103` (we build our own docker images using the dockerfile from the base `microsoft/dotnet:2-sdk` images)\r\n\r\n#### Reproduction\r\n\r\nProject: [ci-stresstest-master.zip](https://github.com/dotnet/sdk/files/2826051/ci-stresstest-master.zip)\r\n\r\nIn it, I have a solution with 5 projects, all empty (no actual code), but with a targeting setup that mimicks a very small subset of our projects. I've then created four seperate CI builds that did the following:\r\n\r\n* [log](https://github.com/dotnet/sdk/files/2826053/restore-build.txt) (succeeds) `dotnet restore ci-stresstest.sln` + `dotnet build ci-stresstest.sln --no-restore` \r\n* [log](https://github.com/dotnet/sdk/files/2826054/build.txt) (succeeds) `dotnet build ci-stresstest.sln`\r\n* [log](https://github.com/dotnet/sdk/files/2826055/restore-build-framework.txt) (fails) `dotnet restore ci-stresstest.sln` + `dotnet build ci-stresstest.sln -f netstandard2.0 --no-restore`\r\n* [log](https://github.com/dotnet/sdk/files/2826056/build-framework.txt) (fails) `dotnet build ci-stresstest.sln -f netstandard2.0`\r\n\r\n##### Notes on repro.\r\n\r\n* We run a vanilla docker setup for CI, except for one thing:\r\n  * We mount a shared directory for nuget packages, to be able to share downloaded packages between builds\r\n\r\nSee also #2076","Url":"https://github.com/dotnet/sdk/issues/2902","RelatedDescription":"Open issue \"GenerateDepsFile: The process cannot access the file '...\\MyProject.deps.json' because it is being used by another process.\" (#2902)"},{"Id":"406086069","IsPullRequest":true,"CreatedAt":"2019-02-03T14:06:00","Actor":"dotnet-maestro[bot]","Number":"2901","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19102.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19102.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2901","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2901)"},{"Id":"405980989","IsPullRequest":true,"CreatedAt":"2019-02-02T14:21:04","Actor":"dotnet-maestro[bot]","Number":"2900","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19101.16\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19101.16\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2900","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2900)"},{"Id":"405976817","IsPullRequest":true,"CreatedAt":"2019-02-02T12:01:29","Actor":"dotnet-bot","Number":"2899","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2899","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2899)"},{"Id":"405919332","IsPullRequest":true,"CreatedAt":"2019-02-02T03:00:14","Actor":"dotnet-bot","Number":"2897","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2897","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2897)"},{"Id":"405886328","IsPullRequest":true,"CreatedAt":"2019-02-02T02:35:40","Actor":"wli3","Number":"2896","RawContent":null,"Title":"WIP test ci","State":"closed","Body":"Seems It_uses_NetstandardLibrary20x_as_the_implicit_version_for_NetStandard20 will always fail with 2.0.2 instead of 2.0.3","Url":"https://github.com/dotnet/sdk/pull/2896","RelatedDescription":"Closed or merged PR \"WIP test ci\" (#2896)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1093308202496647168","CreatedAt":"2019-02-07T00:39:22+00:00","UserScreenname":"dotnet","Text":"Did you know that the WPF team is hiring developers? If you're interested, ping Amit Kabra via @LinkedIn https://t.co/b3cxGZuhmP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":65,"FavoriteCount":36,"RawContent":null},{"Id":"1093184056282337280","CreatedAt":"2019-02-06T16:26:04+00:00","UserScreenname":"dotnet","Text":"This is a great program. Go check it out! https://t.co/tR4dh1UcC5","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":18,"FavoriteCount":8,"RawContent":null},{"Id":"1092843649904271360","CreatedAt":"2019-02-05T17:53:24+00:00","UserScreenname":"dotnet","Text":"Take a look at today's new On .NET episode.\n\n\"Learning Machine Learning with .NET, PyTorch and the ONNX Runtime\"… https://t.co/DLFVmdR0m1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":36,"RawContent":null},{"Id":"1091393276047876097","CreatedAt":"2019-02-01T17:50:08+00:00","UserScreenname":"dotnet","Text":"Into a different kind of curlies? Our C++ friends are hiring too! https://t.co/CWYhdMAqnt","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-02-09T05:30:51.1484633Z","RunDurationInMilliseconds":19427}