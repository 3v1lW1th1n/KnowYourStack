{"Data":{"Blog":{"FeedItems":[{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null},{"Title":"Update Your Xamarin.Mac Apps for 64-bit Today!","PublishedOn":"2018-05-14T18:33:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last June, Apple announced that upcoming macOS releases would only support 32-bit applications “with compromises”. If your Mac application is not 64-bit, we strongly recommend taking action to avoid...","Href":"https://blog.xamarin.com/update-xamarinmac-apps/","RawContent":null},{"Title":"Podcast: Build 2018 Recap for Mobile Developers","PublishedOn":"2018-05-11T18:38:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the news for mobile developers from Build 2018, including Xamarin.Forms 3.0, Hyper-V support for the Android emulator,...","Href":"https://blog.xamarin.com/podcast-build-2018-recap-mobile-developers/","RawContent":null},{"Title":"All Things Xamarin at Build 2018","PublishedOn":"2018-05-09T15:07:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Build 2018 has finally arrived which means exciting news for developers about Microsoft products and technologies, including Xamarin. For those following along at home, we’ve rounded up all...","Href":"https://blog.xamarin.com/xamarin-build-2018/","RawContent":null},{"Title":"Try the Latest Release of Xamarin.Forms 3.0!","PublishedOn":"2018-05-07T19:05:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are overjoyed to bring you our latest stable release of Xamarin.Forms, version 3.0. This is our fastest, richest release to date coupled with fantastic improvements up and down the Xamarin stack...","Href":"https://blog.xamarin.com/xamarin-forms-3-0-released/","RawContent":null},{"Title":"Mobile Development at Microsoft Build 2018","PublishedOn":"2018-05-04T22:03:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s almost time for Microsoft Build 2018 in Seattle, Washington and that means a full three days of keynotes, breakout and theater sessions, workshops, and all the latest updates to your...","Href":"https://blog.xamarin.com/mobile-development-microsoft-build-2018/","RawContent":null},{"Title":"Xamarin Developer Events in May","PublishedOn":"2018-05-02T18:35:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET user groups are hosting recap events around the world all month long to ensure every developer gets the most they can out of Microsoft Build. Continue your Xamarin development...","Href":"https://blog.xamarin.com/xamarin-developer-events-may/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7739341169","Type":"IssuesEvent","CreatedAt":"2018-05-28T15:21:10","Actor":"MatthewGerber","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1740","RelatedDescription":"Opened issue \"TestSuiteActivity.cs blocks UI thread when running tests\" (#1740) at xamarin/xamarin-android","RelatedBody":"I am using [TestSuiteActivity](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.NUnitLite/Gui/Activities/TestSuiteActivity.cs) within nunitlite for unit testing. One of my unit tests runs on the UI thread, and I think this test is being blocked because the button click handler for starting the tests runs on the UI thread (see [here](https://github.com/xamarin/xamarin-android/blob/462add4c95e19a56c2672d654ed840065277420e/src/Xamarin.Android.NUnitLite/Gui/Activities/TestSuiteActivity.cs#L60)). When I set `automated` to `true` everything works fine (no blocking), as this approach runs the tests on a new thread (see [here](https://github.com/xamarin/xamarin-android/blob/462add4c95e19a56c2672d654ed840065277420e/src/Xamarin.Android.NUnitLite/Gui/Activities/TestSuiteActivity.cs#L88)). Seems like the solution to my problem would be to run the tests on a new thread when clicking the button, as done with automated testing. Agreed?"},{"Id":"7739236168","Type":"PullRequestEvent","CreatedAt":"2018-05-28T14:57:37","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1739","RelatedDescription":"Opened pull request \"[build] Prepare Java.Runtime.Environment.Override.dllmap\" (#1739) at xamarin/xamarin-android","RelatedBody":"Prepare dllmap override in Java.Interop repo to have\r\n`Java.Runtime.Environment.dll` working with our libmono-android shared\r\nlibrary.\r\n\r\nIntroduced `build-tools/scripts/java-interop.dllmap` to share that\r\ninformation between `Java.Interop.dll.config` and\r\n`Java.Runtime.Environment.dll.config`."},{"Id":"7738962224","Type":"PullRequestEvent","CreatedAt":"2018-05-28T13:59:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1736","RelatedDescription":"Merged pull request \"Fix \"make install\" target (make sure to remove previous installation …\" (#1736) at xamarin/xamarin-android","RelatedBody":"…dir).\r\n\r\nCloses https://github.com/xamarin/xamarin-android/issues/1648"},{"Id":"7738358580","Type":"IssuesEvent","CreatedAt":"2018-05-28T11:44:49","Actor":"duchnoun","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1738","RelatedDescription":"Opened issue \"Desugar from a new project doesn't work at all (Java 8 > Java 7 Bytecode)\" (#1738) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a new project (shared or pcl)\r\n2. Add in the csproj file sections : <AndroidEnableDesugar>True</AndroidEnableDesugar>\r\n3. Generate solution\r\n\r\n\r\n### Expected Behavior\r\nCompile should work\r\n\r\n### Actual Behavior\r\n\r\nDx fail with Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension;\r\n\r\n\r\n### Version Information\r\n\r\nBuild Tools v 27.0.3\r\nSdk tools 26.1.1\r\nPlatform : All\r\n\r\n\r\n### Log File\r\n\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$AbstractDesugaringStrategy;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$ConcurrentWeakIdentityHashMap;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$ConcurrentWeakIdentityHashMap$WeakKey;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$MimicDesugaringStrategy;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$NullDesugaringStrategy;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$ReuseDesugaringStrategy;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension;\r\n1>  Uncaught translation error: java.lang.IllegalArgumentException: already added: Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension$AbstractDesugaringStrategy;\r\n1>  \r\n1>  UNEXPECTED TOP-LEVEL EXCEPTION:\r\n1>  java.lang.RuntimeException: Translation has been interrupted\r\n1>  \tat com.android.dx.command.dexer.Main.processAllFiles(Main.java:615)\r\n1>  \tat com.android.dx.command.dexer.Main.runMonoDex(Main.java:313)\r\n1>  \tat com.android.dx.command.dexer.Main.runDx(Main.java:291)\r\n1>  \tat com.android.dx.command.dexer.Main.main(Main.java:247)\r\n1>  \tat com.android.dx.command.Main.main(Main.java:94)\r\n1>  Caused by: java.lang.InterruptedException: Too many errors\r\n1>  \tat com.android.dx.command.dexer.Main.processAllFiles(Main.java:607)\r\n1>  \t... 4 more\r\n1>C:\\Program Files (x\r\n[test01 - Copie.zip](https://github.com/xamarin/xamarin-android/files/2044893/test01.-.Copie.zip)\r\n86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2254,3): error : java.lang.IllegalArgumentException: already added :  Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension;\r\n1>    DexOutputs: \r\n1>Exécution de la tâche \"CompileToDalvik\" terminée -- ÉCHEC.\r\n1>Génération de la cible \"_CompileToDalvikWithDx\" terminée dans le projet \"test01.Android.csproj\" -- ÉCHEC.\r\n1>\r\n1>ÉCHEC de la build.\r\n1>\r\n1>\"c:\\mimichat\\test01\\test01\\test01.Android\\test01.Android.csproj\" (cible par défaut) (1) ->\r\n1>(_CompileToDalvikWithDx cible) -> \r\n1>  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2254,3): error : java.lang.IllegalArgumentException: already added :  Lcom/google/devtools/build/android/desugar/runtime/ThrowableExtension;\r\n1>\r\n1>    0 Avertissement(s)\r\n1>    1 Erreur(s)\r\n1>\r\n1>Temps écoulé 00:00:31.21\r\n========== Génération : 0 a réussi, 1 a échoué, 0 mis à jour, 0 a été ignoré ==========\r\n\r\n-->"},{"Id":"7737325245","Type":"IssuesEvent","CreatedAt":"2018-05-28T07:50:04","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1737","RelatedDescription":"Opened issue \"The build script is buggy and fails to build android-P Mono.Android.dll to the right place.\" (#1737) at xamarin/xamarin-android","RelatedBody":"Have this content as top-level `Configuration.Override.props`:\r\n\r\n```\r\n<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <AndroidApiLevel>28</AndroidApiLevel>\r\n    <AndroidPlatformId>P</AndroidPlatformId>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nRun `make prepare all`.\r\n\r\nIt does not generate `bin/Debug/lib/xamarin.android/xbuild-framework/MonoAndroid/v8.1.99/` and its contents.\r\n\r\nMeanwhile, src/Mono.Android/obj/Debug/android-28/Mono.Android.dll IS created.\r\n\r\nThere must be a buggy build script in somewhere in the MSBuild script spaghetti."},{"Id":"7737257139","Type":"PullRequestEvent","CreatedAt":"2018-05-28T07:34:09","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1736","RelatedDescription":"Opened pull request \"Fix \"make install\" target (make sure to remove previous installation …\" (#1736) at xamarin/xamarin-android","RelatedBody":"…dir).\r\n\r\nCloses https://github.com/xamarin/xamarin-android/issues/1648"},{"Id":"7736867182","Type":"IssuesEvent","CreatedAt":"2018-05-28T05:35:42","Actor":"erikpowa","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1735","RelatedDescription":"Opened issue \"Large solution + binding project load performance\" (#1735) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a solution with 100+ binding libraries\r\n2. Unload projects or close solution\r\n3. Reload project or reopen solution\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nload under 10 seconds as always\r\n### Actual Behavior\r\nSometimes it takes **30**+!! minutes to load the solution\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n<details>\r\n\r\nMicrosoft Visual Studio Enterprise 2017 Preview\r\nVersion 15.8.0 Preview 1.0\r\nVisualStudio.15.Preview/15.8.0-pre.1.0+27705.0\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2017   00369-60000-00001-AA706\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40502.0\r\nASP.NET and Web Tools 2017\r\n\r\nC# Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 16ecf5a30ad868d183c58e4a71a71c23d4ed3ba9.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27705.00\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.0.442 (396b18cef)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.264 (fc37cd02e)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.99.19 (HEAD/09df99bdc)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n</details>\r\n\r\n### Etc\r\n\r\nI got 121 .csproj in a solution and it's usually loading **under 8** seconds except when the _generator.exe_ gets triggered and start stressing the CPU (there is no I/O and the memory is not growing).\r\nWhat does the \"Generator Task?\" (_generator.exe_) doing exactly and when is it triggered?\r\nIs there any way to speed it up? It's 1-3 instances  (_generator.exe_) usually but would be great if I could set it to 16 like msbuild.\r\n"},{"Id":"7732815081","Type":"IssuesEvent","CreatedAt":"2018-05-26T02:44:51","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1493","RelatedDescription":"Reopened issue \"\"make prepare\" failing on building xamarin-android from source.\" (#1493) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n(not reproducible in all environments, but I can reproduce on both of my Macs)\r\n\r\n1. Do a new checkout of xamarin-android d15-6 branch (issue affect master also, but output is different) \r\n2. Run **make prepare**\r\n\r\n### Expected Behavior\r\nmake prepare step will succeed\r\n\r\n### Actual Behavior\r\nmake prepare step fails with \r\n```\r\nbuild-tools/scripts/jdk.mk:130: *** missing separator.  Stop.\r\nmake: *** [prepare-external] Error 2\r\n```\r\n\r\n## Notes\r\n\r\nAfter much discussion and testing, it was determined that the command: \r\n```\r\n_DARWIN_JDK_FALLBACK_DIRS := $(wildcard /Library/Java/JavaVirtualMachines/jdk*)\r\n_DARWIN_JDK_ROOT := $(shell ls -dtr $(_DARWIN_JDK_FALLBACK_DIRS) | sort | tail -1)\r\n```\r\nin the jdk.mk file was causing some erroneous characters in the path that was later used in `JI_JVM_PATH`, which is evaluated on line 130 and caused the **make prepare** step to fail with the \"missing separator\" error. \r\n\r\nAfter `_DARWIN_JDK_ROOT` was assigned as above, outputting it with:\r\n```\r\necho _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nresulted in very odd output:\r\n```\r\necho _DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\n_DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\nkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkin/sh: 49m: command not found\r\nmake: *** [jonp] Error 127\r\n```\r\n\r\nThis strange output causes the jdk.mk file to stop on line 130 (using the d15-6 branch of xamarin-android) as the path was obviously not correct in the `JI_JVM_PATH` and apparently was deemed as \"missing a separator.\" \r\n\r\nThat strange output can be reproduced more simply with the following in a makefile: \r\n```\r\n_DARWIN_JDK_ROOT := $(shell ls -d /path/to/any/folder)\r\njonp:\r\n        echo _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nI have attached a zipped folder that should serve as a complete repro called testmakefile.zip\r\n[testmakefile.zip](https://github.com/xamarin/xamarin-android/files/1861712/testmakefile.zip)\r\n\r\nNeither Jon P nor Alex K were able to reproduce this issue on their systems.\r\n\r\nI found an SO post that seems to indicate that using `$(shell ls ... )` in a makefile is unreliable and should be avoided, so perhaps we need to modify jdk.mk to avoid using `$(shell ls ...)` and instead use `$(shell find ...)` or `$(wildcard ...)` both of which worked to resolve this issue in the jdk.mk file.\r\n\r\ne.g.:\r\n```\r\n_DARWIN_JDK_ROOT := $(shell find $(_DARWIN_JDK_FALLBACK_DIRS) -depth 0 | sort -n | tail -1)\r\n```\r\nSO post: https://stackoverflow.com/a/10024479/2913599\r\n\r\nRelevant paragraph: \r\n> Finally, as a general rule (not really applicable to this example): as esperanto notes in comments, using the output from ls is not completely reliable (some details depend on file names and sometimes even the version of ls; some versions of ls attempt to sanitize output in some cases). Thus, as l0b0 and idelic note, if you're using GNU make you can use $(wildcard) and $(subst ...) to accomplish everything inside make itself (avoiding any \"weird characters in file name\" issues). (In sh scripts, including the recipe portion of makefiles, another method is to use find ... -print0 | xargs -0 to avoid tripping over blanks, newlines, control characters, and so on.)\r\n\r\n### Version Information\r\nmacOS 10.13.3\r\n\r\n### Log File\r\n\r\n[XAd15-6MakePrepareOutput.txt](https://github.com/xamarin/xamarin-android/files/1861667/XAd15-6MakePrepareOutput.txt)"},{"Id":"7732795810","Type":"IssuesEvent","CreatedAt":"2018-05-26T02:28:28","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1405","RelatedDescription":"Closed issue \"When \"Use Shared Runtime\" is unchecked, any code changes aren't picked up\" (#1405) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. In Xamarin Android project settings, uncheck \"Use Shared Runtime\"\r\n2. Select armembi-v7a as the only supported platform\r\n3. Run a simple Hello World app by pressing F5\r\n4. Stop debugging\r\n5. Comment out a line of code\r\n6. Run again with F5\r\n\r\n### Expected Behavior\r\n\r\nThe changes should be picked up and the commented out line shouldn't execute\r\n\r\n### Actual Behavior\r\n\r\nThe commented out line is still executed. Changes to the source code are not deployed\r\n\r\n### Version Information\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.6.1\r\nVisualStudio.15.Release/15.6.1+27428.2002\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2017   00369-60000-00001-AA324\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# Tools 10.1 for F# 4.1   00369-60000-00001-AA324\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10212.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40214.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51214.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40215.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51212.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61801.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62620-07. Commit Hash: e873e69306527a0424e97af2985370556f474019\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.27406.00\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27428.01\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.749 (9b0fce36d)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.58 (cee1369d0)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.15 (HEAD/22d97e153)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.8.0.20 (1c6f300)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\nXenko.VisualStudio.Package   2.0\r\nXenko VisualStudio Package\n\n> VS bug [#621197](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/621197)"},{"Id":"7732785975","Type":"PullRequestEvent","CreatedAt":"2018-05-26T02:20:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1729","RelatedDescription":"Merged pull request \"[Linux] Add submodules to cross-build libmonodroid for Windows\" (#1729) at xamarin/xamarin-android","RelatedBody":"Adds two components that are required by libmonodroid but not provided with the\r\npackaged mingw on Linux (they are part of the mxe build on macOS):\r\n\r\n  * dlfcn-win32: implementation of dlopen + friends for Windows\r\n  * mman-win32: implementation of mman.h (mmap and friends) for Windows\r\n\r\nThis allows to perform a full build of Xamarin.Android with cross build for Windows on Linux"},{"Id":"7732716487","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:22:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1573","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Support for `aapt2`. \" (#1573) at xamarin/xamarin-android","RelatedBody":"The AndroidSDK provides a new tool for packaging called `aapt2`. It works slightly differently to the normal `aapt` process. The build process is split into two parts, the first is a `compile` step. This produces a `flata` zip file which contains the compiled `flat` resources. Once all the `flata` archives have been produced the final apk can be built using the `link` step. This step will collect all the `flata` archive and combine them into one. \r\n\r\nThe new build system will make use of this new tooling by default. It will detect the presence of `aapt2` in the `build-tools` folder and if it is present it will be used. If it is not present the old `aapt` tool will be used. Note users can **override** this default behaviour by setting the following in the csproj\r\n\r\n```\r\n<AndroidUseAapt2>False</AndroidUseAapt2>\r\n```\r\n\r\nor providing the value on the command line as an msbuild parameter. \r\n\r\n```\r\n/p:AndroidUseAapt2=False\r\n```\r\n\r\nHow it works\r\n-------------\r\n\r\nThe new `aapt2` tool works in two stages. A `compile` stage and a `link` stage. The `compile` stage will generate a `.flata` archive. This is just a zip file which contains a bunch of compiled resources in a binary `flat` format. That format is internal to the android tooling. \r\n\r\nThe `compiled` invocation is as follows\r\n\r\n    aapt2 compile -o obj/Debug/res/compiled.flata -dir obj/Debug/res\r\n\r\nthis will produce the `obj/Debug/res/compiled.flata` file. We run this kind of invocation for every `res` directory the project is using. So the new build system when in use will also create a `compiled.flata` archive for each support library or library project referenced. It will create these files in the various `$(IntermediateOutputPath)lp\\*` directories.\r\n\r\nThe idea behind this is that if an app resource is changed only the `compiled.flata` for that directory will be updated. All the other resources will be left as they are. This is where we should gain some improvement in build times, since the old `aapt` system would rebuild everything!\r\n\r\nThe `link` step is where all of the `.flata` archive are combined into a resource package. \r\n\r\n    aapt2 link -o resources.apk.bk --manifest Foo.xml --java . --custom-package com.infinitespace_studios.blankforms -R foo2.flata -R foo.flata -v --auto-add-overlay --output-text-symbols obj/Debug/R.txt\r\n\r\nNote the `.flata` archives are passed using the `-R` option. The order is important just like it was for `aapt`. The last item will be the application resources. This allows developers to override resource values if needed. We also generate the `R.txt` file at this point. This is used to generate the design time `Resource.designer.cs` for intelligence.\r\n\r\nThese are the build resources for a Blank Xamarin Forms App. \r\n\r\nTool | Clean Build | Build Touching only C# | Build Touching only Resource |\r\n-----|------------|------------------------|-------------------------------|\r\nAapt | 00:00:51.74| 00:00:08.91| 00:00:25.26 |\r\nAapt2 |00:00:50.70 |00:00:08.64 |00:00:08.44 |\r\n\r\nThe first build is unchanged, but the main gain is when building after only touching a resource. This is because only the .flata file for that directory is compiled. Then ALL the flata archives will be linked again to produce the resources. \r\n\r\nResource Designer Generation\r\n-------------------------------\r\n\r\nThis new system does not parse the `R.java` files for the `Resource.Designer.cs` file. Instead it makes use of the `R.txt` file which we generate as part of the `aapt2 link` call. This is then parsed by the `ManagedResourceParser`. We do still need to generate the `R.java` files since they are needed by the java compiler when compiling the generated java code. But parsing the `R.txt` should be quicker. \r\n\r\nTODO\r\n-------------\r\n- [x] Check design time builds are not slower in VS (or don't break)\r\n- [x] Check build times for some known apps\r\n- [x] Store the aapt2 version\r\n- [x] Add support for clearing the cache .flata files if the aapt2 version changes.\r\n- [x] Get xamarin-android building with `aapt2`.\r\n\r\n\r\n"},{"Id":"7732706045","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:14:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1733","RelatedDescription":"Merged pull request \"[tests] Set timeouts for Adb tasks\" (#1733) at xamarin/xamarin-android","RelatedBody":"Set `Timeout` parameters for `Adb` task calls (and tasks based on\r\nAdb).\r\n\r\nWe are still experiencing issues where `adb` get stuck for unknown\r\nreason. Like in this case where it locked for nearly 7 hours.\r\n\r\n```\r\n01:39:56   adb I 05-25 01:39:56 71573 6448255 adb_io.cpp:75] readx: fd=3 wanted=4 (TaskId:88)\r\n08:18:29 Build timed out (after 600 minutes). Marking the build as aborted.\r\n```\r\n\r\nWe set the timeout in most cases to 1 or 2 minutes, plus these cases\r\nwith longer timeouts:\r\n\r\n * RunInstrumentationTests 30 minutes\r\n * RunUITests 5 minutes"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7740490740","Type":"IssuesEvent","CreatedAt":"2018-05-28T22:08:31","Actor":"xamoulin","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2852","RelatedDescription":"Opened issue \"Support UITableViewStyle.Grouped for ListView on iOS\" (#2852) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nIt would be great that the UITableView under the ListView could be initialized with UITableViewStyle.Grouped. Something like the Intent property of TableView."},{"Id":"7740046106","Type":"IssuesEvent","CreatedAt":"2018-05-28T19:09:01","Actor":"ackava","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2851","RelatedDescription":"Opened issue \"Enhanced ListView (build 2017)\" (#2851) at xamarin/Xamarin.Forms","RelatedBody":"Last year in build 2017, in some of the videos it was announced that Xamarin.Forms 3.0 will,\r\n\r\n1. Support DataTemplate of type View instead of Cell, no more cells\r\n2. Support adding Views directly into ListBox\r\n\r\nI see that DataTemplate for ListBox still needs to be of type Cell, so these ideas were abandoned?"},{"Id":"7739907208","Type":"IssuesEvent","CreatedAt":"2018-05-28T18:17:57","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2850","RelatedDescription":"Closed issue \"HorizontalTextAlignment property does not work\" (#2850) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHorizontalTextAlignment property does not work\r\n\r\n### Steps to Reproduce\r\n\r\n            Entry entryQuantita = new Entry() { FontSize = 120, FontAttributes = FontAttributes.Bold, HorizontalTextAlignment = TextAlignment.Center, Keyboard = Keyboard.Numeric };\r\n\r\nadd this entry to a StackLayout. Alignment is left, not center \r\n\r\n### Expected Behavior\r\nEntry center Aligned\r\n### Actual Behavior\r\nEntry left Aligned\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.469394-pre1\r\n- Last known good version: 2.5.1\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: Min version 4.3  Destination 8.1 \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices: Datalogic DL-AXISTS\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/5759350/40625545-7cf745aa-62b3-11e8-8842-ea3d86747df7.png)\r\n\r\n### Reproduction Link\r\n"},{"Id":"7739894887","Type":"IssuesEvent","CreatedAt":"2018-05-28T18:13:18","Actor":"acaliaro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2850","RelatedDescription":"Opened issue \"HorizontalTextAlignment property does not work\" (#2850) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHorizontalTextAlignment property does not work\r\n\r\n### Steps to Reproduce\r\n\r\n            Entry entryQuantita = new Entry() { FontSize = 120, FontAttributes = FontAttributes.Bold, HorizontalTextAlignment = TextAlignment.Center, Keyboard = Keyboard.Numeric };\r\n\r\nadd this entry to a StackLayout. Alignment is left, not center \r\n\r\n### Expected Behavior\r\nEntry center Aligned\r\n### Actual Behavior\r\nEntry left Aligned\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.469394-pre1\r\n- Last known good version: 2.5.1\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: Min version 4.3  Destination 8.1 \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices: Datalogic DL-AXISTS\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/5759350/40625545-7cf745aa-62b3-11e8-8842-ea3d86747df7.png)\r\n\r\n### Reproduction Link\r\n"},{"Id":"7738777054","Type":"IssuesEvent","CreatedAt":"2018-05-28T13:20:00","Actor":"riccardiclaudio","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2849","RelatedDescription":"Opened issue \"Unable to see custom pins on Map\" (#2849) at xamarin/Xamarin.Forms","RelatedBody":"Hi,\r\n\r\nAfter update to the new version of Xamarin.Forms, custom pins are no longer visible on the map.\r\n\r\nThis is the custom renderer I use:\r\n\r\n<<<\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nusing Android.App;\r\nusing Android.Content;\r\nusing Android.Gms.Maps;\r\nusing Android.Gms.Maps.Model;\r\nusing Android.OS;\r\nusing Android.Runtime;\r\nusing Android.Views;\r\nusing Android.Widget;\r\nusing WaterMeter;\r\nusing WaterMeter.Customizations;\r\nusing WaterMeter.Droid;\r\nusing Xamarin.Forms;\r\nusing Xamarin.Forms.Maps;\r\nusing Xamarin.Forms.Maps.Android;\r\n\r\n[assembly: ExportRenderer(typeof(CustomMap), typeof(CustomMapRenderer))]\r\nnamespace WaterMeter.Droid\r\n{\r\n    public class CustomMapRenderer : MapRenderer\r\n    {\r\n        List<CustomPin> customPins;\r\n\r\n        public CustomMapRenderer(Context context) : base(context)\r\n        {\r\n        }\r\n\r\n        protected override void OnElementChanged(Xamarin.Forms.Platform.Android.ElementChangedEventArgs<Map> e)\r\n        {\r\n            base.OnElementChanged(e);\r\n\r\n            if (e.OldElement != null)\r\n            {\r\n                ;\r\n            }\r\n\r\n            if (e.NewElement != null)\r\n            {\r\n                var formsMap = (CustomMap)e.NewElement;\r\n                customPins = formsMap.CustomPins;\r\n                Control.GetMapAsync(this);\r\n            }\r\n        }\r\n\r\n        protected override MarkerOptions CreateMarker(Pin pin)\r\n        {\r\n            var marker = new MarkerOptions();\r\n            marker.SetPosition(new LatLng(pin.Position.Latitude, pin.Position.Longitude));\r\n            marker.SetTitle(pin.Label);\r\n            marker.SetSnippet(pin.Address);\r\n            CustomPin customPin = GetCustomPin(pin);\r\n            if (customPin.Value > 0)\r\n            {\r\n                marker.SetIcon(BitmapDescriptorFactory.DefaultMarker(BitmapDescriptorFactory.HueGreen));\r\n                //marker.SetIcon(ImageSource.FromResource(\"WaterMeter.Assets.Images.WaterMeterIcon.png\", assembly);\r\n            }\r\n            else\r\n            {\r\n                marker.SetIcon(BitmapDescriptorFactory.DefaultMarker());\r\n            }\r\n            return marker;\r\n        }\r\n\r\n        CustomPin GetCustomPin(Pin pin)\r\n        {\r\n            foreach (var p in customPins)\r\n            {\r\n                if (p.Id == pin.Id)\r\n                {\r\n                    return p;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        protected override void OnMapReady(GoogleMap map)\r\n        {\r\n            base.OnMapReady(map);\r\n        }\r\n    }\r\n}\r\n>>>\r\n\r\nThe custom renderer is triggered, but the custom pins are not visible.\r\n\r\nThe xaml for the map page is this:\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:maps=\"clr-namespace:Xamarin.Forms.Maps;assembly=Xamarin.Forms.Maps\"\r\n             xmlns:local=\"clr-namespace:WaterMeter.Customizations;assembly=WaterMeter\"\r\n             x:Class=\"WaterMeter.MapPage\">\r\n    <ContentPage.Content>\r\n        <local:CustomMap x:Name=\"locationsMap\" \r\n              HorizontalOptions=\"FillAndExpand\"\r\n              VerticalOptions=\"FillAndExpand\"\r\n              IsShowingUser=\"True\"\r\n              MapType=\"Hybrid\"/>\r\n    </ContentPage.Content>\r\n</ContentPage>\r\n\r\nXamarin.Forms     version = 2.5.0.122203\r\nXamarin.Forms.Maps     version = 2.5.0.122203\r\nXaml.Plugin.Geolocator     version = 4.2.0\r\nIDE: Visual Studio 2017 Community Edition\r\nAndroid Version: 7.1\r\n\r\n"},{"Id":"7738675596","Type":"IssuesEvent","CreatedAt":"2018-05-28T12:57:45","Actor":"tstivers1990","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2848","RelatedDescription":"Closed issue \"Xamarin.Forms.Device should be made non-static\" (#2848) at xamarin/Xamarin.Forms","RelatedBody":"##Summary\r\n`Xamarin.Forms.Device` is a static class with all members also being static. This makes unit testing difficult. When one needs to access the members of this class from within a ViewModel, in a lot of cases, it prevents the ViewModel from being unit tested. A simple change should be able to fix this without breaking anything.\r\n\r\n##API Changes\r\n\r\n* Change `Xamarin.Forms.Device` from a static class to a non-static class.\r\n\r\n##Intended Use Case\r\n\r\nThis would allow `Device` to be mocked in unit tests with a framework, such as NSubstitute, preventing the runtime errors that would normally be thrown when running the contained methods or accessing the contained properties outside of a device."},{"Id":"7738617668","Type":"IssuesEvent","CreatedAt":"2018-05-28T12:45:09","Actor":"tstivers1990","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2848","RelatedDescription":"Opened issue \"Xamarin.Forms.Device should be made non-static\" (#2848) at xamarin/Xamarin.Forms","RelatedBody":"##Summary\r\n`Xamarin.Forms.Device` is a static class with all members also being static. This makes unit testing difficult. When one needs to access the members of this class from within a ViewModel, in a lot of cases, it prevents the ViewModel from being unit tested. A simple change should be able to fix this.\r\n\r\n##API Changes\r\n\r\n* Change `Xamarin.Forms.Device` from a static class to a non-static class.\r\n\r\n##Intended Use Case\r\n\r\nThis would allow Device to be mocked in unit tests with a framework, such as NSubstitute, preventing the runtime errors that would normally be thrown when running the contained methods or accessing the contained properties outside of a device."}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7740519099","Type":"PullRequestEvent","CreatedAt":"2018-05-28T22:23:41","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4142","RelatedDescription":"Opened pull request \"[xharness] Parse 'Extension test log' as 'Test log' to improve reporting of extension unit tests.\" (#4142) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7740511071","Type":"PullRequestEvent","CreatedAt":"2018-05-28T22:19:17","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4141","RelatedDescription":"Opened pull request \"[tests] Make sure accessing the keychain doesn't make macOS show any dialogs.\" (#4141) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7740505009","Type":"PullRequestEvent","CreatedAt":"2018-05-28T22:15:58","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4140","RelatedDescription":"Opened pull request \"[xharness] Override Flush in LogFile to implement Flush as expected.\" (#4140) at xamarin/xamarin-macios","RelatedBody":"This should make some logs show up faster when running locally in server mode."},{"Id":"7740411534","Type":"PullRequestEvent","CreatedAt":"2018-05-28T21:30:48","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4139","RelatedDescription":"Opened pull request \"[apidiff] Fix detection of no changes.\" (#4139) at xamarin/xamarin-macios","RelatedBody":"We write 'No change detected' to [platform]-api-diff.html, which means that\nchecking for an empty file to detect no changes when generating the container\napi-diff.html doesn't work as intended.\n\nSo change the logic to check for the 'No change detected' string instead."},{"Id":"7740401910","Type":"PullRequestEvent","CreatedAt":"2018-05-28T21:26:39","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4137","RelatedDescription":"Merged pull request \"Bump maccore to get CI fix for provisioning profiles.\" (#4137) at xamarin/xamarin-macios","RelatedBody":"Diff: https://github.com/xamarin/maccore/compare/2c1024f96864bf3b01dd8d67b41681c971bc6f71...b9702c7ec8fb6dd7dd7972b9bb145c6e82b9ac87"},{"Id":"7739658633","Type":"PullRequestEvent","CreatedAt":"2018-05-28T16:50:10","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4138","RelatedDescription":"Opened pull request \"[jenkins] Improve api/generator diff reporting to say if there were changes, and if they were breaking or not.\" (#4138) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7739258102","Type":"PullRequestEvent","CreatedAt":"2018-05-28T15:02:23","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4137","RelatedDescription":"Opened pull request \"Bump maccore to get CI fix for provisioning profiles.\" (#4137) at xamarin/xamarin-macios","RelatedBody":"Diff: https://github.com/xamarin/maccore/compare/2c1024f96864bf3b01dd8d67b41681c971bc6f71...b9702c7ec8fb6dd7dd7972b9bb145c6e82b9ac87"},{"Id":"7738803049","Type":"IssuesEvent","CreatedAt":"2018-05-28T13:25:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4132","RelatedDescription":"Closed issue \"Xamarin's iOS linker issue with ef core\" (#4132) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Develop an app using Xamarin iOS & ef core 2.0\r\n2. Set linker to full using following xml config\r\n```xml\r\n<linker>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore.Relational\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.EntityFrameworkCore.Sqlite\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Logging\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Options\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"Microsoft.Extensions.Caching.Memory\">\r\n    <type fullname=\"*\" />\r\n  </assembly>\r\n  <assembly fullname=\"System.Core\">\r\n    <type fullname=\"System.Linq.Expressions.Expression`1\"></type>\r\n    <type fullname=\"System.Linq.Queryable\"></type>\r\n  </assembly>\r\n</linker>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI know I might add more assemblies/types to linker's xml config, and I was moving forward step by step very well.\r\n\r\nI'd like to see ef core is working with full linker at the end.\r\n\r\n### Actual Behavior\r\n\r\nObject reference null exception at following code:\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/Internal/ProductInfo.cs#L20\r\n\r\nIt seems that ```AssemblyInformationalVersionAttribute``` is somehow removed from Ef Core dll ! But in linker config I said don't alter ef core. I even added followings to linker config:\r\n\r\n```xml\r\n  <assembly fullname=\"mscorlib\">\r\n    <type fullname=\"System.Reflection\"></type>\r\n  </assembly>\r\n```\r\n\r\nThen I copied [the code](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/Internal/ProductInfo.cs#L20) to my app, but nothing changed.\r\n\r\nI'm sure that linker config is working in other areas, because I was able to fix lots of exceptions by that config.\r\n\r\n### Environment\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.7.1\r\nVisualStudio.15.Release/15.7.1+27703.2000\r\nMicrosoft .NET Framework\r\nVersion 4.7.03062\r\n\r\nInstalled Version: Enterprise\r\n\r\nC# Tools   2.8.0-beta6-62830-08. Commit Hash: e595ee276d14e14bfb3eb323fb57f2aa668bddea\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.0.442 (396b18cef)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.264 (fc37cd02e)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Live Reload   0.3.27 (remotes/origin/dev@207abf7)\r\nProvides live reload capabilities for Xamarin XAML.\r\n\r\nXamarin.Android SDK   8.3.0.19 (HEAD/342b2ce96)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.10.1.177 (7e782c1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.5.1 (build 22)\r\nInstallation UUID: d1359e59-15d2-4f4b-8b85-f2f70545f5a3\r\nRuntime:\r\n\tMono 5.10.1.47 (2017-12/8eb8f7d5e74) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010047\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3.1 (14154.1)\r\nBuild 9E501\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.10.1.178 (Visual Studio Community)\r\nHash: 408d3574\r\nBranch: d15-7\r\nBuild date: 2018-05-08 18:56:30-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705010022\r\nGit revision: 60442dd643a20c7a4ae1f8705b8d1de8972eee78\r\nBuild date: 2018-05-15 01:43:39+00\r\nXamarin addins: 4194ffe4868321e4c3477bd56aed579bda4c6fbb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n\r\n```\r\n\r\n### Example Project (If Possible)\r\n\r\nI attached the sample app, just run it (-:\r\n\r\n[XamiOSEfCoreLinker.zip](https://github.com/xamarin/xamarin-macios/files/2041785/XamiOSEfCoreLinker.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1000859470057132032","CreatedAt":"2018-05-27T22:01:07+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/iNmDBtF3zX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":15,"RawContent":null},{"Id":"1000408472083673089","CreatedAt":"2018-05-26T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/t7b1GH4pMp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":10,"RawContent":null},{"Id":"1000081068660330497","CreatedAt":"2018-05-25T18:28:02+00:00","UserScreenname":"xamarinhq","Text":"Join our open source family and help make https://t.co/3QxhuBuvHc even better: https://t.co/6h1HH1dTAM https://t.co/5go35jCm9N","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":75,"FavoriteCount":34,"RawContent":null},{"Id":"999682195089436672","CreatedAt":"2018-05-24T16:03:03+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/81dQ3CWoSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":13,"RawContent":null},{"Id":"999389007191728134","CreatedAt":"2018-05-23T20:38:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to secure and version your #Xamarin apps in this guest post on Mobile.BuildTools: https://t.co/NTtOmsdDTl https://t.co/ks5Q3K2joU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":17,"RawContent":null},{"Id":"998953429568573440","CreatedAt":"2018-05-22T15:47:11+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/2E1zBel6Cr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":21,"RawContent":null},{"Id":"998352195631435777","CreatedAt":"2018-05-20T23:58:06+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/tO3s7DT35f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":124,"FavoriteCount":46,"RawContent":null},{"Id":"997143964397572096","CreatedAt":"2018-05-17T15:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/LeAoHXXaA6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"996824503241052160","CreatedAt":"2018-05-16T18:47:36+00:00","UserScreenname":"xamarinhq","Text":"Get started with #XamarinEssentials cross-platform APIs: https://t.co/sW5UgLfeGb https://t.co/Bw4ufWhGP8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":150,"FavoriteCount":79,"RawContent":null},{"Id":"996785351665463297","CreatedAt":"2018-05-16T16:12:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/UZ5l6JaWcB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":11,"RawContent":null},{"Id":"996750580969365506","CreatedAt":"2018-05-16T13:53:51+00:00","UserScreenname":"xamarinhq","Text":"Learn about some small changes coming as we integrate https://t.co/iLyxWYOFfj content into Microsoft sites: https://t.co/RcvPgvkPTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"996423969308921856","CreatedAt":"2018-05-15T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/2LzUatSvjX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":24,"RawContent":null},{"Id":"996420693481938944","CreatedAt":"2018-05-15T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/aiwQSbkh1B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":24,"RawContent":null},{"Id":"996099804915814401","CreatedAt":"2018-05-14T18:47:54+00:00","UserScreenname":"xamarinhq","Text":"Avoid compromises in the next version of macOS by updating your Xamarin.Mac apps for 64-bit today: https://t.co/IB6aLnHlAq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"996040460673142784","CreatedAt":"2018-05-14T14:52:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/Z262pfyFdQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":24,"RawContent":null},{"Id":"995782486859964418","CreatedAt":"2018-05-13T21:47:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":79,"FavoriteCount":34,"RawContent":null},{"Id":"995405503118430215","CreatedAt":"2018-05-12T20:49:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"995013274252009473","CreatedAt":"2018-05-11T18:50:25+00:00","UserScreenname":"xamarinhq","Text":"On this week's epsiode of the #XamarinPodcast, get the #MSBuild 2018 recap for mobile developers: https://t.co/UhjdSxsePY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":9,"RawContent":null},{"Id":"994975698736570368","CreatedAt":"2018-05-11T16:21:06+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/iXX9NqH3wX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"994612280980660225","CreatedAt":"2018-05-10T16:17:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/TjAVAcfe1a","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2018-05-29T05:30:44.5620971Z","RunDurationInMilliseconds":3967}