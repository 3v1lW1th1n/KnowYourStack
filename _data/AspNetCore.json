{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core is... <a aria-label=\"read more about Announcing SignalR for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":44,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":104,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6598171707","Type":"PullRequestEvent","CreatedAt":"2017-09-16T01:06:27","Actor":"jkotalik","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/pull/2197","RelatedDescription":"Opened pull request \"[WIP] Update contributing information to be more chronological\" (#2197) at aspnet/Home","RelatedBody":"As discussed, I believe that the contributing section should be laid out in chronological order from \"I see a fix I would like to make\" to merging a pull request.\r\n@natemcmaster @Eilon @davidfowl "},{"Id":"6591812487","Type":"IssuesEvent","CreatedAt":"2017-09-14T17:24:59","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2196","RelatedDescription":"Closed issue \"UseOpenIdConnectAuthentication InvalidOperationException\" (#2196) at aspnet/Home","RelatedBody":"I am getting the same error as Edward that is tracked here #2155.\r\nWe are still using: netcoreapp1.1 \r\nError\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Provide Authority, MetadataAddress, Configuration, or ConfigurationManager to OpenIdConnectOptions\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware..ctor(RequestDelegate next, IDataProtectionProvider dataProtectionProvider, ILoggerFactory loggerFactory, UrlEncoder encoder, IServiceProvider services, IOptions``1 sharedOptions, IOptions``1 options, HtmlEncoder htmlEncoder)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass3_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\n```\r\n\r\nThis error only occurs when trying to run my site from the command line via **dotnet run**,but not when project is built and ran in Visual Studios.\r\nI don't have a custom IOptionsMonitor as was the issue from the other ticket.\r\n\r\nHere is my \r\n```\r\nvar baseUrl = appSettings.Value.BaseUrl;\r\napp.UseOpenIdConnectAuthentication(new OpenIdConnectOptions\r\n            {\r\n                AuthenticationScheme = \"oidc\",\r\n                SignInScheme = \"Cookies\",\r\n                Authority = baseUrl,\r\n                //should be true in prod!\r\n                RequireHttpsMetadata = false,\r\n                ClientId = \"customclient\",\r\n                ClientSecret = \"secretissafewithme\",\r\n                ResponseType = \"code id_token\",\r\n                Scope = {\"api1\", \"offline_access\"},\r\n                GetClaimsFromUserInfoEndpoint = true,\r\n\r\n                SaveTokens = true,\r\n\r\n                TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\r\n                {\r\n                    NameClaimType = JwtClaimTypes.Name,\r\n                    RoleClaimType = JwtClaimTypes.Role,\r\n                },\r\n                //UseTokenLifetime = true,\r\n                Events = new OpenIdConnectEvents\r\n                {\r\n                    // Called when authentication is completed. This is the last event, assuming that authentication succeeds. \r\n                    // After this event is handled, the user is signed into the app.\r\n                    OnTicketReceived = async trc =>\r\n                    {\r\n                        await Task.Run(() =>\r\n                        {\r\n                            // store both tokens in the claims/cookie.\r\n                            var identity = trc.Ticket.Principal.Identity as ClaimsIdentity;\r\n                            identity.AddClaims(new[]\r\n                            {\r\n                                new Claim(\"access_token\", trc.Ticket.Properties.GetTokenValue(\"access_token\")),\r\n                                new Claim(\"refresh_token\", trc.Ticket.Properties.GetTokenValue(\"refresh_token\")),\r\n                                new Claim(\"expires_at\", trc.Ticket.Properties.GetTokenValue(\"expires_at\")),\r\n                            });\r\n\r\n                            // cookie is good for multiple requests\r\n                            trc.Properties.IsPersistent = true;\r\n                            // set 12h expiration\r\n                            trc.Properties.ExpiresUtc = DateTimeOffset\r\n                                .Parse(trc.Ticket.Properties.GetTokenValue(\"expires_at\")).AddHours(12);\r\n                        });\r\n                    },\r\n                },\r\n            });\r\n```\r\n\r\nI would like to run without the use of Visual Studios, which it runs perfectly fine on. Any thoughts  @HaoK?\r\n"},{"Id":"6591658217","Type":"IssuesEvent","CreatedAt":"2017-09-14T16:48:54","Actor":"jayslife","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2196","RelatedDescription":"Opened issue \"UseOpenIdConnectAuthentication InvalidOperationException\" (#2196) at aspnet/Home","RelatedBody":"I am getting the same error as Edward that is tracked here #2155.\r\nWe are still using: netcoreapp1.1 \r\nError\r\n`Unhandled Exception: System.InvalidOperationException: Provide Authority, MetadataAddress, Configuration, or ConfigurationManager to OpenIdConnectOptions\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware..ctor(RequestDelegate next, IDataProtectionProvider dataProtectionProvider, ILoggerFactory loggerFactory, UrlEncoder encoder, IServiceProvider services, IOptions``1 sharedOptions, IOptions``1 options, HtmlEncoder htmlEncoder)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass3_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()`\r\n\r\nThis error only occurs when trying to run my site from the command line via **dotnet run**,but not when project is built and ran in Visual Studios.\r\nI don't have a custom IOptionsMonitor as was the issue from the other ticket.\r\n\r\nHere is my \r\n`\r\napp.UseOpenIdConnectAuthentication(new OpenIdConnectOptions\r\n            {\r\n                AuthenticationScheme = \"oidc\",\r\n                SignInScheme = \"Cookies\",\r\n                Authority = baseUrl,\r\n                //should be true in prod!\r\n                RequireHttpsMetadata = false,\r\n\r\n                ClientId = \"customclient\",\r\n                ClientSecret = \"secretissafewithme\",\r\n\r\n                ResponseType = \"code id_token\",\r\n                Scope = {\"api1\", \"offline_access\"},\r\n                GetClaimsFromUserInfoEndpoint = true,\r\n\r\n                SaveTokens = true,\r\n\r\n                TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\r\n                {\r\n                    NameClaimType = JwtClaimTypes.Name,\r\n                    RoleClaimType = JwtClaimTypes.Role,\r\n                },\r\n                //UseTokenLifetime = true,\r\n                Events = new OpenIdConnectEvents\r\n                {\r\n                    // Called when authentication is completed. This is the last event, assuming that authentication succeeds. \r\n                    // After this event is handled, the user is signed into the app.\r\n                    OnTicketReceived = async trc =>\r\n                    {\r\n                        await Task.Run(() =>\r\n                        {\r\n                            // store both tokens in the claims/cookie.\r\n                            var identity = trc.Ticket.Principal.Identity as ClaimsIdentity;\r\n                            identity.AddClaims(new[]\r\n                            {\r\n                                new Claim(\"access_token\", trc.Ticket.Properties.GetTokenValue(\"access_token\")),\r\n                                new Claim(\"refresh_token\", trc.Ticket.Properties.GetTokenValue(\"refresh_token\")),\r\n                                new Claim(\"expires_at\", trc.Ticket.Properties.GetTokenValue(\"expires_at\")),\r\n                            });\r\n\r\n                            // cookie is good for multiple requests\r\n                            trc.Properties.IsPersistent = true;\r\n                            // set 12h expiration\r\n                            trc.Properties.ExpiresUtc = DateTimeOffset\r\n                                .Parse(trc.Ticket.Properties.GetTokenValue(\"expires_at\")).AddHours(12);\r\n                        });\r\n                    },\r\n                },\r\n            });`\r\n\r\nI would like to run without the use of Visual Studios, which it runs perfectly fine on. Any thoughts  @HaoK?\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6598423856","Type":"PullRequestEvent","CreatedAt":"2017-09-16T04:57:15","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/897","RelatedDescription":null,"RelatedBody":"- Added ConnectionAbortedToken to the HubConnectionContext. This allows\r\narbitrary code to access a handle that represents the connection lifetime\r\nwithout handling OnDisconnectedAsync on the hub itself.\r\n- Expose Abort on HubConnectionContext to allow server side methods to\r\nabort the connection.\r\n- Use the Abort to stop the main loop when unexpected invocation errors happen.\r\n- Use the connection aborted token as unsubscribe from the IObservable and to complete\r\nthe IAsyncEnumerator for streaming results.\r\n\r\n#886 #481 #885"},{"Id":"6598423817","Type":"PullRequestEvent","CreatedAt":"2017-09-16T04:57:13","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/897","RelatedDescription":"Closed pull request \"Added Cancellation support\" (#897) at aspnet/SignalR","RelatedBody":"- Added ConnectionAbortedToken to the HubConnectionContext. This allows\r\narbitrary code to access a handle that represents the connection lifetime\r\nwithout handling OnDisconnectedAsync on the hub itself.\r\n- Expose Abort on HubConnectionContext to allow server side methods to\r\nabort the connection.\r\n- Use the Abort to stop the main loop when unexpected invocation errors happen.\r\n- Use the connection aborted token as unsubscribe from the IObservable and to complete\r\nthe IAsyncEnumerator for streaming results.\r\n\r\n#886 #481 #885"},{"Id":"6598419960","Type":"IssuesEvent","CreatedAt":"2017-09-16T04:53:07","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/898","RelatedDescription":"Opened issue \"Support cancelling Streaming results without client disconnection\" (#898) at aspnet/SignalR","RelatedBody":"Today cancelling streaming results requires the connection to go away or the server side to sever the close it. There's no way for the client to independently cancel a stream without closing the connection. Support this requires a protocol change and a new message type to indicate a cancelled stream.\r\n\r\n/cc @anurse @moozzyk "},{"Id":"6598417321","Type":"PullRequestEvent","CreatedAt":"2017-09-16T04:50:14","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/897","RelatedDescription":"Opened pull request \"Added Cancellation support\" (#897) at aspnet/SignalR","RelatedBody":"- Added ConnectionAbortedToken to the HubConnectionContext. This allows\r\narbitrary code to access a handle that represents the connection lifetime\r\nwithout handling OnDisconnectedAsync on the hub itself.\r\n- Expose Abort on HubConnectionContext to allow server side methods to\r\nabort the connection.\r\n- Use the Abort to stop the main loop when unexpected invocation errors happen.\r\n- Use the connection aborted token as unsubscribe from the IObservable and to complete\r\nthe IAsyncEnumerator for streaming results.\r\n\r\n#886 #481 #885"},{"Id":"6597842818","Type":"PullRequestEvent","CreatedAt":"2017-09-15T22:14:41","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/896","RelatedDescription":"Opened pull request \"Prepending relative urls with '/'\" (#896) at aspnet/SignalR","RelatedBody":""},{"Id":"6597818915","Type":"IssuesEvent","CreatedAt":"2017-09-15T22:05:43","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/770","RelatedDescription":"Closed issue \"Verify 1.0.0-alpha1\" (#770) at aspnet/SignalR","RelatedBody":"## Negative scenarios\r\n  - Call server/client methods where (@moozzyk)\r\n    - [ ] The method doesn't exist\r\n    - [ ] Method exists but invalid number of params are passed\r\n    - [ ] ... invalid types of parameters are passed\r\n\r\n## Port samples\r\n   - Stock Ticker using Streaming\r\n   - Move Shape\r\n   - Chat\r\n\r\n## Triage SignalR 2 samples and decide what to port (@davidfowl)\r\n   - https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr \r\n\r\n## Redis\r\n  - Chat app deployed to Azure, with two+ server instances \r\n    - With groups\r\n    - Direct messages\r\n\r\n## Authentication\r\n  - Chat app with (@BrennanConroy)\r\n    - Cookie auth\r\n    - With or without Identity \r\n    - JWT bearer Auth with C# client \r\n\r\n## Clients:\r\n  - C# \r\n    - .NET Core & .NET Framework (@moozzyk)\r\n    - Xamarin (@Moozzyk)\r\n  - TS - browser & node (@BrennanConroy))\r\n  - JS  - browser & node  (@moozzyk)\r\n\r\n## Dimensions:\r\n  - Transports\r\n  - Protocols\r\n  - Hub types\r\n  - Browsers"},{"Id":"6597797394","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:58:17","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/564","RelatedDescription":"Closed issue \"Support relative paths for JS HubConnection and Connection \" (#564) at aspnet/SignalR","RelatedBody":"Today we do use `document.location.host` for all of our samples https://github.com/aspnet/SignalR/blob/6576bb0ea46354823b4668d8d82a047a8efdff56/samples/SocketsSample/wwwroot/streaming.html#L44. We need to bake this into the client if the path is relative."},{"Id":"6597795781","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:57:44","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/626","RelatedDescription":"Closed issue \"REST endpoint Vs SignalR\" (#626) at aspnet/SignalR","RelatedBody":"I have an **Angular Mobile App** that uses a **.NET Core REST endpoint** which is hosted in Azure. This app is a mobile application for a user group. I will have a real-time functionality in the future where one of the person in the group modifies the data in the **MS SQL** database, the other people in the group should be notified and then update their mobile apps. But how often the data is changed is very minimum, so **push** feature to the mobile app is a luxury feature.\r\n\r\nIs SignalR appropriate for this app by considering:\r\n\r\n1. The push feature is used rarely.\r\n2. Keep the resource usage of the Azure less compared to the REST endpoint.\r\n3. Get hundreds of images from Azure Blob storage on request from the Angular client.\r\n4. Get data for hundreds of people when the app starts.\r\n5. Retrieve user data from the MS SQL on request.\r\n \r\n Is SignalR useful compared to [Angular HTTP](https://angular.io/guide/http) or [XMLHttpRequest ](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)or [Fetch ](https://angular.io/guide/http)or [JSONP](https://en.wikipedia.org/wiki/JSONP)?"},{"Id":"6597794772","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:57:23","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/648","RelatedDescription":"Closed issue \".NET Client Not Receiving\" (#648) at aspnet/SignalR","RelatedBody":"I'm not sure what I'm doing wrong, my ts client works as expected, and my .NET client can send messages to the hub without issue, but I cannot seem to figure out how to catch a calls from the hub to the .NET client....\r\n\r\nHubConnection = new HubConnection(new HttpConnection(new Uri(Consts.HubURL), TransportType.WebSockets));\r\nHubConnection.On(\"WriteMessage\", (string message) => { Console.WriteLine(message); });\r\nawait HubConnection.StartAsync();"},{"Id":"6597790787","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:55:59","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/713","RelatedDescription":"Closed issue \"/signalr return a 404 error \" (#713) at aspnet/SignalR","RelatedBody":"Hi,\r\n\r\nI try to implement SignalR Core within my Asp.Net Core 2 project, however, i cannot join my hubs with my Wpf client (2.2.2, protocol 1.4), /signar/negotiate returning a 404 error code.\r\n\r\nVersions:\r\n- Vs 2017 15.3.0 (Preview)\r\n- dotnet --version => 2.0.1-servicing-006924\r\n- Microsoft.AspNetCore.All 2.1.0-preview1-26627\r\n- Microsoft.AspNetCore.SignalR 1.0.0-alpha1-26627\r\n- Microsoft.AspNetCore.SignalR.Http 1.0.0-alpha1-26627\r\n\r\nStartup.cs\r\n\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddSignalR();\r\n    ...\r\n    services.AddMvc();\r\n}\r\n\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n{\r\n    ...\r\n    app.UseSignalR(routes =>\r\n    {\r\n        routes.MapHub<SignalRHub>(\"myhub\");\r\n    });\r\n\r\n    app.UseMvc();\r\n}\r\n```\r\n\r\nStrange thing, if i hit http://ip:port/myhub, i do have an answer (\"Connection ID required\"), but still /myhub/negotiate do not answer either.\r\n\r\nAny clue ?"},{"Id":"6597784816","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:53:58","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/556","RelatedDescription":"Closed issue \"Implement JS client for Node\" (#556) at aspnet/SignalR","RelatedBody":"  "},{"Id":"6597776810","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:51:16","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/502","RelatedDescription":"Closed issue \"Adding javascript client to bower\" (#502) at aspnet/SignalR","RelatedBody":"Hello, could you please make the javascript client available via bower?  Thank you."},{"Id":"6597613970","Type":"PullRequestEvent","CreatedAt":"2017-09-15T21:00:32","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/895","RelatedDescription":"Opened pull request \"Cleanup IObservable susbscriptions on connection disconnect\" (#895) at aspnet/SignalR","RelatedBody":"Part of https://github.com/aspnet/SignalR/issues/885"},{"Id":"6597610528","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:59:45","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/891","RelatedDescription":"Merged pull request \"Add Hub<T> Functional Tests\" (#891) at aspnet/SignalR","RelatedBody":"Adding strongly typed hub functional tests. "}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6597963345","Type":"IssuesEvent","CreatedAt":"2017-09-15T23:03:49","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6837","RelatedDescription":"Closed issue \"Port to 2.0.1: Injecting IViewLocalizer into Razor Page causing IndexOutOfRangeException.\" (#6837) at aspnet/Mvc","RelatedBody":"Original bug: https://github.com/aspnet/Mvc/issues/6694\r\n"},{"Id":"6597961075","Type":"PullRequestEvent","CreatedAt":"2017-09-15T23:02:43","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6838","RelatedDescription":"Merged pull request \"Port to 2.0.1: Injecting IViewLocalizer into Razor Page causing IndexOutOfRangeException\" (#6838) at aspnet/Mvc","RelatedBody":"Fixes #6837 \r\n\r\nPort of #6694"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6598396387","Type":"IssuesEvent","CreatedAt":"2017-09-16T04:29:45","Actor":"saf-itpro","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1433","RelatedDescription":"Opened issue \"_emailSender.SendEmailAsync is returning Invalid Token validation message\" (#1433) at aspnet/Identity","RelatedBody":"App: **ASP.NET MVC Core 1.1.1 with Individual User Accounts\r\nIdentity Core\r\nEntity Framework Core\r\nVisual Studio 2017 ver 15.3.3**\r\n\r\nWhen clicking on `Forgot Password` link, the following code successfully sends an email with a generated link. Clicking on the link inside the email body correctly displays the `Reset Password` form.  But after entering login name, new password etc and clicking on Reset button, the validation error` Invalid Token` shows up.\r\n\r\n**Body of my Email that App sent**:\r\n\r\n    Please reset your password by clicking here: <a href='http://localhost/HPF/Account/ResetPassword?userId=1db73091-8098-4427-9a1a-1897dcabea90&code=CfDJ8IgLyyEqB6dPkvwFmW%2BJlPrg%2Fpz%2FiNTD442K1KoBG7MSx3zp6TFSY5w0Xj49cG87P%2BkGSWalD6YbbRlrLP4qAEORuoaHZM%2BMe0G08Y9EeUycbhNxx%2FpEv2z3sJ%2BMr4ZccLBO08iwlbIxBnXkJ5gu%2Bsnoo5FHAKysp85%2FrLdbS47smj%2Bt9kaaFA5DDBkzmR%2Bb0HTV2FL8CyjH2M1wCjLgcSC2Jg6BIcDAVUd7jEwxB8V9upAVh%2FR3FJCk2OAJU4w4Fg%3D%3D'>link</a>\r\n\r\nThe only difference between following code and the default code that `VS2017 `generates in `AccountController `is that we're not using Email attribute as a user name, we have changed\r\n```\r\n[Required]\r\n[EmailAddress]\r\npublic string Email { get; set; }\r\n```\r\nto\r\n\r\n```\r\n[Required]\r\npublic string UserName { get; set; }\r\n```\r\netc. etc., and have extended the user properties as follows:\r\n\r\n**ApplicationUser.cs**:\r\n\r\n```\r\n// Add profile data for application users by adding properties to the ApplicationUser class\r\npublic class ApplicationUser : IdentityUser\r\n{\r\n    public string UserFullName { get; set; }\r\n    [Column(TypeName = \"varchar(50)\")]\r\n    public string UserEmaill { get; set; } \r\n    [Column(TypeName = \"varchar(15)\")]\r\n    public string UserCity{ get; set; }\r\n}\r\n```\r\n\r\n**Controller**:\r\n\r\n    [HttpPost]\r\n    [AllowAnonymous]\r\n    [ValidateAntiForgeryToken]\r\n    public async Task<IActionResult> ForgotPassword(ForgotPasswordViewModel model)\r\n    {\r\n        if (ModelState.IsValid)\r\n        {\r\n            var user = await _userManager.FindByNameAsync(model.UserName);\r\n            string sUserEmail = user.UserEmail; //I Added this. Note the email is not the user name in my app\r\n            if (user == null)\r\n            {\r\n                // Don't reveal that the user does not exist or is not confirmed\r\n                return View(\"ForgotPasswordConfirmation\");\r\n            }\r\n    \r\n            // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=532713\r\n            // Send an email with this link\r\n            var code = await _userManager.GeneratePasswordResetTokenAsync(user);\r\n            var callbackUrl = Url.Action(\"ResetPassword\", \"Account\", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);\r\n            await _emailSender.SendEmailAsync(sUserEmail, \"Reset Password\", $\"Please reset your password by clicking here: <a href='{callbackUrl}'>link</a>\");\r\n            return View(\"ForgotPasswordConfirmation\");\r\n        }\r\n    \r\n        // If we got this far, something failed, redisplay form\r\n        return View(model);\r\n    }\r\n    \r\n    [HttpPost]\r\n    [AllowAnonymous]\r\n    [ValidateAntiForgeryToken]\r\n    public async Task<IActionResult> ResetPassword(ResetPasswordViewModel model)\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return View(model);\r\n        }\r\n        var user = await _userManager.FindByNameAsync(model.UserName);\r\n        if (user == null)\r\n        {\r\n            // Don't reveal that the user does not exist\r\n            return RedirectToAction(nameof(AccountController.ResetPasswordConfirmation), \"Account\");\r\n        }\r\n        var result = await _userManager.ResetPasswordAsync(user, model.Code, model.Password);\r\n        if (result.Succeeded)\r\n        {\r\n            return RedirectToAction(nameof(AccountController.ResetPasswordConfirmation), \"Account\");\r\n        }\r\n        AddErrors(result);\r\n        return View();\r\n    }"},{"Id":"6598332199","Type":"PullRequestEvent","CreatedAt":"2017-09-16T03:27:59","Actor":"scottsauber","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1432","RelatedDescription":"Opened pull request \"XML doc comments changes\" (#1432) at aspnet/Identity","RelatedBody":"- Move defaults from remarks to summary for better intellisense.\r\n- Add summary to describe LockoutOptions AllowedForNewUsers.\r\n- Added defaults to xml docs where missing.\r\n\r\nFixes #1426 "},{"Id":"6597984906","Type":"PullRequestEvent","CreatedAt":"2017-09-15T23:13:57","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1431","RelatedDescription":"Opened pull request \"[2.0.1] Update version.props and add list of dependendencies that are also being updated\" (#1431) at aspnet/Identity","RelatedBody":"CI will fail until we actually have a candidate build of the EF dependencies.\r\n\r\n:watch: will wait until those are available to merge"},{"Id":"6596276005","Type":"IssuesEvent","CreatedAt":"2017-09-15T15:23:15","Actor":"chassq","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1430","RelatedDescription":"Opened issue \"No User available until cookie created?\" (#1430) at aspnet/Identity","RelatedBody":"\r\nWhen we run this call \r\n\r\n`var signInResult = await _signInManager.PasswordSignInAsync(login.LoginName, login.Password, login.RememberMe, true);`\r\n\r\nwe cannot seem to get to the HttpContext.User until after the Action Method completes and has returned. Is that correct?"},{"Id":"6594353516","Type":"IssuesEvent","CreatedAt":"2017-09-15T07:39:56","Actor":"NorDroN","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1429","RelatedDescription":"Opened issue \"How can I replace base64 in GenerateEmailConfirmationTokenAsync?\" (#1429) at aspnet/Identity","RelatedBody":"Hi!\r\nI'm developing a dotnet core template based on JavaScriptServices (angular 4) and OpenIddict - https://github.com/NorDroN/AngularTemplate \r\n\r\nI've tried to add an email confirmation, but it turned up not so simple:\r\nMicrosoft.AspNetCore.Identity use base64 when generates token (GenerateEmailConfirmationTokenAsync), but base64 can contain slash (/) and also base64 is case sensitive\r\nI've tried to solve this problems:\r\n1) I've tried to add Encode in my code for token ( / -> %2F), but angular can understand this ( %2F -> / ) and parse it as part of url :(\r\n2) angular also replaces my url with base64 code to url in lowercase (I don't know why, but it's so) and of course when I try to check it I get an error\r\n\r\nHow can I replace base64 to base32 or may be something else?"},{"Id":"6592452568","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:56:25","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1384","RelatedDescription":"Closed issue \"How to modify login url when using asp.net identity\" (#1384) at aspnet/Identity","RelatedBody":"Can we modify the default `/account/login` url to some custom url while redirecting the user to login page in case of unauthorized access ?\r\n\r\nLet's say client name need to be appended to url which will look like `/ClientABC/account/login` which will redirect to login page and after login will redirect to respective url which is present in return url parameter.\r\n\r\nI am trying this in below way. Setting the login Url, here I want to append the client name\r\n\r\n```\r\nservices.Configure<IdentityOptions>(opt =>\r\n            {\r\n                opt.Cookies.ApplicationCookie.LoginPath = new PathString(\"/account/login\");\r\n            });\r\n```\r\nand then making sure all urls requires authentication\r\n\r\n```\r\n  services.AddMvc(o =>\r\n                {\r\n                   o.Filters.Add(new AuthorizeFilter(new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build()));\r\n\r\n                })\r\n```\r\n\r\nI am trying this from many days, not able to figure out the solution !\r\n\r\nThanks !\r\nRohit"},{"Id":"6592443513","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:54:13","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1360","RelatedDescription":"Closed issue \"Multiple Identities with different token providers\" (#1360) at aspnet/Identity","RelatedBody":"_From @Elfocrash on August 15, 2017 10:15_\n\n## Intro\r\n\r\nOn my application I need to have two different Identities with different options for each Identity.\r\nWhat I initially did is to simply add the identities with `services.AddIdentity<AdminUser, IdentityRole>`, `services.AddIdentity<User, IdentityRole>`\r\nand do a `.AddDefaultTokenProviders()` at the end of the call, as the project does anyway.\r\n\r\n## The problem\r\nThe problem is that when i have two identities and i call `.AddDefaultTokenProviders()` only the second call's tokens stay in the dictionary. That is because the system is checking if token providers with those names exist and if they do it replaces them with the latter.\r\nThe problem is that the IdentityOptions is a Singeton.\r\nThe error i was getting was `\"No IUserTokenProvider named 'PasswordResetTokenProvider' is registered.\"`\r\n\r\nMy next idea after diving into the code was to remove the `.AddDefaultTokenProviders()` and manually add 3 calls for my providers ex. `.AddTokenProvider(\"UserDefault\",                    typeof(DataProtectorTokenProvider<>).MakeGenericType(typeof(User)))` (and the respective ones for email and phone).\r\n\r\nThen i manually set the token provider to be used in the User managers created for each identity like this: `optionsAccessor.Value.Tokens.PasswordResetTokenProvider = \"UserDefault\";`\r\n\r\nHowever every time i needed to call a user manager the code was stepping in both managers (or there are cases where i need both). Because the `optionsAccessor.Value.Tokens.PasswordResetTokenProvider`, `optionsAccessor.Value.Tokens.ChangeEmailTokenProvider` and `optionsAccessor.Value.Tokens.EmailConfirmationTokenProvider` are system wide value, only the one set last will be used.\r\nThis makes the system unable to user the correct token.\r\n\r\n## The workaround\r\nThe way I worked around it is by adding the `IHttpContextAccessor` in my usermanager and checking Route values to see if the request is coming by a specific area, controller and action.\r\n\r\nObviously this is very hacky and I am not happy with it.\r\nI know that the correct way would be to use claims and roles to give different permissions to separate admin users and normal users, but the app I'm buying had this separation as a requirement on a higher level (Potentially the need to store them in a centralized database away from the other records, different cookie persistence values etc).\r\n\r\n## Suggestion\r\nTo me it looks like the problem is that we use a Dictionary that limits the keys to one value.\r\nThe second `.AddDefaultTokenProviders()` call should probably throw an exception saying that i have something with that name already registered.\r\nAnother thing would be that instead of using a Dictionary, we use a data structure that allows key-value combination checks. That way we can have \"Default\"-\"AUserManager\" and \"Default\" - \"BUserManager\" but the code retrieves the one appropriate for this specific usermanager requesting it.\r\n\r\nWhat are your thoughts on this?\r\nWas Identity never build around the idea of having multiple ones?\r\n\n\n_Copied from original issue: aspnet/Mvc#6656_"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6594034457","Type":"IssuesEvent","CreatedAt":"2017-09-15T05:48:09","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2063","RelatedDescription":"Closed issue \"RFC 8187 - Character Encoding for Headers\" (#2063) at aspnet/KestrelHttpServer","RelatedBody":"Hot off the presses (September 2017) https://tools.ietf.org/html/rfc8187\r\n\r\nIndicating Character Encoding and Language for HTTP Header Field Parameters\r\n\r\n/cc @Tratcher @blowdart @halter73 "},{"Id":"6593931093","Type":"IssuesEvent","CreatedAt":"2017-09-15T04:57:23","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2063","RelatedDescription":"Opened issue \"RFC 8187 - Character Encoding for Headers\" (#2063) at aspnet/KestrelHttpServer","RelatedBody":"Hot off the presses (September 2017) https://tools.ietf.org/html/rfc8187\r\n\r\nIndicating Character Encoding and Language for HTTP Header Field Parameters"},{"Id":"6593365800","Type":"IssuesEvent","CreatedAt":"2017-09-15T00:36:09","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2017","RelatedDescription":"Closed issue \"Merge code paths duplicated between HTTP/1.1 and HTTP/2\" (#2017) at aspnet/KestrelHttpServer","RelatedBody":"The initial HTTP/2 implementation contains a lot of duplicated code from the existing HTTP/1.1 stuff. That duplication should be eliminated so we can share as much code as possible between the two protocol implementations."},{"Id":"6593365410","Type":"PullRequestEvent","CreatedAt":"2017-09-15T00:35:58","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2041","RelatedDescription":"Merged pull request \"Merge code paths duplicated between HTTP/1.x and HTTP/2 implementations (#2017)\" (#2041) at aspnet/KestrelHttpServer","RelatedBody":"#2017\r\n\r\n## A note on naming\r\n\r\nI'm intentionally not renaming things now, so they look a bit off. I'm planning on doing some renames after addressing feedback (see below).\r\n\r\n## Summary\r\n\r\nThis change makes `Frame` the base class for the HTTP/1.1 and HTTP/2 implementations.\r\n\r\nThe HTTP/1.x-specific code in `Frame` is in a subclass called `Http1Frame` (so now `Frame<T>` subclasses `Http1Frame`).\r\n\r\n`Http2Stream` is a subclass of `Frame`.\r\n\r\n`Frame` exposes a few more abstract properties and methods that must be implemented by protocol-specific classes.\r\n\r\nProducing HTTP/1.1 and HTTP/2 output is done via the same interface (`IHttpOutputProducer`), which `OutputProducer` and `Http2OutputProducer` implement.\r\n\r\n## Things I'm not crazy about\r\n\r\n1) Multiple `.FeatureCollection.cs` files. I think the ideal would be to have a single one (`Frame.FeatureCollection.cs`). It would implement HTTP/1.1 and HTTP/2-specific features (upgrade and stream ID, respectively), but those could be nulled out in `OnReset()` where they're not supposed to be implemented. What do you guys think?\r\n\r\n1) The way `Frame.Output` is instantiated by each subclass. It's all internal but ugly still. What do you guys think of moving it to `IHttpProtocolContext` i.e. have it passed to `Frame` instead of instantiated by it?\r\n\r\n1) Protected member variables. They were already there, but now they're uglier IMO because some are not accessed by a direct subclass of `Frame` (e.g. `Frame<T>` accesses `Frame._applicationException`).\r\n\r\n## Planned renames\r\n\r\n* `Frame` -> `HttpProtocol` (I wanted to name it `HttpStream` but @davidfowl didn't like that)\r\n* `FrameAdapter` -> `Http1FrameAdapter`\r\n* `IFrameControl` -> `IHttpResponseControl`\r\n* `FrameRequestStream` -> `HttpRequestStream`\r\n* `FrameResponseStream` -> `HttpResponseStream`\r\n* `FrameRequestHeaders` -> `HttpRequestHeaders`\r\n* `FrameResponseHeaders` -> `HttpResponseHeaders`\r\n* `FrameConnection` -> `HttpConnection`\r\n* `OutputProducer` -> `Http1OutputProducer`\r\n\r\nI believe these would be better done as part of the Bedrock refactoring:\r\n\r\n* `FrameConnectionManager` -> `ConnectionManager` or `HttpConnectionManager` (if HTTP-specific)\r\n* `FrameHeartbeatManager` -> `HeartbeatManager` or `HttpHeartbeatManager` (if HTTP-specific)"},{"Id":"6593273796","Type":"PullRequestEvent","CreatedAt":"2017-09-14T23:55:45","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2062","RelatedDescription":"Merged pull request \"Add tracing to KeepAliveTimeoutTests.ConnectionKeptAliveBetweenRequests to investigate test failures\" (#2062) at aspnet/KestrelHttpServer","RelatedBody":"See #1684."},{"Id":"6592896395","Type":"PullRequestEvent","CreatedAt":"2017-09-14T21:44:09","Actor":"cesarbs","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2062","RelatedDescription":"Opened pull request \"Add tracing to KeepAliveTimeoutTests.ConnectionKeptAliveBetweenRequests to investigate test failures\" (#2062) at aspnet/KestrelHttpServer","RelatedBody":"See #1684."},{"Id":"6591097710","Type":"IssuesEvent","CreatedAt":"2017-09-14T14:58:40","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2061","RelatedDescription":"Closed issue \"404 for static files with names starting with dots\" (#2061) at aspnet/KestrelHttpServer","RelatedBody":"Kestrel return 404 for static files which names starting with dot (\".\").\r\nLike `http://localhost:5000/client/lib/interop/.interop.types.js`\r\nRequest for such files don't reach asp.net. I checked it via `OnPrepareResponse` handler for StaticFileMiddleware's options:\r\n```\r\n\tapp.UseStaticFiles(new StaticFileOptions\r\n\t{\r\n\t\tOnPrepareResponse = ctx =>\r\n\t\t{\r\n\t\t\tvar f = ctx.File;\r\n\t\t\tif (f.Name.StartsWith(\".\"))\r\n\t\t\t{\r\n\t\t\t\tDebugger.Break(); // we won't get here\r\n\t\t\t}\r\n\t\t},\r\n\t\tServeUnknownFileTypes = true\r\n\t});\r\n```\r\n\r\nIs there any workaround for the issue?"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6597857930","Type":"IssuesEvent","CreatedAt":"2017-09-15T22:20:39","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1618","RelatedDescription":"Closed issue \"Port to 2.0.1: TagHelper error: A local or parameter named '__model' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\" (#1618) at aspnet/Razor","RelatedBody":"Port this fix to 2.0.1: https://github.com/aspnet/Razor/issues/1614"},{"Id":"6597853248","Type":"PullRequestEvent","CreatedAt":"2017-09-15T22:18:52","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1687","RelatedDescription":"Merged pull request \"Port to 2.0.1: Fix ModelExpression's in section directive blocks.\" (#1687) at aspnet/Razor","RelatedBody":"Fixes #1618 \r\n\r\nPort of #1614 \r\n\r\nFrom @NTaylorMullen,\r\n- Changed `SectionDirectivePass` to move non-token body nodes from the original `DirectiveIntermediateNode` to the `SectionIntermediateNode`. By doing this there's no longer dual references of `SectionIntermediateNode` bodies.\r\n- Added MVC tests ~~for current and 1_X extensions~~."},{"Id":"6597671739","Type":"PullRequestEvent","CreatedAt":"2017-09-15T21:17:24","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1687","RelatedDescription":"Opened pull request \"Port to 2.0.1: Fix ModelExpression's in section directive blocks.\" (#1687) at aspnet/Razor","RelatedBody":"Fixes #1618 \r\n\r\nPort of #1614 \r\n\r\nFrom @NTaylorMullen,\r\n- Changed `SectionDirectivePass` to move non-token body nodes from the original `DirectiveIntermediateNode` to the `SectionIntermediateNode`. By doing this there's no longer dual references of `SectionIntermediateNode` bodies.\r\n- Added MVC tests for current and 1_X extensions."},{"Id":"6597496287","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:28:28","Actor":"fmdufour","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1686","RelatedDescription":"Opened issue \"Error: Invalid name for a preprocessing symbol; '' is not a valid identifier\" (#1686) at aspnet/Razor","RelatedBody":"I have recently migrated from ASP.NET Core 1.1.X to ASP.NET Core 2,  when I run my app locally everything works just fine, but when running on Azure App Service I receive the following error on Razor Compilation:\r\n\r\n**An error occurred during the compilation of a resource required to process this request. Please review the following specific error details and modify your source code appropriately.**\r\n\r\nInvalid name for a preprocessing symbol; '' is not a valid identifier\r\n\r\nI tried to find a solution but couldn't find any,\r\nCan anyone help?\r\n\r\nThank you"},{"Id":"6597056341","Type":"IssuesEvent","CreatedAt":"2017-09-15T18:32:35","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1684","RelatedDescription":"Closed issue \"CompletionProvider causes VS crash in interactive window scenarios\" (#1684) at aspnet/Razor","RelatedBody":"See: https://github.com/dotnet/roslyn/issues/22128\r\n\r\nWe're missing a null check. The `context.Document.FilePath` will be null in some cases like interactive windows. We need to null-check everything we need to gracefully no-op."},{"Id":"6597056328","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:32:35","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1685","RelatedDescription":"Merged pull request \"Fix #1684 - CompletionProvider null ref\" (#1685) at aspnet/Razor","RelatedBody":"The CompletionProvider will be called in cases where the document\r\ndoesn't have a FilePath - such as the C# interactive window. This is\r\ncausing a null ref."},{"Id":"6597036369","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:27:40","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1685","RelatedDescription":"Opened pull request \"Fix #1684 - CompletionProvider null ref\" (#1685) at aspnet/Razor","RelatedBody":"The CompletionProvider will be called in cases where the document\r\ndoesn't have a FilePath - such as the C# interactive window. This is\r\ncausing a null ref."},{"Id":"6597015744","Type":"IssuesEvent","CreatedAt":"2017-09-15T18:22:41","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1684","RelatedDescription":"Opened issue \"CompletionProvider causes VS crash in interactive window scenarios\" (#1684) at aspnet/Razor","RelatedBody":"See: https://github.com/dotnet/roslyn/issues/22128\r\n\r\nWe're missing a null check. The `context.Document.FilePath` will be null in some cases like interactive windows. We need to null-check everything we need to gracefully no-op."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":25,"RawContent":null},{"Id":"897126323298209792","CreatedAt":"2017-08-14T16:02:37+00:00","UserScreenname":"aspnet","Text":"Announcing ASPNet Core 2.0 - https://t.co/5RTzwS9Ym2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":196,"FavoriteCount":158,"RawContent":null},{"Id":"877222209667960834","CreatedAt":"2017-06-20T17:50:47+00:00","UserScreenname":"aspnet","Text":"Check out the latest Code Conversation episode where @LadyNaggaga chats with @BaggaJaspreet about ASPNet Core TagHe… https://t.co/xeyH9UaAso","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2017-09-16T05:30:07.6493407Z","RunDurationInMilliseconds":6172}