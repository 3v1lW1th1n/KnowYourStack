{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7348016526","Type":"IssuesEvent","CreatedAt":"2018-03-08T03:51:02","Actor":"huytnd","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2933","RelatedDescription":"Opened issue \"RequireHttpsMetadata set to false failed\" (#2933) at aspnet/Home","RelatedBody":"I'm building a asp.net core 2.0 solution with some projects. On my dev machine, I use OpenIdConnect and set RequireHttpsMetadata to false for testing, i get the exception as described below. If I set it to true, there is no problem.\r\n```\r\nSystem.InvalidOperationException: The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false.\r\n   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerPostConfigureOptions.PostConfigure(String name, JwtBearerOptions options)\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.OptionsMonitor`1.<>c__DisplayClass10_0.<Get>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(String name, Func`1 createOptions)\r\n   at Microsoft.Extensions.Options.OptionsMonitor`1.Get(String name)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.<InitializeAsync>d__42.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.<GetHandlerAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.<AuthenticateAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at IdentityServer4.AccessTokenValidation.IdentityServerAuthenticationHandler.<HandleAuthenticateAsync>d__2.MoveNext() in C:\\local\\identity\\server4\\AccessTokenValidation\\src\\IdentityServer4.AccessTokenValidation\\IdentityServerAuthenticationHandler.cs:line 61\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.<AuthenticateAsync>d__47.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.<AuthenticateAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIIndexMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.<Invoke>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.<Invoke>d__11.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\nApplication Insights Telemetry (unconfigured): {\"name\":\"Microsoft.ApplicationInsights.Dev.Exception\",\"time\":\"2018-03-08T03:41:17.7238969Z\",\"tags\":{\"ai.application.ver\":\"1.0.0.0\",\"ai.cloud.roleInstance\":\"HUYTRAN-PC\",\"ai.operation.id\":\"868b0d85-46e57ed115249134\",\"ai.operation.parentId\":\"|868b0d85-46e57ed115249134.1.129137ed_\",\"ai.operation.name\":\"GET /api/tickets\",\"ai.location.ip\":\"::1\",\"ai.internal.sdkVersion\":\"aspnet5c:2.2.1\",\"ai.internal.nodeName\":\"HUYTRAN-PC\"},\"data\":{\"baseType\":\"ExceptionData\",\"baseData\":{\"ver\":2,\"properties\":{\"{OriginalFormat}\":\"Connection id \\\"{ConnectionId}\\\", Request id \\\"{TraceIdentifier}\\\": An unhandled exception was thrown by the application.\",\"DeveloperMode\":\"true\",\"CategoryName\":\"Microsoft.AspNetCore.Server.Kestrel\",\"AspNetCoreEnvironment\":\"Development\",\"TraceIdentifier\":\"0HLC4KPJB1MJM:00000003\",\"ConnectionId\":\"0HLC4KPJB1MJM\",\"Exception\":\"System.InvalidOperationException: The MetadataAddress or Authority must use HTTPS unless disabled for development by setting RequireHttpsMetadata=false.\\r\\n   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerPostConfigureOptions.PostConfigure(String name, JwtBearerOptions options)\\r\\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\\r\\n   at Microsoft.Extensions.Options.OptionsMonitor`1.<>c__DisplayClass10_0.<Get>b__0()\\r\\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\\r\\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\\r\\n   at System.Lazy`1.CreateValue()\\r\\n   at Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(String name, Func`1 createOptions)\\r\\n   at Microsoft.Extensions.Options.OptionsMonitor`1.Get(String name)\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.<InitializeAsync>d__42.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.<GetHandlerAsync>d__5.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.<AuthenticateAsync>d__10.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at IdentityServer4.AccessTokenValidation.IdentityServerAuthenticationHandler.<HandleAuthenticateAsync>d__2.MoveNext() in C:\\\\local\\\\identity\\\\server4\\\\AccessTokenValidation\\\\src\\\\IdentityServer4.AccessTokenValidation\\\\IdentityServerAuthenticationHandler.cs:line 61\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.<AuthenticateAsync>d__47.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.<AuthenticateAsync>d__10.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIIndexMiddleware.<Invoke>d__3.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.<Invoke>d__6.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.<Invoke>d__3.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.<Invoke>d__11.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\"},\"exceptions\":[{\"id\":21889970,\"typeName\":\"System.InvalidOperationException\",\"message\":\"Connection id \\\"0HLC4KPJB1MJM\\\", Request id \\\"0HLC4KPJB1MJM:00000003\\\": An unhandled exception was thrown by the application.\",\"hasFullStack\":true,\"parsedStack\":[{\"level\":0,\"method\":\"Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerPostConfigureOptions.PostConfigure\",\"assembly\":\"Microsoft.AspNetCore.Authentication.JwtBearer, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":1,\"method\":\"Microsoft.Extensions.Options.OptionsFactory`1.Create\",\"assembly\":\"Microsoft.Extensions.Options, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":2,\"method\":\"Microsoft.Extensions.Options.OptionsMonitor`1+<>c__DisplayClass10_0.<Get>b__0\",\"assembly\":\"Microsoft.Extensions.Options, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":3,\"method\":\"System.Lazy`1.ViaFactory\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":4,\"method\":\"System.Lazy`1.ExecutionAndPublication\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":5,\"method\":\"System.Lazy`1.CreateValue\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":6,\"method\":\"Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd\",\"assembly\":\"Microsoft.Extensions.Options, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":7,\"method\":\"Microsoft.Extensions.Options.OptionsMonitor`1.Get\",\"assembly\":\"Microsoft.Extensions.Options, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":8,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationHandler`1+<InitializeAsync>d__42.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":9,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":10,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":11,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider+<GetHandlerAsync>d__5.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":12,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":13,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":14,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter`1.GetResult\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":15,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationService+<AuthenticateAsync>d__10.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":16,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":17,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":18,\"method\":\"IdentityServer4.AccessTokenValidation.IdentityServerAuthenticationHandler+<HandleAuthenticateAsync>d__2.MoveNext\",\"assembly\":\"IdentityServer4.AccessTokenValidation, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null\",\"fileName\":\"C:\\\\local\\\\identity\\\\server4\\\\AccessTokenValidation\\\\src\\\\IdentityServer4.AccessTokenValidation\\\\IdentityServerAuthenticationHandler.cs\",\"line\":61},{\"level\":19,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":20,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":21,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter`1.GetResult\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":22,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationHandler`1+<AuthenticateAsync>d__47.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":23,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":24,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":25,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter`1.GetResult\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":26,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationService+<AuthenticateAsync>d__10.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":27,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":28,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":29,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter`1.GetResult\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":30,\"method\":\"Microsoft.AspNetCore.Authentication.AuthenticationMiddleware+<Invoke>d__6.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Authentication, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":31,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":32,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":33,\"method\":\"Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIIndexMiddleware+<Invoke>d__3.MoveNext\",\"assembly\":\"Swashbuckle.AspNetCore.SwaggerUI, Version=2.2.0.0, Culture=neutral, PublicKeyToken=4232c99127b3c254\"},{\"level\":34,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":35,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":36,\"method\":\"Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware+<Invoke>d__6.MoveNext\",\"assembly\":\"Swashbuckle.AspNetCore.Swagger, Version=2.2.0.0, Culture=neutral, PublicKeyToken=62657d7474907593\"},{\"level\":37,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":38,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":39,\"method\":\"Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware+<Invoke>d__3.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Diagnostics, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":40,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":41,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":42,\"method\":\"Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware+<Invoke>d__11.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Server.IISIntegration, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":43,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":44,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":45,\"method\":\"Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware+<Invoke>d__3.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Hosting, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"},{\"level\":46,\"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":47,\"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"},{\"level\":48,\"method\":\"Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1+<ProcessRequestsAsync>d__2.MoveNext\",\"assembly\":\"Microsoft.AspNetCore.Server.Kestrel.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"}]}],\"severityLevel\":\"Error\"}}}\r\nMicrosoft.AspNetCore.Server.Kestrel:Error: Connection id \"0HLC4KPJB1MJM\", Request id \"0HLC4KPJB1MJM:00000003\": An unhandled exception was thrown by the application.\r\n```\r\nAny suggestion for this problem? Thank you.\r\n"},{"Id":"7343579979","Type":"IssuesEvent","CreatedAt":"2018-03-07T11:53:17","Actor":"SebastianStehle","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2932","RelatedDescription":"Opened issue \"Service Container disposes twice\" (#2932) at aspnet/Home","RelatedBody":"Lets say `MyService` which implements `IService` and `IDisposable` and is registered in the following way:\r\n\r\n    services.AddSingleton<IService, MyService>()\r\n    services.AddSingleton<IInitializable>(c => c.GetRequiredService<IService>());\r\n\r\nBecause you have an initialization system and another class that uses IService.\r\n\r\nThen Dispose might be called twice. I think it would be good to just replace this list:\r\n\r\nhttps://github.com/aspnet/DependencyInjection/blob/dev/src/DI/ServiceLookup/ServiceProviderEngineScope.cs#L14 \r\n\r\nWith a hashset.\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7348201581","Type":"PullRequestEvent","CreatedAt":"2018-03-08T05:03:07","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1557","RelatedDescription":"Opened pull request \"Add additional properties to HttpOptions\" (#1557) at aspnet/SignalR","RelatedBody":""},{"Id":"7348171974","Type":"PullRequestEvent","CreatedAt":"2018-03-08T04:50:31","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1491","RelatedDescription":"Closed pull request \"Don't log message data\" (#1491) at aspnet/SignalR","RelatedBody":"Issue: https://github.com/aspnet/SignalR/issues/1449\r\nWe don't want to log message content on the client. "},{"Id":"7347277310","Type":"PullRequestEvent","CreatedAt":"2018-03-07T23:56:40","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1556","RelatedDescription":"Merged pull request \"Exclude utility project from test discovery\" (#1556) at aspnet/SignalR","RelatedBody":"This is the same thing we do [here](https://github.com/aspnet/Mvc/blob/dev/build/repo.props#L9) to prevent this message:\r\n`No test is available in C:\\b\\w\\ea5b9663d62c5e38\\test\\Microsoft.AspNetCore.SignalR.Tests.Utils\\bin\\Release\\netcoreapp2.1\\Microsoft.AspNetCore.SignalR.Tests.Utils.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.`"},{"Id":"7347087155","Type":"PullRequestEvent","CreatedAt":"2018-03-07T23:04:19","Actor":"ryanbrandenburg","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1556","RelatedDescription":"Opened pull request \"Exclude utility project from test discovery\" (#1556) at aspnet/SignalR","RelatedBody":"This is the same thing we do [here](https://github.com/aspnet/Mvc/blob/dev/build/repo.props#L9) to prevent this message:\r\n`No test is available in C:\\b\\w\\ea5b9663d62c5e38\\test\\Microsoft.AspNetCore.SignalR.Tests.Utils\\bin\\Release\\netcoreapp2.1\\Microsoft.AspNetCore.SignalR.Tests.Utils.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.`"},{"Id":"7346638588","Type":"IssuesEvent","CreatedAt":"2018-03-07T21:25:27","Actor":"caseylobrien","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1553","RelatedDescription":"Closed issue \"SignalR map route in middleware for a Net 4.61 console app when service is started in Net  4.61 class lib\" (#1553) at aspnet/SignalR","RelatedBody":"Context: We are using Net standard 2.0 to implement Miscrosoft.AspNetCore.SignalR (currently we are on version 1.0.0-alpha2-final). This library is used inside a Net Framework 4.61 console application typically (no issues here). For our integration tests we have a Net Core 2.0 console app that uses WebHostBuilder to spin up an instance of the service, this also works fine. \r\n\r\nWe just started using Specflow, which currently does not support Net Core 2.0, so its a Net Framework 4.61 Class Library. We are also Using a WebHostBuilder (nearly identical to the Integrations Net Core 2.0 app's) to spin up an instance of the same Net Framework 4.61 service, but here we have an issue.\r\n\r\nIn the middleware we are using SignalRAppBuilderExtensions.UseSignalR to map the route like:\r\n```\r\napp.UseSignalR(routes =>\r\n            {\r\n                routes.MapHub<EventHub>(\"eventhub\");\r\n            });\r\n```\r\nThis works great when running the 4.61 as a service, or even when starting the service from the Net Core 2.0 Integration Test console app. However when starting the Net Framework 4.61 service from a NetFramework 4.61 class library (for the Specflow tests) we receive the following error message:\r\n>Message:\r\n>The path in 'value' must start with '/'.\r\n>Parameter name: value\r\n\r\n>Source:\r\n>\"Microsoft.AspNetCore.Http.Abstractions\"\r\n\r\n>StackTrace:\r\n>   at Microsoft.AspNetCore.Http.PathString..ctor(String value)\r\n>   at Microsoft.AspNetCore.SignalR.HubRouteBuilder.MapHub[THub](String path)\r\n\r\nI looked at the source code for the MapRouteBuilder.MapHub and saw that it is overloaded and can also take a PathString, so I tried that as well ( using new PathString(\"/eventhub\") ), but still received the same error. \r\n\r\nCurrently our work around is:\r\n```\r\n            app.UseSignalR(routes =>\r\n            {\r\n                try\r\n                {\r\n                    // for net core 2.0 / net standard 2.0\r\n                    routes.MapHub<EventHub>(\"eventhub\");\r\n                }\r\n                catch (ArgumentException)\r\n                {\r\n                    // for net 461\r\n                    routes.MapHub<EventHub>(\"/eventhub\");\r\n                }\r\n            });\r\n```\r\nThis works in all three previously mentioned situations, but is obviously a tad ugly ;)"},{"Id":"7346637380","Type":"PullRequestEvent","CreatedAt":"2018-03-07T21:25:13","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1551","RelatedDescription":"Merged pull request \"Client sends user agent with version based on assembly version\" (#1551) at aspnet/SignalR","RelatedBody":"Fixes https://github.com/aspnet/SignalR/issues/763"},{"Id":"7346637366","Type":"IssuesEvent","CreatedAt":"2018-03-07T21:25:13","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/763","RelatedDescription":"Closed issue \"Version in the user-agent header should be generated automatically\" (#763) at aspnet/SignalR","RelatedBody":"We should use https://github.com/aspnet/SignalR/blob/7b0be52c545bc20f7402ed1b58c5ff8f99c2030f/version.xml#L6 to generate the User-Agent header. Currently the version is hardcoded - it is fragile and will very likely be missed when we move to a newer version/version suffix.\r\n\r\n(We already use this to generate version for the npm module for the client: https://github.com/aspnet/SignalR/blob/cdbb13de66b068015d068e5fab67e4e6ab42d3da/client-ts/Microsoft.AspNetCore.SignalR.Client.TS/Microsoft.AspNetCore.SignalR.Client.TS.csproj#L42)"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7348245240","Type":"IssuesEvent","CreatedAt":"2018-03-08T05:21:04","Actor":"HolyOne","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7454","RelatedDescription":"Opened issue \"@inherits in _ViewImports.cshtml dont work on asp.net core 2\" (#7454) at aspnet/Mvc","RelatedBody":"I am trying to make a base page class in Razor Pages, this is my basepage\r\n\r\n```\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace BaseWeb.Web\r\n{\r\n    public abstract class BasePage:Page \r\n    {\r\n        public string Test(string str) {\r\n\r\n            return str;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nthen in Index.cshtml,  I inherit my page from this class this is how I do it\r\n`@inherits BaseWeb.Web.BasePage`\r\n\r\nBut I can't inherit all my pages from my BasePage class by putting this line in _ViewImports.cshtml\r\n\r\nIf I put the same line in ViewImports,, I get this kind of error\r\n\r\nAn error occurred during the compilation of a resource required to process this request. Please review the following specific error details and modify your source code appropriately"},{"Id":"7346698669","Type":"IssuesEvent","CreatedAt":"2018-03-07T21:37:54","Actor":"Legends","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7453","RelatedDescription":"Closed issue \"Question: Any samples for localization for Core 2.x?\" (#7453) at aspnet/Mvc","RelatedBody":"Any samples for localization?\r\n\r\nI have downloaded localization [sample](https://github.com/aspnet/Entropy/tree/dev/samples/Localization.StarterWeb) but it was core 1.x.\r\nI moved a resx file to another location, started the app, localization didn't work anymore.\r\nOk, moved it back to the folder where it was before.... no way, localization was broken.\r\nI experience this a lot with 1.x core apps, but core 2.x seems to much more stable...\r\n\r\nAre there any 2.x samples for localization?"},{"Id":"7346561366","Type":"PullRequestEvent","CreatedAt":"2018-03-07T21:09:15","Actor":"ryanbrandenburg","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7446","RelatedDescription":"Merged pull request \"Remove IErrorDescriptionFactory\" (#7446) at aspnet/Mvc","RelatedBody":"Fixes #7414. This PR does change the shape of what we return in this case to (from what my code archaeology says) what it had been before the addition of these classes. If we want to keep the current JSON shape I'll make the class internal instead."},{"Id":"7346506064","Type":"IssuesEvent","CreatedAt":"2018-03-07T20:57:42","Actor":"Legends","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7453","RelatedDescription":"Opened issue \"Question: Any samples for localization?\" (#7453) at aspnet/Mvc","RelatedBody":"Any samples for localization?\r\n\r\nI have downloaded localization sample but it was core 1.x.\r\nI moved a resx file to another location, started the app, localization didn't work anymore.\r\nOk, moved it back to the folder where it was before.... no way, localization was broken.\r\nI experience this a lot with 1.x core apps, but core 2.x seems to much more stable...\r\n\r\nAre there any 2.x samples for localization?"},{"Id":"7345822303","Type":"PullRequestEvent","CreatedAt":"2018-03-07T18:39:22","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7447","RelatedDescription":"Merged pull request \"Add wireframe for ConfigureApplicationPart\" (#7447) at aspnet/Mvc","RelatedBody":""},{"Id":"7345629275","Type":"IssuesEvent","CreatedAt":"2018-03-07T18:01:00","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7452","RelatedDescription":"Opened issue \"DefaultApiDescriptionProvider does not support Task-like types\" (#7452) at aspnet/Mvc","RelatedBody":"If an action returns `Task<Product>`, ApiExplorer will unwrap the `Task` and report the response type as `Product`. We need to apply the same treatment to Task-like types e.g. `ValueTask<Product>`, which is supported by action invocation."},{"Id":"7345599718","Type":"IssuesEvent","CreatedAt":"2018-03-07T17:55:20","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7451","RelatedDescription":"Opened issue \"Deriving from ActionResult<T> does not produce correct ApiDescription.ResponseType\" (#7451) at aspnet/Mvc","RelatedBody":"\r\nFrom https://github.com/aspnet/Mvc/issues/7036#issuecomment-371065915\r\n\r\n\r\n@rynowak As far as I could see, while `ActionResult<T>` is nicely 'unwrapped' (i.e. Swagger picks `T` as the result model), inheriting from `ActionResult<T>` does not yield the same result.\r\nConsider a class that wraps a 'standardized' result object, used to shape the response of the API (`Result<T>`), and an `ActionResult<T>`-derived class used to simplify the generic definition (`ApiResult<T>`):\r\n\r\n``` C#\r\n    public class Result<T>\r\n    {\r\n        public string Message { get; set; }\r\n        public T Value { get; set; }\r\n    }\r\n\r\n   public class ApiResult<TValue> : ActionResult<Result<TValue>>\r\n   {\r\n        public static implicit operator ApiResult<TValue>(TValue value)\r\n        {\r\n            return new ApiResult<TValue>(value);\r\n        }\r\n\r\n        public static implicit operator ApiResult<TValue>(Result<TValue> value)\r\n        {\r\n            return new ApiResult<TValue>(value);\r\n        }\r\n\r\n        public static implicit operator ApiResult<TValue>(ActionResult result)\r\n        {\r\n            return new ApiResult<TValue>(result);\r\n        }\r\n        \r\n        public ApiResult(TValue value)\r\n                : base(new Result<TValue>\r\n                       {\r\n                               Value = value\r\n                       })\r\n        {\r\n        }\r\n\r\n        public ApiResult(Result<TValue> value)\r\n                : base(value)\r\n        {\r\n        }\r\n\r\n        public ApiResult(ActionResult result)\r\n                : base(result)\r\n        {\r\n        }\r\n    }\r\n``` \r\nIn such a case while an action defined as\r\n``` C#\r\n        [HttpGet(\"Strings\")]\r\n        public async Task<ActionResult<Result<IEnumerable<string>>>> GetStringsAsync()\r\n        {\r\n            await Task.CompletedTask;\r\n            return new Result<IEnumerable<string>>\r\n                   {\r\n                           Value = new[]\r\n                                   {\r\n                                           \"a\", \"b\"\r\n                                   }\r\n                   };\r\n        }\r\n``` \r\nyields the following swagger\r\n![good](https://user-images.githubusercontent.com/127625/37081436-baf90f7e-21e9-11e8-95c3-405b9f0c778e.PNG)\r\n\r\nan action defined using the `ActionResult<T>`-derived class does not unwrap (notice the `result` property and the actual `Result<T>` wrapped in a `value` property, both inherited from `ActionResult<T>`):\r\n``` C#\r\n        [HttpGet(\"Strings2\")]\r\n        public async Task<ApiResult<IEnumerable<string>>> GetStrings2Async()\r\n        {\r\n            await Task.CompletedTask;\r\n            return new Result<IEnumerable<string>>\r\n                   {\r\n                           Value = new[]\r\n                                   {\r\n                                           \"a\", \"b\"\r\n                                   }\r\n                   };\r\n        }\r\n``` \r\n![bad](https://user-images.githubusercontent.com/127625/37081791-d6385a3c-21ea-11e8-98fb-d6ec74a9a63c.PNG)\r\n\r\n Is this an unsupported scenario? Is it possible to create a custom class that acts like `ActionResult<T>` or extend the `ActionResult<T>` to other classes?\r\n\r\n**Edit:** I just noticed that the result of the derived class is actually unwrapped, so it seems the issue is just with the way the action is interpreted by swagger, maybe..."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7345611512","Type":"PullRequestEvent","CreatedAt":"2018-03-07T17:57:40","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1664","RelatedDescription":"Merged pull request \"Skip Flaky tests\" (#1664) at aspnet/Identity","RelatedBody":"These tests all fail intermittently due to #1630. Un-skip them when that issue is resolved."},{"Id":"7344242647","Type":"IssuesEvent","CreatedAt":"2018-03-07T14:07:43","Actor":"marcwittke","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1668","RelatedDescription":"Opened issue \"Support a synchronous API\" (#1668) at aspnet/Identity","RelatedBody":"I know about the benefits of having async methods. But, however, there are always situations, that do not allow using the async/await pattern, often outside your control. My case is an encapsulated business domain that raises an event, that should be handled synchronously by `UserManager`.\r\n\r\nI also know there are various techniques to make this happen, however, I spent various days to find a possibility to do so, that does not deadlock in a single cpu environment (cheap azure build agent, cheap azure hosting), not only because it is really hard to reproduce that issue locally. Btw: I ended up with [this answer on SO](https://stackoverflow.com/a/5097066/164162), but to be honest: I am not able to explain, why this is better than `TaskFactory.StartNew(func).Unwrap().GetAwaiter().GetResult()` . It is proven to work by trial and error, what makes me feel not so comfortable.\r\n\r\nIs there a specific reason to force the consumer of ASP.Net Identity Core to the async pattern, except \"that's how it should be done today. basta.\"?"},{"Id":"7340986447","Type":"IssuesEvent","CreatedAt":"2018-03-06T23:42:45","Actor":"Eilon","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1667","RelatedDescription":"Opened issue \"Authentication workflow problem when email confirmation is required.\" (#1667) at aspnet/Identity","RelatedBody":"_From @Eilon on October 24, 2017 21:48_\n\n_From @Bartmax on October 21, 2015 8:23_\n\n**TL;DR:**\nUser using external login provider and application with email confirmation required will be able to login the first time (on user creation) without confirming email and he/she won't be able to log in again.\n\n---\n\nWhen a visitor enter the page and hit login, then choosing an external provider, it's then redirected to username/email confirmation.\n\ntyping an email creates and account and log the user in. (user should be required to confirm email)\nThere's no email sending code in the ExternalLogin workflow.\n\nif user logout and then try to login again, it's again presenting him the Associate account.\n\nIf he types in the same email address it says it's already taken.\nIf he types a new email address, it says Invalid login (already associated).\n\nIf he chooses to forgot password, then it's presented with a forgot password confirmation but not email sent because it's not confirmed.\n\nProblems summary:\n1. There's no way a user can log in (for a second time) in this scenario.\n2. The user can use the system without email confirmation as long as he/she stays logged in when account was created.\n3. No email confirmation is sent on this workflow.\n4. Forgot password does **not** help.\n\n\n_Copied from original issue: aspnet/Templates#242_\n\n_Copied from original issue: aspnet/templating#108_"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7347583078","Type":"PullRequestEvent","CreatedAt":"2018-03-08T02:49:58","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2369","RelatedDescription":"Opened pull request \"React to new corefx changes and speed tests up\" (#2369) at aspnet/KestrelHttpServer","RelatedBody":"`/p:InnerLoop=true` to run faster modification of tests"},{"Id":"7346359759","Type":"IssuesEvent","CreatedAt":"2018-03-07T20:27:14","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2245","RelatedDescription":"Closed issue \"Improve exception message for connection timeouts\" (#2245) at aspnet/KestrelHttpServer","RelatedBody":"## Edit:\r\n\r\nI moved this from MVC because this issue ultimately boiled down to the exception text from a connection timeout not being descriptive enough to understand.\r\n\r\n\r\n\r\n-------------\r\n\r\n\r\n**Original issue text below**\r\n_From @clement911 on January 5, 2018 2:30_\r\n\r\nI'm using asp.net core mvc 2.0 on full .net and I'm experiencing an issue in an azure prod web app that I don't understand.\r\n\r\nI have a custom `IAsyncActionFilter` and in the `OnActionExecutionAsync` I inspect `context.ModelState` and sometimes there is an error saying \"Request timed out.\" (Key is empty string)\r\n\r\nIf I understand correctly OnActionExecutionAsync executes directly after the model binding, so how could there be a timeout? and how do I track the source?\r\n\r\n```\r\npublic async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)\r\n        {\r\n            if (!context.ModelState.IsValid)\r\n            {\r\n                //context.ModelState dictionary contains a \"Request timed out.\" entry.\r\n...\r\n            }\r\n...\r\n        }\r\n```\r\n\r\nThanks\r\n\r\n_Copied from original issue: aspnet/Mvc#7195_\r\n  "},{"Id":"7346357299","Type":"PullRequestEvent","CreatedAt":"2018-03-07T20:26:42","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2356","RelatedDescription":"Merged pull request \"More detailed request timeout exceptions\" (#2356) at aspnet/KestrelHttpServer","RelatedBody":"#2245\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7347442720","Type":"PullRequestEvent","CreatedAt":"2018-03-08T01:21:14","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2141","RelatedDescription":"Merged pull request \"Merging changes from dev\" (#2141) at aspnet/Razor","RelatedBody":""},{"Id":"7347440078","Type":"PullRequestEvent","CreatedAt":"2018-03-08T01:19:04","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2141","RelatedDescription":"Opened pull request \"Merging changes from dev\" (#2141) at aspnet/Razor","RelatedBody":""},{"Id":"7347083598","Type":"IssuesEvent","CreatedAt":"2018-03-07T23:03:24","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2134","RelatedDescription":"Closed issue \"Investigate and consider increasing build server shutdown timeout in tests\" (#2134) at aspnet/Razor","RelatedBody":"https://travis-ci.org/aspnet/Razor/jobs/349921394#L2732\r\n\r\nNow that we are spawning multiple build servers at the same time during tests, shutting them down is taking longer than 1 minute. Need to investigate exactly why and maybe increase this timeout to prevent this failure.\r\n\r\ncc @pranavkm "},{"Id":"7345864859","Type":"PullRequestEvent","CreatedAt":"2018-03-07T18:47:51","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2140","RelatedDescription":"Opened pull request \"Don't limit parallel threads for Razor.Design tests\" (#2140) at aspnet/Razor","RelatedBody":"#2134 \r\n\r\nThe build server tests try to shutdown multiple servers in parallel which needs a lot of threads. So in slower machines they just timeout. "},{"Id":"7340737635","Type":"IssuesEvent","CreatedAt":"2018-03-06T22:38:24","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2139","RelatedDescription":"Opened issue \"TagHelperDescriptor serializer doesn't roundtrip 'Kind'\" (#2139) at aspnet/Razor","RelatedBody":"The 'Kind' property doesn't get roundtripped. Which means that view component tag helpers and blazor components might not work when using the CLI toolset.\r\n\r\nI think the problem is here: https://github.com/aspnet/Razor/blob/dev/src/Microsoft.VisualStudio.LanguageServices.Razor/TagHelperDescriptorJsonConverter.cs#L86 - since Kind is read  only I don't think it is serialized by the default serializer."},{"Id":"7340139619","Type":"PullRequestEvent","CreatedAt":"2018-03-06T20:34:29","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2138","RelatedDescription":"Opened pull request \"Ignore this PR. This is just for testing travis.\" (#2138) at aspnet/Razor","RelatedBody":""}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"},{"Id":"7271114444","Type":"IssuesEvent","CreatedAt":"2018-02-20T18:33:27","Actor":"abpiskunov","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/347","RelatedDescription":"Closed issue \"File nesting in Solution Explorer is inconsistent and incorrect\" (#347) at aspnet/Tooling","RelatedBody":"The Solution Explorer for ASP.NET 5 MVC projects has several major problems - one of them is file nesting. The below issues affect Visual Studio 2015 Update 1 with ASP.NET 5 Release Candidate 1.\n#### tl;dr\n- Please fix nesting rules for `.less`, `.scss` and `.sass`, so those files are nested under `.html`.\n- Please fix incorrect nesting that sometimes appear after renaming/moving/copying files and folders.\n- Please provide an option to disable all file nesting, and eventually, options to configure nesting rules.\n- Please fix other critical Solution Explorer issues - this is just one of them, and there are many more.\n#### File nesting is inconsistent when nesting files under `.html`.\n\nThe `.less` and `.scss` files should be nested under `.html`. Those files compile to `.css` just like `.ts` compile to `.js` and they are just as much part of the view component. \n![less-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942660/6452782c-a838-11e5-9a44-d7ab6a2e5fc9.png)\n![scss-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942664/66bbd3a6-a838-11e5-8e3c-f1c369d5e1de.png)\nIn fact, if we only have a `.css` file in there, then it _is_ nested as expected, so clearly `.less` and `.scss` should also be nested:\n![css-is-nested-as-expected](https://cloud.githubusercontent.com/assets/6388663/11942670/6be4bdd4-a838-11e5-99b1-1dcc43238459.png)\n\nWhile the above is clearly a bug, and a very annoying one at that, the rules for other file types are less obvious, but should maybe also be considered... maybe `.json` should also be nested under `.html`?\nIt probably contains either settings, string resources, or data for that view component, so it seems resonable to me, although I consider this far less important than getting the style sheet nesting fixed.\n![json-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11939884/4a1bb224-a825-11e5-9ff6-631b4e8fed39.png)\n\nThose nesting rules have been inconsistent ever since they were introduced in ASP.NET 5, and **it really needs to be fixed**. Sure, everything compiles just fine, but I'm getting really pissed off looking at this mess in my Solution Explorer every day. Inconsistencies like this makes the whole concept of nesting seem like an annoyance more than a help, as it raises the obvious question \"if only some files are nested, then why nest anything at all - that's just an extra click to get to the .ts file\". Which brings me to...\n#### File nesting can be annoying\n\nWhile the fundamental idea of file nesting is not nessesarily bad, it can be _very_ annoying at times, which is why, as a _minimum_, **I want an option to disable all file nesting** - and ideally, options to configure the nesting rules.\n\nConsider this folder structure, where the folder already represents a container for the component:\n![file-nesting-is-annoying](https://cloud.githubusercontent.com/assets/6388663/11940913/ff28392a-a82b-11e5-86b4-571bc70d21bb.png)\nHere the file nesting provides no benefit at all, and actually just introduces a _really_ annoying extra click to get to the `.ts` file. A possible fix for this might be to only nest files if the folder name is different from the name of the `.html` file, but this might also be wrong - for example, a folder named `tabs` representing some fancy `tabs` component might actually contain multiple elements that work together, e.g. `tabs.html/js`, `tab-pane.html/js` and `tab-button.html/js`, and in this case we _do_ want nesting for all three of those. Therefore, I strongly believe an option to simply disable all nesting is the best option here - and it is very much needed, because despite this example, we do have projects in which the nesting provides absolutely no value and represents a major annoyance.\n\nOne could also argue that the `.html` file should actually be nested under the `.js` file.\nConsider an Angular 2 application, where the `.ts` file represents the actual Component, annotated with metadata specifying either the path to the `.html` file representing its view, or if the view is small, a string representing the markup of the view. Same for styles, where the metadata in the `.ts` file specifies either the path to the `.css` file, or a string representing the style rules. Here, both the view and the style sheet is clearly dependencies of the `.ts` file, so it would make sense to nest them below that...\n##### An alternative idea\n\nAlternatively, you could consider a completely different approach to nesting, where the part of the file name the files have in common, is used to show a \"virtual folder\" containing all the files - then file nesting could be used only for things like transpiler generated files. The image below is a concept I mocked up to illustrate this idea:\n![virtual-folder-concept](https://cloud.githubusercontent.com/assets/6388663/11942319/042b84ea-a836-11e5-80f1-b5941cfbdfa7.png)\nHere, all the files have the \"foo\" part of their name in common, and is therefore nested under a \"foo\" node in Solution Explorer. However, in the file system, the actual files are all located in the components folder, so in the code the path would be `app/components/foo.js` - nice an clean, works for any file type, and makes no assumptions about whether `.html` or `.js` is more important.\n\nGoing further with this idea, the IDE could also be smart, so when selecting this \"virtual folder\", it could maybe somehow open all the `foo.*` files in a split view (ignoring transpilation output of course), thus providing a quick way to see all the component code at once. Just a thought...\n### File nesting is broken\n\nNot only is file nesting inconsistent, and sometimes annoying, but it is also broken.\nHere are two cases of incorrect behavior I managed to reproduce - unfortunately, this does not seem to fail consistently, so it can be hard to reproduce - but it does happen often enough to be annoying.\n![file-nested-on-drag-copy](https://cloud.githubusercontent.com/assets/6388663/11943207/4749c9e8-a83c-11e5-9f15-304cb16e8419.png)\n![nesting-broken-when-folder-is-renamed](https://cloud.githubusercontent.com/assets/6388663/11943211/4c807074-a83c-11e5-8e71-4bed0bd4353c.png)\n\nPlease take those Solution Explorer issues seriously - I've provided feedback about multiple critical issues several several months ago, and thus far _nothing_ has improved. Solution Explorer still hangs or crashes the whole IDE when a large number of files is modified/moved/copied/renamed, it still has annoying, inconsistent and buggy file nesting, and it still constantly gets out of sync with the file system, crashing first the project system and eventually the whole IDE. I'm more that a little concerned about seeing a release candidate label on something this buggy and unpolished - if this is indeed what you intend to release, then we intend to find another IDE for our frontend development.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7340008772","Type":"IssuesEvent","CreatedAt":"2018-03-06T20:07:16","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Opened issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292) at aspnet/Announcements","RelatedBody":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349"},{"Id":"7215731126","Type":"IssuesEvent","CreatedAt":"2018-02-08T09:18:22","Actor":"SteveSandersonMS","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Opened issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289) at aspnet/Announcements","RelatedBody":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":9,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"963556129748918272","CreatedAt":"2018-02-13T23:30:57+00:00","UserScreenname":"aspnet","Text":"Starting in 15 minutes... join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/C7LilH9606","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":8,"RawContent":null},{"Id":"963413986912997376","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answeâ¦ https://t.co/ORAYG28QGW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"963180036571332609","CreatedAt":"2018-02-12T22:36:30+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"962026058412249090","CreatedAt":"2018-02-09T18:11:00+00:00","UserScreenname":"aspnet","Text":"ASPNET Core 2.0 is out! Join @csharpfritz as he walks you through the improvements, additions and enhancements of tâ¦ https://t.co/AC3AJnLo9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":31,"RawContent":null},{"Id":"961980507939528705","CreatedAt":"2018-02-09T15:10:00+00:00","UserScreenname":"aspnet","Text":"Working with ASPNET and want to invest in Angular? Check out @Paladique at @DevIntersection, March 25-28 in Orlandoâ¦ https://t.co/i9BCRXD1fc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-03-08T05:30:09.1464595Z","RunDurationInMilliseconds":7839}