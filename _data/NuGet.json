{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10305402114","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:37:35","Actor":"Jericho","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7494","RelatedDescription":"Opened issue \"Duplicates when paging through search results since new search went live\" (#7494) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI have a console application that uses the NuGet.Protocol.Core.v3 version 4.3.0-beta1-2418 nuget package to search nuget for packages with a certain keyword. My app retrieves 10 results at a time and loops through pages until no result are returned. This has always worked very well until a few days ago. What I am seeing since the new search went live is that intermittently a package will be included on a certain page and again on the following page.\r\n\r\n### To Reproduce\r\nHere is an excerpt of my C# code that can be copied and pasted into a console app to reproduce the behavior:\r\n```\r\nvar take = 10;\r\nvar skip = 0;\r\nvar searchTerm = \"Cake\";\r\nvar filters = new SearchFilter(true)\r\n{\r\n\tIncludeDelisted = false\r\n};\r\nvar discoveredPackages = new List<IPackageSearchMetadata>(take);\r\nvar nugetSearchClient = context.NugetRepository.GetResource<PackageSearchResource>();\r\n\r\nwhile (true)\r\n{\r\n\tvar searchResult = await nugetSearchClient.SearchAsync(searchTerm, filters, skip, take, NullLogger.Instance, CancellationToken.None).ConfigureAwait(false);\r\n\tskip += take;\r\n\r\n\tif (!searchResult.Any()) break;\r\n\r\n\t// I added the following code to help me investigate this problem\r\n\t// An exception will be thrown if a package is returned in the search\r\n\t// result and has been discovered previously\r\n\tvar duplicates = searchResult.Select(r => r.Identity).Intersect(discoveredPackages.Select(p => p.Identity));\r\n\tif (duplicates.Any())\r\n\t{\r\n\t\tvar dupes = string.Join(\", \", duplicates.Select(i => i.ToString()));\r\n\t\tthrow new Exception($\"The following package were already returned by the search API: {dupes}\");\r\n\t}\r\n\r\n\tdiscoveredPackages.AddRange(searchResult);\r\n}\r\n```\r\n\r\n### Expected behavior\r\nI expect packages to be returned only once and not to be duplicated on multiple pages of the search result.\r\n\r\n### Side note\r\nIs there a way when I search programatically to specified my desired sorting and completely avoid the new \"relevance\" sorting? For example, in my case a simple alphabetical sort would be perfectly fine."},{"Id":"10304844677","Type":"IssuesEvent","CreatedAt":"2019-08-28T23:09:07","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7402","RelatedDescription":"Closed issue \"[Azure Search] Move service index to Azure Search for V3 search\" (#7402) at NuGet/NuGetGallery","RelatedBody":"- [x] DEV\r\n- [x] DEV China\r\n- [x] INT\r\n- [x] PROD\r\n- [x] PROD China"},{"Id":"10304813508","Type":"PullRequestEvent","CreatedAt":"2019-08-28T23:01:46","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7493","RelatedDescription":"Opened pull request \"Make log off operation only accept POST\" (#7493) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2679\r\n"},{"Id":"10304575045","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:10:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7467","RelatedDescription":"Closed issue \"[Azure Search] Bug bash hijacked APIs\" (#7467) at NuGet/NuGetGallery","RelatedBody":"Come up with test cases to cover hijacked OData queries. Validate that Azure Search responds to as expected.\r\n\r\n* [X] Visual Studio PM UI\r\n    * [X] Search for package\r\n    * [X] Browse package\r\n    * [X] Select specific version of package\r\n    * [X] Install package\r\n    * [X] Check the Installed tab, update the package\r\n* [x] NuGet.exe\r\n    * [x] Install package\r\n    * [x] Update package\r\n* [x] NuGet List\r\n* [x] Run `NuGet.Protocol.Tests` client tests?\r\n  * Changes: https://github.com/NuGet/NuGet.Client/tree/dev-loshar-RunTestsOnDevNuGetOrg\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10306128759","Type":"IssuesEvent","CreatedAt":"2019-08-29T04:48:17","Actor":"davidwengier","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8522","RelatedDescription":"Opened issue \"Better support for packaging from Visual Studio\" (#8522) at NuGet/Home","RelatedBody":"To fix https://github.com/dotnet/project-system/issues/1339 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/935258 we're improving the Pack command in the managed project system, but we can't solve the problem fully without changes to Nuget targets, which we're working around at the moment.\r\n\r\nThe issues are:\r\n\r\n* Nuget targets should specify the actions to call for packaging\r\n   * This means supplying a value for the `<PackageAction>` property, and the `<CleanPackageAction>` and `<RebuildPackageAction>` properties, though the last two are yet to be implemented.\r\n   * At the moment we're specifying this [here](https://github.com/dotnet/project-system/blob/efa4f2e034df733f2c3e885aae50daa0cee2dba5/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L26), but since we don't own the target that is fragile.\r\n   * This is similar to how Nuget targets add the capability [here](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L58)  that controls if the menu item is shown \r\n* Nuget should supply a target for PackageAction\r\n   * At the moment the `Pack` target is dependent on the `GeneratePackageOnBuild` property, so we are temporarily forcing that property to `false` in order to ensure that a build and pack is correctly done. That is also fragile, as it means packaging only works via our command, not through any Visual Studio API\r\n   * The ideal solution is to supply a target for packing in VS that does a Build and Pack regardless (or remove the condition on `GeneratePackageOnBuild` from the Pack target and use that)\r\n* Nuget should supply targets for CleanPackageAction and RebuildPackageAction\r\n   * These should clean the package output, and rebuild the package output, as appropriate.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Visual Studio\r\n\r\nNuGet version (x.x.x.xxx): N/A\r\n\r\ndotnet.exe --version (if appropriate): N/A\r\n\r\nVS version (if appropriate): 16.3 Preview 3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10\r\n\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nN/A"},{"Id":"10305910124","Type":"IssuesEvent","CreatedAt":"2019-08-29T03:47:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8521","RelatedDescription":"Closed issue \"The cursor in PMC is hard to spot in the light & blue themes\" (#8521) at NuGet/Home","RelatedBody":"The PMC cursor is hard to spot in the light and blue themes.\r\n\r\nNot a regression. \r\n\r\n![image](https://user-images.githubusercontent.com/2878341/63903302-d7ecc400-c9c1-11e9-9377-5e4a7a295a76.png)\r\n"},{"Id":"10305373160","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:29:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8521","RelatedDescription":"Opened issue \"The cursor in PMC is hard to spot in the light & blue themes\" (#8521) at NuGet/Home","RelatedBody":"The PMC cursor is hard to spot in the light and blue themes.\r\n\r\nNot a regression. "},{"Id":"10305310638","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:12:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8520","RelatedDescription":"Opened issue \"Reevaluate the boostrappiong packages.config\" (#8520) at NuGet/Home","RelatedBody":"It's possible that some entries are not needed/can be moved to a PackageReference or similar. "},{"Id":"10304702235","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:36:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8519","RelatedDescription":"Opened issue \"TelemetryUtility.CreateFileAndForget name should indicate that it is in fact a file and forget name\" (#8519) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.VisualStudio.Common/Telemetry/TelemetryUtility.cs#L10\r\n\r\nRight now we end up with even names such as: \r\n\r\n`vs/nuget/pvspackagerestoremanager\\onnugetprojectadded`. \r\n\r\nThis would make it difficult to just categorize all of our file and forget failures. \r\n\r\nI think that it might be useful for all these events to get prefixed somehow, so that we can isolate them from our regular events. \r\n\r\nThoughts @dtivel?\r\n\r\nIf we think that's the case, we should do it soon, if not close it :) "},{"Id":"10304555501","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:06:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8516","RelatedDescription":"Opened issue \"Solution PM UI - Deprecation warning icon has issues\" (#8516) at NuGet/Home","RelatedBody":"![image](https://user-images.githubusercontent.com/2878341/63895701-bc26f500-c9a4-11e9-91c3-08f27f91c915.png)\r\n\r\n\r\n1. Create a solution with 1 project.\r\n1. Install a deprecated package.\r\n1. Open the solution level PM UI\r\n1. Go to the installed tab.\r\n\r\nYou will see that the installed label has a warning icon, but in the packages list you cannot distinguish visually which package is deprecated. This is an issue. \r\n\r\nNote that this is not an issue on the project level PM UI. \r\n\r\n![image](https://user-images.githubusercontent.com/2878341/63895798-0c9e5280-c9a5-11e9-9eef-2024bebb9fe5.png)\r\n\r\nThis leads to an underwhelming experience, that I believe we should fix before shipping. \r\n\r\n//cc @rrelyea @anangaur @xavierdecoster @scottbommarito @NuGet/nuget-client "},{"Id":"10304612578","Type":"IssuesEvent","CreatedAt":"2019-08-28T15:17:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8518","RelatedDescription":"Opened issue \"[Accessibility] Installed tab with a warning icon due to deprecation is not announced\" (#8518) at NuGet/Home","RelatedBody":"Install a deprecated package and go to the PM/Solution PM UI. \r\n\r\nNavigate to installed tab and notice that the deprecation warning is not announced. \r\n\r\nNote that if you have a number in the updates tab it is announced, so there is precedent for this. "},{"Id":"10304591102","Type":"IssuesEvent","CreatedAt":"2019-08-28T15:13:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8517","RelatedDescription":"Opened issue \"[Accessibility] Tab navigation skips certain PackageDetails metadata causing it to be missed by narrator\" (#8517) at NuGet/Home","RelatedBody":"Found while testing the new deprecated metadata. \r\n\r\nNote that  the description metadata gets skipped as well. It only goes to the information that's hyperlinked.\r\n\r\nThis is not a regression but just discovered due to it. "},{"Id":"10303603955","Type":"IssuesEvent","CreatedAt":"2019-08-28T12:36:13","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8513","RelatedDescription":"Closed issue \"VS:  assemblies are fully ngen-ed not partially ngen-ed\" (#8513) at NuGet/Home","RelatedBody":""},{"Id":"10303506519","Type":"IssuesEvent","CreatedAt":"2019-08-28T12:21:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8515","RelatedDescription":"Opened issue \"NuGet should communicate the 403/401 to the user. \" (#8515) at NuGet/Home","RelatedBody":"https://github.com/microsoft/artifacts-credprovider/issues/124#issuecomment-525870346\r\n\r\nSpecifically the issue here is with the new plugins. \r\n\r\nfyi @dtivel @rrelyea "},{"Id":"10303307376","Type":"IssuesEvent","CreatedAt":"2019-08-28T11:51:41","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8514","RelatedDescription":"Opened issue \"Bug 959454: [PerfWatson] UIDelay\" (#8514) at NuGet/Home","RelatedBody":"microsoft.visualstudio.languageservices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService+<>c__DisplayClass_0+<<OnWorkspaceChanged>b__>d.MoveNext|nuget.packagemanagement.visualstudio.dll!NuGet.PackageManagement.VisualStudio.VsProjectAdapter.GetTargetFrameworkStringAsync"},{"Id":"10303062595","Type":"IssuesEvent","CreatedAt":"2019-08-28T11:16:31","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8513","RelatedDescription":"Opened issue \"VS:  assemblies are fully ngen-ed not partially ngen-ed\" (#8513) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating theâ€¦ https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-08-29T05:30:43.8822122Z","RunDurationInMilliseconds":2515}