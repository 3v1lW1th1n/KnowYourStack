{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":90,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6730880241","Type":"IssuesEvent","CreatedAt":"2017-10-18T04:00:08","Actor":"KKhurin","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14561","RelatedDescription":"Opened issue \"Expose System.SizedReference in coreclr\" (#14561) at dotnet/coreclr","RelatedBody":""},{"Id":"6730738025","Type":"PullRequestEvent","CreatedAt":"2017-10-18T03:00:02","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14547","RelatedDescription":"Merged pull request \"Arm64: Use op2 type for LOCKADD\" (#14547) at dotnet/coreclr","RelatedBody":"Fix #14539"},{"Id":"6730738024","Type":"IssuesEvent","CreatedAt":"2017-10-18T03:00:02","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14539","RelatedDescription":"Closed issue \"ARM64 BUILD BREAK: Assertion failed 'info->dstCount == (tree->OperIs(GT_LOCKADD) ? 0 : 1)'\" (#14539) at dotnet/coreclr","RelatedBody":"**Repro:**\r\nbuild arm64 checked -toolset_dir <dir>\r\n\r\n```\r\nAssert failure(PID 6664 [0x00001a08], Thread: 1828 [0x0724]): Assertion failed 'info->dstCount == (tree->OperIs(GT_LOCKADD) ? 0 : 1)' in 'System.Threading.SpinLock:Exit():this' (IL size 37)\r\n\r\n    File: c:\\git\\corecl2\\src\\jit\\lsraarm64.cpp Line: 404\r\n    Image: C:\\git\\corecl2\\bin\\Product\\Windows_NT.arm64.Checked\\x64\\crossgen.exe\r\n```\r\n"},{"Id":"6730618701","Type":"PullRequestEvent","CreatedAt":"2017-10-18T02:10:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14560","RelatedDescription":"Opened pull request \"Improve thread statics performance\" (#14560) at dotnet/coreclr","RelatedBody":"- Disable code to handle multiple appdomains\r\n- Use more efficient object array accessor"},{"Id":"6730488149","Type":"PullRequestEvent","CreatedAt":"2017-10-18T01:16:25","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14559","RelatedDescription":"Opened pull request \"Fixed block copy for structs containing gcrefs\" (#14559) at dotnet/coreclr","RelatedBody":"Issue #14383.\r\nFixed code generation for `GT_STORE_OBJ` node containing gcref. In case we have struct with both gcref non-gcref we may hit GC during copy code when temporary register holds non-ref value, but marked as gcref. So it obviously leds to gc hole. "},{"Id":"6730473443","Type":"PullRequestEvent","CreatedAt":"2017-10-18T01:10:17","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14558","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02118-01 (master)\" (#14558) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6730417080","Type":"IssuesEvent","CreatedAt":"2017-10-18T00:46:50","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14557","RelatedDescription":"Opened issue \"Modify interlocked nodes to take an indirection\" (#14557) at dotnet/coreclr","RelatedBody":"The op1 of an interlocked instruction is an address. The instructions implicitly do an indirection. This makes sense because interlocked instructions are fundamentally operands on  memory locations. However, this complicates codegen. First, because op1 doesn't hold the type of the memory location (see issues #14539), the type must either be on the interlocked instruction, which is problematic if the node isn't actually producing a value, OR we must use the type of op2 (which is what is currently done for XARCH). Second, because `emitter::emitInsBinary()` expects to see an indirection, we create one to pass to that method (https://github.com/dotnet/coreclr/blob/master/src/jit/codegenxarch.cpp#L3703).\r\nIt would probably be better to simply redefine these nodes to take a value (i.e. an indirection of a memory location) instead of an address."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6730917694","Type":"IssuesEvent","CreatedAt":"2017-10-18T04:17:15","Actor":"bradwilson","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7861","RelatedDescription":"Opened issue \"Documentation for .deps.json and friends is (wildly) out of date\" (#7861) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md\r\n\r\nDespite us being post 2.0, this documentation file is (a) incorrect (see, for example, how `runtimeTarget` shows as a string instead of an object), and (b) talks about `project.json`.\r\n\r\nPlease update it so those of us who are looking at these configuration files have up to date documentation to consult.\r\n\r\nThanks! 😁 "},{"Id":"6730863739","Type":"PullRequestEvent","CreatedAt":"2017-10-18T03:52:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7858","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25817-05 (master)\" (#7858) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6730286222","Type":"PullRequestEvent","CreatedAt":"2017-10-17T23:54:53","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7860","RelatedDescription":"Opened pull request \"Updating the version on master to 2.2.0\" (#7860) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6730280787","Type":"PullRequestEvent","CreatedAt":"2017-10-17T23:52:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7859","RelatedDescription":"Opened pull request \"Updating ASP.NET templates to 1.0.0-beta2-20170810-304\" (#7859) at dotnet/cli","RelatedBody":"@mlorbetske @seancpeters \r\n\r\ncc @MattGertz "},{"Id":"6730201007","Type":"PullRequestEvent","CreatedAt":"2017-10-17T23:24:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7845","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7845) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171016-070031\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171016-070031 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6729845860","Type":"PullRequestEvent","CreatedAt":"2017-10-17T21:40:39","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7858","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25817-05 (master)\" (#7858) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6729730240","Type":"PullRequestEvent","CreatedAt":"2017-10-17T21:13:34","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7855","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25817-01 (master)\" (#7855) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6729707699","Type":"PullRequestEvent","CreatedAt":"2017-10-17T21:08:19","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7857","RelatedDescription":"Opened pull request \"WIP Accept source build patches\" (#7857) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6729608940","Type":"PullRequestEvent","CreatedAt":"2017-10-17T20:46:21","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/541","RelatedDescription":"Merged pull request \"Handle duplicate files when trimming\" (#541) at dotnet/standard","RelatedBody":"Duplicate file names can exist when publishing RID-less and packages contain RID-specific\r\nruntime targets.\r\n\r\nWe didn't support this previously because trimming was primarily focusing on standalone\r\nscenarios.\r\n\r\nHandle duplicates by inserting an aggregate node in the file graph that references all the\r\nduplicate nodes as dependencies.  Only the aggregate node will be referenced by other\r\nnodes, but it will include all implementations via dependencies.\r\n\r\nFixes #378 #519 \r\n\r\n/cc @michael-lang @voltagex "},{"Id":"6729608920","Type":"IssuesEvent","CreatedAt":"2017-10-17T20:46:21","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/378","RelatedDescription":"Closed issue \"Trimming fails if a conflict hits it\" (#378) at dotnet/standard","RelatedBody":"If conflict resolution doesn't resolve a conflict trimming will fail with an error like:\r\n```\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentException: An item with the same key has already been added. Key: System.Security.Cryptography.Encoding.dll\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException(Object key)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\n```\r\n\r\nWe shouldn't fail here, instead we should just tolerate the duplicate and use one of them.\r\nhttps://github.com/dotnet/standard/blob/eacea174a2ea58c0dc8576cbec321e0cd44640a5/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L310\r\n\r\n"},{"Id":"6728329212","Type":"PullRequestEvent","CreatedAt":"2017-10-17T16:18:54","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/541","RelatedDescription":"Opened pull request \"Handle duplicate files when trimming\" (#541) at dotnet/standard","RelatedBody":"Duplicate file names can exist when publishing RID-less and packages contain RID-specific\r\nruntime targets.\r\n\r\nWe didn't support this previously because trimming was primarily focusing on standalone\r\nscenarios.\r\n\r\nHandle duplicates by inserting an aggregate node in the file graph that references all the\r\nduplicate nodes as dependencies.  Only the aggregate node will be referenced by other\r\nnodes, but it will include all implementations via dependencies.\r\n\r\nFixes #378 #519 \r\n\r\n/cc @michael-lang @voltagex "},{"Id":"6727384905","Type":"IssuesEvent","CreatedAt":"2017-10-17T13:27:57","Actor":"jogibear9988","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/540","RelatedDescription":"Opened issue \"Error when Librarys are used where some reference NetStandart2.0.1 and others in a 4.6.2 Project\" (#540) at dotnet/standard","RelatedBody":"I've a WPF App wich References a Library (RoslynPad) wich uses NetStandart2.0.1\r\n\r\nMy Application also References other Librarys wich Reference to System.Runtime 4.3 Nuget Package.\r\n\r\nNow I've the Problem. When I build, System.Runtim ein Version 4.1.2.0 is copied to my Application Directory (the one from Netstandart2.0.1 package), but in the App.config a redirect to 4.1.1 is created (wich is in the 4.3 nuget)\r\n\r\nhow can I fix this, without manually changeing the app.config every time? "},{"Id":"6723583231","Type":"IssuesEvent","CreatedAt":"2017-10-16T19:07:35","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"},{"Id":"6722723626","Type":"IssuesEvent","CreatedAt":"2017-10-16T16:00:49","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/538","RelatedDescription":"Closed issue \"No netstandard.dll reference when targeting netstandard2.0\" (#538) at dotnet/standard","RelatedBody":"@alexeyzimarev reported this here: https://github.com/dotnet/core/issues/831#issuecomment-336706155\r\n\r\nThis is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - `CultureInfo`, `List`, etc.\r\n\r\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\r\n\r\n![image](https://user-images.githubusercontent.com/2821205/31584452-365ae620-b1af-11e7-8340-a92e0a5fc552.png)\r\n\r\nThe csproj files are completely identical:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI tried using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` and it has no effect. But hence that the RestSharp project does not even have a reference to `netstandard.dll`. How this is even possible???"},{"Id":"6721886115","Type":"IssuesEvent","CreatedAt":"2017-10-16T13:26:17","Actor":"YohanSciubukgian","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/539","RelatedDescription":"Opened issue \"Missing System.String.Replace definitions in .NetStandard 2.0\" (#539) at dotnet/standard","RelatedBody":"From what I have understand, .Net Core 2.0 is the implementation of .Net Standard 2.0 .\r\nHowever I'm facing an issue when I'm trying to move my code from a .Net Core 2.0 project to .Net Standard 2.0 with the following message :\r\n> No overload for method 'Replace' takes 3 arguments\r\n\r\n.Net Standard 2.0 references the following methods : \r\n - System.String.Replace(String, String);\r\n - System.String.Replace(char, char);\r\nhttps://docs.microsoft.com/fr-fr/dotnet/api/?view=netstandard-2.0&term=string.replace\r\n\r\nIn another side, .Net Core 2.0 references the following methods :\r\n - System.String.Replace(String, String, bool, CultureInfo);\r\n - System.String.Replace(String, String, StringComparison);\r\n - System.String.Replace(String, String);\r\n - System.String.Replace(char, char);\r\nhttps://docs.microsoft.com/fr-fr/dotnet/api/?view=netcore-2.0&term=string.replace\r\n\r\nIs it possible to add these missing definitions to the next version of .NetStandard ?"},{"Id":"6718785694","Type":"IssuesEvent","CreatedAt":"2017-10-15T16:49:15","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/538","RelatedDescription":"Opened issue \"No netstandard.dll reference when targeting netstandard2.0\" (#538) at dotnet/standard","RelatedBody":"@alexeyzimarev reported this here: https://github.com/dotnet/core/issues/831#issuecomment-336706155\r\n\r\nThis is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - `CultureInfo`, `List`, etc.\r\n\r\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\r\n\r\n![image](https://user-images.githubusercontent.com/2821205/31584452-365ae620-b1af-11e7-8340-a92e0a5fc552.png)\r\n\r\nThe csproj files are completely identical:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI tried using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` and it has no effect. But hence that the RestSharp project does not even have a reference to `netstandard.dll`. How this is even possible???"},{"Id":"6716718422","Type":"IssuesEvent","CreatedAt":"2017-10-14T12:20:47","Actor":"shaggygi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Opened issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6731045580","Type":"PullRequestEvent","CreatedAt":"2017-10-18T05:19:43","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24664","RelatedDescription":"Merged pull request \"Remove dead code from Microsoft.VisualBasic\" (#24664) at dotnet/corefx","RelatedBody":"PR addresses issue #17905, project **Microsoft.VisualBasic**.\r\n\r\nThere were just a few things to remove. In the [diff file](http://tempcoverage.blob.core.windows.net/report2/Microsoft.VisualBasic.diff.html), there are some parts marked red, which I did not remove (extra to the _not to remove cases_ mentioned in the issue itself):\r\n\r\n- Enum `vbErrors`: it is used in the `ExceptionUtils` class. Probably it was not used when the diff was created.\r\n- `!=` operators (`<>` in Visual Basic) in `Method` class (`Symbols.vb` file). I believe that even if they are not used, the should stay there as counterparts to `==` operators."},{"Id":"6731043462","Type":"PullRequestEvent","CreatedAt":"2017-10-18T05:18:44","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24682","RelatedDescription":"Merged pull request \"revert part of #24098. do not use shell to find KDestroyCmd.\" (#24682) at dotnet/corefx","RelatedBody":"@dotnet-bot test outerloop netcoreapp Ubuntu17.10 Release\r\n@dotnet-bot test outerloop netcoreapp Ubuntu17.04 Release\r\n@dotnet-bot test outerloop netcoreapp Centos7 Release\r\n\r\n"},{"Id":"6731041738","Type":"PullRequestEvent","CreatedAt":"2017-10-18T05:17:58","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24691","RelatedDescription":"Merged pull request \"Fix lookup path for perfcounter.dll\" (#24691) at dotnet/corefx","RelatedBody":"We need to update the lookup path for perfcounter.dll to look in the\r\nfull framework directory, rather than a local path for .Net Core."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6731059178","Type":"PullRequestEvent","CreatedAt":"2017-10-18T05:26:07","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22651","RelatedDescription":"Merged pull request \"Make invalid call IInvalidExpression\" (#22651) at dotnet/roslyn","RelatedBody":"Fix #18722\r\nvso : https://devdiv.visualstudio.com/DevDiv/_workitems/edit/510460"},{"Id":"6731059173","Type":"IssuesEvent","CreatedAt":"2017-10-18T05:26:07","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18722","RelatedDescription":"Closed issue \"Add `IInvalidInvocationExpression` interafce\" (#18722) at dotnet/roslyn","RelatedBody":"Currently in C#, an invalid invocation is represented by an `IInvocationExpression` operation, but it might violate the contract of `IInvocationExpression`. For example, we can't provide a list of arguments in evaluation order correctly if we have extra arguments that don't match any parameter, or multiple arguments are matching to a single parameter, etc. On the other hand, making an invalid invocation an `IInvalidExpression` would solve the problem but it would be unnecessarily lossy since in many cases compiler does have more details that users might find useful to do further analysis.\r\n\r\nThe goal would be to expose as much information of a invalid invocation as possible at best effort, without violating the API contract of `IInvocationExpression`, hence the new `IInvalidInvocationExpression` interface.\r\n\r\nHere's the notes from our discussion:\r\n- Will be a sibling of `IInvocationExpression` (child of `IHasArgumentExpression`)\r\n- Should contain candidate symbols and candidate reason.\r\n- Has a list `ArgumentValues` of type `IOperation` that were passed to the invocation.\r\n- And a receiver of type` IOperatoin`\r\n- We would also like an api/extension `TryGetParameterForArgumentValue`, indicating it's best effort and may fail\r\n\r\n@dotnet/analyzer-ioperation "},{"Id":"6730900941","Type":"PullRequestEvent","CreatedAt":"2017-10-18T04:09:35","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22686","RelatedDescription":"Merged pull request \"Fix typos\" (#22686) at dotnet/roslyn","RelatedBody":""},{"Id":"6730885300","Type":"PullRequestEvent","CreatedAt":"2017-10-18T04:02:15","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22742","RelatedDescription":"Opened pull request \"Only check for missing attributes when we know the syntax tree is available\" (#22742) at dotnet/roslyn","RelatedBody":"Fixes a case where large projects repeatedly deserialized syntax trees, resulting in severe UI delays while typing.\r\n\r\n**Customer scenario**\r\n\r\nA large VB project contains a large number of partial classes spread across *very* large source files. While typing in the editor, memory pressure results in frequently GC reclaiming of weak references to syntax trees. Then, calls to `ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind` forces the syntax trees to be deserialized, further increasing memory pressure. The following shows a snippet of callees in PerfView where 4+GiB of memory was allocated while typing two short lines (less than 15 tokens).\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/31700455-206ef716-b38f-11e7-87c7-7e81736887b0.png)\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes [DevDiv 469472](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/469472).\r\n\r\n**Workarounds, if any**\r\n\r\nNone known.\r\n\r\n**Risk**\r\n\r\nThe risk appears to be very low, as the code was already meant to handle cases where the attribute data is not readily available.\r\n\r\n**Performance impact**\r\n\r\nDramatic performance improvement for impacted users. The IDE goes from *fully unusable* to working normally.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nUnknown.\r\n\r\n**Root cause analysis:**\r\n\r\nFailed to test with partial class declarations that, when parsed, exceed the available memory of the process.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A"},{"Id":"6730601111","Type":"PullRequestEvent","CreatedAt":"2017-10-18T02:03:42","Actor":"natidea","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22738","RelatedDescription":"Merged pull request \"Merge master to dev15.5.x\" (#22738) at dotnet/roslyn","RelatedBody":"This is an automatically generated pull request from master into dev15.5.x.\r\n\r\n``` bash\r\ngit fetch --all\r\ngit checkout merges/master-to-dev15.5.x-20171017-150010\r\ngit reset --hard upstream/dev15.5.x\r\ngit merge upstream/master\r\n# Fix merge conflicts\r\ngit commit\r\ngit push merges/master-to-dev15.5.x-20171017-150010 --force\r\n```\r\n\r\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6730481318","Type":"PullRequestEvent","CreatedAt":"2017-10-18T01:13:31","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22741","RelatedDescription":"Opened pull request \"WIP: Sym store\" (#22741) at dotnet/roslyn","RelatedBody":""},{"Id":"6730321813","Type":"PullRequestEvent","CreatedAt":"2017-10-18T00:08:11","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22740","RelatedDescription":"Opened pull request \"Add regression test for ExpressionTree issue\" (#22740) at dotnet/roslyn","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=481125"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6730920210","Type":"PullRequestEvent","CreatedAt":"2017-10-18T04:18:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4733","RelatedDescription":"Merged pull request \"[ILVerify] Implement delegate creation checks\" (#4733) at dotnet/corert","RelatedBody":"The verification algorithm should require the creation of delegates to be always done with a specific sequence of IL-instructions. This sequence differs depending on whether ldvirtftn or ldftn is used.\r\nI implemented the checks for this rule in the method `CheckDelegateCreation`.\r\nI also implemented the `IsDelegateAssignable` check, which compares the given ftn signature with the signature of the `Invoke`-Method of the delegate to be created, as defined in ECMA.\r\n\r\nThese checks also prompted the implementation of the rule defined for calling non-final, virtual methods using the `call` instruction (which is also checked when loading such a method using ldftn):\r\n\r\n> When using the call opcode to call a non-final virtual method on an instance other than a boxed\r\nvalue type, verification checks that the instance reference to the method being called is the result\r\nof ldarg.s 0, ldarg 0 or ldarg.0 and the caller’s body does not contain starg.s 0, starg 0 or\r\nldarga.s 0, ldarga 0. \r\n\r\n(ECMA III.3.19: call)\r\n\r\nIn other words, when using `call` to call a non-final, virtual method, the value given as the instance of the method to be called, has to be either a boxed value type, or the this pointer of the calling method, which may not be modified in any other way during the current method.\r\nI implemented this rule in a similar manner as it was implemented in PEVerify, however my implementation reports an error for the following code (hence the WIP title):\r\n\r\nC#:\r\n```\r\nvoid Method()\r\n{\r\n    int i = 0;\r\n    i.ToString();\r\n}\r\n```\r\n\r\nrelevant IL:\r\n```\r\nldc.i4.0\r\nstloc.0\r\nldloca.s  0\r\ncall      instance string [System.Runtime]System.Int32::ToString()\r\n```\r\n\r\nHere the method `ToString` is called on the value type `Int32` by passing a managed pointer to an `Int32` as the this pointer. This code does not report an error when verified using PEVerify, even though my implementation should perform the same checks.  If I correctly understand the above rule, this should also report a verification error, since the `call` instruction is used to call a non-final, virtual method (`ToString`), but the value passed as the this pointer is not the calling method's this pointer (`ref int32`).\r\nSince this IL-code is generated by the C# compiler, I assume that I am simply missing something here. Do you have any input on this?"},{"Id":"6730623748","Type":"PullRequestEvent","CreatedAt":"2017-10-18T02:13:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4751","RelatedDescription":"Merged pull request \"Update buildtools version\" (#4751) at dotnet/corert","RelatedBody":""},{"Id":"6730546609","Type":"PullRequestEvent","CreatedAt":"2017-10-18T01:41:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4737","RelatedDescription":"Merged pull request \"Add support for marshalling struct with delegates \" (#4737) at dotnet/corert","RelatedBody":"Fixes https://github.com/dotnet/corert/issues/4732#issuecomment-336929242"},{"Id":"6730546599","Type":"IssuesEvent","CreatedAt":"2017-10-18T01:41:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4732","RelatedDescription":"Closed issue \"[RyuJIT/ARM32] marshalling stubs for delegate\" (#4732) at dotnet/corert","RelatedBody":"I try to run under Tizen some complex sample. I get bt:\r\n```\r\n#9  0x0019494a in S_P_CoreLib_Interop_mincore__PInvoke_RaiseFailFastException () at CoreRT/src/System.Private.CoreLib/src/System/Text/StringBuilderCache.cs:83\r\n#10 0x0018933c in S_P_CoreLib_Interop_mincore__RaiseFailFastException () at CoreRT/src/System.Private.CoreLib/src/Interop/Interop.manual.cs:119\r\n#11 0x001868bc in S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast_1 () at CoreRT/src/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs:235\r\n#12 0x00186b72 in S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast () at CoreRT/src/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs:133\r\n#13 0x00186bce in S_P_CoreLib_System_Environment__FailFast () at CoreRT/src/System.Private.CoreLib/src/System/Environment.cs:59\r\n#14 0x00220fe4 in S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal__AllocateThunk ()\r\n    at CoreRT/src/System.Private.CoreLib/src/System/Runtime/InteropServices/PInvokeMarshal.cs:315\r\n#15 0x00201e82 in S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2_CreateValueCallback<System___Canon__System___Canon>__InvokeOpenStaticThunk ()\r\n    at CoreRT/src/Common/src/System/Collections/Generic/LowLevelDictionary.cs:210\r\n#16 0x001c4e50 in S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2<System___Canon__System___Canon>__GetValueLocked ()\r\n    at CoreRT/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs:200\r\n#17 0x001b3420 in S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2<System___Canon__System___Canon>__GetValue ()\r\n    at CoreRT/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs:193\r\n#18 0x001e4d64 in S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal__GetStubForPInvokeDelegate ()\r\n    at CoreRT/src/System.Private.CoreLib/src/System/Runtime/InteropServices/PInvokeMarshal.cs:203\r\n#19 0x001dbd22 in S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetStubForPInvokeDelegate ()\r\n    at CoreRT/src/System.Private.CoreLib/src/Internal/Runtime/CompilerHelpers/InteropHelpers.cs:347\r\n#20 0x001db6da in Internal_CompilerGenerated__Module___<ManagedToNative>Tizen_Applications_UI_Interop_Application_UIAppLifecycleCallbacks ()\r\n    at CoreRT/src/System.Private.CoreLib/shared/System/IO/Path.Unix.cs:15\r\n#21 0x001b5466 in Tizen_Applications_UI_Interop_Application__Main () at CoreRT/src/System.Private.CoreLib/src/System/String.Manipulation.cs:50\r\n#22 0x001b21c2 in Tizen_Applications_UI_Tizen_Applications_CoreBackend_UICoreBackend__Run () at CoreRT/src/System.Private.CoreLib/src/System/GC.cs:110\r\n#23 0x00197a38 in Tizen_Applications_Common_Tizen_Applications_CoreApplication__Run () at CoreRT/src/System.Private.CoreLib/src/System/Array.cs:149\r\n#24 0x001976f2 in Tizen_Applications_UI_Tizen_Applications_CoreUIApplication__Run () at CoreRT/src/System.Private.CoreLib/src/System/Array.cs:149\r\n#25 0x001881ea in ElmSharpTemplate1_ElmSharpTemplate1_App__Main () at CoreRT/src/System.Private.CoreLib/src/Internal/Runtime/Augments/EnvironmentAugments.cs:127\r\n#26 0x00186f54 in ElmSharpTemplate1__Module___MainMethodWrapper () at <stdin>:16707566\r\n#27 0x0017e7f2 in ElmSharpTemplate1__Module___StartupCodeMain () at <stdin>:16707566\r\n#28 0x00021a1c in main (argc=1, argv=0xbefffe14) at CoreRT/src/Native/Bootstrap/main.cpp:332\r\n```\r\nwith error message: \"Couldn't find marshalling stubs for delegate\". What does it mean?"},{"Id":"6730524629","Type":"PullRequestEvent","CreatedAt":"2017-10-18T01:31:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4751","RelatedDescription":"Opened pull request \"Update buildtools version\" (#4751) at dotnet/corert","RelatedBody":""},{"Id":"6730398572","Type":"PullRequestEvent","CreatedAt":"2017-10-18T00:39:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4747","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4747) at dotnet/corert","RelatedBody":""},{"Id":"6730114229","Type":"PullRequestEvent","CreatedAt":"2017-10-17T22:55:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4750","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4750) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6730073159","Type":"PullRequestEvent","CreatedAt":"2017-10-17T22:42:29","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4750","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4750) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6730023779","Type":"PullRequestEvent","CreatedAt":"2017-10-17T22:27:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4748","RelatedDescription":"Merged pull request \"Fix build break with latest VS preview\" (#4748) at dotnet/corert","RelatedBody":"On latest VS preview, the build fails with errors like:\r\n\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1589,5): error : Project 'D:\\corert\\src\\Framework\\Framework-uapaot.depproj' targets 'uap10.1'. It cannot be referenced by a project that targets '.NETCoreApp,Version=v2.1'. [D:\\corert\\src\\Framework\\Framework.depproj]`"},{"Id":"6729950148","Type":"PullRequestEvent","CreatedAt":"2017-10-17T22:06:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4749","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4749) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6729942144","Type":"PullRequestEvent","CreatedAt":"2017-10-17T22:04:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4749","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4749) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6729733526","Type":"PullRequestEvent","CreatedAt":"2017-10-17T21:14:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4748","RelatedDescription":"Opened pull request \"Fix build break with latest VS preview\" (#4748) at dotnet/corert","RelatedBody":""},{"Id":"6729673562","Type":"PullRequestEvent","CreatedAt":"2017-10-17T21:00:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4747","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4747) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":160,"FavoriteCount":141,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":9,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":27,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":120,"FavoriteCount":69,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2017-10-18T05:30:29.4703906Z","RunDurationInMilliseconds":16563}