{"Data":{"GitHub":{"Issues":[{"Id":"392884159","IsPullRequest":true,"CreatedAt":"2018-12-20T04:29:50","Actor":"ganik","Number":"1940","RawContent":null,"Title":"Fix CategoricalHashTransform to handle OutputKind \"Key\"","State":"open","Body":"fixes #1939 ","Url":"https://github.com/dotnet/machinelearning/pull/1940","RelatedDescription":"Open PR \"Fix CategoricalHashTransform to handle OutputKind \"Key\"\" (#1940)"},{"Id":"392882569","IsPullRequest":false,"CreatedAt":"2018-12-20T04:22:28","Actor":"ganik","Number":"1939","RawContent":null,"Title":"CategoricalHashTransform breaks on OutputKind \"Key\"","State":"open","Body":"Found in ML.NET 0.7, ML.NET 0.8\r\nThis breaks NimbusML\r\n\r\nRepro:\r\n* Copy graph and data into C;/Test\r\n* Run:\r\n            var args = new ExecuteGraphCommand.Arguments() { GraphPath = \"C:/test/graph.json\" };\r\n            var cmd = new ExecuteGraphCommand(Env, args);\r\n            cmd.Run();\r\nWill get you exception:\r\n\r\nSystem.ArgumentNullException : Value cannot be null.\r\n       Parameter name: estimator\r\n       Stack Trace:\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs(581,0): at Microsoft.ML.Runtime.Contracts.CheckValue[T](T val, String paramName)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\EstimatorExtensions.cs(54,0): at Microsoft.ML.LearningPipelineExtensions.Append[TTrans](IEstimator`1 start, IEstimator`1 estimator, TransformerScope scope)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(183,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncoding..ctor(HashingEstimator hash, IEstimator`1 keyToVector, IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(319,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator.Fit(IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotHashEncoding.cs(176,0): at Microsoft.ML.Transforms.Categorical.OneHotHashEncoding.Create(IHostEnvironment env, Arguments args, IDataView input)\r\nC:\\sources\\machinelearning\\src\\Microsoft.ML.Transforms\\OneHotEncoding.cs(311,0): at Microsoft.ML.Transforms.Categorical.Categorical.CatTransformHash(IHostEnvironment env, Arguments input)\r\n\r\nThe problem is with:\r\n\r\ninternal OneHotHashEncoding(HashingEstimator hash, IEstimator<ITransformer> keyToVector, IDataView input)\r\n        {\r\n            var chain = hash.Append(keyToVector);\r\n            _transformer = chain.Fit(input);\r\n        }\r\n\r\nThe keyToVector is null in case OutputKind is Key.\r\n\r\n\r\n\r\n[dbg.zip](https://github.com/dotnet/machinelearning/files/2697399/dbg.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1939","RelatedDescription":"Open issue \"CategoricalHashTransform breaks on OutputKind \"Key\"\" (#1939)"},{"Id":"392880668","IsPullRequest":true,"CreatedAt":"2018-12-20T04:10:31","Actor":"TomFinley","Number":"1938","RawContent":null,"Title":"Remove IRowCursorConsolidator.","State":"open","Body":"Fixes #1867.","Url":"https://github.com/dotnet/machinelearning/pull/1938","RelatedDescription":"Open PR \"Remove IRowCursorConsolidator.\" (#1938)"},{"Id":"392870513","IsPullRequest":true,"CreatedAt":"2018-12-20T03:22:43","Actor":"codemzs","Number":"1937","RawContent":null,"Title":"Remove \"Runtime\" from all namespace reference and move public facing classes used in Samples into Microsoft.ML namespace.","State":"open","Body":"fixes #1697","Url":"https://github.com/dotnet/machinelearning/pull/1937","RelatedDescription":"Open PR \"Remove \"Runtime\" from all namespace reference and move public facing classes used in Samples into Microsoft.ML namespace.\" (#1937)"},{"Id":"392860786","IsPullRequest":true,"CreatedAt":"2018-12-20T02:29:59","Actor":"sheng-jie","Number":"1936","RawContent":null,"Title":"Update the demo code because of the `mlContext.Data.CreateTextReader` method is no longer exists in the latest version v0.8.","State":"open","Body":"Fixes #1935.\r\n\r\nThere is no `mlContext.Data.CreateTextReader` method in the latest version of ML.NET v0.8.\r\nI Updated  `mlContext.Data.CreateTextReader`  to `TextLoader.CreateReader` so that can give a correct \r\nguidance for the readers.\r\n\r\nPlease check.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1936","RelatedDescription":"Open PR \"Update the demo code because of the `mlContext.Data.CreateTextReader` method is no longer exists in the latest version v0.8.\" (#1936)"},{"Id":"392859677","IsPullRequest":false,"CreatedAt":"2018-12-20T02:23:35","Actor":"sheng-jie","Number":"1935","RawContent":null,"Title":"The demo code in ML.NET cookbook is incorrectly in the latest version v0.8.","State":"open","Body":"### System information\r\n\r\n- **WIN 10**:\r\n- **.NET Core V2.2**: \r\n\r\n### Issue\r\n\r\n- The demo code in ML.NET cookbook is incorrectly  in the latest version v0.8.\r\n\r\n### Source code / logs\r\n```\r\n// Create the reader: define the data columns and where to find them in the text file.\r\nvar reader = mlContext.Data.CreateTextReader(ctx => (\r\n        // A boolean column depicting the 'target label'.\r\n        IsOver50K: ctx.LoadBool(0),\r\n        // Three text columns.\r\n        Workclass: ctx.LoadText(1),\r\n        Education: ctx.LoadText(2),\r\n        MaritalStatus: ctx.LoadText(3)),\r\n    hasHeader: true);\r\n```\r\nThe `mlContext.Data.CreateTextReader` method is no longer exists in the latest version. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1935","RelatedDescription":"Open issue \"The demo code in ML.NET cookbook is incorrectly in the latest version v0.8.\" (#1935)"},{"Id":"392855208","IsPullRequest":true,"CreatedAt":"2018-12-20T01:59:33","Actor":"wschin","Number":"1934","RawContent":null,"Title":"Loads LightGBM inf/nan properly","State":"open","Body":"Follow a suggestion mentioned in #1424 to load inf/nan from trained LightGBM model.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1934","RelatedDescription":"Open PR \"Loads LightGBM inf/nan properly\" (#1934)"},{"Id":"392839215","IsPullRequest":false,"CreatedAt":"2018-12-20T00:46:11","Actor":"danmosemsft","Number":"1933","RawContent":null,"Title":"Enable running tests against .NET Framework","State":"open","Body":"Right now the tests are only built and run against `netcoreapp2.1`. We want to be able to run our unit tests on .NET Framework as well, as we will support that when we release 1.0\r\n\r\n1. The build part is because of [here](https://github.com/dotnet/machinelearning/blob/master/test/Directory.Build.props#L5-L8). The tests either need to be built against `netstandard2.0` or multitargeted. Building against `netstandard2.0` (modifying the line above) fails because the tests depend on the package `xunit.runner.visualstudio 2.4.0` which it happens does not have support for `netstandard2.0`. So probably this line needs to be changed to something like `<DefaultTestTargetFramework>net461,netstandard2.0</DefaultTestTargetFramework>` (comma separated) so that it produces assets for both. Not sure which version of .NET Framework to use here. Whichever it is, the developer will need reference assemblies installed so perhaps we can pick whatever the default is for those.\r\n\r\n2. The running part I did not investigate. Maybe the above is sufficient and it's just another flag to pass to run against .NET Framework.","Url":"https://github.com/dotnet/machinelearning/issues/1933","RelatedDescription":"Open issue \"Enable running tests against .NET Framework\" (#1933)"},{"Id":"392813362","IsPullRequest":true,"CreatedAt":"2018-12-19T23:59:23","Actor":"abgoswam","Number":"1932","RawContent":null,"Title":"Fix TargetFramework for *.StaticPipe assemblies","State":"closed","Body":"Fixes #1931 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1932","RelatedDescription":"Closed or merged PR \"Fix TargetFramework for *.StaticPipe assemblies\" (#1932)"},{"Id":"392806397","IsPullRequest":false,"CreatedAt":"2018-12-19T23:59:23","Actor":"danmosemsft","Number":"1931","RawContent":null,"Title":"Some projects limited to .NET Core unnecessarily?","State":"closed","Body":"As far as I know, all our projects should declare `<TargetFramework>netstandard2.0</TargetFramework>` unless they are \r\n1. exe's - these have to pick a runtime, probably `<TargetFramework>netcoreapp2.1</TargetFramework>`\r\n2. use 3.0-only features, these have `<TargetFramework>netcoreapp3.0</TargetFramework>`\r\n\r\nAre the following projects using code that will not run on .NET Framework? If not, they should target `<TargetFramework>netstandard2.0</TargetFramework>`. \r\n\r\n```xml\r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.HalLearners.StaticPipe\\Microsoft.ML.HalLearners.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.LightGBM.StaticPipe\\Microsoft.ML.LightGBM.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform.StaticPipe\\Microsoft.ML.OnnxTransform.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.StaticPipe\\Microsoft.ML.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n\r\nc:\\git\\machinelearning\\src\\Microsoft.ML.TensorFlow.StaticPipe\\Microsoft.ML.TensorFlow.StaticPipe.csproj:\r\n    2  \r\n    3    <PropertyGroup>\r\n    4:     <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    5    </PropertyGroup>\r\n    6  \r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1931","RelatedDescription":"Closed issue \"Some projects limited to .NET Core unnecessarily?\" (#1931)"},{"Id":"392782682","IsPullRequest":true,"CreatedAt":"2018-12-19T21:23:17","Actor":"abgoswam","Number":"1930","RawContent":null,"Title":"WIP : Place static extensions for TextLoader in Microsoft.ML.StaticPipe assembly","State":"open","Body":"Towards #1695 \r\n\r\n- attempt to separate out the static extensions for TextLoader\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1930","RelatedDescription":"Open PR \"WIP : Place static extensions for TextLoader in Microsoft.ML.StaticPipe assembly\" (#1930)"},{"Id":"392348787","IsPullRequest":true,"CreatedAt":"2018-12-19T19:42:52","Actor":"abgoswam","Number":"1914","RawContent":null,"Title":"Separate assemblies for static extensions","State":"closed","Body":"Fixes #1695 \r\n\r\n- Created separate assemblies to host the Static API extensions. Moved the Static API extensions to the appropriate assembly.\r\n- Requires adding [BestFriend] attribute in several places\r\n    \r\n1. Microsoft.ML.StaticPipe\r\n2. Microsoft.ML.LightGBM.StaticPipe\r\n3. Microsoft.ML.TensorFlow.StaticPipe\r\n4. Microsoft.ML.OnnxTransform.StaticPipe\r\n5. Microsoft.ML.HalLearners.StaticPipe\r\n\r\nNOTE: These assemblies are named  corresponding to nuget packages (with the Microsoft.ML prefix)  ","Url":"https://github.com/dotnet/machinelearning/pull/1914","RelatedDescription":"Closed or merged PR \"Separate assemblies for static extensions\" (#1914)"},{"Id":"392747119","IsPullRequest":true,"CreatedAt":"2018-12-19T19:33:27","Actor":"shmoradims","Number":"1929","RawContent":null,"Title":"Implement ICanSaveInIniFormat interface for GamPredictor","State":"open","Body":"Add support for saving GAM models as ini format. Parity results with maml are included in the tests.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1929","RelatedDescription":"Open PR \"Implement ICanSaveInIniFormat interface for GamPredictor\" (#1929)"},{"Id":"392735720","IsPullRequest":true,"CreatedAt":"2018-12-19T18:59:10","Actor":"yaeldekel","Number":"1928","RawContent":null,"Title":"BinaryLoader cursor doesn't set state to \"Done\"","State":"open","Body":"Fixes #1927 .","Url":"https://github.com/dotnet/machinelearning/pull/1928","RelatedDescription":"Open PR \"BinaryLoader cursor doesn't set state to \"Done\"\" (#1928)"},{"Id":"392735405","IsPullRequest":false,"CreatedAt":"2018-12-19T18:58:15","Actor":"yaeldekel","Number":"1927","RawContent":null,"Title":"The BinaryLoader cursor doesn't always set its state to \"Done\" when it's done","State":"open","Body":"If instead of the usual while loop:\r\n\r\nwhile (cursor.MoveNext())\r\n{\r\n// do stuff\r\n}\r\n\r\nwe have this loop:\r\n\r\nwhile (cursor.State != CursorState.Done)\r\n{\r\n// do stuff\r\ncursor.MoveNext();\r\n}\r\n\r\nwe get an exception. This happens in the PerGroupTransformBase class, that uses an auxiliary cursor that moves ahead to check where the current group ends.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1927","RelatedDescription":"Open issue \"The BinaryLoader cursor doesn't always set its state to \"Done\" when it's done\" (#1927)"},{"Id":"392395822","IsPullRequest":true,"CreatedAt":"2018-12-19T17:55:13","Actor":"Zruty0","Number":"1920","RawContent":null,"Title":"PredictionFunction becomes PredictionEngine","State":"closed","Body":"Fixes #1761 \r\nFixes #1819 \r\n\r\nRenamed MakePredictionFunction to CreatePredictionEngine, and exposed the schema comprehension parameters to the factory method.\r\n\r\nAdded a method to `mlContext.Model` to create a prediction engine.","Url":"https://github.com/dotnet/machinelearning/pull/1920","RelatedDescription":"Closed or merged PR \"PredictionFunction becomes PredictionEngine\" (#1920)"},{"Id":"392671503","IsPullRequest":true,"CreatedAt":"2018-12-19T17:27:26","Actor":"TomFinley","Number":"1926","RawContent":null,"Title":"Update PFI tests so they configure sensitive learners to use a single thread.","State":"closed","Body":"Fixes #1925 .\r\n\r\nWhile I was at it I also set the number of threads to logistic regression to 1 as a better practice, since even though it's less likely to trigger a failure here, better safe than sorry. As mentioned in the issue since FastTree's results don't depend on number of threads I did not set it there.\r\n\r\nAlso incidentally started using `Assert.Equals(a, b)` instead of `Assert.True(b == a)`, so as to provide slightly more helpful error messages for when test failures happen, but that should not affect the running of the test.\r\n\r\nAs with most spurious test failures, due to the indeterminacy of the effects I am not actually 100% sure this will solve the issue, but it was just one obvious mistake I saw when reviewing the test code, so I figured this might help improve the spurious failures on account of this issue.","Url":"https://github.com/dotnet/machinelearning/pull/1926","RelatedDescription":"Closed or merged PR \"Update PFI tests so they configure sensitive learners to use a single thread.\" (#1926)"},{"Id":"392669835","IsPullRequest":false,"CreatedAt":"2018-12-19T17:27:26","Actor":"TomFinley","Number":"1925","RawContent":null,"Title":"Spurious Failures on TestPfiClusteringOnDenseFeatures test","State":"closed","Body":"TestPfiClusteringOnDenseFeatures has, I believe introduced a week ago in PR #1832, has been responsible for some seemingly spurious test failures that are blocking builds. See, e.g., this build here from @Zruty0 for his PR #1920 , where PFI (which is totally unrelated to @Zruty0 's change) is blocking checking it in.\r\n\r\nMy best guess as to why this is happening is that for this clustering test the number of threads was not set to 1. (That obviously will cause issues, but whether it's the only issue is more than I know right now.) Sometimes you can *kinda* get away with that (e.g., sometimes results from logistic regression can resemble each other in different configuration settings since it is solving a convex problem), but this is not true of clustering. For that reason, the test `TestPfiClusteringOnDenseFeatures` has been responsible for multiple spurious test failures since its introduction last week.\r\n\r\nWe will have a PR to set the threads to 1, at least as a first try to get the situation somewhat under control. Note that this will  not be necessary in FastTree since it is engineered in such a way that it gets the same result no matter how many or few threads are used.\r\n\r\n/cc @rogancarr @shmoradims @artidoro ","Url":"https://github.com/dotnet/machinelearning/issues/1925","RelatedDescription":"Closed issue \"Spurious Failures on TestPfiClusteringOnDenseFeatures test\" (#1925)"},{"Id":"392353868","IsPullRequest":true,"CreatedAt":"2018-12-19T15:08:42","Actor":"Zruty0","Number":"1917","RawContent":null,"Title":"ISchema is now internal","State":"closed","Body":"Addresses #1500\r\n\r\nColumnBindingsBase and ISchema are now internal. \r\nSchema and ColumnBindingsBase no longer implement ISchema.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1917","RelatedDescription":"Closed or merged PR \"ISchema is now internal\" (#1917)"},{"Id":"392370919","IsPullRequest":true,"CreatedAt":"2018-12-19T15:07:16","Actor":"Ivanidzo4ka","Number":"1918","RawContent":null,"Title":"Load old models with normalizer.","State":"closed","Body":"- [x] Add issue. Fixes https://github.com/dotnet/machinelearning/issues/1919\r\n- [x] Add test.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1918","RelatedDescription":"Closed or merged PR \"Load old models with normalizer.\" (#1918)"},{"Id":"392463692","IsPullRequest":true,"CreatedAt":"2018-12-19T06:50:50","Actor":"TomFinley","Number":"1924","RawContent":null,"Title":"Replace ColumnInfo usage with Schema.Column, remove ColumnInfo","State":"open","Body":"Fixes #1923. As usual commits are structured in such a way as to make the code approachable. Since the first usage was against `RoleMappedSchema` and that was used in many, *many* places, I'm sorry to say that is probably the biggest change.","Url":"https://github.com/dotnet/machinelearning/pull/1924","RelatedDescription":"Open PR \"Replace ColumnInfo usage with Schema.Column, remove ColumnInfo\" (#1924)"},{"Id":"392462853","IsPullRequest":false,"CreatedAt":"2018-12-19T06:46:44","Actor":"TomFinley","Number":"1923","RawContent":null,"Title":"ColumnInfo associated with RoleMappedSchema should be replaced with Schema.Column","State":"open","Body":"We have a fun class called `RoleMappedSchema`. It operates over a class called `ColumnInfo` that looks like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/98163f9c481ceda7887c9ba6abdf74608aa4a3b9/src/Microsoft.ML.Core/Data/RoleMappedSchema.cs#L18-L22\r\n\r\nThis structure is quite useful -- oftentimes we want to have names and types and indices of columns, all bundled together. We used this hundreds of places. In fact it was so useful we decided to build something `Schema.Column` that looked a little something like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/98163f9c481ceda7887c9ba6abdf74608aa4a3b9/src/Microsoft.ML.Core/Data/Schema.cs#L86-L106\r\n\r\nClearly this new more fundamental structure and the older legacy structure have some things in common. In fact, the newer structure is what we are going with for our public API, so we should probably remove that older legacy structure.\r\n\r\nWe will shift usage of `ColumnInfo` to use `Schema.Column` instead (nullables where appropriate, where things can be null), and then remove `ColumnInfo`.","Url":"https://github.com/dotnet/machinelearning/issues/1923","RelatedDescription":"Open issue \"ColumnInfo associated with RoleMappedSchema should be replaced with Schema.Column\" (#1923)"},{"Id":"392435842","IsPullRequest":true,"CreatedAt":"2018-12-19T04:25:21","Actor":"jignparm","Number":"1922","RawContent":null,"Title":"Onnxtransform - api changes for GPU support","State":"open","Body":"Fixes #1834 \r\n\r\nAdd CUDA 10.0 GPU execution support\r\n\r\nAdd Linux support\r\n\r\nAdd Mac support\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1922","RelatedDescription":"Open PR \"Onnxtransform - api changes for GPU support\" (#1922)"},{"Id":"392421899","IsPullRequest":false,"CreatedAt":"2018-12-19T03:05:06","Actor":"mzhukovs","Number":"1921","RawContent":null,"Title":"Plans for EDA/Data Viz?","State":"open","Body":"Python ML/plotting libraries provide great ways to support Exploratory Data Analysis (EDA) with some awesome charting capabilities - any plans in this area for ML.NET?","Url":"https://github.com/dotnet/machinelearning/issues/1921","RelatedDescription":"Open issue \"Plans for EDA/Data Viz?\" (#1921)"},{"Id":"392387962","IsPullRequest":false,"CreatedAt":"2018-12-19T00:08:03","Actor":"Ivanidzo4ka","Number":"1919","RawContent":null,"Title":"We don't have backward compatibility with old models if they include normalize transform","State":"open","Body":"Try load old model with normalize transform. You get exception what it can't be loaded.\r\nWe broke this functionality during conversion to IEstimator.","Url":"https://github.com/dotnet/machinelearning/issues/1919","RelatedDescription":"Open issue \"We don't have backward compatibility with old models if they include normalize transform\" (#1919)"},{"Id":"392349570","IsPullRequest":false,"CreatedAt":"2018-12-18T21:47:35","Actor":"rogancarr","Number":"1916","RawContent":null,"Title":"Add support for signing models","State":"open","Body":"When a model is passed to a third party, it would be nice to have a guarantee for where the model originated, and that its parameters have not been modified. I propose adding a method for signing a model in such a way that the original developer can be identified an the contents can be shown to be unchanged.\r\n\r\nRelated to #511 ","Url":"https://github.com/dotnet/machinelearning/issues/1916","RelatedDescription":"Open issue \"Add support for signing models\" (#1916)"},{"Id":"392348895","IsPullRequest":false,"CreatedAt":"2018-12-18T21:45:32","Actor":"rogancarr","Number":"1915","RawContent":null,"Title":"Support adding metadata to models","State":"open","Body":"When a model is passed to a third party, information about the model, like the evaluation metrics, must be passed separately. It would be nice to have a supported way to encode metadata into models such that they can be visualized in an IDE and programatically extracted.\r\n\r\nRelated to #511 \r\nRelated to #1908 \r\nRelated to #1912 ","Url":"https://github.com/dotnet/machinelearning/issues/1915","RelatedDescription":"Open issue \"Support adding metadata to models\" (#1915)"},{"Id":"392345332","IsPullRequest":false,"CreatedAt":"2018-12-18T21:34:46","Actor":"rogancarr","Number":"1913","RawContent":null,"Title":"Add tooling to measure bias metrics over datasets","State":"open","Body":"Bias and fairness in predictions are big concerns with deploying ML models, and bias can work its way into ML models through the datasets they are trained on**. It would be helpful for modelers to have tools to assist in calculating standard metrics for bias over training data.\r\n\r\n** Bias in the training data doesn't always translate evenly to the bias and fairness of the model's predictions, so we need separate evaluation metrics of bias and fairness for the model predictions (captured in #1911).\r\n\r\nRelated to #511 \r\nRelated to #1911 \r\nRelated to #1912 ","Url":"https://github.com/dotnet/machinelearning/issues/1913","RelatedDescription":"Open issue \"Add tooling to measure bias metrics over datasets\" (#1913)"},{"Id":"392337848","IsPullRequest":false,"CreatedAt":"2018-12-18T21:12:49","Actor":"rogancarr","Number":"1912","RawContent":null,"Title":"Add metadata of bias and fairness metrics to models","State":"open","Body":"Currently, we can use ML.NET to evaluate the performance of a model. However, when the model is passed to a third party, any metrics must be passed separately.\r\n\r\nIf you consider the bias and fairness metrics** to be properties of the model, then it makes sense to include them in the model. I expect this to be helpful in deployment, productionization, debugging, etc. Plus it would be nice to have properties of the model visible in an IDE and accessible programatically.\r\n\r\nRelated to #511\r\nRelated to #1911 \r\nRelated to #1908\r\n\r\n** e.g. over a dataset representative of the expected distribution of data to be seen by the model","Url":"https://github.com/dotnet/machinelearning/issues/1912","RelatedDescription":"Open issue \"Add metadata of bias and fairness metrics to models\" (#1912)"},{"Id":"392337059","IsPullRequest":false,"CreatedAt":"2018-12-18T21:10:33","Actor":"rogancarr","Number":"1911","RawContent":null,"Title":"Add an evaluator for Bias and Fairness metrics","State":"open","Body":"We currently have model evaluators that produce metrics on the predicted label. For practical use of machine learning, it is necessary to have a sense for any biases the model may propagate and any fairness issues the mode has. In this way, it would be great to have a standard evaluators for bias and fairness metrics.\r\n\r\nRelated to #511 ","Url":"https://github.com/dotnet/machinelearning/issues/1911","RelatedDescription":"Open issue \"Add an evaluator for Bias and Fairness metrics\" (#1911)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-20T05:30:53.2971954Z","RunDurationInMilliseconds":1349}