{"Data":{"GitHub":{"Issues":[{"Id":"547160567","IsPullRequest":true,"CreatedAt":"2020-01-09T01:57:05","Actor":"hughbe","Number":"2665","RawContent":null,"Title":"Cleanup CB_ constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup CB_ constants\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2665)","Url":"https://github.com/dotnet/winforms/pull/2665","RelatedDescription":"Closed or merged PR \"Cleanup CB_ constants\" (#2665)"},{"Id":"547099127","IsPullRequest":true,"CreatedAt":"2020-01-08T21:00:17","Actor":"hughbe","Number":"2664","RawContent":null,"Title":"Cleanup LVM messages","State":"open","Body":"## Proposed Changes\r\n- Cleanup LVM_ messages\r\n\r\nSupersedes https://github.com/dotnet/winforms/pull/2077\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2664)","Url":"https://github.com/dotnet/winforms/pull/2664","RelatedDescription":"Open PR \"Cleanup LVM messages\" (#2664)"},{"Id":"546862610","IsPullRequest":true,"CreatedAt":"2020-01-08T13:47:16","Actor":"dotnet-maestro[bot]","Number":"2663","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200107.6\r\n- **Date Produced**: 1/8/2020 6:38 AM\r\n- **Commit**: c07be36e3ce00b06e99d02669fd658a813cdce11\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20057.6\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20057.6 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2663)","Url":"https://github.com/dotnet/winforms/pull/2663","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#2663)"},{"Id":"546667863","IsPullRequest":false,"CreatedAt":"2020-01-08T06:20:32","Actor":"RussKie","Number":"2662","RawContent":null,"Title":"`MonthCalendar` incomplete hightlight of today date","State":"open","Body":"* .NET Core Version: master\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\nThe \"Today\" date at the bottom of the calendar is a link, which highlights when hovered.\r\nHowever the highlight is only partial:\r\n![image](https://user-images.githubusercontent.com/4403806/71954823-a242cc00-323a-11ea-8762-0f1bd2c11ed4.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe whole today date is highlighted.\r\n\r\n**Minimal repro:**\r\n\r\nAdd a `MonthCalendar` control to a form. Run. Hover the \"Today\".","Url":"https://github.com/dotnet/winforms/issues/2662","RelatedDescription":"Open issue \"`MonthCalendar` incomplete hightlight of today date\" (#2662)"},{"Id":"545988359","IsPullRequest":true,"CreatedAt":"2020-01-08T04:36:02","Actor":"hughbe","Number":"2648","RawContent":null,"Title":"Cleanup NMHEADERW interop","State":"closed","Body":"## Proposed Changes\r\n- Cleanup NMHEADERW interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2648)","Url":"https://github.com/dotnet/winforms/pull/2648","RelatedDescription":"Closed or merged PR \"Cleanup NMHEADERW interop\" (#2648)"},{"Id":"546610243","IsPullRequest":true,"CreatedAt":"2020-01-08T04:29:46","Actor":"areller","Number":"2661","RawContent":null,"Title":"fix casing in csproj","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nSee https://github.com/dotnet/winforms/issues/2636 for context\r\n\r\n## Proposed changes\r\n\r\n- Fix all resource files referenced in `System.Windows.Forms` to have the same casing as they have in the file system.\r\n\r\n## Customer Impact\r\n\r\n- `System.Windows.Forms` will compile on file systems with sensitive casing (e.g. ext4)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- `dotnet build` passes before and after\r\n- `dotnet test` yields same results before and after\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2661)","Url":"https://github.com/dotnet/winforms/pull/2661","RelatedDescription":"Closed or merged PR \"fix casing in csproj\" (#2661)"},{"Id":"546383783","IsPullRequest":false,"CreatedAt":"2020-01-07T16:34:40","Actor":"scalablecory","Number":"2660","RawContent":null,"Title":"SendKeys.SendWait() sends wrong characters for some particular characters","State":"open","Body":"_From @Naimad1CZ on Wednesday, December 18, 2019 10:55:26 PM_\r\n\r\nUsing:\r\nWindows 10\r\n.NET Core 3.1\r\nLibrary System.Windows.Forms\r\nFunction SendKeys.SendWait()\r\n\r\nReproduce steps:\r\n1. create a new project with those 2 lines in Main:\r\n```\r\nThread.Sleep(5000);\r\nSendKeys.SendWait(\"ĚŠČŘŽÝÁÍÉÚŮĎŤ\");\r\n```\r\n2. Switch to Czech QWERTZ keyboard on Windows (on standard English keyboard you get the expected result)\r\n3. Run the project and (during the first 5 second since the start) open some notepad or something like this\r\n4. observe `ěščřžýáíéúůĎŤ` being written\r\n\r\nExpected result:\r\nobserve `ĚŠČŘŽÝÁÍÉÚŮĎŤ` being written\r\n\r\nNote + possible cause of problem:\r\nOn Czech Keyboard, all of letters `ĚŠČŘŽÝÁÍÉÚŮ` could be written by pressing a single button on keyboard in case that `CapsLock` is turned on, but `ĎŤ` couln't (`Ď` has to be written by pressing `ˇ` (actually `Shift` + key on the left of Backspace) and then `D` (`Shift` + `d`)), so maybe SendWait() gets info about keyboard keys, and if the characters that could be written on this keyboard using 1 key (+`Shift`/`CapsLock`), then it presses according keys, but in other case, it just presses maybe `Alt`+KeyCode or something. And in the first case, it forgets about pressing `CapsLock` when writing letters that are keyboard language-dependent.\r\n\r\n_Copied from original issue: dotnet/core#4016_","Url":"https://github.com/dotnet/winforms/issues/2660","RelatedDescription":"Open issue \"SendKeys.SendWait() sends wrong characters for some particular characters\" (#2660)"},{"Id":"546372212","IsPullRequest":true,"CreatedAt":"2020-01-07T16:14:29","Actor":"hughbe","Number":"2659","RawContent":null,"Title":"Cleanup MENUITEM structs","State":"open","Body":"## Proposed Changes\r\n- Cleanup MENUITEM structs\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2659)","Url":"https://github.com/dotnet/winforms/pull/2659","RelatedDescription":"Open PR \"Cleanup MENUITEM structs\" (#2659)"},{"Id":"546323182","IsPullRequest":true,"CreatedAt":"2020-01-07T14:44:58","Actor":"hughbe","Number":"2658","RawContent":null,"Title":"Cleanup CHOOSEFONT","State":"open","Body":"## Proposed Changes\r\n- Cleanup CHOOSEFONT\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2658)","Url":"https://github.com/dotnet/winforms/pull/2658","RelatedDescription":"Open PR \"Cleanup CHOOSEFONT\" (#2658)"},{"Id":"546282843","IsPullRequest":true,"CreatedAt":"2020-01-07T13:48:09","Actor":"dotnet-maestro[bot]","Number":"2657","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200106.3\r\n- **Date Produced**: 1/7/2020 1:55 AM\r\n- **Commit**: 5afe409d59460195955b85882df41df0218a18b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20056.3\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20056.3 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2657)","Url":"https://github.com/dotnet/winforms/pull/2657","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#2657)"},{"Id":"546246893","IsPullRequest":false,"CreatedAt":"2020-01-07T12:03:39","Actor":"hughbe","Number":"2656","RawContent":null,"Title":"Add support for tasks to ListViewGroup","State":"open","Body":"- You can set the `LVGF_TASK` flag on `mask` and set `pszTask` to a valid string and `cchTask` to the length of the string\r\n\r\n# Proposed API\r\n\r\nThis would add the following APIs to `ListView` and `ListViewGroup`. I modelled these after the `ColumnClick` event args/handler/method\r\n```cs\r\npublic delegate void GroupLinkClickEventHandler(object sender, GroupLinkClickEventArgs e);\r\npublic class GroupLinkClickEventArgs : EventArgs\r\n{\r\n    public GroupLinkClickEventArgs(int column) { }\r\n\r\n    public int GroupLink { get; }\r\n}\r\npublic class ListView\r\n{\r\n    ...\r\n    public event GroupLinkClickEventHandler GroupLinkClick { add; remove; }\r\n    protected void OnGroupLinkClick(GroupEventArgs e) { }\r\n    ...\r\n}\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Task { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n# Example\r\n```cs\r\nvar listView = new ListView();\r\nvar group = new ListViewGroup\r\n{\r\n    Task = \"Task\"\r\n};\r\nlistView.Groups.Add(group);\r\nlistView.GroupLinkClick += (sender, e) => MessageBox.Show(\"Link Clicked\");\r\n```\r\nE.g. \r\n![Screen Recording 2020-01-04 at 07 01 pm](https://user-images.githubusercontent.com/1275900/71770473-b332cb00-2f24-11ea-9834-5695ec8bd1c2.gif)","Url":"https://github.com/dotnet/winforms/issues/2656","RelatedDescription":"Open issue \"Add support for tasks to ListViewGroup\" (#2656)"},{"Id":"546244799","IsPullRequest":false,"CreatedAt":"2020-01-07T11:58:51","Actor":"hughbe","Number":"2655","RawContent":null,"Title":"Add support for subtitles in ListViewGroup","State":"open","Body":"- You can set the `LVGF_SUBTITLE` flag on `mask` and set `pszSubtitle` to a valid string and `cchSubtitle` to the length of the string\r\n\r\n## Proposed API\r\nThis would add the following API to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Subtitle { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n# Example\r\n```cs\r\nvar group = new ListViewGroup\r\n{\r\n     Subtitle = \"Subtitle\"\r\n};\r\n```\r\n\r\nE.g.\r\n![image](https://user-images.githubusercontent.com/1275900/71746055-d6497600-2e63-11ea-95ab-77cbcdc742cf.png)","Url":"https://github.com/dotnet/winforms/issues/2655","RelatedDescription":"Open issue \"Add support for subtitles in ListViewGroup\" (#2655)"},{"Id":"546233800","IsPullRequest":true,"CreatedAt":"2020-01-07T11:32:13","Actor":"hughbe","Number":"2654","RawContent":null,"Title":"Add ListViewGroup.Footer/FooterAlignment","State":"open","Body":"## Proposed Changes\r\n- Add ListViewGroup.Footer/FooterAlignment\r\n\r\nFixes #2653\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2654)","Url":"https://github.com/dotnet/winforms/pull/2654","RelatedDescription":"Open PR \"Add ListViewGroup.Footer/FooterAlignment\" (#2654)"},{"Id":"546215187","IsPullRequest":false,"CreatedAt":"2020-01-07T10:50:31","Actor":"hughbe","Number":"2653","RawContent":null,"Title":"Add support for footers to ListViewGroup","State":"open","Body":"- You can set the `LVGF_FOOTER` flag on `mask` and set `pszFooter` to a valid string and `cchFooter` to the length of the string\r\n- You can set the `LVGF_ALIGN` flag on `mask` and set the `uAlign` to a valid `LVGA_FOOTER_CENTER` value\r\n\r\n## Proposed API\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Footer { get; set; }\r\n    public HorizontalAlignment FooterAlignment { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n## Example\r\n\r\n```cs\r\nvar group = new ListViewGroup\r\n{\r\n     Footer = \"NewFooter\",\r\n     FooterAlignment = HorizontalAlign.Center\r\n};\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1275900/71745879-66d38680-2e63-11ea-82f7-5381a58bd045.png)","Url":"https://github.com/dotnet/winforms/issues/2653","RelatedDescription":"Open issue \"Add support for footers to ListViewGroup\" (#2653)"},{"Id":"545803654","IsPullRequest":true,"CreatedAt":"2020-01-07T04:28:47","Actor":"hughbe","Number":"2640","RawContent":null,"Title":"Cleanup TBM and TBS constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup TBM and TBS constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2640)","Url":"https://github.com/dotnet/winforms/pull/2640","RelatedDescription":"Closed or merged PR \"Cleanup TBM and TBS constants\" (#2640)"},{"Id":"545853675","IsPullRequest":false,"CreatedAt":"2020-01-07T03:31:36","Actor":"Logerfo","Number":"2643","RawContent":null,"Title":"Null reference types for the Windows Forms API surface","State":"closed","Body":"I think this isn't tracked yet. Any projections or concerns?","Url":"https://github.com/dotnet/winforms/issues/2643","RelatedDescription":"Closed issue \"Null reference types for the Windows Forms API surface\" (#2643)"},{"Id":"546046377","IsPullRequest":true,"CreatedAt":"2020-01-07T02:58:18","Actor":"RussKie","Number":"2652","RawContent":null,"Title":"Fix missing reference","State":"closed","Body":"Our downstream consumers are broken missing System.Windows.Forms.Primitives.dll, e.g. https://github.com/dotnet/wpf/pull/2399\r\n\r\nFollow up for #2518\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2652)","Url":"https://github.com/dotnet/winforms/pull/2652","RelatedDescription":"Closed or merged PR \"Fix missing reference\" (#2652)"},{"Id":"545991190","IsPullRequest":true,"CreatedAt":"2020-01-07T02:22:11","Actor":"hughbe","Number":"2649","RawContent":null,"Title":"Cleanup MOUSEHOOKSTRUCT","State":"closed","Body":"## Proposed Changes\r\n- Cleanup MOUSEHOOKSTRUCT\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2649)","Url":"https://github.com/dotnet/winforms/pull/2649","RelatedDescription":"Closed or merged PR \"Cleanup MOUSEHOOKSTRUCT\" (#2649)"},{"Id":"546001180","IsPullRequest":true,"CreatedAt":"2020-01-07T02:21:12","Actor":"AArnott","Number":"2651","RawContent":null,"Title":"Enable several whitespace StyleCop rules","State":"closed","Body":"Mostly the rules are around blank line placement. But I also enabled the 'no trailing whitespace' rule and 'use tabs properly' rules. All changes to code were the result of automated code fixes from the analyzers.\r\n\r\nAs previously agreed with @RussKie \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2651)","Url":"https://github.com/dotnet/winforms/pull/2651","RelatedDescription":"Closed or merged PR \"Enable several whitespace StyleCop rules\" (#2651)"},{"Id":"545995407","IsPullRequest":true,"CreatedAt":"2020-01-07T00:33:23","Actor":"AArnott","Number":"2650","RawContent":null,"Title":"Add MenuCommandService","State":"closed","Body":"## Proposed changes\r\n\r\n- Add `MenuCommandService` and a few dependency types that are already identified as missing yet required for .NET 5.\r\n\r\n## Test methodology \r\n\r\n- No tests have been ported (yet)\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2650)","Url":"https://github.com/dotnet/winforms/pull/2650","RelatedDescription":"Closed or merged PR \"Add MenuCommandService\" (#2650)"},{"Id":"545727048","IsPullRequest":true,"CreatedAt":"2020-01-06T23:27:40","Actor":"dotnet-maestro[bot]","Number":"2638","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200105.4\r\n- **Date Produced**: 1/6/2020 6:59 AM\r\n- **Commit**: 5b968685ce89f9dddf49e9aa3aa0608820a585aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20055.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2638)","Url":"https://github.com/dotnet/winforms/pull/2638","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#2638)"},{"Id":"545981104","IsPullRequest":true,"CreatedAt":"2020-01-06T23:26:25","Actor":"dagood","Number":"2647","RawContent":null,"Title":"[master] [patched] Update dependencies from dotnet/runtime","State":"closed","Body":"https://github.com/dotnet/winforms/pull/2638 plus a breaking change fix (https://github.com/dotnet/runtime/issues/1338). Filing as a separate PR to get CI running ASAP. (I also don't have permissions to update the existing PR.)\r\n\r\n> This pull request updates the following dependencies\r\n> \r\n> ## From https://github.com/dotnet/runtime\r\n> * **Build**: 20200105.4\r\n> * **Date Produced**: 1/6/2020 6:59 AM\r\n> * **Commit**: 5b968685ce89f9dddf49e9aa3aa0608820a585aa\r\n> * **Branch**: refs/heads/master\r\n> * **Updates**:\r\n>   * **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20055.4\r\n> \r\n> ## Coherency Updates\r\n> The following updates ensure that dependencies with a _CoherentParentDependency_\r\n> attribute were produced in a build used as input to the parent dependency's build.\r\n> See [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n> \r\n> * **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.CodeDom** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Drawing.Common** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Resources.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Security.Permissions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Windows.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2647)","Url":"https://github.com/dotnet/winforms/pull/2647","RelatedDescription":"Closed or merged PR \"[master] [patched] Update dependencies from dotnet/runtime\" (#2647)"},{"Id":"545980993","IsPullRequest":true,"CreatedAt":"2020-01-06T22:48:48","Actor":"hughbe","Number":"2646","RawContent":null,"Title":"[WIP/Experiment]: Enable nullability in BindingContext","State":"open","Body":"## Proposed Changes\r\n- Enable nullability in BindingContext\r\n- Make `ICollection.SyncRoot` return non-null value\r\n\r\n## TODO\r\nWe have the following warnings\r\n> System/Windows/Forms/BindingContext.cs(377,38): warning CS8605: Unboxing a possibly null value. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\nSystem/Windows/Forms/BindingContext.cs(379,38): warning CS8600: Converting null literal or possible null value to non-nullable type. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\nSystem/Windows/Forms/BindingContext.cs(380,21): warning CS8602: Dereference of a possibly null reference. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\n    3 Warning(s)\r\n\r\nHappens in cases like below in `foreach (DictionaryEntry de in _listManagers)`, how are we unboxing a possibly null value\r\n```cs\r\nprivate void ScrubWeakRefs()\r\n{\r\n    List<object>? cleanupList = null;\r\n    foreach (DictionaryEntry de in _listManagers)\r\n    {\r\n        WeakReference wRef = (WeakReference)de.Value;\r\n        if (wRef.Target == null)\r\n        {\r\n            cleanupList ??= new List<object>();\r\n            cleanupList.Add(de.Key);\r\n        }\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n/cc @weltkante  \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2646)","Url":"https://github.com/dotnet/winforms/pull/2646","RelatedDescription":"Open PR \"[WIP/Experiment]: Enable nullability in BindingContext\" (#2646)"},{"Id":"545972559","IsPullRequest":true,"CreatedAt":"2020-01-06T22:25:31","Actor":"hughbe","Number":"2645","RawContent":null,"Title":"Cleanup NMTTDISPINFOW interop","State":"open","Body":"## Proposed Changes\r\n- Cleanup NMTTDISPINFOW interop\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2645)","Url":"https://github.com/dotnet/winforms/pull/2645","RelatedDescription":"Open PR \"Cleanup NMTTDISPINFOW interop\" (#2645)"},{"Id":"545938755","IsPullRequest":false,"CreatedAt":"2020-01-06T21:04:33","Actor":"weltkante","Number":"2644","RawContent":null,"Title":"Proposal: implement generic IList<T> on collection types","State":"open","Body":"Historically WinForms existed before generic collections, and when generics were introduced the collection types in WinForms never were updated to implement the generic `IList<T>` interface. I think its time to revisit all collection types and implement `IList<T>` for an appropriate type `T`.\r\n\r\nFor maximum compatibility the `T` in `IList<T>` should match the already existing indexer on the collection type, because binding logic will currently orient itself on the indexer to determine the type of the list, but if you start implementing `IList<T>` it will prefer that over the indexer. To avoid changing how collection types behave during binding you should use the indexer type as `T`.\r\n\r\nSome advantages of implementing `IList<T>` in addition to `IList`:\r\n- using LINQ expressions can make use of additional optimizations - you could use LINQ on the existing `IList` collections by calling `Cast<T>()` or `OfType<T>()` first but this hides the type of the collection so LINQ cannot make use of e.g. `Count` or `CopyTo` interface methods.\r\n- `foreach` on an untyped list does implicit typecasts on every element - implementing the generic `IList<T>` avoids these\r\n- better integration with modern APIs and Analyzers which are more likely to be based on the generic `IList<T>`\r\n\r\nIt's nothing world-shattering, but the little things sometimes also can be nice.\r\n\r\nIf you have any compatibility concerns about adding the generic `IList<T>` to collections I'd be interested to know, I'm currently not aware of any.\r\n\r\n(I'll give this a week, if someone wants to grab it go ahead, its probably an easy way to get started contributing. Otherwise I'll create a WIP PR next week and see where it goes from there, see if any problems come up while implementing it. Sorry if this already has been suggested elsewhere, didn't see any issue though.)","Url":"https://github.com/dotnet/winforms/issues/2644","RelatedDescription":"Open issue \"Proposal: implement generic IList<T> on collection types\" (#2644)"},{"Id":"545823084","IsPullRequest":false,"CreatedAt":"2020-01-06T16:41:29","Actor":"hughbe","Number":"2642","RawContent":null,"Title":"Proposal: add SelectionStart and SelectionEnd to TrackBar","State":"open","Body":"You can set the `TBS_ENABLESELRANGE` on `TrackBar` and send the `TBM_SETSELSTART` and `TBM_SETSELSTART` to set the selection range\r\nSee docs\r\n- https://docs.microsoft.com/en-us/windows/win32/controls/tbm-setselstart\r\n- https://docs.microsoft.com/en-us/windows/win32/controls/tbm-setselend\r\n\r\nExample:\r\n![Screenshot 2020-01-06 at 16 31 38](https://user-images.githubusercontent.com/1275900/71832306-958b7000-30a2-11ea-93df-019c0e929f3c.png)\r\n![Screen Recording 2020-01-06 at 04 32 pm](https://user-images.githubusercontent.com/1275900/71832296-915f5280-30a2-11ea-9ca2-24b47d3d35b8.gif)\r\n\r\nWe could add the following APIs to `TrackBar`:\r\n```cs\r\npublic class TrackBar\r\n{\r\n    ...\r\n    public bool ShowSelectionRange { get; set; }\r\n    public int SelectionStart { get; set; }\r\n    public int SelectionEnd { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n## Discussion\r\n- What should the default values of `SelectionStart` and `SelectionEnd` be if we haven't enabled selections? In my experiments I set them to `0` which worked nicely.\r\n- In my prototype implementation, I set `ShowSelectionRange` to `true` if the user sets `SelectionStart`/`SelectionEnd`. One option could be to remove `ShowSelectionRange` and set `SelectionStart`/`SelectionEnd` to minus one or have some logic that sets the `TrackBar` style to `TBS_ENABLESELRANGE` if it is set to a custom value. However, this is negative as it leaves us with no way of removing the selection indicators once they've been created.\r\n- Do we want `SelectionStart` and `SelectionEnd` or `SelectionStart` and `SelectionLength` or some sort of `SelectionRange` struct that encapsulates this? (e.g `MonthCalendar.SelectionRange`)","Url":"https://github.com/dotnet/winforms/issues/2642","RelatedDescription":"Open issue \"Proposal: add SelectionStart and SelectionEnd to TrackBar\" (#2642)"},{"Id":"545821569","IsPullRequest":false,"CreatedAt":"2020-01-06T16:38:24","Actor":"sae42","Number":"2641","RawContent":null,"Title":"Support third-party languages with .NET Core WinForms Designer","State":"open","Body":"* .NET Core Version: 3.1\r\n* Visual Studio 2019 16.5 Preview 1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** Unable to use .NET Core Win Forms Designer with third-party languages\r\n\r\nI'm not sure if this is the correct place to raise issues related to the Visual Studio .NET Core Win Forms designer, but I wanted to get some visibility into enabling support for third-party languages. Many VSIP language vendor partners spent a lot of time and effort into supporting the .NET Framework Win Form designer and at some point in the future customers that have .NET Framework Win Forms applications will want to move to .NET Core (.NET 5). It would be good if the new designer package could avoid hard-coded checks for project types which appears to be the cause of this particular issue. In the .NET Framework designer, the third-party project system can provide support for the language CodeDomProvider which doesn't appear possible with the current designer.\r\n\r\n\r\n**Actual behavior:**\r\n\r\nIssue occurs due to hard coded project type checks (for C#/VB) in get_Provider():\r\n\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.Private.VSCodeDomDocDataAdapter.Provider.get()\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.Private.VSCodeDomDocDataAdapter.CompileUnit.get()\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager)\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(int fReload)\tUnknown\r\n\r\n\r\n**Expected behavior:**\r\n\r\nSupport for third-party language integration by using the language supplied CodeDomProvider\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2641","RelatedDescription":"Open issue \"Support third-party languages with .NET Core WinForms Designer\" (#2641)"},{"Id":"545767035","IsPullRequest":true,"CreatedAt":"2020-01-06T14:52:41","Actor":"kpreisser","Number":"2639","RawContent":null,"Title":"Improve performance of Enum*Windows() interop functions","State":"open","Body":"## Proposed changes\r\n\r\nIn `EnumWindows`, `EnumChildWindows`, and `EnumThreadWindows`, instead of passing the supplied callback delegate to the native function, use a (fixed) static delegate, and specify a handle pointer of the supplied callback in the `lParam` parameter (that is available for storing application-provided data).\r\n\r\nThat way, the CLR no longer needs to allocate memory for each delegate instance in order to store a native code block (that contains the closure pointer), thus improving performance in many cases (see comparison below). (On the other hand, the invoked callback delegate now has a little bit more work to do, by dereferencing a `GCHandle` and calling another method.)\r\n\r\nThis will also improve speed when running x86 applications on **ARM64** systems, as it avoids the need for the emulation layer to generate new ARM64 code from the x86 code every time the method is invoked with a new delegate instance.\r\n\r\nNote: In `Form.RecreateHandleCore` there was a call to `EnumThreadWindows` where the form handle was passed as `lParam` data, but I think it makes more sense to store it in the callback closure since a new instance of the delegate is created anyway.\r\n\r\nNote: I'm not sure about the naming/placement of the delegate types. In the native declarations, all functions use `WNDENUMPROC` as callback type.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Better performance and reduced memory footprint when using code that calls `EnumWindows`, `EnumChildWindows` or `EnumThreadWindows`.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n### Performance\r\n- Manual testing using a code like this (for `EnumChildWindows`):\r\n```c#\r\n    class Program\r\n    {\r\n        [STAThread]\r\n        private static void Main()\r\n        {\r\n            var f = new Form();\r\n            f.Controls.Add(new Button());\r\n            f.Controls.Add(new CheckBox());\r\n            f.Controls.Add(new RadioButton());\r\n\r\n            var handle = f.Handle;\r\n\r\n            f.Show();\r\n\r\n            var sw = new Stopwatch();\r\n            for (int i = -5; i < 100000; i++)\r\n            {\r\n                if (i == 0)\r\n                    sw.Start();\r\n\r\n                Interop.User32.EnumChildWindows(\r\n                    handle, new EnumChildWindowsTest().HandleCallback);\r\n            }\r\n            sw.Stop();\r\n            f.Close();\r\n            f.Dispose();\r\n            Console.WriteLine(\"Elapsed: \" + sw.ElapsedMilliseconds);            \r\n        }\r\n\r\n        private class EnumChildWindowsTest\r\n        {\r\n            private int count;\r\n\r\n            public Interop.BOOL HandleCallback(IntPtr hWnd)\r\n            {\r\n                count++;\r\n                return Interop.BOOL.TRUE;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Average time** before/after this PR:\r\n- **x86** app on a **x64** system (Windows 10 Version 1909)\r\n  - Before: ~660 ms\r\n  - After: ~370 ms\r\n  - Factor: 1.8x\r\n- **x64** app:\r\n  - Before: ~400 ms\r\n  - After: ~280 ms\r\n  - Factor: 1.4x\r\n- **x86** app on a (slow) **ARM64** machine (Windows 10 on ARM on Raspberry Pi 3 B+):\r\n  - Before: ~27.0s\r\n  - After: ~5.4s\r\n  - Factor: **5.0x**\r\n\r\nNote: When the callback is called more often (e.g. about 200 times when calling `EnumWindows`), the timing improvement vanishes with a x64 app, probably because the callback delegate has now a bit more work to do.\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-016073\r\n Commit:    bd7bf8c6d2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-016073\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.19564.1\r\n  Commit:  c77948d92a\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-alpha1-016073 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2639)","Url":"https://github.com/dotnet/winforms/pull/2639","RelatedDescription":"Open PR \"Improve performance of Enum*Windows() interop functions\" (#2639)"},{"Id":"545523387","IsPullRequest":false,"CreatedAt":"2020-01-06T03:42:19","Actor":"paul1956","Number":"2637","RawContent":null,"Title":"VB AssemblyInfo.Info.Title is not the same in Framework and Core","State":"open","Body":"* .NET Core Version: Master\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nIn Framework the Title is a human readable string set in Visual Studio/Project/Application/Assembly Information Title property. In Core it is AssemblyTitleAttribute which comes from the Assembly name and not something the user can change (without effecting the application)\r\n**Actual behavior:**\r\nYou get \"WindowsApp2Framework\"\r\n![image](https://user-images.githubusercontent.com/12789369/71793202-b2676b00-2ff0-11ea-8a95-343569758112.png)\r\n**Expected behavior:**\r\n\"Windows App 2 Framework\"\r\nSomething the user enters in a Title field. This filed is what is displayed by About and Splash Screens. There is a Product field already which may have the correct information but not used in existing Form templates.\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/2637","RelatedDescription":"Open issue \"VB AssemblyInfo.Info.Title is not the same in Framework and Core\" (#2637)"},{"Id":"545473171","IsPullRequest":false,"CreatedAt":"2020-01-05T22:04:23","Actor":"areller","Number":"2636","RawContent":null,"Title":"Build for System.Windows.Forms fails in Ubuntu","State":"open","Body":"* .NET Core Version: 3.1.100\r\n* Have you experienced this same bug with .NET Framework?: No (Didn't try, running on Ubuntu)\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nI run Ubuntu18.04.3 with .NET Core 3.1.100.\r\nI use the `release/3.1` branch\r\nWhen I try to run `dotnet build` from the `src/System.Windows.Forms/src` directory, it fails with this message,  \r\n\r\n```\r\nCSC : error CS1566: Error reading resource 'System.Windows.Forms.Arrow' -- 'Could not find file '/home/areller/playground/winforms/src/System.Windows.Forms/src/Resources/System/Windows/Forms/PropertyGrid/Arrow.ico'.' [/home/areller/playground/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/15989650/71786717-582dd080-3017-11ea-823a-0efcdf5d339c.png)\r\n\r\n\r\n\r\n**Actual behavior:** `dotnet build` fails (see above) <!-- callstack for crashes / exceptions -->  \r\nIt seems that it can't find some resource (`Arrow.ico`), but this resource exists when I open it directly, and the build works on other systems (Windows and macOS).\r\n\r\n**Expected behavior:** `dotnet build` should work  \r\nThis is a screenshot of it working on macOS 10.14.6\r\n\r\n![image](https://user-images.githubusercontent.com/15989650/71786735-a8a52e00-3017-11ea-9f7d-a8c11f244961.png)\r\n\r\nI know that _winforms_ doesn't support Linux/macOS, but I want to experiment with it so I need it to build.\r\n","Url":"https://github.com/dotnet/winforms/issues/2636","RelatedDescription":"Open issue \"Build for System.Windows.Forms fails in Ubuntu\" (#2636)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-01-09T05:31:02.2213773Z","RunDurationInMilliseconds":791}