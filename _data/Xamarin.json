{"Data":{"Blog":{"FeedItems":[{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null},{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8432279895","Type":"IssuesEvent","CreatedAt":"2018-10-17T01:08:38","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2310","RelatedDescription":"Opened issue \"By default `ConvertCustomView` ignores the assembly name when replacing fully qualified managed type names in `class` or `android:name` attributes on `fragment` elements\" (#2310) at xamarin/xamarin-android","RelatedBody":"Background context: <https://github.com/xamarin/xamarin-android/commit/0dee27d6cb21434fed1cf67aaf33dec2eebcef56>\r\n\r\nIn short, the approach from the earlier fix removes slightly too much information in situations where the acw-map also contains another, longer match. One idea to improve this would be to loop repeatedly, removing one comma-delimited chunk at a time from the attribute value until the longest available match from the acw-map is found. Another idea would be to change `attr.Value.Substring (0, attr.Value.IndexOf (','))` so that it takes the substring up to the *second* comma rather than the first.\r\n\r\nThe first idea would allow `class='ClassLibrary1.CustomView, ClassLibrary3'` to be replaced successfully with the example *acmap.txt* from the Steps to Reproduce (below) even though that file doesn't mention a `ClassLibrary3` assembly. That might be an advantage or disadvantage. It might be useful in some cases, but since `Type.GetType (\"ClassLibrary1.CustomView, ClassLibrary3\")` would return `null`, it might be unexpected.\r\n\r\nThe second idea makes an assumption that the assembly-qualified name will always be present in the acw-map. That is currently the case:\r\n<https://github.com/xamarin/xamarin-android/blob/b61941ed62c108f54e680b805bce1efa8f18e4e8/src/Xamarin.Android.Build.Tasks/Tasks/GenerateJavaStubs.cs#L176>\r\n\r\n### Steps to Reproduce\r\n\r\nAdd the following test to `ConvertResourcesCasesTests` and run it:\r\n\r\n```csharp\r\n[Test]\r\npublic void FullyQualifiedCustomFragmentClassAttributes ()\r\n{\r\n\tvar path = Path.Combine (Root, \"temp\", \"PartiallyQualifiedCustomFragmentClasses\");\r\n\tDirectory.CreateDirectory (path);\r\n\tvar resPath = Path.Combine (path, \"res\");\r\n\tDirectory.CreateDirectory (Path.Combine (resPath, \"layout\"));\r\n\tFile.WriteAllText (Path.Combine (resPath, \"layout\", \"main.xml\"), @\"<?xml version='1.0' ?>\r\nlns:android='http://schemas.android.com/apk/res/android'>\r\nd:name='ClassLibrary1.CustomView, ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' />\r\n'ClassLibrary1.CustomView, ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' />\r\nd:name='ClassLibrary1.CustomView, ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' />\r\n'ClassLibrary1.CustomView, ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' />\r\n\r\n\r\n\tvar errors = new List<BuildErrorEventArgs> ();\r\n\tIBuildEngine engine = new MockBuildEngine (TestContext.Out, errors);\r\n\tvar task = new ConvertResourcesCases {\r\n\t\tBuildEngine = engine\r\n\t};\r\n\ttask.ResourceDirectories = new ITaskItem [] {\r\n\t\tnew TaskItem (resPath),\r\n\t};\r\n\ttask.AcwMapFile = Path.Combine (path, \"acwmap.txt\");\r\n\ttask.CustomViewMapFile = Path.Combine (path, \"classmap.txt\");\r\n\tFile.WriteAllLines (task.AcwMapFile, new string [] {\r\n\t\t\"ClassLibrary1.CustomView, ClassLibrary1;md5d6f7135293df7527c983d45d07471c5e.CustomView\",\r\n\t\t\"ClassLibrary1.CustomView;md5d6f7135293df7527c983d45d07471c5e.CustomView\",\r\n\t\t\"classLibrary1.CustomView;md5d6f7135293df7527c983d45d07471c5e.CustomView\",\r\n\t\t\"ClassLibrary1.CustomView, ClassLibrary2;md58090b0504f2fbdbfb93028c14dfe0429.CustomView\",\r\n\t\t\"ClassLibrary1.CustomView;md58090b0504f2fbdbfb93028c14dfe0429.CustomView\",\r\n\t\t\"classLibrary1.CustomView;md58090b0504f2fbdbfb93028c14dfe0429.CustomView\",\r\n\t});\r\n\tAssert.IsTrue (task.Execute (), \"Task should have executed successfully\");\r\n\tvar custom = new ConvertCustomView () {\r\n\t\tBuildEngine = engine,\r\n\t\tCustomViewMapFile = task.CustomViewMapFile,\r\n\t\tAcwMapFile = task.AcwMapFile,\r\n\t\tResourceDirectories = new ITaskItem [] {\r\n\t\t\tnew TaskItem (resPath),\r\n\t\t},\r\n\t};\r\n\tAssert.IsTrue (custom.Execute (), \"Task should have executed successfully\");\r\n\tvar output = File.ReadAllText (Path.Combine (resPath, \"layout\", \"main.xml\"));\r\n\tStringAssert.Contains (\"md5d6f7135293df7527c983d45d07471c5e.CustomView\", output, \"md5d6f7135293df7527c983d45d07471c5e.CustomView should exist in the main.xml\");\r\n\tStringAssert.Contains (\"md58090b0504f2fbdbfb93028c14dfe0429.CustomView\", output, \"md58090b0504f2fbdbfb93028c14dfe0429.CustomView should exist in the main.xml\");\r\n\tStringAssert.DoesNotContain (\"ClassLibrary1.CustomView\", output, \"ClassLibrary1.CustomView should have been replaced in all cases.\");\r\n\tDirectory.Delete (path, recursive: true);\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe test passes. This would mean that `ConvertCustomView` successfully used the assembly-qualified name for each of the managed types in the input layout .xml file when mapping each one to a Java Callable Wrapper name from the *acwmap.txt* file.\r\n\r\nThe expected *main.xml* file contents before the `Directory.Delete()` step would be:\r\n\r\n```xml\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n  <fragment android:name=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n  <fragment class=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n  <fragment android:name=\"md58090b0504f2fbdbfb93028c14dfe0429.CustomView\" />\r\n  <fragment class=\"md58090b0504f2fbdbfb93028c14dfe0429.CustomView\" />\r\n</LinearLayout>\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe test fails because *all* of the managed type names are replaced with the Java Callable Wrapper name \"md5d6f71...\" that corresponds to the type from the ClassLibrary1 assembly.\r\n\r\n```xml\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n  <fragment android:name=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n  <fragment class=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n  <fragment android:name=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n  <fragment class=\"md5d6f7135293df7527c983d45d07471c5e.CustomView\" />\r\n</LinearLayout>\r\n```\r\n\r\nIf you change the `class` attribute to the shorter, *partially* assembly-qualified name `ClassLibrary1.CustomView, ClassLibrary2`, then the replacement works as desired because that exact string exists in the *acwmap.txt* file."},{"Id":"8432142024","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:21:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2307","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tests] Find the Microsoft.NET.Sdk\" (#2307) at xamarin/xamarin-android","RelatedBody":"We don't always install the `2.0.0` version of the .net SDK\r\non Mac. So we should detect and use the most recent version.\r\nThis will mean that the `NetStandardReferenceTest` might\r\nactually start running again."},{"Id":"8432136819","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:20:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2304","RelatedDescription":"Merged pull request \"[tests] use a \"real\" Xamarin.Forms app\" (#2304) at xamarin/xamarin-android","RelatedBody":"In the past `XamarinFormsAndroidApplicationProject` was incomplete:\r\n1. It was not a \"real app\", but the resemblance of one that merely\r\n   _compiled_.\r\n2. It did not have XAML or import/run Xamarin.Forms MSBuild tasks.\r\n3. It was not an app that could startup, and render Xamarin.Forms\r\n   content.\r\n\r\nSo I took the simplest Xamarin.Forms template from Visual Studio 2017\r\n15.8.7, a `Blank App`:\r\n- Added various new files as `EmbeddedResource` in\r\n  `Xamarin.ProjectTools`.\r\n- Used most files as-is, adding `${ROOT_NAMESPACE}` where appropriate.\r\n- Included `Tabbar.axml`, which has a \"custom view\".\r\n- Included proper XAML files.\r\n- Imported `Xamarin.Forms.targets`, and verified that `XamlG` and\r\n  `XamlC` are now both running.\r\n- Added `Xamarin.Android.Support.Vector.Drawable`, which avoids a\r\n  crash at runtime.\r\n- Updated to Xamarin.Forms 3.1.0.\r\n\r\nOverall, this should make any of our test cases using\r\n`XamarinFormsAndroidApplicationProject` much closer to reality."},{"Id":"8431548830","Type":"PullRequestEvent","CreatedAt":"2018-10-16T21:41:34","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2309","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] remove unused Inputs/Outputs\" (#2309) at xamarin/xamarin-android","RelatedBody":"While reviewing our MSBuild targets, I noticed three targets that\r\ndeclared `Inputs` and `Outputs`, but did not actually update any\r\nfiles:\r\n\r\n- `_CollectConfigFiles`\r\n- `_CollectMdbFiles`\r\n- `_CollectPdbFiles`\r\n\r\nThis means that MSBuild was unnecessarily looking at files to see if\r\nthey exist, and might be comparing timestamps as well. The targets\r\nwould also _always_ run, so it doesn't matter to have `Inputs` and\r\n`Outputs` in these targets at all!\r\n\r\nI basically removed these `Inputs` and `Outputs`, and saw a\r\nperformance gain with just doing that. I also saw performance gains to\r\ntargets that depend on these three targets. Since `Inputs` and\r\n`Outputs` timing is internal to MSBuild, I am not sure where the\r\nactual time is being tallied here.\r\n\r\n    Before:\r\n        1 ms  _CopyConfigFiles                           1 calls\r\n        3 ms  _CopyMdbFiles                              2 calls\r\n        3 ms  _CollectMdbFiles                           1 calls\r\n        4 ms  _CopyPdbFiles                              1 calls\r\n        5 ms  _CollectPdbFiles                           1 calls\r\n        5 ms  _CollectConfigFiles                        1 calls\r\n       20 ms  _ConvertPdbFiles                           1 calls\r\n\r\nA total of ~46ms\r\n\r\n    After:\r\n        0 ms  _ConvertPdbFiles                           1 calls\r\n        0 ms  _CopyPdbFiles                              1 calls\r\n        1 ms  _CollectMdbFiles                           1 calls\r\n        1 ms  _CopyMdbFiles                              2 calls\r\n        1 ms  _CopyConfigFiles                           1 calls\r\n        2 ms  _CollectConfigFiles                        1 calls\r\n        5 ms  _CollectPdbFiles                           1 calls\r\n\r\nA total of ~10ms\r\n\r\nAn overall improvement of ~36ms.\r\n\r\nThis was the `samples/HelloWorld` project in this repo, a build with\r\nno changes. I suspect the improvement would be even better for larger\r\nprojects."},{"Id":"8429334285","Type":"PullRequestEvent","CreatedAt":"2018-10-16T15:21:42","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2308","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix _CopyIntermediateAssemblies outputs\" (#2308) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2247\r\nContext: https://github.com/xamarin/xamarin-android/pull/2128\r\n\r\nThe `_CopyIntermediateAssemblies` target has a bug for incremental\r\nbuilds, reproduced by the following:\r\n- Build a Xamarin.Android app project\r\n- `touch` the project's assembly in `$(IntermediateOutputPath)`\r\n- Build a second time. `_CopyIntermediateAssemblies` will run as\r\n  expected.\r\n- Build a third time. `_CopyIntermediateAssemblies` will still run!\r\n\r\nWhen in this state, `_CopyIntermediateAssemblies` will always run.\r\nThis is bad because it triggers other expensive targets like\r\n`_UpdateAndroidResgen` _every time_.\r\n\r\nI believe I introduced this in #2128, which was when I saw\r\n`_CopyIntermediateAssemblies` taking more time than it used to. It was\r\na good tradeoff though, since it prevented `_UpdateAndroidResgen` from\r\nrunning too often. 15.9 does not have #2128.\r\n\r\nTo fix this problem properly, I introduced a new\r\n`_copyintermediate.stamp` file to be used as the `Outputs` of the\r\ntarget. In addition to fixing our incremental build here, there should\r\nbe performance gains in only verifying the timestamp of one file in\r\n`Outputs`.\r\n\r\nThe `Inputs` of the `_CopyIntermediateAssemblies` were also incorrect,\r\nas it was not using the \"satellite\" assembly files as an input.\r\n\r\nThis does not fully complete #2247, as there are two other targets\r\nlisted I need to investigate further. These are likely unrelated to\r\nthe changes in #2128."},{"Id":"8429228553","Type":"PullRequestEvent","CreatedAt":"2018-10-16T15:07:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2306","RelatedDescription":"Merged pull request \"Revert \"[Xamarin.Android.Build.Tasks] Ignore XA0115 for Shared Runtime builds. (#2293)\"\" (#2306) at xamarin/xamarin-android","RelatedBody":"This reverts commit dfd695ece835a179dfef4bb276a5a3a6133af586.\r\n\r\nThis is because on master we have removed `armeabi` completely.\r\nAs a result we WANT to raise an error is this is used anywhere.\r\nIts not used in the shared runtime anymore so this \"fix\" is\r\nnot needed."},{"Id":"8428188899","Type":"PullRequestEvent","CreatedAt":"2018-10-16T12:42:29","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2307","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tests] Find the Microsoft.NET.Sdk\" (#2307) at xamarin/xamarin-android","RelatedBody":"We don't always install the `2.0.0` version of the .net SDK\r\non Mac. So we should detect and use the most recent version.\r\nThis will mean that the `NetStandardReferenceTest` might\r\nactually start running again."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8432400652","Type":"PullRequestEvent","CreatedAt":"2018-10-17T01:50:31","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4111","RelatedDescription":"Opened pull request \"[IOS] label not rendering in BOLD when using a STYLE\" (#4111) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUIFont.FamilyNames method doesn't return default font name\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes https://github.com/xamarin/Xamarin.Forms/issues/2831\r\n\r\n### API Changes ###\r\n\r\nChanged: _ToUIFont fontFamily check\r\n\r\n### Platforms Affected ### \r\n- iOS\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNow we can use Bold fontAttribute with style\r\n\r\n### Before/After Screenshots ### \r\n<img width=\"310\" alt=\"2\" src=\"https://user-images.githubusercontent.com/10124814/47057143-1d4c3c80-d1c8-11e8-84fe-79a520c25395.png\">\r\n\r\n<img width=\"294\" alt=\"1\" src=\"https://user-images.githubusercontent.com/10124814/47057147-20472d00-d1c8-11e8-935a-793678a1d088.png\">\r\n\r\n### Testing Procedure ###\r\nCheck Issue2831 test case\r\n"},{"Id":"8432233942","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:53:05","Actor":"Viridovics","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4110","RelatedDescription":"Opened pull request \"Fix Issue2794 needs UI Test\" (#4110) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n* Add UI test\r\n* Add instructions\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #2794\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8431814690","Type":"PullRequestEvent","CreatedAt":"2018-10-16T22:43:33","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4109","RelatedDescription":"Opened pull request \"[iOS] Rapidly clicking span (6 times at least) on UITest 3525 throws a null exception\" (#4109) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nPrevent enumeration through null collection\r\n\r\nFairy case for real app, but possibly somebody doesn't use NavigationPage and manages screens by setting MainPage... in theory, if user click on span and separate task starting to change MainPage it can cause the same issue like we have in UITest 3525 :) \r\n\r\n### Issues Resolved ### \r\n- fixes https://github.com/xamarin/Xamarin.Forms/issues/3930\r\n\r\n### API Changes ###\r\nAdded extra null check in ios EventTracker/CreateRecognizerHandler\r\n \r\n### Platforms Affected ### \r\niOS\r\n\r\n### Behavioral/Visual Changes ###\r\nUITest 3525 doesn't crash\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nOpen UITest 3525 and click 6 times rapidly\r\n\r\n"},{"Id":"8431753745","Type":"IssuesEvent","CreatedAt":"2018-10-16T22:27:41","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2282","RelatedDescription":"Closed issue \"Issue2339 needs UI Test\" (#2282) at xamarin/Xamarin.Forms","RelatedBody":"This one is just clicking buttons and verifying results. Shouldn't be too hard"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8432984301","Type":"PullRequestEvent","CreatedAt":"2018-10-17T05:13:27","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4989","RelatedDescription":"Merged pull request \"Bump maccore to get fix for xamarin/maccore#1090.\" (#4989) at xamarin/xamarin-macios","RelatedBody":"Diff: https://github.com/xamarin/maccore/compare/46a12247947cdf546e0e07f4e7062ef2f5fcf515...b93ee3155d89e4414c4c228cf19bb89489b03bb1"},{"Id":"8432337489","Type":"IssuesEvent","CreatedAt":"2018-10-17T01:29:04","Actor":"juepiezhongren","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5001","RelatedDescription":"Opened issue \"please give a document about how to use interpreter\" (#5001) at xamarin/xamarin-macios","RelatedBody":"said above"},{"Id":"8432223452","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:49:31","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5000","RelatedDescription":"Merged pull request \"[security] Update for Xcode 10.1 beta 2\" (#5000) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8432222860","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:49:17","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4999","RelatedDescription":"Merged pull request \"[intents] Update for Xcode 10.1 beta 3\" (#4999) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8432222194","Type":"PullRequestEvent","CreatedAt":"2018-10-17T00:49:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4998","RelatedDescription":"Merged pull request \"[identitylookup] Update for Xcode 10.1 beta 3\" (#4998) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8431235408","Type":"PullRequestEvent","CreatedAt":"2018-10-16T20:41:43","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5000","RelatedDescription":"Opened pull request \"[security] Update for Xcode 10.1 beta 2\" (#5000) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8431160263","Type":"PullRequestEvent","CreatedAt":"2018-10-16T20:28:27","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4999","RelatedDescription":"Opened pull request \"[intents] Update for Xcode 10.1 beta 3\" (#4999) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":13,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":25,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":31,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":31,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":202,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":80,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null}]}},"RunOn":"2018-10-17T05:30:56.2419416Z","RunDurationInMilliseconds":4636}