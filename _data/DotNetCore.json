{"Data":{"Blog":{"FeedItems":[{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2017 version 15.9","PublishedOn":"2018-11-13T18:09:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting with Visual Studio 2017 version 15.9, we’ve changed how the Visual Studio tooling for .NET consumes .NET Core SDKs. Prior to this change, installing a preview version of the .NET Core SDK...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-core-tooling-update-for-visual-studio-2017-version-15-9/","RawContent":null},{"Title":"Cross-platform Time Zones with .NET Core","PublishedOn":"2018-11-13T18:00:21+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Developing applications that span multiple operating systems in .NET Core while working with Time Zone information can lead to unexpected results for developers not familiar with the differences in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/cross-platform-time-zones-with-net-core/","RawContent":null},{"Title":"Building C# 8.0","PublishedOn":"2018-11-13T00:00:02+00:00","CommentsCount":112,"FacebookCount":0,"Summary":"Building C# 8.0 The next major version of C# is C# 8.0. It&#8217;s been in the works for quite some time, even as we built and shipped the minor releases C# 7.1, 7.2 and 7.3, and I&#8217;m quite...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/","RawContent":null},{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8578321898","Type":"PullRequestEvent","CreatedAt":"2018-11-13T04:22:33","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8573927252","Type":"PullRequestEvent","CreatedAt":"2018-11-12T13:30:25","Actor":"scottbrady91","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Opened pull request \"Update to IdentityManager project\" (#116) at dotnet/foundation","RelatedBody":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo."},{"Id":"8573265026","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:25:41","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Opened pull request \"Create identitymodel.md\" (#115) at dotnet/foundation","RelatedBody":""},{"Id":"8573235551","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:20:18","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8607849020","Type":"PullRequestEvent","CreatedAt":"2018-11-18T04:08:28","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21072","RelatedDescription":"Merged pull request \"Fix incorrect exception thrown in Marshal.ReleaseComObject(null)\" (#21072) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/33573"},{"Id":"8607803157","Type":"PullRequestEvent","CreatedAt":"2018-11-18T03:27:15","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21074","RelatedDescription":"Opened pull request \"[WIP] Refactor genAllocLclFrame into two architecture-specific functions\" (#21074) at dotnet/coreclr","RelatedBody":"`genAllocLclFrame` function is hard to read now due to multiple levels of if/ifdefs.\r\nThis refactors the function into two architecture-specific functions - one for XARCH, another for ARMARCH."},{"Id":"8607533367","Type":"PullRequestEvent","CreatedAt":"2018-11-17T23:34:46","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21073","RelatedDescription":"Opened pull request \"Use Bmi1.TrailingZeroCount for LocateFirstFoundXxx\" (#21073) at dotnet/coreclr","RelatedBody":"From https://github.com/dotnet/coreclr/pull/20738#issuecomment-439654236"},{"Id":"8607444055","Type":"PullRequestEvent","CreatedAt":"2018-11-17T22:31:32","Actor":"hughbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21072","RelatedDescription":"Opened pull request \"Fix incorrect exception thrown in Marshal.ReleaseComObject(null)\" (#21072) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/33573"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8606431179","Type":"IssuesEvent","CreatedAt":"2018-11-17T11:58:15","Actor":"klinge","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10357","RelatedDescription":"Opened issue \"Permission denied error on NuGetFallbackFolder after update to SDK 2.1.500\" (#10357) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn Ubuntu 18.04 after updating to dotnet core sdk 2.1.500 I get this error message both on doing \"dotnet run\" and \"dotnet restore\"\r\n\r\n`Permission denied to modify the '/usr/share/dotnet/sdk/NuGetFallbackFolder' folder.\r\n\r\nHere are some options to fix this error:\r\n----------------------------------------\r\n1. Re-run this command with elevated access.\r\n2. Disabled the first run experience by setting the environment variable DOTNET_SKIP_FIRST_TIME_EXPERIENCE to true.\r\n3. Copy the .NET Core SDK to a non-protected location and use it from there.`\r\n\r\n## Expected  behavior\r\nWorked properly before the update\r\n\r\n## Environment data\r\n`NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8606014381","Type":"IssuesEvent","CreatedAt":"2018-11-17T06:49:49","Actor":"netroby","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7737","RelatedDescription":"Closed issue \"Feature request, compile dotnet to one self contained executable file\" (#7737) at dotnet/cli","RelatedBody":"This is a feature request. The current dotnet build result (even self contained build) will output a executable file and much more dll.\r\nCan we built them all in one single executable file?\r\n\r\ngolang/rust can build into one executable file(which good for redistribute). hope dotnet have the same ability "},{"Id":"8605575368","Type":"IssuesEvent","CreatedAt":"2018-11-17T01:29:48","Actor":"hrumhurum","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10356","RelatedDescription":"Opened issue \"Regression in .NET SDK 500: 'dotnet tool install' fails with 401 (Unauthorized) when there is a private feed is in Nuget.config\" (#10356) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Ensure .NET SDK 2.1.500 is installed\r\n2. Ensure there is a private feed in NuGet.config that requires authentication\r\n3. dotnet tool install -g Contoso.FooBar\r\n\r\n## Expected  behavior\r\nTool 'foobar' (version '1.2.3') was successfully installed.\r\n\r\n## Actual behavior\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\NuGet.targets(114,5): error : Failed to retrieve information about 'contoso.foobar' from remote source 'https://rd.contoso.com:12345/nuget/feed/FindPackagesById()?id='contoso.foobar'&semVerLevel=2.0.0'. [C:\\Users\\Tester\\AppData\\Local\\Temp\\h2vj5tjo.mmy\\restore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\NuGet.targets(114,5): error :   **Response status code does not indicate success: 401 (Unauthorized).** [C:\\Users\\Tester\\AppData\\Local\\Temp\\h2vj5tjo.mmy\\restore.csproj]\r\nThe tool package could not be restored.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n## Notes\r\nThe issue is not present in .NET Core SDK 2.1.400, e.g. it goes away when .NET Core SDK 2.1.500 is uninstalled, and reappears when SDK 2.1.500 is installed again.\r\n\r\nHere is the sample `NuGet.config` from `C:\\Users\\Tester\\Application Data\\NuGet` folder:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"Microsoft Visual Studio Offline Packages\" value=\"C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\" />\r\n    <add key=\"Contoso R&amp;D\" value=\"https://rd.contoso.com:12345/nuget/feed\" />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n  </packageSources>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <bindingRedirects>\r\n    <add key=\"skip\" value=\"False\" />\r\n  </bindingRedirects>\r\n  <packageManagement>\r\n    <add key=\"format\" value=\"0\" />\r\n    <add key=\"disabled\" value=\"False\" />\r\n  </packageManagement>\r\n  <packageSourceCredentials>\r\n    <Contoso_x0020_R_x0026_D>\r\n      <add key=\"Username\" value=\"tester\" />\r\n      <add key=\"Password\" value=\"...\" />\r\n    </Contoso_x0020_R_x0026_D>\r\n  </packageSourceCredentials>\r\n</configuration>\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8607067179","Type":"IssuesEvent","CreatedAt":"2018-11-17T18:30:40","Actor":"AaronRobinsonMSFT","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/973","RelatedDescription":"Opened issue \"Consider adding IDispatchConstantAttribute\" (#973) at dotnet/standard","RelatedBody":"The `IUnknownConstantAttribute` is in netstandard, but the related `IDispatchConstantAttribute` is not. We should consider whether this attribute should be added for consistency.\r\n\r\nSee dotnet/corefx#33559"},{"Id":"8606561246","Type":"PullRequestEvent","CreatedAt":"2018-11-17T13:26:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/972","RelatedDescription":"Merged pull request \"Update dependency files\" (#972) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n"},{"Id":"8606522234","Type":"PullRequestEvent","CreatedAt":"2018-11-17T13:01:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/972","RelatedDescription":"Opened pull request \"Update dependency files\" (#972) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n"},{"Id":"8602147237","Type":"PullRequestEvent","CreatedAt":"2018-11-16T13:16:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/971","RelatedDescription":"Merged pull request \"Update dependency files\" (#971) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18565.9\r\n\r\n"},{"Id":"8602071401","Type":"PullRequestEvent","CreatedAt":"2018-11-16T13:01:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/971","RelatedDescription":"Opened pull request \"Update dependency files\" (#971) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18565.9\r\n\r\n"},{"Id":"8595356206","Type":"PullRequestEvent","CreatedAt":"2018-11-15T13:21:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/970","RelatedDescription":"Merged pull request \"Update dependency files\" (#970) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18564.20\r\n\r\n"},{"Id":"8595229560","Type":"PullRequestEvent","CreatedAt":"2018-11-15T13:01:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/970","RelatedDescription":"Opened pull request \"Update dependency files\" (#970) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18564.20\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8607906793","Type":"PullRequestEvent","CreatedAt":"2018-11-18T05:01:15","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33567","RelatedDescription":"Merged pull request \"Fixing up Matrix4x4 to use the relocated helper intrinsics\" (#33567) at dotnet/corefx","RelatedBody":"CC. @fiigii \r\n\r\nAlso CC. @EgorBo as an FYI"},{"Id":"8607786484","Type":"PullRequestEvent","CreatedAt":"2018-11-18T03:12:24","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33571","RelatedDescription":"Merged pull request \"Disable more DNS tests failing sporadically in ARM64 CI\" (#33571) at dotnet/corefx","RelatedBody":"cc: @rmkerr "},{"Id":"8607768487","Type":"PullRequestEvent","CreatedAt":"2018-11-18T02:56:43","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33575","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview-27118-01, preview-27117-05, respectively (master)\" (#33575) at dotnet/corefx","RelatedBody":""},{"Id":"8607716236","Type":"PullRequestEvent","CreatedAt":"2018-11-18T02:09:17","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33498","RelatedDescription":"Merged pull request \"remove Linux pollution from other Unixes\" (#33498) at dotnet/corefx","RelatedBody":"Currently we set TargetsLinux=true for all other Unixes. That created unexpected behavior when we link in Linux code instead of using UnknownUnix stubs. Furthermore, TargetsUnknownUnix used in project files is not set.\r\n\r\nTo test this change I did local build with build.sh /p:buildtests=true and I verified that NetworkInfoTest no longer fail in Linux specific code. (and they throw PNSP exception as they should) \r\n\r\nThis change should not impact currently supported Linux and OSX. "},{"Id":"8607715211","Type":"PullRequestEvent","CreatedAt":"2018-11-18T02:08:21","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33517","RelatedDescription":"Merged pull request \"improve detection and portability of pal_networkstatistics.c\" (#33517) at dotnet/corefx","RelatedBody":"related to #24386\r\n\r\nThis improves detection of HAVE_NET_IFMEDIA_H and HAVE_TCP_FSM_H.\r\nFurthermore we were detecting presence of rt_msghdr but than we used rt_msghdr2 in the code. \r\n\r\nAside from that this adds fee special cases for freebsd. Some fields OSX has do not exist. \r\nicps_[in|out]hist has different size (long vs int) \r\n "},{"Id":"8607623096","Type":"IssuesEvent","CreatedAt":"2018-11-18T00:49:25","Actor":"onovotny","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33574","RelatedDescription":"Opened issue \"Cannot set thread culture before start\" (#33574) at dotnet/corefx","RelatedBody":"Take the following code\r\n\r\n```csharp\r\n            _dispatcherThread = new Thread(DispatcherThread);\r\n            _dispatcherThread.TrySetApartmentState(ApartmentState.STA);\r\n            _dispatcherThread.Name = \"Dispatcher Thread\";\r\n            _dispatcherThread.CurrentCulture = Thread.CurrentThread.CurrentCulture;\r\n            _dispatcherThread.CurrentUICulture = Thread.CurrentThread.CurrentUICulture;\r\n            _dispatcherThread.Start();\r\n```\r\nIt tries to set the new thread culture to the same as the current one. This worked in the .NET Framework. It throws on .NET Core. This is with .NET Core 3 9754\r\n\r\n![image](https://user-images.githubusercontent.com/1427284/48667352-b3160880-eaa1-11e8-96ac-b58c34960853.png)\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8607873393","Type":"PullRequestEvent","CreatedAt":"2018-11-18T04:30:45","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31168","RelatedDescription":"Merged pull request \"Don't warn on conversion of error type. Analyze arguments of invocations with errors\" (#31168) at dotnet/roslyn","RelatedBody":"1) Previously we would report warnings like `Nullability of reference types in value of type '?' doesn't match target type 'string'.` which result from an expression having an error type. We can suppress these.\r\n2) On the other hand, we used to skip analysis of arguments if an invocation has errors.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/29916\r\n\r\nPS: an alternative design I considered for the first issue: TSWA could always have an oblivious nullability when the TypeSymbol is an error type."},{"Id":"8607873388","Type":"IssuesEvent","CreatedAt":"2018-11-18T04:30:45","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29916","RelatedDescription":"Closed issue \"Should suppress WRN_NullabilityMismatchInAssignment when it is cascading, i.e. caused by a binding error\" (#29916) at dotnet/roslyn","RelatedBody":"```\r\n\r\n        [Fact]\r\n        public void ConditionalAccessDelegateInvoke()\r\n        {\r\n            var source =\r\n@\"using System;\r\nclass C<T>\r\n{\r\n    static T F(Func<T>? f)\r\n    {\r\n        return f?.Invoke();\r\n    }\r\n}\";\r\n            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition });\r\n            comp.VerifyDiagnostics(\r\n                // (6,17): error CS0023: Operator '?' cannot be applied to operand of type 'T'\r\n                //         return f?.Invoke();\r\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, \"?\").WithArguments(\"?\", \"T\").WithLocation(6, 17),\r\n                // (6,16): warning CS8619: Nullability of reference types in value of type '?' doesn't match target type 'T'.\r\n                //         return f?.Invoke();\r\n                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, \"f?.Invoke()\").WithArguments(\"?\", \"T\").WithLocation(6, 16)\r\n                );\r\n        }\r\n```"},{"Id":"8607860821","Type":"IssuesEvent","CreatedAt":"2018-11-18T04:18:58","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30053","RelatedDescription":"Closed issue \"Test plan for enhanced using and foreach\" (#30053) at dotnet/roslyn","RelatedBody":"Three features are included:\r\n- `using` declaration https://github.com/dotnet/csharplang/issues/1174\r\n- pattern-based `using` https://github.com/dotnet/csharplang/issues/1623\r\n- extension-based `foreach` https://github.com/dotnet/csharplang/issues/1623\r\n\r\nSome scenarios and test ideas:\r\n- [ ] `StructRefEnumerator GetEnumerator<T>(this T[] @this)`\r\n- [ ] pattern-based `Dispose` in foreach\r\n- [ ] `await using var` declaration\r\n- [ ] IDE: FindAllReferences on `Dispose` method or extension, and `GetEnumerator` extension\r\n- [ ] handle EnC\r\n- [ ] integrate with async-streams (https://github.com/dotnet/roslyn/issues/24037)\r\n- [ ] verify sequence points and debugging experience\r\n\r\nFYI @agocke @chsienki "},{"Id":"8607837896","Type":"IssuesEvent","CreatedAt":"2018-11-18T03:58:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31238","RelatedDescription":"Opened issue \"Null-coalescing assignment in expression tree crashes compiler\" (#31238) at dotnet/roslyn","RelatedBody":"[Demo](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACh0tsA6AGQEsA7ARzIFEAPABwTiiioHsaoCxAMxYATBgDCGAN5EM8rCJQAWDAFkAFAEoZchfoDKMBLQDmGZhgC8GGgFcANg8H79Ldp258APCgCsvthoAHzBGHCYNtrWYZYA/HE29k4uCgC+RGlAA) \r\n\r\n```C#\r\nusing System;\r\nusing System.Linq.Expressions;\r\npublic class C {\r\n    public void M() {\r\n        String x = null;\r\n        Expression<Func<string>> e0 = () => x ??= null;\r\n    }\r\n}\r\n```\r\n\r\nMore generally, we need to go through the [compiler test plan](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md) and confirm if this is the only test gap.\r\n\r\nFYI @cston"},{"Id":"8607745681","Type":"PullRequestEvent","CreatedAt":"2018-11-18T02:35:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31105","RelatedDescription":"Merged pull request \"Allow multiple calls to GetAsyncEnumerator\" (#31105) at dotnet/roslyn","RelatedBody":"The state machine for iterator methods is meant to be used as an enumerable which can produce multiple enumerators, but it also acts as the first enumerator that is returned.\r\nThe state machine for async methods is meant to be used only once. The state machine for async-iterator initially followed that design, but we're changing that.\r\n\r\nWith this PR, the setup of an async-iterator method becomes more like that of an iterator method than that of an async method. \r\nEvery time you call `GetAsyncEnumerator()`, you get a fresh enumerator (either by recycling one that is finished, or by instantiate and initializing a new one. \r\nThis implies that the state machine for async-iterator methods must keep a copy of the original parameters.\r\n\r\nSince this design is very much like iterator methods, I have refactored some of the code from `IteratorRewriter` as helper methods and re-used them.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/30275\r\n\r\nBefore:\r\n```C#\r\n\t[CompilerGenerated]\r\n\tprivate sealed class <M>d__0<T> : IAsyncEnumerable<T>, IAsyncEnumerator<T>, IAsyncDisposable, IValueTaskSource<bool>, IStrongBox<ManualResetValueTaskSourceLogic<bool>>, IAsyncStateMachine\r\n\t{\r\n...\r\n\t\t[DebuggerHidden]\r\n\t\tValueTask<bool> IAsyncEnumerator<T>.MoveNextAsync()\r\n\t\t{\r\n\t\t\tif (<>1__state == -2)\r\n\t\t\t{\r\n\t\t\t\treturn default(ValueTask<bool>);\r\n\t\t\t}\r\n\t\t\t<>v__promiseOfValueOrEnd.Reset();\r\n\t\t\t<M>d__0<T> stateMachine = this;\r\n\t\t\t<>t__builder.Start(ref stateMachine);\r\n\t\t\treturn new ValueTask<bool>(this, <>v__promiseOfValueOrEnd.Version);\r\n\t\t}\r\n\r\n\t\t[DebuggerHidden]\r\n\t\tIAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator()\r\n\t\t{\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t[AsyncStateMachine(typeof(<M>d__0<>))]\r\n\t[IteratorStateMachine(typeof(<M>d__0<>))]\r\n\tprivate static IAsyncEnumerable<T> M<T>(T value)\r\n\t{\r\n\t\t<M>d__0<T> <M>d__ = new <M>d__0<T>();\r\n\t\t<M>d__.value = value;\r\n\t\t<M>d__.<>t__builder = AsyncVoidMethodBuilder.Create();\r\n\t\t<M>d__.<>1__state = -1;\r\n\t\t<M>d__.<>v__promiseOfValueOrEnd = new ManualResetValueTaskSourceLogic<bool>(<M>d__);\r\n\t\treturn <M>d__;\r\n\t}\r\n```\r\n\r\nAfter:\r\n```C#\r\n\t[CompilerGenerated]\r\n\tprivate sealed class <M>d__0<T> : IAsyncEnumerable<T>, IAsyncEnumerator<T>, IAsyncDisposable, IValueTaskSource<bool>, IStrongBox<ManualResetValueTaskSourceLogic<bool>>, IAsyncStateMachine\r\n\t{\r\n...\r\n\t\t[DebuggerHidden]\r\n\t\tpublic <M>d__0(int <>1__state)\r\n\t\t{\r\n\t\t\tthis.<>1__state = <>1__state;\r\n\t\t\t<>l__initialThreadId = Environment.CurrentManagedThreadId;\r\n\t\t\t<>t__builder = AsyncVoidMethodBuilder.Create();\r\n\t\t\t<>v__promiseOfValueOrEnd = new ManualResetValueTaskSourceLogic<bool>(this);\r\n\t\t}\r\n\r\n\t\t[DebuggerHidden]\r\n\t\tIAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator()\r\n\t\t{\r\n\t\t\t<M>d__0<T> <M>d__;\r\n\t\t\tif (<>1__state == -2 && <>l__initialThreadId == Environment.CurrentManagedThreadId)\r\n\t\t\t{\r\n\t\t\t\t<>1__state = 0;\r\n\t\t\t\t<M>d__ = this;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t<M>d__ = new <M>d__0<T>(0); // make a new enumerator instance if needed\r\n\t\t\t}\r\n\t\t\t<M>d__.value = <>3__value; // copy parameters\r\n\t\t\treturn <M>d__;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t[AsyncStateMachine(typeof(<M>d__0<>))]\r\n\t[IteratorStateMachine(typeof(<M>d__0<>))]\r\n\tprivate static IAsyncEnumerable<T> M<T>(T value)\r\n\t{\r\n\t\t<M>d__0<T> <M>d__ = new <M>d__0<T>(-2);\r\n\t\t<M>d__.<>3__value = value; // save parameters\r\n\t\treturn <M>d__;\r\n\t}\r\n```"},{"Id":"8607745679","Type":"IssuesEvent","CreatedAt":"2018-11-18T02:35:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30275","RelatedDescription":"Closed issue \"Async-Streams: GetAsyncEnumerator should produce new instances when needed\" (#30275) at dotnet/roslyn","RelatedBody":"Using similar logic as regular async methods (ie. checking the state and the threadID), we can decide whether the current state machine can be used or re-used, or if we need to instantiate/initialize a new one."},{"Id":"8607566239","Type":"PullRequestEvent","CreatedAt":"2018-11-18T00:00:47","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31237","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#31237) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8606074769","Type":"IssuesEvent","CreatedAt":"2018-11-17T07:34:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6585","RelatedDescription":"Closed issue \"ILC Reported  FileLoadErrorGeneric: System.Data.Common when using [Newtonsoft.Json]\" (#6585) at dotnet/corert","RelatedBody":"This happened when I using CoreRT to build a static library, is it a something not done yet or am I doing anything wrong?\r\n\r\n![image](https://user-images.githubusercontent.com/29968862/48625983-a9ca6480-e9eb-11e8-83a3-38ba0bb8a53f.png)\r\n\r\n\r\n```\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.CanConvert(Type)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.WriteJson(JsonWriter,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.WriteJson(JsonWriter,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataTableConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.DataSetConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\nEXEC : warning : Method `[Newtonsoft.Json]Newtonsoft.Json.Converters.BinaryConverter.ReadJson(JsonReader,Type,object,JsonSerializer)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Data.Common [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\n  Microsoft (R) Library Manager Version 14.14.26433.0\r\n  Copyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n  \"/OUT:bin\\release\\netcoreapp2.1\\win-x64\\native\\Main.lib\"\r\n  \"obj\\release\\netcoreapp2.1\\win-x64\\native\\Main.obj\"\r\n  Main -> H:\\project\\newNuget\\HelloWorld\\bin\\release\\netcoreapp2.1\\win-x64\\publish\\\r\nC:\\Users\\h6hfhrht\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27116-01\\build\\Microsoft.NETCore.Native.Publish.targets(77,5): error MSB3030: Could not copy the file \"bin\\release\\netcoreapp2.1\\win-x64\\native\\Main.pdb\" because it was not found. [H:\\project\\newNuget\\HelloWorld\\Main.csproj]\r\n\r\n```"},{"Id":"8606067631","Type":"PullRequestEvent","CreatedAt":"2018-11-17T07:29:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6589","RelatedDescription":"Merged pull request \"Try to include System.Data.Common in the framework\" (#6589) at dotnet/corert","RelatedBody":""},{"Id":"8605151710","Type":"PullRequestEvent","CreatedAt":"2018-11-16T22:50:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6588","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6588) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"},{"Id":"8605151195","Type":"PullRequestEvent","CreatedAt":"2018-11-16T22:50:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6587","RelatedDescription":"Merged pull request \"Disambiguate Span indexer intrinsic\" (#6587) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/issues/21051 to CoreRT"},{"Id":"8604914044","Type":"PullRequestEvent","CreatedAt":"2018-11-16T21:50:56","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6590","RelatedDescription":"Opened pull request \"Further CPAOT infra fixes for release mode support\" (#6590) at dotnet/corert","RelatedBody":"1) Pass the proper configuration and architecture to msbuild when\r\nrestoring XUnitTooling so that it gets restored into the proper\r\nfolder - this fixes building the CoreCLR tests in release mode.\r\n\r\n2) Set the 'Optimize' property for Microsoft.NetCore.Native.targets\r\nin CoreCLR test and framework assembly build to actually make a\r\ndifference w.r.t. release codegen by passing '-O' to ILC.\r\n\r\n3) Update comments in the R2R test scripts to indicate we now\r\nsupport per-configuration output folders.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Top200 tests have approximately the same pass rate in\r\ndebug and release mode (debug reports 6~8 errors, release 8~9 errors\r\nin my local testing).\r\n\r\nFramework assembly compilation in release mode has somewhat worse\r\npass rate, 110 out of the 152 assemblies build amounting to about\r\n72% pass rate."},{"Id":"8603702036","Type":"PullRequestEvent","CreatedAt":"2018-11-16T17:37:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6589","RelatedDescription":"Opened pull request \"Try to include System.Data.Common in the framework\" (#6589) at dotnet/corert","RelatedBody":""},{"Id":"8603634291","Type":"PullRequestEvent","CreatedAt":"2018-11-16T17:24:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6588","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6588) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8603613099","Type":"PullRequestEvent","CreatedAt":"2018-11-16T17:20:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6586","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6586) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8606522900","Type":"PullRequestEvent","CreatedAt":"2018-11-17T13:01:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2675","RelatedDescription":"Opened pull request \"Update dependency files\" (#2675) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1062754536018898946","CreatedAt":"2018-11-14T17:10:01+00:00","UserScreenname":"dotnet","Text":"Hear the latest and greatest on the future of .NET and check out demos of #dotNET Core . You'll also get a chance t… https://t.co/yskyvl0xjt","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":78,"FavoriteCount":38,"RawContent":null}]}},"RunOn":"2018-11-18T05:30:43.7350701Z","RunDurationInMilliseconds":12124}