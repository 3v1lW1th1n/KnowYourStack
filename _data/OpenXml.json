{"Data":{"Sdk":{"Events":[{"Id":"10257286375","Type":"PullRequestEvent","CreatedAt":"2019-08-21T19:44:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/622","RelatedDescription":"Opened pull request \"Update System.Net.Http brought in by sdk\" (#622) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"10251944396","Type":"IssuesEvent","CreatedAt":"2019-08-21T07:53:27","Actor":"mathieumack","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/621","RelatedDescription":"Opened issue \"Insert of HTML content in a Table cell corrupt the generated document\" (#621) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [x] Issue with the OpenXml library\r\n\r\nWhen I try to insert an html content string in a table cell, the generated docx document is corrupted.\r\nThe same html content string inserted in a paragraph > Run outside a table is ok.\r\n\r\nPlease provide a simple description of the issue encountered.\r\n\r\n**Information**\r\n\r\n- .NET Target: .net Standard 2.0\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n**Repro**\r\n\r\nHtml string :\r\n```html\r\n<!DOCTYPE html><html><body><p><ul><li>The check list is xxxxxxxx</li></ul></p><p><ul><li>A xxxxxxxx</li></ul></p><p><table><tr><td>hello</td></tr></table></p></body></html>\r\n```\r\n\r\nWhen I try to embed this html content string in a MainDocument > Table > Cell > Paragraph element, the final document is corrupted.\r\nWhen I insert this html string in a MainDocument > Paragraph element, everything is ok.\r\n\r\nIn order to insert the html content, I use an AltChunk :\r\n\r\n```charp\r\nvar formatImportPart = (documentPart as MainDocumentPart).AddAlternativeFormatImportPart(AlternativeFormatImportPartType.Html);\r\n\r\nAltChunk altChunk = new AltChunk();\r\naltChunk.Id = documentPart.GetIdOfPart(formatImportPart);\r\n\r\nusing (MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(\"<set html content here>\")))\r\n{\r\n    formatImportPart.FeedData(ms);\r\n}\r\n\r\nOpenXmlElement paragraph = null;\r\nif (parent is DocumentFormat.OpenXml.Wordprocessing.Paragraph)\r\n{\r\n    paragraph = parent;\r\n}\r\nelse\r\n{\r\n    paragraph = parent.Ancestors<DocumentFormat.OpenXml.Wordprocessing.Paragraph>().FirstOrDefault();\r\n}\r\n\r\nif (paragraph != null)\r\n{\r\n    paragraph.InsertAfterSelf(altChunk);\r\n}\r\n```\r\n\r\nNote : When I try to remove the <table> element from my html content\r\n```html\r\n<!DOCTYPE html><html><body><p><ul><li>The check list is xxxxxxxx</li></ul></p><p><ul><li>A xxxxxxxx</li></ul></p><p>hello</p></body></html>\r\n```\r\n\r\nEverything is ok, the document can be opened.\r\nAny idea ? Thanks for your help."},{"Id":"10243221524","Type":"IssuesEvent","CreatedAt":"2019-08-20T07:38:24","Actor":"avonwyss","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/620","RelatedDescription":"Opened issue \"SectionProperties does not expose child elements as properties\" (#620) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nIn contrast to most other classes in the SDK, the [Wordprocessing SectionProperties](https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.wordprocessing.sectionproperties?view=openxml-2.8.1) does not expose the child elements as strongly-typed properties. This makes Wordprocessing sections even more difficult to use than they already are.\r\n\r\nLooking at the documentation, the allowed child elements for the last section and the section in the paragraphs do allow exactly the same child elements, to that should not be the reason for not exposing these as properties.\r\n\r\n**Information**\r\n\r\n- DocumentFormat.OpenXml Version: 2.8.1\r\n\r\n**Observed**\r\n\r\nThere are no strongly-typed properties for the elements bidi, cols, docGrid etc. available.\r\n\r\n**Expected**\r\n\r\nHaving strongly-typed properties for the elements bidi, cols, docGrid etc. available."},{"Id":"10229900590","Type":"IssuesEvent","CreatedAt":"2019-08-17T16:38:51","Actor":"PingPongSet","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/619","RelatedDescription":"Opened issue \"Get cell value via column name and other functionality with Open XML SDK\" (#619) at OfficeDev/Open-XML-SDK","RelatedBody":"I need to read a *.xlsx file using Open XML SDK, I wonder if the functionality below is available:\r\n\r\n1 Ability to read cell value using column name like below?\r\n\r\n  var row0ColA = row[0][\"ColA\"]\r\n  \r\n2 ability to read more than one tabs\r\n\r\n3 tab 1's header starts at row 2, tab 2's header starts  row 1\r\n\r\n4 Row filtering ideally before loading file\r\n\r\n5 Column filtering ideally before loading file\r\n\r\nAny code example would be appreicated!\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/office/open-xml/spreadsheets\r\n"},{"Id":"10218728389","Type":"IssuesEvent","CreatedAt":"2019-08-15T16:40:47","Actor":"mc2002tii","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/618","RelatedDescription":"Opened issue \"ChangeDocumentType does not fully remove vbaProject reference\" (#618) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI'm using the sample code at https://docs.microsoft.com/en-us/office/open-xml/how-to-convert-a-word-processing-document-from-the-docm-to-the-docx-file-format to remove macros from a docm file and convert it to docx because we have some filtering software in place that prevents transferring files with macros.\r\n\r\nUsing that sample code I delete the VbaProjectPart, change the document type, and change the file extension.  However, our filtering software identifies the resulting file as corrupt (Word 2016 opens the file just fine though, so it is probably within spec).\r\n\r\nWhen I examine the contents of the .docx file, I notice that the [Content_Types].xml file at the root   still contains the following line:\r\n<Default ContentType=\"application/vnd.ms-office.vbaProject\" Extension=\"bin\"/>\r\n\r\nThe VbaProjectPart PartName reference is gone and no other content in the .docx file structure contains any macro components.  I think that one line in [Content_Types].xml is enough to trip up our scanner.\r\n\r\nIs there some other way to get rid of this line that I'm missing, is this a bug, or is this structure just something that our scanning software should accept?\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 2.1.12\r\n- DocumentFormat.OpenXml Version: 2.10.0-beta0002\r\n\r\n**Repro**\r\n\r\n            bool fileChanged = false;\r\n\r\n            using (WordprocessingDocument document = WordprocessingDocument.Open(sourcePath, true))\r\n            {\r\n                // Access the main document part.\r\n                var docPart = document.MainDocumentPart;\r\n\r\n                // Look for the vbaProject part. If it is there, delete it.\r\n                var vbaPart = docPart.VbaProjectPart;\r\n                if (vbaPart != null)\r\n                {\r\n                    // Delete the vbaProject part and then save the document.\r\n                    docPart.DeletePart(vbaPart);\r\n                    docPart.Document.Save();\r\n\r\n                    // Track that the document has been changed.\r\n                    fileChanged = true;\r\n                }\r\n\r\n                // Change the document type to not macro-enabled\r\n                document.ChangeDocumentType(WordprocessingDocumentType.Document);\r\n            }\r\n\r\n            if (fileChanged)\r\n            {\r\n                // If it already exists, it will be deleted!\r\n                if (File.Exists(destinationPath))\r\n                    {\r\n                        File.Delete(destinationPath);\r\n                    }\r\n\r\n                // Rename the file and save changes\r\n                Directory.CreateDirectory(destinationDirectory);\r\n                File.Move(sourcePath, destinationPath);\r\n            }\r\n\r\n**Observed**\r\n\r\nfile.docx [Content_Types].xml still contains a macro reference.\r\n\r\n**Expected**\r\nfile.docx should not contain any references to macros.\r\n\r\n"},{"Id":"10211575778","Type":"IssuesEvent","CreatedAt":"2019-08-14T17:16:49","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/617","RelatedDescription":"Closed issue \"Is *.xlsb supported\" (#617) at OfficeDev/Open-XML-SDK","RelatedBody":"Is *.xlsb supported?"},{"Id":"10203541466","Type":"IssuesEvent","CreatedAt":"2019-08-13T17:50:09","Actor":"PingPongSet","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/617","RelatedDescription":"Opened issue \"Is *.xlsb supported\" (#617) at OfficeDev/Open-XML-SDK","RelatedBody":"Is *.xlsb supported?"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2019-08-27T05:30:46.537119Z","RunDurationInMilliseconds":990}