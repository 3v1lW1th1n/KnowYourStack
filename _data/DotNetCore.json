{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. Please avoid installing this update on Windows 7 or Windows Server 2008 R2. See .NET Framework January 2018 Rollup Known Issue...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7125995960","Type":"PullRequestEvent","CreatedAt":"2018-01-20T04:06:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15938","RelatedDescription":"Merged pull request \"Break current culture initialization cycle\" (#15938) at dotnet/coreclr","RelatedBody":"Fixes #15931"},{"Id":"7125995959","Type":"IssuesEvent","CreatedAt":"2018-01-20T04:06:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15931","RelatedDescription":"Closed issue \"[Arm64/Linux] New regression on tip\" (#15931) at dotnet/coreclr","RelatedBody":"Several tests are failing with\r\n```\r\nFailFast: Infinite recursion during resource lookup within System.Private.CoreLib.  \r\nThis may be a bug in System.Private.CoreLib, or potentially in certain extensibility points\r\nsuch as assembly resolve events or CultureInfo names.  \r\nResource name: Arg_NullReferenceException\r\n```\r\nList of affected tests\r\n```\r\nCoreMangLib/cti/system/double/DoubleToString2/DoubleToString2.sh\r\nInterop/MarshalAPI/String/StringMarshalingTest/StringMarshalingTest.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M09/b15307/b15307/b15307.sh\r\nJIT/Regression/CLR-x86-JIT/V1-M10/b04914/b04914/b04914.sh\r\nRegressions/common/ThreadCulture/ThreadCulture.sh\r\nRegressions/coreclr/0202/ThreadCulture/ThreadCulture.sh\r\nRegressions/coreclr/0570/Test570/Test570.sh\r\nRegressions/coreclr/0576/Test0576/Test0576.sh\r\nRegressions/coreclr/1402/Test1402/Test1402.sh\r\n```\r\n`git bisect bad f1c732878`\r\n`git bisect good 84efbc8`"},{"Id":"7125933218","Type":"PullRequestEvent","CreatedAt":"2018-01-20T03:14:01","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15947","RelatedDescription":"Opened pull request \"Optimize Span.Copy and Span.TryCopyTo\" (#15947) at dotnet/coreclr","RelatedBody":"See #15076 for perf measurements.\r\n\r\nThere are four specific optimizations being considered here.\r\n\r\n1. Tweak the flow graph of `TryCopyTo` (e.g., single return statement) to encourage code gen to inline the method.\r\n2. Remove the _fixed_ statement from the `CopyTo` core implementation in order to avoid the overhead of setting up pinned locals on the stack. This also allows code gen to perform a tail call rather than a standard call into the core _Memmove_ implementation.\r\n3. Accept `nuint` as a parameter to the `CopyTo` core implementation to take advantage of `TryCopyTo` being inlined, allowing code gen to be more efficient with how it emits `mov` / `movsxd` instructions.\r\n4. Create a ref-based `Memmove` implementation which is a sister to the pointer-based implementation. Right now only `Span` calls into this, but presumably other types like `Array` could be changed to do so.\r\n\r\nThe perf measurements in #15076 show how some of these interplay with each other. For example, the test case which copies a `Span<object>` doesn't benefit from removing _fixed_ (since code gen would've pruned that path), but it does benefit from the flow graph changes, so that can be used as an estimate for how much the flow graph changes alone contribute to the total performance profile of all test cases.\r\n\r\nI've done some basic correctness tests but **have not** performed proper testing of the _Memmove_ implementation. I've also not yet profiled this PR with overlapping buffers."},{"Id":"7125878584","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:33:35","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15946","RelatedDescription":"Opened pull request \"Add an optional integer offset to OwnedMemory Pin\" (#15946) at dotnet/coreclr","RelatedBody":"Identical to https://github.com/dotnet/coreclr/pull/15410 which was reverted here https://github.com/dotnet/coreclr/pull/15516 since it was not the cause of the build failures.\r\n\r\nThe fix is in corefx: https://github.com/dotnet/corefx/pull/25770#issuecomment-358660409\r\n\r\nResolves: https://github.com/dotnet/corefx/issues/25229\r\n\r\nRelated to https://github.com/dotnet/corefx/pull/25770\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina "},{"Id":"7125853689","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:15:34","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15903","RelatedDescription":"Merged pull request \"ARM: Fix morphing of struct passed on stack\" (#15903) at dotnet/coreclr","RelatedBody":"If a struct is passed on the stack, it must live on the stack, unless/until we support `GT_FIELD_LIST` for these args. This is unlikely to represent a significant code quality issue, since ARM supports many register args, and this has gone undetected thus far.\r\nThis was exposed by tailcall stress on desktop.\r\nI've added a test that exposes the issue without tailcall stress (though it gets a different assert than the desktop failure).\r\n\r\nIt seemed that `fgMorphMultiregStructArg()` was the best place to fix this - and I noted that this is called for any struct that is larger than a single register. So I updated the method names & comments to reflect that.\r\n\r\nI thought about putting the test in the JIT\\Regressions test directory, but I consider that it is addressing basic missing test coverage, so I added it to JIT\\Methodical\\structs."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7126086196","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8166","RelatedDescription":"Merged pull request \"Skipping GenerateResxSource task when building in design time build.\" (#8166) at dotnet/cli","RelatedBody":"Skipping GenerateResxSource task when building in design time build. This unblocks requiring a full build of the CLI before using VS.\r\n"},{"Id":"7126085689","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8429","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4825 into cli\" (#8429) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4825 into cli release/2.1.1xx branch"},{"Id":"7125756657","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:15:35","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8414","RelatedDescription":"Merged pull request \"[tools] Integrate NuGet\" (#8414) at dotnet/cli","RelatedBody":"Please review this change **by commit**.\r\n\r\nThe CI won't pass since I am pointing to a private NuGet build\r\n\r\nThe only WIP is to insert correct NuGet version after https://github.com/NuGet/NuGet.Client/pull/1900/ is merged. I hope to get this PR approved and merge it once NuGet is available. So I didn't make separate PRs.\r\n\r\nIt has \r\n\r\n* Update NuGet version. Rely on NuGet to filter TFM. And use asset.json to find entrypoint\r\n\r\n* Update XML file to per TFM\r\n\r\n* Add extra property to the fake project according to nuget\r\n\r\n* Treat nuget fallback folder as offline cache for tool\r\n\r\n* Require -g to install global tool #8395 "},{"Id":"7125640521","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:19:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8433","RelatedDescription":"Merged pull request \"Simplify the tool_launcher to build for just one version of .NET Framework\" (#8433) at dotnet/cli","RelatedBody":"As @nguerrera pointed out, we don't actually need to cross-target. A .NET Framework app can be configured to automatically roll forward from 3.5 to 4.5 by listing multiple supported runtime versions in app.config.\r\n\r\n"},{"Id":"7125501793","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:25:29","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8435","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1-4846 into cli\" (#8435) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into cli master branch"},{"Id":"7125489380","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:21:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8432","RelatedDescription":"Merged pull request \"Update to aspnetcore 2.1.0-preview1-28124\" (#8432) at dotnet/cli","RelatedBody":"Updates to the latest daily build of aspnetcore.\r\n\r\nSome changes since 28042\r\n - signalr added to the shared framework\r\n - changed Kestrel default back to Libuv\r\n - improvements to razor"},{"Id":"7125482560","Type":"IssuesEvent","CreatedAt":"2018-01-19T23:18:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/8317","RelatedDescription":"Reopened issue \"xunit test fail to load System.Reflection.Extensions when targeting netcoreapp1.0 and not referencing xunit.runner.visualstudio package\" (#8317) at dotnet/cli","RelatedBody":"As mentioned in https://github.com/xunit/xunit/issues/1601#issuecomment-354843968\r\n\r\n1. `dotnet new xunit`\r\n2. down targeting `netcoreapp1.0`\r\n3. upgrade xunit verions to `2.4.0-*`\r\n4. remove the `xunit.runner.visualstudio` package reference\r\n5. when restoring, use the xunit myget feed too: `https://www.myget.org/F/xunit/api/v3/index.json`\r\n6. `dotnet xunit`\r\n\r\n**Actual**:\r\n```\r\nDetecting target frameworks in repro.csproj...\r\nBuilding for framework netcoreapp1.0...\r\n  repro -> C:\\temp\\repro\\bin\\Debug\\netcoreapp1.0\\repro.dll\r\nRunning .NET Core 1.0.5 tests for framework netcoreapp1.0...\r\nerror: Could not load file or assembly 'System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n```\r\n\r\n**Expected**:\r\nThe removal of `xunit.runner.visualstudio` package shouldn't affect command line runs.\r\n\r\nIf we don't do step 4) then the test runs fine.\r\n\r\nDifferences in csproj/deps.json/asserts.json only shows the presence/absence of `xunit.runner.visualstudio` package. Nothing additional is restored by adding this package reference. @bradwilson suggested that .NET Core team should investigate.\r\n\r\nHere's the only diff in the csproj:\r\n\r\n![image](https://user-images.githubusercontent.com/7583839/34505898-20e7206c-efdd-11e7-986e-12a27923f1bb.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7125345817","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:35:27","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8434","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into cli\" (#8434) at dotnet/cli","RelatedBody":""},{"Id":"7125343380","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:43","Actor":"rohit21agrawal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/8435","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into cli master branch"},{"Id":"7125343077","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:37","Actor":"rohit21agrawal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8435","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into cli\" (#8435) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into cli master branch"},{"Id":"7125337456","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:32:58","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8435","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-preview1-4846 into cli\" (#8435) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into cli master branch"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7120169085","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:43:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/626","RelatedDescription":"Opened issue \"Trimming will break when SDK stops running RunResolvePackageDependencies\" (#626) at dotnet/standard","RelatedBody":"I chatted with @nguerrera and he mentioned that SDK will no longer run RunResolvePackageDependencies as part of the build for perf reasons.\r\n\r\nWe depend on the PackageDependencies item in trimming in order to construct the package graph and will no longer get them.\r\n\r\nWe should update the target sequencing so that we run RunResolvePackageDependencies ourselves in order to get these items.  We should be careful when doing this to not regress the non-SDK case which may not have the RunResolvePackageDependencies target."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7126074377","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:14:48","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26473","RelatedDescription":"Opened pull request \"Delete FileSystem abstraction\" (#26473) at dotnet/corefx","RelatedBody":""},{"Id":"7126073583","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:14:11","Actor":"rmkerr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26464","RelatedDescription":"Merged pull request \"Improve IRI tests for unknown schemes and unicode/reserved characters\" (#26464) at dotnet/corefx","RelatedBody":"This adds a test for a regression we recently saw in .NET Framework. It also makes minor improvements to other IRI tests.\r\n\r\nThe change removes two TODO comments that were not correct. They were based off of the reserved character set from RFC 2396 rather than the more up to date RFC 3986. Normalization definitely shouldn't produce the same result for escaped and unescaped URIs when those URIs contain reserved chars."},{"Id":"7126050724","Type":"IssuesEvent","CreatedAt":"2018-01-20T04:54:15","Actor":"MaxG117","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26472","RelatedDescription":"Opened issue \"Binary Serializing a DataTable with a DataColumn fails with SerializationException\" (#26472) at dotnet/corefx","RelatedBody":"Using older and the latest versions of .NET SDK (2.1.4) / .NET Core 2.0.5, the following code:\r\n```cs\r\nusing System;\r\nusing System.Data;\r\nusing System.IO;\r\nusing System.Runtime.Serialization.Formatters.Binary;\r\n\r\nnamespace MyBinarySerializer\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DataTable dt = new DataTable(\"MyTable\");\r\n            DataColumn dc = new DataColumn(\"dc\", typeof(Int32));\r\n            dt.Columns.Add(dc);\r\n            dt.RemotingFormat = SerializationFormat.Binary;\r\n\r\n            using (FileStream fs = new FileStream(\"MyTable.bin\", FileMode.Create))\r\n            {\r\n                BinaryFormatter bf = new BinaryFormatter();\r\n                bf.Serialize(fs, dt);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nresults in the following exception:\r\n```\r\nError Message:\r\n System.Runtime.Serialization.SerializationException : Type 'System.RuntimeType' in Assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e' is not marked as serializable.\r\nStack Trace:\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriterobjectWriter, SerializationBinder binder)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, BinaryFormatterWriter serWriter, Boolean fCheck)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Boolean check)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\n```\r\n\r\nI tried a few other types in the DataColumn to no avail. The code works under .NET Framework. It works when the DataTable is empty. It also works if I set `dt.RemotingFormat = SerializationFormat.Xml;` I've looked at #23213 and https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization, which doesn't list System.Data.DataColumn, but what's the point of serializing DataTable without DataColumn? Any suggestions?"},{"Id":"7126035556","Type":"PullRequestEvent","CreatedAt":"2018-01-20T04:40:47","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26471","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#26471) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126027732","Type":"PullRequestEvent","CreatedAt":"2018-01-20T04:33:53","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26461","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26461) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7125972632","Type":"PullRequestEvent","CreatedAt":"2018-01-20T03:46:33","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26463","RelatedDescription":"Merged pull request \"Enable ClientAndServer_OneOrBothUseDefault_Ok test\" (#26463) at dotnet/corefx","RelatedBody":"Protected against error in old versions of Windows and updated assert to\r\ninclude the case when hash algorithm can be Sha1.\r\n\r\nFixes #7812 (actual fix done on Windows, just re-enabling affected tests\r\nwith proper guard)"},{"Id":"7125972629","Type":"IssuesEvent","CreatedAt":"2018-01-20T03:46:33","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/7812","RelatedDescription":"Closed issue \"WinHttp buffer supplied to the function was too small error should not be exposed\" (#7812) at dotnet/corefx","RelatedBody":"http://dotnet-ci.cloudapp.net/job/dotnet_corefx/job/master/job/windows_nt_release_prtest/80/consoleFull\n\n```\n07:27:26      System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.UseCallback_BadCertificate_ExpectedPolicyErrors(url: \"https://wrong.host.badssl.com/\", expectedErrors: RemoteCertificateNameMismatch) [FAIL]\n07:27:26         System.Net.Http.HttpRequestException : An error occurred while sending the request.\n07:27:26         ---- System.Net.Http.WinHttpException : A security error occurred\n07:27:26         Stack Trace:\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs(392,0): at System.Net.Http.HttpClient.<FinishSendAsync>d__58.MoveNext()\n07:27:26            --- End of stack trace from previous location where exception was thrown ---\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.ServerCertificates.cs(174,0): at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<UseCallback_BadCertificate_ExpectedPolicyErrors>d__9.MoveNext()\n07:27:26            --- End of stack trace from previous location where exception was thrown ---\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            --- End of stack trace from previous location where exception was thrown ---\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            --- End of stack trace from previous location where exception was thrown ---\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            ----- Inner Stack Trace -----\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n07:27:26               at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n07:27:26            D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Http.WinHttpHandler\\src\\System\\Net\\Http\\WinHttpHandler.cs(843,0): at System.Net.Http.WinHttpHandler.<StartRequest>d__102.MoveNext()\n```\n"},{"Id":"7125894825","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:45:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26381","RelatedDescription":"Merged pull request \"Add MemoryExtensions Reverse API to get parity with array\" (#26381) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/25850\r\n\r\nImplementation is similar to Array.Reverse: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Array.cs#L1565-L1587\r\n\r\ncc @jkotas, @KrzysztofCwalina, @dotnet/corefxlab-contrib, @AtsushiKan "},{"Id":"7125894823","Type":"IssuesEvent","CreatedAt":"2018-01-20T02:45:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25850","RelatedDescription":"Closed issue \"Add MemoryExtension APIs to get parity with array APIs\" (#25850) at dotnet/corefx","RelatedBody":"As part of completing the  MemoryExtensions feature - https://github.com/dotnet/corefx/issues/24880 - here are the proposed Span extension APIs that should get added to get parity with the available APIs on array.\r\n\r\n## Proposed API Additions\r\n```C#\r\npublic static class MemoryExtensions\r\n{\r\n    // Slice + CopyTo APIs can be used instead, hence we don't need the overloads\r\n    //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, Span<T> destinationSpan, int length);\r\n    //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);\r\n    \r\n    // Span CopyTo API is already \"constrained\" in that if it throws an exception, the destination remains unchanged. Hence, we don't need this API\r\n    //public static void ConstrainedCopy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);\r\n    \r\n    public static bool Exists<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n\r\n    public static T Find<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    public static int FindIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    // Slice the span before calling the method above, hence we don't need the overloads\r\n    //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);\r\n    //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);\r\n    \r\n    public static T FindLast<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    public static int FindLastIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    // Slice the span before calling the method above, hence we don't need the overloads\r\n    //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);\r\n    //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);\r\n    \r\n    // Requires allocation\r\n    public static T[] FindAll<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n    // Alternative to avoid allocation\r\n    public static bool TryFindAll<T>(this ReadOnlySpan<T> span, Predicate<T> match, Span<T> result);\r\n\r\n    public static void Reverse<T>(this Span<T>);\r\n    // Slice the span before calling the method above, hence we don't need the overload\r\n    //public static void Reverse<T>(this Span<T>, int index, int length); \r\n\r\n    public static bool TrueForAll<T>(this ReadOnlySpan<T> span, Predicate<T> match);\r\n\r\n}\r\n```\r\n\r\n\r\n## Sample Usage and Rationale\r\nThe API usage should be almost identical to the Array API usage. Getting API parity with array makes it easier for customers to port their array-based code to Span wherever possible.\r\n\r\nExample sample usage:\r\n```C#\r\npublic static void UseTrueForAll()\r\n{\r\n    ReadOnlySpan<string> values1 = new string[] { \"Y2K\", \"A2000\", \"DC2A6\", \"MMXIV\", \"0C3\" };\r\n    ReadOnlySpan<string> values2 = new string[] { \"Y2\", \"A2000\", \"DC2A6\", \"MMXIV_0\", \"0C3\" };\r\n\r\n    Assert.False(values1.TrueForAll(value => \r\n    {\r\n        return int.TryParse(value.Substring(value.Length - 1), out int s);\r\n    }));\r\n    Assert.True(values2.TrueForAll(value => \r\n    {\r\n        return int.TryParse(value.Substring(value.Length - 1), out int s);\r\n    }));\r\n\r\n    Assert.False(values1.TrueForAll(EndsWithANumber));\r\n    Assert.True(values2.TrueForAll(EndsWithANumber));\r\n}\r\n\r\nprivate static bool EndsWithANumber(string value)\r\n{\r\n    return int.TryParse(value.Substring(value.Length - 1), out int s);\r\n}\r\n```\r\n\r\ncc @KrzysztofCwalina, @dotnet/corefxlab-contrib, @stephentoub, @jkotas "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7125875471","Type":"IssuesEvent","CreatedAt":"2018-01-20T02:31:15","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24357","RelatedDescription":"Opened issue \"Assertion failed\" (#24357) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nPrivate build.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nUnknown kind: TupleType\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareTypes(TypeSyntax oldType, TypeSyntax newType) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 828\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareNames(NameSyntax oldName, NameSyntax newName) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 758\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareTypes(TypeSyntax oldType, TypeSyntax newType) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 825\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareMethodDeclarations(BaseMethodDeclarationSyntax oldMethod, BaseMe......\r\n\r\n<truncated>\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n```\r\n\r\nMemory dump:\r\n%internal_share%\\public\\tomat\\Roslyn"},{"Id":"7125869953","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:27:12","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24356","RelatedDescription":"Opened pull request \"correcting xUnit target path\" (#24356) at dotnet/roslyn","RelatedBody":"Fixes a path to xUnit.Runner.Console NuGet package.\r\nPlease let me know if an ask mode template should be filled for this.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7125782712","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:30:16","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24355","RelatedDescription":"Opened pull request \"Constrains availability of ref conditional expressions to language versions 7.2 and higher\" (#24355) at dotnet/roslyn","RelatedBody":"Constrains availability of ref conditional expressions to language versions 7.2 and higher\r\n\r\nFixes:#24306\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7125782332","Type":"IssuesEvent","CreatedAt":"2018-01-20T01:30:05","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24191","RelatedDescription":"Closed issue \"GoTo order for types and members is wrong when doing camel case search\" (#24191) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 2017 15.6 Preview2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new C# console app\r\n2. Add 2 new classes to the project: EditorActiveComponentHostStub and EditorCommandHandlerService\r\n3. Ctrl+T, search ECHS\r\n\r\n**Expected Behavior**: I'm looking for **E**ditor**C**ommand**H**andler**S**ervice class and ECHS matches it with exact camel case match, so I expect both file and class to be top results. EditorActiveComponentHostStub also matches ECHS term, but with partial camel case match so I expect it to lower in the result list.\r\n\r\nThe expected result order **is:**\r\n**E**ditor**C**ommand**H**andler**S**ervice.cs (file)\r\n**E**ditor**C**ommand**H**andler**S**ervice (class)\r\n**E**ditorActive**C**omponent**H**ost**S**tub.cs (file)\r\n**E**ditorActive**C**omponent**H**ost**S**tub (class)\r\n\r\n**Actual Behavior**: EditorCommandHandlerService class is on the bottom of the result list:\r\n**E**ditor**C**ommand**H**andler**S**ervice.cs (file)\r\n**E**ditorActive**C**omponent**H**ost**S**tub.cs (file)\r\n**E**ditorActive**C**omponent**H**ost**S**tub (class)\r\n**E**ditor**C**ommand**H**andler**S**ervice (class)\r\n\r\n**Proposed fix:** Roslyn NavigateTo provider should use (new in VS 2017 15.6) NavigateToItem constructor, which accepts Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind and allows to report more specific match kind.\r\n"},{"Id":"7125746096","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:10:10","Actor":"chborl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24193","RelatedDescription":"Merged pull request \"Patternmatchingapichange\" (#24193) at dotnet/roslyn","RelatedBody":"fixes https://github.com/dotnet/roslyn/issues/24191\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\nWhen using NavigateTo, user can enter camel case patterns.  This fix improves the order that the matches are displayed, bringing more specific matches to the top of the list.\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24191\r\n\r\n### Workarounds, if any\r\nCamel case search patterns may not give desired results, so use would have to search using the full name\r\n\r\n### Risk\r\nlow\r\n\r\n### Performance impact\r\nno perf impact\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nNothing missed, this is an improvement to existing feature.\r\n\r\n### How was the bug found?\r\nimprovement to existing feature\r\n\r\n### Test documentation updated?\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"},{"Id":"7125690617","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:42:33","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24313","RelatedDescription":"Merged pull request \"Update string text for keybindings reset.\" (#24313) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhen a customer disables an extension that messes up keybindings, the displayed notification can cause confusion as to what actually broke the bindings.\r\n\r\n### Bugs this fixes\r\n\r\nN/A\r\n\r\n### Workarounds, if any\r\n\r\nNone\r\n\r\n### Risk\r\n\r\nLittle. This just updates the text of a gold bar and adds a call to string.Format.\r\n\r\n### Performance impact\r\n\r\nNone. Only new code is a call to string.Format.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nN/A\r\n\r\n### Root cause analysis\r\n\r\nN/A\r\n\r\n### How was the bug found?\r\n\r\nN/A\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n</details>\r\n"},{"Id":"7125671366","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:33:37","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24269","RelatedDescription":"Closed pull request \"WIP: #23865\" (#24269) at dotnet/roslyn","RelatedBody":""},{"Id":"7125670507","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:33:16","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24197","RelatedDescription":"Closed pull request \"WIP: Active Statement Handling\" (#24197) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7123891406","Type":"PullRequestEvent","CreatedAt":"2018-01-19T16:49:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5264","RelatedDescription":"Merged pull request \"Rollback normalization\" (#5264) at dotnet/corert","RelatedBody":"Things still didn't work right on the CoreRT side with the unnormalized `VTableSliceNode` so I just decided to roll all of this back.\r\n\r\nAt some point when I have more time for this I'll definitely want to investigate why we need unnormalized things in the graph, but this will do for now.\r\n\r\nFirst 4 are just rollback commits (no need to review, really), the last one is the alternative fix for what I was trying to fix with the normalization."},{"Id":"7123873423","Type":"PullRequestEvent","CreatedAt":"2018-01-19T16:46:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5263","RelatedDescription":"Merged pull request \"Fix MethodDesc.ToString in runtime type loader\" (#5263) at dotnet/corert","RelatedBody":"The full `ToString` implementation includes the signature to help diagnosability, but the runtime type loader might not be able to provide that information.\r\n\r\nStop including MethodDesc.ToString.cs in the runtime type loader and restore old overrides on `MethodForInstantiatiatedType` and `InstantiatedMethod` that got deleted in #5065 (but only for the runtime type loader).\r\n\r\nAlso fixing up the the project file:\r\n* The tracing options should also be available in CoreRT\r\n* Deleting `TYPE_SYSTEM_SINGLE_THREADED` that got introduced in TFS changeset 1553623 and got never used for anything"},{"Id":"7123194235","Type":"PullRequestEvent","CreatedAt":"2018-01-19T14:41:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5266","RelatedDescription":"Opened pull request \"Remove overly aggressive assert\" (#5266) at dotnet/corert","RelatedBody":"It's possible to reach this code path with no native layout information available with this stack:\r\n\r\n```\r\nreproNative.exe!S_P_TypeLoader_Internal_TypeSystem_NoMetadata_NoMetadataType__get_BaseType() Line 97\tUnknown\tSymbols loaded.\r\nreproNative.exe!S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeBuilder__PrepareBaseTypeAndDictionaries() Line 366\tUnknown\tSymbols loaded.\r\nreproNative.exe!S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeBuilder__PrepareType() Line 331\tUnknown\tSymbols loaded.\r\nreproNative.exe!S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeBuilder__BuildType() Line 1622\tUnknown\tSymbols loaded.\r\nreproNative.exe!S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeBuilder__TryBuildGenericType() Line 1987\tUnknown\tSymbols loaded.\r\nreproNative.exe!S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__TryGetConstructedGenericTypeForComponents() Line 387\tUnknown\tSymbols loaded.\r\n```\r\n\r\nThe assert seems overly aggressive - we're going to throw a `MissingTemplateException` a couple lines below and do the right thing for that code path."},{"Id":"7122782040","Type":"IssuesEvent","CreatedAt":"2018-01-19T13:12:48","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5265","RelatedDescription":"Opened issue \"OSX 10.9 support / libicui18n\" (#5265) at dotnet/corert","RelatedBody":"When running a corert-based app on OSX 10.9, I get the following error:\r\n\r\n```\r\nCannot get symbol ucol_setMaxVariable from libicui18n\r\nAbort trap: 6\r\n```\r\n\r\nIs there any way to link a version of libicui18n statically with corert to make it work on 10.9? I know that there probably isn't gonna be official support for 10.9 but since many of our customers are on old systems, it would be great to get a starting point on how to debug this, so we at least could make it work in a fork.\r\n\r\n"},{"Id":"7122636199","Type":"PullRequestEvent","CreatedAt":"2018-01-19T12:37:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5264","RelatedDescription":"Opened pull request \"Rollback normalization\" (#5264) at dotnet/corert","RelatedBody":"Things still didn't work right on the CoreRT side with the unnormalized `VTableSliceNode` so I just decided to roll all of this back.\r\n\r\nAt some point when I have more time for this I'll definitely want to investigate why we need unnormalized things in the graph, but this will do for now.\r\n\r\nFirst 4 are just rollback commits (no need to review, really), the last one is the alternative fix for what I was trying to fix with the normalization."},{"Id":"7122323680","Type":"PullRequestEvent","CreatedAt":"2018-01-19T11:19:06","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5263","RelatedDescription":"Opened pull request \"Fix MethodDesc.ToString in runtime type loader\" (#5263) at dotnet/corert","RelatedBody":"The full `ToString` implementation includes the signature to help diagnosability, but the runtime type loader might not be able to provide that information.\r\n\r\nStop including MethodDesc.ToString.cs in the runtime type loader and restore old overrides on `MethodForInstantiatiatedType` and `InstantiatedMethod` that got deleted in #5065 (but only for the runtime type loader).\r\n\r\nAlso fixing up the the project file:\r\n* The tracing options should also be available in CoreRT\r\n* Deleting `TYPE_SYSTEM_SINGLE_THREADED` that got introduced in TFS changeset 1553623 and got never used for anything"},{"Id":"7121072885","Type":"PullRequestEvent","CreatedAt":"2018-01-19T05:29:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5262","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5262) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7120730676","Type":"PullRequestEvent","CreatedAt":"2018-01-19T02:58:15","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5262","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5262) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7120625840","Type":"PullRequestEvent","CreatedAt":"2018-01-19T02:18:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5261","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5261) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7120479793","Type":"PullRequestEvent","CreatedAt":"2018-01-19T01:27:19","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5261","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5261) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7125844722","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:09:35","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1876","RelatedDescription":"Merged pull request \"Merge release/2.1 into master\" (#1876) at dotnet/sdk","RelatedBody":""},{"Id":"7125754877","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:14:40","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125733087","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:20","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1878","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1878) at dotnet/sdk","RelatedBody":"@livarcocc \r\ncc @rrelyea "},{"Id":"7125732685","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:08","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Closed pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125635540","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:43","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1877","RelatedDescription":"Merged pull request \"Merge release/2.0.0 into release/2.1\" (#1877) at dotnet/sdk","RelatedBody":""},{"Id":"7125635452","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:41","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1875","RelatedDescription":"Merged pull request \"Updating repo-toolset to 1.0.0-beta-62519-01\" (#1875) at dotnet/sdk","RelatedBody":"Had to update to a new .NET Build Feed task version and update the publish proj to start importing a new props file that the feed task is providing."},{"Id":"7125587857","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:58:42","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Opened pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125536002","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:38:11","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1880","RelatedDescription":"Closed pull request \"WIP test ci\" (#1880) at dotnet/sdk","RelatedBody":""},{"Id":"7125443645","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:05:13","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1880","RelatedDescription":"Opened pull request \"WIP test ci\" (#1880) at dotnet/sdk","RelatedBody":""},{"Id":"7125343539","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:46","Actor":"rohit21agrawal","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125342015","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:20","Actor":"rohit21agrawal","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125334335","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:32:06","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"953279226869960704","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/ZtyD9ubcE6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"952185961085067266","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/kXZpzdtOqA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":57,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2018-01-20T05:30:21.8609358Z","RunDurationInMilliseconds":8294}