{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7035901395","Type":"PullRequestEvent","CreatedAt":"2017-12-28T04:23:27","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15653","RelatedDescription":"Merged pull request \"Updated CreateMethodDesc to pass along the `IsJitIntrinsic` flag for generic methods.\" (#15653) at dotnet/coreclr","RelatedBody":"The flag was not being passed along, which caused some generic named intrinsics to not be recognized as such."},{"Id":"7035755585","Type":"PullRequestEvent","CreatedAt":"2017-12-28T02:57:37","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15653","RelatedDescription":"Opened pull request \"Updated CreateMethodDesc to pass along the `IsJitIntrinsic` flag for generic methods.\" (#15653) at dotnet/coreclr","RelatedBody":"The flag was not being passed along, which caused some generic named intrinsics to not be recognized as such."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7035173150","Type":"IssuesEvent","CreatedAt":"2017-12-27T21:39:07","Actor":"nategraf","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8299","RelatedDescription":"Opened issue \"dotnet publish leaves dangling dangling process with open handles\" (#8299) at dotnet/cli","RelatedBody":"Between December 19 at 7:32am and December 20 at 7:32 am the [size-on-disk benchmark job](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/sizeondisk_x64/) began to fail. After some investigation I found that after the benchmark finishes it fails to delete the temporary directory because there are open handles to files within. The open handles are held by an orphan `dotnet` process spawned from the `dotnet publish` command.\r\n\r\n## Steps to reproduce\r\n0. Confirm there are no `dotnet` processes running\r\n1. Install dotnet with the powershell script using channel 'master'\r\n2. Create a new console application with `dotnet new console`\r\n3. Publish this app with `dotnet publish`\r\n4. Check for any running dotnet processes\r\n\r\nOr download and run the [reduced version of the failing benchmark](https://git.io/vbdxI)\r\n\r\n## Expected  behavior\r\nNo `dotnet` processes should be running and the benchmark should cleanup and exit successfully\r\n\r\n## Actual behavior\r\nAn orphan `dotnet` process with open handles is running and the benchmark will fail\r\n\r\n## Environment data\r\ndotnet version is latest master\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n\r\n\r\n\r\n\r\n"},{"Id":"7033189801","Type":"IssuesEvent","CreatedAt":"2017-12-27T09:23:44","Actor":"AymanGaafar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8298","RelatedDescription":"Opened issue \"dotnet publish does not work with full name parameters (output, runtime)\" (#8298) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nPublishing a project with at least one of `--output` or `--runtime` parameters as fullname.\r\n\r\n## Expected  behavior\r\nPublish to work normally like:\r\n`dotnet publish PROJECT_DIR -o PUBLISH_DIR -r linux-x64`\r\n\r\n## Actual behavior\r\nWhen publishing like this\r\n\r\n`dotnet publish PROJECT_DIR --output PUBLISH_DIR -r linux-x64`\r\nOR\r\n`dotnet publish PROJECT_DIR -o PUBLISH_DIR --runtime linux-x64`\r\nOR\r\n`dotnet publish PROJECT_DIR --output PUBLISH_DIR --runtime linux-x64`\r\n\r\nthrows an exception when invoking `dotnet` on the main dll:\r\n```\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nAborted\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7032962367","Type":"PullRequestEvent","CreatedAt":"2017-12-27T08:00:39","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8297","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8297) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171227-080037\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171227-080037 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7032106186","Type":"IssuesEvent","CreatedAt":"2017-12-27T00:04:09","Actor":"HaythemJ","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8296","RelatedDescription":"Opened issue \"node_modules folder is not published\" (#8296) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet core 2.0\r\nVisual Studio 2017 15.5.1\r\nPublish Web Application\r\n\r\n## Expected  behavior\r\nfolder with name node_modules should be published like any other folder\r\n\r\n## Actual behavior\r\nfolder with name node_modules is not published\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n\r\nI have a Web Application where I put Javascript files under wwwroot/lib/vendors/ like below:\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34366814-94801e48-eaa1-11e7-9466-b44317333e25.png)\r\n\r\nWhen publishing the folder wwwroot/lib/vendors/node_modules is not published in the output folder which leads to missing libraries.\r\n\r\nIs there a way to force the publish of that folder?\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7031553002","Type":"IssuesEvent","CreatedAt":"2017-12-26T18:40:14","Actor":"shishirsasal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8295","RelatedDescription":"Opened issue \"Unable to resolve .NETFRameWork reference in .NETCore solution\" (#8295) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Download roslyn - https://github.com/dotnet/roslyn\r\n2. Trying to build the whole solution\r\n\r\n## Expected  behavior\r\nBuild successful\r\n\r\n## Actual behavior\r\nThrows error\r\nError\tMSB3644\tThe reference assemblies for framework \".NETFramework,Version=v4.6.1\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\tCSharpCodeStyleTests\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\t1122\t\r\n\r\n## Environment data\r\nHave installed .NETCore 2.0 SDK\r\nHave installed .NETFramework4.6,.NETFramework4.6.1\r\n\r\nNOTE: All other projects are referring .NETFrameWork 4.6.1 except the one shown in below attachment\r\n\r\n![gitissue](https://user-images.githubusercontent.com/34867438/34362487-17863956-ea9a-11e7-8e8e-57c2ec3572d5.PNG)\r\n\r\n\r\n\r\n\r\n"},{"Id":"7030142767","Type":"PullRequestEvent","CreatedAt":"2017-12-26T08:00:37","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8294","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8294) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171226-080036\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171226-080036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7035640765","Type":"IssuesEvent","CreatedAt":"2017-12-28T01:54:35","Actor":"rexcfnghk","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Opened issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that takes `IFoo` as a constructor parameter, like:\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\nNote that I have a parameterless contructor for `DummyController`.\r\n6. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`Autofac.Core.DependencyResolutionException` is thrown.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n1. Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n2. Moving the initialising of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"},{"Id":"7035205864","Type":"IssuesEvent","CreatedAt":"2017-12-27T21:53:55","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/608","RelatedDescription":"Closed issue \"Proposal: add GetEnvironmentVariableAsBool to netstandard\" (#608) at dotnet/standard","RelatedBody":"Currently the dotnet cli has a function which is located at: [src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs Line 106](https://github.com/dotnet/cli/blob/fffe3142ad8043743d83885df2166fd2f80dceca/src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs#L106)\r\n\r\nI think it would be useful to consider this functionality for inclusion into the `System.Environment` namespace.\r\n\r\nThis issue is to raise the idea and garner discussion. I do not believe it would conflict with anything already present, though I've not performed a thorough examination to prove it."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7035675292","Type":"PullRequestEvent","CreatedAt":"2017-12-28T02:13:34","Actor":"kassemsandarusi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26083","RelatedDescription":"Opened pull request \"Changing XPathNodeIterator to implement IEnumerable<XPathNodeNavigator>.\" (#26083) at dotnet/corefx","RelatedBody":"Closes #1593."},{"Id":"7035586566","Type":"PullRequestEvent","CreatedAt":"2017-12-28T01:22:57","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26082","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26028-01, preview1-26027-02, respectively (master)\" (#26082) at dotnet/corefx","RelatedBody":""},{"Id":"7035460906","Type":"IssuesEvent","CreatedAt":"2017-12-28T00:07:48","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26055","RelatedDescription":"Closed issue \"Tests under \"System.Text.RegularExpressions.Tests\" failed with \"Exit code was 131 but it should have been 42\"\" (#26055) at dotnet/corefx","RelatedBody":"failed test: RegexMatchTests.Match_SpecialUnicodeCharacters_Invariant\r\nConfiguration: oxs10.12_release\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/lastCompletedBuild/testReport/System.Text.RegularExpressions.Tests/RegexMatchTests/Match_SpecialUnicodeCharacters_Invariant/\r\nMESSAGE:\r\nExit code was 131 but it should have been 42\\nExpected: True\\nActual: False\r\n~~~~~~\r\nSTACK TRACE:\r\nat System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 186"},{"Id":"7035455495","Type":"IssuesEvent","CreatedAt":"2017-12-28T00:04:17","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/18907","RelatedDescription":"Closed issue \"Test failure: System.Net.Sockets.Tests.SendReceiveUdpClient/SendToRecvFromAsync_Datagram_UDP_UdpClient(loopbackAddress: 127.0.0.1)\" (#18907) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.Sockets.Tests.SendReceiveUdpClient/SendToRecvFromAsync_Datagram_UDP_UdpClient(loopbackAddress: 127.0.0.1)` has failed.\n\nSystem.AggregateException : One or more errors occurred. (Assert.True() Failure\n    Expected: True\n    Actual:   False) (Assert.True() Failure\n    Expected: True\n    Actual:   False)\n    ---- Assert.True() Failure\n    Expected: True\n    Actual:   False\n    ---- Assert.True() Failure\n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n           at System.ThrowHelper.ThrowAggregateException(List`1 exceptions)\n       at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)\n       at System.Net.Sockets.Tests.SendReceiveUdpClient.SendToRecvFromAsync_Datagram_UDP_UdpClient(IPAddress loopbackAddress)\n    ----- Inner Stack Trace #1 (Xunit.Sdk.TrueException) -----\n       at System.Net.Sockets.Tests.SendReceiveUdpClient.<>c__DisplayClass0_1.<<SendToRecvFromAsync_Datagram_UDP_UdpClient>b__0>d.MoveNext()\n    ----- Inner Stack Trace #2 (Xunit.Sdk.TrueException) -----\n       at System.Net.Sockets.Tests.SendReceiveUdpClient.<>c__DisplayClass0_1.<<SendToRecvFromAsync_Datagram_UDP_UdpClient>b__1>d.MoveNext()\nBuild : Master - 20170425.01 (Portable Core Tests)\nFailing configurations:\n- fedora.25.amd64-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170425.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveUdpClient~2FSendToRecvFromAsync_Datagram_UDP_UdpClient(loopbackAddress:%20127.0.0.1)"},{"Id":"7035453457","Type":"PullRequestEvent","CreatedAt":"2017-12-28T00:03:06","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26063","RelatedDescription":"Merged pull request \"port test fixes from master\" (#26063) at dotnet/corefx","RelatedBody":"This is port of fixes for flaky networking tests ( #18907 #23533)\r\n\r\nOriginal PR: \r\n#24615\r\n#24099\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7035578402","Type":"IssuesEvent","CreatedAt":"2017-12-28T01:18:07","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/17567","RelatedDescription":"Closed issue \"Add Oct 21, 2013 design notes to GitHub\" (#17567) at dotnet/roslyn","RelatedBody":"Add a link for this comment or delete\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Compiler/Compiler.cs#L769\r\n\r\n/cc @gafter "},{"Id":"7035576422","Type":"IssuesEvent","CreatedAt":"2017-12-28T01:16:54","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23951","RelatedDescription":"Opened issue \"Compiler should emit `localinits` when method body contains `stackalloc`\" (#23951) at dotnet/roslyn","RelatedBody":"\r\nCurrently the `localinits` is triggered by the presence of IL locals. However the flag has effect on everything that is allocated from local frame, including `stackalloc`.\r\n\r\nNOTE: the absence of the flag results in stackallocated data containing nondeterministic garbage and as such emitting the flag is not compat breaking.\r\n\r\nWhile the language spec does not specify or require that, stackallocated memory is nearly always zero-inited and users often take dependency on that. Suddenly not emitting the flag could result in bugs that are very hard to reproduce.\r\nWe should make sure that the flag is emitted in _all_ cases and document the default behavior as such.\r\n\r\nNOTE: the cases with opposite expectations are also known -\r\nSome users use this bug as a way to avoid costs of zeroing out stack-allocated memory. We should provide a more stable and documented way to do that.  \r\n\r\nRelying on essentially a bug that is triggered by unstable condition such as absence of IL locals is not a maintainable strategy anyways."},{"Id":"7035550526","Type":"PullRequestEvent","CreatedAt":"2017-12-28T01:01:25","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23950","RelatedDescription":"Opened pull request \"[WIP] VB Feature (PROTOTYPE) EnumFlagsExpression.\" (#23950) at dotnet/roslyn","RelatedBody":"Initial work on a prototype implementation of EnumFlagsExpression. ([VBLang Issue](https://github.com/dotnet/vblang/issues/228))"},{"Id":"7035538637","Type":"IssuesEvent","CreatedAt":"2017-12-28T00:54:41","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/17567","RelatedDescription":"Reopened issue \"Add Oct 21, 2013 design notes to GitHub\" (#17567) at dotnet/roslyn","RelatedBody":"Add a link for this comment or delete\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Compiler/Compiler.cs#L769\r\n\r\n/cc @gafter "},{"Id":"7035537987","Type":"IssuesEvent","CreatedAt":"2017-12-28T00:54:15","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/17567","RelatedDescription":"Closed issue \"Add Oct 21, 2013 design notes to GitHub\" (#17567) at dotnet/roslyn","RelatedBody":"Add a link for this comment or delete\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Compiler/Compiler.cs#L769\r\n\r\n/cc @gafter "},{"Id":"7035451126","Type":"IssuesEvent","CreatedAt":"2017-12-28T00:01:47","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13604","RelatedDescription":"Closed issue \"[Proposal] Stringly typed macros\" (#13604) at dotnet/roslyn","RelatedBody":"Hi,\n\nI was thinking about the proposed generators. Can this not be expanded to macros?\n\nIn the sense of LISP/Scala/Rust macros.\n\nI was thinking of a syntax similar to Rust (note the '!'): \n\n```\nclass Example\n{\n    NotifyPropertyChanged!(public int Id {get; set;})\n}\n```\n\nThe macro is defined in another, already compiled dll, **similar to analyzers**. We could even reuse the same infrastructure.\n\nEg:\n\n``` csharp\n[Macro]\npublic static class Macros\n{\n    public PropertyNode NotifyPropertyChanged(PropertyNode node)\n   {\n   }\n}\n```\n\nNB: I typed this from my phone, I am not sure of exact Node names but you get the point.\n"},{"Id":"7035447194","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:59:40","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/3342","RelatedDescription":"Closed issue \"Should it be possible to use getter-only auto-properties to explicitly implement an interface property?\" (#3342) at dotnet/roslyn","RelatedBody":"Someone at Stack Overflow suggested I raise an issue here.\n\nIf I have an interface implementation like this:\n\n```\npublic interface IFoo \n{\n    string TestFoo { get; } \n}\n```\n\nAnd I wanted to implement it explicitly using the new C# 6 getter-only auto-properties:\n\n```\npublic class Impl : IFoo\n{\n    // This was not possible in C# 5, but now works.\n    string IFoo.TestFoo { get; }\n\n    public Impl(string value)\n    {\n        // ERROR: Property or indexer 'IFoo.TestFoo' cannot be assigned to -- it is read only.\n        ((IFoo)this).TestFoo = value;\n    }\n}\n```\n\nI was expecting this to work, since I am assigning a value in the constrcutor. It seems the compiler is not happy with the cast, though. The error can be seen as a comment in the code, but here it is again:\n\n> Property or indexer 'IFoo.TestFoo' cannot be assigned to -- it is read only.\n\nNote that if the returned value does not change and can be assigned at initialization, the following code works fine (as suggested by Daniel White as an answer in the Stack Overflow question):\n\n```\nstring IFoo.TestFoo { get; } = \"Value to return\";\n```\n\n[Link to Stack Overflow question for reference](http://stackoverflow.com/questions/30672761/explicit-implementation-of-an-interface-using-a-getter-only-auto-property-c-6).\n"},{"Id":"7035440607","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:55:31","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13347","RelatedDescription":"Closed issue \"Namespace Redirection.\" (#13347) at dotnet/roslyn","RelatedBody":"# Namespace Redirection\n\nAllow the coder to update and refactor public apis without breaking compatibility.\n\n``` vb\nNamespace Global.Foo\n\n  <Redirected( Global.Foo.Bar)>\n  Class Baz\n\n  End Class\n\nEnd Namespace\n```\n\nThis treats `Global.Foo.Baz` as if coming from `Global.Foo.Bar.Baz`\n"},{"Id":"7035437078","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:53:24","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/140","RelatedDescription":"Closed issue \"[Proposal] (Minor) Method groups for constructors\" (#140) at dotnet/roslyn","RelatedBody":"#### Problem\n\nThis is a very small thing, but a small inconsistency still might be worth resolving.\n\nConsider the following:\n\n``` csharp\nvar ys = xs.Select(New.Y);\n```\n\nNow I want to create `Y` using constructor:\n\n``` csharp\nvar ys = xs.Select(x => new Y(x));\n```\n\nInconsistent, not as convenient (especially if that's not just a single parameter).\n#### Proposed solution\n\nGenerate method groups from constructors.\nI am not sure what the syntax would be, but here is an option:\n\n``` csharp\nvar ys = xs.Select(new Y);\n```\n"},{"Id":"7035436219","Type":"PullRequestEvent","CreatedAt":"2017-12-27T23:52:56","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23949","RelatedDescription":"Opened pull request \"Improve diagnostic when decoding tuples but VT is missing\" (#23949) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nUse a type that implements an interface that involves named tuples, but don't reference the assembly which defines `ValueTuple` types. \r\nThe interface that involves named tuples will be substituted with an error type with no details. This results in confusing error, such as `error CS0648: '' is a type not supported by the language`\r\n\r\nBut in some cases, the compilation should not even fail (if the interface doesn't end-up being used). And in some cases it should fail, but with an error reporting the missing `ValueTuple` type.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/21727\r\n\r\n### Workarounds, if any\r\nAdd the missing reference. But the diagnostics don't offer much guidance...\r\n\r\n### Risk\r\n### Performance impact\r\nLow. When decoding tuple names fails, use the partially decoded type (which has errors) rather than making a blank error type.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nFairly edge case.\r\n\r\n### How was the bug found?\r\nReported by customer."},{"Id":"7035435193","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:52:20","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11308","RelatedDescription":"Closed issue \"Proposal: \"sync\" block in async/iterator methods\" (#11308) at dotnet/roslyn","RelatedBody":"A relatively common request is to do something in a state machine method (i.e. `async` method or iterator method) before the state machine is created, either for efficiency (common with `async`) or for correctness (common with iterators).\n\nIn C# 7, these cases can be solved fairly well with local functions (the second example uses _arbitrary async returns_ #10902):\n\n``` c#\npublic static IEnumerable<T> Where<T>(this IEnumerable<T> source, Func<T, bool> predicate)\n{\n    if (source == null || predicate == null)\n        throw new ArgumentNullException();\n\n    IEnumerable<T> WhereImpl()\n    {\n        foreach (var item in source)\n        {\n            if (predicate(item))\n                yield return item;\n        }\n    }\n\n    return WhereImpl();\n}\n\npublic static ValueTask<int> DelayWithResult(int delay)\n{\n    if (delay == 0)\n        return ValueTask<int>.FromValue(delay);\n\n    async ValueTask<int> DelayImpl()\n    {\n        await Task.Delay(delay);\n        return delay;\n    }\n\n    return DelayImpl();\n}\n```\n\nMy proposal is to make this even nicer, by including a `sync` block at the start of the method that contains the code that should execute before the state machine is created. Also, if the `sync` block returns or throws, the result is returned or thrown directly, without wrapping in `Task`, tasklike, or `IEnumerable<T>`.\n\nThis means the examples above become:\n\n``` c#\npublic static IEnumerable<T> Where(this IEnumerable<T> source, Func<T, bool> predicate)\n{\n    sync\n    {\n        if (source == null || predicate == null)\n            throw new ArgumentNullException();\n    }\n\n    foreach (var item in source)\n    {\n        if (predicate(item))\n            yield return item;\n    }\n}\n\npublic static async ValueTask<int> DelayWithResult(int delay)\n{\n    sync\n    {\n        if (delay == 0)\n            return ValueTask<int>.FromValue(delay);\n    }\n\n    await Task.Delay(delay);\n    return delay;\n}\n```\n\nThis is similar to _Defer async state machine creation_ #10449, except that it's explicit. Being explicit has both advantages (the change of semantics regarding what happens to thrown exceptions is allowed) and disadvantages (the optimization doesn't happen automatically).\n\nThe keyword `sync` is not ideal: it's not currently a keyword and could be confusing for iterator methods. Suggestions for alternative syntax are welcome.\n"},{"Id":"7035371851","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:14:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23945","RelatedDescription":"Closed issue \"Implicit cast operator not compiling outside assembly when using in modifier\" (#23945) at dotnet/roslyn","RelatedBody":"https://stackoverflow.com/questions/47983027/implicit-cast-operator-not-compiling-outside-original-assembly\r\n\r\n**Version Used**: VS 2017 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nSee original question on StackOverflow here: https://stackoverflow.com/questions/47983027/implicit-cast-operator-not-compiling-outside-original-assembly\r\n\r\n1. Create a .NET Standard library and a new struct with an implicit casting operator that takes its argument with the new C# 7.2 `in` modifier.\r\n2. Create another library/application that references the library above, and try to use that implicit casting operator\r\n3. Notice it won't compile and you'll see the following error:\r\n> error CS0029: Couldn't implicitly convert the type 'MyTestType' into 'MyCastingType'\r\n\r\n**Expected Behavior**:\r\n\r\nThe implicit cast should work the same regardless of the parent assembly. If it's present for the type and it works inside the original assembly, it should behave the same in other assemblies. Note that apparently removing the `in` modifier in the cast operator parameter solves the problem, so this might be a bug with the new C# 7.2 feature.\r\n\r\n**Actual Behavior**:\r\n\r\nThe code doesn't compile from assemblies other than the one where the type is defined, and VS shows that CS0029 error above."},{"Id":"7035361420","Type":"IssuesEvent","CreatedAt":"2017-12-27T23:09:05","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23947","RelatedDescription":"Closed issue \"Compiler complains on CS1998 when implementing protected override\" (#23947) at dotnet/roslyn","RelatedBody":"**Version Used**:  Visual Studio 2017 Version 15.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a Base class with abstract async method\r\n2. override in subclass with a non awaiting implementation\r\n3. CS1998 is emitted\r\n\r\n**Expected Behavior**:\r\n\r\nIn the specific case of overriding protected async methods, CS1998 should be suppressed IMO since the implementer cannot control what he/she are implementing\r\n\r\n**Actual Behavior**:\r\n\r\nCS1998 is emitted\r\n"},{"Id":"7035342987","Type":"IssuesEvent","CreatedAt":"2017-12-27T22:59:51","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23948","RelatedDescription":"Reopened issue \"IntelliSense reports different number of overloads than signature help\" (#23948) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Go to this line of code https://github.com/dotnet/roslyn/blob/b0bd4af8ff88e5692cff8a8251f1fe17bed879ef/src/Compilers/Core/Portable/PEWriter/UsedNamespaceOrType.cs#L61\r\n2. Hover `base.Equals` and IntelliSense suggests there's one additional overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393868-00e41b84-eb56-11e7-9d89-c6955418471f.png)\r\n3. Prompt signature help and it only shows one overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393918-5506c0ea-eb56-11e7-9b83-d975621c6881.png)\r\n\r\n**Expected Behavior**:\r\nWhen IntelliSense displays `(+1 overload)` then signature help should show exactly 2 overloads\r\n\r\n**Actual Behavior**:\r\nSignature help may show less overloads than IntelliSense suggests there are."},{"Id":"7035341601","Type":"IssuesEvent","CreatedAt":"2017-12-27T22:59:09","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23948","RelatedDescription":"Closed issue \"IntelliSense reports different number of overloads than signature help\" (#23948) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Go to this line of code https://github.com/dotnet/roslyn/blob/b0bd4af8ff88e5692cff8a8251f1fe17bed879ef/src/Compilers/Core/Portable/PEWriter/UsedNamespaceOrType.cs#L61\r\n2. Hover `base.Equals` and IntelliSense suggests there's one additional overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393868-00e41b84-eb56-11e7-9d89-c6955418471f.png)\r\n3. Prompt signature help and it only shows one overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393918-5506c0ea-eb56-11e7-9b83-d975621c6881.png)\r\n\r\n**Expected Behavior**:\r\nWhen IntelliSense displays `(+1 overload)` then signature help should show exactly 2 overloads\r\n\r\n**Actual Behavior**:\r\nSignature help may show less overloads than IntelliSense suggests there are."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7035304401","Type":"IssuesEvent","CreatedAt":"2017-12-27T22:41:09","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5142","RelatedDescription":"Closed issue \"Implement ldlen opcode\" (#5142) at dotnet/corert","RelatedBody":"Implement the ldlen opcode for WebAssembly, which pushes the length of an array on the stack. The function to fill in is:\r\nhttps://github.com/dotnet/corert/blob/7df43adf895dab48f8764c3733a2f74d204923be/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1825\r\n\r\nThis may depend on #4540 for testing."},{"Id":"7033574361","Type":"PullRequestEvent","CreatedAt":"2017-12-27T11:39:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5156","RelatedDescription":"Opened pull request \"Cleanup ifdefs\" (#5156) at dotnet/corert","RelatedBody":""},{"Id":"7033493151","Type":"IssuesEvent","CreatedAt":"2017-12-27T11:07:55","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/4659","RelatedDescription":"Reopened issue \"Help build support for WebAssembly\" (#4659) at dotnet/corert","RelatedBody":"WebAssembly is a new technology for running code at near-native speed in browsers. A group of folks on the .NET team worked together to see what WebAssembly might look like using CoreRT. You can try the demo [here](http://morganbr.github.io/corert/HelloWasm.html) using Firefox, Chrome, [Edge](https://blogs.windows.com/msedgedev/2017/04/20/improved-javascript-performance-webassembly-shared-memory/#hxSbpTyhUtwSTybp.97) or Safari 11!\r\n\r\nWe think CoreRT might be a good WebAssembly runtime since it builds IL to \"native code\" ahead-of-time and has a very small runtime. We’ve recently merged [initial changes](https://github.com/dotnet/corert/pull/4480) that get a simplified Hello World running using the LLVM API and Emscripten to produce WebAssembly. Now we’d like your help making it bigger and better! Right now, our goals are:\r\n1.\tBe able to run an application big and interesting enough to show whether CoreRT really is a good match for WebAssembly. Blazor would be a great eventual goal.\r\n2.\tLearn what makes good .NET WebAssembly applications.\r\n\r\nThis project is an experiment and has no current plans for a production-ready version. Your involvement can help us prove out this project. The best way you can help right now is to contribute code, but we’d also appreciate issues, ideas and questions to help us learn more about the way you want to use WebAssembly. For more technical details, there’s a design document [here](https://github.com/dotnet/corert/blob/master/Documentation/design-docs/WebAssembly-design.md). \r\n\r\nCoreRT is joining our friends in the [ASP.NET Blazor](https://github.com/SteveSanderson/Blazor) and [Mono WebAssembly](http://www.mono-project.com/news/2017/08/09/hello-webassembly/) projects in a set of open experiments on making .NET support WebAssembly. It’s an exciting space and one well-suited to an application platform with the characteristics of .NET.\r\n\r\n# Contributing code\r\nWe’ve filed a bunch of issues that break the work down into small tasks and they’re all up for grabs! Even if you don’t have experience with CoreRT, LLVM or WebAssembly, many of them should be doable. Look for the [arch-wasm label](https://github.com/dotnet/corert/issues?q=is%3Aissue+is%3Aopen+label%3Aarch-wasm). Most of the issues right now track implementing individual IL opcodes, which will enables us to compile more of the framework, but we also have issues for building, runtime features and the framework. Instructions for building and running WebAssembly are [here](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-WebAssembly.md).\r\n\r\n# Current status\r\nCurrently, most IL operations have been implemented, but we're still missing some important ones including arrays and casting. We have a WebAssembly version of the runtime that links into compiled code but we still need to hook up or implement lots of the runtime's features including exception handling, interface calls and higher-level framework features like reflection. "},{"Id":"7033492980","Type":"IssuesEvent","CreatedAt":"2017-12-27T11:07:50","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4659","RelatedDescription":"Closed issue \"Help build support for WebAssembly\" (#4659) at dotnet/corert","RelatedBody":"WebAssembly is a new technology for running code at near-native speed in browsers. A group of folks on the .NET team worked together to see what WebAssembly might look like using CoreRT. You can try the demo [here](http://morganbr.github.io/corert/HelloWasm.html) using Firefox, Chrome, [Edge](https://blogs.windows.com/msedgedev/2017/04/20/improved-javascript-performance-webassembly-shared-memory/#hxSbpTyhUtwSTybp.97) or Safari 11!\r\n\r\nWe think CoreRT might be a good WebAssembly runtime since it builds IL to \"native code\" ahead-of-time and has a very small runtime. We’ve recently merged [initial changes](https://github.com/dotnet/corert/pull/4480) that get a simplified Hello World running using the LLVM API and Emscripten to produce WebAssembly. Now we’d like your help making it bigger and better! Right now, our goals are:\r\n1.\tBe able to run an application big and interesting enough to show whether CoreRT really is a good match for WebAssembly. Blazor would be a great eventual goal.\r\n2.\tLearn what makes good .NET WebAssembly applications.\r\n\r\nThis project is an experiment and has no current plans for a production-ready version. Your involvement can help us prove out this project. The best way you can help right now is to contribute code, but we’d also appreciate issues, ideas and questions to help us learn more about the way you want to use WebAssembly. For more technical details, there’s a design document [here](https://github.com/dotnet/corert/blob/master/Documentation/design-docs/WebAssembly-design.md). \r\n\r\nCoreRT is joining our friends in the [ASP.NET Blazor](https://github.com/SteveSanderson/Blazor) and [Mono WebAssembly](http://www.mono-project.com/news/2017/08/09/hello-webassembly/) projects in a set of open experiments on making .NET support WebAssembly. It’s an exciting space and one well-suited to an application platform with the characteristics of .NET.\r\n\r\n# Contributing code\r\nWe’ve filed a bunch of issues that break the work down into small tasks and they’re all up for grabs! Even if you don’t have experience with CoreRT, LLVM or WebAssembly, many of them should be doable. Look for the [arch-wasm label](https://github.com/dotnet/corert/issues?q=is%3Aissue+is%3Aopen+label%3Aarch-wasm). Most of the issues right now track implementing individual IL opcodes, which will enables us to compile more of the framework, but we also have issues for building, runtime features and the framework. Instructions for building and running WebAssembly are [here](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-WebAssembly.md).\r\n\r\n# Current status\r\nCurrently, most IL operations have been implemented, but we're still missing some important ones including arrays and casting. We have a WebAssembly version of the runtime that links into compiled code but we still need to hook up or implement lots of the runtime's features including exception handling, interface calls and higher-level framework features like reflection. "},{"Id":"7033443704","Type":"PullRequestEvent","CreatedAt":"2017-12-27T10:49:41","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5141","RelatedDescription":"Merged pull request \"Link WebAssembly runtime\" (#5141) at dotnet/corert","RelatedBody":"Changes to link the WebAssembly runtime with codegen. This will allow us to start enabling runtime-provided features. This change proves that out by allocating via the runtime (though with no GC reporting, so hopefully it doesn't try to collect). Also includes some codegen fixes required by the new code that we're generating. Fixes #4656."},{"Id":"7033443695","Type":"IssuesEvent","CreatedAt":"2017-12-27T10:49:41","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4656","RelatedDescription":"Closed issue \"Implement WebAssembly allocation through the runtime\" (#4656) at dotnet/corert","RelatedBody":"Initially, allocation will be handled via malloc (#4512), but after compiling the runtime for WebAssembly (#4505) is complete, we should try to use the runtime to allocate. We can start with a large gen0 heap and worry about GC reporting separately."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7033942081","Type":"IssuesEvent","CreatedAt":"2017-12-27T13:59:08","Actor":"skarllot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1832","RelatedDescription":"Opened issue \"TargetFramework for Xamarin platforms\" (#1832) at dotnet/sdk","RelatedBody":"I cannot set `TargetFramework` to `monoandroid10`, `xamarinios10` or `uap10.0`.  The following errors are throw:\r\n\r\n```bash\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'xamarinios10' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'monoandroid10' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'uap10.0' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\n```\r\n\r\nThe following configuration is being used:\r\n\r\n```xml\r\n<TargetFrameworks>netstandard1.3;net46;monoandroid10;xamarinios10;uap10.0</TargetFrameworks>\r\n```"},{"Id":"7025969737","Type":"PullRequestEvent","CreatedAt":"2017-12-23T18:49:12","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-28T05:30:22.7267326Z","RunDurationInMilliseconds":8255}