{"Data":{"GitHubIssues":{"Issues":[{"Id":"321387233","IsPullRequest":false,"CreatedAt":"2018-05-09T00:07:15","Actor":"discostu105","Number":"800","RawContent":null,"Title":"Running into an assertion: mono/utils/memfuncs.c:152, condition `unaligned_bytes (src) == 0' not met","State":"open","Body":"I have a little prototype where I try to disassemble .NET assemblies in the browser with Mono.\r\n\r\nThe code is here: https://github.com/discostu105/bilspy\r\n\r\nHowever; I am running into a Mono assertation. Not sure if this is a blazor / mono / webassembly bug, or my own.\r\n\r\nError: \r\n```\r\nWASM: * Assertion at /Users/builder/jenkins/workspace/test-mono-mainline-webassembly/label/highsierra/mono/utils/memfuncs.c:152, \r\ncondition `unaligned_bytes (src) == 0' not met MonoPlatform.ts:191 \r\nWASM: mono.js:1 Uncaught abort(). Build with -s ASSERTIONS=1 for more info.`\r\n```\r\nScreenshot of the problem (from Chrome devtools): https://twitter.com/discostu105/status/992663078981525504\r\n\r\nHow to reproduce:\r\n * Build and Run https://github.com/discostu105/bilspy (it's blazor 0.3)\r\n * \"Choose File\": `C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Accessibility.dll` (it does not really matter which assembly exactly, but there are a couple of different errors for different assemblies).\r\n * In F12 dev tools you should see the error mentioned.\r\n\r\nAgain, I am not totally sure this isn't my error, but I am kind of stuck with that kind of error.","Url":"https://github.com/aspnet/Blazor/issues/800","RelatedDescription":"Open issue \"Running into an assertion: mono/utils/memfuncs.c:152, condition `unaligned_bytes (src) == 0' not met\" (#800)"},{"Id":"321385629","IsPullRequest":false,"CreatedAt":"2018-05-08T23:58:14","Actor":"jskeet","Number":"799","RawContent":null,"Title":"Bizarre operator failure when using a struct as a field of another struct","State":"open","Body":"This was discovered when trying to get Noda Time to work, but I've cut it down to a small reproducible example.\r\n\r\nBlazor version: 0.3\r\n\r\nStart off with the demo project (I've called mine `BlazorDemo`). Add the following code in a new file:\r\n\r\n```csharp\r\nnamespace BlazorDemo\r\n{\r\n    public struct Instant\r\n    {\r\n        public readonly Duration duration;\r\n\r\n        public Instant(Duration duration) => this.duration = duration;\r\n\r\n        public static bool operator <(Instant left, Instant right) => left.duration < right.duration;\r\n        public static bool operator >(Instant left, Instant right) => left.duration > right.duration;\r\n    }\r\n\r\n    public struct Duration\r\n    {\r\n        public readonly int days;\r\n\r\n        public Duration(int days)\r\n        {\r\n            this.days = days;\r\n        }\r\n\r\n        public static bool operator <(Duration left, Duration right) =>\r\n            left.days < right.days;\r\n        public static bool operator >(Duration left, Duration right) =>\r\n            left.days > right.days;\r\n    }\r\n}\r\n```\r\n\r\nIn a Razor page, add this code:\r\n\r\n```text\r\n@{\r\n    var duration1 = new Duration(-16777216);\r\n    var duration2 = new Duration(16777215);\r\n    var instant1 = new Instant(duration1);\r\n    var instant2 = new Instant(duration2);\r\n}\r\n\r\n<p>Local duration comparison: @(duration1 < duration2)</p>\r\n<p>Instant comparison: @(instant1 < instant2)</p>\r\n<p>Duration-of-instant comparison: @(instant1.duration < instant2.duration)</p>\r\n```\r\n\r\nIt *should* give the same result three times. The *actual* result is True, False, False.\r\n\r\nIf you change `Instant` to a class, it's fine. Using the local variables is fine. Even copying the duration values out of `instant1` and `instant2` and into new local variables works.\r\n\r\nThe problem isn't in Razor pages themselves - in my real code, the comparison is being checked within Noda Time, and it fails there too. I suspect this is a problem within the WASM version of Mono, but I dread to think where.","Url":"https://github.com/aspnet/Blazor/issues/799","RelatedDescription":"Open issue \"Bizarre operator failure when using a struct as a field of another struct\" (#799)"},{"Id":"321338831","IsPullRequest":true,"CreatedAt":"2018-05-08T21:06:23","Actor":"rynowak","Number":"797","RawContent":null,"Title":"Fix #745 - allow multiple implements directives","State":"closed","Body":"The pass for this was 'break'ing after the first directive for no real\r\nreason. Oops.","Url":"https://github.com/aspnet/Blazor/pull/797","RelatedDescription":"Closed or merged PR \"Fix #745 - allow multiple implements directives\" (#797)"},{"Id":"321346008","IsPullRequest":false,"CreatedAt":"2018-05-08T21:02:54","Actor":"tallichet","Number":"798","RawContent":null,"Title":"Loading issue when built with dotnet core 2.1 RC","State":"open","Body":"Since I have updated to dotnet core 2.1 RC released yesterday, I am no able to run the blazor app I build and run.\r\n\r\nIs there some known issues?","Url":"https://github.com/aspnet/Blazor/issues/798","RelatedDescription":"Open issue \"Loading issue when built with dotnet core 2.1 RC\" (#798)"},{"Id":"321334243","IsPullRequest":true,"CreatedAt":"2018-05-08T20:38:24","Actor":"rynowak","Number":"796","RawContent":null,"Title":"Add tests for #773","State":"closed","Body":"This doesn't seem to repro anymore after fixing #772. Adding tests\r\nanyway.","Url":"https://github.com/aspnet/Blazor/pull/796","RelatedDescription":"Closed or merged PR \"Add tests for #773\" (#796)"},{"Id":"320549560","IsPullRequest":false,"CreatedAt":"2018-05-08T20:24:32","Actor":"Suchiman","Number":"773","RawContent":null,"Title":"Html in Attribute values cause build errors in current CI builds","State":"closed","Body":"```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"<div>Test!</div>\" />\r\n```\r\nwill cause\r\n```\r\nOne or more errors occurred. (Unexpected node type Microsoft.AspNetCore.Blazor.Razor.HtmlElementIntermediateNode)\r\nat System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\nat Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\nat Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__10.MoveNext()\r\npackages\\microsoft.aspnetcore.blazor.build\\0.4.0-preview1-10282\\targets\\RazorCompilation.targets(281,5): error : rzc generate exited with code 1. [WebApplication7\\WebApplication7\\WebApplication7.csproj]\r\n```","Url":"https://github.com/aspnet/Blazor/issues/773","RelatedDescription":"Closed issue \"Html in Attribute values cause build errors in current CI builds\" (#773)"},{"Id":"320528509","IsPullRequest":false,"CreatedAt":"2018-05-08T19:41:45","Actor":"Suchiman","Number":"772","RawContent":null,"Title":"ArgumentOutOfRangeException in current CI VSIX builds","State":"closed","Body":"Start with\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt\r\n```\r\nnow autocomplete Title and you'll end up with ( | = cursor )\r\n```cshtml\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n<SurveyPrompt Title=\"|\"\r\n```\r\nat this point, VS will freeze and restart, caused by this exception\r\n```\r\nSystem.ArgumentOutOfRangeException\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection.get_Item(Int32)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponentAttribute(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentAttributeExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderNode(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorDesignTimeNodeWriter.WriteComponent(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext, Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.WriteNode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeTarget, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitExtension(Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ExtensionIntermediateNode.AcceptExtensionNode[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Blazor.Razor.ComponentExtensionNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitMethodDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitClassDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitNamespaceDeclaration(Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor)\r\n   at Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.Visit(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultCodeRenderingContext.RenderChildren(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDefault(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter+Visitor.VisitDocument(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Razor.Language.CodeGeneration.DefaultDocumentWriter.WriteDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument, Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)\r\n   at Microsoft.AspNetCore.Blazor.Razor.BlazorRazorCSharpLoweringPhase.ExecuteCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorEnginePhaseBase.Execute(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectEngine.ProcessCore(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDesignTime(Microsoft.AspNetCore.Razor.Language.RazorProjectItem)\r\n   at Microsoft.VisualStudio.Editor.Razor.BackgroundParser+BackgroundThread.WorkerLoop()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/aspnet/Blazor/issues/772","RelatedDescription":"Closed issue \"ArgumentOutOfRangeException in current CI VSIX builds\" (#772)"},{"Id":"321310926","IsPullRequest":true,"CreatedAt":"2018-05-08T19:39:19","Actor":"rynowak","Number":"795","RawContent":null,"Title":"Fix 773","State":"closed","Body":"We weren't handling a few cases that can occur during typing correctly.\r\nOur passes that look at the content of attributes need to be prepared\r\nfor it to be empty in cases where the attribute has been partially\r\ntyped in the editor.\r\n\r\nI added a smoke test for this that attempts to simulate typing and found\r\nanother issue to fix.\r\n\r\nThe end result of this is that the design for this kind of code is\r\nsimpler and takes a more 'brute-force' approach to understanding\r\nattributes. I think this is a good change based on the problems with how\r\nthis code has been written today, there are too many possible cases to\r\ntry and have the code express and document them all.","Url":"https://github.com/aspnet/Blazor/pull/795","RelatedDescription":"Closed or merged PR \"Fix 773\" (#795)"},{"Id":"320987119","IsPullRequest":false,"CreatedAt":"2018-05-08T17:50:11","Actor":"GoldenCrystal","Number":"788","RawContent":null,"Title":"Proposal: Optimize render tree build & diff with lazy RenderFragments","State":"closed","Body":"# Summary\r\n\r\nI noticed that components that produce a lot of HTML elements tend to become noticeably slow.\r\n\r\nYou can observe this on the linked page if you click on the button at the bottom a few times : https://unicode-browser.azurewebsites.net/blocks/CJK%20Unified%20Ideographs\r\nWhat you should observe is that at some point, even the spinner takes time to appear.\r\n(Likely because Blazor is re-rendering the whole table for each small update)\r\n\r\n# Rationale\r\n\r\nToday, it seems we are able to separate updates of the DOM by enclosing parts of the application in a component.\r\nHowever, splitting a page in many small components only for the purpose of rendering optimization tends to be very tedious, and maybe not doable at all in some cases.\r\n\r\nThe idea here is to provide a way for avoiding to re-render semi-static content everytime the ````BuildRenderTree```` is called.\r\n\r\n# Proposal\r\n\r\nI propose that Blazor would provide a mechanism in-between ````RenderFragment```` and ````BlazorComponent````.\r\nLet's say that we provide to ````RenderTreeBuilder```` a ````RenderFragment```` that is tagged with a **unique** string ID (e.g. a GUID string in some cases).\r\n\r\nThe API could look like this:\r\n\r\n````csharp\r\nclass RenderTreeBuilder\r\n{\r\n    // …\r\n    public void AddLazyContent(int sequence, string id, RenderFragment fragment) { /* … */ }\r\n    // …\r\n}\r\n````\r\n\r\nThe idea is that you generate a unique ID so as to let the render tree diff builder to identify your specific fragment (and detect addition/removal of said fragment), but the lazy fragment is only rendered once, when it is newly added in the render tree.\r\n(NB: It may be rendered subsequently if it is removed, then added back later)\r\n\r\n## Caveats\r\n\r\nDevelopers would have to stay aware that the lazy content will be evaluated outside of the ````BuildRenderTree```` method (hence its lazyness), and remember to be careful about closures.\r\nHowever, it might not be that different from ````RenderFragments```` generated outside of the ````BuildRenderTree```` method.\r\n\r\n## Advantages\r\n\r\n### For Razor codegen\r\n\r\nCode generation for cshtml could take advantage of this in cases like these:\r\n````html\r\n<table>\r\n    <!-- This part is static -->\r\n    <thead>\r\n        <tr>\r\n            <th>Foo</th>\r\n            <th>Bar</th>\r\n        </tr>\r\n    </thead>\r\n    <!-- End of the static part -->\r\n\r\n    <!-- This contains dynamic content -->\r\n    <tbody>\r\n        @foreach (var item in Items)\r\n        {\r\n            <tr><td>@item.Foo</td><td>@item.Bar</td></tr>\r\n        }\r\n    </tbody>\r\n    <!-- End of the dynamic content -->\r\n</table>\r\n````\r\n\r\nThere, the codegen could determine that ````table > thead````, unlike ````table > tbody````, is purely static content and generate a lazy fragment (with a statically generated string ID) that would span the whole ````thead```` tag and would only be evaluated once.\r\n\r\nThus, when the developer requests the page to refresh, the whole markup for the table header wouldn't have to be re-generated, and only the parts related to the dynamically-generated ````tbody```` would be rebuilt. (That obviously includes the enclosing ````table```` element, which contains the ````tbody````, itself containing the dynamic content)\r\n\r\n### For manually generated components\r\n\r\nDevelopers could use lazy content for parts of the document that are dynamic, at their own risk, thus avoiding the cost of rebuilding the whole render tree when they only need to update a small part of a document.\r\n\r\n## Going furher\r\n\r\n### For manually generated components\r\n\r\nIt might be even better if lazy fragments could be forcefully re-rendered, thus blurring the lines with components even more.\r\nI am not sure how this would be best achieved, however. Maybe by calling a method based on the string ID ?\r\n\r\n### For components\r\n\r\nIt would be great if there was a way to indicate that an element should be treated as lazy, even tough it contains fragments of C#. (Maybe something like a ````blazor-lazy```` attribute ?)\r\nThis would allow more flexibility in the design of pages/components, without having to resort to manually built render trees.\r\n","Url":"https://github.com/aspnet/Blazor/issues/788","RelatedDescription":"Closed issue \"Proposal: Optimize render tree build & diff with lazy RenderFragments\" (#788)"},{"Id":"321253443","IsPullRequest":false,"CreatedAt":"2018-05-08T17:44:29","Actor":"csnewman","Number":"793","RawContent":null,"Title":"Circularly dependent layouts cause lockups","State":"closed","Body":"Layouts that are circularly dependent are not handled gracefully and instead causes a browser lockup.\r\n\r\n### Example 1\r\n**SomeLayout**\r\n```\r\n@inherits BlazorLayoutComponent\r\n@layout SomeLayout\r\n```\r\n\r\n### Example 2\r\n**LayoutA**\r\n```\r\n@inherits BlazorLayoutComponent\r\n@layout LayoutB\r\n```\r\n\r\n**LayoutB**\r\n```\r\n@inherits BlazorLayoutComponent\r\n@layout LayoutA\r\n```\r\n\r\n### Example 3\r\n**SomeLayout**\r\n```\r\n@inherits BlazorLayoutComponent\r\n```\r\n\r\n**_ViewImports**\r\n```\r\n@layout SomeLayout\r\n```","Url":"https://github.com/aspnet/Blazor/issues/793","RelatedDescription":"Closed issue \"Circularly dependent layouts cause lockups\" (#793)"},{"Id":"321254772","IsPullRequest":false,"CreatedAt":"2018-05-08T17:38:47","Actor":"dlr1","Number":"794","RawContent":null,"Title":"Adding event-handler in .cshtml crashes Visual studio ","State":"closed","Body":"I am using latest CI builds. when you try to type event-handler for any event in .cshtml, VS crashes.","Url":"https://github.com/aspnet/Blazor/issues/794","RelatedDescription":"Closed issue \"Adding event-handler in .cshtml crashes Visual studio \" (#794)"},{"Id":"321252269","IsPullRequest":true,"CreatedAt":"2018-05-08T16:12:18","Actor":"attilah","Number":"792","RawContent":null,"Title":"convert marshalled members to camelCase","State":"open","Body":"Convert the member names to camelCase for interfaces/class/types getting marshalled to C# side.\r\n\r\n\r\nAs @SteveSandersonMS asked in https://github.com/aspnet/Blazor/issues/774\r\n\r\n\r\nI've  coordinated with @galvesribiero and he is updating his PR: https://github.com/aspnet/Blazor/pull/771","Url":"https://github.com/aspnet/Blazor/pull/792","RelatedDescription":"Open PR \"convert marshalled members to camelCase\" (#792)"},{"Id":"320556305","IsPullRequest":false,"CreatedAt":"2018-05-08T15:36:09","Actor":"attilah","Number":"774","RawContent":null,"Title":"camelCase all the things","State":"closed","Body":"It is a question not an issue.\r\n\r\nNow as @SteveSandersonMS 's camel case PR merged, wouldn't it be nice to update all the TS data structures (I'm thinking about events for example) to move from pascal case to camel case property names?\r\n\r\nSince @galvesribeiro is [working on](https://github.com/aspnet/Blazor/pull/771) filling up the events with payload it would be good to have a decision on it.","Url":"https://github.com/aspnet/Blazor/issues/774","RelatedDescription":"Closed issue \"camelCase all the things\" (#774)"},{"Id":"320617599","IsPullRequest":false,"CreatedAt":"2018-05-08T15:32:12","Actor":"thesobercoder","Number":"780","RawContent":null,"Title":"[Feature Request] Provide a way to restrict the usage of tags inside a parent component","State":"closed","Body":"As point-of-view from a library authoring it is necessary as an author to limit the usage of tag that can be authored inside a parent component.\r\n\r\nA trivial example would be \r\n\r\n```\r\n<MyAwesomeDropdown>\r\n    <Item Value=\"1\" Text=\"A\" />\r\n    <Item Value=\"2\" Text=\"B\" />\r\n    <SomeOtherNotValidTag /> <!-- Should be Invalid -->\r\n    <div>Hello World</div> <!-- Should be Invalid -->\r\n</MyAwesomeDropdown>\r\n```\r\n\r\nSince we are in the awesome sugary strongly typed C# land, the type system gives the author confidence on shipping the library with hard set rules and also lets the consumer adopt the library easily without fiddling around at run-time to find out what went wrong.","Url":"https://github.com/aspnet/Blazor/issues/780","RelatedDescription":"Closed issue \"[Feature Request] Provide a way to restrict the usage of tags inside a parent component\" (#780)"},{"Id":"320711280","IsPullRequest":false,"CreatedAt":"2018-05-08T15:31:24","Actor":"simonziegler","Number":"781","RawContent":null,"Title":"Https","State":"closed","Body":"Hi,\r\n\r\nAs I experiment, I would like to see if I can enforce Https communication between the Blazor Client and Server. Is there a way to do this please? Sorry if this is a basic question.\r\n\r\nSimon","Url":"https://github.com/aspnet/Blazor/issues/781","RelatedDescription":"Closed issue \"Https\" (#781)"},{"Id":"320859449","IsPullRequest":false,"CreatedAt":"2018-05-08T15:30:26","Actor":"attilah","Number":"786","RawContent":null,"Title":"Need a published NPM types module for Blazor","State":"closed","Body":"Library authors cannot write JS parts in Typescript since there is no published declaration file for the public surface of Blazor JS.\r\n\r\nAdding ```declaration: true``` to tsconfig.js does not solve it, since there are compile errors because of how/what things exported/consumed.\r\n\r\nAlso it would be good to have a library multi project template 1 C# netstandard (no blazor build), and 1 typescript (like blazor js) project with nuget packaging support out of the box.\r\n\r\nQuestion:\r\nHow should we pack the javascript file into nuget to make it consumable in blazor projects (when js and blazor component are in 2 different projects)?","Url":"https://github.com/aspnet/Blazor/issues/786","RelatedDescription":"Closed issue \"Need a published NPM types module for Blazor\" (#786)"},{"Id":"321067050","IsPullRequest":false,"CreatedAt":"2018-05-08T15:29:00","Actor":"schotime","Number":"791","RawContent":null,"Title":"Required Component Parameters","State":"closed","Body":"Given that 0.3 added the `[Parameter]` attribute. Could it also take a boolean that says its a required parameter and must be passed otherwise compilation fails.\r\n\r\n```cs\r\n@functions {\r\n   [Parameter(true)]\r\n   string Title;\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/791","RelatedDescription":"Closed issue \"Required Component Parameters\" (#791)"},{"Id":"321020475","IsPullRequest":false,"CreatedAt":"2018-05-08T03:50:10","Actor":"hungdluit","Number":"790","RawContent":null,"Title":"Parent-Childs hierarchy","State":"closed","Body":"The idea is, I want to build the hierarchy after rendering. The component will know and easy to access its parent and child component by using Parent and Childrens property.\r\n\r\nIs there a way to achieve this?","Url":"https://github.com/aspnet/Blazor/issues/790","RelatedDescription":"Closed issue \"Parent-Childs hierarchy\" (#790)"},{"Id":"320605496","IsPullRequest":false,"CreatedAt":"2018-05-08T01:45:29","Actor":"hungdluit","Number":"778","RawContent":null,"Title":"Render custom Element","State":"closed","Body":"```\r\nprotected override void BuildRenderTree(RenderTreeBuilder builder)\r\n{\r\n          base.BuildRenderTree(builder);\r\n\r\n            builder.OpenElement(0, \"div\");\r\n            BuildContentRenderTree(builder);\r\n            builder.CloseElement();\r\n }\r\n\r\n protected virtual void BuildContentRenderTree(RenderTreeBuilder builder)\r\n {\r\n            if (ChildContent != null)\r\n            {\r\n                ChildContent(builder);\r\n            }\r\n   }\r\n```\r\n\r\n```\r\n@page \"/usercontrolsample\"\r\n\r\n<UserControl>\r\n    <a>This is a User Control</a>\r\n</UserControl>\r\n```\r\nResult:\r\n\r\n![image](https://user-images.githubusercontent.com/5623089/39675253-a89e1ebe-5182-11e8-8499-bcaff2db793e.png)\r\n\r\nI'm following same samples on the internet. But it does not work in my case.\r\nI think 'div' should be rendered instead of 'usercontrol'","Url":"https://github.com/aspnet/Blazor/issues/778","RelatedDescription":"Closed issue \"Render custom Element\" (#778)"},{"Id":"321007388","IsPullRequest":false,"CreatedAt":"2018-05-08T01:06:14","Actor":"w8w8w8","Number":"789","RawContent":null,"Title":"it is not work in IE11 or FireFox59.0.3","State":"closed","Body":"when I test use IE11 , it is not work,  show \"promise\" undefined.\r\ncan you help me? or how to fix this bug","Url":"https://github.com/aspnet/Blazor/issues/789","RelatedDescription":"Closed issue \"it is not work in IE11 or FireFox59.0.3\" (#789)"},{"Id":"320974840","IsPullRequest":true,"CreatedAt":"2018-05-07T22:05:06","Actor":"SteveSandersonMS","Number":"787","RawContent":null,"Title":"Simple autorebuild mechanism for hosted apps","State":"open","Body":"In the 0.3.0 release we had to disable autorebuild for hosted apps due to a bug. This PR re-enables it, replacing the implementation with a much simpler alternative.\r\n\r\nThis implementation should be understood as a stopgap measure until some future version of ASP.NET Core and VS can hopefully extend the native autorebuild support to rebuild when there are changes in referenced projects. Once (and if) that is implemented, both the standalone and hosted variants of Blazor's autorebuild feature could be removed because both would inherit it from ASP.NET Core.","Url":"https://github.com/aspnet/Blazor/pull/787","RelatedDescription":"Open PR \"Simple autorebuild mechanism for hosted apps\" (#787)"},{"Id":"320560951","IsPullRequest":false,"CreatedAt":"2018-05-07T15:46:37","Actor":"galvesribeiro","Number":"776","RawContent":null,"Title":"Failure on touch event handling","State":"closed","Body":"While implementing #771, handling the touch events, I have the following issues:\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/39669660-2416704c-50c9-11e8-9ed9-04f71445deea.png)\r\n\r\nAs you may see in the picture, I'm getting the `touchstart` event on the `EventForDotNet.ts` properly (hence the log in the first part of the image) but it crashes right after that with a `[Intervention]` warning right before that exception...\r\n\r\nIf I follow the link at the warning (https://www.chromestatus.com/features/5093566007214080) It looks like for listeners of the touch event attached to the document, the `preventDefault` called before dispatch the events in Blazor are being ignore and everything else explodes.\r\n\r\nCan someone point me what is going on internally? I was unable to track the reason on Blazor's code...\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Blazor/issues/776","RelatedDescription":"Closed issue \"Failure on touch event handling\" (#776)"},{"Id":"320843493","IsPullRequest":true,"CreatedAt":"2018-05-07T15:14:02","Actor":"LunicLynx","Number":"785","RawContent":null,"Title":"[WIP] Prerendering","State":"open","Body":"Just for the sake of it, its still working and relevant. (Original #238)\r\n* Rebased on latest dev branch\r\n\r\n# [WIP] Prerendering (#24)\r\n\r\n## How does it work\r\nWhen ever a request comes in that would result in returning the content of `index.html`, the prerendering kicks in and replaces the `app` tag with the prerendered content.\r\n\r\n### In detail\r\n1. Call `app.UseBlazorPrerendering<TEntryComponent>(\"app\", configure => {});` in the server project. `TEntryComponent` will be the component to get prerendered and inserted into the `app` tag.\r\n2. `UseBlazorPrerendering` attaches the `BlazorPrerenderingMiddleware` to the `ISpaBuilder`, to intercept requests to `index.html`.\r\n3. If a request is satisfied by `index.html`. The `index.html` is parsed with `AngleSharp`, and modified to contain the prerendered content. This implementation is almost 100% the same as the one in `IndexHtmlFileProvider`.\r\n4. To Prerender the content there is a new implementation of `Renderer`. This implementation for the most part is identical to the one in `BrowserRenderer.ts`. But it only supports the initial creation, since update on the serverside does not make sense. Also when encountering a `Component` it goes into recursion, which is different from the Browser version.\r\n\r\n## What is in this PR\r\n### Microsoft.AspNetCore.Blazor.Server.Rendering project\r\nContains all things related to prerendering\r\n* `PreRenderer` implementation of `Renderer` (needs cleanup)\r\n\r\n### PrerenderingApp sample\r\n* input component\r\n* list component (foreach)\r\n* input element\r\n* 2 bound input elements\r\n* FetchDataComponent using a service making a HttpRequest on the client while using the data directly when prerendering.\r\n\r\n## Current Limitations\r\n* After the page is returned to the browser, it is static until the browser catches up with bootstrapping and rerendering the page. It would be nice to actually have some kind of way to map the elements to components. Maybe a custom data tag containing the component id.\r\n* Services used for controllers and prerendering must be specified two times for DI.\r\n* Routing not yet tested. It probably doesn't work.\r\n* `IUriHelper` implementation `PreUriHelper` of method `GetBaseUriPrefix` harcoded to match server url.\r\n* **Missing Tests** If this is the way to go, i will write them.\r\n* ~~It only works with the `app` tag. There should be some way to define the entry component. Also it would be nice to have different services (which also means different references) on server vs client side.~~\r\n~~As of now i can only imaging 3 projects.~~\r\n  * ~~One containing the Components~~\r\n  * ~~One for bootstrapping in Browser~~\r\n  * ~~One for bootstrapping in Server~~\r\n* ~~No way to supply services to prerendering. It would be nice to be able to supply different services while prerendering. This would allow to reuse server services to prerender the content without issuing http calls on the server side.~~\r\n\r\n## What now?\r\nI know the issue #24 is not yet assigned to any version. And maybe this implementation is going completely haywire. I just did what i thought might be the general idea. Either way, this was major fun. \r\nLet me know what you think!","Url":"https://github.com/aspnet/Blazor/pull/785","RelatedDescription":"Open PR \"[WIP] Prerendering\" (#785)"},{"Id":"320807613","IsPullRequest":false,"CreatedAt":"2018-05-07T15:07:24","Actor":"Marcel-B","Number":"783","RawContent":null,"Title":"The demo app displays nothing in the browser.","State":"closed","Body":"Hello, everybody.\r\n\r\nWhen I start the demo project, the browser opens, but it is nothing displayed (only **Loading...** for a few seconds) . It looks like everything (e.g. .net dll's, blazor.js, mono.js and mono.wasm) is loaded correctly into the browser. There are no visible errors or exceptions. In the windows cmd are also no errors, only green info messages.\r\nIn the \"Inspektor\" I only see inside the body tags:\r\n\r\n`<router appassembly=\"typeof(Program).Assembly\"></router>`\r\n\r\n_(Visual Studio 2017 Preview Professional on Windows 10, Blazor v0.3.0, Mozilla Firefox)_","Url":"https://github.com/aspnet/Blazor/issues/783","RelatedDescription":"Closed issue \"The demo app displays nothing in the browser.\" (#783)"},{"Id":"320815432","IsPullRequest":false,"CreatedAt":"2018-05-07T13:58:36","Actor":"rpedretti","Number":"784","RawContent":null,"Title":"Cannot bind to style when binding to events","State":"open","Body":"I'm using Blazor 0.3.0 and whenever I bind to an event any bind to 'style' breaks.\r\n\r\nI have a sample app at [https://github.com/rpedretti/BlazorApp](https://github.com/rpedretti/BlazorApp) on branch version_0_3_0 that the bug can be reproduced, but I guess it' happens in any project\r\n\r\nGiven a simple tag like\r\n\r\n```html\r\n<p onmouseover=\"@ViewModel.OnComponentHover\"\r\n  style=\"background: @ViewModel.ParentBgColor;\" />\r\n```\r\n\r\nThe compiler throws \r\n\r\n> Error Component attributes do not support complex content (mixed C# and markup). Attribute: 'style', text 'background:ViewModel.ParentBgColor;\r\n\r\nand even the intellisense breakes:\r\n![image](https://user-images.githubusercontent.com/675601/39705115-d74273bc-51e3-11e8-83a8-39cd8511f4e2.png)\r\n\r\nBy removing any of the properties the project compiles beautifully and intellisense works again.\r\n\r\n![image](https://user-images.githubusercontent.com/675601/39705170-fc444618-51e3-11e8-89e9-c9fca3884ffb.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/784","RelatedDescription":"Open issue \"Cannot bind to style when binding to events\" (#784)"},{"Id":"320752430","IsPullRequest":false,"CreatedAt":"2018-05-07T12:38:51","Actor":"magnihansen","Number":"782","RawContent":null,"Title":"[Feature Request] Blazor VS page templates","State":"closed","Body":"Sme Blazor page templates would be nice.","Url":"https://github.com/aspnet/Blazor/issues/782","RelatedDescription":"Closed issue \"[Feature Request] Blazor VS page templates\" (#782)"},{"Id":"320568795","IsPullRequest":false,"CreatedAt":"2018-05-07T04:48:35","Actor":"Psvensso","Number":"777","RawContent":null,"Title":"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...","State":"closed","Body":"Trying to update the blazor-realworld-example-app on a local fork but having problems updating to the new onclick=\"@x\" binder syntax.\r\n\r\nExample: \r\n`<a class=\"nav-link\" onclick=\"@clicktest\"> Click test</a>`\r\n\r\n`void clicktest(UIMouseEventArgs e) {\r\n        Console.WriteLine(\"Click testing \");\r\n    }`\r\n\r\n \r\nResult: \r\nThe call is ambiguous between the following methods or properties: 'BindMethods.GetEventHandlerValue<T>(Action<T>)' and 'BindMethods.GetEventHandlerValue<T>(Func<T, Task>)'\tBlazorRealworld\r\n(Same result with or without the UIMouseEventArgs n the handler)\r\n\r\nNote: \r\nA lambda works fine\r\n`<a class=\"nav-link\" onclick=\"@((e)=>clicktest(e))\">\r\n                        Click test\r\n                    </a>`\r\n\r\n\r\nRefs:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RunCommand>dotnet</RunCommand>\r\n    <RunArguments>blazor serve</RunArguments>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    \r\n    <PackageReference Include=\"CommonMark.NET\" Version=\"0.15.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.3.0\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.3.0\" />\r\n    <PackageReference Include=\"Microsoft.NET.Sdk.Razor\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"All\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCore SDK: 2.1.300-preview2-008533\r\nTest repo: https://github.com/Psvensso/blazor-realworld-example-app/tree/onclick-snapshot","Url":"https://github.com/aspnet/Blazor/issues/777","RelatedDescription":"Closed issue \"Eventhandlers not binding as expected: The call is ambiguous between BindMethods.GetEventHandlerValue...\" (#777)"},{"Id":"320613769","IsPullRequest":false,"CreatedAt":"2018-05-06T18:02:18","Actor":"csnewman","Number":"779","RawContent":null,"Title":"Invalid XHTML markup causes lockup","State":"open","Body":"Invalid xhtml markup in the form of an unterminated tag causes the CPU to hit 100% and for the page to become completely unresponsive until chrome asks you if you wish to kill the page.\r\n\r\n```\r\n@page \"/example\"\r\n\r\n<h5 class=\"card-title\">(some text)</h5>\r\n<p class=\"card-text\">\r\n    (Some text as well)\r\n<p class=\"card-text\">\r\n   (Some other text)\r\n</p>\r\n```\r\n\r\nAs seen, the first p tag is not terminated. \r\n","Url":"https://github.com/aspnet/Blazor/issues/779","RelatedDescription":"Open issue \"Invalid XHTML markup causes lockup\" (#779)"},{"Id":"320560101","IsPullRequest":false,"CreatedAt":"2018-05-06T03:45:03","Actor":"danroth27","Number":"775","RawContent":null,"Title":"Blazor dev tools browser extension","State":"open","Body":"Other frameworks like [Vue](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd) and [Redux](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd) have some pretty nice dev tools browser extensions. \r\n\r\nWe should consider having a Blazor dev tools browser extension. Potential scenarios:\r\n- Inspect components\r\n- Update components with live reloading\r\n","Url":"https://github.com/aspnet/Blazor/issues/775","RelatedDescription":"Open issue \"Blazor dev tools browser extension\" (#775)"},{"Id":"320527558","IsPullRequest":true,"CreatedAt":"2018-05-05T17:37:35","Actor":"galvesribeiro","Number":"771","RawContent":null,"Title":"Event payload","State":"open","Body":"Enhanced DOM events with proper payload.\r\n\r\nEvery commit comes with a particular (or set of related) event(s). \r\n\r\nI'll rebase/reset once the review is over.\r\n\r\n~~Blockers:~~\r\n\r\n~~- Touch events are blocked by #776~~","Url":"https://github.com/aspnet/Blazor/pull/771","RelatedDescription":"Open PR \"Event payload\" (#771)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-09T05:30:02.5472797Z","RunDurationInMilliseconds":1230}