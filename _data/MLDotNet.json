{"Data":{"GitHub":{"Issues":[{"Id":"534292296","IsPullRequest":true,"CreatedAt":"2019-12-08T04:08:28","Actor":"sharwell","Number":"4534","RawContent":null,"Title":"Conditionally compile helper code","State":"closed","Body":"Fixes IDE0051 (Private member is unused) in tests.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4534","RelatedDescription":"Closed or merged PR \"Conditionally compile helper code\" (#4534)"},{"Id":"534291627","IsPullRequest":true,"CreatedAt":"2019-12-08T04:08:05","Actor":"sharwell","Number":"4532","RawContent":null,"Title":"Make test methods public","State":"closed","Body":"Fixes IDE0051 (Private member is unused)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4532","RelatedDescription":"Closed or merged PR \"Make test methods public\" (#4532)"},{"Id":"534291193","IsPullRequest":true,"CreatedAt":"2019-12-08T04:07:30","Actor":"sharwell","Number":"4531","RawContent":null,"Title":"Disable CS0649 in OnnxConversionTest","State":"closed","Body":"Fixes an IDE0051 warning (Private member is unused).","Url":"https://github.com/dotnet/machinelearning/pull/4531","RelatedDescription":"Closed or merged PR \"Disable CS0649 in OnnxConversionTest\" (#4531)"},{"Id":"534290511","IsPullRequest":true,"CreatedAt":"2019-12-08T04:06:38","Actor":"sharwell","Number":"4530","RawContent":null,"Title":"Make local functions static where applicable","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4530","RelatedDescription":"Closed or merged PR \"Make local functions static where applicable\" (#4530)"},{"Id":"534294197","IsPullRequest":true,"CreatedAt":"2019-12-08T01:52:54","Actor":"sharwell","Number":"4535","RawContent":null,"Title":"Prevent exceptions from escaping FileSystemWatcher events","State":"closed","Body":"Exceptions in the handler of FileSystemWatcher events will terminate the process. This pull request updates the event handler to use a try/catch block that logs the error instead of crashing the process.\r\n\r\nThis fixes one known cause of test process failures.","Url":"https://github.com/dotnet/machinelearning/pull/4535","RelatedDescription":"Closed or merged PR \"Prevent exceptions from escaping FileSystemWatcher events\" (#4535)"},{"Id":"534472994","IsPullRequest":true,"CreatedAt":"2019-12-08T00:40:51","Actor":"sharwell","Number":"4547","RawContent":null,"Title":"WIP Use std::unique_ptr for objects in LdaEngine","State":"open","Body":"Builds on #4546","Url":"https://github.com/dotnet/machinelearning/pull/4547","RelatedDescription":"Open PR \"WIP Use std::unique_ptr for objects in LdaEngine\" (#4547)"},{"Id":"534472376","IsPullRequest":true,"CreatedAt":"2019-12-08T00:33:59","Actor":"sharwell","Number":"4546","RawContent":null,"Title":"Pass by reference when null is not expected","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4546","RelatedDescription":"Open PR \"Pass by reference when null is not expected\" (#4546)"},{"Id":"534472100","IsPullRequest":true,"CreatedAt":"2019-12-08T00:31:26","Actor":"sharwell","Number":"4545","RawContent":null,"Title":"Add Xunit.Combinatorial for test projects","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4545","RelatedDescription":"Open PR \"Add Xunit.Combinatorial for test projects\" (#4545)"},{"Id":"534471315","IsPullRequest":true,"CreatedAt":"2019-12-08T00:23:30","Actor":"sharwell","Number":"4544","RawContent":null,"Title":"WIP Safe pointers","State":"open","Body":"Locally I converted most owned native objects to `std::unique_ptr` and `std::shared_ptr`. This pull request represents a relatively easy-to-review subset of the changes with minimal overall fan-out in the code.\r\n\r\n* Pass by reference when null is not expected (submitted separately as #4546)\r\n* Use `std::unique_ptr` for objects in `LdaEngine` (submitted separately as #4547)\r\n* Use `std::unique_ptr` for `samplers_` and `likelihood_in_iter_`","Url":"https://github.com/dotnet/machinelearning/pull/4544","RelatedDescription":"Open PR \"WIP Safe pointers\" (#4544)"},{"Id":"534447833","IsPullRequest":true,"CreatedAt":"2019-12-07T20:21:02","Actor":"sharwell","Number":"4543","RawContent":null,"Title":"Update code coverage integration","State":"open","Body":"* Simplifies coverage integration\r\n* Removes the need to define CODECOV_TOKEN during builds","Url":"https://github.com/dotnet/machinelearning/pull/4543","RelatedDescription":"Open PR \"Update code coverage integration\" (#4543)"},{"Id":"534340364","IsPullRequest":true,"CreatedAt":"2019-12-07T20:19:39","Actor":"sharwell","Number":"4540","RawContent":null,"Title":"Increase the code coverage run timeout","State":"closed","Body":"Most of the code coverage runs are timing out. Increase the timeout to match the value used for non-code-coverage builds.","Url":"https://github.com/dotnet/machinelearning/pull/4540","RelatedDescription":"Closed or merged PR \"Increase the code coverage run timeout\" (#4540)"},{"Id":"534432183","IsPullRequest":false,"CreatedAt":"2019-12-07T18:00:07","Actor":"CBrauer","Number":"4542","RawContent":null,"Title":"Format error in GetFormattedConfusionTable\"","State":"open","Body":"Hey,\r\n\r\nI'm trying to print a confusion matrix on a binary classification model using:\r\n\r\n`Console.WriteLine(\"Confusion Matrix:\\n{0}\", metrics.ConfusionMatrix.GetFormattedConfusionTable());\r\n`\r\n\r\nI get:\r\n\r\n![image](https://user-images.githubusercontent.com/1317234/70378656-e3f8f380-18d7-11ea-8e96-e96fea095059.png)\r\n\r\nShouldn’t there be a comma here instead of a space?\r\n\r\nCharles","Url":"https://github.com/dotnet/machinelearning/issues/4542","RelatedDescription":"Open issue \"Format error in GetFormattedConfusionTable\"\" (#4542)"},{"Id":"534366723","IsPullRequest":false,"CreatedAt":"2019-12-07T07:17:51","Actor":"willvelida","Number":"4541","RawContent":null,"Title":"InvalidDataException: End of Central Directory record could not be found. Error when loading custom trained model from Azure Blob Storage in ASP.NET Core Web API ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.0.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI have trained a regression model and I have uploaded it to a container in Blob Storage. This is the method that I use to upload the model to blob storage:\r\n\r\n`public async Task TrainAndUploadModelAsync(MLContext mlContext, string dataPath, CloudBlobContainer container)\r\n{\r\nIDataView dataView = mlContext.Data.LoadFromTextFile(dataPath, hasHeader: true, separatorChar: ',');\r\n\r\n        var pipeline = mlContext.Transforms.CopyColumns(\"Label\", \"FareAmount\")\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"VendorIdEncoded\", \"VendorId\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"RateCodeEncoded\", \"RateCode\"))\r\n            .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"PaymentTypeEncoded\", \"PaymentType\"))\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\", \"VendorIdEncoded\", \"RateCodeEncoded\", \"PassengerCount\", \"TripTime\", \"TripDistance\", \"PaymentTypeEncoded\"))\r\n            .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n        var model = pipeline.Fit(dataView);\r\n\r\n        using (var stream = new MemoryStream())\r\n        {\r\n            mlContext.Model.Save(model, dataView.Schema, stream);\r\n            stream.Position = 0;\r\n            await _azureStorageHelpers.UploadBlobToStorage(container, \"Model.zip\", stream);\r\n        }\r\n    }`\r\nNow I'm trying to consume that model via a ASP.NET Core Web API like so:\r\n\r\nservices.AddPredictionEnginePool<TaxiTrip, TaxiTripFarePrediction>() .FromUri( modelName: \"TaxiTripFarePredictionModel\", uri: \"https://velidastorage.blob.core.windows.net/mlmodels/model.zip\", period: TimeSpan.FromSeconds(15));\r\n\r\nThen I'm calling a POST Method to make a prediction on the following JSON payload\r\n\r\n{ \"VendorId\": \"VTS\", \"RateCode\": \"1\", \"PassengerCount\": 1, \"TripTime\": 1140, \"TripDistance\": 3.75, \"PaymentType\": \"CRD\", \"FareAmount\": 0 }\r\n\r\nAnd the POST Method:\r\n\r\n`[HttpPost]\r\npublic ActionResult Post([FromBody] TaxiTrip input)\r\n{\r\nif (!ModelState.IsValid)\r\n{\r\nreturn BadRequest();\r\n}\r\n\r\n        TaxiTripFarePrediction prediction = _predictionEnginePool.Predict(modelName: \"TaxiTripFarePredictionModel\", example: input);\r\n\r\n        string predictedFareAmount = prediction.FareAmount.ToString();\r\n\r\n        return Ok(predictedFareAmount);\r\n    }`\r\n\r\n\r\n- **What happened?**\r\n\r\nHowever, when I call the PredictionEnginePool.Predict() method, I get the following error:\r\n\r\nSystem.FormatException: 'Failed to open a zip archive'. Inner Exception InvalidDataException: End of Central Directory record could not be found.\r\n\r\n- **What did you expect?**\r\n\r\nExpected the model to be consumed to make a prediction\r\n\r\nI'm not sure where I am going wrong here. I'm wondering whether or not the model has been uploaded correctly, or whether the Web API is having difficulty downloading the blob.\r\n\r\n\r\n### Source code / logs\r\n\r\nSource code for API and Model Trainer can be found here\r\n\r\nhttps://github.com/willvelida/PricePredictor","Url":"https://github.com/dotnet/machinelearning/issues/4541","RelatedDescription":"Open issue \"InvalidDataException: End of Central Directory record could not be found. Error when loading custom trained model from Azure Blob Storage in ASP.NET Core Web API \" (#4541)"},{"Id":"534332024","IsPullRequest":true,"CreatedAt":"2019-12-07T01:14:11","Actor":"sharwell","Number":"4539","RawContent":null,"Title":"Create SafeBoosterHandle and SafeDataSetHandle","State":"open","Body":"These safe handles were created based on the crash data in https://dev.azure.com/dnceng/public/_build/results?buildId=449745&view=logs.","Url":"https://github.com/dotnet/machinelearning/pull/4539","RelatedDescription":"Open PR \"Create SafeBoosterHandle and SafeDataSetHandle\" (#4539)"},{"Id":"534314921","IsPullRequest":true,"CreatedAt":"2019-12-07T00:02:01","Actor":"sharwell","Number":"4538","RawContent":null,"Title":"WIP Convert LdaEngine to a SafeHandle","State":"open","Body":"This pull request follows the test failure observed in https://dev.azure.com/dnceng/public/_build/results?buildId=449759&view=ms.vss-test-web.build-test-results-tab&runId=14347330&resultId=100770&paneView=debug. Converting this object to a SafeHandle has two primary advantages:\r\n\r\n1. The object will not be disposed while there is an ongoing native call\r\n2. Misuse of the object by trying to pass an invalid instance to a native call will throw an exception at the point of the call","Url":"https://github.com/dotnet/machinelearning/pull/4538","RelatedDescription":"Open PR \"WIP Convert LdaEngine to a SafeHandle\" (#4538)"},{"Id":"534302884","IsPullRequest":true,"CreatedAt":"2019-12-06T23:16:25","Actor":"sharwell","Number":"4537","RawContent":null,"Title":"Enable VSTestBlame to show details for crashes","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4537","RelatedDescription":"Open PR \"Enable VSTestBlame to show details for crashes\" (#4537)"},{"Id":"534297498","IsPullRequest":true,"CreatedAt":"2019-12-06T22:59:12","Actor":"sharwell","Number":"4536","RawContent":null,"Title":"Update Microsoft.Extensions.* to 3.0.1","State":"open","Body":"The 3.0 release includes a fix to cases where `ChangeToken.OnChange` would not unregister callbacks even when disposed.\r\n\r\nSee aspnet/Extensions#558, aspnet/Extensions#869","Url":"https://github.com/dotnet/machinelearning/pull/4536","RelatedDescription":"Open PR \"Update Microsoft.Extensions.* to 3.0.1\" (#4536)"},{"Id":"534291967","IsPullRequest":true,"CreatedAt":"2019-12-06T22:42:11","Actor":"sharwell","Number":"4533","RawContent":null,"Title":"WIP Onnx conversion theory","State":"open","Body":"Use `[Theory]` to break up tests in OnnxConversionTest.\r\n\r\n📝 Builds on #4532 and #4545\r\n\r\n💡 Recommended review strategy is commit-by-commit. The final commit is easier to review with whitespace-only changes hidden.","Url":"https://github.com/dotnet/machinelearning/pull/4533","RelatedDescription":"Open PR \"WIP Onnx conversion theory\" (#4533)"},{"Id":"534290426","IsPullRequest":true,"CreatedAt":"2019-12-06T22:37:20","Actor":"sharwell","Number":"4529","RawContent":null,"Title":"Avoid running API Compat for design time builds","State":"open","Body":"This change prevents the API compat tool from failing design time builds and leaving the IDE project model in a bad state for development.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4529","RelatedDescription":"Open PR \"Avoid running API Compat for design time builds\" (#4529)"},{"Id":"533958371","IsPullRequest":false,"CreatedAt":"2019-12-06T12:57:03","Actor":"thomasrosdahl","Number":"4528","RawContent":null,"Title":"PredictionEnginePool.GetPredictionEngine is not thread safe","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: Azure Functions Runtime 2.7.1948\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nInvoked `PredictionEnginePool.Predict(\"MyModelName\", example)` from multiple threads.\r\n\r\n- **What happened?**\r\n`System.ArgumentException: 'An item with the same key has already been added. Key: MyModelName'`\r\n\r\n- **What did you expect?**\r\nMethod is thread safe so that multiple named pools cannot be created simultaneously.\r\n\r\n### Source code / logs\r\n\r\n   at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException[T](T key)\r\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\r\n   at Microsoft.Extensions.ML.PredictionEnginePool`2.GetPredictionEngine(String modelName)\r\n   at Microsoft.Extensions.ML.PredictionEnginePoolExtensions.Predict[TData,TPrediction](PredictionEnginePool`2 predictionEnginePool, String modelName, TData example)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4528","RelatedDescription":"Open issue \"PredictionEnginePool.GetPredictionEngine is not thread safe\" (#4528)"},{"Id":"533787183","IsPullRequest":false,"CreatedAt":"2019-12-06T07:06:22","Actor":"rauhs","Number":"4527","RawContent":null,"Title":"Missing C# doc string for ChnageModelThreshold","State":"open","Body":"Linky:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3f98485e887177f2082f027c22f46fd64ebbe246/src/Microsoft.ML.Data/TrainCatalog.cs#L261-L267","Url":"https://github.com/dotnet/machinelearning/issues/4527","RelatedDescription":"Open issue \"Missing C# doc string for ChnageModelThreshold\" (#4527)"},{"Id":"533750579","IsPullRequest":true,"CreatedAt":"2019-12-06T05:13:16","Actor":"frank-dong-ms","Number":"4526","RawContent":null,"Title":"add more log for SsaForecast test","State":"open","Body":"1. add more log for SsaForecast test \r\n2. make TimeSeries test class inherent from BaseTestBaseline for logging\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4526","RelatedDescription":"Open PR \"add more log for SsaForecast test\" (#4526)"},{"Id":"533616068","IsPullRequest":false,"CreatedAt":"2019-12-05T21:43:49","Actor":"natke","Number":"4525","RawContent":null,"Title":"Image links broken","State":"open","Body":"There are two broken image links on this page. One for each metric description.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: c1784ca5-56a4-75ea-ae35-ad29872348cf\n* Version Independent ID: 2084e039-fcb3-61b4-08ae-29f509b8cb30\n* Content: [RankingMetrics Class (Microsoft.ML.Data)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.rankingmetrics?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Data/RankingMetrics.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Data/RankingMetrics.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @natke\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4525","RelatedDescription":"Open issue \"Image links broken\" (#4525)"},{"Id":"533513959","IsPullRequest":false,"CreatedAt":"2019-12-05T18:15:31","Actor":"huy302","Number":"4524","RawContent":null,"Title":"Model fit in Parallel.For is slower than For","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10 64\r\n- **.NET Version (eg., dotnet --info)**: 4.6.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm trying to tune hyperparamater and see if I can implement grid search myself. In order to do that, I would like to fit the model in multiple threads by using Parallel.For\r\n\r\n- **What happened?**\r\nHowever, I realized that fitting the model multiple times using Parallel.For takes much longer than a single threaded for loop. In a for loop. my CPU utilization is at around 30% all the time, while using Parallel.For, it spikes to 100% at first, then drops down to 6% for quite some time, then jumps back to 30% and finishes. Am I not supposed to fit in parallel? If that is the case then what is the best way to do grid search?\r\n\r\n### Source code / logs\r\n\r\nSingle threaded for - takes 20 seconds\r\n\r\n```\r\nfor (var i = 0; i < 100; i++) {\r\n    var pipeline = CreatePipeline();\r\n    pipeline.Fit(dataView);\r\n}\r\n```\r\n\r\nParallel.For - takes 56 seconds\r\n\r\n```\r\nParallel.For(0, 100, i => {\r\n    var pipeline = CreatePipeline();\r\n    pipeline.Fit(dataView);\r\n});\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4524","RelatedDescription":"Open issue \"Model fit in Parallel.For is slower than For\" (#4524)"},{"Id":"533292844","IsPullRequest":true,"CreatedAt":"2019-12-05T11:28:53","Actor":"yaeldekel","Number":"4523","RawContent":null,"Title":"Add aka.ms aliases for files downloaded from Azure blobs","State":"open","Body":"Fixes #4445 .","Url":"https://github.com/dotnet/machinelearning/pull/4523","RelatedDescription":"Open PR \"Add aka.ms aliases for files downloaded from Azure blobs\" (#4523)"},{"Id":"533098218","IsPullRequest":true,"CreatedAt":"2019-12-05T03:19:59","Actor":"codemzs","Number":"4522","RawContent":null,"Title":"Image classification performance improvements and option to create validation set from train set.","State":"open","Body":"This change improves the overall performance of image classification API and tensorflow transform by making the graph runner memory efficient and saving the bottleneck cached values in image classification API in binary format instead of text format.\r\n\r\nThis change also adds the option in Image Classification API to create validation set from train set in the event validation set is not provided by the user. Validation set is used for early stopping.","Url":"https://github.com/dotnet/machinelearning/pull/4522","RelatedDescription":"Open PR \"Image classification performance improvements and option to create validation set from train set.\" (#4522)"},{"Id":"532850454","IsPullRequest":true,"CreatedAt":"2019-12-04T18:11:31","Actor":"michaelgsharp","Number":"4521","RawContent":null,"Title":"DateTimeTransformer featurizer","State":"open","Body":"This change adds in the DateTimeTransformer into the new Featurizers project. It is the first of a series of PR's that will go in. The DateTimeTransformer is implemented in native code, so this is mostly just a wrapper around that with the appropriate entrypoints for NimbusML as well. Since all the new estimator/transformers follow the same patterns, once this one is reviewed and checked in I will create the other PR's.","Url":"https://github.com/dotnet/machinelearning/pull/4521","RelatedDescription":"Open PR \"DateTimeTransformer featurizer\" (#4521)"},{"Id":"532659728","IsPullRequest":false,"CreatedAt":"2019-12-04T12:42:09","Actor":"yamachu","Number":"4520","RawContent":null,"Title":"[DNN Training] Cannot execute retrain DNN model(Tensorflow model) manually since ML.NET 1.4.0-stable","State":"open","Body":"ref: https://github.com/dotnet/machinelearning/issues/4307\r\n\r\nWe cannot call `RetrainDnnModel` method publicly and manually because  of this commit ( https://github.com/dotnet/machinelearning/pull/4362 ).\r\n\r\nI think that regression tasks by TensorflowRetrain (RetrainDnnModel ) only can predict multiple-values.\r\nSo I think that Access-Modifiers of `RetrainDnnModel` should be public if no way for predicting multiple-values.","Url":"https://github.com/dotnet/machinelearning/issues/4520","RelatedDescription":"Open issue \"[DNN Training] Cannot execute retrain DNN model(Tensorflow model) manually since ML.NET 1.4.0-stable\" (#4520)"},{"Id":"532419251","IsPullRequest":false,"CreatedAt":"2019-12-04T03:08:51","Actor":"thezaza101","Number":"4519","RawContent":null,"Title":"OneHotHashEncoding / OneHotEncoding transformer output","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10 \r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 3.0.100, ML.NET 1.4.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nInspected output of OneHotHashEncoding / OneHotEncoding\r\n\r\n- **What happened?**\r\nExpected vector different representations for different categories, however they were the same.\r\n\r\nIf the first category is `[1, 0, 0, 0]` then the second category should be different (i.e. `[0, 1, 0, 0]`). however it appears to be the same when inspecting it.\r\n\r\nInspected `IDataView` using `data.Preview(numRows)`.\r\n\r\n### Source code / logs\r\n\r\nCode:\r\n```csharp\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nnamespace cat\r\n{\r\n    class CatInput\r\n    {\r\n        [LoadColumn(0),ColumnName(\"input\")]\r\n        public string cat;\r\n    }\r\n    class Program\r\n    {\r\n        static MLContext _mlContext = new MLContext();\r\n        static IDataView _data;\r\n        static void Main(string[] args)\r\n        {\r\n            _data = _mlContext.Data.LoadFromTextFile<CatInput>(path: \"cat\", hasHeader: false, separatorChar: ',');\r\n            IEstimator<ITransformer> _pipeline = _mlContext.Transforms.Categorical.OneHotHashEncoding(\r\n                inputColumnName: \"input\",\r\n                outputColumnName: \"output\");\r\n            \r\n            var model = _pipeline.Fit(_data);\r\n            IDataView tData = model.Transform(_data);\r\n            var previewObject = tData.Preview(10);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ninput data:\r\n```\r\n                input                 |\r\n---------------------------------------\r\n                 red                  |\r\n                 red                  |\r\n                 red                  |\r\n                 blue                 |\r\n                purple                |\r\n                yellow                |\r\n                 red                  |\r\n                 blue                 |\r\n                 blue                 |\r\n                purple                |\r\n```\r\nScreenshots of inspection and where the values should be different.\r\nRow 0 (\"red\"):\r\n![PreviewRow0](https://user-images.githubusercontent.com/27200279/70109206-45824d80-169f-11ea-9bb2-af28522283fd.png)\r\nRow 3 (\"blue\"):\r\n![PreviewRow1](https://user-images.githubusercontent.com/27200279/70109207-45824d80-169f-11ea-911d-535808367adc.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4519","RelatedDescription":"Open issue \"OneHotHashEncoding / OneHotEncoding transformer output\" (#4519)"},{"Id":"532336889","IsPullRequest":false,"CreatedAt":"2019-12-03T23:28:19","Actor":"mstfbl","Number":"4518","RawContent":null,"Title":"System.ArgumentOutOfRangeException in NimbusML's NGramFeaturizer2.py caused by CustomStopWordsRemover/Feature_extraction.text.stopwords in ML.NET","State":"open","Body":"As addressed in this [issue ](https://github.com/microsoft/NimbusML/issues/365) in the NimbusML repo, there is a bug with the ML.NET bindings of CustomStopWordsRemover, which is StopWordsRemovingTransformer.cs. \r\n\r\nThe specific error message is: \r\nRuntimeError: Error: *** System.ArgumentOutOfRangeException: 'dataFile is empty\r\nThe full error log can be found [here](https://dev.azure.com/aifx/public/_build/results?buildId=2089&view=logs&j=d0e8f4b8-2f67-5548-290c-4d6f15a1cbca&t=e5950cbb-cc45-5e54-16a6-7bfce2ad073d&l=8236).","Url":"https://github.com/dotnet/machinelearning/issues/4518","RelatedDescription":"Open issue \"System.ArgumentOutOfRangeException in NimbusML's NGramFeaturizer2.py caused by CustomStopWordsRemover/Feature_extraction.text.stopwords in ML.NET\" (#4518)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-08T05:30:40.2930732Z","RunDurationInMilliseconds":674}