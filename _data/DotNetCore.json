{"Data":{"Blog":{"FeedItems":[{"Title":"An Introduction to DataFrame","PublishedOn":"2019-12-16T16:00:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last month, we announced .NET support for Jupyter notebooks, and showed how to use them to work with .NET for Apache Spark and ML.NET. Today, we&#8217;re announcing the preview of a DataFrame type for...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-dataframe/","RawContent":null},{"Title":"ConfigureAwait FAQ","PublishedOn":"2019-12-12T04:31:21+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET added async/await to the languages and libraries over seven years ago. In that time, it&#8217;s caught on like wildfire, not only across the .NET ecosystem, but also being replicated in a myriad...","Href":"https://devblogs.microsoft.com/dotnet/configureawait-faq/","RawContent":null},{"Title":"An Introduction to System.Threading.Channels","PublishedOn":"2019-12-12T03:52:18+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"&#8220;Producer/consumer&#8221; problems are everywhere, in all facets of our lives. A line cook at a fast food restaurant, slicing tomatoes that are handed off to another cook to assemble a burger,...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/","RawContent":null},{"Title":".NET Framework December 2019 Security and Quality Rollup","PublishedOn":"2019-12-10T21:39:52+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 2019 Security and Quality Rollup Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the latest security...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/","RawContent":null},{"Title":"We made Windows Server Core container images >40% smaller","PublishedOn":"2019-12-09T21:50:23+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Over the past year, we&#8217;ve been working with the Windows Server team to make Windows Server Core container images a lot smaller. They are now 40% smaller! The Windows Server team has already...","Href":"https://devblogs.microsoft.com/dotnet/we-made-windows-server-core-container-images-40-smaller/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 1","PublishedOn":"2019-12-09T09:33:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We open sourced our new GC Perf Infrastructure! It’s now part of the dotnet performance repo. I’ve been meaning to write about it ‘cause some curious minds had been asking when they could use it after...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-1/","RawContent":null},{"Title":".NET Core 2.2 will reach End of Life on December 23, 2019","PublishedOn":"2019-12-05T19:55:57+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET Core 2.2 was released on December 4, 2018. As a non-LTS (&#8220;Current&#8221;) release, it is supported for three months after the next release. .NET Core 3.0 was released on September 23, 2019....","Href":"https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/","RawContent":null},{"Title":"Updates to .NET Core Windows Forms designer in Visual Studio 16.5 Preview 1","PublishedOn":"2019-12-05T18:56:40+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"We are happy to announce the new preview version of the .NET Core Windows Forms designer, which is available with the Visual Studio 16.5 Preview 1.\nThe big news is that the designer is now part of...","Href":"https://devblogs.microsoft.com/dotnet/updates-to-net-core-windows-forms-designer-in-visual-studio-16-5-preview-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4","PublishedOn":"2019-12-03T20:32:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4\nWe are excited to announce the general availability of EF Core 3.1 and EF 6.4 on nuget.org.\nThe final versions of .NET Core 3.1 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-1-and-entity-framework-6-4/","RawContent":null},{"Title":"Announcing .NET Core 3.1","PublishedOn":"2019-12-03T17:32:24+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Announcing .NET Core 3.1\nWe’re excited to announce the release of .NET Core 3.1. It&#8217;s really just a small set of fixes and refinements over .NET Core 3.0, which we released just over two months...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"11108512890","Type":"PullRequestEvent","CreatedAt":"2019-12-17T15:52:33","Actor":"khalidabuhakmeh","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Opened pull request \"Update Teams Link\" (#156) at dotnet/foundation","RelatedBody":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`"},{"Id":"10879854793","Type":"IssuesEvent","CreatedAt":"2019-11-17T05:53:48","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Opened issue \"Typos in CLA bot profile\" (#155) at dotnet/foundation","RelatedBody":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)"},{"Id":"10878192098","Type":"PullRequestEvent","CreatedAt":"2019-11-16T15:59:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Opened pull request \"Fix broken links\" (#154) at dotnet/foundation","RelatedBody":""},{"Id":"10864162405","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:22:28","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Opened pull request \"Fix broken links\" (#153) at dotnet/foundation","RelatedBody":""},{"Id":"10863953091","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:00:24","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Opened pull request \"Fix broken links\" (#152) at dotnet/foundation","RelatedBody":""},{"Id":"10823146740","Type":"PullRequestEvent","CreatedAt":"2019-11-08T23:32:03","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Merged pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68"},{"Id":"10822052136","Type":"PullRequestEvent","CreatedAt":"2019-11-08T20:13:07","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Opened pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":""},{"Id":"10806560653","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:43:05","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Merged pull request \"(GH-111) Update Source Link location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"10806557022","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:42:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Merged pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10806555226","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:41:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Merged pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11059014848","Type":"IssuesEvent","CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Opened issue \"December 2019 .NET Updates\" (#145) at dotnet/announcements","RelatedBody":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"11050403011","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Opened issue \"Removal of read-collaborator access\" (#144) at dotnet/announcements","RelatedBody":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the contributor badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n\r\n-   **You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718."},{"Id":"11003471296","Type":"IssuesEvent","CreatedAt":"2019-12-03T20:36:30","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.1\" (#143) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`."},{"Id":"11002231262","Type":"IssuesEvent","CreatedAt":"2019-12-03T18:00:28","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Opened issue \".NET Core 3.1.0\" (#142) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10873564628","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:51:28","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`."},{"Id":"10873546016","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:49:05","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`."},{"Id":"10864634140","Type":"IssuesEvent","CreatedAt":"2019-11-14T17:15:09","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 3\" (#139) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n"},{"Id":"10862597044","Type":"IssuesEvent","CreatedAt":"2019-11-14T13:37:29","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Opened issue \"November 2019 .NET Updates\" (#138) at dotnet/announcements","RelatedBody":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10856924757","Type":"IssuesEvent","CreatedAt":"2019-11-13T21:41:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Opened issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137) at dotnet/announcements","RelatedBody":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Framework Samples\r\n\r\n"},{"Id":"10847180825","Type":"IssuesEvent","CreatedAt":"2019-11-12T22:05:52","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Opened issue \".NET Core Docker images support for Windows Server, version 1909\" (#136) at dotnet/announcements","RelatedBody":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n"},{"Id":"10822538366","Type":"IssuesEvent","CreatedAt":"2019-11-08T21:33:13","Actor":"CESARDELATORRE","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Opened issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135) at dotnet/announcements","RelatedBody":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n**- New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n**- Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n**- Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n**- PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n**- ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"11111382242","Type":"IssuesEvent","CreatedAt":"2019-12-17T22:03:32","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14320","RelatedDescription":"Closed issue \"Consider removing String.IsAscii() fast paths\" (#14320) at dotnet/coreclr","RelatedBody":"IsAscii needs to enumerate the whole string to check the chars and then caches the result, so it can be  actually slowing things down in situations where we're only going to be operating on a string once (which is probably fairly common)."},{"Id":"11103276966","Type":"IssuesEvent","CreatedAt":"2019-12-17T03:12:52","Actor":"zengqinglei","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27974","RelatedDescription":"Opened issue \"Unable to delete assembly file after plugin uninstall\" (#27974) at dotnet/coreclr","RelatedBody":"**Describe the bug**\r\n\r\nWhen I use the sample code: https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading\r\nThen I want to remove the assembly file after the plugin is uninstalled and I get an exception:\r\n\r\n![image](https://user-images.githubusercontent.com/7374317/70961451-cb998d80-20bc-11ea-837c-601b70c8e52a.png)\r\n\r\n**Run Environment**\r\n* .NET CORE 3.1\r\n* Windows 10 \r\n![image](https://user-images.githubusercontent.com/7374317/70961722-a8231280-20bd-11ea-852a-eb42a443ac45.png)\r\n\r\nI hope to get your help soon, thank you!"},{"Id":"11101174835","Type":"PullRequestEvent","CreatedAt":"2019-12-16T20:51:34","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27973","RelatedDescription":"Opened pull request \"Release/3.1 port of dotnet/runtime#239\" (#27973) at dotnet/coreclr","RelatedBody":"Fix for #27923\r\n\r\nThe jit might fail to locate a class handle for a ref class, leading to an\r\nunexpected crash while jitting.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crash/exception\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing\r\nframework or test code.\r\n\r\n## Risk\r\n**Low**: the jit will now fall back to using the handle for System.Object if no\r\nbetter option can be found.\r\n\r\ncc @BruceForstall\r\n\r\n____\r\n\r\nIn some cases we may end up in lvaSetClass without a valid ref class handle\r\nfrom either the IR or the stack. Use the handle for object as a conservative\r\nfallback."},{"Id":"11100820522","Type":"IssuesEvent","CreatedAt":"2019-12-16T20:03:18","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27630","RelatedDescription":"Closed issue \"JIT: suboptimal codegen for inlined local function\" (#27630) at dotnet/coreclr","RelatedBody":"https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxNMAfAAgJgIwCwAUFgMwAEu5AwsQN7HlOUVZ4AM5AsngBQCWAOxjl+ASkbMGRZrMoAWcgBleY8gF4AfKIDUOgNyS5y1YZnHKAdlEA6ACoB7AMowEQgOamj5AL7fvZJQc3DgCwqIS5kzSFroG3rJY1vz2zq4eXlG+/lmBWIpcpGEi4t4xFvkmalpxZrEqYnUVeACcAo3eflkBrAXyxRFlCcz8ek3GbG3i49lEPkA===\r\n\r\nSource:\r\n```csharp\r\nusing System;\r\npublic class C\r\n{\r\n    public string M1(int i)\r\n    {\r\n        void L() => i++;\r\n        L();\r\n        return i.ToString();\r\n    }\r\n    \r\n    public string M2(int i)\r\n    {\r\n        i++;\r\n        return i.ToString();\r\n    }\r\n    \r\n    public void M3(int i)\r\n    {\r\n        void L() => i++;\r\n        L();\r\n        Console.WriteLine(i);\r\n    }\r\n    \r\n    public void M4(int i)\r\n    {\r\n        i++;\r\n        Console.WriteLine(i);\r\n    }\r\n}\r\n```\r\n\r\nASM(master on 24 Sep 2019):\r\n```asm\r\nC.M1(Int32)\r\n    L0000: push eax\r\n    L0001: xor eax, eax\r\n    L0003: mov [esp], eax\r\n    L0006: mov [esp], edx\r\n    L0009: mov ecx, [esp]\r\n    L000c: inc ecx\r\n    L000d: mov [esp], ecx\r\n    L0010: lea ecx, [esp]\r\n    L0013: mov ecx, [ecx]\r\n    L0015: xor edx, edx\r\n    L0017: push 0x0\r\n    L0019: push edx\r\n    L001a: xor edx, edx\r\n    L001c: call System.Number.FormatInt32(Int32, System.ReadOnlySpan`1<Char>, System.IFormatProvider)\r\n    L0021: pop ecx\r\n    L0022: ret\r\n\r\nC.M2(Int32)\r\n    L0000: inc edx\r\n    L0001: mov ecx, edx\r\n    L0003: xor edx, edx\r\n    L0005: push 0x0\r\n    L0007: push edx\r\n    L0008: xor edx, edx\r\n    L000a: call System.Number.FormatInt32(Int32, System.ReadOnlySpan`1<Char>, System.IFormatProvider)\r\n    L000f: ret\r\n\r\nC.M3(Int32)\r\n    L0000: lea ecx, [edx+0x1]\r\n    L0003: call System.Console.WriteLine(Int32)\r\n    L0008: ret\r\n\r\nC.M4(Int32)\r\n    L0000: inc edx\r\n    L0001: mov ecx, edx\r\n    L0003: call System.Console.WriteLine(Int32)\r\n    L0008: ret\r\n```\r\n\r\nSurprisingly, the best codegen seems to be `M3`: JIT knows edx is unused, and doesn't write it.\r\n\r\nThe major difference on IL of `M1` and `M3` is how to fetch `i`: `M3` uses it by value, uses `ldloc` and `ldfld` which means a hidden copy. `M1` uses `ldloca` and `ldflda` to make changes happens on original address. But `Int32` is readonly struct, JIT should be aware about this and treat the two operations identical.\r\n\r\ncategory:cq\r\ntheme:optimization\r\nskill-level:expert\r\ncost:medium"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"11112462754","Type":"PullRequestEvent","CreatedAt":"2019-12-18T01:38:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13160","RelatedDescription":"Merged pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13160) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191217.15\r\n- **Date Produced**: 12/18/2019 12:36 AM\r\n- **Commit**: 7e7e3eab372d4c76824ba8c31b05f11b94b8a057\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19617.15\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n"},{"Id":"11087232904","Type":"PullRequestEvent","CreatedAt":"2019-12-14T00:40:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13160","RelatedDescription":"Opened pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13160) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191213.18\r\n- **Date Produced**: 12/13/2019 11:38 PM\r\n- **Commit**: 27111f9d39aae0d41c0958b5f1445145bb05f994\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19613.18\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n"},{"Id":"11086614441","Type":"PullRequestEvent","CreatedAt":"2019-12-13T22:07:37","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13158","RelatedDescription":"Merged pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13158) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191213.8\r\n- **Date Produced**: 12/13/2019 8:24 PM\r\n- **Commit**: e98d59e0cc80d22c6c56e5818cd62583973b6657\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19613.8\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"11086414585","Type":"PullRequestEvent","CreatedAt":"2019-12-13T21:31:54","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13012","RelatedDescription":"Merged pull request \"--skip-duplicate added to `dotnet nuget push` parsing\" (#13012) at dotnet/cli","RelatedBody":"Fix for https://github.com/NuGet/Home/issues/8778\r\n\r\nNew option --skip-duplicate needs to be added to the dotnet parser for `nuget push` to support <tab> auto-completion and telemetry.\r\n\r\nThe [NuGet code changes](https://github.com/NuGet/NuGet.Client/pull/3083) to add this command were inserted into dotnet/cli [release/3.1.1xx](https://github.com/dotnet/cli/pull/12965)\r\n\r\n//cc @livarcocc @rrelyea"},{"Id":"11085628138","Type":"IssuesEvent","CreatedAt":"2019-12-13T19:28:52","Actor":"Thraka","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/13159","RelatedDescription":"Opened issue \"Install script is not signed\" (#13159) at dotnet/cli","RelatedBody":"_From @jozefizso on Friday, December 13, 2019 2:28:43 PM_\r\n\r\nWhy is the PowerShell script unsigned? How do we know we are running a legitimate script when it's downloaded from internet on each build?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: a2e484a9-5e0c-eb3e-1413-7b507c4fa07d\n* Version Independent ID: 5bc7caa5-f1c2-d7d5-fe02-80c65cca9672\n* Content: [dotnet-install scripts - .NET Core CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)\n* Content Source: [docs/core/tools/dotnet-install-script.md](https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-install-script.md)\n* Product: **dotnet-core**\n* Technology: **dotnet-cli**\n* GitHub Login: @mairaw\n* Microsoft Alias: **mairaw**\r\n\r\n_Copied from original issue: dotnet/docs#16242_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"11105540251","Type":"IssuesEvent","CreatedAt":"2019-12-17T10:01:54","Actor":"gulbanana","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1667","RelatedDescription":"Opened issue \"Could we please get CallerArgumentExpressionAttribute in .NET Standard?\" (#1667) at dotnet/standard","RelatedBody":"It's not in ns2.1, so that's a missing feature from C# 8."},{"Id":"11102892581","Type":"IssuesEvent","CreatedAt":"2019-12-17T01:45:22","Actor":"pb-gs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1666","RelatedDescription":"Opened issue \"System.Net.PeerToPeer in .NET Standard\" (#1666) at dotnet/standard","RelatedBody":"Hey there,\r\n\r\nJust wondering if it is likely that .NET Standard will include classes from [`System.Net.PeerToPeer`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer?view=netframework-4.8) (e.g. [`PeerNameResolver`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer.peernameresolver?view=netframework-4.8)) or otherwise have peer name resolution protocol support?\r\n\r\nThank you."},{"Id":"11089053155","Type":"IssuesEvent","CreatedAt":"2019-12-14T15:46:28","Actor":"shcummin","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1665","RelatedDescription":"Opened issue \"<PackageReference> System.* when targeting NET Framework leads to ambiguity\" (#1665) at dotnet/standard","RelatedBody":"Related to Framework compat\r\n\r\nIn a project targeting 4.6, references:\r\n\r\n    <PackageReference Include=\"System.ComponentModel.Annotations\" />\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n\r\nAnd:\r\n\r\n<Reference Include=\"System.ComponentModel.DataAnnotations\"  />\r\n<Reference Include=\"System.ServiceModel\" />\r\n\r\nAppear to be synonymous (because builds pass) when in reality:\r\n\r\n<PackageReference> is restoring packages, rewriting generated nupkg dependencies and introducing version complexity and binplacing new dlls (or facade dlls?)\r\n\r\n<Reference>, comparatively, is unambiguously depending on the Framework and not changing any nuget collateral.\r\n\r\nAs there does not appear to be a particularly compelling reason to use <PackageReference> in this way when targeting .NET Framework 4.5/4.6, and even doing this opens up compat issues such as Issue #1179 , then <PackageReference> in net45/net46 should cause a build error in the msbuild/vs toolchain or cause a runtime error."},{"Id":"11077425503","Type":"IssuesEvent","CreatedAt":"2019-12-12T20:33:41","Actor":"pablocar80","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1664","RelatedDescription":"Opened issue \"Non-nullable members initialized by consumer\" (#1664) at dotnet/standard","RelatedBody":"If we have a class like the following:\r\n\r\n```csharp\r\nclass Person\r\n{\r\n  public string Name { get; set; }\r\n  public Address Address { get; set; }\r\n  [...]\r\n}\r\n```\r\n\r\nThese fields will yield the warning CS8618 \"non-nullable property xxx is uninitialized\". The only way to keep these fields required, is (a) to assign them values in the constructor, or (b) initialize with dummy values in the lines that declares them:\r\n\r\n```csharp\r\nclass Person\r\n{\r\n  public string Name { get; set; } = string.Empty;  // dummy value\r\n  public Address Address { get; set; }\r\n\r\n  public Person(Address address)\r\n  {\r\n     Address = address;   // assign in constructor\r\n  }\r\n}\r\n```\r\n\r\nBut doing so has some problems:\r\n- dummy values, such as the empty string, defeat the original purpose of controlling that the programmer forgot to pass a value\r\n- a class can have many fields, and adding a bunch of parameters to a constructor makes the code awfully less readable\r\n\r\nThus, it would be much more interesting if the \"required\" behavior of these fields was such that any caller creating an instance is required to pass a value, as in the following code:\r\n\r\n```csharp\r\n// compiles without errors or warnings\r\nvar myPerson = new Person\r\n{\r\n  Name = \"Pablo\",\r\n  Address = new Address(...)\r\n}\r\n\r\n// yields a warning that the member `Address` is required yet uninitialized\r\nvar anotherPerson = new Person\r\n{\r\n  Name = \"John\"\r\n}\r\n```\r\n\r\n\r\n\r\n"},{"Id":"11065548642","Type":"IssuesEvent","CreatedAt":"2019-12-11T15:41:07","Actor":"Jmales","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1663","RelatedDescription":"Closed issue \"Can I import net472 project from a .netstandard project? Also, should I?\" (#1663) at dotnet/standard","RelatedBody":"Imagine the following scenario:\r\n\r\nA------------------->B--------------------->C\r\n(**Net472**)----------->(**NetStandard**)--------->(**Net472**)\r\n\r\nMain project A in **NET framework,** referencing a **.Net Standard** project B which references a **NET Framework 472** project.\r\n\r\nIn theory, as **Net Standard** is a subset of **NET framework**, it shouldn't make sense that I can reference the whole from within a subset right? However, if I create a simple App with that structure I'm able to build and run it without errors or warnings.\r\n\r\nBUT, if I try this in other applications, mainly a big one that I'm porting to .NET Standard, I get warning in the **.NET Standard** projects referencing **.NET 472**. When is this warning raised after all?\r\n\r\n`C.csproj was resolved using '.NETFramework,Version=v4.7.2' instead of the project target framework '.NETStandard,Version=v2.0'. This project may not be fully compatible with your project.`\r\n\r\nAnd, can I or can't I reference a **NET472** project from within a **.NET Standard 2.0/2.1**?\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"11111321255","Type":"IssuesEvent","CreatedAt":"2019-12-17T21:54:35","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41732","RelatedDescription":"Closed issue \"HttpUtility.ParseQueryString doesn't roundtrip when there are keys that only differ by case\" (#41732) at dotnet/corefx","RelatedBody":"Using .NET Core 3.0, `HttpUtility.ParseQueryString` doesn't rountrip when there are keys in the query string that only differ by case.\r\n\r\n```f#\r\nlet input = \"type=foo&TYPE=bar\"\r\nlet values = System.Web.HttpUtility.ParseQueryString(input)\r\nlet output = values.ToString()\r\nAssert.Equal(input, output)  // not equal; is \"type=foo&type=bar\"\r\n```\r\n\r\nAFAIK [query strings are case sensitive](https://stackoverflow.com/a/24700171/2978652).\r\n\r\nPossibly related: https://github.com/dotnet/corefx/issues/32575"},{"Id":"11111296850","Type":"IssuesEvent","CreatedAt":"2019-12-17T21:51:05","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/18736","RelatedDescription":"Closed issue \"Config system should model versionless targetgroups as aliases\" (#18736) at dotnet/corefx","RelatedBody":"Today these are distinct nodes in the compatibility graph.\r\n\r\nAs a result `netstandard` isn't considered to be compatible with `netstandard2.0`, nor is `net461` nor `net462`.  This creates a maintainence problem.  We have to *remember* to keep the graph mappings correct.  This means that remapping the versionless targetgroups is not a simple task.\r\n\r\nI'd like to fix this by treating the versionless identifiers as an alias.  This was my original intent with these, but we didn't do it because it required a code change rather than just props."},{"Id":"11111267208","Type":"IssuesEvent","CreatedAt":"2019-12-17T21:46:35","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41679","RelatedDescription":"Closed issue \"UriBuilder adds explicit port to Uri.OriginalString even if not present in original Uri\" (#41679) at dotnet/corefx","RelatedBody":"When passing a `Uri` to `UriBuilder`, the resulting `builder.Uri` has a different `OriginalString`. Specifically, the port has been added to `OriginalString` where it was not present originally.\r\n\r\n```f#\r\nopen System\r\nopen System.Web\r\n\r\nlet uri = \"http://example.com\"\r\nUri(uri).OriginalString  // is \"http://example.com\"\r\nUriBuilder(Uri(uri)).Uri.OriginalString  // is \"http://example.com:80/\"\r\n```\r\n\r\nThis has implications e.g. for serialization of URIs. Newtonsoft.Json seems to use `Uri.OriginalString` when serializing URIs. This means that after having been through a `UriBuilder` (e.g. to add path segments), all my URIs come out with ports where they originally had none.\r\n\r\nNote that a slash is also added.\r\n\r\nThis bug exists in at least .NET Core 3.0 and 2.2"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"11113188679","Type":"PullRequestEvent","CreatedAt":"2019-12-18T04:35:36","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40461","RelatedDescription":"Merged pull request \"Merge master to features/local-function-attributes\" (#40461) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"11111922420","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:36:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6471","RelatedDescription":"Closed issue \"Crashes on Xamarin UWP plaguing my app and I can do nothing about it\" (#6471) at dotnet/corert","RelatedBody":"> realms::realm::__c__displayclass48_0 _writeasync_b__3()\r\n> stowed_exception 80131500: stowed_exception\r\n\r\n> combase.dll\r\n> RoOriginateLanguageException() error.cpp:1522\r\n> System.Private.Interop.dll\r\n> System::Runtime::InteropServices::ExceptionHelpers OriginateLanguageException() ExceptionHelpers.cs:115\r\n> System.Private.Interop.dll\r\n> System::Runtime::InteropServices::ExceptionHelpers ReportUnhandledError() ExceptionHelpers.cs:883\r\n> System.Private.Interop.dll\r\n> Internal::Interop::InteropCallbacks ReportUnhandledError() InteropCallbacks.cs:17\r\n> System.Private.WinRTInterop.CoreLib\r\n> Internal::WinRT::Interop::WinRTCallbacks ReportUnhandledError() Interop.WinRT.cs:390\r\n> SharedLibrary.dll\r\n> System::RuntimeExceptionHelpers ReportUnhandledException() RuntimeExceptionHelpers.cs:153\r\n> SharedLibrary.dll\r\n> Internal::Runtime::Augments::RuntimeAugments ReportUnhandledException() RuntimeAugments.cs:874\r\n> SharedLibrary.dll\r\n> System::Threading::WinRTSynchronizationContext::Invoker InvokeCore$catch$0() SynchronizationContext.WinRT.cs:93\r\n> mrt100_app.dll\r\n> RhpCallCatchFunclet() exceptionhandling.asm:437\r\n> mrt100_app.dll\r\n> System::Runtime::EH DispatchEx() ExceptionHandling.cs:761\r\n> mrt100_app.dll\r\n> System::Runtime::EH RhThrowEx() ExceptionHandling.cs:627\r\n> mrt100_app.dll\r\n> RhpThrowEx() exceptionhandling.asm:191\r\n> SharedLibrary.dll\r\n> System::Runtime::ExceptionServices::ExceptionDispatchInfo Throw() ExceptionDispatchInfo.cs:61\r\n> SharedLibrary.dll\r\n> System::Runtime::CompilerServices::AsyncMethodBuilderCore::__c _ThrowAsync_b__7_0() AsyncMethodBuilder.cs:926\r\n> SharedLibrary.dll\r\n> **System::Threading::ContextCallback Invoke() Invoke:15732480**\r\n> SharedLibrary.dll\r\n> **System::Threading::WinRTSynchronizationContext::Invoker InvokeCore() SynchronizationContext.WinRT.cs:83**\r\n> SharedLibrary.dll\r\n> **System::Threading::WinRTSynchronizationContext::Invoker Invoke() SynchronizationContext.WinRT.cs:74**\r\n> SharedLibrary.dll\r\n> **System::Threading::ContextCallback InvokeOpenStaticThunk() InvokeOpenStaticThunk:15732480**\r\n> Realm.dll\r\n> **Realms::Realm::__c__DisplayClass48_0 _WriteAsync_b__3() Realm.cs:699**\r\n> OneKeep.McgInterop.dll\r\n> Windows::Foundation::DeferralCompletedHandler Invoke() Invoke:15732480\r\n> OneKeep.McgInterop.dll\r\n> __Interop::ReverseComStubs Stub_4() Stub_4:15732480\r\n> OneKeep.McgInterop.dll\r\n> Windows::UI::Core::DispatchedHandler__Impl::Vtbl Invoke__n() Invoke__n:15732480\r\n> Windows.UI.dll\r\n> Windows::UI::Core::CDispatcher ProcessInvokeItem() dispatcher.cpp:1268\r\n> Windows.UI.dll\r\n> Windows::UI::Core::CDispatcher ProcessMessage() dispatcher.cpp:350\r\n> Windows.UI.dll\r\n> Windows::UI::Core::CDispatcher WaitAndProcessMessagesInternal() dispatcher.cpp:1959\r\n> Windows.UI.dll\r\n> Windows::UI::Core::CDispatcher WaitAndProcessMessages() dispatcher.cpp:461\r\n> twinapi.appcore.dll\r\n> _lambda_476a253d60a149be58fa202b506b2c7b_ operator() coreapplicationview.cpp:1201\r\n> SHCore.dll\r\n> _WrapperThreadProc() thread.cpp:321\r\n> kernel32.dll\r\n> BaseThreadInitThunk() thread.c:64\r\n> ntdll.dll\r\n> RtlUserThreadStart() rtlstrt.c:998\r\n\r\nHi. I'm using Realm DB in my app, and as you can see in the stack trace, the WriteAsync method is the one crashing:\r\n\r\n ```\r\n       public Task WriteAsync(Action<Realm> action)\r\n        {\r\n            // Can't use async/await due to mono inliner bugs\r\n            ThrowIfDisposed();\r\n\r\n            Argument.NotNull(action, nameof(action));\r\n\r\n            // If we are on UI thread will be set but often also set on long-lived workers to use Post back to UI thread.\r\n            if (SynchronizationContext.Current != null)\r\n            {\r\n                async Task doWorkAsync()\r\n                {\r\n                    var scheduler = TaskScheduler.FromCurrentSynchronizationContext();\r\n                    await Task.Run(() =>\r\n                    {\r\n                        using (var realm = GetInstance(Config))\r\n                        {\r\n                            realm.Write(() => action(realm));\r\n                        }\r\n                    });\r\n                    var didRefresh = await RefreshAsync();\r\n                    System.Diagnostics.Debug.Assert(didRefresh);\r\n                }\r\n                return doWorkAsync();\r\n            }\r\n            else\r\n            {\r\n                // If running on background thread, execute synchronously.\r\n                Write(() => action(this));\r\n                return Task.CompletedTask;\r\n            }\r\n        }\r\n```\r\n\r\nThe problem is, I don't understand at all why since the crash occurs inside the `InvokeCore` method of `WinRTSynchronizationContext.Invoker`:\r\n\r\n  ```\r\n          private void InvokeCore()\r\n            {\r\n                SynchronizationContext prevSyncCtx = SynchronizationContext.CurrentExplicit;\r\n                try\r\n                {\r\n                    m_callback(m_state);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    //\r\n                    // If we let exceptions propagate to CoreDispatcher, it will swallow them with the idea that someone will\r\n                    // observe them later using the IAsyncInfo returned by CoreDispatcher.RunAsync.  However, we ignore\r\n                    // that IAsyncInfo, because there's nothing Post can do with it (since Post returns void).\r\n                    // So, we report these as unhandled exceptions.\r\n                    //\r\n                    RuntimeAugments.ReportUnhandledException(ex);\r\n                }\r\n                finally\r\n                {\r\n                    SynchronizationContext.SetSynchronizationContext(prevSyncCtx);\r\n                }\r\n            }\r\n```\r\n\r\nSo can you please suggest what is going wrong? Thank you.\r\n"},{"Id":"11111920932","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:36:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6714","RelatedDescription":"Closed issue \"ILT0005 compile error\" (#6714) at dotnet/corert","RelatedBody":"#### Bug description\r\nCan't compile by .Net Native\r\n\r\n#### Repro steps\r\nBuild the repo in RELEASE Mode https://github.com/yinyue200/vsthreadingwithnetnative\r\n\r\n#### Expected behavior\r\nbuild success\r\n\r\n#### Actual behavior\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 91 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Users\\username\\.nuget\\packages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): error : ILT0005: 'C:\\Users\\username\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.1.8\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\username\\Source\\Repos\\App1\\App1\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\App1.rsp\"' returned exit code -2147483645\r\n\r\n#### Additional context\r\nsee https://github.com/Microsoft/vs-threading/issues/446"},{"Id":"11111918775","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:36:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7372","RelatedDescription":"Closed issue \"Internal compiler error when .NET Native compiles __makeref, __refvalue, TypedReference\" (#7372) at dotnet/corert","RelatedBody":"When I put the following C# code in a UWP app in VS 2019 16.0.2, it works well when compiled for Debug.  However, when it is compiled for Release (.NET Native), then error ILT0005 and \"Internal compiler error\" occur.\r\n\r\n```\r\nclass MyTestTypedReference\r\n{\r\n\tprotected int fTestField0 = 123;\r\n\tprotected int fTestField1 = 456;\r\n\tprotected string fTestField2 = \"TestStr\";\r\n\tprotected int fTestField3 = 0;\r\n\r\n\tpublic unsafe void TestMakeTrArray()\r\n\t{\r\n\t\tSystem.TypedReference* trArray = stackalloc System.TypedReference[4];\r\n\t\ttrArray[0] = __makeref(fTestField0);\r\n\t\ttrArray[1] = __makeref(fTestField1);\r\n\t\ttrArray[2] = __makeref(fTestField2);\r\n\t\ttrArray[3] = __makeref(fTestField3);\r\n\t\tTestReceiveTrArray(trArray);\r\n\t}\r\n\r\n\tpublic unsafe void TestReceiveTrArray(System.TypedReference* inParams)\r\n\t{\r\n\t\tRealMethod1(__refvalue(inParams[0], int), __refvalue(inParams[1], int), __refvalue(inParams[2], string), out __refvalue(inParams[3], int));\r\n\t}\r\n\r\n\tpublic void RealMethod1(int inA, int inB, string inC, out int outD)\r\n\t{\r\n\t\toutD = 6000;\r\n\t}\r\n}\r\n\r\npublic unsafe delegate void TestDelegateWithTrArray(object inInstance, System.TypedReference* inParams);\r\n```\r\n\r\nThe error is:\r\n```\r\nInternal compiler error: Object reference not set to an instance of an object.\r\n```\r\n\r\nIf you comment out `TestReceiveTrArray` and compile the rest (meaning compile the __makeref stuff but not the __refvalue stuff), then the error is:\r\n```\r\nError ILT0005: 'C:\\Users\\XXXX\\.nuget\\packages\\runtime.win10-x64.microsoft.net.native.compiler\\2.1.8\\tools\\x64\\ilc\\Tools\\nutc_driver.exe \r\n@\"C:\\Users\\XXXX\\Documents\\TestUwpApp1\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\TestUwpApp1.rsp\"' \r\nreturned exit code -2147483645\r\n```\r\n\t\t\r\n[System.TypedReference](https://docs.microsoft.com/en-us/dotnet/api/System.TypedReference) is low-level but quite useful in certain scenarios such as dynamic programming, Reflection, late-binding / dynamic binding at runtime.\r\n\r\n`System.Delegate.DynamicInvoke(params object[])` and `System.Reflection.MethodBase.Invoke(object, object[])` are useful but costly, especially when executed many times in a loop.  The above code snippet is an example of how `TypedReference` can be used to dynamically execute a method without the overhead of boxing all of the parameters.  It works great when compiled to CIL, but not when compiled with .NET Native 2.1.8.\r\n\r\nIn some circumstances, an alternative to TypedReference is the DLR, but if I remember correctly, it was @jkotas who wrote somewhere something like the following comment about the DLR or DLR with .NAT Native: _\"This stuff is super fragile\"_.  I feel that it is too risky to switch over to a solution that relies upon the DLR.  The DLR is unnecessary in this particular case/project because TypedReference is a much simpler solution that works well.  Some projects do need the full functionality of the DLR, but other projects can get away with TypedReference.\r\n\r\nI very much hope that .NET Native will fully support TypedReference.  Given the choice between .NET Native supporting TypedReference or the DLR, then obviously TypedReference is far far easier to support and maintain than the big complex DLR.  \r\n"},{"Id":"11111917169","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:35:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7882","RelatedDescription":"Closed issue \"UWP .NET Native compilation fails when nutc_driver.exe returns exit code -2147483645\" (#7882) at dotnet/corert","RelatedBody":"**Repro steps**\r\n\r\n1. Create a new UWP Test project in VS 2019\r\n1. Switch to the Release|x86 solution configuration\r\n1. Build (which succeeds, but with many warnings about a missing assembly)\r\n1. Install the `System.Xml.XPath.XmlDocument` package. Build again. No warnings this time. ❓ Why is this package necessary in the default proejct yet somehow not included in the default project?\r\n1. Set the `AllowUnsafeBlocks=true` msbuild property.\r\n1. Add this method to the UWP test project (or any dependency project/package):\r\n\r\n    ```cs\r\n        private static IntPtr GetAddress(object value)\r\n        {\r\n            unsafe\r\n            {\r\n                TypedReference tr = __makeref(value);\r\n                return **(IntPtr**)(&tr);\r\n            }\r\n        }\r\n    ```\r\n\r\n1. Build again.\r\n\r\n**Expected**\r\n\r\nBuild succeeds.\r\n\r\n**Actual**\r\n\r\nBuild fails with:\r\n\r\n> C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n\r\n\r\nFull log follows\r\n\r\n```\r\n1>------ Build started: Project: UWPUnitTestProject2, Configuration: Release x86 ------\r\n1>  UWPUnitTestProject2 -> D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\bin\\x86\\Release\\UWPUnitTestProject2.exe\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 139 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Generating serialization code\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```"},{"Id":"11111912076","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:34:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4768","RelatedDescription":"Closed issue \"[.NET Native] Error ILT0025 when compiling UWP app targeting SDK16299 and NETCore.UWP 6.0.1\" (#4768) at dotnet/corert","RelatedBody":"Hello,\r\nI've updated my UWP app to target the new SDK 16299 (both minimum and target version) and updated the .NETCore.UniversalWindowsPlatform NuGet package to version 6.0.1, and according to the description, this new version also includes an updated .NET Native compiler.\r\n\r\nThe issue is that I can no longer compile my app in Release mode, I get the following error:\r\n\r\n> ILT0025: inconsistent type forwarders were found for type `System.TimeZoneNotFoundException`\r\n\r\nThis is happening for other developers too.\r\nI can't downgrade to the previous NETCore.UWP package as I'm referencing some .NET Standard 2.0 libraries from my application, so I actually need the new .NET Core version.\r\n\r\nI've also sent an email and a repro to the .NET Native team last week but so far they haven't replied yet.\r\n\r\nI'm at a loss here, I haven't been able to push my app update to the Store for over two weeks now because of this issue.\r\nIs this a known bug, or is there a workaround to fix that?\r\n\r\nThank you for your help!\r\nSergio"},{"Id":"11111908170","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:33:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4463","RelatedDescription":"Closed issue \"ARM UWP app crashes in mrt100_app.dll (0xC0000005: Access violation reading location 0x72C9107C)\" (#4463) at dotnet/corert","RelatedBody":"ARM UWP app compiled with .NET Native tool chain crashes right after startup. It happens half the time. x86 or x64 works fine.\r\n\r\n`Unhandled exception at 0x63961663 (mrt100_app.dll) in CryptoCoins.UWP.exe: 0xC0000005: Access violation reading location 0x72C9107C. occurred`\r\n\r\nThe app was compiled targeting:\r\nWindows 10 Creator Update (15063)\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.0\r\n\r\nI have crash dumps from Mobile Device Portal. Perhaps they are from builds with slightly different application code.\r\n[Crash dumps.zip](https://github.com/dotnet/corert/files/1284339/Crash.dumps.zip)\r\n\r\nPlease let me know if I can provide you more information.\r\n"},{"Id":"11111619273","Type":"IssuesEvent","CreatedAt":"2019-12-17T22:40:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7917","RelatedDescription":"Closed issue \"Build error for reverse P/Invoke with ref struct parameter (ref vs. in)\" (#7917) at dotnet/corert","RelatedBody":"In our project we have a reverse P/Invoke call for native to managed callback using a delegate defined as:\r\n```cs\r\nref struct I420AVideoFrame { [...] }\r\n\r\n[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]\r\npublic delegate void I420AVideoFrameUnmanagedCallback(IntPtr userData, ref I420AVideoFrame frame);\r\n```\r\n\r\nOn the C++ side, the signature is something like:\r\n```cpp\r\nvoid I420AVideoFrameCallback(void* user_data, const I420AVideoFrame& frame);\r\n```\r\n\r\nOn the managed C# side we register a static trampoline function that C++ will reverse P/Invoke, and which is defined as:\r\n```cs\r\n[MonoPInvokeCallback(typeof(I420AVideoFrameUnmanagedCallback))]\r\npublic static void I420AFrameCallback(IntPtr userData, ref I420AVideoFrame frame)\r\n{\r\n    [...]\r\n}\r\n```\r\n\r\nThis all works well as is, which is actually the workaround to the issue. Originally since the C++ signature uses `const&` (we just want to pass the struct by pointer/reference from C++ to C# as a view over read-only memory) we used `in` instead of `ref` for the `I420AVideoFrame` parameter, but this yields an error during the .NET Native build (and works with JIT):\r\n```\r\nerror : ILT0021: Could not resolve method 'EETypeRva:0x--------'\r\n```\r\n\r\nThis seems to be the error defined in `RuntimeTypeHandle.cs`, which is worryingly marked as \"last resort\" in comment, although I would expect there should be some metadata available for that method:\r\nhttps://github.com/dotnet/corert/blob/e2c4bc3d7889f951c231d7f131d6a7e20c034fb6/src/System.Private.CoreLib/src/System/RuntimeTypeHandle.cs#L134\r\n\r\nNote that we had to manually define the `MonoPInvokeCallback` attribute which seems to be required for working with Unity's IL2CPP, so we copied a definition from the Mono project:\r\n```cs\r\n[AttributeUsage(AttributeTargets.Method)]\r\nsealed class MonoPInvokeCallbackAttribute : Attribute\r\n{\r\n    public MonoPInvokeCallbackAttribute(Type t) { }\r\n}\r\n```\r\n\r\nIs there any reason `ref` works and not `in` in this context? I assume that by using `ref` we expose ourselves to bugs where the C# code inadvertently modifying the struct would produce some side effect on the C++ side which the C++ compiler did not intend to see (since the parameter is `const&` there), which could lead to bugs, so the current workaround with `ref` is not ideal."},{"Id":"11099965039","Type":"IssuesEvent","CreatedAt":"2019-12-16T18:08:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7919","RelatedDescription":"Closed issue \"Native dll with async\" (#7919) at dotnet/corert","RelatedBody":"Hello,\r\nI'm actually wondering how dll compiled to native would behave if I expose an async task and call it from a C++ program. Is that supported or would it run synchronously?(or start a different thread?)\r\n\r\nThanks in advance"},{"Id":"11099825183","Type":"IssuesEvent","CreatedAt":"2019-12-16T17:49:20","Actor":"lifecoder-phoenix","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7919","RelatedDescription":"Opened issue \"Native dll with async\" (#7919) at dotnet/corert","RelatedBody":"Hello,\r\nI'm actually wondering how dll compiled to native would behave if I expose an async task and call it from a C++ program. Is that supported or would it run synchronously?(or start a different thread?)\r\n\r\nThanks in advance"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"11112078011","Type":"PullRequestEvent","CreatedAt":"2019-12-18T00:10:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4072","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#4072) at dotnet/sdk","RelatedBody":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* mmitche\n* nguerrera\n* wli3\n* dotnet-maestro[bot]\n* wtgodbe\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11112055649","Type":"PullRequestEvent","CreatedAt":"2019-12-18T00:05:24","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4070","RelatedDescription":"Merged pull request \"[release/3.1.2xx] Conditionalize helix test execution with Test ne false\" (#4070) at dotnet/sdk","RelatedBody":""},{"Id":"11111976555","Type":"IssuesEvent","CreatedAt":"2019-12-17T23:48:27","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4071","RelatedDescription":"Opened issue \"Investigate and reenable helix perf tests\" (#4071) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/4070"},{"Id":"11111950695","Type":"PullRequestEvent","CreatedAt":"2019-12-17T23:42:53","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4070","RelatedDescription":"Opened pull request \"[release/3.1.2xx] Conditionalize helix test execution with Test ne false\" (#4070) at dotnet/sdk","RelatedBody":""},{"Id":"11111488994","Type":"IssuesEvent","CreatedAt":"2019-12-17T22:19:39","Actor":"mike-jewell","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3996","RelatedDescription":"Closed issue \"dotnet dev-certs https and kestrel using old expired cert for a solution\" (#3996) at dotnet/sdk","RelatedBody":"I have a really strange issue and I am concerned I might need to rebuild my machine.  I had an expired certificate from dotnet dev-certs several months ago.  I ran:\r\n\r\n`dotnet dev-certs --clean`\r\n\r\nand then:\r\n\r\n`dotnet dev-certs --trust`\r\n\r\nIn the certmgr for my user I see the new certificate, and the old one has gone.  However there is a corruption somewhere on my machine (Windows 10, latest updates on the dev insider build) that is making only one solution to use the old certificate to be referenced in all browsers on my machine.\r\n\r\nI can see the cert in the browser, and it is the old one.  I have searched everywhere I can in both the user and computer certificate managers, but cannot find the old certificate.  The browsers stated there was an issue but allowed me to carry on, but I have just upgraded to dotnet core 3.1 and now I am getting an error ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY in the browser.\r\n\r\nThis isn't the issue though, the cert the browser picks up from kestral on this one machine is expired and doesn't exist.  This solution runs fine on a fresh clone on another computer, it is just this one machine that has the issue.\r\n\r\nMy questions are:\r\n\r\nDoes 'dotnet dev-certs --trust' put the certs somewhere else that I cannot see? \r\n\r\nCan I remove this cert somehow using the serial number or thumbprint I have?\r\n\r\nI know this is a vague wishy washy issue to have raised, but I am in the weeds with OS dependencies, kestrel, dotnet cli and tools, and browsers (IE11, Firefox, Chrome, Edge).  I don't know how to provide the OS logs or proof without reems of screenshots, but if requested I can.  I'd really like to not have to rebuild this machine."},{"Id":"11110070820","Type":"PullRequestEvent","CreatedAt":"2019-12-17T18:59:59","Actor":"sfoslund","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3972","RelatedDescription":"Merged pull request \"Consolidating PackageVersion and NuGetPackageVersion metadata\" (#3972) at dotnet/sdk","RelatedBody":"Removing PacakgeVersion metadata in favor of NuGetPackageVersion \r\nFixes #3499"},{"Id":"11110070779","Type":"IssuesEvent","CreatedAt":"2019-12-17T18:59:58","Actor":"sfoslund","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3499","RelatedDescription":"Closed issue \"Redundant PackageName and NuGetPackageId metadata\" (#3499) at dotnet/sdk","RelatedBody":"There's a mix of checking PackageName and NuGetPackageId in the targets and now we seem to be setting both all the time in ResolvePackageAssets.\r\n\r\nI actually trimmed down the metadata in 2.1 to stop doing this, but it crept back in c7549ffe\r\n\r\n\r\n\r\n"},{"Id":"11109726731","Type":"PullRequestEvent","CreatedAt":"2019-12-17T18:14:24","Actor":"wtgodbe","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/4059","RelatedDescription":"Closed pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#4059) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 5:29 PM\r\n- **Commit**: 48818b3e5c5e196cfe2dd2c9642c1667e4a22254\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"},{"Id":"11107726660","Type":"PullRequestEvent","CreatedAt":"2019-12-17T14:31:51","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4069","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#4069) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191216.4\r\n- **Date Produced**: 12/16/2019 9:51 PM\r\n- **Commit**: 4736ddca60a4040447b450437cf3767c9045edc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19616.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"11106934992","Type":"PullRequestEvent","CreatedAt":"2019-12-17T13:01:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4069","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#4069) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191216.4\r\n- **Date Produced**: 12/16/2019 9:51 PM\r\n- **Commit**: 4736ddca60a4040447b450437cf3767c9045edc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19616.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"11106899928","Type":"IssuesEvent","CreatedAt":"2019-12-17T12:56:44","Actor":"dahlia","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4068","RelatedDescription":"Opened issue \"dotnet test command unexpectedly terminates with ArgumentNullException on the Thai (Thailand) locale\" (#4068) at dotnet/sdk","RelatedBody":"```bash\r\n$ dotnet --version\r\n3.0.101\r\n```\r\n\r\nAn instruction to reproduce:\r\n\r\n```\r\n$ dotnet new mstest  # Note that this can be reproduced with xunit\r\n$ LANGUAGE=th_TH.UTF8 LANG=th_TH.UTF8 LC_ALL=th_TH.UTF8 dotnet test\r\nTest run for /private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\nTesthost process exited with error: Unhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter 's')\r\n   at System.Int32.Parse(String s)\r\n   at Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.CommandLineArgumentsHelper.GetIntArgFromDict(IDictionary`2 argsDictionary, String fullname)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.SetParentProcessExitCallback(IDictionary`2 argsDictionary)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.Invoke(IDictionary`2 argsDictionary)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.Program.Run(String[] args)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.Program.Main(String[] args)\r\n. Please check the diagnostic logs for more information.\r\n\r\nTest Run Aborted.\r\n```\r\n\r\nNote that it works well with English (United States):\r\n\r\n```bash\r\n$ LANGUAGE=en_US.UTF8 LANG=en_US.UTF8 LC_ALL=en_US.UTF8 dotnet test\r\nTest run for /private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n\r\nTest Run Successful.\r\nTotal tests: 1\r\n     Passed: 1\r\n Total time: 0.6501 Seconds\r\n```\r\n\r\nOr Korean (South Korea):\r\n\r\n```bash\r\n$ LANGUAGE=ko_KR.UTF8 LANG=ko_KR.UTF8 LC_ALL=ko_KR.UTF8 dotnet test\r\n/private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)에 대한 테스트 실행\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n테스트 실행을 시작하는 중입니다. 잠시 기다려 주세요...\r\n\r\n지정된 패턴과 일치한 총 테스트 파일 수는 1개입니다.\r\n\r\n테스트를 실행했습니다.\r\n총 테스트 수: 1\r\n     통과: 1\r\n 총 시간: 0.8872 초\r\n```"},{"Id":"11104336755","Type":"IssuesEvent","CreatedAt":"2019-12-17T07:15:12","Actor":"NitzanEgozy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/4042","RelatedDescription":"Closed issue \"App behavior is different with PublishTrimmed=true (PublishSingleFile=true) on linux\" (#4042) at dotnet/sdk","RelatedBody":"When packing with both PublishTrimmed=true and PublishSingleFile=true, I see that the application behaves different. I've attached a sample of ILSpy Console application (ICSharp.Code.Console, originally from https://github.com/icsharpcode/ILSpy). This is a slightly modified version of 5.0.1 - removed all non-used project files and changed sdk to 3.1. I've also attached an input .exe files for the application which has different outputs if the application is published with/without PublishTrimmed=true.\r\nNote that it only happens when I publish it on linux - windows works perfect.\r\n\r\nYou can find the replication here:\r\nhttps://github.com/NitzanEgozy/dotnet/tree/master/testers/dotnet_trimmed_bug\r\n1. cd dotnet_trimmed_bug\r\n2. run.sh\r\n3. Compare the outputs of ILSpyInconsistentExe/decompile_output_trimmed and ILSpyInconsistentExe/decompile_output_non_trimmed (more specifically - look at the decompiled DynamicClass.cs - you'll see many errors in the decompilation after trimming)"},{"Id":"11102599507","Type":"PullRequestEvent","CreatedAt":"2019-12-17T00:38:38","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3989","RelatedDescription":"Closed pull request \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#3989) at dotnet/sdk","RelatedBody":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* dotnet-maestro[bot]\n* wli3\n* wtgodbe\n* nguerrera\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11102572601","Type":"PullRequestEvent","CreatedAt":"2019-12-17T00:32:29","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3882","RelatedDescription":"Closed pull request \"[automated] Merge branch 'release/3.1.1xx' => 'master'\" (#3882) at dotnet/sdk","RelatedBody":"I detected changes in the release/3.1.1xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* livarcocc\n* vitek-karas\n* dotnet-maestro[bot]\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11102058392","Type":"PullRequestEvent","CreatedAt":"2019-12-16T22:52:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4067","RelatedDescription":"Merged pull request \"[release/3.1.2xx]Generate RID graph in self-contained builds\" (#4067) at dotnet/sdk","RelatedBody":"## Issue \r\n#3361\r\n\r\n## Scenario\r\nCustomer tries to load load plugins with RID-specific assets into a self-contained app.\r\nThis operation currently fails.\r\n\r\n## Fix\r\n\r\nIn order to support loading components (plugins) with RID-specific assets, the `AssemblyDependencyResolver` requires the RID fallback graph.\r\n\r\nThe component itself should not carry the RID fallback graph with it (it would need to have the graph of all the RIDs there are and it would need to be updated with every addition).\r\n\r\nFor framework dependent apps, the RID fallback graph comes from the core framework Microsoft.NETCore.App, so there is no need to write it into the app.\r\n\r\nIf self-contained apps, the (applicable subset of) RID fallback graph needs to be written to the deps.json manifest.\r\n\r\n## Risk\r\nMedium\r\n\r\nThis change affects contents generated in the deps.json file for every single-file app.\r\nHowever, it only adds information (RID-graph) that is consumed by the `AssemblyDependencyResolver`.\r\nIt doesn't change any other sections in the `deps.json` manifest.\r\n\r\n## Customer impact\r\nCustomer is able to load load plugins with RID-specific assets into a self-contained app.\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"539153211","IsPullRequest":true,"CreatedAt":"2019-12-17T15:52:32","Actor":"khalidabuhakmeh","Number":"156","RawContent":null,"Title":"Update Teams Link","State":"open","Body":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`","Url":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Open PR \"Update Teams Link\" (#156)"},{"Id":"523940971","IsPullRequest":false,"CreatedAt":"2019-11-17T05:53:47","Actor":"NextTurn","Number":"155","RawContent":null,"Title":"Typos in CLA bot profile","State":"open","Body":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)","Url":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Open issue \"Typos in CLA bot profile\" (#155)"},{"Id":"523861891","IsPullRequest":true,"CreatedAt":"2019-11-16T15:59:11","Actor":"NextTurn","Number":"154","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Open PR \"Fix broken links\" (#154)"},{"Id":"522965180","IsPullRequest":true,"CreatedAt":"2019-11-14T16:22:27","Actor":"NextTurn","Number":"153","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Open PR \"Fix broken links\" (#153)"},{"Id":"522951789","IsPullRequest":true,"CreatedAt":"2019-11-14T16:00:23","Actor":"NextTurn","Number":"152","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Open PR \"Fix broken links\" (#152)"},{"Id":"520212668","IsPullRequest":true,"CreatedAt":"2019-11-08T23:32:02","Actor":"onovotny","Number":"151","RawContent":null,"Title":"Update RxUI license to reflect repo","State":"closed","Body":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68","Url":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Closed or merged PR \"Update RxUI license to reflect repo\" (#151)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-11-07T05:43:04","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Closed or merged PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-11-07T05:42:14","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Closed or merged PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-11-07T05:41:48","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Closed or merged PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"538806283","IsPullRequest":false,"CreatedAt":"2019-12-17T03:12:52","Actor":"zengqinglei","Number":"27974","RawContent":null,"Title":"Unable to delete assembly file after plugin uninstall","State":"open","Body":"**Describe the bug**\r\n\r\nWhen I use the sample code: https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading\r\nThen I want to remove the assembly file after the plugin is uninstalled and I get an exception:\r\n\r\n![image](https://user-images.githubusercontent.com/7374317/70961451-cb998d80-20bc-11ea-837c-601b70c8e52a.png)\r\n\r\n**Run Environment**\r\n* .NET CORE 3.1\r\n* Windows 10 \r\n![image](https://user-images.githubusercontent.com/7374317/70961722-a8231280-20bd-11ea-852a-eb42a443ac45.png)\r\n\r\nI hope to get your help soon, thank you!","Url":"https://github.com/dotnet/coreclr/issues/27974","RelatedDescription":"Open issue \"Unable to delete assembly file after plugin uninstall\" (#27974)"},{"Id":"538649669","IsPullRequest":true,"CreatedAt":"2019-12-16T20:51:33","Actor":"AndyAyersMS","Number":"27973","RawContent":null,"Title":"Release/3.1 port of dotnet/runtime#239","State":"open","Body":"Fix for #27923\r\n\r\nThe jit might fail to locate a class handle for a ref class, leading to an\r\nunexpected crash while jitting.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crash/exception\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing\r\nframework or test code.\r\n\r\n## Risk\r\n**Low**: the jit will now fall back to using the handle for System.Object if no\r\nbetter option can be found.\r\n\r\ncc @BruceForstall\r\n\r\n____\r\n\r\nIn some cases we may end up in lvaSetClass without a valid ref class handle\r\nfrom either the IR or the stack. Use the handle for object as a conservative\r\nfallback.","Url":"https://github.com/dotnet/coreclr/pull/27973","RelatedDescription":"Open PR \"Release/3.1 port of dotnet/runtime#239\" (#27973)"},{"Id":"537840266","IsPullRequest":true,"CreatedAt":"2019-12-14T00:52:54","Actor":"AndyAyersMS","Number":"27972","RawContent":null,"Title":"[release/3.1] Port fix for JIT silent bad code","State":"open","Body":"Release/3.1 port of dotnet/runtime#797.\r\nFixes dotnet/runtime#764\r\n\r\nThe jit might incorrectly order a read from a struct field with an operation\r\nthat modifies the field, so that the read returns the wrong value.\r\n\r\n## Customer Impact\r\nSilent bad code; program behaves incorrectly.\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing framework\r\nor test code.\r\n\r\n## Risk\r\n**Low**: the jit is now spilling the eval stack entries to temps in cases where it\r\ndid not before; this should be conservatively safe.\r\n\r\ncc @BruceForstall \r\n\r\n____\r\n\r\nIf we're appending an assignment whose LHS is is a location within a local\r\nstruct, we need to spill all references to that struct from the eval stack.\r\n\r\nUpdate the existing logic for this to handle the case where the LHS is a field\r\nof a local struct, and the field is updated by unusual means (here, `initobj`).\r\n\r\nFixes dotnet/runtime#764.","Url":"https://github.com/dotnet/coreclr/pull/27972","RelatedDescription":"Open PR \"[release/3.1] Port fix for JIT silent bad code\" (#27972)"},{"Id":"537829085","IsPullRequest":true,"CreatedAt":"2019-12-13T23:56:38","Actor":"mateoatr","Number":"27971","RawContent":null,"Title":"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate","State":"open","Body":"[This issue](https://github.com/dotnet/runtime/issues/353) was fixed in dotnet/runtime, needs to be backported.","Url":"https://github.com/dotnet/coreclr/pull/27971","RelatedDescription":"Open PR \"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate\" (#27971)"},{"Id":"532816885","IsPullRequest":false,"CreatedAt":"2019-12-11T07:38:17","Actor":"yashwanthreddyg","Number":"27962","RawContent":null,"Title":"dotnet 2.1.12 : Segmentation fault on NullReferenceException","State":"closed","Body":"Dotnet version:\r\n2.1.12 aspnetcore\r\n2.1.5 aspnetcore\r\n2.1.13 aspnetcore\r\n\r\nOS:\r\n```\r\nLinux version 3.10.0-1062.4.3.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Wed Nov 13 23:58:53 UTC 2019\r\n```\r\n\r\nOur application is a web app and a certain code path leads to a null reference exception. lt causes the runtime to crash with segmentation fault despite there being a catch around the exception. I see the same behavior on all the above mentioned runtimes but I have backtrace from version 2.1.12.\r\n\r\n```\r\nProcess 3204 stopped\r\n\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n    frame #0: 0x00007f7a9dcd4669\r\n-> 0x7f7a9dcd4669:  cmpl   %edi, (%rdi)\r\n   0x7f7a9dcd466b:  callq  *(%rax)\r\n   0x7f7a9dcd466d:  testq  %rax, %rax\r\n   0x7f7a9dcd4670:  jne    0x7f7a9dcd46c8\r\nbt\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007f7a9dcd4669\r\n    frame #1: 0x00007f7a9dcd35b9\r\n    frame #2: 0x00007f7a9dcce664\r\n    frame #3: 0x00007f7a9dcca87d\r\n    frame #4: 0x00007f7a9dc8eee5\r\n    frame #5: 0x00007f7a9b1842ad\r\n    frame #6: 0x00007f7a9d5267c2\r\n    frame #7: 0x00007f7a9d525a4e\r\n    frame #8: 0x00007f7a9d5257bb\r\n    frame #9: 0x00007f7a9d525749\r\n    frame #10: 0x00007f7a9d51e6f7\r\n    frame #11: 0x00007f7a9d521482\r\n    frame #12: 0x00007f7a9d5212ab\r\n    frame #13: 0x00007f7a9d521239\r\n    frame #14: 0x00007f7a9d520f93\r\n    frame #15: 0x00007f7a9d520e2b\r\n    frame #16: 0x00007f7a9d520da9\r\n    frame #17: 0x00007f7a9d521f5b\r\n    frame #18: 0x00007f7a9d521dbb\r\n    frame #19: 0x00007f7a9d521d41\r\n    frame #20: 0x00007f7a9d51e3e3\r\n    frame #21: 0x00007f7a9d521482\r\n    frame #22: 0x00007f7a9d5212ab\r\n    frame #23: 0x00007f7a9d521239\r\n    frame #24: 0x00007f7a9d520f93\r\n    frame #25: 0x00007f7a9d520e2b\r\n    frame #26: 0x00007f7a9d520da9\r\n    frame #27: 0x00007f7a9d521f5b\r\n    frame #28: 0x00007f7a9d521dbb\r\n    frame #29: 0x00007f7a9d521d41\r\n    frame #30: 0x00007f7a9d51e3e3\r\n    frame #31: 0x00007f7a9d521482\r\n    frame #32: 0x00007f7a9d5212ab\r\n    frame #33: 0x00007f7a9d521239\r\n    frame #34: 0x00007f7a9d520f93\r\n    frame #35: 0x00007f7a9d520e2b\r\n    frame #36: 0x00007f7a9d520da9\r\n    frame #37: 0x00007f7a9d521f5b\r\n    frame #38: 0x00007f7a9d521dbb\r\n    frame #39: 0x00007f7a9d521d41\r\n    frame #40: 0x00007f7a9d51e3e3\r\n    frame #41: 0x00007f7a9d521482\r\n    frame #42: 0x00007f7a9d5212ab\r\n    frame #43: 0x00007f7a9d521239\r\n    frame #44: 0x00007f7a9d51e626\r\n    frame #45: 0x00007f7a9d521482\r\n    frame #46: 0x00007f7a9d5212ab\r\n    frame #47: 0x00007f7a9d521239\r\n    frame #48: 0x00007f7a9d520f93\r\n    frame #49: 0x00007f7a9d520e2b\r\n    frame #50: 0x00007f7a9d520da9\r\n    frame #51: 0x00007f7a9d52074f\r\n    frame #52: 0x00007f7a9d5205ab\r\n    frame #53: 0x00007f7a9d520531\r\n    frame #54: 0x00007f7a9d51e3e3\r\n    frame #55: 0x00007f7a9d51df87\r\n    frame #56: 0x00007f7a9d51ddbb\r\n    frame #57: 0x00007f7a9d51dd49\r\n    frame #58: 0x00007f7a9d51be68\r\n    frame #59: 0x00007f7a9d51dad2\r\n    frame #60: 0x00007f7a9d51d8fb\r\n    frame #61: 0x00007f7a9d51d889\r\n    frame #62: 0x00007f7a9d51ba24\r\n    frame #63: 0x00007f7a9d51d612\r\n    frame #64: 0x00007f7a9d51d43b\r\n    frame #65: 0x00007f7a9d51d3c9\r\n    frame #66: 0x00007f7a9d51b873\r\n    frame #67: 0x00007f7a9d51aaf7\r\n    frame #68: 0x00007f7a9d51a92b\r\n    frame #69: 0x00007f7a9d51a8b9\r\n    frame #70: 0x00007f7a9d5186f2\r\n    frame #71: 0x00007f7a9d51809b\r\n    frame #72: 0x00007f7a9d518029\r\n    frame #73: 0x00007f7a9c904810\r\n    frame #74: 0x00007f7a9c903a8b\r\n    frame #75: 0x00007f7a9c90393d\r\n    frame #76: 0x00007f7a9c901e1a\r\n    frame #77: 0x00007f7a9c900acb\r\n    frame #78: 0x00007f7a9c900a51\r\n    frame #79: 0x00007f7a9c8f8789\r\n    frame #80: 0x00007f7a9c8f861b\r\n    frame #81: 0x00007f7a9c8f85ad\r\n    frame #82: 0x00007f7a9c8f3605\r\n    frame #83: 0x00007f7a9c8f2b1b\r\n    frame #84: 0x00007f7a9c8f2aad\r\n    frame #85: 0x00007f7a9c8f28a3\r\n    frame #86: 0x00007f7a9c8f226b\r\n    frame #87: 0x00007f7a9c8f21fd\r\n    frame #88: 0x00007f7a9c8f0245\r\n    frame #89: 0x00007f7a9c8efe74\r\n    frame #90: 0x00007f7a996bdcfd\r\n    frame #91: 0x00007f7a9c8db8b0\r\n    frame #92: 0x00007f7a996bdcfd\r\n    frame #93: 0x00007f7a9974e268\r\n    frame #94: 0x00007f7b12df3edf libcoreclr.so`CallDescrWorkerInternal + 124\r\n    frame #95: 0x00007f7b12d1460c libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 83 at callhelpers.cpp:78\r\n    frame #96: 0x00007f7b12d145b9 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=<unavailable>, pArguments=<unavailable>, pReturnValue=0x00007f783aeedb28, cbReturnValue=8) + 857 at callhelpers.cpp:620\r\n    frame #97: 0x00007f7b12e948b5 libcoreclr.so`QueueUserWorkItemManagedCallback(void*) [inlined] MethodDescCallSite::Call_RetBool(this=0x00007f783aeedb30, pArguments=<unavailable>) + 15 at callhelpers.h:433\r\n    frame #98: 0x00007f7b12e948a6 libcoreclr.so`QueueUserWorkItemManagedCallback(pArg=0x00007f783aeedebe) + 166 at comthreadpool.cpp:451\r\n    frame #99: 0x00007f7b12ce5f3d libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=0x00007f783aeedd68) + 413 at threads.cpp:8850\r\n    frame #100: 0x00007f7b12ce5eeb libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchMiddle(pCallState=0x00007f783aeedd68) + 83 at threads.cpp:8901\r\n    frame #101: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_8::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::{lambda(Param*)#1}::operator()(Param*) const at threads.cpp:9139\r\n    frame #102: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:9141\r\n    frame #103: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=<unavailable>) + 248 at threads.cpp:9178\r\n    frame #104: 0x00007f7b12ce66a0 libcoreclr.so`ManagedThreadBase::ThreadPool(ADID, void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransitionWithAD(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>, filterType=<unavailable>)(void*), void*, UnhandledExceptionLocation) + 43 at threads.cpp:9199\r\n    frame #105: 0x00007f7b12ce6675 libcoreclr.so`ManagedThreadBase::ThreadPool(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>)(void*), void*) + 21 at threads.cpp:9241\r\n    frame #106: 0x00007f7b12e78ab7 libcoreclr.so`ManagedPerAppDomainTPCount::DispatchWorkItem(this=0x0000000001d0bf60, foundWork=0x00007f783aeedebf, wasNotRecalled=0x00007f783aeedebe) + 295 at threadpoolrequest.cpp:754\r\n    frame #107: 0x00007f7b12d04d33 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(void*) [inlined] ThreadpoolMgr::ExecuteWorkRequest(bool*, bool*) + 1267 at win32threadpool.cpp:1560\r\n    frame #108: 0x00007f7b12d04d12 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(lpArgs=<unavailable>) + 1234 at win32threadpool.cpp:2024\r\n    frame #109: 0x00007f7b1307a712 libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00007f7834002260) + 306 at thread.cpp:1682\r\n    frame #110: 0x00007f7b1456ee65 libpthread.so.0`start_thread + 197\r\n(lldb)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27962","RelatedDescription":"Closed issue \"dotnet 2.1.12 : Segmentation fault on NullReferenceException\" (#27962)"},{"Id":"536062209","IsPullRequest":true,"CreatedAt":"2019-12-10T23:58:27","Actor":"eerhardt","Number":"27969","RawContent":null,"Title":"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing","State":"open","Body":"Release/3.1 port of https://github.com/dotnet/runtime/pull/458.\r\nFixes https://github.com/dotnet/corefx/issues/42192\r\n\r\n### Summary\r\nOn RHEL 8, some time zones (specifically `Africa/Casablanca`) stop supporting daylight savings transitions because of a change in the tzdata files.\r\n\r\n### Customer Impact\r\nApplications getting time zone information on RedHat 8 (and potentially other Unix distros if using the same tzdata version) stop working with daylight savings time for `Africa/Casablanca` time zone.\r\n\r\nThis change allows `TimeZoneInfo` to work correctly for all the daylight savings transitions in the tzdata file, and it skips the \"future\" daylight savings template if we can't support it.\r\n\r\n### Regression?\r\nFor a user it is a regression when updating to RHEL 8 because of the change in the tzdata in the OS. Our code didn't regress here - we never supported this format before now and were always throwing an exception. This is the first time we've hit it in the real-world.\r\n\r\n### Testing\r\nI ran all the TimeZoneInfo tests on RHEL 8. They failed for `Africa/Casablanca` before this change, and now pass afterward.\r\n\r\n### Risk\r\n**Low**: The change is isolated to a non-supported format that would cause DST to completely stop working before. Now we are allowing the other DST information to work, while skipping the unsupported future dates.\r\n\r\ncc: @danmosemsft @tarekgh @ericstj \r\n\r\n____\r\n\r\n\r\nIsDaylightSavingTime_CasablancaMultiYearDaylightSavings fails on rhel.8\r\n\r\nWhen parsing the tzdata POSIX string that contains an 'n' Julian date, we are currently throwing an exception, and then falling back to a TimeZoneInfo without DST enabled. However, this is a mistake because there are other DST transitions that were read from the tzdata file that are valid and usable. We shouldn't be throwing that information away.\r\n\r\nSo instead, we now skip the POSIX string if we detect an unsupported 'n' Julian date, and just use the last transition as the AdjustmentRule for all the DateTimes in the future. This way we can still make DST determinations correctly for some DateTimes.\r\n\r\nFix https://github.com/dotnet/corefx/issues/42192","Url":"https://github.com/dotnet/coreclr/pull/27969","RelatedDescription":"Open PR \"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing\" (#27969)"},{"Id":"535533061","IsPullRequest":false,"CreatedAt":"2019-12-10T14:47:07","Actor":"NMSAzulX","Number":"27968","RawContent":null,"Title":"How do I write code that allows a method to use Calli instructions at run time? ","State":"closed","Body":"Now, I use MethodInfo.CreateDelegate to create delegates, but its execution performance is lower than that of Calli. How can I improve it?","Url":"https://github.com/dotnet/coreclr/issues/27968","RelatedDescription":"Closed issue \"How do I write code that allows a method to use Calli instructions at run time? \" (#27968)"},{"Id":"534871799","IsPullRequest":true,"CreatedAt":"2019-12-09T11:37:47","Actor":"janvorli","Number":"27967","RawContent":null,"Title":"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Open PR \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967)"},{"Id":"534465706","IsPullRequest":false,"CreatedAt":"2019-12-07T23:20:56","Actor":"EgorBo","Number":"27966","RawContent":null,"Title":"JIT: Optimize simple arithmetic with GT_NEG","State":"open","Body":"I was surprised it's not handled in `morph`, e.g. `-a + b` => `b - a`.\r\n```csharp\r\nint M1(int a, int b) => -a +  b; // optimize to  \"b - a\"\r\nint M2(int a, int b) =>  a + -b; // optimize to  \"a - b\"\r\nint M3(int a, int b) =>  a - -b; // optimize to  \"a + b\"\r\nint M4(int a, int b) => -a - -b; // optimize to  \"b - a\"\r\n```\r\nCurrent codegen:\r\n```asm\r\n; Method CC:M1(int,int):int:this\r\nG_M48868_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       add      eax, r8d\r\n\r\n; Method CC:M2(int,int):int:this\r\nG_M15271_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       add      eax, edx\r\n\r\n; Method CC:M3(int,int):int:this\r\nG_M13857_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       sub      edx, eax\r\n       mov      eax, edx\r\n\r\n; Method CC:M4(int,int):int:this\r\nG_M28384_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       mov      edx, r8d\r\n       neg      edx\r\n       sub      eax, edx\r\n```\r\nExpected codegen: https://godbolt.org/z/nmZxv8\r\n\r\nAlso:\r\n```csharp\r\n\r\nint M5(int a) =>  -a / 10;  // optimize to  \"a / -10\"\r\nint M6(int a) => -(a / 10); // optimize to  \"a / -10\"\r\nint M7(int a) =>  -a * 10;  // optimize to  \"a * -10\"\r\nint M8(int a) => -(a * 10); // optimize to  \"a * -10\"\r\n```\r\n\r\ncategory:cq\r\ntheme:basic-cq\r\nskill-level:beginner\r\ncost:small","Url":"https://github.com/dotnet/coreclr/issues/27966","RelatedDescription":"Open issue \"JIT: Optimize simple arithmetic with GT_NEG\" (#27966)"},{"Id":"533549794","IsPullRequest":true,"CreatedAt":"2019-12-05T23:18:06","Actor":"mmitche","Number":"27965","RawContent":null,"Title":"[release/3.1] Use 3.1.100 SDK in 3.1 build","State":"closed","Body":"To ensure that the 3.1 stack uses a consistent SDK.  The upper portions of the stack require the 3.1 SDK because for TFM purposes.","Url":"https://github.com/dotnet/coreclr/pull/27965","RelatedDescription":"Closed or merged PR \"[release/3.1] Use 3.1.100 SDK in 3.1 build\" (#27965)"},{"Id":"533008488","IsPullRequest":true,"CreatedAt":"2019-12-04T23:38:14","Actor":"jashook","Number":"27964","RawContent":null,"Title":"Disable formatting job in 3.0","State":"open","Body":"@hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/27964","RelatedDescription":"Open PR \"Disable formatting job in 3.0\" (#27964)"},{"Id":"532845984","IsPullRequest":true,"CreatedAt":"2019-12-04T18:01:14","Actor":"jashook","Number":"27963","RawContent":null,"Title":"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods","State":"open","Body":"This only affects windows arm and arm64.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27963","RelatedDescription":"Open PR \"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods\" (#27963)"},{"Id":"531827281","IsPullRequest":false,"CreatedAt":"2019-12-04T01:51:24","Actor":"MiyamuraMiyako","Number":"27961","RawContent":null,"Title":"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException","State":"closed","Body":"Main program and module program is `.net core3.1` program.\r\n\r\nModule program just one class with out any content:\r\n```C#\r\npublic class Module {}\r\n```\r\nMainProgram have below logic:\r\n```C#\r\nAssemblyLoadContext.Default.LoadFromAssemblyPath($@\"{myPath}\\Module.dll\");\r\n```\r\n\r\nthen MainProgram throw `System.IO.FileLoadException`.\r\n```\r\nCould not load file or assembly 'Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at ZZJ.Hospital.Plugin.MEF.Operate.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\Operate.cs:line 24\r\n   at ZZJ.Hospital.Plugin.MEF.SubModule.FindInitSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\SubModule.cs:line 18\r\n   at ZZJ.Hospital.MainWindow.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 33\r\n   at ZZJ.Hospital.MainWindow..ctor() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 28\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27961","RelatedDescription":"Closed issue \"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException\" (#27961)"},{"Id":"530233832","IsPullRequest":true,"CreatedAt":"2019-12-02T19:36:42","Actor":"alpencolt","Number":"27956","RawContent":null,"Title":"[armel/Linux] Fix armel build","State":"closed","Body":"Option '-DARM_SOFTFP' not passed after #27077 which required for armel build.\r\nThis commit fix it.\r\n\r\nHaven't checked dotnet/runtime, but think it should be ported.\r\ncc @jkotas @y-yamshchikov @o-piskunov","Url":"https://github.com/dotnet/coreclr/pull/27956","RelatedDescription":"Closed or merged PR \"[armel/Linux] Fix armel build\" (#27956)"},{"Id":"529195568","IsPullRequest":true,"CreatedAt":"2019-12-02T15:53:15","Actor":"hoyosjs","Number":"27952","RawContent":null,"Title":"Change non_virtual_calls_to_instance_methods test to non-il-sdk format","State":"closed","Body":"Branch 3.1 doesn't have the changes necessary to build ilproj using the SDK. PR #27868 ported a bug fix and added this test, so just use the old format.","Url":"https://github.com/dotnet/coreclr/pull/27952","RelatedDescription":"Closed or merged PR \"Change non_virtual_calls_to_instance_methods test to non-il-sdk format\" (#27952)"},{"Id":"530797589","IsPullRequest":false,"CreatedAt":"2019-12-01T21:19:33","Actor":"cup","Number":"27960","RawContent":null,"Title":"Print array","State":"open","Body":"I can create a program like this:\r\n\r\n~~~cs\r\nusing System;\r\nclass App {\r\n   static void Main() {\r\n      int[] a1 = {10, 20};\r\n      Console.WriteLine(a1);\r\n   }\r\n}\r\n~~~\r\n\r\nbut it doesnt give expected output:\r\n\r\n~~~\r\nSystem.Int32[]\r\n~~~\r\n\r\nI checked online:\r\n\r\nhttps://stackoverflow.com/questions/16265247\r\n\r\nand people suggest to loop through the array. Is that really necessary? Many\r\nother languages dont require that, like Go:\r\n\r\n~~~go\r\npackage main\r\nimport \"fmt\"\r\nfunc main() {\r\n   a1 := []int{10, 20}\r\n   fmt.Println(a1)\r\n}\r\n~~~\r\n\r\nNim:\r\n\r\n~~~nim\r\nvar a1 = [10, 20]\r\necho a1\r\n~~~\r\n\r\nD:\r\n\r\n~~~d\r\nimport std.stdio;\r\nvoid main() {\r\n   auto a1 = [10, 20];\r\n   a1.writeln;\r\n}\r\n~~~\r\n\r\nJavaScript:\r\n\r\n~~~js\r\nlet a1 = [10, 20];\r\nconsole.log(a1);\r\n~~~\r\n\r\nPython:\r\n\r\n~~~py\r\na1 = [10, 20]\r\nprint(a1)\r\n~~~\r\n","Url":"https://github.com/dotnet/coreclr/issues/27960","RelatedDescription":"Open issue \"Print array\" (#27960)"},{"Id":"530496346","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:19","Actor":"janvorli","Number":"27959","RawContent":null,"Title":"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo","State":"open","Body":"Customer impact\r\n---\r\n\r\nRuntime crash or hang within a few seconds in certain types of Linux virtualized environments (e.g. OpenVZ)\r\n\r\nRegression?\r\n---\r\nRegression from 2.1, introduced by https://github.com/dotnet/coreclr/pull/23824\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n---\r\n\r\nPorts change #26873 to release 3.1 branch.\r\n\r\nOn OpenVZ virtualized linux, GetCurrentProcessorNumber which uses sched_getcpu()\r\ncan return a value greater than the number of processors reported by\r\nsched_getaffinity with CPU_COUNT or sysconf(_SC_NPROCESSORS_ONLN).\r\nFor example, taskset -c 2,3 ./MyApp will make CPU_COUNT be 2 but\r\nsched_getcpu() can return 2 or 3, and OpenVZ kernel can make\r\nsysconf(_SC_NPROCESSORS_ONLN) return a limited cpu count but\r\nsched_getcpu() still report the real processor number.\r\n\r\nExample of affinity vs current CPU id on OpenVZ:\r\nnproc: 8\r\nnprocOnline: 1\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5","Url":"https://github.com/dotnet/coreclr/pull/27959","RelatedDescription":"Open PR \"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo\" (#27959)"},{"Id":"530496338","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:15","Actor":"janvorli","Number":"27958","RawContent":null,"Title":"Port to 3.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27958","RelatedDescription":"Open PR \"Port to 3.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27958)"},{"Id":"530496332","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:12","Actor":"janvorli","Number":"27957","RawContent":null,"Title":"Port to 3.1 - Fix getting affinity set on MUSL on Jetson TX2","State":"open","Body":"Customer impact\r\n---\r\n\r\nPrevents running Linux Alpine tests on checked runtime on Jetson TX2 ARM boards used by our lab. This bug causes the checked runtime to assert and crash during startup on this board.\r\n\r\nCustomers may see degraded GC performance on Jetson TX2 and similar devices.\r\n\r\nRegression?\r\n---\r\n\r\nRegression from 2.1, introduced by the docker/cgroup changes.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\nPorts https://github.com/dotnet/runtime/pull/206 to release/3.1.\r\n\r\nThe code in PAL_GetCurrentThreadAffinitySet relied on the fact that the\r\nnumber of processors reported as configured in the system is always\r\nlarger than the maximum CPU index. However, it turns out that it is not\r\ntrue on some devices / distros. The Jetson TX2 reports CPUs 0, 3, 4 and\r\n5 in the affinity mask and the 1 and 2 are never reported. GLIBC reports\r\n6 as the number of configured CPUs, however MUSL reports just 4. The\r\nPAL_GetCurrentThreadAffinitySet was using the number of CPUs reported as\r\nconfigured as the upper bound for scanning affinity set, so on Jetson\r\nTX2, the affinity mask returned had just two bits set while there were\r\n4 CPUs. That triggered an assert in the GCToOSInterface::Initialize.\r\n\r\nThis change fixes that by reading the maximum CPU index from the\r\n/proc/cpuinfo. It falls back to using the number of processors\r\nconfigured when the /proc/cpuinfo is not available (on macOS, FreeBSD, ...)\r\n\r\nFixes https://github.com/dotnet/runtime/issues/170","Url":"https://github.com/dotnet/coreclr/pull/27957","RelatedDescription":"Open PR \"Port to 3.1 - Fix getting affinity set on MUSL on Jetson TX2\" (#27957)"},{"Id":"530130188","IsPullRequest":false,"CreatedAt":"2019-11-29T02:44:51","Actor":"Daniel15","Number":"27955","RawContent":null,"Title":"Segmentation fault when running .NET Core 3.0 app on OpenVZ","State":"open","Body":"I have a .NET Core app that's a fairly basic gRPC service (unfortunately not open source yet, so I can't link to the source at the moment). On one particular server, it's throwing a segmentation fault as soon as I run it:\r\n```\r\nASPNETCORE_ENVIRONMENT=Production ASPNETCORE_URLS=http://*:54561 ./TestApp\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Now listening on: http://[::]:54561\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /opt/exampleapp-worker\r\nSegmentation fault\r\n```\r\n\r\nIn fact, I'm seeing this for a very basic ASP.NET website too (just one custom middleware using `app.Run`).\r\n\r\nBacktrace from lldb + SOS:\r\n```\r\n* thread #7, name = 'TestApp', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007ffff7019b3d libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(ThreadpoolMgr::MemType) [inlined] ThreadpoolMgr::RecycledListInfo::Remove() at win32threadpool.h:655\r\n    frame #1: 0x00007ffff7019aa5 libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(memType=<unavailable>) at win32threadpool.cpp:1674\r\n    frame #2: 0x00007ffff715e464 libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(unsigned int (*)(void*), void*) [inlined] ThreadpoolMgr::MakeWorkRequest(unsigned int (*)(void*), void*) at win32threadpool.h:367\r\n    frame #3: 0x00007ffff715e45a libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(this=0x00007ffff75dd640, function=(libcoreclr.so`ThreadpoolMgr::AsyncTimerCallbackCompletion(void*) at win32threadpool.cpp:4765), context=0x0000000000738290)(void*), void*) at threadpoolrequest.cpp:356\r\n    frame #4: 0x00007ffff701d100 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:855\r\n    frame #5: 0x00007ffff701d088 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:4710\r\n    frame #6: 0x00007ffff701cd41 libcoreclr.so`ThreadpoolMgr::TimerThreadFire() at win32threadpool.cpp:4598\r\n    frame #7: 0x00007ffff701cc15 libcoreclr.so`ThreadpoolMgr::TimerThreadStart(p=<unavailable>) at win32threadpool.cpp:4569\r\n    frame #8: 0x00007ffff732c86d libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000000000737530) at thread.cpp:1807\r\n    frame #9: 0x00007ffff7fb1fa3 libpthread.so.0`start_thread(arg=<unavailable>) at pthread_create.c:486\r\n    frame #10: 0x00007ffff7bbc4cf libc.so.6`__GI___clone at clone.S:95\r\n```\r\n\r\nDebian stable (buster)\r\n\r\n```\r\n$ apt list --installed | grep dotnet\r\n\r\nWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\r\n\r\ndotnet-host/buster,now 3.0.1-1 amd64 [installed,automatic]\r\ndotnet-hostfxr-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]\r\ndotnet-runtime-3.0/buster,now 3.0.1-1 amd64 [installed]\r\ndotnet-runtime-deps-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27955","RelatedDescription":"Open issue \"Segmentation fault when running .NET Core 3.0 app on OpenVZ\" (#27955)"},{"Id":"529602760","IsPullRequest":true,"CreatedAt":"2019-11-28T15:39:53","Actor":"jashook","Number":"27954","RawContent":null,"Title":"Disable formatting jobs in release/3.1","State":"closed","Body":"/cc @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/27954","RelatedDescription":"Closed or merged PR \"Disable formatting jobs in release/3.1\" (#27954)"},{"Id":"529572120","IsPullRequest":false,"CreatedAt":"2019-11-28T02:57:12","Actor":"mikernet","Number":"27953","RawContent":null,"Title":"RuntimeBinderException when dynamically casting private enum type","State":"closed","Body":"It took me way too long to figure out what the heck was going on here and isolate the problem because the code where this is happening is fairly complex and anytime I would try to simplify it to write a simple repro it would infuriatingly start working again...but I finally got it, and here it is:\r\n\r\n```c#\r\nvoid Main()\r\n{\t\r\n        // Works fine\r\n\tSomeClass.Method1().Dump(); \r\n\r\n        // RuntimeBinderException: Cannot convert type 'System.Enum' to 'decimal'\r\n\tSomeClass.Method2().Dump();\r\n}\r\n\r\npublic static class SomeClass {\r\n\tpublic static bool Method1()\r\n\t{\r\n\t\treturn (decimal)(dynamic)Test.A == (decimal)(dynamic)Test.A;\r\n\t}\r\n\t\r\n\tpublic static bool Method2()\r\n\t{\r\n\t\treturn CompareDecimalValues(Test.A, Test.A);\r\n\t}\r\n\r\n\tprivate enum Test\r\n\t{\r\n\t\tA = -100,\r\n\t}\r\n}\r\n\r\npublic static bool CompareDecimalValues<T>(T value1, T value2) where T : unmanaged, Enum\r\n{\r\n\treturn (decimal)(dynamic)value1 == (decimal)(dynamic)value2;\r\n}\r\n```\r\n\r\nIf `CompareDecimalValues()` is inside the same assembly then changing the enum to internal or public makes `Method2` work. If `CompareDecimalValues` is outside the assembly then the enum must be changed to public for it to work. \r\n\r\nBasically, it seems like the method doing the dynamic cast must have visibility of the enum type otherwise it fails.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27953","RelatedDescription":"Closed issue \"RuntimeBinderException when dynamically casting private enum type\" (#27953)"},{"Id":"529055217","IsPullRequest":false,"CreatedAt":"2019-11-27T01:08:06","Actor":"VSadov","Number":"27951","RawContent":null,"Title":"[Pinned Object Heap] Need to generalize GC notification API","State":"open","Body":"The `GC.RegisterForFullGCNotification` API takes a separate parameter for LOH. Most likely need another overload for POH","Url":"https://github.com/dotnet/coreclr/issues/27951","RelatedDescription":"Open issue \"[Pinned Object Heap] Need to generalize GC notification API\" (#27951)"},{"Id":"528917611","IsPullRequest":true,"CreatedAt":"2019-11-26T21:20:05","Actor":"jashook","Number":"27947","RawContent":null,"Title":"Disable test with warning","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27947","RelatedDescription":"Closed or merged PR \"Disable test with warning\" (#27947)"},{"Id":"528951170","IsPullRequest":true,"CreatedAt":"2019-11-26T20:19:50","Actor":"dotnet-maestro-bot","Number":"27950","RawContent":null,"Title":"Update BuildTools to preview1-04626-03 (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/27950","RelatedDescription":"Open PR \"Update BuildTools to preview1-04626-03 (release/2.2)\" (#27950)"},{"Id":"528950486","IsPullRequest":true,"CreatedAt":"2019-11-26T20:18:10","Actor":"stephentoub","Number":"27949","RawContent":null,"Title":"Fix CancellationTokenRegistration.Unregister race condition","State":"open","Body":"Port https://github.com/dotnet/runtime/pull/309 to release/3.1\r\nFixes https://github.com/dotnet/coreclr/issues/22946\r\n\r\n## Description\r\n\r\nIf multiple threads race to Unregister and zero out a CancellationTokenRegistration field, we can end up null ref'ing due to a torn read/write on a struct resulting in passing around some inconsistent state.  This pattern is possible as part of clean up in Task.Delay(timeout, cancellationToken), with the null ref then happening on a thread pool thread that results in the app crashing.\r\n\r\n## Customer Impact\r\n\r\nValid coding patterns, both in customer code and in our framework implementation, resulting in NullReferenceExceptions that may not be catchable.  Back in March a customer reported this, and just recently @rynowak hit up against it in ASP.NET.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Framework 4.8 and .NET Core 2.0.  This was introduced in https://github.com/dotnet/coreclr/pull/12819 in 2.1 as part of overhauling the CancellationToken implementation.\r\n\r\n## Testing\r\n\r\nIsolated a repro that quickly fails (within a second) prior to the fix and successfully runs for a long time after.\r\n\r\n## Risk\r\n\r\nMinimal.\r\n\r\ncc: @tarekgh, @kouvel, @rynowak \r\n\r\n@danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/27949","RelatedDescription":"Open PR \"Fix CancellationTokenRegistration.Unregister race condition\" (#27949)"},{"Id":"528926512","IsPullRequest":true,"CreatedAt":"2019-11-26T19:26:20","Actor":"dotnet-maestro-bot","Number":"27948","RawContent":null,"Title":"Update BuildTools to rc1-04626-02 (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/27948","RelatedDescription":"Open PR \"Update BuildTools to rc1-04626-02 (release/2.1)\" (#27948)"},{"Id":"528886486","IsPullRequest":true,"CreatedAt":"2019-11-26T18:44:02","Actor":"dotnet-maestro-bot","Number":"27946","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @Anipik\n* @mmitche\n* @davmason\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/27946","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#27946)"},{"Id":"528835856","IsPullRequest":false,"CreatedAt":"2019-11-26T17:53:40","Actor":"znakeeye","Number":"27945","RawContent":null,"Title":"ArrayPool's Return() and Rent() have the wrong signature","State":"closed","Body":"[ConfigurableArrayPool.Return()](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Buffers/ConfigurableArrayPool.cs#L123) should return a `bool`, indicating if the buffer was indeed returned. Similarly, there should be a `Rent(int minimumLength, out bool rented)` so that you can quickly determine if the returned buffer is indeed from the pool.\r\n\r\n**Important for unit tests**\r\nThe current implementation makes it impossible to determine if you are working with a pooled array or temporary array. Distinguishing between the two can be critical for e.g. unit tests. In our use case, we traverse a tree structure and it's important that we don't reach a point where the array pool has been exhausted. Here, fine-tuning the size of the pool (impossible due to the above) would allow us to get a deterministic GC behavior.","Url":"https://github.com/dotnet/coreclr/issues/27945","RelatedDescription":"Closed issue \"ArrayPool's Return() and Rent() have the wrong signature\" (#27945)"},{"Id":"537150704","IsPullRequest":false,"CreatedAt":"2019-11-15T16:20:09","Actor":"andrewmcclellankibo","Number":"27970","RawContent":null,"Title":"System.Threading.Timer Not Running On Ubuntu server","State":"open","Body":"# System.Threading.Timer Not Running On Ubuntu server\r\n\r\n\r\n# General\r\nCreated a worker service project, used a background service to create a timer function that followed:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.0&tabs=visual-studio\r\n\r\n\r\nWhen executing: running locally on windows, timer events trigger as expected.\r\n\r\nDeployed to ubuntu server: timer events are never triggered.\r\nVerified that the app is running, and no issues instantiating the timer, it just never actually triggers the timer.\r\n","Url":"https://github.com/dotnet/coreclr/issues/27970","RelatedDescription":"Open issue \"System.Threading.Timer Not Running On Ubuntu server\" (#27970)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"537838019","IsPullRequest":true,"CreatedAt":"2019-12-18T01:38:23","Actor":"dotnet-maestro[bot]","Number":"13160","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191217.15\r\n- **Date Produced**: 12/18/2019 12:36 AM\r\n- **Commit**: 7e7e3eab372d4c76824ba8c31b05f11b94b8a057\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19617.15\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13160","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13160)"},{"Id":"537217099","IsPullRequest":true,"CreatedAt":"2019-12-13T22:07:36","Actor":"dotnet-maestro[bot]","Number":"13158","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191213.8\r\n- **Date Produced**: 12/13/2019 8:24 PM\r\n- **Commit**: e98d59e0cc80d22c6c56e5818cd62583973b6657\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19613.8\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13158","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13158)"},{"Id":"537732084","IsPullRequest":false,"CreatedAt":"2019-12-13T19:28:51","Actor":"Thraka","Number":"13159","RawContent":null,"Title":"Powershell Install script is not signed","State":"open","Body":"#### Originally from\r\n_@jozefizso on Friday, December 13, 2019 2:28:43 PM_\r\n\r\nWhy is the PowerShell script unsigned? How do we know we are running a legitimate script when it's downloaded from internet on each build?\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a2e484a9-5e0c-eb3e-1413-7b507c4fa07d\r\n* Version Independent ID: 5bc7caa5-f1c2-d7d5-fe02-80c65cca9672\r\n* Content: [dotnet-install scripts - .NET Core CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)\r\n* Content Source: [docs/core/tools/dotnet-install-script.md](https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-install-script.md)\r\n* Product: **dotnet-core**\r\n* Technology: **dotnet-cli**\r\n* GitHub Login: @mairaw\r\n* Microsoft Alias: **mairaw**\r\n\r\n_Copied from original issue: dotnet/docs#16242_","Url":"https://github.com/dotnet/cli/issues/13159","RelatedDescription":"Open issue \"Powershell Install script is not signed\" (#13159)"},{"Id":"536563234","IsPullRequest":true,"CreatedAt":"2019-12-11T23:47:19","Actor":"dotnet-maestro[bot]","Number":"13156","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191211.11\r\n- **Date Produced**: 12/11/2019 10:22 PM\r\n- **Commit**: 4b235df669038064ca539bec4bc732610b1eea3a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.2-servicing.19611.11\r\n\r\n[marker]: <> (End:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13156","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore\" (#13156)"},{"Id":"536589584","IsPullRequest":true,"CreatedAt":"2019-12-11T23:26:46","Actor":"wli3","Number":"13157","RawContent":null,"Title":"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…","State":"closed","Body":"… match ref pack","Url":"https://github.com/dotnet/cli/pull/13157","RelatedDescription":"Closed or merged PR \"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…\" (#13157)"},{"Id":"536104877","IsPullRequest":true,"CreatedAt":"2019-12-11T15:00:12","Actor":"mmitche","Number":"13155","RawContent":null,"Title":"[release/3.1.2xx] Revert back to 3.1.0 runtime versions","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13155","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Revert back to 3.1.0 runtime versions\" (#13155)"},{"Id":"534626066","IsPullRequest":true,"CreatedAt":"2019-12-11T02:41:56","Actor":"wli3","Number":"13152","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13152","RelatedDescription":"Closed or merged PR \"Update stage0\" (#13152)"},{"Id":"534221922","IsPullRequest":true,"CreatedAt":"2019-12-10T20:53:32","Actor":"mmitche","Number":"13147","RawContent":null,"Title":"[release/3.0.1xx] Change to name/value variables and remove unused","State":"closed","Body":"- Remove old legacy PB_ values that are no longer used\r\n- Change to the name, value pair approach for variables.\r\nThis will allow internal builds to add variable groups required for accessing internal runtimes","Url":"https://github.com/dotnet/cli/pull/13147","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Change to name/value variables and remove unused\" (#13147)"},{"Id":"535519187","IsPullRequest":true,"CreatedAt":"2019-12-10T16:22:07","Actor":"dotnet-maestro-bot","Number":"13154","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"closed","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* mmitche\n* dotnet-maestro[bot]\n* wli3\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/cli/pull/13154","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#13154)"},{"Id":"533589968","IsPullRequest":true,"CreatedAt":"2019-12-09T18:21:55","Actor":"mmitche","Number":"13143","RawContent":null,"Title":"[release/3.1.1xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13143","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update to 3.1.100 rtm sdk\" (#13143)"},{"Id":"533591152","IsPullRequest":true,"CreatedAt":"2019-12-09T17:03:19","Actor":"mmitche","Number":"13144","RawContent":null,"Title":"[release/3.1.2xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13144","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update to 3.1.100 rtm sdk\" (#13144)"},{"Id":"534466510","IsPullRequest":true,"CreatedAt":"2019-12-09T05:23:18","Actor":"dotnet-maestro[bot]","Number":"13148","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13148","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13148)"},{"Id":"534646792","IsPullRequest":true,"CreatedAt":"2019-12-09T02:28:15","Actor":"wli3","Number":"13153","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#13153)"},{"Id":"534466950","IsPullRequest":true,"CreatedAt":"2019-12-08T00:30:21","Actor":"mmitche","Number":"13151","RawContent":null,"Title":"[release/3.0.1xx] Enable official builds on internal branches","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13151","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Enable official builds on internal branches\" (#13151)"},{"Id":"534466590","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:50","Actor":"dotnet-maestro[bot]","Number":"13150","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13150","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13150)"},{"Id":"534466539","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:23","Actor":"dotnet-maestro[bot]","Number":"13149","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13149","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13149)"},{"Id":"533540123","IsPullRequest":true,"CreatedAt":"2019-12-06T18:06:21","Actor":"wli3","Number":"13142","RawContent":null,"Title":"Update branding to \"preview\"","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13142","RelatedDescription":"Closed or merged PR \"Update branding to \"preview\"\" (#13142)"},{"Id":"533696470","IsPullRequest":true,"CreatedAt":"2019-12-06T02:25:32","Actor":"dotnet-maestro[bot]","Number":"13146","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13146","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/templating\" (#13146)"},{"Id":"533696469","IsPullRequest":true,"CreatedAt":"2019-12-06T02:20:30","Actor":"dotnet-maestro[bot]","Number":"13145","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13145","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13145)"},{"Id":"533009789","IsPullRequest":true,"CreatedAt":"2019-12-05T19:18:59","Actor":"dotnet-maestro[bot]","Number":"13139","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13139","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13139)"},{"Id":"533009481","IsPullRequest":true,"CreatedAt":"2019-12-05T19:18:18","Actor":"dotnet-maestro[bot]","Number":"13138","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13138","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13138)"},{"Id":"533505361","IsPullRequest":true,"CreatedAt":"2019-12-05T19:16:24","Actor":"mmitche","Number":"13141","RawContent":null,"Title":"Use Microsoft.NETCore.App.Internal for runtime version","State":"closed","Body":"The final non-suffixed build is not written to a non-suffixed directory. \r\n\r\nAlso reorder a pinned dependency to work around potential https://github.com/dotnet/arcade/issues/4067","Url":"https://github.com/dotnet/cli/pull/13141","RelatedDescription":"Closed or merged PR \"Use Microsoft.NETCore.App.Internal for runtime version\" (#13141)"},{"Id":"533010316","IsPullRequest":true,"CreatedAt":"2019-12-05T19:10:00","Actor":"dotnet-maestro[bot]","Number":"13140","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13140","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13140)"},{"Id":"529644622","IsPullRequest":true,"CreatedAt":"2019-12-04T23:28:42","Actor":"dotnet-maestro[bot]","Number":"13134","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191127.2\r\n- **Date Produced**: 11/28/2019 1:08 AM\r\n- **Commit**: ea3020cd0422107d6f982b363aa16c59fe2e846e\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19577.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13134","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13134)"},{"Id":"529651007","IsPullRequest":true,"CreatedAt":"2019-12-04T23:28:28","Actor":"dotnet-maestro[bot]","Number":"13135","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191127.4\r\n- **Date Produced**: 11/28/2019 1:42 AM\r\n- **Commit**: 15b6aee2f5702a8d38bf9063e52f34d8e689ab72\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.1-servicing.19577.4\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13135","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#13135)"},{"Id":"532356783","IsPullRequest":true,"CreatedAt":"2019-12-04T19:00:10","Actor":"wli3","Number":"13137","RawContent":null,"Title":"Merge release/2.1.6xx release/2.1.8xx ","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13137","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx release/2.1.8xx \" (#13137)"},{"Id":"529602649","IsPullRequest":true,"CreatedAt":"2019-12-02T18:58:08","Actor":"wtgodbe","Number":"13131","RawContent":null,"Title":"Pin dependency on Microsoft.Netcore.App refpack to 3.1.0","State":"closed","Body":"@nguerrera @mmitche PTAL","Url":"https://github.com/dotnet/cli/pull/13131","RelatedDescription":"Closed or merged PR \"Pin dependency on Microsoft.Netcore.App refpack to 3.1.0\" (#13131)"},{"Id":"529633633","IsPullRequest":true,"CreatedAt":"2019-12-02T18:41:01","Actor":"dotnet-maestro[bot]","Number":"13132","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13132","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13132)"},{"Id":"531378595","IsPullRequest":true,"CreatedAt":"2019-12-02T18:37:48","Actor":"dotnet-maestro[bot]","Number":"13136","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13136","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13136)"},{"Id":"529636031","IsPullRequest":true,"CreatedAt":"2019-11-29T17:32:16","Actor":"dotnet-maestro[bot]","Number":"13133","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13133","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13133)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"538960639","IsPullRequest":false,"CreatedAt":"2019-12-17T10:01:53","Actor":"gulbanana","Number":"1667","RawContent":null,"Title":"Could we please get CallerArgumentExpressionAttribute in .NET Standard?","State":"open","Body":"It's not in ns2.1, so that's a missing feature from C# 8.","Url":"https://github.com/dotnet/standard/issues/1667","RelatedDescription":"Open issue \"Could we please get CallerArgumentExpressionAttribute in .NET Standard?\" (#1667)"},{"Id":"538783452","IsPullRequest":false,"CreatedAt":"2019-12-17T01:45:21","Actor":"pb-gs","Number":"1666","RawContent":null,"Title":"System.Net.PeerToPeer in .NET Standard","State":"open","Body":"Hey there,\r\n\r\nJust wondering if it is likely that .NET Standard will include classes from [`System.Net.PeerToPeer`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer?view=netframework-4.8) (e.g. [`PeerNameResolver`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer.peernameresolver?view=netframework-4.8)) or otherwise have peer name resolution protocol support?\r\n\r\nThank you.","Url":"https://github.com/dotnet/standard/issues/1666","RelatedDescription":"Open issue \"System.Net.PeerToPeer in .NET Standard\" (#1666)"},{"Id":"537929488","IsPullRequest":false,"CreatedAt":"2019-12-14T15:46:28","Actor":"shcummin","Number":"1665","RawContent":null,"Title":"<PackageReference> System.* when targeting NET Framework leads to ambiguity","State":"open","Body":"Related to Framework compat\r\n\r\nIn a project targeting 4.6, references:\r\n\r\n```\r\n    <PackageReference Include=\"System.ComponentModel.Annotations\" />\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nAnd:\r\n\r\n```\r\n    <Reference Include=\"System.ComponentModel.DataAnnotations\"  />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n```\r\n\r\nAppear to be synonymous (because builds pass) when in reality:\r\n\r\n`<PackageReference>` is restoring packages, rewriting generated nupkg dependencies and introducing version complexity and binplacing new dlls (or facade dlls?)\r\n\r\n`<Reference>`, comparatively, is unambiguously depending on the Framework and not changing any nuget collateral.\r\n\r\nAs there does not appear to be a particularly compelling reason to use `<PackageReference>` in this way when targeting .NET Framework 4.5/4.6, and even doing this opens up compat issues such as Issue #1179 , then `<PackageReference>` for System.* packages net45/net46 should cause a build error in the msbuild/vs toolchain or cause a runtime error. [or there should be a doc describing why this is a bad idea]\r\n\r\n\r\n**Edit:** Additionally there is loads of confusion online:\r\n\r\nhttps://weblog.west-wind.com/posts/2019/Feb/19/Using-NET-Standard-with-Full-Framework-NET\r\n\r\n> As a side note a number of people pointed out to me that Paket - which is an alternate package manager for NuGet packages - considers versions of .NET 4.7.1 and older incompatible with .NET Standard so you can't actually install .NET Standard packages for those versions by default.\r\n> \r\n> Makes sense - **Microsoft has acknowledged that using .NET Standard on anything prior to 4.7.1 is not a good idea** and I would add using 4.7.1 is not optimal either, but alas it does work with some of the messy hackery described above.\r\n\r\nWhere did Microsoft acknowledge this in an official capacity?\r\n\r\nAnd, if this is the case, why does System.Servicemodel.Primitives.4.4.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n\r\n```\r\n\r\nwhy does System.Servicemodel.Primitives.4.7.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"2.0.3\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n```\r\n\r\nWhat is this package going to do on 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nAnd the lib folders:\r\n\r\n![image](https://user-images.githubusercontent.com/28113572/70868825-433eaf80-1f39-11ea-9f5f-79d8de22bd97.png)\r\n\r\nWhy is the binplace different across 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nBehavior seems to be: \r\n- 4.5 explicit discard/no-op\r\n- 4.6 binplace 1 dll\r\n- 4.6.1 binplace 2 dlls??\r\n- 4.6.2 - not called out, so .netstandard20 path is followed, (??) then for version S.SM.Primitives 4.4 there's 1 dll, and in S.SM.Primitive 4.7 there are 2 dlls.\r\n\r\nGiven this behavior, why would I want\r\n\r\n```\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nanywhere near a .NET 4.6.x project?\r\n\r\nThere seems to be some discussion of this sort of thing being a nuget restore warning here: https://github.com/NuGet/Home/issues/8376  however there seems to be also a possibility that the nuget authors forcefully break people targeting 4.5 thru to 4.6.2 which would be preferable to difficult to define behavior.\r\n","Url":"https://github.com/dotnet/standard/issues/1665","RelatedDescription":"Open issue \"<PackageReference> System.* when targeting NET Framework leads to ambiguity\" (#1665)"},{"Id":"536390167","IsPullRequest":false,"CreatedAt":"2019-12-11T15:41:06","Actor":"Jmales","Number":"1663","RawContent":null,"Title":"Can I import net472 project from a .netstandard project? Also, should I?","State":"closed","Body":"Imagine the following scenario:\r\n\r\nA------------------->B--------------------->C\r\n(**Net472**)----------->(**NetStandard**)--------->(**Net472**)\r\n\r\nMain project A in **NET framework,** referencing a **.Net Standard** project B which references a **NET Framework 472** project.\r\n\r\nIn theory, as **Net Standard** is a subset of **NET framework**, it shouldn't make sense that I can reference the whole from within a subset right? However, if I create a simple App with that structure I'm able to build and run it without errors or warnings.\r\n\r\nBUT, if I try this in other applications, mainly a big one that I'm porting to .NET Standard, I get warning in the **.NET Standard** projects referencing **.NET 472**. When is this warning raised after all?\r\n\r\n`C.csproj was resolved using '.NETFramework,Version=v4.7.2' instead of the project target framework '.NETStandard,Version=v2.0'. This project may not be fully compatible with your project.`\r\n\r\nAnd, can I or can't I reference a **NET472** project from within a **.NET Standard 2.0/2.1**?\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1663","RelatedDescription":"Closed issue \"Can I import net472 project from a .netstandard project? Also, should I?\" (#1663)"},{"Id":"535997897","IsPullRequest":false,"CreatedAt":"2019-12-10T21:14:54","Actor":"hrumhurum","Number":"1662","RawContent":null,"Title":".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator","State":"open","Body":".NET Standard 2.1 introduced availability of `System.Reflection.Emit.ILGenerator` class: https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.ilgenerator?view=netstandard-2.1\r\n\r\nBut `mscorlib` assembly located at `C:\\Program Files\\dotnet\\packs\\NETStandard.Library.Ref\\2.1.0\\ref\\netstandard2.1\\mscorlib.dll` misses a corresponding type forwarder for `System.Reflection.Emit.ILGenerator`.\r\n\r\nThat omission causes a hole in type system integrity.","Url":"https://github.com/dotnet/standard/issues/1662","RelatedDescription":"Open issue \".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator\" (#1662)"},{"Id":"534875855","IsPullRequest":false,"CreatedAt":"2019-12-09T11:45:47","Actor":"IanKemp","Number":"1661","RawContent":null,"Title":"2.1 release timeline?","State":"open","Body":"It's been more than 2 years since Standard 2.0. We're already on Core 3.1 that's LTS, when can we expect the next version of Standard? Or is Standard dead and we should just use Core for everything going forward?","Url":"https://github.com/dotnet/standard/issues/1661","RelatedDescription":"Open issue \"2.1 release timeline?\" (#1661)"},{"Id":"529638047","IsPullRequest":true,"CreatedAt":"2019-11-28T01:14:42","Actor":"dotnet-maestro[bot]","Number":"1660","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1660","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1660)"},{"Id":"529573719","IsPullRequest":false,"CreatedAt":"2019-11-27T21:33:26","Actor":"timdoke","Number":"1659","RawContent":null,"Title":"Generic class operators derived from interface seems broken","State":"closed","Body":"Let's say I have a CaseInsensitiveConcurrentDictionary.  The intention of it is to be interchangeable with regular Dictionary implementations -- where, we always use the interface IDictionary<T, T> to interact with either.  Both Dictionary and ConcurrentDictionary implement IDictionary interface members.\r\n\r\nThe class looks like this:\r\n\r\n\r\n    public class CaseInsensitiveDictionary<TValue>\r\n        : ConcurrentDictionary<string, TValue>\r\n    {\r\n        public CaseInsensitiveDictionary()\r\n            : base(StringComparer.InvariantCultureIgnoreCase)\r\n        {\r\n        }\r\n\r\n        private CaseInsensitiveDictionary(IDictionary<string, TValue> attributes)\r\n            : this()\r\n        {\r\n            AddRange(attributes);\r\n        }\r\n\r\n        public void Add(string key, TValue value)\r\n        {\r\n            this.TryAdd(key, value);\r\n        }\r\n\r\n        public void AddRange(IDictionary<string, TValue> entries)\r\n        {\r\n            foreach (var item in entries)\r\n            {\r\n                this.TryAdd(item.Key, item.Value);\r\n            }\r\n        }\r\n\r\n        public static CaseInsensitiveDictionary<TValue> Create(IDictionary<string, TValue> attributes = null)\r\n        {\r\n            if (attributes == null)\r\n            {\r\n                return new CaseInsensitiveDictionary<TValue>();\r\n            }\r\n            return new CaseInsensitiveDictionary<TValue>(attributes);\r\n        }\r\n\r\n        public static implicit operator Dictionary<string, TValue>(CaseInsensitiveDictionary<TValue> data)\r\n        {\r\n            return new Dictionary<string, TValue>(data);\r\n        }\r\n\r\n        public static implicit operator CaseInsensitiveDictionary<TValue>(Dictionary<string, TValue> data)\r\n        {\r\n            return Create(data);\r\n        }\r\n\r\n    }\r\n\r\n\r\n`  \r\n\r\n\r\nLet's say then that we are trying to implicitly convert the ConcurrentDictionary to and from a dictionary.  To test, I wrote these methods:\r\n\r\n\r\n\r\n        public void FromDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n\r\n            Dictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n            Console.WriteLine(\"FromDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n        public void FromIDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n            IDictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n\r\n            Console.WriteLine(\"FromIDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n\r\n        public void FromCaseInsensitiveDictionaryToDictionaryTest()\r\n        {\r\n\r\n            var dc2 = new CaseInsensitiveDictionary<string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (Dictionary<string, string>)dc2;\r\n\r\n            Console.WriteLine(\"FromCaseInsensitiveDictionaryToDictionaryTest success\");\r\n\r\n        }\r\n\r\n\r\n\r\nThe first (FromDictionaryToCaseInsensitiveDictionaryTest) and third methods (FromCaseInsensitiveDictionaryToDictionaryTest) work fine and correctly use the operators.\r\n\r\nThe second one fails with this exception: System.InvalidCastException: 'Unable to cast object of type 'System.Collections.Generic.Dictionary`2[System.String,System.String]' to type 'OpenToken.CaseInsensitiveDictionary`1[System.String]'.'\r\n.  In my opinion, FromIDictionaryToCaseInsensitiveDictionaryTest should work because the type is CaseInsensitiveDictionary and implements IDictionary.  If I do NOT have the first conversion operator, the first test method fails with this exact same error message, \r\n\r\nWith this evidence, it seems to me that something is missing when the runtime is looking for the appropriate operator.  FromIDictionaryToCaseInsensitiveDictionaryTest should work either from the Dictionary operator or automatically work because it implements the IDictionary interface.  (I cannot create an operator for IDictionary conversion because that is illegal).  \r\n\r\nPlease let me know if this is expected behavior and if there is some workaround for it.  This issue seems to be present in all versions of C#.\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1659","RelatedDescription":"Closed issue \"Generic class operators derived from interface seems broken\" (#1659)"},{"Id":"526765953","IsPullRequest":false,"CreatedAt":"2019-11-25T02:23:45","Actor":"arizvisa","Number":"1657","RawContent":null,"Title":"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed","State":"closed","Body":"Hey guys, the signature check for this package seems to be failing. Not sure what that actually means, but here's the checksum as of 2019/11/21 12:23 (CST).\r\n\r\n```\r\n# fetch https://packages.microsoft.com/fedora/30/prod/netstandard-targeting-pack-2.1.0-x64.rpm\r\nnetstandard-targeting-pack-2.1.0-x64.rpm 100% 2201944 2201944\r\n# openssl dgst -sha256 netstandard-targeting-pack-2.1.0-x64.rpm \r\nSHA256(netstandard-targeting-pack-2.1.0-x64.rpm)= 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480\r\n```\r\n\r\nThen with dnf actually complaining about it.\r\n```\r\n# dnf repository-packages packages-microsoft-com-prod install netstandard-targeting-pack-2.1                                                                                 \r\nenabling fedora-modular-debuginfo repository                                                                  \r\nenabling updates-modular-debuginfo repository       \r\nenabling updates-debuginfo repository                                                                         \r\nenabling fedora-debuginfo repository\r\nenabling rpmfusion-free-updates-debuginfo repository\r\nenabling rpmfusion-free-debuginfo repository                                                                  \r\nLast metadata expiration check: 0:13:30 ago on Thu 21 Nov 2019 12:03:15 PM CST.\r\nDependencies resolved.     \r\n==============================================================================================================\r\n Package                               Architecture  Version         Repository                          Size \r\n==============================================================================================================\r\nInstalling:\r\n netstandard-targeting-pack-2.1        x86_64        2.1.0-1         packages-microsoft-com-prod        2.1 M\r\n\r\nTransaction Summary\r\n==============================================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 2.1 M\r\nInstalled size: 2.1 M\r\nIs this ok [y/N]: y\r\nDownloading Packages:\r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[FAILED] netstandard-targeting-pack-2.1.0-x64.rpm: No more mirrors to try - All mirrors were already tried without success\r\n```\r\n\r\nHopefully this doesn't entail the need for ir. Heh.","Url":"https://github.com/dotnet/standard/issues/1657","RelatedDescription":"Closed issue \"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed\" (#1657)"},{"Id":"527469491","IsPullRequest":true,"CreatedAt":"2019-11-23T01:19:55","Actor":"dotnet-maestro[bot]","Number":"1658","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191122.3\r\n- **Date Produced**: 11/22/2019 7:14 PM\r\n- **Commit**: 0e0d227c57e69c03427d6e668716d62cf4ceb36e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19572.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1658","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1658)"},{"Id":"526119676","IsPullRequest":true,"CreatedAt":"2019-11-20T20:02:50","Actor":"dotnet-maestro[bot]","Number":"1656","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191119.2\r\n- **Date Produced**: 11/19/2019 6:14 PM\r\n- **Commit**: e34d933e18ba1cd393bbafcb6018e0f858d3e89e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19569.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1656","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1656)"},{"Id":"523456559","IsPullRequest":false,"CreatedAt":"2019-11-19T23:58:30","Actor":"SetTrend","Number":"1655","RawContent":null,"Title":"Change .NET Framework in version table from 4.6.1 to 4.7.1","State":"closed","Body":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update above version table to provide **_true_** information than just spout some wannabe information?","Url":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Closed issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655)"},{"Id":"523175041","IsPullRequest":false,"CreatedAt":"2019-11-15T00:02:51","Actor":"replaysMike","Number":"1654","RawContent":null,"Title":"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator","State":"open","Body":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?","Url":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Open issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654)"},{"Id":"522886300","IsPullRequest":false,"CreatedAt":"2019-11-14T14:14:42","Actor":"tndata","Number":"1653","RawContent":null,"Title":"Broken link","State":"open","Body":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n","Url":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Open issue \"Broken link\" (#1653)"},{"Id":"522854157","IsPullRequest":true,"CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Number":"1652","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1652)"},{"Id":"522220691","IsPullRequest":true,"CreatedAt":"2019-11-13T13:59:11","Actor":"dotnet-maestro[bot]","Number":"1651","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 9:07 AM\r\n- **Commit**: a528006b4536e5b73227285b57d2a56116532506\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1651)"},{"Id":"522208590","IsPullRequest":true,"CreatedAt":"2019-11-13T13:01:39","Actor":"dotnet-maestro[bot]","Number":"1650","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191216.4\r\n- **Date Produced**: 12/16/2019 9:51 PM\r\n- **Commit**: 4736ddca60a4040447b450437cf3767c9045edc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19616.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1650","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1650)"},{"Id":"521547575","IsPullRequest":true,"CreatedAt":"2019-11-12T14:07:43","Actor":"dotnet-maestro[bot]","Number":"1649","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.1\r\n- **Date Produced**: 11/12/2019 10:06 AM\r\n- **Commit**: 21278249c6b417469737b20445a0dd045cd1b16e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1649","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1649)"},{"Id":"520598776","IsPullRequest":true,"CreatedAt":"2019-11-10T13:31:00","Actor":"dotnet-maestro[bot]","Number":"1648","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.6\r\n- **Date Produced**: 11/10/2019 6:07 AM\r\n- **Commit**: bc115700c3ece60acd6b8dbe4b0bdb8f6f80c756\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1648","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1648)"},{"Id":"520424908","IsPullRequest":true,"CreatedAt":"2019-11-09T14:01:26","Actor":"dotnet-maestro[bot]","Number":"1647","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.1\r\n- **Date Produced**: 11/9/2019 9:20 AM\r\n- **Commit**: f546aa9e76c776f2c27e30dfb91c50d8f62da2f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1647","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1647)"},{"Id":"520010128","IsPullRequest":true,"CreatedAt":"2019-11-08T13:28:42","Actor":"dotnet-maestro[bot]","Number":"1646","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191107.22\r\n- **Date Produced**: 11/8/2019 8:30 AM\r\n- **Commit**: 7a318879f787e9feee9266fe9e876ee2411b548f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19557.22\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1646","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1646)"},{"Id":"519262813","IsPullRequest":true,"CreatedAt":"2019-11-07T13:26:42","Actor":"dotnet-maestro[bot]","Number":"1645","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191106.12\r\n- **Date Produced**: 11/7/2019 8:14 AM\r\n- **Commit**: a4f04476ea74c61a52168cf0b31c0281822ecad3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19556.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1645","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1645)"},{"Id":"518467413","IsPullRequest":true,"CreatedAt":"2019-11-06T13:31:10","Actor":"dotnet-maestro[bot]","Number":"1644","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191105.8\r\n- **Date Produced**: 11/6/2019 9:54 AM\r\n- **Commit**: 9e94e2552ad869005f30f6a59eb638c544d3efdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19555.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1644","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1644)"},{"Id":"518175351","IsPullRequest":false,"CreatedAt":"2019-11-06T01:11:51","Actor":"tchitnis","Number":"1643","RawContent":null,"Title":"Debug.Assert causing entire test run to be aborted","State":"open","Body":"Similar to the issues reported here:\r\n\r\nhttps://github.com/Microsoft/vstest/issues/1022\r\nhttps://github.com/dotnet/coreclr/issues/22569\r\n\r\nI still see the same error/issue on .net standard 2.0 with MSTest. Sounds like it was fixed with .Net Core 3.0, can someone comment on whether a similar fix was applied to .Net Standard as well?","Url":"https://github.com/dotnet/standard/issues/1643","RelatedDescription":"Open issue \"Debug.Assert causing entire test run to be aborted\" (#1643)"},{"Id":"517769508","IsPullRequest":true,"CreatedAt":"2019-11-05T13:42:32","Actor":"dotnet-maestro[bot]","Number":"1642","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191104.10\r\n- **Date Produced**: 11/5/2019 7:44 AM\r\n- **Commit**: ee038925bde85c1c45c52f235ab09ea03b9c126c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19554.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1642","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1642)"},{"Id":"517192004","IsPullRequest":false,"CreatedAt":"2019-11-04T14:33:56","Actor":"peni4142","Number":"1641","RawContent":null,"Title":"Regex Bug","State":"open","Body":"Hi guys,\r\nI have a test for you\r\n\r\n[x] Bug Report\r\n\r\nThe following regex test will return an empty string in the group[0], which in my opinion can't be true.\r\n\r\n\r\n```C#\r\n        [TestMethod()]\r\n        public void BugTest()\r\n        {\r\n            Match matchEnsureObject = new Regex(\"^\\\\[MERGE-CMD: ENSURE OBJECT\\\\(([^)]+)\\\\)\\\\]$\").Match(\"[MERGE-CMD: ENSURE OBJECT(aLong) AT 1]\");\r\n            if(matchEnsureObject.Groups[0].Value == \"\")\r\n            {\r\n                throw new Exception(\"Match can't be an empty value\");\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/standard/issues/1641","RelatedDescription":"Open issue \"Regex Bug\" (#1641)"},{"Id":"517142571","IsPullRequest":true,"CreatedAt":"2019-11-04T13:21:47","Actor":"dotnet-maestro[bot]","Number":"1640","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191103.8\r\n- **Date Produced**: 11/4/2019 8:18 AM\r\n- **Commit**: 15e7e1569a8c3a5502c476c31b60e06d633b3efa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19553.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1640","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1640)"},{"Id":"516826733","IsPullRequest":true,"CreatedAt":"2019-11-03T13:44:18","Actor":"dotnet-maestro[bot]","Number":"1639","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191102.6\r\n- **Date Produced**: 11/3/2019 4:48 AM\r\n- **Commit**: bfaed4d48a921a339f9691c74425bec9d2f760a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19552.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1639","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1639)"},{"Id":"516615712","IsPullRequest":false,"CreatedAt":"2019-11-02T14:52:31","Actor":"bernd5","Number":"1638","RawContent":null,"Title":"_dummy and _dummyPrimitive in System.Span","State":"closed","Body":"Why is it required that all net standard compliant implementations need a private field _dummy and _dummyPrimitive to provide a standard Span<T>?\r\n\r\nShould it be really part of the standard? Isn't it just an implementation detail?","Url":"https://github.com/dotnet/standard/issues/1638","RelatedDescription":"Closed issue \"_dummy and _dummyPrimitive in System.Span\" (#1638)"},{"Id":"516573954","IsPullRequest":true,"CreatedAt":"2019-11-02T12:25:00","Actor":"dotnet-maestro[bot]","Number":"1637","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191101.24\r\n- **Date Produced**: 11/2/2019 4:59 AM\r\n- **Commit**: eb41b7841f1d8edc499a8c0fbaec5e4d53187fa0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19551.24\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1637","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1637)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"537777365","IsPullRequest":false,"CreatedAt":"2019-12-17T15:00:44","Actor":"vasicvuk","Number":"42778","RawContent":null,"Title":"How to get RSACryptoServiceProvider from X509Certificate2 .Net Core","State":"closed","Body":"Following code works in .Net 4.7.1 but not in .Net Core 3.1\r\n\r\n```csharp\r\nX509Store store = new X509Store(StoreLocation.CurrentUser);\r\nstore.Open(OpenFlags.ReadOnly);\r\nX509Certificate2 cert = null;\r\nforeach (X509Certificate2 cert2 in store.Certificates)\r\n{\r\n\tif (cert2.HasPrivateKey && cert2.PrivateKey is RSACryptoServiceProvider rsa)\r\n\t{\r\n             // .Net Core 3.1 nevers get RSACryptoServiceProvider and .Net Framework returns it\r\n\t\tif (rsa == null) continue; \r\n\t\tif (rsa.CspKeyContainerInfo.HardwareDevice) // sure - smartcard\r\n\t\t{\r\n\t\t\tif ((rsa.CspKeyContainerInfo.KeyContainerName == KeyContainerName) && (rsa.CspKeyContainerInfo.ProviderName == ProviderName))\r\n\t\t\t{\r\n\t\t\t\t//we find it\r\n\t\t\t\tcert = cert2;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI tried working with **RSACng** but i have few issues there. First i cannot get info from **CspKeyContainerInfo** needed for this. And also when i try to sign with this certificate it is always asking me for a PIN even if i defined **RSACryptoServiceProvider** before with **KeyPassword**.\r\n\r\n.Net Framework code\r\n```csharp\r\nSecureString pwd = GetSecurePin(PinCode);\r\n\r\nCspParameters csp = new CspParameters(1, ProviderName, KeyContainerName,\r\n   new System.Security.AccessControl.CryptoKeySecurity(), pwd);\r\n```\r\n\r\n\r\nI need this only to work on Windows (ASP.Net Core 3.1).\r\n\r\nI read https://github.com/dotnet/corefx/blob/master/Documentation/architecture/cross-platform-cryptography.md but i am not sure how to do migration.\r\n\r\nThanks","Url":"https://github.com/dotnet/corefx/issues/42778","RelatedDescription":"Closed issue \"How to get RSACryptoServiceProvider from X509Certificate2 .Net Core\" (#42778)"},{"Id":"538888501","IsPullRequest":false,"CreatedAt":"2019-12-17T07:30:05","Actor":"poweralex","Number":"42783","RawContent":null,"Title":"bitmap.MakeTransparent works different on linux","State":"open","Body":"I'm trying to draw a png image with a block of transparent on it. the same code works fine on local windows environment, but when I deploy it on a Linux server, the block does not go transparent.\r\nthe code is simple:\r\n```c#\r\n                    byte[] fileContent = null;\r\n                    using (MemoryStream ms = new MemoryStream())\r\n                    {\r\n                        Bitmap bitmap = new Bitmap(\r\n                            100, 100\r\n                            );\r\n                        using (var g = Graphics.FromImage(bitmap))\r\n                        {\r\n                            // backgrand\r\n                            g.FillRectangle(new SolidBrush(Color.White), 0, 0, bitmap.Width, bitmap.Height);\r\n                            // transparent block\r\n                            g.FillRectangle(new SolidBrush(Color.Red), 10, 10, 80, 80);\r\n                            // blue line\r\n                            g.DrawLine(new Pen(Color.Blue), 10, 10, 90, 90);\r\n                        }\r\n                        bitmap.MakeTransparent(Color.Red);\r\n                        bitmap.Save(ms, ImageFormat.Png);\r\n                        fileContent = ms.ToArray();\r\n                    }\r\n```\r\nthe image looks good on windows:\r\n![image](https://user-images.githubusercontent.com/12427030/70973935-a4a18280-20e1-11ea-95a2-d2b8604af9f0.png)\r\nbut not on Linux:\r\n![image](https://user-images.githubusercontent.com/12427030/70974041-da466b80-20e1-11ea-9f3b-e329eda130d7.png)\r\n\r\nIs this a issue of System.Drawing.Common or is there something I missed?\r\n\r\n[danmosemsft fixed formatting]","Url":"https://github.com/dotnet/corefx/issues/42783","RelatedDescription":"Open issue \"bitmap.MakeTransparent works different on linux\" (#42783)"},{"Id":"538656286","IsPullRequest":false,"CreatedAt":"2019-12-16T21:02:03","Actor":"weshaggard","Number":"42782","RawContent":null,"Title":"Update package label to \"final\" for the stable prerelease builds.","State":"closed","Body":"https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L16 instead of excluding the build number change it to \"final\". That will help make sure the package version is the higher then any of the existing packages that have that build number. \r\n\r\nWe should consider renaming IncludeBuildNumberInPackageVersion to better align with this change.\r\n\r\nThis change needs to happen in corefx and core-setup. \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42782","RelatedDescription":"Closed issue \"Update package label to \"final\" for the stable prerelease builds.\" (#42782)"},{"Id":"538456644","IsPullRequest":false,"CreatedAt":"2019-12-16T18:24:56","Actor":"karimi64bit","Number":"42781","RawContent":null,"Title":"captcha در مرورگر موبایل ارور میده","State":"closed","Body":"سلام\r\nممنون از زحمت هاتون \r\nوقتی ازش استفاده میکنم درسته فقط وقتی تو موبایل دارم دکمه ریفرش میزنم کار نمیکنه\r\nممنون میشم راهنمایی کنید\r\n","Url":"https://github.com/dotnet/corefx/issues/42781","RelatedDescription":"Closed issue \"captcha در مرورگر موبایل ارور میده\" (#42781)"},{"Id":"538385840","IsPullRequest":false,"CreatedAt":"2019-12-16T14:26:33","Actor":"tornie2","Number":"42780","RawContent":null,"Title":"HttpClient sends NTLM ticket, even though it only has Negotiate credentials","State":"closed","Body":"We are puzzled that HttpClient will use NTLM token for authorization, even though will only give the handler Negotiate credentials\r\n\r\nOur application is in net461. We create our client with this code\r\n\r\n             _credentials = new CredentialCache { { _uri, \"Negotiate\", CredentialCache.DefaultNetworkCredentials } };\r\n             var handler = new WebRequestHandler { Credentials = _credentials, UnsafeAuthenticatedConnectionSharing = true, MaxConnectionsPerServer = 100, UseProxy = false };\r\n             var httpClient = new HttpClient(handler) { BaseAddress = _uri };\r\n\r\nWhen we access a node directly without a load-balancer, we can nicely see a Negotiate authorization.\r\n\r\nHowever when we access the system through the load-balancer, the Authorization in the request contains a Negotiate item, but when we open the token (base64 decode it), we can see that it actually is a NTLM-token\r\n\r\nThe challenge from the server has this header:\r\n             Proxy-Authenticate NTLM, Negotiate, Bearer\r\n\r\nThe response to the service looks something like this. Authorization says Negotiate, but when we decode the token, it is ntlm\r\n             Authorization Negotiate TlRMTVNT.....\r\n             Host syst-smfbasic:15000\r\n             CorrelationId 72395ff4-4fa9-4d5d-88c1-0d96b49da63c\r\n\r\nWhy will webrequesthandler generate an NTLM-token when we specifically ask for Negotiate, and write Negotiate in the header, when it actually is NTLM?\r\n\r\nAnd why only when we use a load-balancer?","Url":"https://github.com/dotnet/corefx/issues/42780","RelatedDescription":"Closed issue \"HttpClient sends NTLM ticket, even though it only has Negotiate credentials\" (#42780)"},{"Id":"537797199","IsPullRequest":false,"CreatedAt":"2019-12-14T00:43:37","Actor":"los93sol","Number":"42779","RawContent":null,"Title":"Code search broken on the repo?","State":"closed","Body":"I've noticed for at least the last week that searching the repo for code doesn't seem to work anymore.  Other repos like aspnetcore seem to still be searching fine though.  Not sure where else to report the issue to so figured I'd just open an issue here.","Url":"https://github.com/dotnet/corefx/issues/42779","RelatedDescription":"Closed issue \"Code search broken on the repo?\" (#42779)"},{"Id":"537672937","IsPullRequest":false,"CreatedAt":"2019-12-13T17:40:21","Actor":"alexborichevskyidt","Number":"42777","RawContent":null,"Title":"StringContent doesn't update ContentLength property automatically after creation.","State":"closed","Body":"Working with integration tests, noticed that StringContent doesn't update property ContentLength in Headers after creation, what cause request parsing issues in API application when using a test client with payload.\r\n\r\nCalling get for the property helped to resolve the issue.","Url":"https://github.com/dotnet/corefx/issues/42777","RelatedDescription":"Closed issue \"StringContent doesn't update ContentLength property automatically after creation.\" (#42777)"},{"Id":"537296624","IsPullRequest":true,"CreatedAt":"2019-12-13T01:14:53","Actor":"cheenamalhotra","Number":"42776","RawContent":null,"Title":"[release/3.1] Revert async changes in SqlClient to fix deadlock issues","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/778 and https://github.com/dotnet/SqlClient/pull/349\r\n\r\n### Summary\r\nFixes issue https://github.com/dotnet/SqlClient/issues/262 where client applications goes to deadlock when performing Async operations.\r\n\r\n### Customer Impact\r\nHigh. Random deadlocks occur in client applications and apps stay in hanging state.\r\n\r\n### Regression?\r\nYes, with PR #34184\r\n\r\n### Testing\r\nThis issue is hard to reproduce in tests and is currently not reproducible consistently, but a repro has been made available to identify deadlocks, which will be added to Microsoft.Data.SqlClient test lab once it can be consistently reproduced in test lab as well.\r\n\r\n### Risk\r\n**Low**: The fix has been verified with repro app and confirms the issue has been fixed.\r\n\r\ncc: @danmosemsft @benaadams","Url":"https://github.com/dotnet/corefx/pull/42776","RelatedDescription":"Open PR \"[release/3.1] Revert async changes in SqlClient to fix deadlock issues\" (#42776)"},{"Id":"537217410","IsPullRequest":false,"CreatedAt":"2019-12-12T21:17:44","Actor":"weltkante","Number":"42775","RawContent":null,"Title":"Regression: System.Windows.Size getting picked up unintentionally","State":"closed","Body":"Apparently adding WindowsBase references automatically is leading to a [regression](https://github.com/dotnet/winforms-datavisualization/issues/24) in some code which has been ported but not tested much: System.Windows.Size gets picked up instead of System.Drawing.Size by source imported from Desktop Framework which wasn't referencing WindowsBase before.\r\n\r\nJust trying to get some attention to it since the original report is in a readonly repo so it may not be watched closely.","Url":"https://github.com/dotnet/corefx/issues/42775","RelatedDescription":"Closed issue \"Regression: System.Windows.Size getting picked up unintentionally\" (#42775)"},{"Id":"536726110","IsPullRequest":true,"CreatedAt":"2019-12-12T02:51:49","Actor":"layomia","Number":"42772","RawContent":null,"Title":"Improve (de)serialization support for nested dictionaries","State":"open","Body":"## Description\r\n\r\nFixes https://github.com/dotnet/runtime/issues/670, where there was a regression between 3.0 and 3.1 where serializing nested concurrent dictionaries went from supported to unsupported. The issue also exists in master/5.0. https://github.com/dotnet/runtime/pull/784 fixes it in master, and this PR ports the fix to 3.0.\r\n\r\nIn addition to the fix described above, this PR also also has a deserialization fix for an `InvalidCastException` thrown when a dictionary element type has a converter that returns a type different from the declared type, e.g. when you're deserializing `Dictionary<string, MyClass>`, where\r\n\r\n```c#\r\nprivate interface IClass { }\r\n\r\nprivate class MyClass : IClass { }\r\n\r\nprivate class MyFactory : JsonConverterFactory\r\n{\r\n    public override bool CanConvert(Type typeToConvert)\r\n    {\r\n        return typeToConvert == typeof(IClass) || typeToConvert == typeof(MyClass);\r\n    }\r\n\r\n    public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        return new MyStuffConverter();\r\n    }\r\n}\r\n\r\nprivate class MyStuffConverter : JsonConverter<IClass>\r\n{\r\n    public override IClass Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        return new MyClass();\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IClass value, JsonSerializerOptions options)\r\n    {\r\n        writer.WriteNumberValue(1);\r\n    }\r\n}\r\n```\r\n\r\nIn this case, the read method of the converter for `typeof(MyClass)` returns a type `IClass` (not the declared type, `MyClass`) which causes an `InvalidCastException` later in the deserialization flow.\r\n\r\n## Customer Impact\r\n\r\nThe ability to serialize nested concurrent dictionaries is restored: https://github.com/dotnet/runtime/issues/670. \r\n\r\nThe deserialization scenario is an edge case, but the fix defends against leaking exceptions were it to occur.\r\n\r\n## Regression\r\n\r\nNo. The serialization change's tests are wide-ranging and covers various permutations of nested dictionaries, so a regression is unlikely.\r\n\r\nThe deserialization change adds more support without rescinding support. A regression is unlikely.\r\n\r\n## Risk\r\n\r\nLow, per the regression section above.","Url":"https://github.com/dotnet/corefx/pull/42772","RelatedDescription":"Open PR \"Improve (de)serialization support for nested dictionaries\" (#42772)"},{"Id":"536424352","IsPullRequest":false,"CreatedAt":"2019-12-11T15:19:08","Actor":"Adam-Tg","Number":"42770","RawContent":null,"Title":"Could not load file or assembly 'System.Security.Principal.Windows', manifest definition does not match the assembly reference","State":"closed","Body":"Solution has compiled successfully, but when executing, the following exception gets thrown:\r\n\r\n> System.IO.FileLoadException: Could not load file or assembly 'System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.\r\n\r\nI installed `System.Security.Principal.Windows` package by NuGet, but the error still appears.\r\n\r\n[This](https://stackoverflow.com/questions/51909212/could-not-load-file-or-assembly-system-security-principal-windows) does not help me.\r\nI don't have 'Microsoft.Net.Compiler' or 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform' installed, and even installing them or changing their versions does not help. Also, '.NET Compiler Platform SDK' is already installed.\r\n\r\nHow can I fix this?","Url":"https://github.com/dotnet/corefx/issues/42770","RelatedDescription":"Closed issue \"Could not load file or assembly 'System.Security.Principal.Windows', manifest definition does not match the assembly reference\" (#42770)"},{"Id":"535914883","IsPullRequest":true,"CreatedAt":"2019-12-10T18:44:21","Actor":"ericstj","Number":"42768","RawContent":null,"Title":"[release/3.1] Make PathAssemblyResolver handle Retargetable","State":"open","Body":"Release/3.1 port of fca60323d9606a90b327273d08089200ae6f527b + package authoring.","Url":"https://github.com/dotnet/corefx/pull/42768","RelatedDescription":"Open PR \"[release/3.1] Make PathAssemblyResolver handle Retargetable\" (#42768)"},{"Id":"535583459","IsPullRequest":false,"CreatedAt":"2019-12-10T16:01:07","Actor":"IgorMenshikov","Number":"42766","RawContent":null,"Title":"Nullable with JsonSerializer","State":"closed","Body":"I am migrating to .NET Core 3.1 and have a class with null-able values (decimal, DateTime) and want deserialize JSON to it. I received JSON from a client with property values as strings. Here is the sample code:\r\n\r\n```\r\npublic class Range\r\n{\r\n    public decimal? Start { get; set; }\r\n    public decimal? End { get; set; }\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    var json = \"{\\\"Start\\\":\\\"1\\\",\\\"End\\\":\\\"2\\\"}\";\r\n            \r\n    var j1 = Newtonsoft.Json.JsonConvert.DeserializeObject<Range>(json); // works fine\r\n    j1.ToString();\r\n\r\n    var j2 = System.Text.Json.JsonSerializer.Deserialize<Range>(json); // exception\r\n    j2.ToString();\r\n}\r\n```\r\n\r\nThis code throws an error:\r\n\r\n'The JSON value could not be converted to System.Nullable`1[System.Decimal]. \r\n\r\nI have tried to use a workarounf at:\r\nhttps://github.com/dotnet/corefx/issues/41070#issuecomment-555395612\r\n\r\nbut it does not help. Can something be some with that? Any workaround? Newtonsoft can handle that without problems.","Url":"https://github.com/dotnet/corefx/issues/42766","RelatedDescription":"Closed issue \"Nullable with JsonSerializer\" (#42766)"},{"Id":"535788229","IsPullRequest":false,"CreatedAt":"2019-12-10T15:06:47","Actor":"bugproof","Number":"42767","RawContent":null,"Title":"System.Text.Json serialization order","State":"closed","Body":"moved to https://github.com/dotnet/runtime/issues/728","Url":"https://github.com/dotnet/corefx/issues/42767","RelatedDescription":"Closed issue \"System.Text.Json serialization order\" (#42767)"},{"Id":"535498144","IsPullRequest":false,"CreatedAt":"2019-12-10T05:11:58","Actor":"dehghani-mehdi","Number":"42765","RawContent":null,"Title":"Why `System.Net.Sockets` has dependency to `System.Security.Principal.Windows`?","State":"open","Body":"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?","Url":"https://github.com/dotnet/corefx/issues/42765","RelatedDescription":"Open issue \"Why `System.Net.Sockets` has dependency to `System.Security.Principal.Windows`?\" (#42765)"},{"Id":"534556922","IsPullRequest":true,"CreatedAt":"2019-12-08T16:18:55","Actor":"dotnet-maestro[bot]","Number":"42762","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191207.1\r\n- **Date Produced**: 12/7/2019 4:52 PM\r\n- **Commit**: 5558d18aafc84ecac3630ca6a31f52699cde0b66\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.1-servicing.19607.1\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.1-servicing.19607.1\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.1-servicing.19607.1\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42762","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42762)"},{"Id":"533572448","IsPullRequest":true,"CreatedAt":"2019-12-07T00:10:52","Actor":"mmitche","Number":"42757","RawContent":null,"Title":"[release/3.1] Switch to using 3.1100 SDK to build 3.1","State":"closed","Body":"Required for upstack components, so this is for consistency.","Url":"https://github.com/dotnet/corefx/pull/42757","RelatedDescription":"Closed or merged PR \"[release/3.1] Switch to using 3.1100 SDK to build 3.1\" (#42757)"},{"Id":"533687089","IsPullRequest":true,"CreatedAt":"2019-12-06T02:30:55","Actor":"dotnet-maestro[bot]","Number":"42760","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191202.2\r\n- **Date Produced**: 12/2/2019 9:49 PM\r\n- **Commit**: 53826cad1db670d13c424f1afe048b3aad92f7ba\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.1-servicing.19602.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.1-servicing.19602.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.1-servicing.19602.2\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42760","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42760)"},{"Id":"533685254","IsPullRequest":false,"CreatedAt":"2019-12-06T01:03:54","Actor":"chenyj796","Number":"42759","RawContent":null,"Title":"System.Threading.Channels.Channel<T>: After Complete with exception, the ReadAsync and ReadAllAsync method throws different exception","State":"open","Body":"I have some codes as below:\r\n```csharp\r\n\tclass Program\r\n\t{\r\n\t\tclass TestException : Exception\r\n\t\t{\r\n\t\t\tpublic TestException()\r\n\t\t\t\t: base(\"This is for test channel complete method with exception\")\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatic async Task Main(string[] args)\r\n\t\t{\r\n\t\t\tvar channel = Channel.CreateUnbounded<string>();\r\n\t\t\tchannel.Writer.Complete(new TestException());\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tawait channel.Reader.ReadAsync();\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"ReadAsync throws {ex.GetType().Name}: {ex.Message}\");\r\n\t\t\t}\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tawait foreach (var item in channel.Reader.ReadAllAsync())\r\n\t\t\t\t{\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"ReadAllAsync throws {ex.GetType().Name}: {ex.Message}\");\r\n\t\t\t}\r\n\r\n\t\t\tConsole.ReadLine();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n```\r\n\r\nAfter run it, I get the following output:\r\n```\r\nReadAsync throws ChannelClosedException: The channel has been closed.\r\nReadAllAsync throws TestException: This is for test channel complete method with exception\r\n```\r\n\r\nI hope the ReadAsync also throws TestException just as ReadAllAsync does.","Url":"https://github.com/dotnet/corefx/issues/42759","RelatedDescription":"Open issue \"System.Threading.Channels.Channel<T>: After Complete with exception, the ReadAsync and ReadAllAsync method throws different exception\" (#42759)"},{"Id":"533603733","IsPullRequest":true,"CreatedAt":"2019-12-05T22:44:11","Actor":"carlossanlop","Number":"42758","RawContent":null,"Title":"[release/3.1] .NET Core 3.1.1 Intellisense bump (English)","State":"closed","Body":"@mmitche \r\n\r\nCreated the package with these changes:\r\nhttps://github.com/dotnet/corefxlab/pull/2799\r\n\r\nPushed the package using these instructions:\r\nhttps://github.com/dotnet/core-eng/tree/master/Documentation/Tools/dotnet-core-push-oneoff-package\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42758","RelatedDescription":"Closed or merged PR \"[release/3.1] .NET Core 3.1.1 Intellisense bump (English)\" (#42758)"},{"Id":"532647597","IsPullRequest":false,"CreatedAt":"2019-12-04T19:43:41","Actor":"mshobohm","Number":"42755","RawContent":null,"Title":"FileNotFoundException with FileInfo.Length on Linux if binary filename contains a 0xDF-Byte ","State":"closed","Body":"Special characters in Linux filenames can confuse the FileInfo.Length property, resulting in FileNotFoundException as shown in the attached test case , see also readme.txt.\r\n\r\n[SSharpException.zip](https://github.com/dotnet/corefx/files/3921699/SSharpException.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/42755","RelatedDescription":"Closed issue \"FileNotFoundException with FileInfo.Length on Linux if binary filename contains a 0xDF-Byte \" (#42755)"},{"Id":"532322237","IsPullRequest":true,"CreatedAt":"2019-12-03T23:25:20","Actor":"mmitche","Number":"42754","RawContent":null,"Title":"[release/3.1] Stabilize package versions","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/42754","RelatedDescription":"Closed or merged PR \"[release/3.1] Stabilize package versions\" (#42754)"},{"Id":"529885496","IsPullRequest":true,"CreatedAt":"2019-12-02T19:42:53","Actor":"Gnbrkm41","Number":"42747","RawContent":null,"Title":"Add issue / pull request template explaining repo consolidation","State":"closed","Body":"Related: https://github.com/dotnet/corefx/issues/42733\r\n\r\nI left the PR template commented out, since I heard the repo will still be used for servicing fixes (so PRs would be opened here for legitimate reasons in future)\r\n\r\nNits welcome, I'm terrible when it comes to my English skills 😄. Also wanted to give a go at modifying README.md but I guess someone else could do it better, and repo descriptions... well, I don't have the perms!\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/42747","RelatedDescription":"Closed or merged PR \"Add issue / pull request template explaining repo consolidation\" (#42747)"},{"Id":"531353533","IsPullRequest":true,"CreatedAt":"2019-12-02T18:44:52","Actor":"dotnet-maestro[bot]","Number":"42753","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191128.1\r\n- **Date Produced**: 11/28/2019 5:05 PM\r\n- **Commit**: 1423ad5f3155362303ad9453c5604776040f9bbd\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-servicing.19578.1\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-servicing.19578.1\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-servicing.19578.1\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42753","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42753)"},{"Id":"531306663","IsPullRequest":false,"CreatedAt":"2019-12-02T18:04:26","Actor":"LeroyK","Number":"42752","RawContent":null,"Title":"Allow (de)serialization of abstract types with JsonSerializer when there is a JsonConverter for that type","State":"closed","Body":"# Issue Title\r\n\r\nAllow (de)serialization of abstract types with ``JsonSerializer`` when there is a ``JsonConverter`` for that type\r\n\r\n# General\r\n\r\nWhen you try to serialize or deserialize a type that is abstract, ``System.Text.Json.JsonSerializer`` currently throws a ``NotSupportedException`` with the message:\r\n\r\n> Deserialization of reference types without parameterless constructor is not supported.\r\n\r\nJsonSerializer should first check if the list of JsonConverters supports the abstract type and throw this exception only when there is no JsonConverter capable of converting the type.\r\n\r\nWe currently have a JsonConverter that supports polymorphism and because of this issue we cannot make the base type abstract.\r\n\r\n# Additional info\r\n.NET Core version: 3.0.1","Url":"https://github.com/dotnet/corefx/issues/42752","RelatedDescription":"Closed issue \"Allow (de)serialization of abstract types with JsonSerializer when there is a JsonConverter for that type\" (#42752)"},{"Id":"530466840","IsPullRequest":false,"CreatedAt":"2019-11-30T21:01:40","Actor":"kevin-montrose","Number":"42751","RawContent":null,"Title":"Calling Latin1 / iso-8859-1 Encoder Convert method iteratively produces different results than Encoding GetBytes on \"naughty\" string","State":"closed","Body":"Another bit of odd behavior with [`Encoder`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder?view=netcore-3.0), this time with the Latin1 encoding.\r\n\r\nFor the [\"naughty\" string ](https://github.com/minimaxir/big-list-of-naughty-strings)`@\"0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟\"` calling `Encoding.GetBytes(...)` produces a different result than iteratively calling `Encoder.Convert(...)`.  I have a [repository with a reproduction](https://github.com/kevin-montrose/Latin1Repro/blob/master/Latin1Repro/Program.cs#L20) (also shows off issue #42750 , but I suspect these are unrelated issues - I just happened to find them at the same time).\r\n\r\nFor that string, the issue seems to be that `Encoder` doesn't write the final byte during flushing.\r\n\r\nLatin1 is sufficiently weird of an encoding that this may be expected?\r\n\r\nA smaller reproduction:\r\n\r\n```csharp\r\nvar encoding = Encoding.GetEncoding(\"iso-8859-1\");\r\nvar text = @\"0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟\";\r\nvar destBufferSize = 2;\r\n\r\nvar encodingBytes = encoding.GetBytes(text);\r\nvar encoder = encoding.GetEncoder();\r\n\r\nvar chars = text.ToCharArray();\r\n\r\nvar sourceSpan = chars.AsSpan();\r\nvar destSpan = new byte[destBufferSize].AsSpan();\r\nvar encoderBytes = new List<byte>();\r\n\r\nvar completed = false;\r\n\r\n// write everything in sourceSpan\r\nwhile (!completed)\r\n{\r\n    var flush = sourceSpan.Length == 0;\r\n    encoder.Convert(sourceSpan, destSpan, flush, out var charsConsumed, out var bytesProduced, out completed);\r\n    encoderBytes.AddRange(destSpan.Slice(0, bytesProduced).ToArray());\r\n\r\n    sourceSpan = sourceSpan.Slice(charsConsumed);\r\n}\r\n\r\nvar eq = encodingBytes.SequenceEqual(encoderBytes);\r\n\r\nif (eq)\r\n{\r\n    return;\r\n}\r\n\r\nvar encodingAsStr = encoding.GetString(encodingBytes);\r\nvar encoderAsStr = encoding.GetString(encoderBytes.ToArray());\r\n\r\nConsole.WriteLine($@\"Encoding Convert failure for destBufferSize={destBufferSize} - {encodingBytes.Length}:\"\"{encodingAsStr}\"\" vs {encoderBytes.Count}:\"\"{encoderAsStr}\"\"\");\r\n```\r\n\r\nThis prints when it (probably) shouldn't.\r\n\r\nThis behavior is quite sensitive to the value of `destBufferSize`, happening for this particular string at values 2, 4, 5, 8, 10, 20, 40 ,& 41 (note that 42 is the size the destination buffer needs to be for a single `Convert` call to be sufficient).","Url":"https://github.com/dotnet/corefx/issues/42751","RelatedDescription":"Closed issue \"Calling Latin1 / iso-8859-1 Encoder Convert method iteratively produces different results than Encoding GetBytes on \"naughty\" string\" (#42751)"},{"Id":"530463719","IsPullRequest":false,"CreatedAt":"2019-11-30T20:58:46","Actor":"kevin-montrose","Number":"42750","RawContent":null,"Title":"UTF7 Encoder Convert method fails to make progress on \"naughty\" string","State":"closed","Body":"I noticed some odd behavior with UTF7's [`Encoder`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder?view=netcore-3.0), and failing to make progress on a [\"naughty\" string](https://github.com/minimaxir/big-list-of-naughty-strings).\r\n\r\nNamely, adapting the example code provided for [`Convert`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder.convert?view=netcore-3.0) will spin forever (failing to set `completed == true`) on `@\"00˙Ɩ$-\"`.\r\n\r\nUTF7 is sufficiently weird that maybe this is expected, and I just don't understand it?\r\n\r\nI have a [repository with a repro](https://github.com/kevin-montrose/Latin1Repro/blob/master/Latin1Repro/Program.cs#L19) (it also has some Latin1 stuff that I'll report in a separate issue, as it's probably unrelated).\r\n\r\nA smaller version of what's in the repo:\r\n\r\n```csharp\r\nvar destBufferSize = 16;\r\nvar encoding = System.Text.Encoding.UTF7;\r\nvar text = @\"00˙Ɩ$-\";\r\n\r\nvar encoder = encoding.GetEncoder();\r\n\r\nvar chars = text.ToCharArray();\r\n\r\nvar sourceSpan = chars.AsSpan();\r\nvar destSpan = new byte[destBufferSize].AsSpan();\r\nvar encoderBytes = new List<byte>();\r\n\r\nvar completed = false;\r\n\r\nwhile (!completed)\r\n{\r\n    var flush = sourceSpan.Length == 0;\r\n    encoder.Convert(sourceSpan, destSpan, flush, out var charsConsumed, out var bytesProduced, out completed);\r\n    encoderBytes.AddRange(destSpan.Slice(0, bytesProduced).ToArray());\r\n\r\n    sourceSpan = sourceSpan.Slice(charsConsumed);\r\n\r\n    if (charsConsumed == 0 && bytesProduced == 0 && flush)\r\n    {\r\n        Console.WriteLine($@\"Encoding Convert failure for destBufferSize={destBufferSize}, stopped making progress\");\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\nWill print, when it (probably) shouldn't.","Url":"https://github.com/dotnet/corefx/issues/42750","RelatedDescription":"Closed issue \"UTF7 Encoder Convert method fails to make progress on \"naughty\" string\" (#42750)"},{"Id":"530147717","IsPullRequest":false,"CreatedAt":"2019-11-29T04:14:37","Actor":"oliverjanik","Number":"42749","RawContent":null,"Title":"Include System.Linq.Async from https://github.com/dotnet/reactive into corefx","State":"open","Body":"I am very happy we have the new `IAsyncEnumerable` and some c# sugar to go with it in .net core 3.\r\n\r\nI think it would be even better if it had batteries included just like `IEnumerable`.\r\n\r\n👍 ","Url":"https://github.com/dotnet/corefx/issues/42749","RelatedDescription":"Open issue \"Include System.Linq.Async from https://github.com/dotnet/reactive into corefx\" (#42749)"},{"Id":"529960264","IsPullRequest":false,"CreatedAt":"2019-11-28T19:06:35","Actor":"sulemanb","Number":"42748","RawContent":null,"Title":"Error: GSSAPI operation failed with error - An unsupported mechanism was requested. NTLM authentication requires the GSSAPI plugin 'gss-ntlmssp'","State":"closed","Body":"Hi All,\r\n\r\nI am facing this error message when my api (dotnet core 3) tries to call another api endpoint.\r\nI am packaging my apis as docker images on the on-prem k8s docker enterprise cluster.\r\n\r\nMy docker file is as follows:\r\n\r\n`\r\n#FROM microsoft/dotnet:2.2-aspnetcore-runtime-alpine AS runtime\r\nFROM ddcdtr.bayer.cnb/microsoft/dotnet-core-aspnet:3.0 AS runtime\r\n\r\nWORKDIR /app\r\n# Only Metadata\r\n#EXPOSE 80\r\nENV PORT=8080\r\nENV ASPNETCORE_URLS=http://+:${PORT}\r\n\r\nENV HTTP_PROXY=${http_proxy}\r\nENV HTTPS_PROXY=${https_proxy}\r\n\r\n\r\nEXPOSE $PORT\r\n\r\n\r\n#ARG ASPNETCORE_ENVIRONMENT\r\n#ENV ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}\r\n# https://rehansaeed.com/securing-asp-net-core-in-docker/\r\nENV COMPlus_EnableDiagnostics=0\r\n\r\n#FROM microsoft/dotnet:2.2-sdk AS build\r\nFROM ddcdtr.bayer.cnb/microsoft/dotnet-core-sdk:3.0 AS build\r\n\r\nRUN apt-get update\r\n#RUN apt-get -y install gss-ntlmssp\r\nRUN apt-get update && apt-get install -y --no-install-recommends gss-ntlmssp\r\n\r\n\r\n\r\nWORKDIR /src\r\n#ARG NUGET_CONFIG\r\n#RUN echo $NUGET_CONFIG > NuGet.config\r\n\r\nCOPY Bardo.Data/Bardo.Data.csproj Bardo.Data/\r\nCOPY GBoxApi/GBoxApi.csproj GBoxApi/\r\nCOPY GBoxApi.IntegrationTests/GBoxApi.IntegrationTests.csproj GBoxApi.IntegrationTests/\r\nCOPY GBoxData/GBoxData.csproj GBoxData/\r\n\r\n\r\nRUN dotnet restore GBoxApi/GBoxApi.csproj\r\n\r\nCOPY . .\r\nWORKDIR /src/GBoxApi\r\n\r\nRUN dotnet build -c Release -o /app\r\n\r\nFROM build AS publish\r\n\r\nRUN dotnet publish -c Release -o /app\r\n\r\nFROM runtime AS final\r\n\r\n###\r\n\r\n# Create a group and user\r\n#RUN addgroup -S -g 1000 appgroup \\\r\n#&& adduser -S -u 1000 -G appgroup -s /bin/sh appuser\r\n\r\n###\r\n\r\n\r\nWORKDIR /app\r\n\r\nRUN mkdir -p /local/\r\n\r\nCOPY --from=publish /app .\r\n\r\nCOPY --from=build /src/GBoxApi/GBoxApi.xml .\r\n#COPY --from=build . .\r\n\r\n#RUN chown appuser:appgroup /local\r\n#RUN chown appuser:appgroup /app\r\n\r\n\r\n\r\nUSER root:root\r\n\r\n# Tell docker that all future commands should run as the appuser user\r\n#USER appuser\r\n\r\n\r\nENTRYPOINT [\"dotnet\", \"GBoxApi.dll\"]\r\n\r\n`\r\n\r\nbuild and deployment is all fine, but at runtime, my application throws this error after (log entry 4) at client.SendAsync(request);\r\n\r\n`\r\npublic async Task<Permission> GetPermissionsAsync(string identity, string context)\r\n        {\r\n            string log = \"/n Start: \";\r\n            try\r\n            {\r\n                Permission result = null;\r\n                var permissionUri = $\"{ _config[\"PermissionAPI:BaseUrl\"] }?digitalIdentity={identity}&apiContext={context}\";\r\n                log += \"1 \";\r\n                var request = new HttpRequestMessage(HttpMethod.Get, permissionUri);\r\n                log += \"2 \";\r\n                request.Headers.Add(\"Accept\", \"application/json\");\r\n                log += \"3 \";\r\n\r\n                var client = _clientFactory.CreateClient();\r\n                log += \"4 PermissionUri: \" + permissionUri;\r\n\r\n                var response = await client.SendAsync(request);\r\n\r\n`\r\n\r\ni have also tried other base images for (sdk, runtime) like dotnet-core-aspnet:3.0-alpine and dotnet-core-sdk:3.0-alpine, but still same problem.\r\n","Url":"https://github.com/dotnet/corefx/issues/42748","RelatedDescription":"Closed issue \"Error: GSSAPI operation failed with error - An unsupported mechanism was requested. NTLM authentication requires the GSSAPI plugin 'gss-ntlmssp'\" (#42748)"},{"Id":"529660113","IsPullRequest":false,"CreatedAt":"2019-11-28T11:33:13","Actor":"DaRosenberg","Number":"42746","RawContent":null,"Title":"InvariantCulture string comparison is inconsistent between Windows and macOS","State":"closed","Body":"Verified in .NET Core 3.0 on Windows 10 1909 and macOS 10.15.1.\r\n\r\nThis expression:\r\n\r\n```cs\r\nSystem.StringComparer.InvariantCulture.Compare(\".\", \"_\")\r\n```\r\n\r\nReturns `-1` on Windows, but `1` on macOS.\r\n\r\nSince the invariant culture is being used, expected result is for string comparison to behave the same.\r\n\r\nThis is a blocking issue for us, because we are building a cross-platform tool whose output goes into shared data storage, and contains sorted strings. Currently, Windows users and Mac users overwrite each others' data with changes in sorting.","Url":"https://github.com/dotnet/corefx/issues/42746","RelatedDescription":"Closed issue \"InvariantCulture string comparison is inconsistent between Windows and macOS\" (#42746)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"539381490","IsPullRequest":true,"CreatedAt":"2019-12-18T04:35:35","Actor":"dotnet-bot","Number":"40461","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40461","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#40461)"},{"Id":"539381427","IsPullRequest":true,"CreatedAt":"2019-12-18T01:59:58","Actor":"dotnet-bot","Number":"40460","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40460","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40460)"},{"Id":"539381554","IsPullRequest":true,"CreatedAt":"2019-12-18T01:59:46","Actor":"dotnet-bot","Number":"40462","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40462","RelatedDescription":"Closed or merged PR \"Merge master to features/static-lambdas\" (#40462)"},{"Id":"539389787","IsPullRequest":true,"CreatedAt":"2019-12-18T00:51:53","Actor":"RikkiGibson","Number":"40465","RawContent":null,"Title":"Give errors on implicit conversions to 'void'","State":"open","Body":"Closes #40405\r\n\r\nAny additional test case ideas would be appreciated--think unusual or new language features where we might accidentally let you convert something to 'void'.","Url":"https://github.com/dotnet/roslyn/pull/40465","RelatedDescription":"Open PR \"Give errors on implicit conversions to 'void'\" (#40465)"},{"Id":"539388214","IsPullRequest":false,"CreatedAt":"2019-12-18T00:46:26","Actor":"JoeRobich","Number":"40464","RawContent":null,"Title":"Add EditorConfigStorage to Options used by Analyzers and CodeFixes","State":"open","Body":"Created from comment: https://github.com/dotnet/roslyn/pull/38675/#discussion_r358426076\r\n\r\nSome DiagnosticAnalyzers retrieve an OptionSet only to pass it into Code Generation and Simplification services. These services then request values for Options which do not have EditorConfigStorage. To make these analyzers and code fixes useful without having a Workspace Options fallback, we need to add EditorConfigStorage so they can be configured in .editorconfig files.","Url":"https://github.com/dotnet/roslyn/issues/40464","RelatedDescription":"Open issue \"Add EditorConfigStorage to Options used by Analyzers and CodeFixes\" (#40464)"},{"Id":"539299043","IsPullRequest":false,"CreatedAt":"2019-12-18T00:35:38","Actor":"CyrusNajmabadi","Number":"40455","RawContent":null,"Title":"Hang when doing go-to-def","State":"closed","Body":"Uploading dump now.","Url":"https://github.com/dotnet/roslyn/issues/40455","RelatedDescription":"Closed issue \"Hang when doing go-to-def\" (#40455)"},{"Id":"539384700","IsPullRequest":false,"CreatedAt":"2019-12-18T00:32:38","Actor":"JoeRobich","Number":"40463","RawContent":null,"Title":"DiagnosticAnalyzers depend on receiving WorkspaceAnalyzerOptions","State":"open","Body":"For dotnet-format running CodeStyle diagnostic analyzers without IVTs is impeded because they all expect to be able to pull an OptionSet out of their AnalyzerOptions. This uses an extension method which only works when the AnalyzerOptions is an instance of WorkspaceAnalyzerOptions.\r\n\r\nNow that the compiler reads .editorconfig documents, Option values can be retrieved from AnalyzerConfigOptions if they are stored in the .editorconfig file.\r\n\r\nFixed by https://github.com/dotnet/roslyn/pull/38675 ","Url":"https://github.com/dotnet/roslyn/issues/40463","RelatedDescription":"Open issue \"DiagnosticAnalyzers depend on receiving WorkspaceAnalyzerOptions\" (#40463)"},{"Id":"539023774","IsPullRequest":true,"CreatedAt":"2019-12-18T00:17:33","Actor":"dotnet-bot","Number":"40446","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40446","RelatedDescription":"Closed or merged PR \"Merge master to features/static-lambdas\" (#40446)"},{"Id":"539023689","IsPullRequest":true,"CreatedAt":"2019-12-18T00:17:22","Actor":"dotnet-bot","Number":"40445","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40445","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#40445)"},{"Id":"539023631","IsPullRequest":true,"CreatedAt":"2019-12-18T00:17:00","Actor":"dotnet-bot","Number":"40444","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40444","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40444)"},{"Id":"539376183","IsPullRequest":true,"CreatedAt":"2019-12-18T00:03:06","Actor":"jcouv","Number":"40459","RawContent":null,"Title":"Treat 0- and 1-tuple symbols as tuples","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/36676\r\n","Url":"https://github.com/dotnet/roslyn/pull/40459","RelatedDescription":"Open PR \"Treat 0- and 1-tuple symbols as tuples\" (#40459)"},{"Id":"539296418","IsPullRequest":true,"CreatedAt":"2019-12-17T23:32:51","Actor":"CyrusNajmabadi","Number":"40454","RawContent":null,"Title":"Use the shared-pool helpers","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40454","RelatedDescription":"Closed or merged PR \"Use the shared-pool helpers\" (#40454)"},{"Id":"539359971","IsPullRequest":false,"CreatedAt":"2019-12-17T23:26:32","Actor":"LaraSQP","Number":"40458","RawContent":null,"Title":"Using the non-obsolete constructor of SuggestedActionsSource throws an exception","State":"closed","Body":"There is an error in the title. It should read **SuggestedActionSet** not _SuggestedActionsSource_. \r\n\r\nSo, turns out that using the **obsolete** constructor of **SuggestedActionSet** is the only way to avoid the following exception.\r\n\r\n> System.InvalidOperationException: Can only compare ISuggestedActionCategories defined with SuggestedActionCategoryRegistryServiceat Microsoft.VisualStudio.Language.Intellisense.Implementation.SuggestedActionCategoryComparer.Compare(String x, String y)at System.Linq.EnumerableSorter`2.CompareKeys(Int32 index1, Int32 index2)at System.Linq.EnumerableSorter`1.QuickSort(Int32[] map, Int32 left, Int32 right)at System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)at System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source)at Microsoft.VisualStudio.Language.Intellisense.Implementation.DefaultLightBulbPresenterDefaultIconUIElementProvider.GetUIElement(ISuggestedActionCategorySet itemToRender, ILightBulbSession context, UIElementType elementType)at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulb..ctor(LightBulbSession session, LightBulbPresenterStyleFactory presenterStyleFactory)at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbTagger.<Microsoft.VisualStudio.Text.Tagging.ITagger<Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbTag>.GetTags>b__10_1()at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbTag.get_Glyph()at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbGlyphFactory.GenerateGlyph(IWpfTextViewLine line, ISuggestionTag tag)at Microsoft.VisualStudio.Text.Editor.Implementation.CanvasAndGlyphFactory`1.GenerateGlyph(IWpfTextViewLine line, ITag tag)at Microsoft.VisualStudio.Text.Editor.Implementation.GlyphMarginVisualManager`1.AddGlyph(TGlyphTag tag, SnapshotSpan span)at Microsoft.VisualStudio.Text.Editor.Implementation.GlyphMargin`1.RefreshGlyphsOver(ITextViewLine textViewLine)at Microsoft.VisualStudio.Text.Editor.Implementation.GlyphMargin`1.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n\r\nThis is a breaking change.\r\n\r\nLet me know if you need more details.","Url":"https://github.com/dotnet/roslyn/issues/40458","RelatedDescription":"Closed issue \"Using the non-obsolete constructor of SuggestedActionsSource throws an exception\" (#40458)"},{"Id":"539359225","IsPullRequest":true,"CreatedAt":"2019-12-17T23:07:29","Actor":"gafter","Number":"40457","RawContent":null,"Title":"Determine whether a stackalloc expression is target-typed when it is bound (not later).","State":"open","Body":"This change documents and adopts the design guideline that a bound node shall capture all semantically relevant information from syntax.\r\nFixes #40197","Url":"https://github.com/dotnet/roslyn/pull/40457","RelatedDescription":"Open PR \"Determine whether a stackalloc expression is target-typed when it is bound (not later).\" (#40457)"},{"Id":"539399207","IsPullRequest":false,"CreatedAt":"2019-12-17T22:54:23","Actor":"cartermp","Number":"40466","RawContent":null,"Title":"Searching Solution Explorer crashes or freezes VS","State":"open","Body":"**Visual Studio Version**:\r\n\r\n16.5.0 Preview 2 [29616.133.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone https://github.com/dotnet/fsharp\r\n\r\n2. Run `Build.cmd` (might take a little while)\r\n\r\n3. Open solution in latest dogfood 16.5 build\r\n\r\nNow search for `language` in Solution Explorer.\r\n\r\n**Expected Behavior**:\r\n\r\nFilters Solution Explorer to have nodes with `language` in them.\r\n\r\n**Actual Behavior**:\r\n\r\nFilters, but then either immediately crashes or hangs for a while before crashing.\r\n\r\n**User Impact**:\r\n\r\nCannot use Solution Explorer search.","Url":"https://github.com/dotnet/roslyn/issues/40466","RelatedDescription":"Open issue \"Searching Solution Explorer crashes or freezes VS\" (#40466)"},{"Id":"539308281","IsPullRequest":true,"CreatedAt":"2019-12-17T21:02:36","Actor":"mavasani","Number":"40456","RawContent":null,"Title":"Merge feature branch features/editorconfig-generated-code into master","State":"open","Body":"Fixes #3705","Url":"https://github.com/dotnet/roslyn/pull/40456","RelatedDescription":"Open PR \"Merge feature branch features/editorconfig-generated-code into master\" (#40456)"},{"Id":"539242152","IsPullRequest":true,"CreatedAt":"2019-12-17T21:00:50","Actor":"333fred","Number":"40450","RawContent":null,"Title":"Pass a default value for the parameterList in SyntaxFactory.ParenthesizedLambdaExpression(SyntaxNode)","State":"closed","Body":"Fixes https://github.com/dotnet/roslyn/issues/40342. @dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/40450","RelatedDescription":"Closed or merged PR \"Pass a default value for the parameterList in SyntaxFactory.ParenthesizedLambdaExpression(SyntaxNode)\" (#40450)"},{"Id":"539287285","IsPullRequest":false,"CreatedAt":"2019-12-17T20:15:38","Actor":"VladimirReshetnikov","Number":"40453","RawContent":null,"Title":"Unused private class is emitted if no-closure lambda is converted to `Expression<...>`","State":"open","Body":"**Version Used**: \r\n\r\nFile SHA1: `46f61df92a8fb01930a0f8b529b0abb365ffd64b`\r\nFile Version: `3.400.19.56205`\r\nProduct Version: [`3.4.0-beta4-19562-05+ff930dec4565e2bc424ad3bf3e22ecb20542c87d`](https://github.com/dotnet/roslyn/commit/ff930dec4565e2bc424ad3bf3e22ecb20542c87d)\r\n\r\n`%ProgramFiles%\\dotnet\\dotnet.exe`\r\nFile SHA1: `755f1b51255447383e514cb0a2d0e2f43b4b27c9`\r\nFile Version: `3.100.19.56502`\r\nProduct Version: `3,100,19,56502 @Commit: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89`\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and disassemble\r\n```csharp\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\nstatic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        Expression<Func<int, int>> e = a => a;\r\n        Console.WriteLine(e);\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```il\r\n.class private abstract auto ansi sealed beforefieldinit Program\r\n       extends [System.Runtime]System.Object\r\n{\r\n  // *********** 𝗧𝗛𝗜𝗦 𝗖𝗟𝗔𝗦𝗦 𝗜𝗦 𝗡𝗢𝗧 𝗨𝗦𝗘𝗗 ***********\r\n  .class auto ansi serializable sealed nested private beforefieldinit '<>c'\r\n         extends [System.Runtime]System.Object\r\n  {\r\n    .custom instance void [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) \r\n    .field public static initonly class Program/'<>c' '<>9'\r\n    .method private hidebysig specialname rtspecialname static \r\n            void  .cctor() cil managed\r\n    {\r\n      // Code size       11 (0xb)\r\n      .maxstack  8\r\n      IL_0000:  newobj     instance void Program/'<>c'::.ctor()\r\n      IL_0005:  stsfld     class Program/'<>c' Program/'<>c'::'<>9'\r\n      IL_000a:  ret\r\n    } // end of method '<>c'::.cctor\r\n\r\n    .method public hidebysig specialname rtspecialname \r\n            instance void  .ctor() cil managed\r\n    {\r\n      // Code size       7 (0x7)\r\n      .maxstack  8\r\n      IL_0000:  ldarg.0\r\n      IL_0001:  call       instance void [System.Runtime]System.Object::.ctor()\r\n      IL_0006:  ret\r\n    } // end of method '<>c'::.ctor\r\n\r\n  } // end of class '<>c'\r\n\r\n  .method private hidebysig static void  Main() cil managed\r\n  {\r\n    .entrypoint\r\n    // Code size       43 (0x2b)\r\n    .maxstack  5\r\n    .locals init (class [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression V_0)\r\n    IL_0000:  ldtoken    [System.Runtime]System.Int32\r\n    IL_0005:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n    IL_000a:  ldstr      \"a\"\r\n    IL_000f:  call       class [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression [System.Linq.Expressions]System.Linq.Expressions.Expression::Parameter(class [System.Runtime]System.Type,\r\n                                                                                                                                                                           string)\r\n    IL_0014:  stloc.0\r\n    IL_0015:  ldloc.0\r\n    IL_0016:  ldc.i4.1\r\n    IL_0017:  newarr     [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression\r\n    IL_001c:  dup\r\n    IL_001d:  ldc.i4.0\r\n    IL_001e:  ldloc.0\r\n    IL_001f:  stelem.ref\r\n    IL_0020:  call       class [System.Linq.Expressions]System.Linq.Expressions.Expression`1<!!0> [System.Linq.Expressions]System.Linq.Expressions.Expression::Lambda<class [System.Runtime]System.Func`2<int32,int32>>(class [System.Linq.Expressions]System.Linq.Expressions.Expression,\r\n                                                                                                                                                                                                                        class [System.Linq.Expressions]System.Linq.Expressions.ParameterExpression[])\r\n    IL_0025:  call       void [System.Console]System.Console::WriteLine(object)\r\n    IL_002a:  ret\r\n  } // end of method Program::Main\r\n\r\n} // end of class Program\r\n```\r\n\r\nThis occurs both in Debug and Release builds.\r\n\r\n**Expected Behavior**:\r\nUnnecessary class is not emitted.\r\n","Url":"https://github.com/dotnet/roslyn/issues/40453","RelatedDescription":"Open issue \"Unused private class is emitted if no-closure lambda is converted to `Expression<...>`\" (#40453)"},{"Id":"539277333","IsPullRequest":false,"CreatedAt":"2019-12-17T19:53:54","Actor":"Kaktusbot","Number":"40452","RawContent":null,"Title":"await Task<T?> returns T instead of T?","State":"open","Body":"**Version Used**: \r\nVS2019 Version 16.4.2\r\n.NET Core 3.1 Project\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nstatic async Task Main()\r\n{\r\n    object? thisIsNull = await Task.Run(GetNull);\r\n    Console.WriteLine(thisIsNull);\r\n}\r\n\r\nstatic object? GetNull() => null;\r\n```\r\n\r\n**Actual Behavior**:\r\nVS popup tip on `Console.WriteLine(thisIsNull)` says that \"`thisIsNull` is not null here\".\r\nChange `Task.Run(GetNull)` to `Task.Run<object?>(GetNull)` and tip says \"may be null here\" but `<object?>` becomes grayed out and VS suggests to remove it.\r\n\r\n**Expected Behavior**:\r\nI'm not sure what is wrong here, but either `<object?>` should not be grayed out or `await Task<T?>` should return `T?` without explicit generic method type specification.\r\n","Url":"https://github.com/dotnet/roslyn/issues/40452","RelatedDescription":"Open issue \"await Task<T?> returns T instead of T?\" (#40452)"},{"Id":"539252234","IsPullRequest":false,"CreatedAt":"2019-12-17T19:00:30","Actor":"vsfeedback","Number":"40451","RawContent":null,"Title":"Visual Studio crashes when adding a parameter to a function","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/854342/visual-studio-crashes-when-adding-a-parameter-to-a.html)._\n\n---\n[regression] [worked-in:16.4]\r\nI have a method with two overloads:\n\n```\nPrivate Function MonthToActualYearMonth(ByVal theMonth As MyEnumType) As Integer\nPublic Shared Function MonthToActualYearMonth(ByVal theYear As Integer, ByVal theMonth As MyEnumType) As Integer\n```\nAnd a line of code calling the wrong method:\n`Dim aBla = MonthToActualYearMonth(myMonth)`\n\nI get a squigly red line underneath the method call with the following error (which is correct):\n`Cannot refer to an instance member of a class from within a shared method or shared member initializer without an explicit instance of the class.`\n\nI want to add the missing parameter to use the shared method instead of the private function. I add my cursor after the first parentheses and start typing to add the missing parameter. When I finally type the \",\" Visual Studio crashes.\n\nIn the Event Viewer in Windows I find the following back:\n\n```\nApplication: devenv.exe\nFramework Version: v4.0.30319\nDescription: The application requested process termination through System.Environment.FailFast(string message).\nMessage: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\n   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.Filter(IList`1 items, IEnumerable`1 parameterNames, Nullable`1 selectedItem)\n   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.CreateSignatureHelpItems(IList`1 items, TextSpan applicableSpan, SignatureHelpState state, Nullable`1 selectedItem)\n   at Microsoft.CodeAnalysis.VisualBasic.SignatureHelp.InvocationExpressionSignatureHelpProvider.VB$StateMachine_16_GetItemsWorkerAsync.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.<GetItemsAsync>d__16.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.<ComputeItemsAsync>d__9.MoveNext()\nStack:\n   at System.Environment.FailFast(System.String, System.Exception)\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<ComputeItemsAsync>d__9.MoveNext()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<ComputeItemsAsync>d__9.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<ComputeItemsAsync>d__9, Microsoft.CodeAnalysis.EditorFeatures, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ComputeItemsAsync>d__9 ByRef)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider>, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, Microsoft.CodeAnalysis.Document, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<ComputeModelInBackgroundAsync>d__4.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<ComputeModelInBackgroundAsync>d__4, Microsoft.CodeAnalysis.EditorFeatures, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ComputeModelInBackgroundAsync>d__4 ByRef)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeModelInBackgroundAsync(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider>, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+<>c__DisplayClass3_0.<ComputeModel>b__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1+<>c__DisplayClass17_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<ChainTaskAndNotifyControllerWhenFinished>b__0(System.Threading.Tasks.Task`1<System.__Canon>)\n   at Roslyn.Utilities.TaskExtensions+<>c__DisplayClass15_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<SafeContinueWithFromAsync>b__0(System.Threading.Tasks.Task)\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 12/13/2019, 02:00 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/40451","RelatedDescription":"Open issue \"Visual Studio crashes when adding a parameter to a function\" (#40451)"},{"Id":"539218837","IsPullRequest":false,"CreatedAt":"2019-12-17T17:49:41","Actor":"vsfeedback","Number":"40449","RawContent":null,"Title":"`Else` not offered in VB Completion after `Exit For`","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/847080/vbnet-else-randomly-missing-in-intellisense.html)._\n\n---\n[regression]\r\nOver the last few weeks, the ELSE part of an IF ELSE statement has gone missing in intellisense.\nIf adding ELSE to an existing logic check, it is not present.  When creating a new IF ELSE statement it is there as normal.\n\nPlease see video.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 12/9/2019, 03:01 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/40449","RelatedDescription":"Open issue \"`Else` not offered in VB Completion after `Exit For`\" (#40449)"},{"Id":"539131516","IsPullRequest":true,"CreatedAt":"2019-12-17T15:17:03","Actor":"Evangelink","Number":"40448","RawContent":null,"Title":"Add code fix for CS0513","State":"open","Body":"Make enclosing class abstract when member does not have body.\r\n\r\nFix #31833","Url":"https://github.com/dotnet/roslyn/pull/40448","RelatedDescription":"Open PR \"Add code fix for CS0513\" (#40448)"},{"Id":"539055565","IsPullRequest":true,"CreatedAt":"2019-12-17T14:44:15","Actor":"dotnet-maestro[bot]","Number":"40447","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191216.4\r\n- **Date Produced**: 12/16/2019 9:51 PM\r\n- **Commit**: 4736ddca60a4040447b450437cf3767c9045edc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19616.4\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/40447","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40447)"},{"Id":"539009584","IsPullRequest":false,"CreatedAt":"2019-12-17T11:32:47","Actor":"TessenR","Number":"40443","RawContent":null,"Title":"Roslyn fails to detect null values returned as non-nullable via switch expressions","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nranch master (14 Dec 2019)\r\nLatest commit e8a539c by Mikayla Hutchinson:\r\nMove breakpoint resolver down into Features (#28321)\r\n\r\n* Use embedded resources for ProximityExpressionsGetter tests\r\n\r\n* Move breakpoint resolver down into Features\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nusing System.Collections.Generic;\r\npublic class C {\r\n    public static void Main() {\r\n        var map = new Dictionary<string, string>();\r\n        map.GetOrAdd(\"\", _ => \"\" switch { _ => null });\r\n        map[\"\"].ToString(); // crash, no warnings\r\n    }\r\n}\r\n\r\ninternal static class Extensions\r\n{\r\n    public static V GetOrAdd<K, V>(this Dictionary<K, V> dictionary,\r\n                                   K key,\r\n                                   System.Func<K, V> function)\r\n        where K: notnull\r\n    {\r\n        if (dictionary.TryGetValue(key, out var value))\r\n            return value;\r\n            \r\n        value = function(key);\r\n        dictionary[key]  = value;\r\n        return value;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n```\r\nWarning [CS8603]: Possible null reference return.\r\n```\r\nreported for `\"\" switch { _ => null }`\r\n\r\n**Actual Behavior**:\r\nNo warnings. The program crashes at runtime with a `NullReferenceException`","Url":"https://github.com/dotnet/roslyn/issues/40443","RelatedDescription":"Open issue \"Roslyn fails to detect null values returned as non-nullable via switch expressions\" (#40443)"},{"Id":"538967165","IsPullRequest":false,"CreatedAt":"2019-12-17T10:13:46","Actor":"GrahamTheCoder","Number":"40442","RawContent":null,"Title":"Simplifier.ReduceAsync changes function evaluation behaviour","State":"open","Body":"**Version Used**: \r\nRepros on both 2.10.0 and 3.5.0-beta1-final of Microsoft.CodeAnalysis.* \r\n\r\n**Steps to Reproduce**:\r\n1. Clone https://github.com/icsharpcode/CodeConverter\r\n2. Run Tests project (see file [VbSimplificationServiceBugRepros](https://github.com/icsharpcode/CodeConverter/blob/roslyn-simplifier-issues/Tests/VbSimplificationServiceBugRepros.cs))\r\n3. Observe test result - the parentheses are removed (run the resulting code and access the relevant property to see the runtime exception)\r\n\r\n**Expected Behavior**:\r\nParentheses should not be removed by the simplifier - they evaluate the function producing a string\r\n\r\n**Actual Behavior**:\r\nParentheses are removed by the simplifier. The resulting code does not evaluate the function. It passes the function as a delegate and therefore behaves differently (throwing at runtime when trying to cast delegate to string).\r\n\r\n**Other Details**:\r\n* The test asserts there are no warnings or errors in the input or the output. The issue here is a runtime behaviour change.\r\n* I have repros for other issues in ExpandAsync and ReduceAsync for C# and VB that I'm struggling to workaround effectively. I'll see if I can write them as tests directly in the roslyn repo, but if not I'll open them as separate issues with a similar style to this.\r\n* Thanks for all your work on Roslyn, it's great!","Url":"https://github.com/dotnet/roslyn/issues/40442","RelatedDescription":"Open issue \"Simplifier.ReduceAsync changes function evaluation behaviour\" (#40442)"},{"Id":"538903844","IsPullRequest":true,"CreatedAt":"2019-12-17T08:07:26","Actor":"allisonchou","Number":"40441","RawContent":null,"Title":"Fix for introduce local variable bugs","State":"open","Body":"Fixes #40374 and fixes #40381 and adds applicable tests.","Url":"https://github.com/dotnet/roslyn/pull/40441","RelatedDescription":"Open PR \"Fix for introduce local variable bugs\" (#40441)"},{"Id":"538869532","IsPullRequest":false,"CreatedAt":"2019-12-17T06:41:03","Actor":"vsfeedback","Number":"40440","RawContent":null,"Title":"System.InvalidOperationException: Unexpected value &apos; at  at Microsoft.CodeAnalysis.TaggedTextExtensions.ToClassificationTypeName(String taggedTextTag)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/847963/systeminvalidoperationexception-unexpected-value-a.html)._\n\n---\nThe problem happened in  Microsoft.CodeAnalysis.TaggedTextExtensions.ToClassificationTypeName(String taggedTextTag) \nat the time I inserted a certain library assembly name on my code \nit has triggered a yellow banner below top menu ribbon with this error\n\nhere is the log\n\n<entry>\n    <record>1992</record>\n    <time>2019/12/05 18:22:14.016</time>\n    <type>Error</type>\n    <source>Editor or Editor Extension</source>\n    <description>System.InvalidOperationException: Unexpected value 'ContainerStart' of type 'System.String'&#x000D;&#x000A;   at Microsoft.CodeAnalysis.TaggedTextExtensions.ToClassificationTypeName(String taggedTextTag)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.ClassificationExtensions.ToClassificationSpans(IEnumerable`1 parts, ITextSnapshot textSnapshot, ClassificationTypeMap typeMap)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Presentation.SignatureHelpClassifier.GetClassificationSpans(SnapshotSpan span)&#x000D;&#x000A;   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierTagger.&lt;GetTags&gt;d__5.MoveNext()&#x000D;&#x000A;   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.&lt;GetTagsForBuffer&gt;d__47.MoveNext()</description>\n  </entry>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 12/9/2019, 02:26 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/40440","RelatedDescription":"Open issue \"System.InvalidOperationException: Unexpected value &apos; at  at Microsoft.CodeAnalysis.TaggedTextExtensions.ToClassificationTypeName(String taggedTextTag)\" (#40440)"},{"Id":"538863875","IsPullRequest":false,"CreatedAt":"2019-12-17T06:24:14","Actor":"sharwell","Number":"40439","RawContent":null,"Title":"'Use Range' code fix does not work with single-argument 'Substring'","State":"open","Body":"**Version Used**: fb028b7c198c2f726067bb8627cb014f1154a541\r\n\r\n**Steps to Reproduce**:\r\n\r\nApply the code fix for IDE0057 (Use range) on the following code:\r\n\r\n```\r\nstring text = \"...\";\r\nstring subText = text.Substring(1);\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\nstring text = \"...\";\r\nstring subText = text[1..];\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nNo diagnostic is reported, so the code fix cannot be used.\r\n","Url":"https://github.com/dotnet/roslyn/issues/40439","RelatedDescription":"Open issue \"'Use Range' code fix does not work with single-argument 'Substring'\" (#40439)"},{"Id":"538863384","IsPullRequest":false,"CreatedAt":"2019-12-17T06:22:33","Actor":"sharwell","Number":"40438","RawContent":null,"Title":"'Use Range' code fix does not fully simplify 'Substring'","State":"open","Body":"**Version Used**: fb028b7c198c2f726067bb8627cb014f1154a541\r\n\r\n**Steps to Reproduce**:\r\n\r\nApply the code fix for IDE0057 (Use range) on the following code:\r\n\r\n```\r\nstring text = \"...\";\r\nstring subText = text.Substring(0, text.Length - 1);\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\nstring text = \"...\";\r\nstring subText = text[..^1];\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nstring text = \"...\";\r\nstring subText = text[0..^1];\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/40438","RelatedDescription":"Open issue \"'Use Range' code fix does not fully simplify 'Substring'\" (#40438)"},{"Id":"538860402","IsPullRequest":true,"CreatedAt":"2019-12-17T06:13:07","Actor":"CyrusNajmabadi","Number":"40437","RawContent":null,"Title":"WIP: Tweak lookup to produce less LookupResult churn. ","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40437","RelatedDescription":"Open PR \"WIP: Tweak lookup to produce less LookupResult churn. \" (#40437)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"538512534","IsPullRequest":false,"CreatedAt":"2019-12-17T22:40:50","Actor":"djee-ms","Number":"7917","RawContent":null,"Title":"Build error for reverse P/Invoke with ref struct parameter (ref vs. in)","State":"closed","Body":"In our project we have a reverse P/Invoke call for native to managed callback using a delegate defined as:\r\n```cs\r\nref struct I420AVideoFrame { [...] }\r\n\r\n[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]\r\npublic delegate void I420AVideoFrameUnmanagedCallback(IntPtr userData, ref I420AVideoFrame frame);\r\n```\r\n\r\nOn the C++ side, the signature is something like:\r\n```cpp\r\nvoid I420AVideoFrameCallback(void* user_data, const I420AVideoFrame& frame);\r\n```\r\n\r\nOn the managed C# side we register a static trampoline function that C++ will reverse P/Invoke, and which is defined as:\r\n```cs\r\n[MonoPInvokeCallback(typeof(I420AVideoFrameUnmanagedCallback))]\r\npublic static void I420AFrameCallback(IntPtr userData, ref I420AVideoFrame frame)\r\n{\r\n    [...]\r\n}\r\n```\r\n\r\nThis all works well as is, which is actually the workaround to the issue. Originally since the C++ signature uses `const&` (we just want to pass the struct by pointer/reference from C++ to C# as a view over read-only memory) we used `in` instead of `ref` for the `I420AVideoFrame` parameter, but this yields an error during the .NET Native build (and works with JIT):\r\n```\r\nerror : ILT0021: Could not resolve method 'EETypeRva:0x--------'\r\n```\r\n\r\nThis seems to be the error defined in `RuntimeTypeHandle.cs`, which is worryingly marked as \"last resort\" in comment, although I would expect there should be some metadata available for that method:\r\nhttps://github.com/dotnet/corert/blob/e2c4bc3d7889f951c231d7f131d6a7e20c034fb6/src/System.Private.CoreLib/src/System/RuntimeTypeHandle.cs#L134\r\n\r\nNote that we had to manually define the `MonoPInvokeCallback` attribute which seems to be required for working with Unity's IL2CPP, so we copied a definition from the Mono project:\r\n```cs\r\n[AttributeUsage(AttributeTargets.Method)]\r\nsealed class MonoPInvokeCallbackAttribute : Attribute\r\n{\r\n    public MonoPInvokeCallbackAttribute(Type t) { }\r\n}\r\n```\r\n\r\nIs there any reason `ref` works and not `in` in this context? I assume that by using `ref` we expose ourselves to bugs where the C# code inadvertently modifying the struct would produce some side effect on the C++ side which the C++ compiler did not intend to see (since the parameter is `const&` there), which could lead to bugs, so the current workaround with `ref` is not ideal.","Url":"https://github.com/dotnet/corert/issues/7917","RelatedDescription":"Closed issue \"Build error for reverse P/Invoke with ref struct parameter (ref vs. in)\" (#7917)"},{"Id":"538560233","IsPullRequest":false,"CreatedAt":"2019-12-16T18:08:01","Actor":"lifecoder-phoenix","Number":"7919","RawContent":null,"Title":"Native dll with async","State":"closed","Body":"Hello,\r\nI'm actually wondering how dll compiled to native would behave if I expose an async task and call it from a C++ program. Is that supported or would it run synchronously?(or start a different thread?)\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/corert/issues/7919","RelatedDescription":"Closed issue \"Native dll with async\" (#7919)"},{"Id":"538389685","IsPullRequest":true,"CreatedAt":"2019-12-16T14:51:33","Actor":"MichalStrehovsky","Number":"7916","RawContent":null,"Title":"Allow shimming Assembly.GetCallingAssembly","State":"closed","Body":"For EXE-style projects this will make it look like we have a super advanced inliner that inlined the entire app. Not sure what to return when compiling as a library.\r\n\r\nHit in WPF that uses this API for dumb reasons (it goes to assembly Location next and then goes sniffing on the file system).","Url":"https://github.com/dotnet/corert/pull/7916","RelatedDescription":"Closed or merged PR \"Allow shimming Assembly.GetCallingAssembly\" (#7916)"},{"Id":"537983044","IsPullRequest":true,"CreatedAt":"2019-12-15T15:24:55","Actor":"Suchiman","Number":"7915","RawContent":null,"Title":"Rd xml improvements","State":"closed","Body":"- Produce actionable error messages if the provided Rd.xml is incorrect.\r\n- Allow specifying a particular overload of a method to root or root all methods with that name\r\n    - The downside is, that it's not possible to target a method with zero arguments.\r\n    - If no method matches, an error is produced. Previously it would throw a `NullReferenceException`\r\n\r\nWas looking around here https://docs.microsoft.com/en-us/dotnet/framework/net-native/parameter-element-net-native for inspiration but am open to suggestions.","Url":"https://github.com/dotnet/corert/pull/7915","RelatedDescription":"Closed or merged PR \"Rd xml improvements\" (#7915)"},{"Id":"537956647","IsPullRequest":true,"CreatedAt":"2019-12-14T19:45:40","Actor":"DardoTheMaster","Number":"7914","RawContent":null,"Title":"Native Shared Library : Samples","State":"open","Body":"This is just a practical example of a native shared library.\r\n\r\nPlease let me know if there's something i need to edit(My english isn't that good, so please if there are any points on the readme where my explanation isn't that clear,point them out)\r\n\r\n","Url":"https://github.com/dotnet/corert/pull/7914","RelatedDescription":"Open PR \"Native Shared Library : Samples\" (#7914)"},{"Id":"537924433","IsPullRequest":true,"CreatedAt":"2019-12-14T16:16:24","Actor":"jkotas","Number":"7913","RawContent":null,"Title":"Update CoreLib from dotnet/runtime","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7913","RelatedDescription":"Closed or merged PR \"Update CoreLib from dotnet/runtime\" (#7913)"},{"Id":"537922700","IsPullRequest":true,"CreatedAt":"2019-12-14T16:16:15","Actor":"jkotas","Number":"7912","RawContent":null,"Title":"Strip ICU references when globalization is removed","State":"closed","Body":"Fixes #7888","Url":"https://github.com/dotnet/corert/pull/7912","RelatedDescription":"Closed or merged PR \"Strip ICU references when globalization is removed\" (#7912)"},{"Id":"537717932","IsPullRequest":true,"CreatedAt":"2019-12-14T10:26:41","Actor":"MichalStrehovsky","Number":"7911","RawContent":null,"Title":"Port diff from dotnet/runtime#777","State":"closed","Body":"dotnet/runtime#777 and #7906 did not check in identical diffs.\r\n\r\nMaking sure the change to HashtableOfPointer doesn't get lost since that file doesn't exist in the runtime repo.","Url":"https://github.com/dotnet/corert/pull/7911","RelatedDescription":"Closed or merged PR \"Port diff from dotnet/runtime#777\" (#7911)"},{"Id":"537142643","IsPullRequest":true,"CreatedAt":"2019-12-12T22:50:13","Actor":"jkotas","Number":"7909","RawContent":null,"Title":"Workaround use of internal reflection in Process.Start","State":"closed","Body":"- Add SerializationGuard removed feature and enabled it by default.\r\n- Removed CurlHandler removed feature. CurlHandler was removed from the framework and it is no longer needed.","Url":"https://github.com/dotnet/corert/pull/7909","RelatedDescription":"Closed or merged PR \"Workaround use of internal reflection in Process.Start\" (#7909)"},{"Id":"537232543","IsPullRequest":false,"CreatedAt":"2019-12-12T22:00:42","Actor":"yowl","Number":"7910","RawContent":null,"Title":"Wasm: support garbage collection","State":"closed","Body":"Currently attempting to `GC.Collect` results in an assert as there are no Modules in https://github.com/dotnet/corert/blob/d2f36cf85e8c3edaf462625df5c56396d7b860a0/src/Native/Runtime/RuntimeInstance.cpp#L160.  Creating this issue to track progress and somewhere I can bug the people that know.","Url":"https://github.com/dotnet/corert/issues/7910","RelatedDescription":"Closed issue \"Wasm: support garbage collection\" (#7910)"},{"Id":"529428997","IsPullRequest":true,"CreatedAt":"2019-12-12T18:35:57","Actor":"yowl","Number":"7891","RawContent":null,"Title":"Wasm: fix unsigned extend to uint64 and add test","State":"closed","Body":"This widening cast was failing, particular causing a problem in https://github.com/dotnet/corert/blob/8d81b96c2561fe00a0ac95a40e2dd19642971a5a/src/System.Private.CoreLib/shared/System/Number.DiyFp.cs#L77-L103.  \r\n\r\nAdded a test that failed previously and zext instead of sext for unsigned widening.  There is a parameter that I thought to use, but it is passed false here: https://github.com/dotnet/corert/blob/master/src/Common/src/TypeSystem/IL/ILImporter.cs#L574-L578.  Maybe that is wrong?\r\n\r\nAlso I updated emscripten, this wasn't necessary to fix this, but I got sidetracked with a build error and upgraded.  Its not a bad idea anyway as they changed the build tooling to allow for either the fastcomp or llvm backend and we will need to upgrade at some point.  If you just `git pull` emscripten you will hit a problem with the current scripts due to these changes.  Changed a bit of documentation to fit today's reality.","Url":"https://github.com/dotnet/corert/pull/7891","RelatedDescription":"Closed or merged PR \"Wasm: fix unsigned extend to uint64 and add test\" (#7891)"},{"Id":"535534600","IsPullRequest":true,"CreatedAt":"2019-12-12T18:34:40","Actor":"yyjdelete","Number":"7908","RawContent":null,"Title":"Fix an spell error in ILVerify","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7908","RelatedDescription":"Closed or merged PR \"Fix an spell error in ILVerify\" (#7908)"},{"Id":"534342316","IsPullRequest":true,"CreatedAt":"2019-12-11T21:50:45","Actor":"davidwrighton","Number":"7906","RawContent":null,"Title":"Fix LockFreeReaderHashtable","State":"closed","Body":"- Communication of the presence of an expanding hashtable was very close to not safe\r\n  - Changed to aggressively use Interlocked operations instead\r\n- If there were 3 threads, 1 which was expanding (thread A), 1 which failed an insert and was waiting on an expand(thread B), and a third which did a lookup for the item in process of insert on thread B, the table would find the item in process of insertion\r\n  - Fixed by moving to a scheme where insertion didn't actually write in the value until it was confirmed that that spot was the right place to insert, and the value would be preserved into an expansion\r\n  - In order to acquire a sentinel for scenarios without requiring the explicit definition of one, the first item inserted is used as the sentinel. It simply exists outside of the hashtable in a side variable","Url":"https://github.com/dotnet/corert/pull/7906","RelatedDescription":"Closed or merged PR \"Fix LockFreeReaderHashtable\" (#7906)"},{"Id":"534488631","IsPullRequest":false,"CreatedAt":"2019-12-08T04:00:31","Actor":"s-m-k","Number":"7907","RawContent":null,"Title":"[Linux] crash upon generating debug symbols","State":"open","Body":"**Software version:**\r\nILCompiler 1.0.0-alpha-28407-01\r\n.NET Core 3.1\r\nUbuntu 18.04 x64 (native/VirtualBox)\r\n\r\n**Symptoms:**\r\nSegmentation fault upon generating debug symbols.\r\n```\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+GenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+NonGenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport.GetThunkThatDereferencesThisPointerAndTailCallsTarget(native int)...\r\nSegmentation fault (core dumped)\r\n```\r\n\r\ngdb output:\r\n```\r\nThread 1 \"ilc\" received signal SIGSEGV, Segmentation fault.\r\nDwarfMemberFunctionIdTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:559\r\n559     in /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp\r\n(gdb) where\r\n#0  DwarfMemberFunctionIdTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:559\r\n#1  0x00007fff5e289a76 in DwarfClassTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:375\r\n#2  0x00007fff5e288c2b in DwarfInfo::Dump (this=0x83d2870, TypeBuilder=<optimized out>, Streamer=0x1a0dd30, TypeSection=0x18ffb18, StrSection=0x1901ee0)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:34\r\n#3  0x00007fff5e289ac5 in DwarfClassTypeInfo::Dump (this=0x83d2870, TypeBuilder=0x1a0cb00, Streamer=0x1a0dd30, TypeSection=0x18ffb18, StrSection=0x1901ee0)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:384\r\n#4  0x00007fff5e28a287 in UserDefinedDwarfTypesBuilder::EmitTypeInformation (this=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:641\r\n#5  0x00007fff5e28fc38 in DwarfGen::Finish (this=0x1a2bf10) at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfGen.cpp:1038\r\n```\r\n\r\n**Expected behavior:**\r\nThe compiler succeeds and the executable with proper debug symbols is generated.\r\n\r\n**Workaround:**\r\nSpecify `<DebugSymbols>false</DebugSymbols>` and `<DebugType>none</DebugType>` in your project configuration file to avoid executing the problematic code path, e.g.:\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <DebugSymbols>false</DebugSymbols>\r\n    <DebugType>none</DebugType>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n  </PropertyGroup>\r\n```","Url":"https://github.com/dotnet/corert/issues/7907","RelatedDescription":"Open issue \"[Linux] crash upon generating debug symbols\" (#7907)"},{"Id":"534281516","IsPullRequest":true,"CreatedAt":"2019-12-07T00:41:43","Actor":"LTruijens","Number":"7905","RawContent":null,"Title":"Option added to ignore specific errors","State":"closed","Body":"- Option added to ignore specific errors\r\n\r\nThis option can be useful when verifying large sets of dlls which contain lots of the same errors (like InitOnly https://github.com/dotnet/roslyn/issues/22485).\r\n\r\n- App returns error code when verification errors exist\r\n\r\nUseful in automation scenarios\r\n\r\n- Print error code\r\n\r\nUseful to know the error code if you want to ignore it.\r\n\r\n- Continue verification when printing method fails\r\n\r\nOtherwise it will stop any further output of the app\r\n","Url":"https://github.com/dotnet/corert/pull/7905","RelatedDescription":"Closed or merged PR \"Option added to ignore specific errors\" (#7905)"},{"Id":"533755092","IsPullRequest":true,"CreatedAt":"2019-12-06T20:14:57","Actor":"jkotas","Number":"7903","RawContent":null,"Title":"Delete some unused code, add TODO","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7903","RelatedDescription":"Closed or merged PR \"Delete some unused code, add TODO\" (#7903)"},{"Id":"534163948","IsPullRequest":false,"CreatedAt":"2019-12-06T17:28:59","Actor":"SasukeK93","Number":"7904","RawContent":null,"Title":"Not Working for WPF","State":"open","Body":"CoreRT Native Build for C# WPF Aplication .NetCore 3.0 isn't propertly working:\r\n\r\ndotnet new wpf\r\ndotnet new nuget\r\n// Add the nuget References to nuget.config\r\ndotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-* \r\ndotnet publish -r win-x64 -c release\r\n\r\nBuild Output:\r\n\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 5.89 min for C:\\Users\\SasukeK93\\wpf\\wpf.csproj.\r\n  wpf -> C:\\Users\\SasukeK93\\wpf\\bin\\release\\netcoreapp3.0\\win-x64\\wpf.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Windows.Threading.DispatcherObject, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 [C:\\Users\\SasukeK93\\wpf\\wpf.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Windows.Threading.DispatcherObject, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaType.InitializeBaseType()\r\n     at Internal.TypeSystem.TypeDesc.get_IsDelegate()\r\n     at ILCompiler.CompilerTypeSystemContext.GetAllMethods(TypeDesc type)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindMatchingVirtualMethodOnTypeByNameAndSig(MethodDesc targetMethod, DefType currentType, Boolean reverseMethodSearch, Func`3 nameSigMatchMethodIsValidCandidate)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindBaseUnificationGroup(MetadataType currentType, UnificationGroup unificationGroup)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindBaseUnificationGroup(MetadataType currentType, UnificationGroup unificationGroup)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindVirtualFunctionTargetMethodOnObjectType(MethodDesc targetMethod, MetadataType objectType)\r\n     at Internal.TypeSystem.Ecma.EcmaType.GetFinalizer()\r\n     at Internal.TypeSystem.Ecma.EcmaType.ComputeTypeFlags(TypeFlags mask)\r\n     at Internal.TypeSystem.TypeDesc.InitializeTypeFlags(TypeFlags mask)\r\n     at Internal.TypeSystem.TypeDesc.get_HasFinalizer()\r\n     at Internal.TypeSystem.MethodDesc.get_IsFinalizer()\r\n     at ILCompiler.MetadataManager.IsMethodSupportedInReflectionInvoke(MethodDesc method)\r\n     at ILCompiler.MetadataManager.GetDependenciesDueToReflectability(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.CodeBasedDependencyAlgorithm.AddDependenciesDueToMethodCodePresence(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.ScannedMethodNode.InitializeDependencies(NodeFactory factory, IEnumerable`1 dependencies)\r\n     at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode)\r\n     at ILCompiler.ILScanner.CompileSingleThreaded(List`1 methodsToCompile)\r\n     at ILCompiler.ILScanner.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan()\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\SasukeK93\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28406-02\\build\\Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"C:\\Users\\SasukeK93\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28406-02\\tools\\ilc\" @\"obj\\release\\netcoreapp3.0\\win-x64\\native\\wpf.ilc.rsp\"\" exited with code 1. [C:\\Users\\SasukeK93\\wpf\\wpf.csproj]","Url":"https://github.com/dotnet/corert/issues/7904","RelatedDescription":"Open issue \"Not Working for WPF\" (#7904)"},{"Id":"531504052","IsPullRequest":true,"CreatedAt":"2019-12-03T16:35:41","Actor":"am11","Number":"7899","RawContent":null,"Title":"Fix x86 Native build on Unix","State":"closed","Body":"x86 Native build (initially enabled in #4637 and #4598) is broken with the inclusion of (LLVM) libunwind, object writer and `src/Native/Runtime/i386/MiscStubs.S`.\r\n\r\nThis patch attempts to fill the gaps to make the Native components compile (including object writer):  `./build.sh objwriter skiptests x86` (tested on Debian Stretch i386, cmake 3.13.2)\r\n\r\nManaged components are still failing due to the lack of .NET SDK on Linux x86.\r\n\r\n```\r\nInstalling dotnet cli...\r\ntar: This does not look like a tar archive\r\ntar: Exiting with failure status due to previous errors\r\nERROR: Could not download dotnet cli.\r\nPlease check the detailed log that follows.\r\nRunning: /home/admin/projects/corert/init-tools.sh\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.504/dotnet-sdk-2.1.504-linux-x86.tar.gz' to '/home/admin/projects/corert/Tools/dotnetcli/dotnet.tar'\r\nUsing CLI tools version:\r\nls: cannot access '/home/admin/projects/corert/buildscripts/../Tools/dotnetcli/sdk': No such file or directory\r\n./buildscripts/build-managed.sh: line 33: /home/admin/projects/corert/buildscripts/../Tools/dotnetcli/dotnet: No such file or directory\r\n```\r\n\r\nContributes to: #4589","Url":"https://github.com/dotnet/corert/pull/7899","RelatedDescription":"Closed or merged PR \"Fix x86 Native build on Unix\" (#7899)"},{"Id":"531921880","IsPullRequest":true,"CreatedAt":"2019-12-03T16:24:51","Actor":"MichalStrehovsky","Number":"7902","RawContent":null,"Title":"Add one more CoreRT debugging trick","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7902","RelatedDescription":"Closed or merged PR \"Add one more CoreRT debugging trick\" (#7902)"},{"Id":"531695482","IsPullRequest":true,"CreatedAt":"2019-12-03T04:51:05","Actor":"jkotas","Number":"7901","RawContent":null,"Title":"Fix marshaling for structs with pointers","State":"closed","Body":"Fixes #7900","Url":"https://github.com/dotnet/corert/pull/7901","RelatedDescription":"Closed or merged PR \"Fix marshaling for structs with pointers\" (#7901)"},{"Id":"531675548","IsPullRequest":false,"CreatedAt":"2019-12-03T04:51:05","Actor":"Spongman","Number":"7900","RawContent":null,"Title":"regression: System.Net.Dns.GetHostAddresses crashes","State":"closed","Body":"1.0.0-alpha-28402-01\r\n\r\nI'm seeing a failure where `HttpClient` is crashing trying to make a connection, i have narrowed it down to DNS resolution.\r\n\r\nhere's a zip containing a repro project:\r\n[wslbug.zip](https://github.com/dotnet/corert/files/3914244/wslbug.zip)\r\n\r\n````c#\r\nclass Foo\r\n{\r\n\tstatic void Main(string[] args)\r\n\t{\r\n\t\tSystem.Net.Dns.GetHostAddresses(\"microsoft.com\");\r\n\t}\r\n}\r\n````\r\n\r\non windows:\r\n````\r\nc:\\play\\wslbug\\>dotnet publish -r win-x64 -c Debug && bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\wslbug.exe\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 26.93 ms for C:\\play\\wslbug\\wslbug.csproj.\r\n  wslbug -> C:\\play\\wslbug\\bin\\Debug\\netcoreapp3.0\\win-x64\\wslbug.dll\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [C:\\play\\wslbug\\wslbug.csproj]\r\n  wslbug -> C:\\play\\wslbug\\bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\\r\nUnhandled Exception: System.Exception: Method '[System.Net.NameResolution]Interop+Winsock.GetAddrInfoW(string,string,AddressInfo*,AddressInfo**)' requires marshalling that is not yet supported by this compiler.\r\n   at Interop.Winsock.GetAddrInfoW(String, String, Interop.Winsock.AddressInfo*, Interop.Winsock.AddressInfo**) + 0x49\r\n   at System.Net.NameResolutionPal.TryGetAddrInfo(String, Boolean, String&, String[]&, IPAddress[]&, Int32&) + 0xd4\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String, Boolean) + 0x61\r\n   at System.Net.Dns.GetHostAddressesCore(String) + 0x22\r\n   at System.Net.Dns.GetHostAddresses(String) + 0x23f\r\n   at Foo.Main(String[]) + 0x21\r\n   at wslbug!<BaseAddress>+0x364d47\r\n   at wslbug!<BaseAddress>+0x364dcd\r\n````\r\n\r\non Ubuntu 18.04:\r\n````\r\n/mnt/c/play/wslbug$ dotnet publish -r linux-x64 -c Debug && bin/Debug/netcoreapp3.0/linux-x64/publish/wslbug\r\nMicrosoft (R) Build Engine version 16.3.2+e481bbf88 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 157.92 ms for /mnt/c/play/wslbug/wslbug.csproj.\r\n  wslbug -> /mnt/c/play/wslbug/bin/Debug/netcoreapp3.0/linux-x64/wslbug.dll\r\n  /usr/lib/llvm-7/bin/clang\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/mnt/c/play/wslbug/wslbug.csproj]\r\n  wslbug -> /mnt/c/play/wslbug/bin/Debug/netcoreapp3.0/linux-x64/publish/\r\nUnhandled Exception: System.Exception: Method '[System.Net.NameResolution]Interop+Sys.GetHostEntryForName(string,HostEntry*)' requires marshalling that is not yet supported by this compiler.\r\n   at Interop.Sys.GetHostEntryForName(String, Interop.Sys.HostEntry*) + 0x41\r\n   at System.Net.NameResolutionPal.TryGetAddrInfo(String, Boolean, String&, String[]&, IPAddress[]&, Int32&) + 0x87\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String, Boolean) + 0x58\r\n   at System.Net.Dns.GetHostAddressesCore(String) + 0x22\r\n   at System.Net.Dns.GetHostAddresses(String) + 0x23e\r\n   at Foo.Main(String[]) + 0x21\r\n   at wslbug!<BaseAddress>+0x33c8d7\r\n   at wslbug!<BaseAddress>+0x33c95d\r\nAborted (core dumped)\r\n````\r\n\r\nof course, if i run `.exe.`/`.dll` version with the core runtime, it work fine.","Url":"https://github.com/dotnet/corert/issues/7900","RelatedDescription":"Closed issue \"regression: System.Net.Dns.GetHostAddresses crashes\" (#7900)"},{"Id":"530757774","IsPullRequest":true,"CreatedAt":"2019-12-01T16:33:46","Actor":"ryuukk","Number":"7898","RawContent":null,"Title":"Update how-to-build-and-run-ilcompiler-in-visual-studio.md","State":"open","Body":"Add mention to use the x64 Native Tools Command Prompt for VS 2019","Url":"https://github.com/dotnet/corert/pull/7898","RelatedDescription":"Open PR \"Update how-to-build-and-run-ilcompiler-in-visual-studio.md\" (#7898)"},{"Id":"530658843","IsPullRequest":true,"CreatedAt":"2019-12-01T02:30:48","Actor":"yowl","Number":"7897","RawContent":null,"Title":"WIP: Wasm enable shared generics and generic virtual methods","State":"open","Body":"Mostly taken from the cpp backend, this enables shared generics and generic virtual methods for the Wasm backend.  Have tried to keep the logic as clean as I could, but maybe there's some obvious enhancements/reductions in code that I missed.  \r\n\r\nSize of HelloWasm LLVM bc before, and after, .  <- To be completed.  HelloWasm before this change didn't have much in the way of generics so this mostly reflects the framework and runtime generics.\r\n\r\nEnables the Simple/Generics tests for wasm which have the almost same coverage as cpp (Wasm includes an additional test) in terms of what is #if'ed out.\r\n\r\nWIP as depends on #7893  and #7891 \r\n\r\nFixes https://github.com/dotnet/corert/issues/7248","Url":"https://github.com/dotnet/corert/pull/7897","RelatedDescription":"Open PR \"WIP: Wasm enable shared generics and generic virtual methods\" (#7897)"},{"Id":"530647761","IsPullRequest":true,"CreatedAt":"2019-12-01T01:29:32","Actor":"jkotas","Number":"7896","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7896","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7896)"},{"Id":"530250427","IsPullRequest":false,"CreatedAt":"2019-11-29T09:46:57","Actor":"DardoTheMaster","Number":"7895","RawContent":null,"Title":"RavenDB : rd.xml editing","State":"open","Body":"Hello, i'm trying to build a basic application which is basically a custom client for handling requests to RavenDB.\r\n\r\nUnfortunately while trying to run the compiled application, i get the following errors:\r\n\r\n\r\n---OLD EXCEPTION---\r\n Unhandled Exception: System.AggregateException: Failed to retrieve database topology from all known nodes.\r\nhttp://127.0.0.1:8080 -> Could not build json parser for Raven.Client.Http.ServerNode -> MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Sparrow.Json.BlittableJsonReaderObject.TryGet<Raven.Client.Http.ServerNode.Role>(System.String,out Raven.Client.Http.ServerNode.Role&)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868 (Could not build json parser for Raven.Client.Http.ServerNode)\r\n ---> System.InvalidOperationException: Could not build json parser for Raven.Client.Http.ServerNode\r\n ---> EETypeRva:0x01BDCA98(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Sparrow.Json.BlittableJsonReaderObject.TryGet<Raven.Client.Http.ServerNode.Role>(System.String,out Raven.Client.Http.ServerNode.Role&)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x273\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0xb6\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x37\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeConstructedGenericMethodInfo.get_UncachedMethodInvoker() + 0x3b\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0x19c\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x3ec\r\n   at System.Linq.Expressions.Expression.ApplyTypeArgs(MethodInfo, Type[]) + 0xc7\r\n   at System.Linq.Expressions.Expression.FindMethod(Type, String, Type[], Expression[], BindingFlags) + 0xe0\r\n   at System.Linq.Expressions.Expression.Call(Expression, String, Type[], Expression[]) + 0xb4\r\n   at Sparrow.Json.JsonDeserializationBase.GetValue(String, Type, ParameterExpression, Dictionary`2) + 0x757\r\n   at Sparrow.Json.JsonDeserializationBase.GenerateJsonDeserializationRoutine[T]() + 0x7d7\r\n\r\n\r\n\r\nI tried to mess with rd.xml, but really couldn't understand how to properly configure them. \r\nBut i'm always getting errors on compiling or runtime\r\n\r\nThank you.","Url":"https://github.com/dotnet/corert/issues/7895","RelatedDescription":"Open issue \"RavenDB : rd.xml editing\" (#7895)"},{"Id":"529587467","IsPullRequest":false,"CreatedAt":"2019-11-28T17:23:49","Actor":"yowl","Number":"7893","RawContent":null,"Title":"Wasm: question: boxing to Single","State":"closed","Body":"Hi, in the Wasm backend it loads float32s into float64s and adds the extends/truncs as necessary.  This has worked ok up till now, but there is a problem I think with `FieldInfo.SetValue`.  This takes an object so boxes the float32.  Currently this fails as the address passed to `SetValue` is an address to a float64 and RhBox does not expect that and the value is corrupted (a 64bit float is interpreted as a 32 bit float I think).  In other words the following test fails\r\n```\r\n    internal static void TestBoxSingle()\r\n    {\r\n        StartTest(\"Test box single\");\r\n        var fi = typeof(ClassWithFloat).GetField(\"F\");\r\n        fi.SetValue(null, 1.1f);\r\n\r\n        PrintLine(ClassWithFloat.F.ToString());\r\n        EndTest(1.1f == ClassWithFloat.F);\r\n    }\r\n}\r\n\r\npublic class ClassWithFloat\r\n{\r\n    public static float F;\r\n}\r\n``` \r\nAnd it prints -1.0842022E-19.   In the Wasm backend the evaluation stack can have a `StackEntry` type of `FloatConstantEntry`, but this I'm not sure is sufficient to solve this problem as the enum for StackValueKind is \r\n```\r\n    internal enum StackValueKind\r\n    {\r\n        /// <summary>An unknow type.</summary>\r\n        Unknown,\r\n        /// <summary>Any signed or unsigned integer values that can be represented as a 32-bit entity.</summary>\r\n        Int32,\r\n        /// <summary>Any signed or unsigned integer values that can be represented as a 64-bit entity.</summary>\r\n        Int64,\r\n        /// <summary>Underlying platform pointer type represented as an integer of the appropriate size.</summary>\r\n        NativeInt,\r\n        /// <summary>Any float value.</summary>\r\n        Float,\r\n        /// <summary>A managed pointer.</summary>\r\n        ByRef,\r\n        /// <summary>An object reference.</summary>\r\n        ObjRef,\r\n        /// <summary>A value type which is not any of the primitive one.</summary>\r\n        ValueType\r\n    }\r\n```\r\nIt does not distinguish between 32 and 64 bit floats, so its impossible, I think, to load the constant correctly from\r\n```\r\n  IL_0023:  ldc.r4     1.1\r\n  IL_0028:  box        [System.Runtime]System.Single\r\n```\r\nThe 1.1 is loaded with the `FloatConstantEntry` and it can't be passed correctly to the box/RhBox as its unknown whether to trunc the float or not.  \r\n\r\nMy question is, is my thinking correct and I need to add a new `StackEntry` type so that its known if the value was 32 or 64 bits?  This would not be a bad thing presumably from a performance point of view anyway,\r\n","Url":"https://github.com/dotnet/corert/issues/7893","RelatedDescription":"Closed issue \"Wasm: question: boxing to Single\" (#7893)"},{"Id":"529624715","IsPullRequest":true,"CreatedAt":"2019-11-28T00:04:32","Actor":"yowl","Number":"7894","RawContent":null,"Title":"Wasm: fix for boxing a float32 into Single","State":"open","Body":"Add a test and the fix for :\r\n```\r\n  IL_0023:  ldc.r4     1.1\r\n  IL_0028:  box        [System.Runtime]System.Single\r\n```\r\nWhich was failing due to using a float64 and not trunking the float64 into a float32 before calling RhBox.  Also added code to ensure that type used in the reflection has its type symbol add to the dependencies to prevent missing metadata exception.  WIP as contains changes from #7891 so will wait for that before releasing.","Url":"https://github.com/dotnet/corert/pull/7894","RelatedDescription":"Open PR \"Wasm: fix for boxing a float32 into Single\" (#7894)"},{"Id":"529491585","IsPullRequest":true,"CreatedAt":"2019-11-27T19:36:17","Actor":"MichalStrehovsky","Number":"7892","RawContent":null,"Title":"Fix `out string` arguments in reverse p/invoke","State":"closed","Body":"`EmitMarshalArgumentNativeToManaged` bypasses `AllocAndTransformManagedToNative` and calls `Alloc/TransformManagedToNative` directly. Those are no-ops for the string marshallers, leading to bad marshalling code.\r\n\r\nI think doing allocation+transform in the \"transform\" part is what CoreCLR does as well (`EmitConvertContentsCLRToNative` is where allocation+transform happens for string marshallers in CoreCLR, as opposed to `EmitConvertSpaceAndContentsCLRToNative` which would be the right place based on its name).","Url":"https://github.com/dotnet/corert/pull/7892","RelatedDescription":"Closed or merged PR \"Fix `out string` arguments in reverse p/invoke\" (#7892)"},{"Id":"528780780","IsPullRequest":true,"CreatedAt":"2019-11-27T17:30:09","Actor":"MichalStrehovsky","Number":"7890","RawContent":null,"Title":"Port p/invoke marshalling changes from CoreCLR","State":"closed","Body":"* First commit takes shared files from CoreCLR verbatim.\r\n* Second commit adjusts non-shared files.\r\n* Third commit fixes what appears to be a CppCodegen bug.\r\n","Url":"https://github.com/dotnet/corert/pull/7890","RelatedDescription":"Closed or merged PR \"Port p/invoke marshalling changes from CoreCLR\" (#7890)"},{"Id":"528779520","IsPullRequest":true,"CreatedAt":"2019-11-26T18:12:44","Actor":"MichalStrehovsky","Number":"7889","RawContent":null,"Title":"Get System.Text.Json to work","State":"closed","Body":"The System.Text.Json that ships with the .NET Core 3.0+ uses Reflection.Emit - we should grab the NetStandard 2.0 version instead.","Url":"https://github.com/dotnet/corert/pull/7889","RelatedDescription":"Closed or merged PR \"Get System.Text.Json to work\" (#7889)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"539378265","IsPullRequest":true,"CreatedAt":"2019-12-18T00:10:08","Actor":"dotnet-maestro-bot","Number":"4072","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.2xx' => 'master'","State":"open","Body":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* mmitche\n* nguerrera\n* wli3\n* dotnet-maestro[bot]\n* wtgodbe\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/sdk/pull/4072","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#4072)"},{"Id":"539370442","IsPullRequest":true,"CreatedAt":"2019-12-18T00:05:23","Actor":"mmitche","Number":"4070","RawContent":null,"Title":"[release/3.1.2xx] Conditionalize helix test execution with Test ne false","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4070","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Conditionalize helix test execution with Test ne false\" (#4070)"},{"Id":"539372072","IsPullRequest":false,"CreatedAt":"2019-12-17T23:48:27","Actor":"wli3","Number":"4071","RawContent":null,"Title":"Investigate and reenable helix perf tests","State":"open","Body":"https://github.com/dotnet/sdk/pull/4070\r\nMake it non required at the same time","Url":"https://github.com/dotnet/sdk/issues/4071","RelatedDescription":"Open issue \"Investigate and reenable helix perf tests\" (#4071)"},{"Id":"537989200","IsPullRequest":true,"CreatedAt":"2019-12-17T18:14:23","Actor":"dotnet-maestro[bot]","Number":"4059","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 5:29 PM\r\n- **Commit**: 48818b3e5c5e196cfe2dd2c9642c1667e4a22254\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4059","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#4059)"},{"Id":"539051991","IsPullRequest":true,"CreatedAt":"2019-12-17T14:31:50","Actor":"dotnet-maestro[bot]","Number":"4069","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191216.4\r\n- **Date Produced**: 12/16/2019 9:51 PM\r\n- **Commit**: 4736ddca60a4040447b450437cf3767c9045edc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19616.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19616.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4069","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4069)"},{"Id":"539049829","IsPullRequest":false,"CreatedAt":"2019-12-17T12:56:44","Actor":"dahlia","Number":"4068","RawContent":null,"Title":"dotnet test command unexpectedly terminates with ArgumentNullException on the Thai (Thailand) locale","State":"open","Body":"```bash\r\n$ dotnet --version\r\n3.0.101\r\n```\r\n\r\nAn instruction to reproduce:\r\n\r\n```\r\n$ dotnet new mstest  # Note that this can be reproduced with xunit\r\n$ LANGUAGE=th_TH.UTF8 LANG=th_TH.UTF8 LC_ALL=th_TH.UTF8 dotnet test\r\nTest run for /private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\nTesthost process exited with error: Unhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter 's')\r\n   at System.Int32.Parse(String s)\r\n   at Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.CommandLineArgumentsHelper.GetIntArgFromDict(IDictionary`2 argsDictionary, String fullname)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.SetParentProcessExitCallback(IDictionary`2 argsDictionary)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker.Invoke(IDictionary`2 argsDictionary)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.Program.Run(String[] args)\r\n   at Microsoft.VisualStudio.TestPlatform.TestHost.Program.Main(String[] args)\r\n. Please check the diagnostic logs for more information.\r\n\r\nTest Run Aborted.\r\n```\r\n\r\nNote that it works well with English (United States):\r\n\r\n```bash\r\n$ LANGUAGE=en_US.UTF8 LANG=en_US.UTF8 LC_ALL=en_US.UTF8 dotnet test\r\nTest run for /private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n\r\nTest Run Successful.\r\nTotal tests: 1\r\n     Passed: 1\r\n Total time: 0.6501 Seconds\r\n```\r\n\r\nOr Korean (South Korea):\r\n\r\n```bash\r\n$ LANGUAGE=ko_KR.UTF8 LANG=ko_KR.UTF8 LC_ALL=ko_KR.UTF8 dotnet test\r\n/private/tmp/test/bin/Debug/netcoreapp3.0/test.dll(.NETCoreApp,Version=v3.0)에 대한 테스트 실행\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n테스트 실행을 시작하는 중입니다. 잠시 기다려 주세요...\r\n\r\n지정된 패턴과 일치한 총 테스트 파일 수는 1개입니다.\r\n\r\n테스트를 실행했습니다.\r\n총 테스트 수: 1\r\n     통과: 1\r\n 총 시간: 0.8872 초\r\n```","Url":"https://github.com/dotnet/sdk/issues/4068","RelatedDescription":"Open issue \"dotnet test command unexpectedly terminates with ArgumentNullException on the Thai (Thailand) locale\" (#4068)"},{"Id":"538626902","IsPullRequest":true,"CreatedAt":"2019-12-16T22:52:09","Actor":"swaroop-sridhar","Number":"4067","RawContent":null,"Title":"[release/3.1.2xx]Generate RID graph in self-contained builds","State":"closed","Body":"## Issue \r\n#3361\r\n\r\n## Scenario\r\nCustomer tries to load load plugins with RID-specific assets into a self-contained app.\r\nThis operation currently fails.\r\n\r\n## Fix\r\n\r\nIn order to support loading components (plugins) with RID-specific assets, the `AssemblyDependencyResolver` requires the RID fallback graph.\r\n\r\nThe component itself should not carry the RID fallback graph with it (it would need to have the graph of all the RIDs there are and it would need to be updated with every addition).\r\n\r\nFor framework dependent apps, the RID fallback graph comes from the core framework Microsoft.NETCore.App, so there is no need to write it into the app.\r\n\r\nIf self-contained apps, the (applicable subset of) RID fallback graph needs to be written to the deps.json manifest.\r\n\r\n## Risk\r\nMedium\r\n\r\nThis change affects contents generated in the deps.json file for every single-file app.\r\nHowever, it only adds information (RID-graph) that is consumed by the `AssemblyDependencyResolver`.\r\nIt doesn't change any other sections in the `deps.json` manifest.\r\n\r\n## Customer impact\r\nCustomer is able to load load plugins with RID-specific assets into a self-contained app.\r\n","Url":"https://github.com/dotnet/sdk/pull/4067","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx]Generate RID graph in self-contained builds\" (#4067)"},{"Id":"538612187","IsPullRequest":false,"CreatedAt":"2019-12-16T19:40:14","Actor":"JustArchi","Number":"4066","RawContent":null,"Title":"Possibility of access denied when running PublishSingleFile=true app on Unix","State":"open","Body":"Hey,\r\n\r\nThe default behaviour of the `PublishSingleFile=true` on Unix (OS X / Linux) is to create `/var/tmp/.net/<project>/<version>` directory for file extraction, with last 3 directories created if needed.\r\n\r\nFor some reason, at least on Debian, likely in majority of other configurations, folders created by `dotnet` within that `/var/tmp` come with `700` permission, making them accessible only by the owner. This is not the case with the files that are following traditional `644` permission, but all subdirectories within `/var/tmp/.net` also follow `700`. Folders created manually result in default permission of `755`.\r\n\r\n`700` access means that if two or more distinct users try to run one or more `PublishSingleFile=true` applications, everybody but the first guy will receive a fatal error:\r\n\r\n```\r\nFailure processing application bundle.\r\nFailed to create directory [/var/tmp/.net/<project>/] for extracting bundled files\r\nA fatal error was encountered. Could not extract contents of the bundle\r\n```\r\n\r\nThis is a severe problem since it makes running `PublishSingleFile=true` apps impossible if we consider two or more distinct users on the operating system, and it's even more severe considering that `/var/tmp` is preserved across reboots, since if one user creates `/var/tmp/.net` folder with that `700` permission, then no other user will have access to it until it's deleted. This is what `dotnet` is currently doing.\r\n\r\nTo make it worse, we also need to realize that `.net` is a special subdirectory that everybody should have write access to, as otherwise we could have the same problem if other user will try to run some other app, as `dotnet` won't be able to access the directory. Similar case is with `<project>`, just for running two or more versions of the same project.\r\n\r\nPotential solution to the problem:\r\n- Make `/var/tmp/.net` folder follow `777` permission. like `/tmp` and `/var/tmp` does, since it's an extension of temporary directory, just for `dotnet`.\r\n- Make `/var/tmp/.net/<project>` folder follow `777` permission as well, since you may have a case where two or more users run different versions of the same software, leading to them both needing access to `/var/tmp/.net/<project>`.\r\n- Up to your own judgment, make `/var/tmp/.net/<project>/<version>` at least `755` so other users can re-use already extracted structures. `755` should be enough in this case considering that we won't need to do any manual modifications inside after extraction (as I read from the design docs), so read access for other users is more than enough.\r\n\r\nAlternative solution to the problem:\r\n- Make use of other solutions available on unixes, such as making use of the groups or ACLs, probably overkill for this use case but you're deciding here.\r\n\r\nReproduction steps:\r\n- Publish `PublishSingleFile=true` application.\r\n- `adduser testuser1` and `adduser testuser2`.\r\n- Run your software as `testuser1`, then as `testuser2`. Second user will not be able to run the application, unless he is the first user, `root` or has some special permission to access those `700` directories created by `testuser1`.\r\n\r\nIn any case thank you for your time looking into this problem.\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:\r\n OS Platform: Linux\r\n RID:         debian-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  157910edee\r\n```","Url":"https://github.com/dotnet/sdk/issues/4066","RelatedDescription":"Open issue \"Possibility of access denied when running PublishSingleFile=true app on Unix\" (#4066)"},{"Id":"538585009","IsPullRequest":false,"CreatedAt":"2019-12-16T18:41:48","Actor":"assyadh","Number":"4065","RawContent":null,"Title":".NET Core 3.1 \"+dependencies\" tags missing.","State":"open","Body":"Hi,\r\n\r\nWhen building .NET Core 3.1 from source, we used to have tags containing the dependencies required. Here is an example for .NET Core 2.1.13:\r\n\r\ncoreclr: v2.1.13-dependencies\r\ncorefx: v2.1.13-dependencies\r\ncore-setup: v2.1.13-dependencies\r\ncli: v2.1.509+dependencies\r\n\r\nI don't see such \"+dependencies\" tags for 3.1 ?\r\n\r\nThanks for the help,\r\n\r\nH.","Url":"https://github.com/dotnet/sdk/issues/4065","RelatedDescription":"Open issue \".NET Core 3.1 \"+dependencies\" tags missing.\" (#4065)"},{"Id":"538398123","IsPullRequest":true,"CreatedAt":"2019-12-16T14:31:58","Actor":"dotnet-maestro[bot]","Number":"4064","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191215.1\r\n- **Date Produced**: 12/15/2019 2:03 PM\r\n- **Commit**: 77698ebba1ab096ad9580a5d9ebefe0499ba00ce\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19615.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19615.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19615.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4064","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4064)"},{"Id":"538143473","IsPullRequest":true,"CreatedAt":"2019-12-16T01:48:12","Actor":"wli3","Number":"4063","RawContent":null,"Title":"Enable generate runtime config and deps.files","State":"open","Body":"Please review it **commit by commit**.\r\n\r\nFix https://github.com/dotnet/sdk/issues/3889","Url":"https://github.com/dotnet/sdk/pull/4063","RelatedDescription":"Open PR \"Enable generate runtime config and deps.files\" (#4063)"},{"Id":"538048058","IsPullRequest":true,"CreatedAt":"2019-12-16T00:20:30","Actor":"dotnet-maestro[bot]","Number":"4061","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191214.1\r\n- **Date Produced**: 12/14/2019 1:54 PM\r\n- **Commit**: 64e95735b49d37b6cf908cfa5228ff65bee6dfff\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19614.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19614.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19614.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4061","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4061)"},{"Id":"538049791","IsPullRequest":false,"CreatedAt":"2019-12-15T13:15:25","Actor":"Tyrrrz","Number":"4062","RawContent":null,"Title":"CLI command `dotnet nuget push` doesn't recognize forward slashes in path on Windows","State":"open","Body":"When using `dotnet nuget push MyProject/bin/Release/*.nupkg -s nuget.org -k ***` it works great on Linux but doesn't work on Windows. On Windows you have to use backslashes, i.e.  `dotnet nuget push MyProject\\bin\\Release\\*.nupkg -s nuget.org -k ***`.\r\n\r\nThis is annoying as it makes the CD setup slightly different depending on the platform and can waste time investigating issues as it's pretty easy to miss. Also, other dotnet CLI commands work with both forward and backslashes just fine.","Url":"https://github.com/dotnet/sdk/issues/4062","RelatedDescription":"Open issue \"CLI command `dotnet nuget push` doesn't recognize forward slashes in path on Windows\" (#4062)"},{"Id":"537989216","IsPullRequest":true,"CreatedAt":"2019-12-15T01:57:11","Actor":"dotnet-maestro[bot]","Number":"4060","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a976d45-b90d-4c39-d453-08d76e1d3434)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 5:29 PM\r\n- **Commit**: 48818b3e5c5e196cfe2dd2c9642c1667e4a22254\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.1\r\n\r\n[marker]: <> (End:5a976d45-b90d-4c39-d453-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4060","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/core-setup\" (#4060)"},{"Id":"537910906","IsPullRequest":true,"CreatedAt":"2019-12-14T14:31:48","Actor":"dotnet-maestro[bot]","Number":"4058","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191213.1\r\n- **Date Produced**: 12/13/2019 3:35 PM\r\n- **Commit**: acd18a717ab18e484addef602e2af2b2bc4c4bd1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19613.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19613.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19613.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4058","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4058)"},{"Id":"537802117","IsPullRequest":true,"CreatedAt":"2019-12-13T22:16:38","Actor":"nguerrera","Number":"4057","RawContent":null,"Title":"Fix build on Ubuntu 18.04 by installing different runtimes","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/4057","RelatedDescription":"Open PR \"Fix build on Ubuntu 18.04 by installing different runtimes\" (#4057)"},{"Id":"537800891","IsPullRequest":true,"CreatedAt":"2019-12-13T22:15:59","Actor":"mmitche","Number":"4056","RawContent":null,"Title":"[release/3.0.1xx] Fix pool name","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4056","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Fix pool name\" (#4056)"},{"Id":"537046531","IsPullRequest":true,"CreatedAt":"2019-12-13T21:19:39","Actor":"mmitche","Number":"4048","RawContent":null,"Title":"[release/3.0.1xx] Use correct conditionals for PR + public vs. not","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4048","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Use correct conditionals for PR + public vs. not\" (#4048)"},{"Id":"537691973","IsPullRequest":true,"CreatedAt":"2019-12-13T20:07:47","Actor":"wli3","Number":"4053","RawContent":null,"Title":"3.1.2xx double icon","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4053","RelatedDescription":"Closed or merged PR \"3.1.2xx double icon\" (#4053)"},{"Id":"537693698","IsPullRequest":true,"CreatedAt":"2019-12-13T20:07:25","Actor":"wli3","Number":"4055","RawContent":null,"Title":"Don't double pack icon in our transport package (#3906)","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4055","RelatedDescription":"Closed or merged PR \"Don't double pack icon in our transport package (#3906)\" (#4055)"},{"Id":"537693038","IsPullRequest":true,"CreatedAt":"2019-12-13T20:06:36","Actor":"wli3","Number":"4054","RawContent":null,"Title":"Don't double pack icon in our transport package (#3906)","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4054","RelatedDescription":"Closed or merged PR \"Don't double pack icon in our transport package (#3906)\" (#4054)"},{"Id":"537538215","IsPullRequest":true,"CreatedAt":"2019-12-13T15:02:06","Actor":"dotnet-maestro[bot]","Number":"4052","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191212.1\r\n- **Date Produced**: 12/12/2019 2:36 PM\r\n- **Commit**: b590bede6a5244ee732c63c99f725728cabbda48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19612.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19612.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19612.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4052","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4052)"},{"Id":"537222288","IsPullRequest":false,"CreatedAt":"2019-12-12T21:26:41","Actor":"wli3","Number":"4051","RawContent":null,"Title":"Always print out instruction to add path to current session for tool install","State":"open","Body":"In restricted environment, restart shell is not possible. While adding path to current shell should be enough.\r\n\r\nhttps://github.com/dotnet/core/issues/3974#issuecomment-565193947","Url":"https://github.com/dotnet/sdk/issues/4051","RelatedDescription":"Open issue \"Always print out instruction to add path to current session for tool install\" (#4051)"},{"Id":"537141514","IsPullRequest":false,"CreatedAt":"2019-12-12T18:25:47","Actor":"ooooolivia","Number":"4050","RawContent":null,"Title":"dotnet build fails with switch /p:NuGetPackageRoot","State":"open","Body":"**Steps to reproduce**\r\nit might be specific to [this project](https://github.com/dotnet/performance/blob/master/src/tools/ScenarioMeasurement/Startup/Startup.csproj)\r\n```dotnet restore --packages <repo-root>\\artifacts\\packages```\r\n```dotnet build /p:NuGetPackageRoot=<repo-root>\\artifacts\\packages```\r\n\r\n**Expected**\r\nBuild successfully\r\n\r\n**Actual**\r\nThe following error (can't recognize ```dragonfruit``` library) occured:\r\n```\r\nStartup.cs(46,20): error CS0028: 'Startup.Main(string, MetricType, string, string, bool, int, string, string, string, string, int, int, string, string, string, bool, bool, bool, string, string, string)' has the wrong signature to be an entry point [E:\\performance-investigation\\src\\tools\\ScenarioMeasurement\\Startup\\Startup.csproj]\r\nCSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [E:\\performance-investigation\\src\\tools\\ScenarioMeasurement\\Startup\\Startup.csproj]\r\n    0 Warning(s)\r\n    2 Error(s)\r\n```\r\n**More Info**\r\nThe build will succeed if ```--no-restore``` is added to ```dotnet build```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/4050","RelatedDescription":"Open issue \"dotnet build fails with switch /p:NuGetPackageRoot\" (#4050)"},{"Id":"537093282","IsPullRequest":false,"CreatedAt":"2019-12-12T16:45:24","Actor":"foragerr","Number":"4049","RawContent":null,"Title":"dotnet new -i returns `0` exit code (success) after failing to restore a template","State":"open","Body":"### Steps to reproduce\r\n```\r\n# dotnet new -i template-that-does-not-exist\r\n\r\n\t/root/.templateengine/dotnetcli/v2.1.801/scratch/restore.csproj : error NU1101: Unable to find package template-that-does-not-exist. No packages exist with this id in source(s): /usr/share/dotnet/sdk/NuGetFallbackFolder, nuget.org\r\n\t  Restore failed in 782.37 ms for /root/.templateengine/dotnetcli/v2.1.801/scratch/restore.csproj.\r\n\t\r\n\tUsage: new [options] ...\r\n\t\r\n\r\n# echo $?\r\n\t0\r\n```\r\n\r\n### Expected\r\nnon-zero return code\r\n\r\n### Actual\r\n```\r\n# echo $?\r\n\t0\r\n```\r\n\r\n### Environment Data\r\n```\r\n# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.801\r\n Commit:    c404ee777a\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.801/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.12\r\n  Commit:  ccea2e606d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.801 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/sdk/issues/4049","RelatedDescription":"Open issue \"dotnet new -i returns `0` exit code (success) after failing to restore a template\" (#4049)"},{"Id":"536964338","IsPullRequest":true,"CreatedAt":"2019-12-12T15:22:17","Actor":"dotnet-maestro[bot]","Number":"4047","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191211.6\r\n- **Date Produced**: 12/11/2019 10:53 PM\r\n- **Commit**: 71a91bbb3c49bad2f1e7f2c7f28b32c5c0efc9e5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19611.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19611.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19611.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4047","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4047)"},{"Id":"536646383","IsPullRequest":true,"CreatedAt":"2019-12-12T00:50:22","Actor":"wli3","Number":"4045","RawContent":null,"Title":"Generate Content for a Test at Run-time -- release/3.1.2xx","State":"closed","Body":"With this change, a part of the content for the test-asset HellowWorldWithSubDirs\r\nis not checked in, but generated during test execution in order to circumvent certain issues like:\r\n* Git Clone: Cannot clone files with long names on Windows if long file name support is not enabled\r\n* Nuget Pack: By default ignores files starting with \".\"","Url":"https://github.com/dotnet/sdk/pull/4045","RelatedDescription":"Closed or merged PR \"Generate Content for a Test at Run-time -- release/3.1.2xx\" (#4045)"},{"Id":"536607498","IsPullRequest":true,"CreatedAt":"2019-12-11T23:28:41","Actor":"swaroop-sridhar","Number":"4044","RawContent":null,"Title":"Generate Content for a Test at Run-time","State":"closed","Body":"With this change, a part of the content for the test-asset HellowWorldWithSubDirs\r\nis not checked in, but generated during test execution in order to circumvent certain issues like:\r\n* Git Clone: Cannot clone files with long names on Windows if long file name support is not enabled\r\n* Nuget Pack: By default ignores files starting with \".\"","Url":"https://github.com/dotnet/sdk/pull/4044","RelatedDescription":"Closed or merged PR \"Generate Content for a Test at Run-time\" (#4044)"},{"Id":"536652630","IsPullRequest":true,"CreatedAt":"2019-12-11T22:57:25","Actor":"mmitche","Number":"4046","RawContent":null,"Title":"[release/3.0.1xx] Update perf queues","State":"closed","Body":"Other queues are old and super dead","Url":"https://github.com/dotnet/sdk/pull/4046","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update perf queues\" (#4046)"},{"Id":"536514761","IsPullRequest":false,"CreatedAt":"2019-12-11T17:30:11","Actor":"symbiogenesis","Number":"4043","RawContent":null,"Title":"SDK Path","State":"open","Body":"On Windows, if I already have a traditional SDK install, and do a user install of the .NET SDK using the dotnet-install scripts and append the SDK location (~/AppData/Local/Microsoft/dotnet/) to the end of my PATH, it isn't recognized when I do a dotnet --list-sdks.  However, if I pre-pend the location to the path, then it works and shows both SDKs.\r\n\r\nCan this be fixed so that it recognizes all the SDKs, regardless of where in the path it shows up?","Url":"https://github.com/dotnet/sdk/issues/4043","RelatedDescription":"Open issue \"SDK Path\" (#4043)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"536031264","IsPullRequest":false,"CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Number":"145","RawContent":null,"Title":"December 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on December 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Open issue \"December 2019 .NET Updates\" (#145)"},{"Id":"535463424","IsPullRequest":false,"CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Number":"144","RawContent":null,"Title":"Removal of read-collaborator access","State":"open","Body":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the collaborator badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n-   ~~**You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.~~\r\n\r\n- **You might lose the ability to interact with the CI system**. Based on your feedback we have decided to give externals access to interact with the CI system *on a case by case basis*. If you believe you need to have that ability, please [leave a comment like Kevin's](https://github.com/dotnet/runtime/issues/718#issuecomment-563717478).\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718.","Url":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Open issue \"Removal of read-collaborator access\" (#144)"},{"Id":"532249858","IsPullRequest":false,"CreatedAt":"2019-12-03T20:36:29","Actor":"MichaelSimons","Number":"143","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.1","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`.","Url":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.1\" (#143)"},{"Id":"532163408","IsPullRequest":false,"CreatedAt":"2019-12-03T18:00:27","Actor":"leecow","Number":"142","RawContent":null,"Title":".NET Core 3.1.0","State":"open","Body":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Open issue \".NET Core 3.1.0\" (#142)"},{"Id":"523579400","IsPullRequest":false,"CreatedAt":"2019-11-15T16:51:27","Actor":"MichaelSimons","Number":"141","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Framework","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`.","Url":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141)"},{"Id":"523578215","IsPullRequest":false,"CreatedAt":"2019-11-15T16:49:04","Actor":"MichaelSimons","Number":"140","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Core","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`.","Url":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140)"},{"Id":"522994983","IsPullRequest":false,"CreatedAt":"2019-11-14T17:15:08","Actor":"leecow","Number":"139","RawContent":null,"Title":".NET Core 3.1.0 Preview 3","State":"open","Body":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 3\" (#139)"},{"Id":"522864668","IsPullRequest":false,"CreatedAt":"2019-11-14T13:37:28","Actor":"TaraOverfield","Number":"138","RawContent":null,"Title":"November 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n* [.NET Framework November 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-november-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.14 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.14/2.1.14.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.8/2.2.8.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\n* .NET Core 3.0.1 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.1/3.0.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.0) )\r\n\r\nA discussion issue is available at [core/3848](https://github.com/dotnet/core/issues/3848)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Open issue \"November 2019 .NET Updates\" (#138)"},{"Id":"522488807","IsPullRequest":false,"CreatedAt":"2019-11-13T21:41:06","Actor":"MichaelSimons","Number":"137","RawContent":null,"Title":".NET Framework Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-framework-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-framework-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-framework-samples/): .NET Framework Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Open issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137)"},{"Id":"521830642","IsPullRequest":false,"CreatedAt":"2019-11-12T22:05:51","Actor":"MichaelSimons","Number":"136","RawContent":null,"Title":".NET Core Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Open issue \".NET Core Docker images support for Windows Server, version 1909\" (#136)"},{"Id":"520243813","IsPullRequest":false,"CreatedAt":"2019-11-08T21:33:12","Actor":"CESARDELATORRE","Number":"135","RawContent":null,"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","State":"open","Body":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n- **New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n- **Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n- **Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n- **PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n- **ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n","Url":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Open issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135)"},{"Id":"517169249","IsPullRequest":false,"CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Number":"134","RawContent":null,"Title":".NET Core 3.1.0 Preview 2","State":"open","Body":".NET Core 3.1.0 Preview 2 is available and https://github.com/dotnet/core/issues/3744 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 2, either responding to https://github.com/dotnet/core/issues/3744, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 2\" (#134)"},{"Id":"514753283","IsPullRequest":false,"CreatedAt":"2019-10-30T15:14:43","Actor":"jaredpar","Number":"133","RawContent":null,"Title":"Repository Consolidation Timeline","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository.","Url":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Open issue \"Repository Consolidation Timeline\" (#133)"},{"Id":"513963125","IsPullRequest":false,"CreatedAt":"2019-10-29T14:32:55","Actor":"mthalman","Number":"132","RawContent":null,"Title":"Release of Alpine 3.10 Docker images","State":"open","Body":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)","Url":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Open issue \"Release of Alpine 3.10 Docker images\" (#132)"},{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Cumulative Update for Windows 10 version 1903 and version 1909](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-cumulative-updates-windows-10-version-1903-and-windows-10-version-1909/)\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1207044048273518593","CreatedAt":"2019-12-17T21:05:01+00:00","UserScreenname":"dotnet","Text":"A new #dotNETConf Focus event is coming, &amp; we'll be going deep into #ASPNET #Blazor.\n\nThe agenda is now up for this… https://t.co/ZImacILoVd","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":87,"FavoriteCount":46,"RawContent":null},{"Id":"1207033976784932864","CreatedAt":"2019-12-17T20:25:00+00:00","UserScreenname":"dotnet","Text":"Out variables in C#? What's that?\n\nIf you have about 2mins, we'll show you in this short video 😎\n\nhttps://t.co/4s1iIEhx0H #csharp #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":58,"FavoriteCount":13,"RawContent":null},{"Id":"1206972829507489793","CreatedAt":"2019-12-17T16:22:01+00:00","UserScreenname":"dotnet","Text":"We've open sourced our new GC Perf Infrastructure! It’s now part of the #dotNET performance repo. @maoni0 has a rea… https://t.co/mSXmzqu9LE","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":54,"FavoriteCount":19,"RawContent":null},{"Id":"1206689967218532353","CreatedAt":"2019-12-16T21:38:02+00:00","UserScreenname":"dotnet","Text":"Accepted in the latest GitHub quick review:\n✔️ More cancellation overloads for HttpContent \n 👍 Add ImmutableHashSet… https://t.co/jcxux2v5CQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":44,"FavoriteCount":11,"RawContent":null},{"Id":"1206620502384693248","CreatedAt":"2019-12-16T17:02:00+00:00","UserScreenname":"dotnet","Text":"Welcome DataFrame, an API that makes it easier to explore and process data. https://t.co/BAguwE0ePp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":176,"FavoriteCount":89,"RawContent":null},{"Id":"1206604902887120900","CreatedAt":"2019-12-16T16:00:01+00:00","UserScreenname":"dotnet","Text":"Since C# 7.1, you can add the async keyword to your Main() methods. \n\n@gotheap and @mairacw show you how it works i… https://t.co/3x3t1vzpUh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":105,"FavoriteCount":49,"RawContent":null},{"Id":"1205604081248677888","CreatedAt":"2019-12-13T21:43:06+00:00","UserScreenname":"dotnet","Text":"The new updates for #dotNET Framework are out. See what's new in security and quality this month:… https://t.co/E2x0marVuW","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":33,"FavoriteCount":18,"RawContent":null},{"Id":"1205524287945359360","CreatedAt":"2019-12-13T16:26:02+00:00","UserScreenname":"dotnet","Text":"Of course, we're always looking to improve the performance of our apps...\n\n#dotNETRocks talks w/ @SteveJGordon abou… https://t.co/jWLGWnM3d1","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":77,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2019-12-18T05:30:39.2713583Z","RunDurationInMilliseconds":15682}