{"Data":{"Blog":{"FeedItems":[{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7964763655","Type":"PullRequestEvent","CreatedAt":"2018-07-13T23:19:43","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18917","RelatedDescription":"Opened pull request \"Enable Windows ARM64 corefx jobs in the CI\" (#18917) at dotnet/coreclr","RelatedBody":"Currently failing tests are disabled, and issues have been opened.\r\n\r\nAlso, enabled 'jitnosimd' job for Linux/arm64.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7965077326","Type":"PullRequestEvent","CreatedAt":"2018-07-14T02:43:15","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9663","RelatedDescription":"Merged pull request \"Insert updated dotnet/sdk\" (#9663) at dotnet/cli","RelatedBody":"Completes the round-trip of the 4.8.0-preview5.5328 NuGet insertion (#9630 and https://github.com/dotnet/sdk/pull/2391)\r\n"},{"Id":"7965011942","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:48:15","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9635","RelatedDescription":"Merged pull request \"Update coresetup, sdk to preview1-26216-03, servicing-63108-01, respectively (release/2.1.401)\" (#9635) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7965009739","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:46:18","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9662","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9662) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7964978164","Type":"IssuesEvent","CreatedAt":"2018-07-14T01:20:34","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9628","RelatedDescription":"Closed issue \"ERROR: Detected package downgrade: Microsoft.AspNetCore.SpaServices.Extensions from 2.1.1 to 2.1.0.\" (#9628) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Install latest .net core SDK\r\n- Have a previous .net core app\r\n\r\n`csproj`\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n    <SpaRoot>ClientApp\\</SpaRoot>\r\n    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\\**</DefaultItemExcludes>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SpaServices.Extensions\" Version=\"2.1.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- Don't publish the SPA source files, but do show them in the project files list -->\r\n    <Content Remove=\"$(SpaRoot)**\" />\r\n    <None Include=\"$(SpaRoot)**\" Exclude=\"$(SpaRoot)node_modules\\**\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"DebugEnsureNodeEnv\" BeforeTargets=\"Build\" Condition=\" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') \">\r\n    <!-- Ensure Node.js is installed -->\r\n    <Exec Command=\"node --version\" ContinueOnError=\"true\">\r\n      <Output TaskParameter=\"ExitCode\" PropertyName=\"ErrorCode\" />\r\n    </Exec>\r\n    <Error Condition=\"'$(ErrorCode)' != '0'\" Text=\"Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE.\" />\r\n    <Message Importance=\"high\" Text=\"Restoring dependencies using 'npm'. This may take several minutes...\" />\r\n    <Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm install\" />\r\n  </Target>\r\n\r\n  <Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\">\r\n    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->\r\n    <Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm install\" />\r\n    <Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm run build\" />\r\n\r\n    <!-- Include the newly-built files in the publish output -->\r\n    <ItemGroup>\r\n      <DistFiles Include=\"$(SpaRoot)build\\**; $(SpaRoot)build-ssr\\**\" />\r\n      <ResolvedFileToPublish Include=\"@(DistFiles->'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\">\r\n        <RelativePath>%(DistFiles.Identity)</RelativePath>\r\n        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n      </ResolvedFileToPublish>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n## Expected  behavior\r\nIt should build and work\r\n\r\n## Actual behavior\r\nErrors:\r\n\r\n`error NU1605: Detected package downgrade: Microsoft.AspNetCore.SpaServices.Extensions from 2.1.1 to 2.1.0. Reference the package directly from the project to select a different version.`\r\n`error NU1605:  LogicTrade.Connect.UI.React -> Microsoft.AspNetCore.App 2.1.1 -> Microsoft.AspNetCore.SpaServices.Extensions (>= 2.1.1 && < 2.2.0)`\r\n`error NU1605:  LogicTrade.Connect.UI.React -> Microsoft.AspNetCore.SpaServices.Extensions (>= 2.1.0)`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n ```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7964967278","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:12:37","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9663","RelatedDescription":"Opened pull request \"Insert updated .NET Core SDK\" (#9663) at dotnet/cli","RelatedBody":"Completes the round-trip of the 4.8.0-preview5.5328 NuGet insertion (#9630 and https://github.com/dotnet/sdk/pull/2391)\r\n"},{"Id":"7964911561","Type":"IssuesEvent","CreatedAt":"2018-07-14T00:34:07","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9638","RelatedDescription":"Closed issue \"High CPU usage and spawns lot of threads when running dotnet run\" (#9638) at dotnet/cli","RelatedBody":"@sfkshan commented on [Sun May 13 2018](https://github.com/dotnet/core/issues/1553)\n\nI have a simple console project and whenever I run the dotnet run I can see lot of dotnet process spawns and taking more cpu even after the command got excited in the terminal where I executed.\r\n\r\n<img width=\"1440\" alt=\"screen shot 2018-05-14 at 10 21 39 am\" src=\"https://user-images.githubusercontent.com/6265495/39978886-aa1050e4-5760-11e8-8c75-1c2a26ae149b.png\">\r\n\r\nHere is the project.\r\n[Playground.zip](https://github.com/dotnet/core/files/1999387/Playground.zip)\r\n\n\n---\n\n@gfoidl commented on [Wed May 23 2018](https://github.com/dotnet/core/issues/1553#issuecomment-391600895)\n\nAre you aware of [Long-running SDK build servers](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)?\n\n---\n\n@benaadams commented on [Thu May 24 2018](https://github.com/dotnet/core/issues/1553#issuecomment-391721124)\n\nMay also be related https://github.com/Microsoft/msbuild/pull/2384\n\n---\n\n@sfkshan commented on [Fri May 25 2018](https://github.com/dotnet/core/issues/1553#issuecomment-392029827)\n\n@gfoidl I read about it. But the problem is in that extra threads stays until i forcibly terminates it. Also it consumes close to 100% CPU usage. Everytime I run the app and exit and do changes and then re run. This is almost reproducible most of the time in my machine. I uninstalled the dotnet core completely and install the latest version also. Still the same issue.\n\n---\n\n@dasMulli commented on [Sun May 27 2018](https://github.com/dotnet/core/issues/1553#issuecomment-392428178)\n\n@sfkshan does this occur only when using VS code or also from executing `dotnet run` in the console without VS Code running? (there was/is a bug in VS live share that has `dotnet` processes keeping cores busy at 100%)\r\n\r\nAlso, which version of the SDK are you running? (`dotnet --info` output)\n\n---\n\n@sfkshan commented on [Mon May 28 2018](https://github.com/dotnet/core/issues/1553#issuecomment-392560063)\n\ndotnet --info output\r\n\r\n```\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n\r\n@dasMulli  yeah i am running through vscode. I will execute in terminal and observe and will post the updates.\r\n\n\n---\n\n@sfkshan commented on [Sun Jun 10 2018](https://github.com/dotnet/core/issues/1553#issuecomment-392639344)\n\nI verified as @dasMulli says this is happening only when I run dotnet core inside the vscode terminal.\r\n\r\n**UPDATE**\r\nI am seeing this problem even in regular terminal also.\n\n---\n\n@JoiGud commented on [Tue Jun 05 2018](https://github.com/dotnet/core/issues/1553#issuecomment-394664829)\n\nHello! We are using dotnet core and running it from the terminal and getting 200-350% CPU load. We are also experiencing that when we quit the program in the terminal it doesn't quit but stays open.\r\n\r\nHave the newest SDK `dotnet --info output`:\r\n```.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.105 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\nOh, and I'm running mac OS High Sierra 10.13.4 (17E202) if that helps.\r\n\r\nAny thoughts on this would be highly appreciated.\n\n---\n\n@gilbertoalexsantos commented on [Tue Jun 05 2018](https://github.com/dotnet/core/issues/1553#issuecomment-394920577)\n\nHappening with me as well.\r\n\r\nThe environment is the same as that of @JoiGud \n\n---\n\n@JoiGud commented on [Thu Jun 07 2018](https://github.com/dotnet/core/issues/1553#issuecomment-395376773)\n\nJust ran `dotnet restore`.  Now when I do `dotnet run` I get the same high CPU load. But when I kill that process and do `dotnet run` again (without changing anything) it behaves normally, with low CPU load.\n\n---\n\n@JoiGud commented on [Thu Jun 07 2018](https://github.com/dotnet/core/issues/1553#issuecomment-395377502)\n\nI have a colleague beside me, with almost and identical setup, same OS version, same SDK. He does not get these high CPU loads.\r\n\r\nWill report back if we find anything else 😄 \n\n---\n\n@parthsha commented on [Sat Jun 09 2018](https://github.com/dotnet/core/issues/1553#issuecomment-395969668)\n\nI am experiencing the same issue on Mac OS X 10.13.4 but the strange thing is I don't have VS Code open nor am I trying to compile any code using terminal. Is anyone else experiencing something like this?\r\n\r\nEDIT:\r\nJust to add some more info. VSCode was previously running on my machine a few days ago and I don't recall restarting my machine recently, so I am wondering if the dotnet processes were from back then. I don't use this machine often but I have noticed the fans going off several times since last 2 days.\n\n---\n\n@JoiGud commented on [Sat Jun 09 2018](https://github.com/dotnet/core/issues/1553#issuecomment-395971059)\n\nI usually end up having `top -o cpu` open in some terminal window and then killing off that one `dotnet` process that spikes with `kill -9 proc_id` (where `proc_id` stands for the process id of the dotnet process).\n\n---\n\n@skvsree commented on [Sun Jun 10 2018](https://github.com/dotnet/core/issues/1553#issuecomment-396026818)\n\nHi, this issue is observed in Jetbrains Rider as well, seems to have started after 2.1 upgrade.  Below is the dotnet --info.  This has made environment completely unusable.\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  1.0.3 [/usr/local/share/dotnet/sdk]\r\n  1.0.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\n\n---\n\n@ddrsql commented on [Thu Jun 14 2018](https://github.com/dotnet/core/issues/1553#issuecomment-397507699)\n\nI also encountered the same problem.\r\nFour dotnet servers do the load, and the CPU usage is high at the same time.\r\nThen adjust the two services to do a regular restart dotnet, the other two services did not do a regular restart and other phenomena to reproduce.\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n![top](https://user-images.githubusercontent.com/29722085/41449088-93dcb8a4-7091-11e8-9042-9f2a09ea4c00.png)\r\n\r\n```\r\ntop -H -p 16144\r\n```\r\n![height](https://user-images.githubusercontent.com/29722085/41449262-8f167c0a-7092-11e8-9001-4cd3d908ce0f.png)\r\n\r\n```\r\npstack 23058    #normal\r\npstack 16114    #High cpu\r\n```\r\nThe left side is a normal server, and the right side is a server with a high CPU usage.\r\n![pstack](https://user-images.githubusercontent.com/29722085/41449416-948bdbb6-7093-11e8-92b8-199dd46ace32.png)\r\n\r\nAnd I hope this could be a feature in SDK so we can use some built-in commands to do it, like 'dotnet dump', 'dotnet profile'. As I know there are some tools in java like jmap, jstack and they are very popular and useful.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@leecow commented on [Fri Jun 22 2018](https://github.com/dotnet/core/issues/1553#issuecomment-399484112)\n\n@rainersigwald , @AndyGerlicher - does this look related to https://github.com/Microsoft/msbuild/pull/2384?\n\n---\n\n@rainersigwald commented on [Fri Jun 22 2018](https://github.com/dotnet/core/issues/1553#issuecomment-399504838)\n\nI'd be very surprised if it was; that caused production of many threads within msbuild processes but they were short-lived and didn't consume CPU at a particularly high rate. In addition, several of these reports use pre-2.1.300 SDKs, where MSBuild processes were not long-lived. There could be a bug that keeps the processes alive and spinning, but I'm not aware of one.\r\n\r\nI'd be very curious to know the **command lines** of the processes that are consuming CPU.\n\n---\n\n@jordevorstenbosch commented on [Wed Jun 27 2018](https://github.com/dotnet/core/issues/1553#issuecomment-400616905)\n\nI'm running into this issue as well, however I'd like to add that it happens when using the new command as well. Not just when using dotnet run. Process stays open after completing its task and remains at 100+% CPU Usage.\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.301/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n  2.1.301 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n@rainersigwald @leecow if I can provide any additional information let me know.\r\n\n\n---\n\n@JoiGud commented on [Thu Jun 28 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401041542)\n\nIf I do `ps aux | grep dotnet` then the following is one of the dotnet processes that spikes the CPU:\r\n`/usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.300/Roslyn/bincore/VBCSCompiler.dll -pipename:myusername.F.a8YGquYlqf7WJOhYvGN0wdSxo`\r\n\r\nNot totally sure if that's what you're looking for @rainersigwald , hope this can help. Let me know if I can do anything else or provide any more info.\n\n---\n\n@rainersigwald commented on [Fri Jun 29 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401073631)\n\n@JoiGud Yes, that's exactly the kind of thing I'm looking for.\r\n\r\n**If you're seeing this can you share all of `ps aux | grep dotnet`?** There are a few different build server processes that could be going wrong, so we need to figure out which one(s) are misbehaving to figure out the root cause.\r\n\r\nEDIT: After getting some reports, no need to share this if the command consuming CPU is running `VBCSCompiler.dll`. Please do share if you see something else.\n\n---\n\n@delasteve commented on [Thu Jun 28 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401121312)\n\n@rainersigwald\r\n\r\n`ps aux | grep dotnet` returns\r\n```\r\nstephencavaliere 81958 109.0  3.9 25330192 656864   ??  R     1:50PM   3:26.21 /usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.300/Roslyn/bincore/VBCSCompiler.dll -pipename:stephencavaliere.F.a8YGquYlqf7WJOhYvGN0wdSxo\r\n```\r\n\r\nOther info that may or may not be useful:\r\n\r\n`brew cask info dotnet-sdk`\r\n```\r\ndotnet-sdk: 2.1.300\r\nhttps://www.microsoft.com/net/core#macos\r\n/usr/local/Caskroom/dotnet-sdk/2.1.300 (165.6MB)\r\nFrom: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/dotnet-sdk.rb\r\n==> Name\r\n.NET Core SDK\r\n==> Artifacts\r\ndotnet-sdk-2.1.300-osx-x64.pkg (Pkg)\r\n```\r\n\r\n`dotnet --info`\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\n\n---\n\n@rainersigwald commented on [Thu Jun 28 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401122243)\n\nOk, that looks like at least two instances where it's the Roslyn compiler server that seems to be doing surprising work when it should be idle. @jaredpar can you help route?\n\n---\n\n@jaredpar commented on [Thu Jun 28 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401201631)\n\nLooks like a duplicate of https://github.com/dotnet/roslyn/issues/24137\r\n\r\nProblem is a combination of a long user name, a long temp path ends up causing us to spin on named pipe creation APIs. \n\n---\n\n@jordevorstenbosch commented on [Fri Jun 29 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401293192)\n\n@rainersigwald make that three\r\n\r\n`/usr/local/share/dotnet/dotnet /usr/local/share/dotnet/sdk/2.1.301/Roslyn/bincore/VBCSCompiler.dll -pipename:<username>.7GIKntv7I38xTHU3BEqdv09i4`\r\n\r\n@jaredpar could be my username is 17 characters long.\r\n\r\nJust made a user account with only 2 characters, the issue does not occur on that account.\n\n---\n\n@pix3lize commented on [Sun Jul 01 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401652946)\n\n@jaredpar I'm having a similar issue. I have long username 20characters with space in between probably something that can back up @jordevorstenbosch theory. Thanks \r\n\n\n---\n\n@JoiGud commented on [Mon Jul 02 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401857206)\n\nSorry for not answering sooner, was on vacation. It seems that it's always the `VBCSCompiler.dll` that has the high CPU load. My username is 17 characters long. Interesting.\n\n---\n\n@jaredpar commented on [Mon Jul 02 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401861509)\n\nSounds like this is definitely a dupe of the roslyn issue then. I think we may have to implement the hueristic around pipe name limits in our code. Short term you can disable this via `UseSharedCompilation = false` either as an explicit build property or an environment variable.\n\n---\n\n@JoiGud commented on [Mon Jul 02 2018](https://github.com/dotnet/core/issues/1553#issuecomment-401870190)\n\nI tried @mikeharder 's workaround that he mentioned here (roslyn issue): https://github.com/dotnet/roslyn/issues/24137\r\nand it seems to solve the issue.\n\n---\n\n@jordevorstenbosch commented on [Thu Jul 05 2018](https://github.com/dotnet/core/issues/1553#issuecomment-402710002)\n\nBeen using the solution @JoiGud talks about for a few days now, can confirm that it works for me as well.\n\n"},{"Id":"7964906991","Type":"IssuesEvent","CreatedAt":"2018-07-14T00:31:22","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9640","RelatedDescription":"Closed issue \"dotnet publish fail on warnings\" (#9640) at dotnet/cli","RelatedBody":"Moving issue here from Dotnet.\r\nIssue entered by ChaosCA.\r\nhttps://github.com/Microsoft/dotnet/issues/799\r\n\r\nFull Text from issue:\r\nHey there,\r\nI apologies if this is the wrong place. This is more of a feature suggestion to have a flag on the dotnet publish command that causes it to exit with a non-zero status code when it encounters a warning.\r\nThis is useful for CI/CD applications that are unmanaged, failing on warnings can prevent potentially buggy code from reaching production when it otherwise may have not be caught. Sort of like a strict mode.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7964901889","Type":"IssuesEvent","CreatedAt":"2018-07-14T00:28:18","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9642","RelatedDescription":"Closed issue \"Installing the 2.1.x SDK on Debian 9 following directions from the MS website produces an install without support for 2.1\" (#9642) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n* Install, following steps from website (https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-2.1.200)\r\n* Create a basic project that targets netcore 2.1\r\n* ```dotnet build``` or ```dotnet run```\r\n\r\n## Expected  behavior\r\n\r\nIt should work\r\n\r\n## Actual behavior\r\n\r\n````\r\n/usr/share/dotnet/sdk/2.1.200/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1. [/home/kate/Projects/mono/marshalertest/marshalertest.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.42\r\n````\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n````\r\nkate@reeir-debian:~/Projects/mono/marshalertest$ dotnet --info\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n````"},{"Id":"7964877067","Type":"IssuesEvent","CreatedAt":"2018-07-14T00:14:08","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9649","RelatedDescription":"Closed issue \"\"dotnet test\" fails to find .so file in output folder on Ubuntu when LD_LIBRARY_PATH is blank.\" (#9649) at dotnet/cli","RelatedBody":"I have a cross-platform project which uses [DllImport] to load a native binary. I have equivalent .dll and .so placed in the application root, set to CopyAlways and they appear in the output folder.\r\n\r\nThe application runs correctly on both Windows and Linux (Ubuntu) both when published and from the command line with \"dotnet run\".\r\n\r\nI have a test which calls a method from the loaded library. On Windows the test runs correctly, on a Linux system when LD_LIBRARY_PATH is not set (such as the visualstudio.com hosted Linux build agent) the test fails with a DllNotFoundException. \r\n\r\nSetting the LD_LIBRARY_PATH to : (just a colon) causes the tests to pass. I believe an incorrect assumption is made somewhere during the test procedure about LD_LIBRARY_PATH.\r\n\r\nFurther details below, including further tests.\r\n\r\nMany thanks!\r\n\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a project with a [DllImport] method from a library.so file.\r\n2. Create a test for the method.\r\n3. Set the library.so file to CopyAlways so it appears in the output folder alongside the normal application dlls.\r\n4. Use the VSTS hosted linux build agent or host your own linux vsts-agent which has no LD_LIBRARY_PATH by default.\r\n5. Build the project and run it - the method successfully loads the library.so file from the application folder and runs the imported method properly.\r\n6. Run \"dotnet test\" against the project and you get DllNotFoundException.\r\n\r\n## Expected  behavior\r\n\r\nThe tests run successfully - the .so file is found and loaded by the method under test. \r\n\r\n## Actual behavior\r\n\r\nError Message:\r\n System.DllNotFoundException : Unable to load shared library 'library.so' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibrary: cannot open shared object file: No such file or directory\r\n\r\n## Additional info\r\n\r\nThe fact that LD_LIBRARY_PATH is blank is relevant.\r\nIf LD_LIBRARY_PATH either starts or ends with a : then the test runs correctly.\r\n\r\n>export LD_LIBRARY_PATH=\r\n>dotnet test\r\nfails with error above\r\n\r\n>export LD_LIBRARY_PATH=:\r\n>dotnet test\r\npasses\r\n\r\n>export LD_LIBRARY_PATH=:blah\r\n>dotnet test\r\npasses\r\n\r\n>export LD_LIBRARY_PATH=blah:\r\n>dotnet test\r\npasses\r\n\r\n>export LD_LIBRARY_PATH=blah\r\n>dotnet test\r\nfails with error above\r\n\r\n>export LD_LIBRARY_PATH=path_to_application_output_directory\r\n>dotnet test\r\npasses\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nroot@vsts-agent-5c87858b7b-dsbjf:/vsts# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.301/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.301 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7965046019","Type":"PullRequestEvent","CreatedAt":"2018-07-14T02:15:45","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/819","RelatedDescription":"Opened pull request \"Add Span<T> and related APIs\" (#819) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7965009586","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:46:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/818","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Xml.*\" (#818) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964582394","Type":"PullRequestEvent","CreatedAt":"2018-07-13T22:11:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/817","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Threading.*\" (#817) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964550637","Type":"PullRequestEvent","CreatedAt":"2018-07-13T22:01:14","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/816","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Text.*\" (#816) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964528935","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:54:45","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/815","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Runtime.*\" (#815) at dotnet/standard","RelatedBody":"Not sure these API additions actually have any runtime impact, but due to the `ConditialWeakTable` changes I'm just tagging it anyway.\r\n\r\n@dotnet/nsboard "},{"Id":"7964497246","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:45:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/814","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Resources\" (#814) at dotnet/standard","RelatedBody":""},{"Id":"7964477350","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:39:49","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/813","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Numerics\" (#813) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964461424","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:35:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/812","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Linq.*\" (#812) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964447661","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:31:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/811","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Globalization.*\" (#811) at dotnet/standard","RelatedBody":""},{"Id":"7964435715","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:28:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/810","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Diagnostics.*\" (#810) at dotnet/standard","RelatedBody":""},{"Id":"7964405873","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:19:48","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/809","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Data.*\" (#809) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964368219","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:09:50","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/808","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.ComponentModel\" (#808) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964354861","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:06:13","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/807","RelatedDescription":"Opened pull request \"Miscellaneous improvements in System.Collections.*\" (#807) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964328381","Type":"PullRequestEvent","CreatedAt":"2018-07-13T20:59:29","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/806","RelatedDescription":"Opened pull request \"Miscellaneous improvements in Microsoft.Win32.SafeHandles\" (#806) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"7964292194","Type":"PullRequestEvent","CreatedAt":"2018-07-13T20:50:39","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/805","RelatedDescription":"Opened pull request \"Add runtime API to get ECMA335 metadata\" (#805) at dotnet/standard","RelatedBody":"This adds an API that the runtime needs to implement to allow metadata readers to read the ECMA335 metadata without having to load the assembly again into memory. However, a valid implementation is `return false;` as it's primarily a perf optimization.\r\n\r\n@dotnet/nsboard "},{"Id":"7963661402","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:24:29","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/801","RelatedDescription":"Merged pull request \"Fix URL obsoletion message\" (#801) at dotnet/standard","RelatedBody":"This resolves the conflicts from #793.\r\n\r\n/cc @ionux"},{"Id":"7963655193","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:23:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/804","RelatedDescription":"Opened pull request \"Add RuntimeFeature\" (#804) at dotnet/standard","RelatedBody":"This adds the `RuntimeFeature` class which enables compilers to statically discover which features the runtime is guaranteed to support. The compiler checks for individual features by looking for the presence of a static field by a well-known name. By convention, these fields are of type string.\r\n\r\nPlease note that for .NET Standard this means that adding a field to this type requires all implementers to provide this feature in their runtimes.\r\n\r\n@dotnet/nsboard "},{"Id":"7963637155","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:19:14","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/803","RelatedDescription":"Opened pull request \"Add converters for drawing primitives and known colors\" (#803) at dotnet/standard","RelatedBody":"This adds the various converters for `System.Drawing` primitives (such as `ColorConverter` and `PointConverter`). Also, this adds the `KnownColor` which is used by many libraries too.\r\n\r\n@dotnet/nsboard "},{"Id":"7963620659","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:15:39","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/802","RelatedDescription":"Opened pull request \"Add DbProviderFactories\" (#802) at dotnet/standard","RelatedBody":"This adds the `DbProviderFactories` that allows creating factorings for DB access.\r\n\r\n@dotnet/nsboard "},{"Id":"7963591848","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:09:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/801","RelatedDescription":"Opened pull request \"Fix URL obsoletion message\" (#801) at dotnet/standard","RelatedBody":"This resolves the conflicts from #793.\r\n\r\n/cc @ionux"},{"Id":"7963584356","Type":"PullRequestEvent","CreatedAt":"2018-07-13T18:07:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/793","RelatedDescription":"Closed pull request \"Minor text correction for ObsoleteAttribute message.\" (#793) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7965215843","Type":"IssuesEvent","CreatedAt":"2018-07-14T04:53:54","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31030","RelatedDescription":"Closed issue \"Random Records go missing, using linq, after .toList .toArray .AsEnumerable\" (#31030) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nI never got a chance to report this bug at my previous company for time constants.\r\nJust to give you a bit of back ground, we under took the re-write of a entire existing project, onto the early er beta release of dotnet beta using RX technologies. Because we had an exising process with which we could proof and run both system at the same time, to ensure we correctly perfectly re-wrote the system, provide the data was spares enough of course. Over period of  year a few months we ran import and exports of data using the new process, fix thing never even been picked up before in the existing system, comparing the results of both system at different stages.\r\n\r\nWe finally end up with a very few long days of peeling back the layers and investigate were one of our records went missing that we couldn't explain. We eventually pined it down to single line of code, that made it work of fail. Upon knowing were the issues was, we then undertook a more detail investigation into the frameworks and SQL being generate everything to figure out, who was responsible for this.\r\n\r\nHere is everything we eliminated.\r\n\r\n- Hardware, problem happen on different machines even.\r\n- Database, didn't matter.\r\n- SQL statments generated were correct and when executed their generated statement, they correctly return all the records.\r\n\r\nThis lead us to believe it is a bug in the framework upon which we were working,\r\nbut due to use already having spent enough time on this project and having many projects that also need out attention, we just change the one liner for something else, which cause everything to work and made a very big note.\r\n\r\nI am not able to give you the data or anything like that, but what I can do is provide you with the line of code and some context, to what made it work and what didn't make it work.\r\nThen the only way I could fix it, if bug still exist is to have a team of experience guys, clearly double check the mechanism around this line of code, checking for some corner case bug, that happens in the most rarest of cerium stances.\r\n\r\nAs I say the only reason we pick this up, because we had existing process against which I vet everything \r\nwe were joining about 400 000 records, in which I then discover a record went missing.\r\n\r\nMy concern is that we may have been the only ones who every picked this corner case up, because of we re-wrote and existing project and had a longer period of time ensure the process was perfect and identical to a reference, to whom we then decided, whether the new system or the old system was correctly and moved forward. Then eventually signed it off after 3/4 no hiccup runs, after I determined their was not enough data that had been through, that was random enough to caused pretty much every things to have been touched, logically wise.\r\n\r\nI guess that most projects would have the luxury of being able to have a reference to compare their worth with, their would wouldn't even be looking into weather their systems were working at this level, with this amount of data. Especially test cases.\r\n\r\nSo therefore I am still reporting this, with the hopes that this bug no longer existing the current releases,\r\nsomehow got worked out, but their really is only one way to know for certain and that is if you guys can verify this by checking the development history of work in this section of code, then just checking the current code by re-reading it again, checking for any corner cases.\r\n\r\nWe were using the local SQL DB.\r\n\r\n## The buggy code at hand.\r\n```.cs\r\n  /*\r\n        virtual protected IEnumerable<DiffPair<TModel>> InternalItems(IQueryable<TModel> collections)\r\n        {\r\n            \r\n            int currentImportID = CurrentImportContext.Import.ID;\r\n            int previousImportID = PreviousImportContext.Import.ID;\r\n\r\n            // Their is bug, that if this collection is not evaluted before the where clause using .AsEnumerable(), Tolist, ToArray,\r\n            // the radio records randomly go missing.\r\n            // For this statment to evalute up front takes a large over head in resource.\r\n            // Revert to old code, that is faster and simpler in terms of the sql statment generated.\r\n            // Leaving this code here, so no one attempts to use this approach again.\r\n            var items = collections.AsEnumerable().Where(x => previousImportID == x.ImportID || currentImportID == x.ImportID);\r\n                //.ToArray();\r\n\r\n            var pairEntries = items\r\n                .Select(x => new { CI = x.CI, LAC = x.LAC })\r\n                .Distinct();\r\n\r\n            return pairEntries.GroupJoin(items, x => x, x => new { x.CI, x.LAC }, (_, entries) => new DiffPair<TModel>(\r\n                entries.SingleOrDefault(x => x.ImportID == previousImportID),\r\n                entries.SingleOrDefault(x => x.ImportID == currentImportID)\r\n            ));\r\n        } */\r\n```\r\n## Configuration\r\n```.json\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n  \"description\": \"IXUS.EMSS.Netcon.DiffPhase.Tests Class Library\",\r\n  \"authors\": [ \"woliver\" ],\r\n\r\n  \"packOptions\": {\r\n    \"tags\": [ \"\" ],\r\n    \"projectUrl\": \"https://git.emss.co.za/emssixus/netcon/tree/master/IXUS.EMSS.Netcon.DiffPhase.Tests\",\r\n    \"licenseUrl\": \"\"\r\n  },\r\n\r\n  \"buildOptions\": {\r\n    \"copyToOutput\": [\r\n      \"appsettings.json\",\r\n      \"../IXUS.EMSS.Netcon.Model.Seed/Seeds/*\"\r\n    ]\r\n  },\r\n\r\n  \"frameworks\": {\r\n    \"net46\": {\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"Microsoft.EntityFrameworkCore.InMemory\": \"1.0.0-rc2-final\",\r\n    \"IXUS.Core\": \"1.0.0\",\r\n    \"IXUS.EMSS.Netcon.DiffPhase\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc2-final\",\r\n    \"xunit\": \"2.1.0\",\r\n    \"dotnet-test-xunit\": \"1.0.0-rc2-build10025\"\r\n  },\r\n\r\n  \"testRunner\": \"xunit\"\r\n}\r\n\r\n```\r\n\r\n## An alternative method, which I wrote Initially that works and has tests proving such, that I then reverted to because the speed implications of the fix.\r\n\r\n```.cs\r\n  /*\r\n       protected IEnumerable<DiffPair<TModel>> InternalItemsOrderByCILAC(IQueryable<TModel> collections)\r\n        {\r\n            // RunTime at least 9.5s for 67279 Atoll3GCells and 25810 Atoll2GCells for Large test file.                         \r\n            // We could look at implement and optermised version of this called\r\n            // distinct pairs, If we implemente and interface for DiffPair.\r\n\r\n            int currentImportID = CurrentImportContext.Import.ID;\r\n            int previousImportID = PreviousImportContext.Import.ID;\r\n\r\n            // Order natural by the existing compound index in the model CI, LAC.\r\n            var records = collections.Where(\r\n                w => (w.ImportID == currentImportID || w.ImportID == previousImportID));\r\n\r\n            TModel previous = null;\r\n\r\n            var seed = records.FirstOrDefault();\r\n\r\n            if (seed != null)\r\n            {\r\n                int previousCI = seed.CI;\r\n                int previousLAC = seed.LAC;\r\n\r\n                foreach (var record in records)\r\n                {\r\n                    if (previous != null)\r\n                    {\r\n                        if (previousCI == record.CI && previousLAC == record.LAC)\r\n                        {\r\n                            if (record.ImportID == currentImportID)\r\n                            {\r\n                                yield return new DiffPair<TModel>(previous, record);\r\n                            }\r\n                            else if (record.ImportID == previousImportID)\r\n                            {\r\n                                yield return new DiffPair<TModel>(record, previous);\r\n                            }\r\n                            previous = null;\r\n                        }\r\n                        else\r\n                        {\r\n                            if (previous.ImportID == currentImportID)\r\n                            {\r\n                                yield return new DiffPair<TModel>(null, previous);\r\n                            }\r\n                            else if (previous.ImportID == previousImportID)\r\n                            {\r\n                                yield return new DiffPair<TModel>(previous, null);\r\n                            }\r\n\r\n                            previousCI = record.CI;\r\n                            previousLAC = record.LAC;\r\n                            previous = record;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n\r\n                        previousCI = record.CI;\r\n                        previousLAC = record.LAC;\r\n                        previous = record;\r\n                    }\r\n                }\r\n\r\n                if (previous != null)\r\n                {\r\n                    if (previous.ImportID == currentImportID)\r\n                    {\r\n                        yield return new DiffPair<TModel>(null, previous);\r\n                    }\r\n                    else if (previous.ImportID == previousImportID)\r\n                    {\r\n                        yield return new DiffPair<TModel>(previous, null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\n## Test Code for the procedure\r\n\r\n```.ts\r\n   [Fact]\r\n        public void Empty()\r\n        {\r\n            var items = new AtollEntryModel[] { };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            Assert.Equal(0, source.Items.Count());\r\n        }\r\n\r\n        [Fact]\r\n        public void NewCell()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(1, resultsItems.Count());\r\n\r\n            Assert.Equal(null, resultsItems.First().Previous);\r\n            Assert.Equal(items.First(), resultsItems.First().Current);\r\n        }\r\n\r\n        [Fact]\r\n        public void MissingCell()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = PreviousImport.Import.ID },\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(1, resultsItems.Count());\r\n            Assert.Equal(items.First(), resultsItems.First().Previous);\r\n            Assert.Equal(null, resultsItems.First().Current);\r\n        }\r\n\r\n        [Fact]\r\n        public void ExistingCell()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = PreviousImport.Import.ID },\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = CurrentImport.Import.ID }\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(1, source.Items.Count());\r\n\r\n            Assert.Equal(items[0], resultsItems.First().Previous);\r\n            Assert.Equal(items[1], resultsItems.First().Current);\r\n\r\n        }\r\n\r\n        [Fact]\r\n        public void ExistingCellReversed()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = PreviousImport.Import.ID }\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(1, source.Items.Count());\r\n\r\n            Assert.Equal(items[1], resultsItems.First().Previous);\r\n            Assert.Equal(items[0], resultsItems.First().Current);\r\n        }\r\n\r\n        [Fact]\r\n        public void Combination1()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = PreviousImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID =  PreviousImport.Import.ID}\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(2, source.Items.Count());\r\n\r\n            Assert.Equal(null, resultsItems.First().Current);\r\n            Assert.Equal(items[0], resultsItems.First().Previous);\r\n\r\n            Assert.Equal(items[1], resultsItems.Skip(1).First().Current);\r\n            Assert.Equal(items[2], resultsItems.Skip(1).First().Previous);\r\n        }\r\n\r\n\r\n        [Fact]\r\n        public void Combination2()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 1, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID =  PreviousImport.Import.ID}\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(2, source.Items.Count());\r\n\r\n            Assert.Equal(items[0], resultsItems.First().Current);\r\n            Assert.Equal(null, resultsItems.First().Previous);\r\n\r\n            Assert.Equal(items[1], resultsItems.Skip(1).First().Current);\r\n            Assert.Equal(items[2], resultsItems.Skip(1).First().Previous);\r\n        }\r\n\r\n        [Fact]\r\n        public void Combination3()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID =  PreviousImport.Import.ID},\r\n                new AtollEntryModel() { CI = 3, LAC = 101, ImportID = CurrentImport.Import.ID }\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(2, source.Items.Count());\r\n\r\n            Assert.Equal(items[0], resultsItems.First().Current);\r\n            Assert.Equal(items[1], resultsItems.First().Previous);\r\n\r\n            Assert.Equal(items[2], resultsItems.Skip(1).First().Current);\r\n            Assert.Equal(null, resultsItems.Skip(1).First().Previous);\r\n        }\r\n\r\n        [Fact]\r\n        public void Combination4()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID =  PreviousImport.Import.ID},\r\n                new AtollEntryModel() { CI = 3, LAC = 101, ImportID = PreviousImport.Import.ID }\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(2, source.Items.Count());\r\n\r\n            Assert.Equal(items[0], resultsItems.First().Current);\r\n            Assert.Equal(items[1], resultsItems.First().Previous);\r\n\r\n            Assert.Equal(null, resultsItems.Skip(1).First().Current);\r\n            Assert.Equal(items[2], resultsItems.Skip(1).First().Previous);\r\n        }\r\n\r\n        [Fact]\r\n        public void Combination5()\r\n        {\r\n            var items = new []\r\n            {\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID = CurrentImport.Import.ID },\r\n                new AtollEntryModel() { CI = 2, LAC = 101, ImportID =  PreviousImport.Import.ID},\r\n                new AtollEntryModel() { CI = 3, LAC = 101, ImportID = PreviousImport.Import.ID },\r\n                new AtollEntryModel() { CI = 4, LAC = 101, ImportID = PreviousImport.Import.ID },\r\n                new AtollEntryModel() { CI = 4, LAC = 101, ImportID = CurrentImport.Import.ID},\r\n            };\r\n\r\n            var source = new TestAtollCellEntryBase(items, CurrentImport, PreviousImport);\r\n\r\n            var resultsItems = source.Items;\r\n\r\n            Assert.Equal(3, source.Items.Count());\r\n\r\n            Assert.Equal(items[0], resultsItems.First().Current);\r\n            Assert.Equal(items[1], resultsItems.First().Previous);\r\n\r\n            Assert.Equal(null, resultsItems.Skip(1).First().Current);\r\n            Assert.Equal(items[2], resultsItems.Skip(1).First().Previous);\r\n\r\n            Assert.Equal(items[3], resultsItems.Skip(2).First().Previous);\r\n            Assert.Equal(items[4], resultsItems.Skip(2).First().Current);\r\n\r\n        }\r\n    }\r\n\r\n```\r\n\r\n"},{"Id":"7965207922","Type":"PullRequestEvent","CreatedAt":"2018-07-14T04:45:55","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31058","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, ProjectNTfs, ProjectNTfsTestILC to preview1-03013-03, preview1-26714-01, beta-26713-01, beta-26713-01, respectively (master)\" (#31058) at dotnet/corefx","RelatedBody":""},{"Id":"7965055152","Type":"IssuesEvent","CreatedAt":"2018-07-14T02:23:42","Actor":"prasanthelvr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31066","RelatedDescription":"Opened issue \"How to use System.Drawing.Common package in Xamarin.Forms?\" (#31066) at dotnet/corefx","RelatedBody":"I am using System.Drawing.Common (https://www.nuget.org/packages/System.Drawing.Common/) package in .NET Core application to create bitmap image using GDI+. When I use the same package in Xamarin.Forms application which throws PlatformNotSupported exception.\r\n\r\nIs there any plan to support Xamarin.Forms in future?"},{"Id":"7965037799","Type":"PullRequestEvent","CreatedAt":"2018-07-14T02:09:13","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31021","RelatedDescription":"Merged pull request \"Provide a low-level API for reading and writing PKCS#12 (PFX) files\" (#31021) at dotnet/corefx","RelatedBody":"This change adds two top-level classes, Pkcs12Info and Pkcs12Builder, for\r\nreading existing file blobs and creating new ones.  These classes, and the\r\nobject model they expose/consume, are very raw on top of IETF RFC 7292.\r\nMost user interaction with a PFX file/blob will continue to be with the\r\nX509Certificate2 constructor (and Export method) and the\r\nX509Certificate2Collection Import and Export methods.\r\n\r\nFixes #28249."},{"Id":"7965037794","Type":"IssuesEvent","CreatedAt":"2018-07-14T02:09:13","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28249","RelatedDescription":"Closed issue \"Create an API to manipulate PKCS12 objects\" (#28249) at dotnet/corefx","RelatedBody":"https://tools.ietf.org/html/rfc7292\r\n\r\n* Allow enumeration of contents by type (KeyBag, PKCS8ShroudedKeyBag, CertBag, CRLBag, SecretBag)\r\n  * SafeContents is a recursive node, so maybe it needs to be part of the enumerator and not an enumeratable thing.  Or maybe it should also be enumeratable because maybe someone wants to indicate \"these belong together\" for its contents.\r\n* Should allow the authenticity and integrity passwords to be different (in password mode)\r\n* Technically, the integrity mode can also be disabled.\r\n* P2: Support for public-key modes\r\n  * P3: Support for { public key integrity, password authenticity } and { password integrity, public key authenticity }\r\n* Virtuous: A method which, given an X509Certificate2 where HasPrivateKey=true adds the key and the cert and used an automatic cert/key relationship identifier.\r\n  * Windows-style would be to add the key to a shrouded key bag, the cert to be added to a CertBag which gets encrypted, and the key identifier to be a sequence number.\r\n    * Windows also would carry the persisted key name (as \"friendly name\") and an indicator of the CSP/KSP, and (if appropriate) an indication if the key was a machine key or user key.\r\n        * Need to decide what parts of these to do by default\r\n* Each added item needs to be capable of having properties defined on it. (And each enumerated item capable of having the properties inspected)\r\n\r\nGotchas:\r\n* The spec allows for keys to be \"shrouded\" (PKCS8 encrypted), unencrypted KeyBag, or encrypted KeyBag.  Need a way to distinguish user intent.\r\n* The spec allows for unencrypted and encrypted CertBags.  So we need a way to distinguish user intent.\r\n* Technically speaking, all other bags have this same conundrum.  Only private keys are tri-state, though.\r\n\r\nAlgorithms:\r\n* Windows 7 only supports the legacy PBES1 options.\r\n* We definitely need to allow user expression of algorithm.  Should we require it?  Or have a default of \"What Windows 7 does\"?\r\n\r\nDesign:\r\n* Maybe \"build\" and \"read\" don't need to be the same class?\r\n  * If builder is separate, does it need \"append\"?\r\n* For a separate builder, it might be easiest to require the passwords/keys at construction time, and then have an API which is AddEncryptedContents(SafeBag) and AddUnencryptedContents(SafeBag).\r\n    * Or maybe SafeBags should have a property of whether they are (reader) or should-be (builder) encrypted.\r\n\r\n# API Proposal\r\n\r\n## Discussion points\r\n\r\n* The `AuthenticatedSafe` property: This name comes from a type name in the RFC (the field name is `authSafe`), and an AuthenticatedSafe is a collection of `SafeContents`.\r\n  * Other libraries:\r\n    * BouncyCastle calls it `ContentInfos`\r\n    * OpenSSL doesn't refer to the field, but has `PKCS12_unpack_authsafes` (plural) to read it, suggesting a name of `AuthSafe` in lieu of `SafeContents`.\r\n  * Alternative Suggestions:\r\n    * Rename `Pkcs12SafeContents` to `[Pkcs12]AuthSafe`, rename property to `Auth[enticated]Safes`\r\n* The prefix `Pkcs12` on types: Would it be clearer (though somewhat inaccurate) to use `Pfx` instead?\r\n* Should all of the types other than the attribute be put into a Pkcs12 sub-namespace?\r\n* Should the two nested enums be promoted out?\r\n* Should the `PublicKey` enum members be removed until there is support?\r\n* Pkcs12Builder.AddSafeContentsUnencrypted can accept an encrypted SafeContents and will succeed (because no further encryption is required).  Is there a better name which still helps callers be aware that a SafeContents they just built is not going to be encrypted?\r\n\r\n## Exception Model\r\n\r\n* Pkcs12Info.VerifyMac will return `false` when there is no MAC to verify (alternatively, InvalidOperationException)\r\n* `ArgumentNullException` in all the expected places.\r\n* `InvalidOperationException`:\r\n  * `Pkcs12Builder`\r\n    * `IsSealed == false`\r\n      * `Encode`\r\n      * `TryEncode`\r\n    * `IsSealed == true`\r\n      * Seal\\*\r\n      * Add\\*\r\n  * `Pkcs12SafeContents`:\r\n    * `IsReadOnly == true`\r\n      * Add*\r\n    * `DataConfidentialityMode != None`\r\n      * `GetBags`\r\n    * `DataConfidentialityMode != Password`\r\n      * `Decrypt`\r\n* `CryptographicException`:\r\n  * Decode fails, Decrypt fails, Encode catches something late (like illegal OID values).\r\n  * Pretty much every exception aside from the ones above.\r\n\r\n## Contract Proposal\r\n\r\n```C#\r\nnamespace System.Security.Cryptography.Pkcs\r\n{\r\n    public sealed partial class Pkcs9LocalKeyId : Pkcs9AttributeObject\r\n    {\r\n        public ReadOnlyMemory<byte> KeyId { get; }\r\n        public Pkcs9LocalKeyId() => throw null;\r\n        public Pkcs9LocalKeyId(ReadOnlySpan<byte> keyId) => throw null;\r\n    }\r\n    public sealed partial class Pkcs12Builder\r\n    {\r\n        public bool IsSealed { get; }\r\n        public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan<byte> passwordBytes, PbeParameters pbeParameters) => throw null;\r\n        public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan<char> password, PbeParameters pbeParameters) => throw null;\r\n        public void AddSafeContentsUnencrypted(Pkcs12SafeContents safeContents) => throw null;\r\n        public byte[] Encode() => throw null;\r\n        public void SealAndMac(ReadOnlySpan<char> password, HashAlgorithmName hashAlgorithm, int iterationCount) => throw null;\r\n        public void SealWithoutIntegrity() => throw null;\r\n        public bool TryEncode(Span<byte> destination, out int bytesWritten) => throw null;\r\n    }\r\n    public sealed partial class Pkcs12Info\r\n    {\r\n        private Pkcs12Info() { }\r\n        public ReadOnlyCollection<Pkcs12SafeContents> AuthenticatedSafe { get; }\r\n        public IntegrityMode DataIntegrityMode { get; }\r\n        public bool VerifyMac(ReadOnlySpan<char> password) => throw null;\r\n        public static Pkcs12Info Decode(ReadOnlyMemory<byte> encodedBytes, out int bytesConsumed, bool skipCopy=false) => throw null;\r\n\r\n        public enum IntegrityMode\r\n        {\r\n            Unknown = 0,\r\n            None = 1,\r\n            Password = 2,\r\n            PublicKey = 3,\r\n        }\r\n    }\r\n    public sealed partial class Pkcs12SafeContents\r\n    {\r\n        public ConfidentialityMode DataConfidentialityMode { get; }\r\n        public bool IsReadOnly { get; }\r\n        public void AddSafeBag(Pkcs12SafeBag safeBag) => throw null;\r\n        public CertBag AddCertificate(X509Certificate2 certificate) => throw null;\r\n        public KeyBag AddKeyUnencrypted(AsymmetricAlgorithm key) => throw null;\r\n        public ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, ReadOnlySpan<char> password, PbeParameters pbeParameters) => throw null;\r\n        public ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, ReadOnlySpan<byte> password, PbeParameters pbeParameters) => throw null;\r\n        public SecretBag AddSecret(Oid secretType, ReadOnlyMemory<byte> secretValue, bool skipCopy=false) => throw null;\r\n        public void Decrypt(ReadOnlySpan<char> password) => throw null;\r\n        public IEnumerable<Pkcs12SafeBag> GetBags() => throw null;\r\n        public enum ConfidentialityMode\r\n        {\r\n            Unknown = 0,\r\n            None = 1,\r\n            Password = 2,\r\n            PublicKey = 3,\r\n        }\r\n    }\r\n    public abstract partial class Pkcs12SafeBag\r\n    {\r\n        protected Pkcs12SafeBag(string bagIdValue) { }\r\n        public CryptographicAttributeObjectCollection Attributes { get; }\r\n        public byte[] Encode() => throw null;\r\n        public Oid GetBagId() => throw null;\r\n        public bool TryEncode(Span<byte> destination, out int bytesWritten) => throw null;\r\n        protected abstract bool TryEncodeValue(Span<byte> destination, out int bytesWritten);\r\n    }\r\n    public sealed partial class CertBag : Pkcs12SafeBag\r\n    {\r\n        public CertBag(Oid certificateType, ReadOnlyMemory<byte> encodedCertificate, bool skipCopy=false) : base(null) => throw null;\r\n        public bool IsX509Certificate { get; }\r\n        public ReadOnlyMemory<byte> EncodedCertificate { get; }\r\n        public Oid GetCertificateType() => throw null;\r\n        public X509Certificate2 GetCertificate() => throw null;\r\n        protected override bool TryEncodeValue(Span<byte> destination, out int bytesWritten) => throw null;\r\n    }\r\n    public sealed partial class KeyBag : Pkcs12SafeBag\r\n    {\r\n        public KeyBag(ReadOnlyMemory<byte> pkcs8PrivateKey, bool skipCopy=false) : base(null) { }\r\n        public ReadOnlyMemory<byte> Pkcs8PrivateKey { get; }\r\n        protected override bool TryEncodeValue(Span<byte> destination, out int bytesWritten) => throw null;\r\n    }\r\n    public sealed partial class SafeContentsBag : Pkcs12SafeBag\r\n    {\r\n        private SafeContentsBag() : base(null) { }\r\n        protected override bool TryEncodeValue(Span<byte> destination, out int bytesWritten) => throw null;\r\n        public Pkcs12SafeContents SafeContents { get; }\r\n        public static SafeContentsBag CreateEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan<byte> passwordBytes, PbeParameters pbeParameters) => throw null;\r\n        public static SafeContentsBag CreateEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan<char> password, PbeParameters pbeParameters) => throw null;\r\n        public static SafeContentsBag CreateUnencrypted(Pkcs12SafeContents contents) => throw null;\r\n    }\r\n    public sealed partial class SecretBag : Pkcs12SafeBag\r\n    {\r\n        private SecretBag() : base(null) { }\r\n        public Oid GetSecretType() => throw null;\r\n        public ReadOnlyMemory<byte> SecretValue { get; }\r\n        protected override bool TryEncodeValue(Span<byte> destination, out int bytesWritten) => throw null;\r\n    }\r\n    public sealed partial class ShroudedKeyBag : Pkcs12SafeBag\r\n    {\r\n        public ShroudedKeyBag(ReadOnlyMemory<byte> encryptedPkcs8PrivateKey, bool skipCopy=false) : base(null) { }\r\n        public ReadOnlyMemory<byte> EncryptedPkcs8PrivateKey { get; }\r\n        protected override bool TryEncodeValue(Span<byte> destination, out int bytesWritten) => throw null;\r\n    }\r\n}\r\n```"},{"Id":"7964905032","Type":"PullRequestEvent","CreatedAt":"2018-07-14T00:30:13","Actor":"yujayee","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31065","RelatedDescription":"Opened pull request \"Fix race conditions in DatataContractSerialization\" (#31065) at dotnet/corefx","RelatedBody":"Fixes #30651\r\n@mconnew @huanwu @Lxiamail "},{"Id":"7964887310","Type":"PullRequestEvent","CreatedAt":"2018-07-14T00:19:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31059","RelatedDescription":"Merged pull request \"Fix TransformManyBlock's EnsureOrdered=false to not hold lock while iterating\" (#31059) at dotnet/corefx","RelatedBody":"When EnsureOrdered is set to false (the default is true) and the max degree of parallelism isn't 1 (meaning it allows for parallelism), TransformManyBlock doesn't employ a reordering buffer but needs to then ensure that the collection it writes the results of the transform to is accessed in a thread-safe manner, so it takes a lock.  Currently it takes the lock around the whole enumeration of the result.  While that avoids lots of locking/unlocking for cases where the enumerable produces all of its results very quickly, it causes problems when the enumerable may be slow to produce results, as it then ends up serializing the processing of all of the enumerables.  The fix is simply to take the lock if it's needed only while adding to the target collection, not while iterating the enumerable.\r\n\r\nThis change does have a small breaking change potential, in that it's possible someone could have set parallelism to > 1 and set EnsureOrdered to false, and then relied on the lock that was being taken exactly for its serialization, in order to make their delegate effectively thread-safe.  But a) EnsureOrdered is a relatively new feature and this setting isn't the default, b) if you've set parallelism to something other than 1, by design you're asking for your delegate to run concurrently with itself.  So the chances of actually breaking something with this bug fix are minimal.\r\n\r\ncc: @tarekgh, @kouvel "},{"Id":"7964844142","Type":"PullRequestEvent","CreatedAt":"2018-07-13T23:58:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31060","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#31060) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7964843323","Type":"PullRequestEvent","CreatedAt":"2018-07-13T23:58:12","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31025","RelatedDescription":"Merged pull request \"Factor out large generic additions in System.Linq for uap build\" (#31025) at dotnet/corefx","RelatedBody":"New generic types in System.Linq are causing significant size-on-disk increases in AOT builds of some apps that make heavy use of LINQ.  This PR addresses some of the key changes:\r\n\r\n- The many implementations of `IPartition<T>` and `IIListProvider<T>` are causing a significant number of generic instantations.  I've factored out the majority of those large changes to only be used in a netcoreapp build, not in a uap build.  There are still code paths that test whether an object is `IPartition<T>` or `IIListProvider<T>`, but there are no types now in the uap build that implement them, so those checks are nops.  This does mean that there are still generic instantiations generated for those interfaces, but the bulk of the impact came from the types that implemented them and everything they brought in.\r\n- As part of this, I replaced several places where `EmptyPartition<TResult>.Instance` was being used directly to implement an `IEnumerable<T>`, changed them to use `Enumerable.Empty<T>`, and then changed `Enumerable.Empty<T>` so that on netcoreapp it returns `EmptyPartition<TResult>.Instance`, and on uap it returns `Array.Empty<T>`.  This does mean now that code paths lighting-up on partitions will also light-up on `Enumerable.Empty<T>`.  It also means that I changed the empty partition's `IEnumerator.Reset` method to be a nop instead of throwing, to match the same behavior as array's `IEnumerator.Reset`.\r\n- `LargeArrayBuilder` uses `T[][]`, which introduces lots of new array types and corresponding interface instantiations, helper types, etc.  I've specialized `LargeArrayBuilder` in the uap build to just be a thin wrapper around `ArrayBuilder`; we still end up with unnecessary instantiations of `LargeArrayBuilder`, but they're relatively small, and it saves everything to do with those T[][] instantiations while also avoiding having to special case all of the various usage sites of `LargeArrayBuilder`.\r\n\r\nFor one sizeable app, these changes represent an ~10% reduction in total size-on-disk for the whole app.\r\n\r\nI went back and forth on whether to use ifdefs with compilation constants or whether to use partial files, and decided on the latter, but if there's a strong preference for the former, let me know and I can switch.  ifdefs make a few things easier (e.g. we could then also remove some of the `s is IPartition<T>` checks that remain as nops) but end up with lots of ifdef'ing being littered throughout the codebase, whereas for the most part, the partial files approach keeps things very clean, with only a couple cases where workarounds were needed.\r\n\r\ncc: @OmarTawfik, @VSadov, @JonHanna, @jamesqo, @danmosemsft, @MichalStrehovsky, @jkotas"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7965196982","Type":"PullRequestEvent","CreatedAt":"2018-07-14T04:34:57","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28516","RelatedDescription":"Merged pull request \"Code cleanup in VisualStudioInstanceFactory found during integration test work\" (#28516) at dotnet/roslyn","RelatedBody":"* Remove `_hasCurrentlyActiveContext` (was never set to true, so it served no real purpose)\r\n* Only reset the experimental instance the first time Visual Studio is launched in an integration test run\r\n* Stay on the STA thread when launching instances of Visual Studio\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7965196133","Type":"PullRequestEvent","CreatedAt":"2018-07-14T04:34:03","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28512","RelatedDescription":"Merged pull request \"Move IntegrationService (used by integration tests) to its own project\" (#28512) at dotnet/roslyn","RelatedBody":"This change removes the need for **VisualStudioIntegrationTestSetup** to reference and deploy **VisualStudioIntegrationTestUtilities**, which was causing assembly unification problems when debugging tests under the new test harness.\r\n\r\nThis small change is being sent separately so it can be accounted for in #28270.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7965182204","Type":"IssuesEvent","CreatedAt":"2018-07-14T04:19:58","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28535","RelatedDescription":"Opened issue \"VB: Autocomplete does not work for XML elements nested immediately inside elements with computed names.\" (#28535) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis may be related to #28534 (I noticed it shortly after filing that issue). Type the following code into a VB project:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Public Sub Main()\r\n    Dim xml = <<%= \"foo\" %>>\r\n                'elements nested here will NOT have autocompletion for closing tags\r\n              </>\r\n\r\n    Dim yml = <bar>\r\n                'elements nested here WILL have autocompletion for closing tags\r\n              </bar>\r\n\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nAs mentioned by the text in the XML literals above, when an outer XML literal has a literal name like `<bar>`, any nested elements in it WILL have autocompletion for their closing tags, as expected. So inside `<bar> ... </bar>` if you were to type something like `<baz>` the editor will automatically insert `</baz>`:\r\n\r\n```vb\r\n    Dim yml = <bar>\r\n                'elements nested here WILL have autocompletion for closing tags\r\n\r\n                <baz>\r\n                  'closing tag was autocompleted for this element.\r\n                </baz>\r\n              </bar>\r\n```\r\n\r\n**However trying the same thing inside an XML literal with a computed name, you just end up with the opening tag you typed manually, the editor does NOT create the closing tag as expected**:\r\n\r\n```vb\r\n    Dim xml = <<%= \"foo\" %>>\r\n                'elements nested here will NOT have autocompletion for closing tags \r\n                <baz>\r\n                    'editor should have created the closing tag for the nested element baz above\r\n                </>\r\n```\r\n\r\nPressing enter after typing `<baz>` above causes the closing`</>` tag to be indented almost as if the editor thinks it matches with `<baz>` instead of the outer literal `<foo>` which has a computed name.\r\n\r\nInterestingly enough, it appears the `</>` tag is causing the editor to trip up, because if you nest an element with a regular closing tag, then try to nest another element inside THAT, autocomplete will add closing tags as expected:\r\n\r\n```vb\r\n    Dim xml = <<%= \"foo\" %>>\r\n                <baz>\r\n                 'elements nested here WILL have autocompletion for closing tags\r\n                 'it seems to depend on whether the parent element has a computed name or not\r\n                </baz>\r\n              </>\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nAutocompletion for XML closing tags of nested elements should work regardless of whether the parent element has a literal name or computed name.\r\n\r\nPS: this was a bit tricky to explain, if needed I can try again with step by step screenshots like in #28534.\r\n\r\nPPS: now that Microsoft owns Github, it would be nice to see colour-coding support for all features of VB code typed into these issues (e.g. XML literals are not supported at all right now)."},{"Id":"7965108664","Type":"IssuesEvent","CreatedAt":"2018-07-14T03:10:52","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28534","RelatedDescription":"Opened issue \"VB: Autocomplete produces incorrect closing tag for XML literals with computed names.\" (#28534) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nSuppose you want to type the XML literal `<foo></foo>`. So you type the opening tag name until `<foo`:\r\n\r\n![vs_xml_autocomplete_1](https://user-images.githubusercontent.com/20465797/42720200-858e3920-872b-11e8-8280-73fcc1665f42.png)\r\n\r\nWhen you type the closing `>` the editor handily autocompletes the closing tag `</foo>` so you end up with:\r\n\r\n![vs_xml_autocomplete_2](https://user-images.githubusercontent.com/20465797/42720214-b03fa4b0-872b-11e8-9ddf-799c70bf0fc8.png)\r\n\r\nHowever if the name of the tag is computed by an expression and you type:\r\n\r\n![vs_xml_autocomplete_3](https://user-images.githubusercontent.com/20465797/42720221-d745e27c-872b-11e8-87df-c1221fcf07c9.png)\r\n\r\n...then followed by the closing `>`, autocomplete kicks in for the closing tag like before, but it duplicates the expression and uses it as the closing tag, which is an error:\r\n\r\n![vs_xml_autocomplete_4](https://user-images.githubusercontent.com/20465797/42720232-ffc1989a-872b-11e8-8cd4-735db2465a39.png)\r\n\r\n**Expected Behavior**:\r\n\r\nThe closing tag for elements with a computed name is `</>` and that's what the editor should produce for correct results:\r\n\r\n![vs_xml_autocomplete_5](https://user-images.githubusercontent.com/20465797/42720244-552ec1a4-872c-11e8-9c24-1bbc0fe14ae5.png)\r\n"},{"Id":"7964961632","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:08:26","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28259","RelatedDescription":null,"RelatedBody":"PR for personal review only."},{"Id":"7964961562","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:08:23","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28259","RelatedDescription":"Closed pull request \"[WIP] Update range branch\" (#28259) at dotnet/roslyn","RelatedBody":"PR for personal review only."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7965219342","Type":"PullRequestEvent","CreatedAt":"2018-07-14T04:57:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6091","RelatedDescription":"Merged pull request \"Make Decimal a readonly struct\" (#6091) at dotnet/corert","RelatedBody":"This fixes #4994 and contributes to https://github.com/dotnet/coreclr/issues/18249"},{"Id":"7965219339","Type":"IssuesEvent","CreatedAt":"2018-07-14T04:57:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4994","RelatedDescription":"Closed issue \"Errors on Unix when changing decimal to explicit layout\" (#4994) at dotnet/corert","RelatedBody":"_From @stephentoub on November 22, 2017 5:13_\n\nAs part of unifying decimal's formatting code between coreclr and corert, @jkotas suggested I make decimal have an explicit layout, as it is in corert.  In doing so, a handful of JIT tests started failing:\r\n```\r\nJIT.Directed.coverage.oldtests.lclfldadd_cs_r.lclfldadd_cs_r\r\nJIT.Directed.perffix.primitivevt.mixed1_cs_ro.mixed1_cs_ro\r\nJIT.Methodical.fp.exgen.1000w1d_cs_r.1000w1d_cs_r\r\nJIT.Methodical.fp.exgen.1000w1d_cs_ro.1000w1d_cs_ro\r\nJIT.Methodical.fp.exgen.1000w1d_cs_do.1000w1d_cs_do\r\nJIT.Methodical.fp.exgen.1000w1d_cs_d.1000w1d_cs_d\r\nJIT.Methodical.fp.exgen.10w5d_cs_d.10w5d_cs_d\r\nJIT.Methodical.fp.exgen.10w5d_cs_do.10w5d_cs_do\r\nJIT.Methodical.fp.exgen.10w5d_cs_ro.10w5d_cs_ro\r\nJIT.Methodical.fp.exgen.200w1d-02_cs_do.200w1d-02_cs_do\r\nJIT.Methodical.fp.exgen.10w5d_cs_r.10w5d_cs_r\r\nJIT.Methodical.fp.exgen.200w1d-02_cs_ro.200w1d-02_cs_ro\r\nJIT.Directed.perffix.primitivevt.mixed1_cs_do.mixed1_cs_do\r\n```\r\nThe failures would seem to indicate a JIT/runtime bug, as they're frequently eminating from code other than decimal, suggesting that something is getting corrupted, e.g.\r\n```\r\nFAILED   - JIT/Methodical/fp/exgen/200w1d-02_cs_ro/200w1d-02_cs_ro.sh\r\n               BEGIN EXECUTION\r\n               /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu_tst_prtest/bin/tests/Windows_NT.x64.Checked/Tests/coreoverlay/corerun 200w1d-02_cs_ro.exe\r\n\r\n               Unhandled Exception: System.OverflowException: Value was either too large or too small for an Int32.\r\n                  at System.Convert.ThrowInt32OverflowException()\r\n                  at System.Convert.ToInt32(Int64 value)\r\n                  at testout1.Func_0()\r\n                  at testout1.Main()\r\n               ./200w1d-02_cs_ro.sh: line 243: 101339 Aborted                 (core dumped) $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\nThese failures are only occurring on Unix.\r\n\r\nHere's the commit that undoes the explicit layout; reverting this commit yields the failures.\r\nhttps://github.com/dotnet/coreclr/pull/15145/commits/dc35586ecd37be9d2517244175da8b84a1237005\n\n_Copied from original issue: dotnet/coreclr#15159_"},{"Id":"7964496781","Type":"PullRequestEvent","CreatedAt":"2018-07-13T21:45:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6093","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6093) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7962265640","Type":"PullRequestEvent","CreatedAt":"2018-07-13T13:48:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6092","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#6092) at dotnet/corert","RelatedBody":""},{"Id":"7962264684","Type":"PullRequestEvent","CreatedAt":"2018-07-13T13:47:59","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6092","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#6092) at dotnet/corert","RelatedBody":""},{"Id":"7959367158","Type":"PullRequestEvent","CreatedAt":"2018-07-13T00:18:17","Actor":"pentp","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6091","RelatedDescription":"Opened pull request \"Make Decimal a readonly struct\" (#6091) at dotnet/corert","RelatedBody":"This fixes #4994 and contributes to https://github.com/dotnet/coreclr/issues/18249"},{"Id":"7955449970","Type":"PullRequestEvent","CreatedAt":"2018-07-12T10:47:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6090","RelatedDescription":"Merged pull request \"Enable ThreadStatic GC layout test\" (#6090) at dotnet/corert","RelatedBody":"This was not enabled because at the time the test was written, `IsThreadStatic` was a lie. It would have caught #6041 in a much cheaper way if we haven't forgotten to enable it when thread statics were brought up."},{"Id":"7954575673","Type":"PullRequestEvent","CreatedAt":"2018-07-12T08:01:05","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6090","RelatedDescription":"Opened pull request \"Enable ThreadStatic GC layout test\" (#6090) at dotnet/corert","RelatedBody":"This was not enabled because at the time the test was written, `IsThreadStatic` was a lie. It would have caught #6041 in a much cheaper way if we haven't forgotten to enable it when thread statics were brought up."},{"Id":"7954536965","Type":"PullRequestEvent","CreatedAt":"2018-07-12T07:52:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6089","RelatedDescription":"Merged pull request \"Fix size of thread-local statics blocks\" (#6089) at dotnet/corert","RelatedBody":"Fixes #6041"},{"Id":"7953927929","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:51:03","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5922","RelatedDescription":"Closed issue \"NullReferenceException in CancellationTokenSource.InternalRegister\" (#5922) at dotnet/corert","RelatedBody":"I'm hitting a NRE in `CancellationTokenSource.InternalRegister` on macOS. Not sure how to debug it though.\r\n\r\n```cs\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1, Object, SynchronizationContext, ExecutionContext) + 0x205\r\n   at System.Threading.CancellationToken.Register(Action`1, Object, Boolean, Boolean) + 0xd7\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken) + 0x7f\r\n   at System.Threading.CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken) + 0xe9\r\n   at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) + 0xe9\r\n```\r\n"},{"Id":"7953921969","Type":"IssuesEvent","CreatedAt":"2018-07-12T04:48:21","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6041","RelatedDescription":"Closed issue \"Odd threading behavior - Thread.CurrentThread.ManagedThreadId != Environment.ManagedThreadId\" (#6041) at dotnet/corert","RelatedBody":"I'm getting a `The write lock is being released without being held` exception when exiting write mode on a `ReaderWriterLockSlim` on macOS.\r\n\r\nDebugging this issue has led me to conclude, that apparently my call to`ExitWriteLock` happens on a different thread than where I started, albeit in a weird way.\r\n\r\nWhen I debug it, `Thread.CurrentThread.ManagedThreadId` will indicate I'm still on thread 1 where I acquired the lock, but `Environment.ManagedThreadId` which is what `ReaderWriterLockSlim` uses, indicates I'm on thread 6.\r\nThis does not seem to happen on CoreCLR.\r\n\r\nThe code paths involved do not include any calls to Thread.Start or asynchronous Task code. It really all should be happening on the same thread (which `Thread.CurrentThread.ManagedThreadId` also seems to indicate is true).\r\nThe rest of the app does have asynchronous Task code though.\r\n\r\nUnfortunately, I haven't yet been able to make a repro case. It does seem to make a difference though if GC is invoked between the calls to EnterWriteLock and ExitWriteLock.\r\nAny ideas as how to better debug this?\r\n\r\n\r\nThis is basically what I'm doing, but I don't think this helps much.\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\n\r\nnamespace Test\r\n{\r\n\r\n    public struct WriteLock : IDisposable\r\n    {\r\n        private readonly LockManager lockManager;\r\n\r\n        internal WriteLock(LockManager lockManager)\r\n        {\r\n            this.lockManager = lockManager;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.lockManager.ReleaseWriteLock();\r\n        }\r\n    }\r\n\r\n    public class LockManager : IDisposable\r\n    {\r\n        private ReaderWriterLockSlim readerWriterLock;\r\n\r\n        public LockManager()\r\n        {\r\n            this.readerWriterLock = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);\r\n        }\r\n\r\n        public IDisposable AcquireWriteLock()\r\n        {\r\n            // Enter the lock\r\n            if (!this.readerWriterLock.TryEnterWriteLock(-1))\r\n            {\r\n                throw new Exception(\"Could not enter write lock\");\r\n            }\r\n            Console.WriteLine(\"Entered write lock: \" + Thread.CurrentThread.ManagedThreadId);\r\n\r\n            // Return a new instance of a write lock\r\n            return new WriteLock(this);\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            this.Dispose(true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        internal void ReleaseReadLock()\r\n        {\r\n            this.readerWriterLock.ExitReadLock();\r\n        }\r\n\r\n        internal void ReleaseWriteLock()\r\n        {\r\n            this.readerWriterLock.ExitWriteLock();\r\n        }\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            Console.WriteLine(\"Disposing lock manager... disposing: \" + disposing);\r\n            if (disposing)\r\n            {\r\n                if (this.readerWriterLock != null)\r\n                {\r\n                    this.readerWriterLock.Dispose();\r\n                    this.readerWriterLock = null;\r\n                }\r\n            }\r\n        }   \r\n  \r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            using (var lockMan = new LockManager())\r\n            using (var locky = lockMan.AcquireWriteLock())\r\n            {\r\n                //Lots of stuff happening in here. No Task awaits though...\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n"},{"Id":"7953850491","Type":"PullRequestEvent","CreatedAt":"2018-07-12T04:16:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6089","RelatedDescription":"Opened pull request \"Fix size of thread-local statics blocks\" (#6089) at dotnet/corert","RelatedBody":"Fixes #6041"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7964955325","Type":"PullRequestEvent","CreatedAt":"2018-07-14T01:03:41","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2401","RelatedDescription":"Opened pull request \"In tests, use .NET Framework reference assembly packages if targeting pack is not installed\" (#2401) at dotnet/sdk","RelatedBody":"This should fix issues we've had with test failures on agents that don't have the .NET 4.7.2 targeting pack installed."},{"Id":"7964882619","Type":"PullRequestEvent","CreatedAt":"2018-07-14T00:17:05","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2391","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.8.0-preview5.5328 into sdk\" (#2391) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview5.5328 into sdk release/2.1.4xx branch"},{"Id":"7964714659","Type":"IssuesEvent","CreatedAt":"2018-07-13T22:59:25","Actor":"robmen","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2400","RelatedDescription":"Opened issue \"dotnet publish of net461 does not copy native assets but netcoreapp2.1 will\" (#2400) at dotnet/sdk","RelatedBody":"I have a managed .nupkg (WixToolset.Core.Native) that depends on a .nupkg with native assets (runtime.win.WixToolset.Core.Native). The native assets are in `runtimes\\win\\native`.\r\n\r\nI have two other projects that consume the WixToolset.Core.Native.nupkg. One project is `netcoreapp2.1` and one is `net461`. When publishing the `netcoreapp2.1` project all of the assets from `runtimes\\win\\native` are copied. When publishing the `net461` project none of the native assets are copied.\r\n\r\nThe following will demonstrate the above behavior: \r\n\r\n1. Clone https://github.com/wixtoolset/Core.git \r\n2. Run \"appveyor.cmd\"\r\n3. Note present build\\Release\\publish\\netcoreapp2.1\\wixnative.*.exe\r\n4. Note missing build\\Release\\publish\\net461\\wixnative.*.exe\r\n\r\n @nick_guerrera (Twitter) suggested opening this issue after discussing in this thread: https://twitter.com/nick_guerrera/status/1017903818367881216"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":20,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":95,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":87,"FavoriteCount":78,"RawContent":null},{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":351,"FavoriteCount":168,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":128,"FavoriteCount":92,"RawContent":null}]}},"RunOn":"2018-07-14T05:30:34.3534751Z","RunDurationInMilliseconds":8484}