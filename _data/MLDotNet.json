{"Data":{"GitHub":{"Issues":[{"Id":"415945768","IsPullRequest":true,"CreatedAt":"2019-03-01T05:18:11","Actor":"Anipik","Number":"2812","RawContent":null,"Title":"Message related to missing models improved in DNNImageFeaturizers.","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2784\r\n\r\n\r\nNew error msg \r\n```\r\n[28-02-2019 21:12:14 Error] [xUnit.net 00:00:01.96]     Microsoft.ML.Tests.DnnImageFeaturizerTests.OnnxStatic [FAIL]\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]       System.IO.IOException : Model file path C:\\git\\machinelearning\\bin\\AnyCPU.Debug\\Microsoft.ML.OnnxTransformerTest\\netcoreapp2.1\\DnnImageModels1\\ResNetPrepOnnx\\ResNetPreprocess.onnx doesnot exists.\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]       Stack Trace:\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs(744,0): at Microsoft.ML.Contracts.CheckIO(IExceptionContext ctx, Boolean f, String msg, Object[] args)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(168,0): at Microsoft.ML.Transforms.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(252,0): at Microsoft.ML.Transforms.OnnxTransformer..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(544,0): at Microsoft.ML.Transforms.OnnxScoringEstimator..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.DnnImageFeaturizer.ResNet1\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2812","RelatedDescription":"Open PR \"Message related to missing models improved in DNNImageFeaturizers.\" (#2812)"},{"Id":"415928781","IsPullRequest":true,"CreatedAt":"2019-03-01T03:46:32","Actor":"jwood803","Number":"2811","RawContent":null,"Title":"Read and write binary file documentation","State":"open","Body":"Fix for #1767.\r\n\r\n@GalOshri, I took a stab at this. I figured a sample and included snippets in the cookbook would be a good start.","Url":"https://github.com/dotnet/machinelearning/pull/2811","RelatedDescription":"Open PR \"Read and write binary file documentation\" (#2811)"},{"Id":"415911044","IsPullRequest":false,"CreatedAt":"2019-03-01T02:23:06","Actor":"prathyusha12345","Number":"2810","RawContent":null,"Title":"IRISClassification sample -MultiLabel calssification : Getting exception while referring slotnames","State":"open","Body":"\r\n### Issue\r\nI am trying to do multilabel classification on IRISClassification. I am referring to this link https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/Scenarios/Api/Estimators/PredictAndMetadata.cs#L41\r\n\r\nWhile I am running the code I am getting below exception 'Invalid call to 'GetGetter'' while accessing slotnames.\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/53612079-bbdca700-3b85-11e9-968a-e0fc5e4b19c7.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2810","RelatedDescription":"Open issue \"IRISClassification sample -MultiLabel calssification : Getting exception while referring slotnames\" (#2810)"},{"Id":"415904137","IsPullRequest":true,"CreatedAt":"2019-03-01T01:50:41","Actor":"Anipik","Number":"2809","RawContent":null,"Title":"correcting path construction when Resnet projets are consumed as a nuget package","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2785\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2809","RelatedDescription":"Open PR \"correcting path construction when Resnet projets are consumed as a nuget package\" (#2809)"},{"Id":"415903032","IsPullRequest":true,"CreatedAt":"2019-03-01T01:45:28","Actor":"singlis","Number":"2808","RawContent":null,"Title":"Scrub changes for LightGBM","State":"open","Body":"Api clean up for LightGBM. The cleanup includes:\r\n- Changing all abbreviated parameters to full names (i.e. numThreads->NumberOfThreads)\r\n- Updating column parameters to have Name if thats what they represent\r\n(LabelColumn->LabelColumnName).\r\n- Updated baseline files to reflect these changes which are semantical\r\nand should not have any computational difference.\r\n\r\nThis fixes #2618 (related to FastTree and GAM in #2617)","Url":"https://github.com/dotnet/machinelearning/pull/2808","RelatedDescription":"Open PR \"Scrub changes for LightGBM\" (#2808)"},{"Id":"415898219","IsPullRequest":true,"CreatedAt":"2019-03-01T01:23:05","Actor":"wschin","Number":"2807","RawContent":null,"Title":"Make accessor of linear coefficients unique to the public","State":"open","Body":"To fix #2763, we plan to hide one accessor in `LinearModelParameters` which is\r\n```csharp\r\nvolid GetFeatureWeights(ref VBuffer<float> weights)\r\n```\r\nand make the its containing interface a best friend.\r\n```csharp\r\ninternal interface IHaveFeatureWeights\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2807","RelatedDescription":"Open PR \"Make accessor of linear coefficients unique to the public\" (#2807)"},{"Id":"415885683","IsPullRequest":false,"CreatedAt":"2019-03-01T00:27:28","Actor":"daholste","Number":"2806","RawContent":null,"Title":"My data view has a label column named 'Score'","State":"open","Body":"My data view has a label column named 'Score'\r\n\r\nIs there any way to have trainers output scores to a column other than the default 'Score'?\r\n\r\nThis may also apply to 'PredictedLabel'. Not sure if there are others","Url":"https://github.com/dotnet/machinelearning/issues/2806","RelatedDescription":"Open issue \"My data view has a label column named 'Score'\" (#2806)"},{"Id":"415873095","IsPullRequest":false,"CreatedAt":"2019-02-28T23:36:53","Actor":"singlis","Number":"2805","RawContent":null,"Title":"OneVersusAll calibrator for naturally calibrated models","State":"open","Body":"This question came up during a code review of some changes to the One Versus All (OVA) Trainer. The OVA Trainer takes in a calibrator. If one is not specified, the PlattCalibrator is then used. After looking at the code, it looks like the calibrator is attached to each model instance that the OVA Trainer evaluates. \r\n\r\nThe question is what happens when you are using a naturally calibrated mode like logistic regression? Can this produce unexpected results?","Url":"https://github.com/dotnet/machinelearning/issues/2805","RelatedDescription":"Open issue \"OneVersusAll calibrator for naturally calibrated models\" (#2805)"},{"Id":"415868052","IsPullRequest":true,"CreatedAt":"2019-02-28T23:17:51","Actor":"Ivanidzo4ka","Number":"2804","RawContent":null,"Title":"[WIP] One type label policy in trainers","State":"open","Body":"Waiting for build system to get information regarding tests. This PR fixes #2628 and fixes #2750.\r\n\r\nWe probably need discuss ranking case.","Url":"https://github.com/dotnet/machinelearning/pull/2804","RelatedDescription":"Open PR \"[WIP] One type label policy in trainers\" (#2804)"},{"Id":"415865454","IsPullRequest":true,"CreatedAt":"2019-02-28T23:08:19","Actor":"rogancarr","Number":"2803","RawContent":null,"Title":"Add V1 Scenario tests for data transformation","State":"open","Body":"Fixes #2711 \r\nTowards #2498 \r\n\r\n* Extensible transformation: It should be possible to write simple row-mapping transforms.\r\n  Examples: \"I can add custom steps to my pipeline such as creating a new column that is the addition of two other columns, or easily add cosine similarity, without having to create my own build of ML.NET.\r\n* I can modify settings in the TextFeaturizer to update the number of word-grams and char-grams used along with things like the normalization.\r\n* I can apply normalization to the columns of my data","Url":"https://github.com/dotnet/machinelearning/pull/2803","RelatedDescription":"Open PR \"Add V1 Scenario tests for data transformation\" (#2803)"},{"Id":"415855951","IsPullRequest":false,"CreatedAt":"2019-02-28T22:37:34","Actor":"rogancarr","Number":"2802","RawContent":null,"Title":"TextFeaturizer cannot specify n-grams for words or characters","State":"open","Body":"One of the stated goals of the V1 API was:\r\n* I can modify settings in the `TextFeaturizer` to update the number of word-grams and char-grams used along with things like the normalization.\r\n\r\nIn the current API for `TextFeaturizer`, it is possible to create n-grams from words and/or characters (`UseCharExtrator`, `UseWordExtractor`) but it is not possible to specify what sorts of n-grams to make.\r\n\r\nRelated to #2711 ","Url":"https://github.com/dotnet/machinelearning/issues/2802","RelatedDescription":"Open issue \"TextFeaturizer cannot specify n-grams for words or characters\" (#2802)"},{"Id":"415850935","IsPullRequest":false,"CreatedAt":"2019-02-28T22:22:19","Actor":"rogancarr","Number":"2801","RawContent":null,"Title":"TextFeaturizer API is non-standard","State":"open","Body":"When specifying the input columns, `TextFeaturizer` specifies an `IEnumerable<string>`. The standard in the API is to specify a `string[]`.\r\n\r\nThis API should be updated to be consistent with the others. If we prefer `IEnumerable`, then we should switch all the other APIs.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2801","RelatedDescription":"Open issue \"TextFeaturizer API is non-standard\" (#2801)"},{"Id":"415795587","IsPullRequest":true,"CreatedAt":"2019-02-28T19:52:52","Actor":"codemzs","Number":"2800","RawContent":null,"Title":"Rename HalLearners assembly and nuget to Microsoft.ML.Mkl.Components.","State":"open","Body":"fixes #2756\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2800","RelatedDescription":"Open PR \"Rename HalLearners assembly and nuget to Microsoft.ML.Mkl.Components.\" (#2800)"},{"Id":"415785190","IsPullRequest":true,"CreatedAt":"2019-02-28T19:26:20","Actor":"sfilipi","Number":"2799","RawContent":null,"Title":"Adding a sample for the OnnxCatalog.DnnFeaturizeImage extension","State":"open","Body":"Adding to #1209 an example for OnnxCatalog.DnnFeaturizeImage\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2799","RelatedDescription":"Open PR \"Adding a sample for the OnnxCatalog.DnnFeaturizeImage extension\" (#2799)"},{"Id":"415760739","IsPullRequest":false,"CreatedAt":"2019-02-28T18:24:16","Actor":"lisahua","Number":"2798","RawContent":null,"Title":"Normalize double min and max value returns NaN","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.6.2, Win 10\r\n- **.NET Version (eg., dotnet --info)**: ML.Net nuget 0.10.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** Input data has a double columns with (double.min, double.max, <100 random numbers from 0 to 10000>), I call \r\n```\r\n            var normalizeColumns = numericalFeatures.Select(\r\n                f => new NormalizingEstimator.MeanVarColumn(f.Name, fixZero: false, useCdf: false)).ToArray();\r\n            var normalizingEstimator = this.context.Transforms.Normalize(normalizeColumns);\r\n```\r\nI see a feature in transformedData.Preview, which is all NaN, for each row. I use SDCA trainer\r\n\r\n- **What happened?** \r\n\r\nThe `pipeline.Fit(transformedData)` fails and throw an exception say \"train with 0 instances\"\r\n\r\n- **What did you expect?**\r\n\r\n1. ML.Net should handle double.min, double.max for NormalizingEstimator?\r\n2. ML.Net should throw a more meaningful exception - \"train with 0 instances\" for a feature with NaN is a bit misleading - I do have 100+ rows for this feature. \r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2798","RelatedDescription":"Open issue \"Normalize double min and max value returns NaN\" (#2798)"},{"Id":"415750225","IsPullRequest":true,"CreatedAt":"2019-02-28T17:56:48","Actor":"codemzs","Number":"2797","RawContent":null,"Title":"Clean up of cancellation mechanism.","State":"open","Body":"fixes #2795","Url":"https://github.com/dotnet/machinelearning/pull/2797","RelatedDescription":"Open PR \"Clean up of cancellation mechanism.\" (#2797)"},{"Id":"415748146","IsPullRequest":true,"CreatedAt":"2019-02-28T17:52:03","Actor":"sfilipi","Number":"2796","RawContent":null,"Title":"Replace predicate with an IEnumerable<DataViewSchema.Column> for IRowToRowMapper.GetRow and  ISchemaBoundRowMapper.GetRow","State":"open","Body":"Closes #1529 \r\n\r\nNote to reviewers: The first commit does all the replacement work. \r\nThe second commit, has more files on it, because it deals with renaming the col to columnIndex in the other two methods of IDataView (@eerhardt comment on #1529)\r\nThe third commit is me reviewing the first commit, and making sure that GetRow is an explicit implementation everywhere. \r\n\r\nI have had most of the work on this PR done before breaking ISchemaBoundRowMapper deriving from IRowToRowMapper; so I kept the signature change of ISchemaBoundRowMapper.GetRow although that interface is internal. LMK if that is not desirable. ","Url":"https://github.com/dotnet/machinelearning/pull/2796","RelatedDescription":"Open PR \"Replace predicate with an IEnumerable<DataViewSchema.Column> for IRowToRowMapper.GetRow and  ISchemaBoundRowMapper.GetRow\" (#2796)"},{"Id":"415745269","IsPullRequest":false,"CreatedAt":"2019-02-28T17:45:04","Actor":"Ivanidzo4ka","Number":"2795","RawContent":null,"Title":"HostEnvironment StopExecution method removal","State":"open","Body":"Some time ago I added `StopExecution` method and `IsCancelled` flag to IHost.\r\nhttps://github.com/dotnet/machinelearning/blob/fbf282d982223a51cf6e4a9ad9f3f036e0f150ca/src/Microsoft.ML.Core/Data/IHostEnvironment.cs#L98\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/fbf282d982223a51cf6e4a9ad9f3f036e0f150ca/src/Microsoft.ML.Core/Data/IHostEnvironment.cs#L74\r\n\r\nIt was quick solution to make certain algorithms react to stop signal from user. I doubt in long run it's proper way to do it. And it probably required lengthy discussion how to expose stopping functionality (method, or `CancellationToken`, or something else).\r\n\r\nBut for now I think it's a good idea to remove method and flag from our public API. Especially considering what no code actually checking `IsCancelled` flag.","Url":"https://github.com/dotnet/machinelearning/issues/2795","RelatedDescription":"Open issue \"HostEnvironment StopExecution method removal\" (#2795)"},{"Id":"415739041","IsPullRequest":false,"CreatedAt":"2019-02-28T17:29:49","Actor":"wschin","Number":"2794","RawContent":null,"Title":"SamplesUtils is not searchable on doc site and makes ML.NET learning curve sharp","State":"open","Body":"We use `SamplesUtils` project in many examples. However, its functions and classes cannot be found in ML.NET's official doc site. This is not ideal because once a user has a question regarding `SamplesUtils` when learning our API examples, they will be blocked until they clones ML.NET or finds the right nuget package. This makes the learning curve of ML.NET very sharp. Also, please do not expect users have Visual Studio installed, so finding the right solution can be even more painful.","Url":"https://github.com/dotnet/machinelearning/issues/2794","RelatedDescription":"Open issue \"SamplesUtils is not searchable on doc site and makes ML.NET learning curve sharp\" (#2794)"},{"Id":"415733785","IsPullRequest":false,"CreatedAt":"2019-02-28T17:17:32","Actor":"reed-lawrence","Number":"2793","RawContent":null,"Title":"Training/testing models on dynamic types","State":"open","Body":"Using the latest stable 0.10.0 version\r\n\r\nMy training data is laid out in a CSV and is pulled from a SQL DB that transposes and aggregates rows into columns. \r\n\r\nSo at no point is there any guarantee that I know my exact schema of columns, making it impossible to create a C# class definition before running the program.\r\n\r\nHow can I pass in a dynamic type to create the IDataView for example? \r\n\r\n`IDataView trainingDataView = mlContext.Data.ReadFromTextFile<dynamic>(_trainDataPath, hasHeader: true, separatorChar: ',');`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2793","RelatedDescription":"Open issue \"Training/testing models on dynamic types\" (#2793)"},{"Id":"415594847","IsPullRequest":true,"CreatedAt":"2019-02-28T15:48:17","Actor":"jwood803","Number":"2790","RawContent":null,"Title":"Quick fix to XML documentation","State":"closed","Body":"Fix for #2767.","Url":"https://github.com/dotnet/machinelearning/pull/2790","RelatedDescription":"Closed or merged PR \"Quick fix to XML documentation\" (#2790)"},{"Id":"415644575","IsPullRequest":true,"CreatedAt":"2019-02-28T14:16:24","Actor":"Potapy4","Number":"2792","RawContent":null,"Title":"Rename Microsoft.ML.StandardLearners","State":"open","Body":"# Summary\r\nI renamed `StandardLearners` to `StandardTrainers`. If I missed something, please let me know 👌 \r\nFixes #2786 \r\n\r\n---\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.","Url":"https://github.com/dotnet/machinelearning/pull/2792","RelatedDescription":"Open PR \"Rename Microsoft.ML.StandardLearners\" (#2792)"},{"Id":"415602006","IsPullRequest":false,"CreatedAt":"2019-02-28T12:34:39","Actor":"shaykels","Number":"2791","RawContent":null,"Title":"Error when using OnnxTransformer in two AppDomains","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Version\tWindows 10.0.17763\r\n\r\n- **.NET Version (eg., dotnet --info)**:  .Net 4.6.2\r\n\r\n### Issue Error when using OnnxTransformer in two AppDomains\r\n\r\n- **What did you do?** \r\n\r\nI have a (production) application with two AppDomains. \r\nI'm trying to run OnnxTransformer in my code within the AppDomain, and get an error when second AppDomain is invoked. \r\nThe error is easily reproduced in a Console App with two AppDomains (below). \r\n\r\n- **What happened?**\r\n\r\nError is thrown. \r\n\r\nMicrosoft.ML.OnnxRuntime.OnnxRuntimeException: '[ErrorCode:RuntimeException] Only one instance of LoggingManager created with InstanceType::Default can exist at any point in time\r\n\r\n### Source code / logs\r\n\r\nHere is simple code to reproduce the error:\r\n\r\nnamespace MlNetAppDomainErrorRepro\r\n{\r\n    using System;\r\n    using Microsoft.ML;\r\n    using Microsoft.ML.Transforms;\r\n\r\n    class Program\r\n    {\r\n        public static void CreateOnnxTransformer()\r\n        {\r\n            MLContext context = new MLContext();\r\n            OnnxTransformer t = new OnnxTransformer(context, @\"PathToYourModel.onnx\");\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            CreateOnnxTransformer();\r\n\r\n            AppDomain secondAppDomain = AppDomain.CreateDomain(\"SecondAppDomain\"); \r\n\r\n            secondAppDomain.DoCallBack(CreateOnnxTransformer); // error here\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2791","RelatedDescription":"Open issue \"Error when using OnnxTransformer in two AppDomains\" (#2791)"},{"Id":"415498520","IsPullRequest":false,"CreatedAt":"2019-02-28T08:16:37","Actor":"sharpwood","Number":"2789","RawContent":null,"Title":"What is the relationship between this project and the Windows ML project?","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/2789","RelatedDescription":"Open issue \"What is the relationship between this project and the Windows ML project?\" (#2789)"},{"Id":"415460281","IsPullRequest":false,"CreatedAt":"2019-02-28T05:57:58","Actor":"serp777","Number":"2788","RawContent":null,"Title":"When running on WPF GUI thread, very unhelpful error Score column score not found, also found solution","State":"open","Body":"### System information\r\nWindows 10 .net 4.5.2\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nWriting code that is similar to the demand prediction regression example but inside a WPF gui app\r\n\r\n- **What happened?**\r\n\r\nRan into very non-descriptive and unhelpful error Score column score not found during a regression evaluation routine. Looked up information online and none of it was helpful. It looks like score column score not found essentially means undetermined exception. I think unknown exception would be more helpful just so I didn't spend so much time trying to figure out why I was missing a score column.\r\n\r\nWhen running regression evaluation from a button command on a WPF GUI, this error occurs for some reason. It can be solved simply by putting the regression evaluation routine in a Task like:\r\n\r\nTask.Run(() => {\r\nthis.mlContext.Regression.Evaluate().\r\n});\r\n\r\n- **What did you expect?**\r\n\r\nI expect it to not matter if I'm on an STA thread or not. I also expect a helpful error message like ml.net not supported on STA thread, or even just thread exception.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2788","RelatedDescription":"Open issue \"When running on WPF GUI thread, very unhelpful error Score column score not found, also found solution\" (#2788)"},{"Id":"415433234","IsPullRequest":false,"CreatedAt":"2019-02-28T03:43:07","Actor":"bartczernicki","Number":"2787","RawContent":null,"Title":"FastForest - Add Probability for predictions","State":"open","Body":"Add probability response for inference to the Fast Forest algorithm.","Url":"https://github.com/dotnet/machinelearning/issues/2787","RelatedDescription":"Open issue \"FastForest - Add Probability for predictions\" (#2787)"},{"Id":"415389466","IsPullRequest":false,"CreatedAt":"2019-02-28T00:25:41","Actor":"codemzs","Number":"2786","RawContent":null,"Title":"Rename Microsoft.ML.StandardLearners to Microsoft.ML.StandardTrainers.","State":"open","Body":"CC: @TomFinley , @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2786","RelatedDescription":"Open issue \"Rename Microsoft.ML.StandardLearners to Microsoft.ML.StandardTrainers.\" (#2786)"},{"Id":"415383318","IsPullRequest":false,"CreatedAt":"2019-02-28T00:00:39","Actor":"sfilipi","Number":"2785","RawContent":null,"Title":"GetExecutingAssemblyLocation in the DNNImageFeaturizers composes the wrong path","State":"open","Body":"Create a console project, add the MIcrosoft.ML, the Microsoft.Ml.OnnxTransformer and one of the Microsoft.ML.DnnImageFeaturizer packages. \r\n\r\nTry running the following snippet:\r\n\r\n             // Downloading a few images, and an images.tsv file, which contains a list of the files from the dotnet/machinelearning/test/data/images/.\r\n            // If you inspect the fileSystem, after running this line, an \"images\" folder will be created, containing 4 images, and a .tsv file\r\n            // enumerating the images. \r\n            var imagesDataFile = Microsoft.ML.SamplesUtils.DatasetUtils.DownloadImages();\r\n\r\n            // Preview of the content of the images.tsv file\r\n            //\r\n            // imagePath    imageType\r\n            // tomato.bmp   tomato\r\n            // banana.jpg   banana\r\n            // hotdog.jpg   hotdog\r\n            // tomato.jpg   tomato\r\n\r\n            var data = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new[]\r\n                {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.String, 0),\r\n                        new TextLoader.Column(\"Name\", DataKind.String, 1),\r\n                }\r\n            }).Load(imagesDataFile);\r\n\r\n            string codeBaseUri = typeof(Program).Assembly.CodeBase;\r\n            string path = new Uri(codeBaseUri).AbsolutePath;\r\n            var f =  Directory.GetParent(path).FullName;\r\n\r\n            var imagesFolder = Path.GetDirectoryName(imagesDataFile);\r\n            // Image loading pipeline. \r\n            var pipeline = mlContext.Transforms.LoadImages(imagesFolder, (\"ImageObject\", \"ImagePath\"))\r\n                          .Append(mlContext.Transforms.ResizeImages(\"ImageObject\", imageWidth: 224, imageHeight: 224))\r\n                          .Append(mlContext.Transforms.ExtractPixels(\"Pixels\", \"ImageObject\"))\r\n                           //.Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn, @\"C:\\Code\\mlnet2\\machinelearning-1\\bin\\AnyCPU.Debug\\Microsoft.ML.Samples\\netcoreapp2.1\\DnnImageModels\"), \"Pixels\"));\r\n                           .Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"));\r\n\r\n            var transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n            var preview = transformedData.Preview();\r\n\r\nYou'll notice that the program will fail with message:\r\n\r\n`System.ArgumentOutOfRangeException: 'Specified argument was out of the range of valid values. Parameter name: ModelFile'`\r\n\r\nThat is because the Resnet18 extension is looking for the model in the path created by [AssemblyPathHelper](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.DnnImageFeaturizer.AlexNet/AssemblyPathHelpers.cs)\r\n\r\nThe path created points to the  **lib\\netstandard2.0\\DnnImageModels\\**\r\nthe packages actually get downloaded in the  **\\tools\\DnnImageModels**  folder. \r\n\r\nFull path of the folders, inside the downloaded nuget packages. \r\n- constructed:  **microsoft.ml.dnnimagefeaturizer.resnet18\\<version>\\lib\\netstandard2.0\\DnnImageModels\\**\r\n- actual location of the DnnImageModels folder:  **microsoft.ml.dnnimagefeaturizer.resnet18\\<version>\\tools\\DnnImageModels**\r\n\r\nNeed to construct the correct path. ","Url":"https://github.com/dotnet/machinelearning/issues/2785","RelatedDescription":"Open issue \"GetExecutingAssemblyLocation in the DNNImageFeaturizers composes the wrong path\" (#2785)"},{"Id":"415381137","IsPullRequest":false,"CreatedAt":"2019-02-27T23:52:04","Actor":"sfilipi","Number":"2784","RawContent":null,"Title":"Message related to missing models not sufficiently helpful in DNNImageFeaturizers packages","State":"open","Body":"Create a new console project, and try running the following sample:\r\n\r\n\r\n             // Downloading a few images, and an images.tsv file, which contains a list of the files from the dotnet/machinelearning/test/data/images/.\r\n            // If you inspect the fileSystem, after running this line, an \"images\" folder will be created, containing 4 images, and a .tsv file\r\n            // enumerating the images. \r\n            var imagesDataFile = Microsoft.ML.SamplesUtils.DatasetUtils.DownloadImages();\r\n            var data = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new[]\r\n                {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.String, 0),\r\n                        new TextLoader.Column(\"Name\", DataKind.String, 1),\r\n                }\r\n            }).Load(imagesDataFile);\r\n\r\n            string codeBaseUri = typeof(Program).Assembly.CodeBase;\r\n            string path = new Uri(codeBaseUri).AbsolutePath;\r\n            var f =  Directory.GetParent(path).FullName;\r\n\r\n            var imagesFolder = Path.GetDirectoryName(imagesDataFile);\r\n            // Image loading pipeline. \r\n            var pipeline = mlContext.Transforms.LoadImages(imagesFolder, (\"ImageObject\", \"ImagePath\"))\r\n                          .Append(mlContext.Transforms.ResizeImages(\"ImageObject\", imageWidth: 224, imageHeight: 224))\r\n                          .Append(mlContext.Transforms.ExtractPixels(\"Pixels\", \"ImageObject\"))\r\n                           //.Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn, @\"C:\\Code\\mlnet2\\machinelearning-1\\bin\\AnyCPU.Debug\\Microsoft.ML.Samples\\netcoreapp2.1\\DnnImageModels\"), \"Pixels\"));\r\n                           .Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"));\r\n\r\n            var transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n            var preview = transformedData.Preview();\r\n\r\nYou'll notice that the program fails with the following exception:\r\n\r\n`System.ArgumentOutOfRangeException: 'Specified argument was out of the range of valid values.\r\nParameter name: ModelFile'`\r\n\r\nThe message is not sufficiently helpful. ","Url":"https://github.com/dotnet/machinelearning/issues/2784","RelatedDescription":"Open issue \"Message related to missing models not sufficiently helpful in DNNImageFeaturizers packages\" (#2784)"},{"Id":"415381054","IsPullRequest":true,"CreatedAt":"2019-02-27T23:51:44","Actor":"jwood803","Number":"2783","RawContent":null,"Title":"Add missing KeyType documentation","State":"open","Body":"Fix for #2333.\r\n\r\nHopefully, this is a good start. I'm sure some wording could be updated. :)","Url":"https://github.com/dotnet/machinelearning/pull/2783","RelatedDescription":"Open PR \"Add missing KeyType documentation\" (#2783)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-01T05:30:31.7885263Z","RunDurationInMilliseconds":617}