{"Data":{"Blog":{"FeedItems":[{"Title":"Implement Drawer and Split UI with the Xamarin.Forms MasterDetailPage","PublishedOn":"2018-04-26T18:00:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Drawer navigation and master-detail UI are two powerful patterns that guide users through content in applications with significant amounts of data or many pages. Xamarin.Forms provides the...","Href":"https://blog.xamarin.com/implement-drawer-split-ui-xamarin-forms-masterdetailpage/","RawContent":null},{"Title":"Using TensorFlow and Azure to Add Image Classification to Your Android Apps","PublishedOn":"2018-04-23T18:51:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"TensorFlow is a well established, open source machine learning and deep learning framework that can be used to create and run a wide range of different models, usually using powerful machines in the...","Href":"https://blog.xamarin.com/android-apps-tensorflow/","RawContent":null},{"Title":"Community Books on Xamarin Development","PublishedOn":"2018-04-20T15:01:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin development is constantly growing and evolving to meet the needs of developers. To help you find the right resources for your development education, we&#8217;ve curated a list of community...","Href":"https://blog.xamarin.com/community-books-xamarin-development/","RawContent":null},{"Title":"Automatic Provisioning with Visual Studio 2017","PublishedOn":"2018-04-18T17:22:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS device provisioning is largely regarded by all iOS developers, Xamarin or otherwise, as being one of the biggest barriers to getting started with iOS. To test and deploy your app on a device, you...","Href":"https://blog.xamarin.com/automatic-provisioning-visual-studio-2017/","RawContent":null},{"Title":"A Brief History of .NET Standard","PublishedOn":"2018-04-16T16:21:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin (and before that, Mono) allowed .NET code to run on multiple platforms for years. These days, there&#8217;s a new push in cross-platform with .NET Core and .NET Standard. This post looks at...","Href":"https://blog.xamarin.com/history-dot-net-standard/","RawContent":null},{"Title":"Using the iOS 11 Drag and Drop APIs in Xamarin.iOS Apps","PublishedOn":"2018-04-13T17:07:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS 11 introduced drag and drop, a feature that allows users to easily move or copy data within or between apps. With drag and drop, users can: Select items to drag Add extra items to a drag after it...","Href":"https://blog.xamarin.com/drag-and-drop-apis-for-xamarin-apps/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7593175071","Type":"PullRequestEvent","CreatedAt":"2018-04-26T18:27:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1595","RelatedDescription":"Merged pull request \"[build] setup $(XAIncludeProprietaryBits) for debugging/fastdev\" (#1595) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1577\r\n\r\nCurrently the open source `xamarin-android` bits do not support\r\ndebugging, fast deployment, and (perhaps?) other features. These are\r\nimplemented in the proprietary sources of Xamarin.Android, but there\r\n_should_ be a way to use these features if you have the commercial\r\nversion of Xamarin.Android installed on your system.\r\n\r\nTo support this:\r\n- Added a new `proprietary.csproj` project that copies specific\r\nproprietary files from your system's Xamarin.Android to the build output\r\nof `xamarin-android`\r\n- Added the new `$(XAIncludeProprietaryBits)` MSBuild property\r\n- Added a warning if `$(XAIncludeProprietaryBits)` is enabled\r\n\r\nThis feature allowed me to debug a change in `Mono.Android.dll` on\r\nWindows:\r\n1. Installed a commercial master build (VSIX) of Xamarin.Android into my\r\nVS 2017 15.7 Preview\r\n2. Made a change to `Mono.Android` in `Android.App.Activity`, where I\r\nadded a new method\r\n3. Built my local OSS copy of Xamarin.Android:\r\n    `msbuild Xamarin.Android.sln /t:Prepare`\r\n    `msbuild Xamarin.Adnroid.sln /p:XAIncludeProprietaryBits=True`\r\nNOTE: my msbuild is pathed to `C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe`\r\n4. Launched an elevated `Developer Command Prompt for VS 2017 Preview`\r\n5. Navigated to my `xamarin-android` checkout directory and ran\r\n`bin\\Debug\\bin\\setup-windows.exe`\r\n6. Opened VS 2017 Preview and created a new Xamarin.Android project\r\ntargeting v8.1\r\n7. Disabled \"fast deployment\" and \"shared runtime\", since I have a\r\nmodification in `Mono.Android.dll`\r\n8. Used my new method in `Android.App.Activity`, I was also able to\r\n\"step\" into the method while debugging\r\n\r\nFuture plans:\r\n- Since this change required use of `setup-windows.exe` I don't think we\r\ncan mark #1577 as finished until we have an equivalent on macOS\r\n- My thought is to rename `setup-windows.exe` to just `setup.exe` and also\r\nsupport macOS. It can make a symlink from\r\n`/Library/Frameworks/Xamarin.Android.framework/Versions/Current` to the\r\n`xamarin-android` build output directory"},{"Id":"7592797716","Type":"PullRequestEvent","CreatedAt":"2018-04-26T17:15:48","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1604","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] coded warnings for <BuildApk /> task\" (#1604) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\n`<BuildApk />` is in need of two warning codes to be fully fleshed out:\r\n- `XA4301` is now fully documented and tested\r\n- `XA0107` is *new* and now fully documented. `<ResolveAssemblies />`\r\nalso needed to use this warning code. I was not able to write a test\r\nthat produces this warning, since it does not happen under normal\r\ncircumstances\r\n\r\nOther changes:\r\n- The `BuildWithNativeLibraries` test was using `StringAssertEx.ContainsText`\r\nthis calls `Assert.Pass` internally (which throws) so the subsequent\r\nassertions were not being checked.\r\n- Added missing overloads for `LogCodedError` and `LogCodedWarning` in\r\n`AsyncTask`."},{"Id":"7592565137","Type":"PullRequestEvent","CreatedAt":"2018-04-26T16:31:21","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1600","RelatedDescription":"Merged pull request \"[build] standardize references to Microsoft.Build.*.dll\" (#1600) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/1465\r\n\r\nIn grendel's PR, he added `Xamarin.ProjectTools` and a new test project\r\nto `Xamarin.Android-Tests.sln`. The problem with this is that\r\n`xabuild.exe` builds the test solution, and if there is a project\r\nreferencing `Microsoft.Build.Framework` it will use a *different*\r\n`Microsoft.Build.Framework.dll` than if you built the projects with\r\nplain `msbuild`.\r\n\r\nAn example of failing commands when `Xamarin.ProjectTools` is in\r\n`Xamarin.Android-Tests.sln`:\r\n```\r\nmake prepare all all-tests\r\nmake run-nunit-tests TEST=Xamarin.Android.Build.Tests.BuildTest.ValidateJavaVersion\r\n```\r\n\r\nResults with the exception:\r\n```\r\nSystem.MissingMethodException : void Xamarin.ProjectTools.Builder.set_Verbosity(Microsoft.Build.Framework.LoggerVerbosity)\r\n    at Xamarin.Android.Build.Tests.BuildHelper.CreateApkBuilder (System.String directory, System.Boolean cleanupAfterSuccessfulBuild, System.Boolean cleanupOnDispose)\r\n    at Xamarin.Android.Build.Tests.BaseTest.CreateApkBuilder (System.String directory, System.Boolean cleanupAfterSuccessfulBuild, System.Boolean cleanupOnDispose)\r\n    at Xamarin.Android.Build.Tests.BuildTest.ValidateJavaVersion (System.String targetFrameworkVersion, System.String buildToolsVersion, System.String javaVersion, System.String latestSupportedJavaVersion, System.Boolean expectedResult)\r\n```\r\n\r\nTo recap:\r\n- `msbuild Xamarin.Android.sln` uses system/GAC\r\n`Microsoft.Build.Framework.dll`\r\n- `bin\\Debug\\bin\\xabuild Xamarin.Android.sln` uses a *different*\r\n`Microsoft.Build.Framework.dll` from `msbuild`\r\n\r\nChanges to fix this:\r\n- Created a `MSBuildReferences.projitems` as a standard way to import the\r\n`Microsoft.Build.*.dll` references\r\n- Used `<HintPath>` to reference MSBuild proper, the same way that\r\n`xabuild.csproj` was doing\r\n- Went through any project needing this, and imported this file instead\r\nof declaring references\r\n- Projects referencing additional MSBuild assemblies can use the new\r\n`$(MSBuildReferencePath)` variable if needed\r\n- A few projects needed `TargetFrameworkVersion` to at least be 4.6 in order\r\nto build on Windows. I chose `4.6.2` since `Xamarin.Android.Build.Tests`\r\nwas already using this version.\r\n- Projects were referencing `Microsoft.Build.Utilities.v4.0`, which is\r\na way to support MSBuild 4.0. This is not available with latest MSBuild, so\r\nnow using `Microsoft.Build.Utilities.Core`."},{"Id":"7592069550","Type":"PullRequestEvent","CreatedAt":"2018-04-26T15:12:15","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1603","RelatedDescription":"Opened pull request \"[xabuild.exe] [tests] use Microsoft.Build.Locator NuGet\" (#1603) at xamarin/xamarin-android","RelatedBody":"In `Xamarin.ProjectTools` and `xabuild.exe`, we had some code looking\r\nfor Visual Studio 2017 installations on Windows.\r\n\r\nUnfortunately we weren't doing it \"the right way\" and were merely\r\nchecking a few directories within `%ProgramFiles(x86)%`.\r\n\r\nMaking use of the `Microsoft.Build.Locator` NuGet package, allows for\r\nsimpler (and more correct) code for finding instances of Visual Studio.\r\nI took the approach of choosing the \"newest\" installation, which works\r\nwell on my machine because it chooses my 15.7 preview installation\r\ninstead of the 15.6 one. Note that this NuGet only works on Windows, so\r\nwe can only use it in the cases we had the existing Windows\r\nplatform-specific code.\r\n\r\nOther changes:\r\n- Had to raise `TargetFrameworkVersion` to at least 4.6, so I chose\r\n4.6.2 to match Xamarin.Android.Build.Tests\r\n- The IDE made some other adjustments in `*.csproj` files, but they\r\nappeared to be \"good\" formatting changes or corrections."},{"Id":"7590167746","Type":"PullRequestEvent","CreatedAt":"2018-04-26T09:38:26","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1602","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] _UpdateAndroidResgen always runs.\" (#1602) at xamarin/xamarin-android","RelatedBody":"Commit a50e00bb broke the build in such that `_UpdateAndroidResgen`\r\nalways runs. This is because the resource file last modified date\r\nwas always newer than the `R.cs.flag`."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7594906421","Type":"IssuesEvent","CreatedAt":"2018-04-27T01:57:53","Actor":"ChaseFlorell","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2553","RelatedDescription":"Opened issue \"[Feature Request] ControlTemplates should be smarter\" (#2553) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nControlTemplates are a great way to build composite controls and do cool reusable things. Two things that I feel is sorely missing are as follows\r\n\r\n 1. I should be able to find the Page context of a ControlTemplate. In other words, I'd really like the ability to know which page my ControlTemplate instance is attached to.\r\n 2. Akin to WPF, I'd really like to be able to locate an Element that is contained within a ControlTemplate\r\n\r\n```csharp\r\nvar myButton = (Button)myControlTemplate.FindName(\"myButton\", this);\r\n```"},{"Id":"7594772167","Type":"IssuesEvent","CreatedAt":"2018-04-27T01:07:47","Actor":"richardlawler","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2552","RelatedDescription":"Opened issue \"\"Xamarin.Forms\" version=\"3.0.0.427558-pre4\" fails to build for Android API 25 target\" (#2552) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nAttempting to use pre4 build of Xamarin.Forms package gives error when attempting to build Android (API25) target. \r\nSystem.IO.FileNotFoundException: Could not load assembly 'Microsoft.Windows.Design.Extensibility, Version=4.3.1.0\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Blank Xamarin Forms project\r\n2. Update the Xamarin.Forms package for the common, Droid and iOS projects to the pre4 package\r\n3. Try to build the Droid target.\r\n\r\n### Expected Behavior\r\n\r\nApp should build and deploy to device\r\n\r\n### Actual Behavior\r\n\r\nError from build.\r\n\r\n/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(2,2): Error: Exception while loading assemblies: System.IO.FileNotFoundException: Could not load assembly 'Microsoft.Windows.Design.Extensibility, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Perhaps it doesn't exist in the Mono for Android profile?\r\nFile name: 'Microsoft.Windows.Design.Extensibility.dll'\r\n  at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference reference, Mono.Cecil.ReaderParameters parameters) [0x00099] in /Users/builder/data/lanes/5809/a7829590/source/monodroid/external/xamarin-android/external/Java.Interop/src/Java.Interop.Tools.Cecil/Java.Interop.Tools.Cecil/DirectoryAssemblyResolver.cs:229 \r\n  at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference reference) [0x00000] in /Users/builder/data/lanes/5809/a7829590/source/monodroid/external/xamarin-android/external/Java.Interop/src/Java.Interop.Tools.Cecil/Java.Interop.Tools.Cecil/DirectoryAssemblyResolver.cs:179 \r\n  at Xamarin.Android.Tasks.ResolveAssemblies.AddAssemblyReferences (Java.Interop.Tools.Cecil.DirectoryAssemblyResolver resolver, System.Collections.Generic.ICollection`1[T] assemblies, Mono.Cecil.AssemblyDefinition assembly, System.Boolean topLevel) [0x0015c] in <bae064cadfb64dccb729d7cb7dab7861>:0 \r\n  at Xamarin.Android.Tasks.ResolveAssemblies.Execute (Java.Interop.Tools.Cecil.DirectoryAssemblyResolver resolver) [0x001c7] in <bae064cadfb64dccb729d7cb7dab7861>:0  (Test3.Droid)\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: pre2\r\n- IDE: Visual Studio for Mac Community (7.4.3)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: API25 (7.1) \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages: \r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7594308193","Type":"IssuesEvent","CreatedAt":"2018-04-26T22:26:20","Actor":"jasallen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2551","RelatedDescription":"Opened issue \"FlexLayout with \"xxx-reverse\" and \"Grow=1\" doesn't render\" (#2551) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nFlexLayout with Direction=column-reverse or row-reverse containing a \"grow\" item doesn't render\r\n\r\n### Steps to Reproduce\r\nXaml below in a contentPage shows blank screen. Removing `FlexLayout.Grow=\"1\"`  will show something, but is obviously different behavior.\r\n\r\n```\r\n    <FlexLayout Direction=\"column-reverse\" >\r\n        \r\n        <Label Text=\"Welcome to Xamarin.Forms!\" BackgroundColor=\"Red\" />\r\n\r\n        <Button Text=\"Click me, human\" FlexLayout.AlignSelf=\"flex-start\" />\r\n\r\n        <Frame BackgroundColor=\"Blue\" FlexLayout.Grow=\"1\" />\r\n\r\n        <Label Text=\"I'm a footer\" BackgroundColor=\"Green\" />\r\n\r\n    </FlexLayout>\r\n```\r\n\r\n### Expected Behavior\r\nShow all elements\r\n\r\n### Actual Behavior\r\nBlank Screen\r\n\r\n### Basic Information\r\nConfirmed on Android and UWP\r\n\r\n- Version with issue:\r\n- IDE: VS2017\r\n- Nuget Packages: Xamarin.Forms 3.0.0.427558-pre4\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7594261503","Type":"IssuesEvent","CreatedAt":"2018-04-26T22:13:47","Actor":"ptsoccer","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2550","RelatedDescription":"Opened issue \"When using XAML compilation, StackOverflowException is raised in XamlCTask if the conditions are just right\" (#2550) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIn a particular certain set of circumstances, the XamlCTask will error in a stack overflow in which the mono cecil library ping pongs between mscorlib and netstandard looking for System.Type.\r\n\r\nThe steps are pretty convoluted, my attached file is setup the way it needs to be.\r\nThe environment needed for the exception to occur is:\r\n1. All binaries must be built to the same directory\r\n2. The netstandard.dll forwarding assembly must already be in the output folder (this comes from a .net framework project referencing a .net standard dll)\r\n3. The xamarin forms project must reference a project that is first on the primary reference list for the xamarin forms project (usually accomplished by giving the reference a name that starts with a,b,c or something)\r\n4. XAML compilation must be turned on in a view (need this for XamlCTask to resolve references and emite il).\r\n\r\nWith this setup, when XamlCTask executes it:\r\n1. Splits the ReferencePath and adds each directory to the search path. Because the referenced project starts with a,b,c the first directory on the search path is the output folder.\r\n2.  Because XAML compilation is turned on, TryCoreCompile imports System.Type from mscorlib. XamlCAssemblyResolver finds this dll in the netstandard.library nuget package. This is a forwarding assembly that forwards to netstandard.dll.\r\n3. Mono cecil then attempts to resolve System.Type in netstandard.dll. Because the netstandard.dll is already in the output folder and the output folder is first in the search directories, XamlCAssemblyResolver resolves netstandard.dll to the one in the output folder. This is a problem, however, because that dll is a forwarding assembly that forwards to mscorlib.dll.\r\n4. Mono cecil now tries to resolve System.Type in mscorlib.dll, and thus the stack overflow happens.\r\n\r\nFor this to not have happened, netstandard.dll should have been loaded from the netstandard.library nuget package. I believe this can be done by preferring to load the requested dlls in the ReferencePath property first, and if it doesn't find it there, look in the search directories in the XamlCAssemblyResolver  class.\r\n\r\n### Steps to Reproduce\r\n1. Download reproduction\r\n2. Open a VS 2017 developer command prompt\r\n3. Run the following msbuild command, be sure to specify the path to the solution file, and also be sure to specify the path to the solution directory for the OutputPath:\r\n\r\n`MSBuild.exe \"<Path to XamarinStaticBinding.sln>\" /p:OutputPath=\"<Path to solution folder>\\Output\" /restore /p:Configuration=\"Release\" /p:Platform=\"Any CPU\" /verbosity:minimal`\r\n\r\n### Expected Behavior\r\nCompile succeeds\r\n\r\n### Actual Behavior\r\nMSBuild crashes with a StackOverflowException\r\n\r\n### Basic Information\r\n- Version with issue: 3.0-pre4\r\n\r\n### Reproduction Link\r\n[XamarinStaticBinding.zip](https://github.com/xamarin/Xamarin.Forms/files/1953140/XamarinStaticBinding.zip)\r\n\r\n"},{"Id":"7593689674","Type":"IssuesEvent","CreatedAt":"2018-04-26T20:09:43","Actor":"ptsoccer","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2549","RelatedDescription":"Opened issue \"When using XAML compilation, binding to undeclared namespace creates hard to diagnose error \" (#2549) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nSimilar to #2517, except with xmlns namespaces.\r\n\r\nWhen using compile time data bindings, binding to an undeclared xmlns namespace gives a \"Object reference not set to an instance of an object\" error which is extremely diagnose the root cause of.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin Forms XAML view with compile time bindings and set the DataType to whatever the view model class is, except when specifying the namespace, type it in incorrectly. For example:\r\nx:DataType=\"namespacethathasntbeendeclared:MainWindowViewModel\"\r\n2. Compile the program\r\n\r\n### Expected Behavior\r\nAn error is raised saying the line in the XAML the problem occurred as well as the undeclared namespace's name, something like \r\n\"Position 8:13. Binding: Unknown namespace: namespacethathasntbeendeclared\"\r\n\r\n### Actual Behavior\r\n\"Object reference not set to an instance of an object.\" is shown in the error list and output which does not help in diagnosing the root issue.\r\n### Basic Information\r\n\r\n- Version with issue: 3.0-pre4\r\n\r\n### Reproduction Link\r\n[XamarinStaticBinding.zip](https://github.com/xamarin/Xamarin.Forms/files/1952817/XamarinStaticBinding.zip)\r\n\r\n"},{"Id":"7592902846","Type":"IssuesEvent","CreatedAt":"2018-04-26T17:36:20","Actor":"aloisdeniel","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2548","RelatedDescription":"Opened issue \"Memory leak when creating a Fragment method from a ContentPage\" (#2548) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen navigating back from an activity containing a fragment created from the `CreateSupportFragment` extension method on a `ContentPage`, the pages don't seem to be freed.\r\n\r\n```csharp\r\nvar fragment = new TestPage().CreateSupportFragment(this);\r\nvar ft = SupportFragmentManager.BeginTransaction();\r\nft.Add(Resource.Id.container, fragment);\r\nft.Commit();\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n1. Launch the attached solution containing a really basic sample.\r\n2. Navigate to a page\r\n3. Press back\r\n4. Repeat steps 2 & 3\r\n\r\n### Expected Behavior\r\n\r\nA stable memory usage in console.\r\n\r\n### Actual Behavior\r\n\r\nThe memory is constantly growing :\r\n\r\n```\r\n[art] Explicit concurrent mark sweep GC freed 12(832B) AllocSpace objects, 0(0B) LOS objects, 6% free, 55MB/59MB, paused 595us total 166.206ms at main thread CareAboutPauseTimes 1\r\n...\r\n[art] Explicit concurrent mark sweep GC freed 16(1632B) AllocSpace objects, 0(0B) LOS objects, 6% free, 58MB/62MB,\r\n```\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 2.5.1.444934\r\n- IDE: Visual Studio for Mac\r\n- Platform Target Frameworks: \r\n  - Android: Version: 8.2.0.16 \r\n\r\n### Reproduction Link\r\n\r\n[XamarinFormsEmbedded-Leak.zip](https://github.com/xamarin/Xamarin.Forms/files/1952309/XamarinFormsEmbedded-Leak.zip)\r\n"},{"Id":"7592364706","Type":"PullRequestEvent","CreatedAt":"2018-04-26T15:56:58","Actor":"paymicro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2547","RelatedDescription":"Opened pull request \"[UWP] Fixed setting of properties to the carousel page (#2127)\" (#2547) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIn tracker of `CarouselPageRenderer` a `Container` is defined\r\n\r\n### Bugs Fixed ###\r\n\r\nFixes https://github.com/xamarin/Xamarin.Forms/issues/2127\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nWhen you set the `Carousel` properties, the page will no longer throw NRE exception\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7593983862","Type":"PullRequestEvent","CreatedAt":"2018-04-26T21:08:58","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4005","RelatedDescription":"Opened pull request \"[monotouch-test] Make BundleTest.TestPreferredLocalizations laxer.\" (#4005) at xamarin/xamarin-macios","RelatedBody":"Change test to verify that all preferred localizations are in the list of\navailable localizations (instead of hardcoding an expected result of 'en').\n\nThis makes the TestPreferredLocalizations work if the device language is 'es',\nin which case the preferred language between 'en' and 'es' is obviously 'es'."},{"Id":"7593966746","Type":"PullRequestEvent","CreatedAt":"2018-04-26T21:05:16","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4004","RelatedDescription":"Opened pull request \"[tests] Determine at runtime instead of compile time whether LinkAll is enabled. Fixes #3812.\" (#4004) at xamarin/xamarin-macios","RelatedBody":"This way we can remove the LINKALL define, which also means nobody can forget\nto define it when building using LinkAll.\n\nhttps://github.com/xamarin/xamarin-macios/issues/3812"},{"Id":"7593962417","Type":"PullRequestEvent","CreatedAt":"2018-04-26T21:04:22","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4003","RelatedDescription":"Opened pull request \"[tests] Fix TextureAtlastTest.Empty to not crash due to Apple not liking null callbacks.\" (#4003) at xamarin/xamarin-macios","RelatedBody":"Fixes this crash when running the xammac tests:\n\n    ***** Empty\n    Stacktrace:\n\n    Native stacktrace:\n\n    \t0   xammac_tests                        0x000000010a89f5d8 mono_handle_native_crash + 264\n    \t1   xammac_tests                        0x000000010a807616 altstack_handle_and_restore + 70\n    \t2   SpriteKit                           0x00007fff39dc1b09 __51+[SKTexture preloadTextures:withCompletionHandler:]_block_invoke.286 + 9\n    \t3   libdispatch.dylib                   0x00007fff55e62e08 _dispatch_client_callout + 8\n    \t4   libdispatch.dylib                   0x00007fff55e75ed1 _dispatch_continuation_pop + 472\n    \t5   libdispatch.dylib                   0x00007fff55e6d783 _dispatch_async_redirect_invoke + 703\n    \t6   libdispatch.dylib                   0x00007fff55e649f9 _dispatch_root_queue_drain + 515\n    \t7   libdispatch.dylib                   0x00007fff55e647a5 _dispatch_worker_thread3 + 101\n    \t8   libsystem_pthread.dylib             0x00007fff561b4169 _pthread_wqthread + 1387\n    \t9   libsystem_pthread.dylib             0x00007fff561b3be9 start_wqthread + 13"},{"Id":"7593947513","Type":"PullRequestEvent","CreatedAt":"2018-04-26T21:01:27","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3998","RelatedDescription":"Merged pull request \"Remove more unused/duplicated makefile targets/logic.\" (#3998) at xamarin/xamarin-macios","RelatedBody":"It's also defined here: https://github.com/xamarin/xamarin-macios/blob/bf159969f9b5c72abe3d6959cf8c4840495b3f2b/Makefile#L106-L107\n\nFixes this problem when creating API/Generator diff:\n\n    make: *** No rule to make target `/Users/builder/jenkins/workspace/xamarin-macios-pr-builder/tools/comparison/_ios-build/Library/Frameworks/Xamarin.iOS.framework/Versions/git/Version', needed by `all-ios'.  Stop."},{"Id":"7593291387","Type":"PullRequestEvent","CreatedAt":"2018-04-26T18:48:57","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4002","RelatedDescription":"Opened pull request \"Bump to mono:2018-02\" (#4002) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\r\n\r\n* mono/mono@a0228295dce [2018-02][interp] Backport interp entry changes (#8464)\r\n* mono/mono@91509419f5f [2018-02] [mini] Don't verify types if you store to a pointer byref. (#8424)\r\n* mono/mono@07ba54237db [arm] Fix a regression introduced by: (#8416)\r\n* mono/mono@5130d89a0dc [watch] Align cinfo->stack_usage to 16 on watchos. (#8376)\r\n* mono/mono@78740e252b4 [2018-02] [runtime] Add a signal handler for sigterm (#8383)\r\n* mono/mono@0d37a86d2c1 [sdks] Match more closely the pre-SDKs configure flags passed to LLVM (#8380)\r\n\r\nDiff: https://github.com/mono/mono/compare/9061f77e7f181057ff27e6900c05d8b1e5c63773...a0228295dcef711f8bbbf4f6f619c194e109c0e6"},{"Id":"7593040432","Type":"IssuesEvent","CreatedAt":"2018-04-26T18:02:29","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3920","RelatedDescription":"Closed issue \"Xamarin.Mac does not honor AOT options from IDE\" (#3920) at xamarin/xamarin-macios","RelatedBody":"@mykyta-bondarenko-gl Found a bug yesterday that was fixed in master as:\r\n\r\nhttps://github.com/xamarin/xamarin-macios/commit/659a74cc369395958b9c00d107281ef94873d57d\r\n\r\nbut was fixed before the issue was actually filed. This is an after-the-fact issue for it, since it needs to be cherry picked to 15.7.\r\n\r\nXamarin.Mac currently accepts \"mmp arguments\" of \"--aot=all|hybrid\" in projects and AOTs, but if the project uses the IDE settings and generates project tags of AOTMode / HybridAOT they are ignored.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new XM Project.\r\n2. Enable AOT using the Mac Build pane.\r\n3. Build - No AOT :(\r\n\r\n### Expected Behavior\r\n\r\nThe two option paths to work identically.\r\n\r\n### Environment\r\n\r\nmaster / stable both have issue.\n\n> VS bug [#598586](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/598586)"},{"Id":"7592901001","Type":"PullRequestEvent","CreatedAt":"2018-04-26T17:35:57","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4000","RelatedDescription":"Merged pull request \"[docs] Bumps maccore and macios-binaries in order to fix test-docs step\" (#4000) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989568663995994112","CreatedAt":"2018-04-26T18:15:29+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/j7zEZKejRt https://t.co/uR4Wn80zw2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":20,"RawContent":null},{"Id":"989535349708816384","CreatedAt":"2018-04-26T16:03:06+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/mCkzHchAxL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":8,"RawContent":null},{"Id":"989169416758841344","CreatedAt":"2018-04-25T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Implement or improve end-to-end mobile #DevOps in your apps with this series from @gshackles on the #VSAppCenter bl… https://t.co/eg1dVsOYzK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":21,"RawContent":null},{"Id":"988809546146701312","CreatedAt":"2018-04-24T15:59:01+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/bAWyV5Zt2G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":14,"RawContent":null},{"Id":"988493654808498176","CreatedAt":"2018-04-23T19:03:47+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/qyMCa5TERh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":96,"FavoriteCount":35,"RawContent":null},{"Id":"988444639064666114","CreatedAt":"2018-04-23T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/lnoWKsVf6F","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"988180901405364225","CreatedAt":"2018-04-22T22:21:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/WHbOgNnjfL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":16,"RawContent":null},{"Id":"987830341409832966","CreatedAt":"2018-04-21T23:08:01+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/VcwvXVvsi6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":113,"FavoriteCount":52,"RawContent":null},{"Id":"987416244490993664","CreatedAt":"2018-04-20T19:42:32+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":50,"RawContent":null},{"Id":"987362257762967553","CreatedAt":"2018-04-20T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/4JyHATQW2I","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":70,"FavoriteCount":17,"RawContent":null},{"Id":"986658974685679617","CreatedAt":"2018-04-18T17:33:25+00:00","UserScreenname":"xamarinhq","Text":"Automatic iOS app provisioning with #VS2017 15.7 Preview 3: https://t.co/vFjy3uXtie https://t.co/sLhjkaHc9X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":101,"FavoriteCount":55,"RawContent":null},{"Id":"986626430950920192","CreatedAt":"2018-04-18T15:24:06+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/piucqHprNe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":120,"FavoriteCount":51,"RawContent":null},{"Id":"986268805629345792","CreatedAt":"2018-04-17T15:43:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/eK0geeikW6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":22,"RawContent":null},{"Id":"985953326079594496","CreatedAt":"2018-04-16T18:49:25+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":37,"RawContent":null},{"Id":"985907924479479811","CreatedAt":"2018-04-16T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/HMGMdGgDYr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"985296899346456576","CreatedAt":"2018-04-14T23:21:01+00:00","UserScreenname":"xamarinhq","Text":"Try out the #Xamarin Android Device Manager Preview, a tool for creating, editing, and controlling Android virtual… https://t.co/POMrs2vlnD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":33,"RawContent":null},{"Id":"984843662428459008","CreatedAt":"2018-04-13T17:20:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/1JLVLvKR0M","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":26,"RawContent":null},{"Id":"984821292938465285","CreatedAt":"2018-04-13T15:51:07+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/KTX4gcGjqZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":12,"RawContent":null},{"Id":"984463408073408513","CreatedAt":"2018-04-12T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/tX03cw88GD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"984140279061020672","CreatedAt":"2018-04-11T18:45:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with new #XamarinForms #XAML IntelliSense functionality in #VisualStudio 2017: https://t.co/EPKoitU5bA https://t.co/JnlquxCZN9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":37,"RawContent":null}]}},"RunOn":"2018-04-27T05:30:45.3218504Z","RunDurationInMilliseconds":4558}