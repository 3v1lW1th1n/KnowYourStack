{"Data":{"Blog":{"FeedItems":[{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null},{"Title":"Xamarin.Forms 3.3.0: Little Things, Huge Difference","PublishedOn":"2018-10-18T19:06:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin.Forms team has been working closely with our open-source community to help fill in the “little things”. Things you’ve told us are important to building your mobile apps and being supremely...","Href":"https://blog.xamarin.com/xamarin-forms-3-3-0-little-things-huge-difference/","RawContent":null},{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8560712061","Type":"PullRequestEvent","CreatedAt":"2018-11-09T02:39:01","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2389","RelatedDescription":"Merged pull request \"[build] Download correct mono archive URL\" (#2389) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/blob/8e0cbf1044fb86f40c41f4317ef9154f82a94bb4/scripts/ci/pipeline/sdks-archive.groovy#L84\r\nContext: https://jenkins.mono-project.com/view/Per-commit%20packages/job/archive-mono/\r\n\r\nThe mono archives have a different filename format than that used in\r\ncommit f970cd50.  As per [`sdks-archive.groovy`][0], the filename to\r\ndownload *should* be:\r\n\r\n\t${product}-${configuration}-${platform}-${commitHash}.zip\r\n\r\nUpdate `$(_MonoArchiveName)` accordingly, and fix the output paths so\r\nthat the mono archive can actually be used.  (As noted in f970cd50,\r\n*actual* support for building with the mono archive hadn't been\r\ntested, as one didn't exist for the mono xamarin-android uses.)\r\n\r\n[0]: https://github.com/mono/mono/blob/8e0cbf1044fb86f40c41f4317ef9154f82a94bb4/scripts/ci/pipeline/sdks-archive.groovy"},{"Id":"8560131971","Type":"IssuesEvent","CreatedAt":"2018-11-08T23:45:49","Actor":"jeff-tenhave","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2416","RelatedDescription":"Opened issue \"Unable to get the current directory from application in release mode.\" (#2416) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a Xamarin Android project. Configure it to build in release mode with the following options:\r\n- Everything unchecked exception AOT Compilation\r\n - Linking: Sdk Assemblies Only\r\n2. Log one of the following values to the console:\r\n  - Directory.GetCurrentDirectory()\r\n  - Assembly.GetExecutingAssembly().Location\r\n3. Run the application.\r\n\r\n### Expected Behavior\r\n\r\nThe directory that the application is running in is logged to the console.\r\n\r\n### Actual Behavior\r\n\r\nThe device root directory is logged to the console.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017  (2)\r\nVersion 15.7.5\r\nVisualStudio.15.Release/15.7.5+27703.2042\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00369-60000-00001-AA912\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nVisual C++ 2017   00369-60000-00001-AA912\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40625.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.40608.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.8.3-beta6-63029-08. Commit Hash: e9a3a6c0ba5b1fde8b1fff964bdfb3fb768ee2eb\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.3-beta6-63029-08. Commit Hash: e9a3a6c0ba5b1fde8b1fff964bdfb3fb768ee2eb\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 173513e369ffb7a1c4d5dccf83696d9aac2ab2d0.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Spell Check Everywhere   VSSpellCheckEverywhere\r\nAn extension that enables spell checking within any Visual Studio file editor or tool window that uses WPF text boxes.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Spell Checker   VSSpellChecker\r\nAn editor extension that checks the spelling of comments, strings, and plain text as you type or interactively with tool windows.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2042\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWeb Extension Pack 2017   15.0.2\r\nThe easiest way to set up Visual Studio for the ultimate web development experience.\r\n\r\nWindows Machine Learning Generator Extension   1.0\r\nWindows Machine Learning Visual Studio Extension Detailed Info\r\n\r\nXamarin   4.10.10.2 (35a01d8dc)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n"},{"Id":"8559648367","Type":"IssuesEvent","CreatedAt":"2018-11-08T21:56:26","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2415","RelatedDescription":"Opened issue \"[spec] Enable Embedded DSO Support via a single MSBuild property\" (#2415) at xamarin/xamarin-android","RelatedBody":"## Problem\r\n\r\nCurrently, in order to activate the embedded DSO support, one has to perform the following actions manually:\r\n\r\n1. Add the `android:extractNativeLibs=\"false\"` attribute to the `<application>`\r\nelement in the `Properties/AndroidManifest.xml` file.\r\n\r\n2. Add the following property to the project file:\r\n```xml\r\n<AndroidStoreUncompressedFileExtensions>.so</AndroidStoreUncompressedFileExtensions>\r\n```\r\n3. Add an android environment file to the project with a line which says:\r\n```\r\n__XA_DSO_IN_APK=1\r\n```\r\n\r\n## Proposal\r\n\r\nA single MSBuild property, which will default to `False` from `Xamarin.Android.Common.targets`, could be added to a Xamarin.Android application project:\r\n```xml\r\n<AndroidEnableEmbeddedDSOs>True</AndroidEnableEmbeddedDSOs>\r\n```\r\n\r\n`$(AndroidEnableEmbeddedDSOs)` would do the following:\r\n\r\n1. The `GenerateJavaStubs` MSBuild task and the `ManifestDocument` class will use `$(AndroidEnableEmbeddedDSOs)` to decide if `android:extractNativeLibs=\"false\"` is added to the merged manifest automatically.\r\n\r\n2. A new `_SetupEmbeddedDSOs` MSBuild target will run before `_GenerateJavaStubs` if `$(AndroidEnableEmbeddedDSOs)=True`, that appends `.so` to `$(AndroidStoreUncompressedFileExtensions)`. Both the `<Aapt/>` and `<BuildApk/>` MSBuild tasks use this property.\r\n\r\n3. The new `_SetupEmbeddedDSOs` MSBuild target will also write to a new file in `$(IntermediateOutputPath)` that adds `__XA_DSO_IN_APK=1` as an `@(AndroidEnvironment)` build item."},{"Id":"8559207903","Type":"PullRequestEvent","CreatedAt":"2018-11-08T20:33:40","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2414","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] skip ValidateJavaVersion on DTB\" (#2414) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2410\r\n\r\nOne of the key metrics tracked in Visual Studio is the time it takes\r\nfor \"solution create\" to complete. Xamarin.Android would contribute to\r\nthis time from the duration of an initial design-time build.\r\n\r\n`ValidateJavaVersion` is one of the slower tasks during a DTB:\r\n\r\n    ValidateJavaVersion = 280 ms\r\n\r\nI have seen reports of this taking 500ms sometimes. Subsequent calls\r\nof `<ValidateJavaVersion/>` are cached, but that does not help the\r\nfirst DTB on \"solution create\".\r\n\r\nLooking at the task, it's main job is to emit errors/warnings, and\r\nthen it sets two properties:\r\n\r\n- `_JdkVersion`\r\n- `_DefaultJdkVersion`\r\n\r\nThese are only used by the `_AdjustJavacVersionArguments` target,\r\nwhich doesn't run during DTB.\r\n\r\nWe can just skip `<ValidateJavaVersion/>` on DTB: easily ~300ms saved!"},{"Id":"8559014409","Type":"IssuesEvent","CreatedAt":"2018-11-08T19:57:54","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2413","RelatedDescription":"Opened issue \"[_ManagedUpdateAndroidResgen] MSBuild target does not properly build incrementally\" (#2413) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run a design-time build.\r\n2. Future design-time builds seems to always run `_ManagedUpdateAndroidResgen`.\r\n\r\nSeems be caused due to a few issues, such as:\r\n```\r\nBuilding target \"_ManagedUpdateAndroidResgen\" completely.\r\nInput file \"obj\\Debug\\designtime\\resourcepaths.cache\" does not exist.\r\n```\r\n\r\nIt also seems one of the `Inputs` is picked up as `build.props` instead of `designtime\\build.props`. It looks like this is happening because `$(_ManagedUpdateAndroidResgenInputs)` is set at evaluation time, and a target moves the `build.props` file to the `designtime` directory.\r\n\r\n### What should we do?\r\n\r\nWe should refactor and add tests to verify the `_ManagedUpdateAndroidResgen` target builds incrmentally.\r\n\r\nIt will be a bit tricky to get right--which is why I haven't done it yet."},{"Id":"8558954893","Type":"IssuesEvent","CreatedAt":"2018-11-08T19:47:03","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2412","RelatedDescription":"Opened issue \"[_ResolveLibraryProjectImports] has a performance regression?\" (#2412) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. `_ResolveLibraryProjectImports` seems to be a bit slower in 15.9+\r\n\r\nLikely introduced to a change in `Files`: https://github.com/xamarin/xamarin-android/commit/970da9efbca2093904edef48f7eb3b3f8831966a#diff-0f05dca23f97caedfdafa5b14fe81018\r\n\r\nFull diff of 15.9: https://github.com/xamarin/xamarin-android/compare/d15-8...d15-9#diff-0f05dca23f97caedfdafa5b14fe81018\r\n\r\nHere are some numbers @kzu got from telemetry:\r\n```\r\n15.7 _ResolveLibraryProjectImports 4168\r\n15.8 _ResolveLibraryProjectImports 3728 \r\n15.9 _ResolveLibraryProjectImports 7386 \r\n```\r\n\r\n### What should we do?\r\n\r\nWe could see if there are duplicate `File.SetLastWriteTimeUtc` or `MonoAndroidHelper.SetReadonly` calls. Perhaps we can make a change in libZipSharp to get the desired timestamps when files are extracted."},{"Id":"8558880709","Type":"IssuesEvent","CreatedAt":"2018-11-08T19:33:49","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2411","RelatedDescription":"Opened issue \"[_ValidateAndroidPackageProperties] can we skip this MSBuild target during Design-Time builds?\" (#2411) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. The `_ValidateAndroidPackageProperties` target is running during Design-Time Builds, and doesn't look like it is needed?\r\n\r\n15.8:\r\n```\r\n18 ms  _ValidateAndroidPackageProperties          1 calls\r\n```\r\n\r\nCurrent master:\r\n```\r\n29 ms  _ValidateAndroidPackageProperties          1 calls\r\n```\r\n\r\nMight just be slower in master, because I had a Debug build of XA.\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/e4c15751253ed56cfedfd9d428d6129a5727462a/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L638-L665\r\n\r\n### What should we do?\r\n\r\nSee if we can skip this target if `$(DesignTimeBuild)` is true."},{"Id":"8558304080","Type":"IssuesEvent","CreatedAt":"2018-11-08T17:51:27","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2410","RelatedDescription":"Opened issue \"[ValidateJavaVersion] can we skip this MSBuild task during Design-Time Build?\" (#2410) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. See `ValidateJavaVersion` take anywhere from 300ms to 500ms on an initial design-time build.\r\n2. The calls to `java -version` and `java -version` are what is slow here\r\n\r\n### What should we do?\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/e4c15751253ed56cfedfd9d428d6129a5727462a/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L717-L727\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/e4c15751253ed56cfedfd9d428d6129a5727462a/src/Xamarin.Android.Build.Tasks/Tasks/ValidateJavaVersion.cs#L9-L14\r\n\r\nCan we skip this task if `$(DesignTimeBuild)` is true?\r\n\r\n### Bonus Points!!!\r\n\r\nCan we parallelize the two calls to `java -version` and `javac -version`?"},{"Id":"8558267253","Type":"IssuesEvent","CreatedAt":"2018-11-08T17:44:56","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2409","RelatedDescription":"Opened issue \"[ResolveSdks] reorder the lookup of JdkJvmPath\" (#2409) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nRelated to #2374 \r\n\r\n1. Create a new solution in Visual Studio.\r\n2. See a performance regression in the first design-time build. You can also see it in a regular first build, or incremental build. DTB has the highest performance bar, though.\r\n\r\n### What should we do?\r\n\r\n1. Move the logic finding `JdkJvmPath` to a new MSBuild task\r\n1. Don't run the task if `$(DesignTimeBuild)` is true.\r\n1. Only run the task if `$(AndroidGenerateJniMarshalMethods)` is true.\r\n\r\n/cc @radekdoulik, feel free to take a stab at this if I don't get to it."},{"Id":"8557211043","Type":"IssuesEvent","CreatedAt":"2018-11-08T15:12:01","Actor":"Redth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2408","RelatedDescription":"Opened issue \"Resource directories missed in incremental builds with `AndroidAarLibrary` items\" (#2408) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Clone `https://github.com/xamarin/Xamarin.Forms.git` and switch to the branch `visual-preview6`\r\n2. `nuget.exe restore Xamarin.Forms.sln` \r\n3. `msbuild Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj /bl /t:rebuild` which builds successfully\r\n4. `msbuild Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj /bl` which now fails:\r\n\r\n```\r\n\"C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj\" (default target) (1) ->\r\n(_UpdateAndroidResgen target) ->\r\n  Resources\\values\\styles.xml(2): error APT0000: Error retrieving parent for item: No resource found that matches the given name 'Theme.MaterialComponents.Light'.\r\n[C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(3): error APT0000: No resource found that matches the given name: attr 'colorAccent'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.Control\r\nGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(2): error APT0000: No resource found that matches the given name: attr 'colorPrimary'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.Contro\r\nlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(2): error APT0000: No resource found that matches the given name: attr 'windowActionBar'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.Con\r\ntrolGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(4): error APT0000: No resource found that matches the given name: attr 'windowActionModeOverlay'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.F\r\norms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(2): error APT0000: No resource found that matches the given name: attr 'windowNoTitle'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.Contr\r\nolGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(4): error APT0000: Error retrieving parent for item: No resource found that matches the given name 'Theme.AppCompat.Light.Dialog'. [C\r\n:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n  Resources\\values\\styles.xml(4): error APT0000: No resource found that matches the given name: attr 'colorAccent'. [C:\\xamarin\\Xamarin.Forms\\Xamarin.Forms.Control\r\nGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n```\r\nIt looks like the number of directories specified in the call to Aapt is missing a bunch of items in the incremental build vs the rebuild:\r\n![image](https://user-images.githubusercontent.com/271950/48207279-4e8ad900-e33e-11e8-80cc-f7bdef0ea8a8.png)\r\n\r\nThis appears to happen when we use Android Support library nuget packages (in this case `28.0.0-preview6` which have the .aar files directly included in them using the `AndroidAarLibrary` item group type.\r\n\r\nAttaching some binary logs of success/error builds for good measure:\r\n\r\n[binlogs.zip](https://github.com/xamarin/xamarin-android/files/2562283/binlogs.zip)\r\n\r\n "}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8560974261","Type":"IssuesEvent","CreatedAt":"2018-11-09T04:06:35","Actor":"richp582","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4357","RelatedDescription":"Opened issue \" Xamarin.Forms Image, Loads on Android, does not on iOS\" (#4357) at xamarin/Xamarin.Forms","RelatedBody":"Using Visual Studio for Mac Community (updated to latest stable)\r\n\r\n1.) New “Blank Xamarin.Forms App”\r\n2.) Update all of the Nuget Packages to current\r\n3.) Under the “Welcome to Xamarin.Forms” label add a new image control\r\n\r\n` \r\n<Image Source=\"https://img.discogs.com/P2bwDyNI_40_POp15pPOj3lOahY=/600x437/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-158120-1490159581-3776.jpeg.jpg\" />\u2028\r\n`\r\n\r\n4a.) Run Android Project “Android_Accelerated_Nougat (API 25)” - Observe Image is displayed as expected.\r\n4b.) Run iOS Project on “iPhone 8 iOS 12.1” Simulator - Observe nothing is displayed under the label, no erros are thrown and no logging is giving in the application output.\r\n\r\nThis behavior has been 100% repeatable on physical devices as well, works on any android device, fails on any iOS device. I’ve ensured I was using the “NSUrlSession” http client and I event tried adding the “NSAllowsArbitraryLoads” to my info.plist. dispite it being a valid https endpoint w/ a good certificate.\r\n\r\nI posted a question on the Xamarin.Forms Forums and was given a work-around but it is flaky at best and sometimes the View with refresh and the images will dissapear. \r\n\r\nLink to question: https://forums.xamarin.com/discussion/142154/\r\n\r\nA note about the URL. I’m writing a media app to integrate with https://www.discogs.com developer API and these are the url’s that are returned via their api calls and there’s really nothing I can do about it.\r\n\r\nThanks,\r\nRich"},{"Id":"8560737799","Type":"IssuesEvent","CreatedAt":"2018-11-09T02:47:00","Actor":"allanrodriguez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4356","RelatedDescription":"Opened issue \"iOS: NSInternalInconsistencyException thrown when adding item to ListView after clearing bound ObservableCollection\" (#4356) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nClearing and then adding an item to an ObservableCollection bound to a ListView with HasUnevenRows set to `true` in iOS 12 crashes with an NSInternalInconsistencyException.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attached reproduction.\r\n2. Tap **Add item**, then **Remove item**, and finally **Add item** again.\r\n3. Notice that the app crashes.\r\n\r\n### Expected Behavior\r\nThe second item should be added to the ObservableCollection and shown in the ListView without crashing.\r\n\r\n### Actual Behavior\r\nThe app crashes with exception:\r\n`NSInternalInconsistencyException Reason: Invalid update: invalid number of rows in section 0.  The number of rows contained in an existing section after the update (1) must be equal to the number of rows contained in that section before the update (1), plus or minus the number of rows inserted or deleted from that section (1 inserted, 0 deleted) and plus or minus the number of rows moved into or out of that section (0 moved in, 0 moved out).`\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.3.0.967583\r\n- Last known good version: N/A\r\n- IDE: Visual Studio Community for Mac 7.6.11\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.1 <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n- Nuget Packages: Xamarin.Forms 3.3.0.967583\r\n- Affected Devices: iPad (5th generation), iPod touch (6th generation)\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n[ListViewBug.zip](https://github.com/xamarin/Xamarin.Forms/files/2564371/ListViewBug.zip)\r\n"},{"Id":"8559424003","Type":"PullRequestEvent","CreatedAt":"2018-11-08T21:13:45","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4355","RelatedDescription":"Opened pull request \"Add fake Platform property to Page to keep Previewer happy: fixes #4351\" (#4355) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nForms Elements used to have an internal API property `Platform` which needed to be set on each Element. That property is no longer needed and has been removed. But the Previewer still sets that property via reflection, which now causes a NullReferenceException.\r\n\r\nThis change creates a dummy property for the Previewer to set, avoiding the NRE. \r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4351\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\nNone\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nOpen the previewer.\r\n\r\n"},{"Id":"8558991802","Type":"IssuesEvent","CreatedAt":"2018-11-08T19:53:44","Actor":"napalmDaz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4354","RelatedDescription":"Opened issue \"Regression: Xamarin.Forms Button Image position broken on Android\" (#4354) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nWhen setting an image, text and ContentLayout on a button, the image is not positioned correctly on Android when using Xamarin Forms 3.3. This worked as expected in XF 3.1. iOS does not seem to be affected.\r\n\r\n### Steps to Reproduce\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:Buttons\" x:Class=\"Buttons.MainPage\">\r\n<Grid x:Name=\"bottomLayout\" ColumnSpacing=\"0\" Margin=\"0\" Padding=\"0\">\r\n    <Grid.ColumnDefinitions>\r\n        <ColumnDefinition Width=\"*\"/>\r\n            <ColumnDefinition Width=\"74\"/>\r\n            <ColumnDefinition Width=\"74\"/>\r\n        </Grid.ColumnDefinitions>\r\n        <StackLayout Orientation=\"Horizontal\" x:Name=\"RoomSelectionOptions\" Grid.Column=\"0\" >\r\n\t\t\t<!-- Things -->\r\n        </StackLayout>\r\n        <Button Grid.Column=\"1\" \r\n            x:Name=\"ControlsButton\" \r\n            HorizontalOptions=\"EndAndExpand\" \r\n            BackgroundColor=\"Transparent\" \r\n            ContentLayout=\"Top,0\" \r\n            FontSize=\"Micro\" \r\n            Image=\"ic_brightness50\" \r\n            TextColor=\"{StaticResource PrimaryDark}\" \r\n            Text=\"Control\" \r\n            Clicked=\"ControlsCommandButton_Clicked\" />\r\n        <Button Grid.Column=\"2\" \r\n            x:Name=\"PowerCommandButton\" \r\n            HorizontalOptions=\"Start\" \r\n            BackgroundColor=\"Transparent\" \r\n            ContentLayout=\"Top,0\" \r\n            FontSize=\"Micro\" \r\n            Image=\"ic_powerswitch\" \r\n            TextColor=\"{StaticResource PrimaryDark}\" \r\n            Text=\"Power\" \r\n            Clicked=\"PowerCommandButton_Clicked\" />\r\n    </Grid>\r\n</ContentPage>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nButton image is centered as in previous versions (and also iOS) and relationship specified in ContentLayout is respected.\r\n\r\n### Actual Behavior\r\n\r\nOn Android, the button image is offset (no margin / padding) and not displayed in the expected location towards the center of the button.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.3.0.967583\r\n- Last known good version: 3.1\r\n- IDE: VS 2017 Enterprise\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1 Oreo\r\n\r\n### Screenshots\r\n\r\nhttps://imgur.com/f3PSDDA\r\n"},{"Id":"8558987066","Type":"PullRequestEvent","CreatedAt":"2018-11-08T19:52:54","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4352","RelatedDescription":"Merged pull request \"[XamlC] resolve props on generics for bindings\" (#4352) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n[XamlC] resolve props on generics for bindings\r\n\r\nSomehow, we weren't doing that up to now...\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4348\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8558982849","Type":"PullRequestEvent","CreatedAt":"2018-11-08T19:52:07","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4131","RelatedDescription":"Closed pull request \"Resilient xaml temp\" (#4131) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nPart of Stephane's resilient XAML work. Creating PR just to get a build for a demo. Temporarily reverting `FallbackTypeInfo` to a `Tuple` for easier consumption via reflection.\r\n\r\n### Issues Resolved ### \r\n\r\n### API Changes ###\r\n\r\n### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\n\n> VS bug [#708918](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/708918)"},{"Id":"8558486405","Type":"PullRequestEvent","CreatedAt":"2018-11-08T18:24:26","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4331","RelatedDescription":"Merged pull request \"[Core] Unseal Span\" (#4331) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemoves the `sealed` keyword from the `Span` so it can be inherited\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #4083\r\n\r\n### API Changes ###\r\n\r\nChanged:\r\n - `public sealed class Span` -> `public class Span`\r\n\r\n(So technically not a real API change, but yeah.)\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8558486398","Type":"IssuesEvent","CreatedAt":"2018-11-08T18:24:26","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4083","RelatedDescription":"Closed issue \"[Enhancement] remove sealed from Span\" (#4083) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nCurrently `Xamarin.Forms.Span` is `sealed`. So I cannot inherit from it to add my own functionality and add my own SpanChildClass to a `Label.FormattedText`.\r\n\r\n### Expected Behavior\r\n\r\nI can create my own class:\r\n\r\n    public class MySpan : Xamarin.Forms.Span { /* inject my functionality */ }\r\n\r\nand add instances of that class to `Label.FormattedText` from both Xaml and code.\r\n\r\n### Actual Behavior\r\n\r\nI cannot inherit from `Span`.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:  3.3.0.893527-pre3 and master\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8559858415","Type":"PullRequestEvent","CreatedAt":"2018-11-08T22:39:47","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5114","RelatedDescription":"Opened pull request \"[xtro] Report incorrect 'ArgumentSemantic' enum value usage\" (#5114) at xamarin/xamarin-macios","RelatedBody":"- Fixes #4018: [xtro] Report incorrect 'ArgumentSemantic' enum value usage\n  (https://github.com/xamarin/xamarin-macios/issues/4018)."},{"Id":"8559508737","Type":"PullRequestEvent","CreatedAt":"2018-11-08T21:29:51","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5113","RelatedDescription":"Opened pull request \"[mac] Enable various msbuild only tests that were disabled\" (#5113) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/4110"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":22,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":28,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":18,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":27,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":36,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":31,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":201,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":125,"FavoriteCount":80,"RawContent":null}]}},"RunOn":"2018-11-09T05:30:51.5000261Z","RunDurationInMilliseconds":4209}