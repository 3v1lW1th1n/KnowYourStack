{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12175157308","Type":"PullRequestEvent","CreatedAt":"2020-04-28T00:39:23","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7971","RelatedDescription":"Opened pull request \"Add support for alternate instrumentation system for browser \" (#7971) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3020\r\n\r\nWe will use this on nuget.org to swap out the instrumentation system with the Microsoft internal one that allows sending data to both Application Insights and to the internal endpoint which uses the \"tenant key\" configuration that I added."},{"Id":"12174195746","Type":"PullRequestEvent","CreatedAt":"2020-04-27T22:01:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7970","RelatedDescription":"Opened pull request \"Not using `Uri.ToString()`\" (#7970) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12176239252","Type":"IssuesEvent","CreatedAt":"2020-04-28T04:02:25","Actor":"xxl-cc","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9485","RelatedDescription":"Opened issue \" Packagereference cannot automatically download npgsql dependencies, such as system.runtime.compilerservices.unsafe\" (#9485) at NuGet/Home","RelatedBody":" Packagereference cannot automatically download npgsql dependencies, such as system.runtime.compilerservices.unsafe"},{"Id":"12175162643","Type":"IssuesEvent","CreatedAt":"2020-04-28T00:40:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9482","RelatedDescription":"Closed issue \"Add `-binlog` switch to build.ps1\" (#9482) at NuGet/Home","RelatedBody":"Binlogs are useful to debug builds. It should be easier to get this with NuGet's build script."},{"Id":"12174669738","Type":"IssuesEvent","CreatedAt":"2020-04-27T23:12:32","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9484","RelatedDescription":"Opened issue \"Use the latest packages for xplat verification\" (#9484) at NuGet/Home","RelatedBody":"We're using version 5.0.0-alpha1.19473.1 of the following two packages:\r\nSystem.Security.Cryptography.Pkcs\r\nSystem.Security.Cryptography.Cng\r\n\r\nWe should use the latest version instead."},{"Id":"12174246641","Type":"IssuesEvent","CreatedAt":"2020-04-27T22:07:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8503","RelatedDescription":"Closed issue \"Automaticaly load pdb from NuGet global packages folder\" (#8503) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/702430/automaticaly-load-pdb-from-nuget-cache.html)._\n\n---\n<p>Hi, it looks Visual Studio does not support loading pdb from NuGet Cache.</p><p>Is it possible to improve VS this way.</p><p>In detail: Let's e.g. assume having NuGet Package unpacked in the NuGet cache and the dll and pdb resides in the packagename\\packageverlib\\netstandard2.0 sub-folder. Visual Studio then supports probing the path to this sub-folder for loading the package source symbols. </p><p>This will help debugging experience source code with own only local stored NuGet packages.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/21/2019, 04:11 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n"},{"Id":"12174225174","Type":"IssuesEvent","CreatedAt":"2020-04-27T22:05:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9470","RelatedDescription":"Closed issue \"Pack with IncludeBuildOutput set to false still adds netstandard as a dependency\" (#9470) at NuGet/Home","RelatedBody":"_From @TFTomSun on Thursday, April 23, 2020 2:10:28 PM_\r\n\r\n### Steps to reproduce\r\n\r\nCreate a project file like this:\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.1</TargetFramework>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\n```\r\nPack it with:\r\n\r\nCommand line\r\n```\r\ndotnet pack\r\n```\r\n### Expected behavior\r\n\r\nThe resulting package has no dependency to NetStandard, because I don't include the build output. I would expect a package that can be installed standalone... without any dependency.\r\n\r\n### Actual behavior\r\nThe package has a dependency to NetStandard\r\n\r\n\r\n\r\n\r\n_Copied from original issue: microsoft/msbuild#5309_"},{"Id":"12174129861","Type":"IssuesEvent","CreatedAt":"2020-04-27T21:53:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2122","RelatedDescription":"Closed issue \"Re-thinking how symbols packages work\" (#2122) at NuGet/Home","RelatedBody":"Symbols packages have a couple of troubling issues:\n- They have the same id and version as their associated \"normal\" package (even though the filename is different). This violates the \"one id+version = one package\" principle. In practice, users often try to upload both packages to the same source and are met with 409 Conflict errors they don't understand.\n- They contain everything the \"normal\" package contains + additional content, rather than just the debugging material.\n\nWhen discussing internally, several potential solutions were floated:\n- Create a new package type indicating whether this is a symbols package. Server implementations could then make a choice about how to treat an incoming package.\n  - NuGet team is in favor of putting this flag in the manifest.\n  - Another option discussed was a new \"nusym\" package type which wouldn't contain the assemblies and other material.\n- The client could choose a convention for symbol package ids - for package \"FooBar\" perhaps \"FooBar.Symbols\". This may break debugging tools' expectations about how to retrieve symbols.\n\nPer internal discussion, filing this issue to track a design discussion for Q2 of 2016.\n"},{"Id":"12173676774","Type":"IssuesEvent","CreatedAt":"2020-04-27T20:59:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8542","RelatedDescription":"Closed issue \"NuGet in Intranet not useable (without Internet connection)\" (#8542) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet.exe\r\n\r\nNuGet version: 5.1.0.6013\r\n\r\nOS version: win10, 10.0.15063\r\n\r\nDid not work befor afaik.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Use config that uses local folder as source for nuget files\r\n\r\n2. Disable external sources (nuget.org, http outside of intranet)\r\n\r\n3. Ethernet adapter is configured with standard gateway, but proxy with auth is required (but not configured) to get out\r\n\r\n4. NuGet tries to  reach outside repositories (runs into timeout) -> results in 30+min builds that should take only 1-2min\r\n\r\n## Other suggested things\r\nHave switch that denies connecting to other sources than configured in nuget.config(s)\r\n\r\n### Verbose Logs\r\n\r\nVerbosity flags does not help. We tried sysinternals procmon and saw process tried to access outside ip\r\n\r\n### Sample Project\r\n\r\nSorry, not possible."},{"Id":"12173651536","Type":"IssuesEvent","CreatedAt":"2020-04-27T20:57:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8530","RelatedDescription":"Closed issue \"Automapper 8.1.1 returns nu3008 error\" (#8530) at NuGet/Home","RelatedBody":"We are seeing a nu3008 error for Automapper 8.1.1 in our local nuget repository. \r\n![automapper error nu3008](https://user-images.githubusercontent.com/45670667/64037628-aee04680-cb1b-11e9-8d6c-07b270e09fe3.png)\r\n\r\n\r\n I have deleted the local copy and downloaded again from https://www.nuget.org/packages/AutoMapper/8.1.1 with no change.\r\n\r\nWe are seeing that the last modification date  for the package file was 2019-06-03 18:33:32 GMT. Earliest modification date for the package archive was 2019-06-03 11:35:14 GMT. Our local copies state that it was digitally signed 6/3/2019 1:35:14 PM.  \r\n\r\n[AutoMapper.8.1.1.zip](https://github.com/NuGet/Home/files/3560780/AutoMapper.8.1.1.zip)\r\n\r\nDoes a correctly signed copy of 8.1.1 exist in the nuget repository? \r\n\r\n"},{"Id":"12173636861","Type":"IssuesEvent","CreatedAt":"2020-04-27T20:55:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8525","RelatedDescription":"Closed issue \"Package references should include source information for non-default sources\" (#8525) at NuGet/Home","RelatedBody":"I had this issue dotnet/cli#12289 and it looks like the problem is not limited to dotnet tools.\r\n\r\nIn short, when adding a package reference with custom source, package reference should also contain the source information.\r\n"},{"Id":"12173402398","Type":"IssuesEvent","CreatedAt":"2020-04-27T20:29:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8435","RelatedDescription":"Closed issue \"Issues using nuget packages with C# libraries compiled for specific architecture.\" (#8435) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nI am creating two component libraries, one in C++ and one in C# for Windows UWP in a single solution. The libraries will be packaged separately but there will be a dependency such that the C# library depends on C++ library which requires the C# be built architecture-specific.\r\n\r\nThe resulting C# nuget package will not allow compilation of any architecture other than the one that matches the compile flags in the ref .winmd file. If x86 is chosen for the ref, then only x86 will work. Manually stripping the 32BITREQ flag with corflags does allow for a workaround.\r\n\r\nIs this the expected way of handling architecture-specific C# libraries? If so it should probably be documented. If not, is my configuration wrong? Is this just not a normal use case?\r\n\r\nNuGet.exe - Version (4.8.1.5435)\r\ndotnet.exe - Version (2.1.801)\r\nVisual Studio 2017/Visual Studio 2019 Pro\r\nWin10 v1903 Enterprise\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a native Windows Runtime Component (Universal Windows - C++/CX)\r\n2. Create a C# Universal Windows Component Library in the same solution\r\n3. Create a dependency in the C# library on the Native component\r\n3a. Remove \"Any CPU\" build configuration and replace with x86 and x64 configurations (It won't build due to the mismatch without this step)\r\n4. Create .nuspec for both libraries and package separately.\r\n5. Generate and test the generated nuget packages locally (if you packaged the x64 .winmd in ref, then use x86 or vice versa)\r\n\r\n## Other suggested things\r\n\r\nI saw a discussion on a similar issue and read that I can manually strip the CPU requirements by running `corflags /32BITREQ-`\r\n\r\nhttps://github.com/NuGet/Home/issues/1221\r\n\r\nI can confirm that taking this step did make the nuget package work when tested, however, this seems like it shouldn't be a manual step. Either my configuration is wrong or there's a missed case.\r\n\r\n### Verbose Logs\r\n\r\n```\r\n1>------ Build started: Project: NugetPackageTest, Configuration: Release x86 ------\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): error MSB3270: There was a mismatch between the processor architecture of the project being built \"x86\" and the processor architecture of the reference \"C:\\Users\\WilliamF3\\.nuget\\packages\\Csharp.Ui.Component.Library\\0.0.1\\lib\\uap10.0\\csharp_project.winmd\", \"AMD64\". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n### Sample Project\r\n\r\nI can provide a skeleton of this setup if needed but I cannot share the original project.\r\n\r\nnative Library .nuspec:\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package >\r\n  <metadata>\r\n    <id>Name Removed</id>\r\n    <version>0.0.1</version>\r\n    <title>Name Removed</title>\r\n    <authors>Nobody Inc.</authors>\r\n    <owners>Nobody Inc.</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Native Library</description>\r\n    <releaseNotes>Initial Release</releaseNotes>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>windows uwp</tags>\r\n  </metadata>\r\n\r\n  <files>\r\n    <!-- WinMd and IntelliSense files -->\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.winmd\" target=\"lib\\uap10.0\"/>\r\n\r\n    <!-- 64 bit Release DLL and Resource files -->\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.dll\" target=\"runtimes\\win10-x64\\native\"/>\r\n    <file src=\"..\\x64\\Release\\native_project\\native_project.pri\" target=\"runtimes\\win10-x64\\native\"/>\r\n\r\n    <!-- 32 bit Release DLL and Resource files -->\r\n    <file src=\"bin\\x64\\Release\\x86\\native_project\\native_project.dll\" target=\"runtimes\\win10-x86\\native\"/>\r\n    <file src=\"bin\\x64\\Release\\x86\\native_project\\native_project.pri\" target=\"runtimes\\win10-x86\\native\"/>\r\n\r\n    <!-- .targets  Used to specify supported architectures mappings-->\r\n    <file src=\"native_project.targets\" target=\"build\\native\"/>\r\n\r\n  </files>\r\n</package>\r\n```\r\n\r\nC# UWP component Library nuspec:\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package >\r\n  <metadata>\r\n    <id>Csharp.Ui.Component.Library</id>\r\n    <version>0.0.1</version>\r\n    <title>UI Elements</title>\r\n    <authors>Nobody Inc.</authors>\r\n    <owners>Nobody Inc.</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>The UI elements For the native library</description>\r\n    <releaseNotes>Initial Release</releaseNotes>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>uwp windows</tags>\r\n    <dependencies>\r\n      <dependency id=\"Microsoft.NETCore.UniversalWindowsPlatform\" version=\"6.2.8\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <!-- WinMd and IntelliSense files -->\r\n    <!-- This is manually copied and stripped of the 32BITREQ flag -->\r\n    <file src=\"csharp_project.winmd\" target=\"ref\\uap10.0\" />\r\n\r\n    <file src=\"bin\\x64\\Release\\csharp_project.winmd\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"bin\\x64\\Release\\csharp_project.pdb\" target=\"runtimes\\win10-x64\\native\" />\r\n    <file src=\"bin\\x64\\Release\\csharp_project.pri\" target=\"runtimes\\win10-x64\\native\" />\r\n\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.winmd\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.pdb\" target=\"runtimes\\win10-x86\\native\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project\\csharp_project.pri\" target=\"runtimes\\win10-x86\\native\" />\r\n\r\n    <!-- XAML controls -->\r\n    <file src=\"bin\\x64\\Release\\csharp_project.xr.xml\" target=\"runtimes\\win10-x64\\native\\csharp_project\" />\r\n    <file src=\"bin\\x64\\Release\\x86\\csharp_project.xr.xml\" target=\"runtimes\\win10-x86\\native\\csharp_project\" />\r\n\r\n    <!-- Assets -->\r\n    <file src=\"Assets\\**\" target=\"runtimes\\win10-x64\\native\\csharp_project\\Assets\" />\r\n    <file src=\"Assets\\**\" target=\"runtimes\\win10-x86\\native\\csharp_project\\Assets\" />\r\n\r\n    <!-- .targets  Used to specify supported architectures mappings-->\r\n    <file src=\"csharp_project.targets\" target=\"build\\uap10.0\" />\r\n  </files>\r\n</package>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2020-04-28T05:30:38.8946783Z","RunDurationInMilliseconds":1693}