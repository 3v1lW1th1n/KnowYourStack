{"Data":{"GitHub":{"Issues":[{"Id":"388970430","IsPullRequest":false,"CreatedAt":"2018-12-08T23:44:00","Actor":"wjk","Number":"134","RawContent":null,"Title":"MarkupCompilePass1 temp project looping","State":"open","Body":"* .NET Core Version: 3.0.100-preview-009812\r\n* Windows version: Windows 10 1908, build 17763.134\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n## Problem description\r\n\r\nUnder circumstances I'm not yet able to fully pin down (outside of my proprietary project, I cannot get this bug to reproduce), the `MarkupCompilePass1` temporary projects for some bizarre reason create and invoke themselves recursively until one of the projects' paths hits the 260-character mark and the build fails. This only happens with one project in my solution, does not occur with the other two projects in the solution, and does not occur when I copy the project out of the solution into its own folder.\r\n\r\n## Actual behavior\r\n\r\nThe `*_wpftmp.csproj` files create and invoke themselves recursively, until the path name gets too long (it gets longer each iteration) and an exception is thrown.\r\n\r\n## Expected behavior\r\n\r\nIt should build!\r\n\r\n## Minimal repro\r\n\r\nCan't isolate one yet, but an MSBuild binlog is attached (zipped to get GitHub to accept it).\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/wpf/files/2660130/msbuild.binlog.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/134","RelatedDescription":"Open issue \"MarkupCompilePass1 temp project looping\" (#134)"},{"Id":"388940864","IsPullRequest":false,"CreatedAt":"2018-12-08T17:19:28","Actor":"kevingosse","Number":"133","RawContent":null,"Title":"Add a compositor thread to WPF","State":"open","Body":"Today it's incredibly hard to make smooth animations in WPF. And kind of computation done on the UI thread will make the animation jerky.\r\n\r\nBoth Silverlight and UWP have a compositor thread: a thread dedicated to rendering operations that can work concurrently with the UI thread. It's capable only of simple animations (translation, rotation, transparency...) that do not affect the overall layout (and so do not require a recomputation of the logical tree). I believe this would be a great addition to WPF.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/133","RelatedDescription":"Open issue \"Add a compositor thread to WPF\" (#133)"},{"Id":"388875883","IsPullRequest":false,"CreatedAt":"2018-12-08T17:16:41","Actor":"onovotny","Number":"126","RawContent":null,"Title":"OOM: Pen Input","State":"closed","Body":"From telemetry, unhandled exception:\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Win32.Penimc.IPimcManager2.GetTablet(uint tablet, out IPimcTablet2 IPimcTablet)\r\n   at System.Windows.Input.PenThreadWorker+WorkerOperationGetTabletsInfo.OnDoWork()\r\n   at System.Windows.Input.PenThreadWorker+WorkerOperation.DoWork()\r\n   at System.Windows.Input.PenThreadWorker.ThreadProc()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/dotnet/wpf/issues/126","RelatedDescription":"Closed issue \"OOM: Pen Input\" (#126)"},{"Id":"388925270","IsPullRequest":true,"CreatedAt":"2018-12-08T14:07:21","Actor":"batzen","Number":"132","RawContent":null,"Title":"[WIP] Adding editorconfig from corefx","State":"open","Body":"This PR adds an nearly exact copy of .editorconfig taken from https://github.com/dotnet/corefx\r\n\r\nThe only things i changed are the usage of var and this.\r\nI made those changes because, after having a look at some code samples from this repo, i noticed that those seem to be the desired configs.\r\n\r\nFixes #115","Url":"https://github.com/dotnet/wpf/pull/132","RelatedDescription":"Open PR \"[WIP] Adding editorconfig from corefx\" (#132)"},{"Id":"388920384","IsPullRequest":true,"CreatedAt":"2018-12-08T13:07:59","Actor":"dotnet-maestro[bot]","Number":"131","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/131","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#131)"},{"Id":"388904743","IsPullRequest":false,"CreatedAt":"2018-12-08T09:29:13","Actor":"juepiezhongren","Number":"130","RawContent":null,"Title":"need xbind implemented for wpf","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/issues/130","RelatedDescription":"Open issue \"need xbind implemented for wpf\" (#130)"},{"Id":"388876230","IsPullRequest":false,"CreatedAt":"2018-12-08T02:36:03","Actor":"onovotny","Number":"129","RawContent":null,"Title":"OOM: TextBlock.GetLineProperties","State":"open","Body":"From telemetry\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Windows.Controls.TextBlock.GetLineProperties()\r\n   at MS.Internal.Text.Line.get_ShowEllipsis()\r\n   at MS.Internal.Text.Line.get_IsWidthAdjusted()\r\n   at MS.Internal.Text.Line.get_Width()\r\n   at System.Windows.Controls.TextBlock.OnRender(DrawingContext ctx)\r\n   at System.Windows.UIElement.Arrange(Rect finalRect)\r\n   at MS.Internal.Helper.ArrangeElementWithSingleChild(UIElement element, Size arrangeSize)\r\n   at System.Windows.Controls.ContentPresenter.ArrangeOverride(Size arrangeSize)\r\n   at System.Windows.FrameworkElement.ArrangeCore(Rect finalRect)\r\n   at System.Windows.UIElement.Arrange(Rect finalRect)\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.ContextLayoutManager.UpdateLayoutCallback(object arg)\r\n   at System.Windows.Media.MediaContext+InvokeOnRenderCallback.DoWork()\r\n   at System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\n   at System.Windows.Media.MediaContext.RenderMessageHandlerCore(object resizedCompositionTarget)\r\n   at System.Windows.Media.MediaContext.RenderMessageHandler(object resizedCompositionTarget)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/129","RelatedDescription":"Open issue \"OOM: TextBlock.GetLineProperties\" (#129)"},{"Id":"388876129","IsPullRequest":false,"CreatedAt":"2018-12-08T02:34:56","Actor":"onovotny","Number":"128","RawContent":null,"Title":"OOM: DUCE+Channel.SyncFlush()","State":"open","Body":"From telemetry, app crash:\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Internal.HRESULT.Check(int hr)\r\n   at System.Windows.Media.Composition.DUCE+Channel.SyncFlush()\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(bool enableRenderTarget, Nullable<T> channelSet)\r\n   at System.Windows.Interop.HwndTarget.UpdateWindowSettings(bool enableRenderTarget)\r\n   at System.Windows.Interop.HwndTarget.OnShowWindow(bool enableRenderTarget)\r\n   at System.Windows.Interop.HwndTarget.HandleMessage(WindowMessage msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/128","RelatedDescription":"Open issue \"OOM: DUCE+Channel.SyncFlush()\" (#128)"},{"Id":"388876031","IsPullRequest":false,"CreatedAt":"2018-12-08T02:33:58","Actor":"onovotny","Number":"127","RawContent":null,"Title":"OOM: Get Default IMC","State":"open","Body":"From telemetry, crash:\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at MS.Win32.UnsafeNativeMethods.ImmGetDefaultIMEWnd(HandleRef hwnd)\r\n   at System.Windows.Input.InputMethod.get_DefaultImc()\r\n   at System.Windows.Input.InputMethod.EnableOrDisableInputMethod(bool bEnabled)\r\n   at System.Windows.Input.TextServicesManager.Focus(DependencyObject focus)\r\n   at System.Windows.Input.KeyboardDevice.ChangeFocus(DependencyObject focus, int timestamp)\r\n   at System.Windows.Input.KeyboardDevice.TryChangeFocus(DependencyObject newFocus, IKeyboardInputProvider keyboardInputProvider, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(DependencyObject focus, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(IInputElement element)\r\n   at System.Windows.Input.Keyboard.Focus(IInputElement element)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.OnSetFocus(IntPtr hwnd)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.FilterMessage(IntPtr hwnd, WindowMessage message, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/127","RelatedDescription":"Open issue \"OOM: Get Default IMC\" (#127)"},{"Id":"388833053","IsPullRequest":false,"CreatedAt":"2018-12-07T22:14:53","Actor":"onovotny","Number":"124","RawContent":null,"Title":"UIAutomation could not load dll","State":"open","Body":"Saw this twice in my telemetry\r\n\r\n```\r\nSystem.TypeInitializationException: The type initializer for 'System.Windows.Automation.Peers.AutomationPeer' threw an exception. ---> System.TypeInitializationException: The type initializer for 'System.Windows.Automation.TextPatternIdentifiers' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'UIAutomationCore.dll' or one of its dependencies: The paging file is too small for this operation to complete. (Exception from HRESULT: 0x800705AF)\r\n   at MS.Internal.Automation.UiaCoreTypesApi.RawUiaGetReservedMixedAttributeValue(out object mixedAttributeValue)\r\n   at MS.Internal.Automation.UiaCoreTypesApi.UiaGetReservedMixedAttributeValue()\r\n   at System.Windows.Automation.TextPatternIdentifiers..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.Automation.Peers.AutomationPeer.Initialize()\r\n   at System.Windows.Automation.Peers.AutomationPeer..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.Automation.Peers.AutomationPeer.RaiseFocusChangedEventHelper(IInputElement newFocus)\r\n   at System.Windows.Input.KeyboardDevice.ChangeFocus(DependencyObject focus, int timestamp)\r\n   at System.Windows.Input.KeyboardDevice.TryChangeFocus(DependencyObject newFocus, IKeyboardInputProvider keyboardInputProvider, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(DependencyObject focus, bool askOld, bool askNew, bool forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(IInputElement element)\r\n   at System.Windows.Input.Keyboard.Focus(IInputElement element)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.OnSetFocus(IntPtr hwnd)\r\n   at System.Windows.Interop.HwndKeyboardInputProvider.FilterMessage(IntPtr hwnd, WindowMessage message, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n```","Url":"https://github.com/dotnet/wpf/issues/124","RelatedDescription":"Open issue \"UIAutomation could not load dll\" (#124)"},{"Id":"388816545","IsPullRequest":false,"CreatedAt":"2018-12-07T21:15:42","Actor":"onovotny","Number":"123","RawContent":null,"Title":"Crash if run from ZIP","State":"open","Body":"Take a zip file containing a self contained app. Open it in WinRAR, then try to run the exe. WinRAR extracts it to a temp directory, but there's a 8.3 mismatch:\r\n\r\n```\r\n1) Failed WPF DLL consistency checks. Expected location: C:\\Users\\Administrator\\AppData\\Local\\Temp\\Rar$EXa0.654.\r\nDLL Name: PresentationNative_cor3.dll DLL Location: C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\Rar$EXa0.654\r\n```\r\n\r\nThe consistency check should take the 8.3 name into account as a match.","Url":"https://github.com/dotnet/wpf/issues/123","RelatedDescription":"Open issue \"Crash if run from ZIP\" (#123)"},{"Id":"388805834","IsPullRequest":false,"CreatedAt":"2018-12-07T20:38:53","Actor":"onovotny","Number":"122","RawContent":null,"Title":"NRE in Automation Peers","State":"open","Body":".NET Core 3 preview 1\r\n\r\nThis is from my telemetry and resulted in an app crash.\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Windows.Automation.Peers.ItemAutomationPeer.GetNameCore()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\n   at System.Windows.ContextLayoutManager.fireAutomationEvents()\r\n   at System.Windows.ContextLayoutManager.UpdateLayout()\r\n   at System.Windows.ContextLayoutManager.UpdateLayoutCallback(object arg)\r\n   at System.Windows.Media.MediaContext+InvokeOnRenderCallback.DoWork()\r\n   at System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\n   at System.Windows.Media.MediaContext.RenderMessageHandlerCore(object resizedCompositionTarget)\r\n   at System.Windows.Media.MediaContext.AnimatedRenderMessageHandler(object resizedCompositionTarget)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/122","RelatedDescription":"Open issue \"NRE in Automation Peers\" (#122)"},{"Id":"388804787","IsPullRequest":false,"CreatedAt":"2018-12-07T20:35:10","Actor":"onovotny","Number":"121","RawContent":null,"Title":"OutOfMemoryException in reading bitmaps","State":"open","Body":"I'm seeing OOM's when parsing some small images that are used as NuGet icons. I don't yet have a specific offending image, but I've seen this hit semi-regularly in my telemetry.\r\n\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Internal.HRESULT.Check(int hr)\r\n   at System.Windows.Media.Imaging.TransformedBitmap.FinalizeCreation()\r\n   at System.Windows.Media.Imaging.TransformedBitmap.EndInit()\r\n   at System.Windows.Media.Imaging.BitmapImage.FinalizeCreation()\r\n   at System.Windows.Media.Imaging.BitmapImage.OnDownloadCompleted(object sender, EventArgs e)\r\n   at System.Windows.Media.UniqueEventHelper.InvokeEvents(object sender, EventArgs args)\r\n   at System.Windows.Media.Imaging.LateBoundBitmapDecoder.DownloadCallback(object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Window.ShowHelper(object booleanBox)\r\n   at System.Windows.Window.Show()\r\n   at System.Windows.Window.ShowDialog()\r\n   at PackageExplorer.PackageChooserDialog.ShowDialog(string searchTerm) in PackageExplorer\\PackageChooser\\PackageChooserDialog.xaml.cs:line 169\r\n   at PackageExplorer.PackageChooserService.SelectPackage(string searchTerm) in PackageExplorer\\MefServices\\PackageChooserService.cs:line 54\r\n   at PackageExplorer.MainWindow+<OpenPackageFromRepository>d__48.MoveNext() in PackageExplorer\\MainWindow.xaml.cs:line 342\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at PackageExplorer.MainWindow+<OpenFeedItem_Click>d__46.MoveNext() in PackageExplorer\\MainWindow.xaml.cs:line 310\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__7_0(object state)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/121","RelatedDescription":"Open issue \"OutOfMemoryException in reading bitmaps\" (#121)"},{"Id":"388849782","IsPullRequest":false,"CreatedAt":"2018-12-07T20:27:09","Actor":"onovotny","Number":"125","RawContent":null,"Title":".NET Core 3 / WPF: SEHException's","State":"open","Body":"I'm seeing SEHException's from .NET Core 3 preview 1:\r\n\r\nThey all have the following stack trace. Windows 10 17134, 17763\r\n\r\nNot sure what repo this belongs with as it starts with `Microsoft.Win32.CommonDialog.ShowDialog()`\r\n\r\n```\r\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.\r\n   at MS.Internal.AppModel.IFileDialog.Show(IntPtr parent)\r\n   at Microsoft.Win32.FileDialog.RunVistaDialog(IntPtr hwndOwner)\r\n   at Microsoft.Win32.FileDialog.RunDialog(IntPtr hwndOwner)\r\n   at Microsoft.Win32.CommonDialog.ShowDialog()\r\n   at PackageExplorer.UIServices.OpenSaveFileDialog(string title, string defaultFileName, string initialDirectory, string filter, bool overwritePrompt, out string selectedFilePath, out int selectedFilterIndex) in PackageExplorer\\MefServices\\UIServices.cs:line 36\r\n   at PackageExplorerViewModel.SavePackageCommand.SaveAs() in PackageViewModel\\Commands\\SavePackageCommand.cs:line 151\r\n   at PackageExplorerViewModel.SavePackageCommand.Execute(object parameter) in PackageViewModel\\Commands\\SavePackageCommand.cs:line 96\r\n   at MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(ICommandSource commandSource, bool userInitiated)\r\n   at System.Windows.Controls.MenuItem.InvokeClickAfterRender(object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, object args, int numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(ref MSG msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/125","RelatedDescription":"Open issue \".NET Core 3 / WPF: SEHException's\" (#125)"},{"Id":"388750791","IsPullRequest":true,"CreatedAt":"2018-12-07T18:58:32","Actor":"SparroHawc","Number":"120","RawContent":null,"Title":"Readme WPF name consistency fix","State":"closed","Body":"This is the only location that the full name of WPF is written out in the codebase as it currently stands.  The correct name, as it happens, is Windows Presentation Foundation.","Url":"https://github.com/dotnet/wpf/pull/120","RelatedDescription":"Closed or merged PR \"Readme WPF name consistency fix\" (#120)"},{"Id":"388687967","IsPullRequest":false,"CreatedAt":"2018-12-07T16:33:11","Actor":"Symbai","Number":"117","RawContent":null,"Title":"The type 'x:Static' was not found","State":"closed","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: Windows 10 64bit, 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\nThis is a re-post of an issue posted in core, as its WPF related i believe it should be posted here instead https://github.com/dotnet/core/issues/2113 \r\n\r\n **Problem description:**\r\n\r\n.NET core preview 1 doesn't accept x:static in xaml, where x is being defined as `xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"`\r\n \r\n **Actual behavior:** \r\n\r\n`XLS0414 The type 'x:Static' was not found. Verify that you are not missing an assembly reference and that all referenced assemblies have been built.`\r\n \r\n **Expected behavior:**\r\n\r\nWorks / no error like in framework\r\n \r\n **Minimal repro:**\r\n https://github.com/dotnet/core/files/2651359/CoreTest.zip\r\nor:\r\n```\r\n<Window x:Class=\"CoreTest.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:CoreTest\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <Button ToolTip=\"{x:Static properties:Resources.PlayButtonTooltip}\"/>\r\n    </Grid>\r\n</Window>\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/117","RelatedDescription":"Closed issue \"The type 'x:Static' was not found\" (#117)"},{"Id":"388457940","IsPullRequest":false,"CreatedAt":"2018-12-07T16:32:33","Actor":"stefanolson","Number":"113","RawContent":null,"Title":"PresentationTraceSources.TraceLevel not found","State":"closed","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 10, 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No (well not on 4.5 for sure)\r\n\r\n **Problem description:**\r\nattempting to use PresentationTraceSources.TraceLevel causes failure to compile with  the error:\r\nerror MC3045: Unknown property 'PresentationTraceSources.TraceLevel' for type 'System.Windows.Data.Binding' encountered while parsing a Markup Extension. \r\n\r\nWorks fine in WPF on the .net framework.\r\n\r\n **Expected behavior:**\r\nShould compile and run and trace bindings\r\n \r\n **Minimal repro:**\r\n` <TextBox Grid.Row=\"0\" Text=\"{Binding PresentationTraceSources.TraceLevel=High}\" Grid.Column=\"1\"/>`\r\n\r\nStefan","Url":"https://github.com/dotnet/wpf/issues/113","RelatedDescription":"Closed issue \"PresentationTraceSources.TraceLevel not found\" (#113)"},{"Id":"388725564","IsPullRequest":false,"CreatedAt":"2018-12-07T16:31:18","Actor":"rladuca","Number":"119","RawContent":null,"Title":"XMLNS sweep to ensure parity with desktop framework","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) All\r\n* Windows version: (`winver`) All\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nWPF is missing various xmlns attributes in its reference assemblies.  We need to sweep all of them to ensure we pick everything up.\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n N/A\r\n **Expected behavior:**\r\n N/A\r\n **Minimal repro:**\r\n See the various related issues.\r\n","Url":"https://github.com/dotnet/wpf/issues/119","RelatedDescription":"Open issue \"XMLNS sweep to ensure parity with desktop framework\" (#119)"},{"Id":"388688494","IsPullRequest":false,"CreatedAt":"2018-12-07T14:58:51","Actor":"Noemata","Number":"118","RawContent":null,"Title":"Source to WPF Surface SDK?","State":"open","Body":"Any chance the WPF Surface SDK source could be put up as well?  For WPF work in particular, there's lots in there that is extremely useful!  Some parts of the Surface SDK might also be handy for UWP once ported.","Url":"https://github.com/dotnet/wpf/issues/118","RelatedDescription":"Open issue \"Source to WPF Surface SDK?\" (#118)"},{"Id":"388646470","IsPullRequest":true,"CreatedAt":"2018-12-07T13:08:30","Actor":"dotnet-maestro[bot]","Number":"116","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/116","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#116)"},{"Id":"388541495","IsPullRequest":false,"CreatedAt":"2018-12-07T07:47:31","Actor":"batzen","Number":"115","RawContent":null,"Title":"Add .editorconfig to clarify code style","State":"open","Body":"I think it would be nice if we could get an .editorconfig in this repo so no one has to worry about how code should be formatted and tools can take care of adhering to the desired formatting.\r\n\r\nI guess the most consistent way would be to sync this across all dotnet repos or at least use the same as in corefx for example.\r\nhttps://github.com/dotnet/corefx/blob/master/.editorconfig","Url":"https://github.com/dotnet/wpf/issues/115","RelatedDescription":"Open issue \"Add .editorconfig to clarify code style\" (#115)"},{"Id":"388473572","IsPullRequest":true,"CreatedAt":"2018-12-07T02:29:57","Actor":"webprofusion-chrisc","Number":"114","RawContent":null,"Title":"Fix minor typo","State":"closed","Body":"Fix misspelled 'coverage'.","Url":"https://github.com/dotnet/wpf/pull/114","RelatedDescription":"Closed or merged PR \"Fix minor typo\" (#114)"},{"Id":"388438428","IsPullRequest":false,"CreatedAt":"2018-12-06T23:14:52","Actor":"dotMorten","Number":"112","RawContent":null,"Title":"Add RelativePanel control","State":"open","Body":"I'd like to propose porting UWP's RelativePanel control to WPF. It's a great way to layout UI, while reducing the number of panels needed to create in order to perform such a layout. A panel like this could also form the basis for porting Adaptive Triggers down the line (as these two go really well gand-in-hand).\r\n\r\nI have an implementation of it here that I'd be happy to contribute back to WPF: \r\nhttps://github.com/dotMorten/UniversalWPF/tree/master/src/UniversalWPF.RelativePanel\r\n\r\nI'm also hoping that the [Windows UI Xaml](https://github.com/Microsoft/microsoft-ui-xaml/issues/36) project will soon share UWP's RelativePanel implementation, to ensure 100% consistency in behavior (AFAIK my implementation matches in behavior, but knowing that there are a lot of edge cases, I probably don't handle them all).","Url":"https://github.com/dotnet/wpf/issues/112","RelatedDescription":"Open issue \"Add RelativePanel control\" (#112)"},{"Id":"388410592","IsPullRequest":false,"CreatedAt":"2018-12-06T21:43:12","Actor":"weltkante","Number":"111","RawContent":null,"Title":"DragLeave handlers can modify AllowedEffects of following DragEnter handlers","State":"open","Body":"* .NET Core Version: **3.0.100-preview-009812**\r\n* Windows version: **1809**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8? **Yes**\r\n\r\n> Project maintainers will consider changes that improve the product or fix known bugs (please file issues to make bugs \"known\").\r\n\r\nRe-reporting a bug I previously reported against Desktop Framework WPF which was decided not to get fixed because \"it isn't broken enough to require a fix\". My opinion differs so I'll try again to get this fixed.\r\n\r\n **Problem description:**\r\nDragLeave handlers can modify the AllowedEffects of the following DragEnter handler by modifying their DragEventArgs.Effects property. Can happen accidently when pushing all the different drag events through a common handler. The problem is transient (fixes itself on the next mouse move because the DragLeave handler won't be called again) but causes cursor flickering due to the incorrect AllowedEffects in DragEnter. If the DragLeave handler is in a 3rd party control you can't easily fix the cursor flickering.\r\n\r\nRoot cause is that effects are passed by-ref (input is AllowedEffects, [output is Effects](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1256)) to two drag handlers in succession in [DragDrop.cs, OleDragOver implementation](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1001) at [line 1024](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1024) and [line 1033](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1033).\r\n\r\nThe simplest fix would be to store the original effect variable before calling the DragLeave handler and restore it before calling the DragEnter handler.\r\n \r\n **Actual behavior:**\r\nAllowedEffects in DragEnter handler are wrong if the DragLeave handler was setting DragEventArgs.Effects - in the given example this manifests itself in a flickering cursor when starting a drag from the green area and moving the cursor between red and blue areas. When you have more complex behavior attached to D&D like a thumbnail following the cursor this can get even more obvious.\r\n \r\n **Expected behavior:**\r\nAllowedEffects in DragEnter handler should match those specified by the drag originator and be independent of whatever DragLeave handlers returned from their DragEventArgs.Effects\r\n \r\n **Minimal repro:**\r\n```xaml\r\n<Window x:Class=\"MyWPFApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition/>\r\n            <RowDefinition/>\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition/>\r\n            <ColumnDefinition/>\r\n        </Grid.ColumnDefinitions>\r\n        <Border Grid.Row=\"0\" Grid.ColumnSpan=\"2\"\r\n                MouseLeftButtonDown=\"StartDrag\"\r\n                Background=\"DarkGreen\">\r\n            <TextBlock Foreground=\"White\" Text=\"drag from here\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n        <Border Grid.Row=\"1\" Grid.Column=\"0\" AllowDrop=\"True\"\r\n                DragEnter=\"CopyDragHandler\"\r\n                DragOver=\"CopyDragHandler\"\r\n                DragLeave=\"CopyDragHandler\"\r\n                Drop=\"CopyDragHandler\"\r\n                Background=\"DarkRed\">\r\n            <TextBlock Foreground=\"White\" Text=\"accepts copy\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n        <Border Grid.Row=\"1\" Grid.Column=\"1\" AllowDrop=\"True\"\r\n                DragEnter=\"LinkDragHandler\"\r\n                DragOver=\"LinkDragHandler\"\r\n                DragLeave=\"LinkDragHandler\"\r\n                Drop=\"LinkDragHandler\"\r\n                Background=\"DarkBlue\">\r\n            <TextBlock Foreground=\"White\" Text=\"accepts link\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n    </Grid>\r\n</Window>\r\n```\r\n```c#\r\nusing System.Windows;\r\nusing System.Windows.Input;\r\n\r\nnamespace MyWPFApp\r\n{\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private void StartDrag(object sender, MouseButtonEventArgs e)\r\n        {\r\n            DragDrop.DoDragDrop((DependencyObject)sender, \"data\", DragDropEffects.Copy | DragDropEffects.Link);\r\n        }\r\n\r\n        private void CopyDragHandler(object sender, DragEventArgs e)\r\n        {\r\n            e.Effects = e.AllowedEffects & DragDropEffects.Copy;\r\n        }\r\n\r\n        private void LinkDragHandler(object sender, DragEventArgs e)\r\n        {\r\n            e.Effects = e.AllowedEffects & DragDropEffects.Link;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/111","RelatedDescription":"Open issue \"DragLeave handlers can modify AllowedEffects of following DragEnter handlers\" (#111)"},{"Id":"388165563","IsPullRequest":true,"CreatedAt":"2018-12-06T20:53:16","Actor":"AndreyAkinshin","Number":"105","RawContent":null,"Title":"Remove redundant comparisons with true","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/105","RelatedDescription":"Closed or merged PR \"Remove redundant comparisons with true\" (#105)"},{"Id":"388358305","IsPullRequest":false,"CreatedAt":"2018-12-06T19:17:21","Actor":"gix","Number":"110","RawContent":null,"Title":"First-class support for custom themes","State":"open","Body":"It is currently not possible to use a custom theme as a drop-in replacement for a system theme. While it *is* possible to style everything, it requires more cumbersome work that is easily missed.\r\n\r\nFor example:\r\n- Custom styles outside of the custom theme (e.g. local styles in a `UserControl`) always require an explicit `BasedOn=\"{StaticResource {x:Type ...}}\"` or else they are based on the system theme.\r\n- Inheritance does not work. Normally `ListView` without a `GridView` uses the `ListBox` style, but providing a custom one is not enough, it has to be explicitly set on the `ListView`.\r\n- Providing a style for `ContextMenu` does not style the built-in one of textboxes or scrollbars. A prominent example where this can be seen is Visual Studio:\r\n![wpf1](https://user-images.githubusercontent.com/51795/49605011-b52c0280-f98f-11e8-83e1-55cf7431466e.png)\r\n\r\n[My high-quality Aero themes for WPF](https://gix.github.io/PresentationTheme.Aero/) use reflection and method hooking to solve these problems (But that's just a brittle hack. In fact, it breaks on .NET Core because tiered compilation makes hooking more difficult.). It does so by replacing `System.Windows.SystemResources.FindDictionaryResource`, normally responsible for locating the theme resource assembly and style for a given type or resource key, with one that can load custom resource dictionaries.\r\n\r\nSo my wish would be for adoption of a public API to set policies for resource loading, at least for `PresentationFramework.dll`.","Url":"https://github.com/dotnet/wpf/issues/110","RelatedDescription":"Open issue \"First-class support for custom themes\" (#110)"},{"Id":"388264690","IsPullRequest":false,"CreatedAt":"2018-12-06T15:28:09","Actor":"onovotny","Number":"109","RawContent":null,"Title":"Hyphen based ligatures don't work in WPF","State":"open","Body":"See https://github.com/tonsky/FiraCode/issues/259 for the full issue description.\r\n\r\nWould be good to get this fixed for .NET Core 3.","Url":"https://github.com/dotnet/wpf/issues/109","RelatedDescription":"Open issue \"Hyphen based ligatures don't work in WPF\" (#109)"},{"Id":"388204900","IsPullRequest":true,"CreatedAt":"2018-12-06T13:08:57","Actor":"dotnet-maestro[bot]","Number":"108","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/108","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#108)"},{"Id":"388199305","IsPullRequest":false,"CreatedAt":"2018-12-06T12:48:45","Actor":"JamesBlack2","Number":"107","RawContent":null,"Title":"The app is not compatible ","State":"open","Body":"我使用VS2019新建了一个测试用的.net core的控制台应用程序，但是当我把这程序发布后生成的文件复制到Win7 service 1,7061的 32位系统想远行时，却提示文件版本与系统不兼容，就是将其设置兼容性再跑时，也不行。是否VS2019预览版并没有完全将.net core的运行打包在一起？\r\n\r\n下面是app的项目配置。\r\n《Project Sdk=\"Microsoft.NET.Sdk\">\r\n 《 PropertyGroup>\r\n   《 OutputType>Exe《/OutputType>\r\n   《 TargetFramework>netcoreapp2.2《/TargetFramework>\r\n  《/PropertyGroup>\r\n《/Project>","Url":"https://github.com/dotnet/wpf/issues/107","RelatedDescription":"Open issue \"The app is not compatible \" (#107)"},{"Id":"388176663","IsPullRequest":true,"CreatedAt":"2018-12-06T11:42:50","Actor":"AndreyAkinshin","Number":"106","RawContent":null,"Title":"Improve XamlType.LookupIsConstructible with the help of LINQ","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/106","RelatedDescription":"Open PR \"Improve XamlType.LookupIsConstructible with the help of LINQ\" (#106)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-09T05:31:06.8188205Z","RunDurationInMilliseconds":1027}