{"Data":{"Blog":{"FeedItems":[{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null},{"Title":"The Solar System with ARKit and F#","PublishedOn":"2017-10-04T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A few years ago, my colleague Joel Martinez and I wrote a F# program we called “Oculus Thrift” that demonstrated iOS SceneKit in a Google Cardboard stereoscopic viewer. With the recent release of iOS 11, I wanted to see if we could do something similar with ARKit, Apple’s augmented-reality framework. It took just 8 lines [&#8230;]","Href":"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/","RawContent":null},{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null},{"Title":"Android Support Library v26 Overview","PublishedOn":"2017-10-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Android Support Library v26 brings lots of new features to our Android apps, including fonts as resources, downloadable fonts, emoji support, an autosizing TextView, physics driven animations via Spring and Fling, backwards compatibility for animated vectors, and a slimmer library by increasing the minSdkVersion to 14. If it isn&#8217;t already, the minSdkVersion for all [&#8230;]","Href":"https://blog.xamarin.com/android-support-library-v26-overview/","RawContent":null},{"Title":"Xamarin at Local Developer Events this October","PublishedOn":"2017-09-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re at the height of conference season, and that means tons of new and exciting releases, tooling, and updates to talk about with your local developer community! Mobile .NET developer conferences and meetups are the perfect opportunities to learn the latest on Xamarin and related technologies while networking with other developers. Below are just a [&#8230;]","Href":"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/","RawContent":null},{"Title":"Xamarin.Forms Stable Comes to .NET Standard 2.0","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are thrilled to share our latest stable release of Xamarin.Forms, version 2.4.0. This is our fastest, most stable release ever and we think you’re going to love it! Xamarin.Forms 2.4.0 Highlights You’ll recognize many of these highlights as shared in our public roadmap, in addition to more than 150 bug fixes. .NET Standard [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-stable-comes-to-net-standard-2-0/","RawContent":null},{"Title":"Webinar Recording | Exploring UrhoSharp 3D with Xamarin Workbooks Webinar","PublishedOn":"2017-09-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Folllow along with Charles Petzold as he builds a 3D app from the ground up with UrhoSharp and Xamarin Workbooks in this webinar recording. UrhoSharp is a powerful, high performance 3D graphics engine suitable for games, animation, and data visualization. Used together, UrhoSharp and Xamarin Workbooks give developers a streamlined way to get started with [&#8230;]","Href":"https://blog.xamarin.com/webinar-recording-exploring-urhosharp-3d-with-xamarin-workbooks-webinar/","RawContent":null},{"Title":"3 Reasons to Try Xamarin Previews in Visual Studio 2017","PublishedOn":"2017-09-26T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previews are a great way to try the latest-and-greatest in mobile development, from the new Xamarin Live Player that allows you to instantly visualize your XAML-based user interface as you type, to support for new SDKs like Android Oreo or iOS 11. Then arises the great dilemma: how do I try all the awesome stuff [&#8230;]","Href":"https://blog.xamarin.com/3-reasons-to-try-visual-studio-2017-version-15-4-previews/","RawContent":null},{"Title":"ActivityTask: A Helper for Async/Await on Android","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Google I/O, several members of the Xamarin team attended the Architecture Component talk on Android lifecycle (which I recommend you watch). While the solutions presented there are interesting and, in some cases, map to patterns we already have in .NET, it resonated with those of us present because of how those Android lifecycle details [&#8230;]","Href":"https://blog.xamarin.com/activitytask-helper-asyncawait-android/","RawContent":null},{"Title":"Podcast: Android Oreo, iOS 11, and Xamarin.Forms Tips & Tricks","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Xamarin support for Android Oreo and iOS 11, share tips for beating the learning curve with Xamarin.Forms, talk upcoming releases in the pipeline, and more! Be sure to download today&#8217;s episode from your favorite podcasting app. Subscribe or Download Today Keeping up with [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-ios-11-xamarin-forms-tips-tricks/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6681108389","Type":"PullRequestEvent","CreatedAt":"2017-10-06T01:06:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/917","RelatedDescription":"Opened pull request \"[Xamarin.Android.NUnitLite] Set `/test-results/@name`\" (#917) at xamarin/xamarin-android","RelatedBody":"We've been running on-device NUnit tests for quite some time, and\r\n[Jenkins is nice enough to provide a test report][xa668].\r\n\r\n[xa668]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/668/testReport/\r\n\r\nThere's just one small annoyance: the Package name for on-device tests\r\nis `(root)`:\r\n\r\n\t# All Tests\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Package                     | Duration  |  Fail |  Skip |  Pass | Total |\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| (root)                      | 14 min    |     0 |   814 | 20260 | 21074 |\r\n\t| Java.Interop.DynamicTests   | 15 sec    |     0 |     0 |    14 |    14 |\r\n\t| ...\r\n\r\nThe reason the for the `(root)` package -- which constitutes all\r\non-device tests -- is that the `TestResults*.xml` file that we pull\r\noff the device contains no `/test-results/@name` attribute:\r\n\r\n\t<!-- from TestResult-Mono.Android_Tests.xml -->\r\n\t<test-results\r\n\t    name=\"\"\r\n\t    total=\"106\"\r\n\t    errors=\"0\"\r\n\t    failures=\"0\"\r\n\t    not-run=\"1\"\r\n\t    inconclusive=\"0\"\r\n\t    ignored=\"1\"\r\n\t    skipped=\"0\"\r\n\t    invalid=\"0\"\r\n\t    date=\"2017-10-05\"\r\n\t    time=\"16:26:30\">\r\n\r\nMy assumption is that when the Jenkins Test Result formatter\r\nencounters a `/test-results/@name` value which is empty -- as seen\r\nabove -- the `(root)` package name is used. The *other*\r\n`TestResult-*.xml` files we produce have values:\r\n\r\n\t<!-- from TestResult-Java.Interop.Dynamic-Tests.xml -->\r\n\t<test-results\r\n\t    name=\"…/xamarin-android/external/Java.Interop/bin/TestDebug/Java.Interop.Dynamic-Tests.dll\"\r\n\t    total=\"14\"\r\n\t    errors=\"0\"\r\n\t    failures=\"0\"\r\n\t    not-run=\"0\"\r\n\t    inconclusive=\"0\"\r\n\t    ignored=\"0\"\r\n\t    skipped=\"0\"\r\n\t    invalid=\"0\"\r\n\t    date=\"2017-10-05\"\r\n\t    time=\"16:03:39\">\r\n\r\nProvide a value for `/test-results/@name` by using the value of\r\n`Android.App.Application.PackageName`, which is the Android package\r\nname of the currently executing application. This will always be a\r\nnon-empty string, and will hopefully result in a more useful table:\r\n\r\n\t# All Tests\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Package                     | Duration  |  Fail |  Skip |  Pass | Total |\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Mono.Android_Tests          |  5 min    |     0 |     0 |   106 |   106 |\r\n\t| Java.Interop.DynamicTests   | 15 sec    |     0 |     0 |    14 |    14 |\r\n\t| ..."},{"Id":"6680407270","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:08:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/911","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Create classes.zip for dx.jar. [WIP]\" (#911) at xamarin/xamarin-android","RelatedBody":"Commit 2d23a275 reverted a change which is required for j8.jar.\r\nBut the change resulted in a command line which would exceed\r\nthe max command line limits on windows.\r\n\r\nIt turns out that both dx.jar and j8.jar allow for a `zip` file\r\nto be used to pass in the `.class` files. So lets create a zip\r\nand refresh/update it on each build. Then use that rather than\r\nthe class directory in `CompileToDalvik`.\r\n\r\nThis also fixes the JarContentBuilder to pick up the android\r\nsdk and ndk directories from the environment variables which\r\nthe build system pass in."},{"Id":"6675829113","Type":"PullRequestEvent","CreatedAt":"2017-10-05T00:51:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/915","RelatedDescription":"Merged pull request \"[Xamarin.Android.Tools.BootstrapTasks] Check Package Manager\" (#915) at xamarin/xamarin-android","RelatedBody":"Emulator-related failures (3294a50e, db668ba0, c0892674, bc6440bc,\r\n3fa9e9e9, b54f8cd2, 3b893cd4, 7450efcc, and 6358a643) are\r\nunfortunately *still* a fact of life (argh!).\r\n\r\nThe current set of issues:\r\n\r\n  * [A never-seen-before failure in `adb uninstall`][xa662]:\r\n\r\n        Tool …/adb execution started with arguments: -s emulator-5570  uninstall \"Mono.Android_Tests\"\r\n        Failure [DELETE_FAILED_INTERNAL_ERROR]\r\n\r\n  * [A continuing problem connecting to the Package Manager][xa664]:\r\n\r\n        Tool …/adb execution started with arguments:   uninstall \"Mono.Android_Tests\"\r\n        Error: Could not access the Package Manager.  Is the system running?\r\n\r\n[xa662]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/662/\r\n[xa664]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/664/\r\n\r\nBoth of these problems appear related to the emulator being in some\r\n\"invalid\" state, and poses the question: can we determine that the\r\nemulator is FUBAR *earlier*, so that we can create a new (saner?)\r\nemulator instance?\r\n\r\nTake a stab in the dark, and hope that *any* `adb shell pm`-related\r\ncommand will trigger the same set of errors, and update the\r\n`<CheckAdbTarget/>` task to issue the following command if the\r\nemulator appears to be valid:\r\n\r\n\tadb shell pm path com.android.shell\r\n\r\nIf the above `pm path` command fails -- ideally with one of the above\r\nmessages -- then flag the target as invalid. This will cause the\r\n`AcquireAndroidTarget` target to use the `<CreateAndroidEmulator/>`\r\nand `<StartAndroidEmulator/>` tasks to create a new emulator.\r\n\r\nThe one downside is that we presumably have these invalid emulators\r\nrunning around in the first place because the `ReleaseAndroidTarget`\r\ntarget isn't reliably exiting the emulator instance (b54f8cd2).\r\n\r\nAttempt to improve this by non-discriminately killing *all*\r\n`emulator` processes within `ReleaseAndroidTarget` on non-Windows\r\nplatforms. (Stabs in the dark are fun!)"},{"Id":"6673612693","Type":"PullRequestEvent","CreatedAt":"2017-10-04T15:35:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/915","RelatedDescription":"Opened pull request \"[Xamarin.Android.Tools.BootstrapTasks] Check Package Manager\" (#915) at xamarin/xamarin-android","RelatedBody":"Emulator-related failures (3294a50e, db668ba0, c0892674, bc6440bc,\r\n3fa9e9e9, b54f8cd2, 3b893cd4, 7450efcc, and 6358a643) are\r\nunfortunately *still* a fact of life (argh!).\r\n\r\nThe current set of issues:\r\n\r\n  * [A never-seen-before failure in `adb uninstall`][xa662]:\r\n\r\n        Tool …/adb execution started with arguments: -s emulator-5570  uninstall \"Mono.Android_Tests\"\r\n        Failure [DELETE_FAILED_INTERNAL_ERROR]\r\n\r\n  * [A continuing problem connecting to the Package Manager][xa664]:\r\n\r\n        Tool …/adb execution started with arguments:   uninstall \"Mono.Android_Tests\"\r\n        Error: Could not access the Package Manager.  Is the system running?\r\n\r\n[xa662]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/662/\r\n[xa664]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/664/\r\n\r\nBoth of these problems appear related to the emulator being in some\r\n\"invalid\" state, and poses the question: can we determine that the\r\nemulator is FUBAR *earlier*, so that we can create a new (saner?)\r\nemulator instance?\r\n\r\nTake a stab in the dark, and hope that *any* `adb shell pm`-related\r\ncommand will trigger the same set of errors, and update the\r\n`<CheckAdbTarget/>` task to issue the following command if the\r\nemulator appears to be valid:\r\n\r\n\tadb shell pm path com.android.shell\r\n\r\nIf the above `pm path` command fails -- ideally with one of the above\r\nmessages -- then flag the target as invalid. This will cause the\r\n`AcquireAndroidTarget` target to use the `<CreateAndroidEmulator/>`\r\nand `<StartAndroidEmulator/>` tasks to create a new emulator.\r\n\r\nThe one downside is that we presumably have these invalid emulators\r\nrunning around in the first place because the `ReleaseAndroidTarget`\r\ntarget isn't reliably exiting the emulator instance (b54f8cd2).\r\n\r\nAttempt to improve this by non-discriminately killing *all*\r\n`emulator` processes within `ReleaseAndroidTarget` on non-Windows\r\nplatforms. (Stabs in the dark are fun!)"},{"Id":"6673336835","Type":"PullRequestEvent","CreatedAt":"2017-10-04T14:47:02","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/913","RelatedDescription":"Closed pull request \"Disable building of Mono net_4_x profile\" (#913) at xamarin/xamarin-android","RelatedBody":"It isn't required to build the monodroid profile and saves a lot of build time."},{"Id":"6669718934","Type":"PullRequestEvent","CreatedAt":"2017-10-03T20:24:26","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/913","RelatedDescription":"Opened pull request \"Disable building of Mono net_4_x profile\" (#913) at xamarin/xamarin-android","RelatedBody":"It isn't required to build the monodroid profile and saves a lot of build time."},{"Id":"6669556985","Type":"PullRequestEvent","CreatedAt":"2017-10-03T19:48:09","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/872","RelatedDescription":"Merged pull request \"[Xamarin.Android.Bcl-Tests] Add BCL test project.\" (#872) at xamarin/xamarin-android","RelatedBody":"What do we want? (with apologies to 48e3fc26)\r\n**MOAR** Unit tests!\r\n\r\nSpecifically, we want to run the BCL unit tests which mono generates:\r\n\r\n        $ cd external/mono/mcs/class/corlib\r\n        $ make PROFILE=monodroid test\r\n        # creates `monodroid_corlib_test.dll`\r\n\r\nCreation of `monodroid_*_test.dll` assemblies and the\r\n`make PROFILE=monodroid test` target is a relatively recent\r\ndevelopment, for which I need to buy the #runtime team some beers.\r\n\r\nIn terms of `mono-runtimes.targets`, we can build *all* of the BCL\r\nunit test assemblies with:\r\n\r\n        $ cd external/mono/mcs/class\r\n        $ make -i do-test PROFILE=monodroid\r\n\r\nNow that we can create them, how do we *use* them? That's the trickier\r\nbit: they need to be built within mono, as part of the existing BCL\r\nbuild process. This in turn means that the BCL unit test assemblies\r\nneed to be distributed as part of the mono bundle, as we don't want to\r\nrebuild the mono repo \"from scratch\" just for the unit tests.\r\n\r\nUpdate `build-tools/mono-runtimes/ProfileAssemblies.projitems` to\r\ninclude a new `@(MonoTestAssembly)` item group which contains all of\r\nthe BCL unit test assemblies and related files which should be\r\nincluded into `bundle-*.zip`. Additionally, add\r\n`ProfileAssemblies.projitems` to `@(VersionFile)` witihin\r\n`bundle-path.targets`, so that if anything within\r\n`ProfileAssemblies.projitems` changes, we rebuild the bundle.\r\n\r\nOnce we *have* the BCL unit test assemblies, and their dependencies,\r\nwe need to *run* them. The new `Xamarin.Android.Bcl-Tests.csproj`\r\nproject is a Xamarin.Android application project which will execute\r\nthe unit tests.\r\n\r\nThere's just one small problem: Xamarin.Android apps want to use\r\n`Xamarin.Android.NUnitLite.dll`. The BCL unit test assemblies instead\r\nbuild against their own `nunitlite.dll`, which has no Xamarin.Android\r\nintegration or support. How do we use the new test assemblies?\r\n\r\n*Force* a fix by using `remap-assembly-ref` to \"rename\" the\r\n`nunitlite` assembly reference to `Xamarin.Android.NUnitLite.dll`.\r\nThis *cannot* be done as part of the `mono-runtimes.mdproj` build, as\r\n`Xamarin.Android.NUnitLite.dll` won't yet exist. Instead, remap the\r\nassemblies within `Xamarin.Android.Bcl-Tests.targets`, and distribute\r\nthe remapped assemblies with the application.\r\n\r\nFinally, address one other \"small\" problem: not all of the unit tests\r\npass! Some of these are for reasons we don't know, and others will\r\nrequire changes to `mono`.\r\n\r\nUpdate `Xamarin.Android.NUnitLite` to allow *filtering* of tests:\r\n\r\n        namespace Xamarin.Android.NUnitLite {\r\n\r\n                partial class TestSuiteActivity {\r\n                        public  ITestFilter   Filter          {get; set;}\r\n\r\n                        public  virtual void  UpdateFilter ();\r\n                }\r\n\r\n                partial class TestSuiteInstrumentation {\r\n                        public  ITestFilter   Filter          {get; set;}\r\n\r\n                        public  virtual void  UpdateFilter ();\r\n                }\r\n        }\r\n\r\n`TestSuiteActivity.UpdateFilter()` is called by\r\n`TestSuiteActivity.OnCreate()`, *after* `GetIncludedCategories()` and\r\n`GetExcludedCategories()` are called, to allow subclasses to alter the\r\n`ITestFilter` which is used to determine which tests are executed.\r\n\r\n`TestSuiteInstrumentation.UpdateFilter()` is called by\r\n`TestSuiteInstrumentation.OnStart()`, *after*\r\n`GetIncludedCategories()` and `GetExcludedCategories()` are called, to\r\nallow subclasses to alter the `ITestFilter` which is used to determine\r\nwhich tests are executed.\r\n\r\n`Xamarin.Android.Bcl_Tests` overrides both of these and updates the\r\n`Filter` property so that \"known failing\" tests are excluded. This\r\nallows us to skip failing tests, giving us time to properly fix them\r\nin time while allowing the rest of this PR to be merged.\r\n\r\nThe skipped tests include:\r\n    \r\n* MonoTests.System.Reflection.AssemblyTest.GetReferencedAssemblies\r\n* MonoTests.System.ServiceModel.Description.WebInvokeAttributeTest.RejectTwoParametersWhenNotWrapped\r\n"},{"Id":"6666863858","Type":"PullRequestEvent","CreatedAt":"2017-10-03T10:03:47","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/912","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tests] Reworks tests to use msbuild. [WIP]\" (#912) at xamarin/xamarin-android","RelatedBody":"This commit reworks the tests to work on msbuild by default.\r\nxbuild is deprecated, so we should ensure that our system works\r\n100% on msbuild."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6680490051","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:28:59","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1186","RelatedDescription":"Opened pull request \"[UWP]  Fix for UWP crashing on load when compiled with .NET Native fo…\" (#1186) at xamarin/Xamarin.Forms","RelatedBody":"…r the store.\r\n\r\n### Description of Change ###\r\n\r\nUWP will crash when loading anything from the WindowsPlatform classes like Forms.Init.  When compiled for the Microsoft Store, Xamarin.Forms apps with crash immediately.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60005\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nXamarin.Forms apps can now be submitted to the Microsoft Store.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680444249","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:17:30","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1185","RelatedDescription":"Opened pull request \"[UWP] Issue where in some weird circumstances(Custom controls) grabbi…\" (#1185) at xamarin/Xamarin.Forms","RelatedBody":"…ng a desired size could cause a null reference exception.\r\n\r\n### Description of Change ###\r\n\r\nAdded a null check in GetDesiredSize() on Control.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60004\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nSmall null check.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680374904","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:00:49","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1184","RelatedDescription":"Opened pull request \"[UWP] Fixed issue where Label.FormattedText was crashing.\" (#1184) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf a Label.FormattedText line contained a null (say from a binding), UWP would crash.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60002\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nUsing a null in a span of the Label.FormattedText property will now no longer crash UWP.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680320779","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:49:00","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1183","RelatedDescription":"Opened pull request \"[UWP] Fixed inconsistency on UWP's DatePicker and the other OS's.\" (#1183) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nChanged the DateTimeOffset on DatePickerRenderer.UWP to create a new date based on an unspecified time zone.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60001\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nThe DatePicker on UWP should show the same value as the other OS's.  There may be other ways to fix this issue, maybe changing the other OS's to match UWP?  Or another way to reset the DateTimeKind.  This worked for us in a jiffy.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6679527779","Type":"PullRequestEvent","CreatedAt":"2017-10-05T17:50:36","Actor":"adamivancza","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1182","RelatedDescription":"Opened pull request \"CGColor creation fixed on iOS\" (#1182) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nI've replaced the ToCGColor extension function so developers can get the desired color on controls that uses CGColor, for example Frame. No special tests needed since it depends on existing methods.\r\n\r\n### Bugs Fixed ###\r\n\r\nCan't find any specific bug report so far, but here is a library that shows the problem: https://github.com/GalaxiaGuy/xamarin-forms-frame-color\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nNone.\r\n\r\n### PR Checklist ###\r\n\r\n- [-] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"},{"Id":"6677282295","Type":"PullRequestEvent","CreatedAt":"2017-10-05T09:49:15","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1181","RelatedDescription":"Opened pull request \"[*] Expose the Flags to the Core\" (#1181) at xamarin/Xamarin.Forms","RelatedBody":""},{"Id":"6675262874","Type":"PullRequestEvent","CreatedAt":"2017-10-04T21:39:46","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1180","RelatedDescription":"Opened pull request \"[Android] Remove NavigationPage fragments after everything else is disposed \" (#1180) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nMoved code that removed fragments upon `NavigationPage` `dispose` to the end of method. This will allow children to be disposed before the fragments are removed so that when we call their `dispose` methods, we don't get an invalid handle exception.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [Bug 45702 - Disabling back press on modal page causes app to crash](https://bugzilla.xamarin.com/show_bug.cgi?id=45702)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (MANUAL, must be MainPage)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6674806465","Type":"PullRequestEvent","CreatedAt":"2017-10-04T19:54:18","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1179","RelatedDescription":"Opened pull request \"Prototypical Cell Cache for IsEnabled testing\" (#1179) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nLeave out UITest.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Provide links to bugs here\r\n\r\n### API Changes ###\r\n\r\nList all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n\r\n### Behavioral Changes ###\r\n\r\nDescribe any non-bug related behavioral changes that may change how users app behaves when upgrading to this version of the codebase.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6674544241","Type":"PullRequestEvent","CreatedAt":"2017-10-04T18:53:45","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1178","RelatedDescription":"Opened pull request \"Revert \"Fix border on android buttons  (#941)\"\" (#1178) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#941 had some unintended visual side effects on Buttons. The fix will be revisited.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Buttons with background color are bigger, lack shadows, and do not \"ripple\"\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nReintroduces https://bugzilla.xamarin.com/show_bug.cgi?id=36031\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6680941587","Type":"PullRequestEvent","CreatedAt":"2017-10-05T23:52:24","Actor":"AdrianMurphy","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2850","RelatedDescription":"Merged pull request \"Fix AppleTLS SecTrustResult by cherry picking fix + bump mono d15-4-xi\" (#2850) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6680921623","Type":"PullRequestEvent","CreatedAt":"2017-10-05T23:44:29","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2850","RelatedDescription":"Opened pull request \"Fix AppleTLS SecTrustResult by cherry picking fix + bump mono d15-4-xi\" (#2850) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6679717265","Type":"PullRequestEvent","CreatedAt":"2017-10-05T18:32:26","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2832","RelatedDescription":"Merged pull request \"[ModelIO] Adds Xcode 9 Beta 1 to Stable API bindings\" (#2832) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"916052505406197760","CreatedAt":"2017-10-05T21:28:31+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":16,"RawContent":null},{"Id":"915970088846659584","CreatedAt":"2017-10-05T16:01:01+00:00","UserScreenname":"xamarinhq","Text":"Upgrade to #XamarinForms Stable release 2.4.0 with .NET Standard 2.0 support today! Learn more about this release:… https://t.co/Ku71DbGybm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":46,"RawContent":null},{"Id":"915688986986901504","CreatedAt":"2017-10-04T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/QclUHc5QGx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":24,"RawContent":null},{"Id":"915603919925125121","CreatedAt":"2017-10-04T15:46:00+00:00","UserScreenname":"xamarinhq","Text":"ICYMI, check out our webinar recording on using UrhoSharp 3D and #Xamarin Workbooks to add 3D animation to your app: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":6,"RawContent":null},{"Id":"915295800825204736","CreatedAt":"2017-10-03T19:21:38+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #Microcharts in today's post from guest blogger @aloisdeniel :… https://t.co/Gl1XMS0UDG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":212,"FavoriteCount":81,"RawContent":null},{"Id":"915249837368627205","CreatedAt":"2017-10-03T16:19:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to embed any #XamarinForms ContentPage into your #Xamarin iOS and Android projects: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":29,"RawContent":null},{"Id":"914940829604679681","CreatedAt":"2017-10-02T19:51:07+00:00","UserScreenname":"xamarinhq","Text":"Add emoji support, physics driven animations, and more to your #Xamarin apps with Android Support Library v26:… https://t.co/iM0N4411PQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":34,"RawContent":null},{"Id":"914883429514215426","CreatedAt":"2017-10-02T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Join us for a FREE event in Denver or McLean to build, test, &amp; distribute a #XamarinForms app to supply a Mars crew… https://t.co/vJ9KA9FPmZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"914685619191808000","CreatedAt":"2017-10-02T02:57:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays is coming to a town near you! Learn how to build, test, and connect native apps with #Xamarin: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":10,"RawContent":null},{"Id":"914295800875945984","CreatedAt":"2017-10-01T01:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to set up and configure an #Azure Notification Hub for your #Xamarin.iOS app: https://t.co/GJAQDvFyAl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":32,"RawContent":null},{"Id":"913848491146977282","CreatedAt":"2017-09-29T19:30:33+00:00","UserScreenname":"xamarinhq","Text":"Find a #Xamarin event near you this October: https://t.co/5rVXaUkyTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"913793742737375232","CreatedAt":"2017-09-29T15:53:00+00:00","UserScreenname":"xamarinhq","Text":"5 ways to boost a #XamarinForms app's start up time: https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":24,"RawContent":null},{"Id":"913493122902056960","CreatedAt":"2017-09-28T19:58:27+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Stable comes to #dotNET Standard 2.0! Details: https://t.co/uLZzFJNACa https://t.co/UuJSdo8LRi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":160,"FavoriteCount":90,"RawContent":null},{"Id":"913433871622041600","CreatedAt":"2017-09-28T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to provision a new iOS device and app in five minutes using #VS4Mac and the open source project fastlane: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":20,"RawContent":null},{"Id":"913112376391733248","CreatedAt":"2017-09-27T18:45:29+00:00","UserScreenname":"xamarinhq","Text":"Add 3D to your app with our webinar recording from Charles Petzold on using UrhoSharp 3D with #Xamarin Workbooks: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":18,"RawContent":null},{"Id":"913071735381118977","CreatedAt":"2017-09-27T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Update #VisualStudio and #VS4Mac for full support to develop #iOS11 apps with #Xamarin: https://t.co/dRGFj7RaZO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":41,"RawContent":null},{"Id":"912752497046978560","CreatedAt":"2017-09-26T18:55:28+00:00","UserScreenname":"xamarinhq","Text":"Try out the latest new features for #Xamarin in #VS2017 without affecting your production environment: https://t.co/6QFngIYygP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":17,"RawContent":null},{"Id":"912704314086428674","CreatedAt":"2017-09-26T15:44:00+00:00","UserScreenname":"xamarinhq","Text":"Add local notifications to your Xamarin.Mac applications: https://t.co/fmHnM8m18Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"912414874571038732","CreatedAt":"2017-09-25T20:33:52+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2017-10-06T05:32:04.1176675Z","RunDurationInMilliseconds":3612}