{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":170,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6897620825","Type":"PullRequestEvent","CreatedAt":"2017-11-24T04:07:52","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15180","RelatedDescription":"Merged pull request \"Implementation for new string.contains api\" (#15180) at dotnet/coreclr","RelatedBody":"Api Approved \r\nissue- https://github.com/dotnet/corefx/issues/25094\r\ntests pr - https://github.com/dotnet/corefx/pull/25448"},{"Id":"6897349897","Type":"PullRequestEvent","CreatedAt":"2017-11-24T01:41:52","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15202","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-25924-01 (master)\" (#15202) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6897286792","Type":"PullRequestEvent","CreatedAt":"2017-11-24T01:03:48","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15188","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, PgoData to preview1-25923-02, preview1-25923-02, master-20171123-0035, respectively (master)\" (#15188) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6896960706","Type":"PullRequestEvent","CreatedAt":"2017-11-23T21:38:16","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15201","RelatedDescription":"Opened pull request \"Added Key in KeyNotFoundException\" (#15201) at dotnet/coreclr","RelatedBody":"issue- dotnet/corefx#5188 "},{"Id":"6896890955","Type":"PullRequestEvent","CreatedAt":"2017-11-23T21:03:09","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15200","RelatedDescription":"Opened pull request \"[WIP] Improve SSA topological sort\" (#15200) at dotnet/coreclr","RelatedBody":"Use a single stack (storing a single successor enumerator) instead of 3."},{"Id":"6896091195","Type":"IssuesEvent","CreatedAt":"2017-11-23T16:13:46","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/9215","RelatedDescription":"Reopened issue \"Delegate.CreateDelegate() - parameter validation hole.\" (#9215) at dotnet/coreclr","RelatedBody":"Consider the following.\r\n\r\n```\r\n    public class C\r\n    {\r\n        public static void Main()\r\n        {\r\n            Type theT = typeof(G<>).GetTypeInfo().GenericTypeParameters[0];\r\n            Type delegateType = typeof(Func<object, object, bool>);\r\n            Delegate d = Delegate.CreateDelegate(delegateType, theT, \"ReferenceEquals\");\r\n        }\r\n    }\r\n\r\n    public class G<T> { }\r\n```\r\n\r\nExpected behavior would be an ArgumentException on \"target.\" \r\n\r\nProblem is that the <a href=\"https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Delegate.cs#L71\">validation code</a> that's supposed to catch this is written as:\r\n\r\n\r\n\r\n```\r\n            if (target.IsGenericType && target.ContainsGenericParameters)\r\n                throw new ArgumentException(Environment.GetResourceString(\"Arg_UnboundGenParam\"), nameof(target));\r\n\r\n```\r\n\r\nThe \"IsGenericType\" part of the conditional makes no sense - it lets types that represent type variables slide through.\r\n\r\nThe result is not pleasing (as in FatalExecutionEngine errors and unmanaged asserts firing.)\r\n\r\n\r\n"},{"Id":"6896065701","Type":"IssuesEvent","CreatedAt":"2017-11-23T16:07:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/9215","RelatedDescription":"Closed issue \"Delegate.CreateDelegate() - parameter validation hole.\" (#9215) at dotnet/coreclr","RelatedBody":"Consider the following.\r\n\r\n```\r\n    public class C\r\n    {\r\n        public static void Main()\r\n        {\r\n            Type theT = typeof(G<>).GetTypeInfo().GenericTypeParameters[0];\r\n            Type delegateType = typeof(Func<object, object, bool>);\r\n            Delegate d = Delegate.CreateDelegate(delegateType, theT, \"ReferenceEquals\");\r\n        }\r\n    }\r\n\r\n    public class G<T> { }\r\n```\r\n\r\nExpected behavior would be an ArgumentException on \"target.\" \r\n\r\nProblem is that the <a href=\"https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Delegate.cs#L71\">validation code</a> that's supposed to catch this is written as:\r\n\r\n\r\n\r\n```\r\n            if (target.IsGenericType && target.ContainsGenericParameters)\r\n                throw new ArgumentException(Environment.GetResourceString(\"Arg_UnboundGenParam\"), nameof(target));\r\n\r\n```\r\n\r\nThe \"IsGenericType\" part of the conditional makes no sense - it lets types that represent type variables slide through.\r\n\r\nThe result is not pleasing (as in FatalExecutionEngine errors and unmanaged asserts firing.)\r\n\r\n\r\n"},{"Id":"6896057908","Type":"PullRequestEvent","CreatedAt":"2017-11-23T16:06:02","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15198","RelatedDescription":"Merged pull request \"Revert making Nullable<T> readonly\" (#15198) at dotnet/coreclr","RelatedBody":"cc: @jkotas, @VSadov, @jaredpar "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6896881219","Type":"PullRequestEvent","CreatedAt":"2017-11-23T20:58:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8093","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25923-01 (master)\" (#8093) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6896683665","Type":"PullRequestEvent","CreatedAt":"2017-11-23T19:29:15","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8093","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25923-01 (master)\" (#8093) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6895158453","Type":"IssuesEvent","CreatedAt":"2017-11-23T12:49:57","Actor":"evil-shrike","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8092","RelatedDescription":"Opened issue \"add package: Add verbosity option\" (#8092) at dotnet/cli","RelatedBody":"`dotnet restore` [supports](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore?tabs=netcore2x) verbosity option:\r\n```\r\ndotnet restore --verbosity q\r\n```\r\nIt'd nice to have the same option for `add package`:\r\n```\r\ndotnet add package MyPackage --versobity q\r\n```\r\nCurrently it reports an error:\r\n\"Please specify one package reference to add\"\r\n\r\nCurrently output from installing package is very noisy. Especially if compare it with npm/yarn."},{"Id":"6893664571","Type":"IssuesEvent","CreatedAt":"2017-11-23T05:53:45","Actor":"ms0713","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8072","RelatedDescription":"Closed issue \".net core 2.0 console app running on windows but failing on linux (RHEL7)\" (#8072) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nMy .net core 2.0 console application runs properly in Windows OS. But I m having problem running it on RHEL7.\r\n\r\nIn my .sln file, I have 6-7 projects (.Net Stansard Library 2.0). Some projects depends on some other. But my solution file does not contain any word like postProject.\r\n\r\nWhen I run following command, it gives no error and command prompt comes back without doing anything. Also it gives no error or nothing.\r\n$ dotnet AppName.dll 1\r\n1 is command line argument.\r\n\r\nMy application uses SQL connection, Reflection, Third Party dlls( developed in c++), socket connection etc.\r\n\r\nI also tried running a demo application with command line arguments, SQL connection. It works fine in RHEL7.\r\nMy application dll has version like 1.2.3.4.\r\nWhile Publishing my code, it gives target runtime as Portable. But another sample with target runtime as Portable wotks fine in RHEL7.\r\n\r\nWhat could be the problem? If you have any idea regarding this please share.\r\n\r\n## Expected  behavior\r\nIt should successfully run on linux environment (RHEL7).\r\n\r\n## Actual behavior\r\nWhile running from command promt it returns back to command prompt without giving any error.\r\n\r\n## Environment data\r\n1. Linux (RHEL 7).\r\n2. Code build through Visual Studio 2017 and published.\r\n3. One of the project reference third party dll, which is written in c++.\r\n4. It uses SQL connection, command line arguments, GC(Garbage Collector) related things, Socket connection, etc.\r\n5. It runs successfully on Windows Server 2012 R2 Standard edition.\r\n6. Demo application containing SQL, command line arguments works fiine on Linux.\r\n\r\nCould it be a GC(Garbage Collector) related problem?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6893484316","Type":"PullRequestEvent","CreatedAt":"2017-11-23T04:11:18","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8091","RelatedDescription":"Opened pull request \"Update F# for VS2017.6\" (#8091) at dotnet/cli","RelatedBody":"Update the compiler for the dotnet cli in dotnet fsi.\r\n\r\n\r\n"},{"Id":"6893208643","Type":"PullRequestEvent","CreatedAt":"2017-11-23T01:51:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8089","RelatedDescription":"Merged pull request \"Changing the core setup blob url to one that does not use a CDN\" (#8089) at dotnet/cli","RelatedBody":"Changing the core setup blob url to one that does not use a CDN to try and see if that gets us over signing problems we are seeing.\r\n"},{"Id":"6893068286","Type":"PullRequestEvent","CreatedAt":"2017-11-23T00:40:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8088","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25922-04 (master)\" (#8088) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6893064284","Type":"IssuesEvent","CreatedAt":"2017-11-23T00:38:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7360","RelatedDescription":"Closed issue \"\"Manage User Secrets\" in VS context menu for Console Apps?\" (#7360) at dotnet/cli","RelatedBody":"Is there a reason why .NET Core Console Apps don't show the \"Manage User Secrets\" option in the project context menu (in Visual Studio), like Web Applications do? I was able to use the dotnet user-secrets command to set them, but it'd be nice to have the same experience that Web Application have. I wanted to copy-paste a list of several of secrets and instead had to do them one-by-one in the command line.\r\n\r\nIf this is just a matter of putting the work into it, I might give it a shot."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6893875796","Type":"IssuesEvent","CreatedAt":"2017-11-23T07:25:10","Actor":"WalterEbbers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/575","RelatedDescription":"Closed issue \".NET Standard 2.0 / .NET Framework 4.6.1 Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\" (#575) at dotnet/standard","RelatedBody":"Hi,\r\nI have a .NET Standard 2.0 library which references a few NET 4.6.1 libraries. \r\nThe .NET Standard library will be used in a .NET Core web application. \r\nThe .NET 4.6.1 Framework uses library 'System.ServiceModel.dll' for WCF calls.\r\n\r\nI try to do the following. \r\nMy .NET Core webapp goes to the .NET Standard library which calls something from my .NET Framework 4.6.1 project. But at that moment i get the following error: \r\n'Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.'\r\n\r\nThe 'System.ServiceModel.dll' is referenced as a assemblyreference in the .NET Standard project and the .NET Core webapp. \r\n\r\nI really thought that this would work but sadly it doesn't. Is this a issue with the .NET libraries?\r\nDo i need to change things in my .NET Standard / Core project?\r\n\r\nThnx in advance :) \r\n\r\nWalter\r\n\r\n\r\n\r\n"},{"Id":"6891923193","Type":"IssuesEvent","CreatedAt":"2017-11-22T18:51:46","Actor":"mb236","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/591","RelatedDescription":"Opened issue \".NET Standard 2 Library missing assembly error\" (#591) at dotnet/standard","RelatedBody":"I'm currently working on migrating a PCL to a .NET Standard 2.0 Library. After I have readded all NuGet dependencies I get the following error:\r\n`The type 'IReflectable' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Reflection, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'`\r\n\r\nThe strange part about it is that i get this error on exactly four lines in the project. If I comment these lines out, the errors are gone and compilation is successful. Is there any fix for this problem?"},{"Id":"6887314583","Type":"PullRequestEvent","CreatedAt":"2017-11-21T22:52:11","Actor":"jcagme","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/589","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02221-02 (master)\" (#589) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6897672365","Type":"PullRequestEvent","CreatedAt":"2017-11-24T04:39:22","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25476","RelatedDescription":"Merged pull request \"Update CoreClr, CoreSetup to preview1-25924-01, preview1-25923-01, respectively (master)\" (#25476) at dotnet/corefx","RelatedBody":""},{"Id":"6897627095","Type":"PullRequestEvent","CreatedAt":"2017-11-24T04:11:41","Actor":"lzybkr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25478","RelatedDescription":"Opened pull request \"Speed up Windows ProcessManager.OpenProcess\" (#25478) at dotnet/corefx","RelatedBody":"If a process is running as a normal user (not elevated), many calls to\r\n`kernel32.OpenProcess` fail.\r\n\r\nIn `ProcessManager.OpenProcess`, when the first call to `kernel32.OpenProcess`\r\nfails, another call is made indirectly in `ProcessManager.IsProcessRunning`\r\nwhich will also fail.\r\n\r\nWhen `ProcessManager.IsProcessRunning` can't get a handle to the process, it\r\nfalls back on a much more expensive check - enumerating all processes.\r\n\r\nThe fix is to assume the process is running if the error code is\r\nERROR_ACCESS_DENIED.\r\n\r\nThis performance issue adds roughly 1 second of overhead when running\r\n`Get-Process` in an interactive non-elevated PowerShell session where\r\nthe CPU property is displayed."},{"Id":"6897527239","Type":"IssuesEvent","CreatedAt":"2017-11-24T03:15:57","Actor":"lakeman","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25477","RelatedDescription":"Opened issue \"AsyncLocal.OnValueChanged seems to be called with a stale change, crashing the process\" (#25477) at dotnet/corefx","RelatedBody":"I've attempted to write a middleware service to use WindowsIdentity.RunImpersonated, Wait()-ing for the next handler to return. \r\n\r\nHowever I've seen that WindowsIdentity.CurrentImpersonatedTokenChanged is called a final time after my middleware finishes, with a closed but valid windows token. This leads to Environment.FailFast being called in ExecutionContext.OnContextChanged, which is logging the stack trace from OnContextChanged, but isn't logging the details of the exception that was caught.\r\n\r\nThere seem to be three problems here;\r\n- We need an async version of RunImpersonated (#24977)\r\n- Environment.FailFast should log the exception details\r\n- AsyncLocal.OnValueChanged seems to be called with a stale change after an async task has completed.\r\n\r\nIn the meantime, I've worked around the problem by calling advapi32.dll ImpersonateLoggedOnUser / RevertToSelf directly from an AsyncLocal change handler, essentially implementing an async version of RunImpersonated myself."},{"Id":"6897348044","Type":"PullRequestEvent","CreatedAt":"2017-11-24T01:40:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25476","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-25924-01, preview1-25923-01, respectively (master)\" (#25476) at dotnet/corefx","RelatedBody":""},{"Id":"6897302533","Type":"PullRequestEvent","CreatedAt":"2017-11-24T01:13:22","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25475","RelatedDescription":"Opened pull request \"Corrected definations of obfuscation attributes\" (#25475) at dotnet/corefx","RelatedBody":"Issue - #25116 "},{"Id":"6897250076","Type":"IssuesEvent","CreatedAt":"2017-11-24T00:39:21","Actor":"bertdev","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25070","RelatedDescription":"Closed issue \"When I try to build the corefx in my local with VS2017 enterprise, it always point to community.\" (#25070) at dotnet/corefx","RelatedBody":"![image](https://user-images.githubusercontent.com/33082483/32431896-4087655c-c310-11e7-90f2-b265f5938287.png)\r\n\r\nActually I have installed an enterprise version of VS2017."},{"Id":"6897202033","Type":"PullRequestEvent","CreatedAt":"2017-11-24T00:04:00","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25474","RelatedDescription":"Opened pull request \"TextReader.Read base implementation for count == 0\" (#25474) at dotnet/corefx","RelatedBody":"issue - #23810 "},{"Id":"6897123169","Type":"IssuesEvent","CreatedAt":"2017-11-23T23:10:21","Actor":"grant-d","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25023","RelatedDescription":"Closed issue \"System.Collections: Dictionary.Empty<K, V>()\" (#25023) at dotnet/corefx","RelatedBody":"Concrete implementations of `IDictionary<K, V>` and `IReadOnlyDictionary<K, V>` do not provide `Empty` singletons, per those for `Array.Empty` and `Enumerable.Empty`. \r\nThis proposal would permit the same idiom to be available for `Dictionary`.\r\n\r\n# Rationale and Usage\r\n\r\nThis is a nice-to-have, but helps in environments where resources are constrained. The current idiom is to create a `new Dictionary<K, V>(0)` but that incurs not-insignificant private state, and the semantics of 'immutably empty' are different to those for 'empty but not populated yet'. \r\n\r\nThere are several data structures that build up maps of maps, for example `System.Json`. In scenarios where datasets are large, the cost and semantics of `pseudo-empty` add up.\r\n\r\nFor scenarios where we have lists instead of maps, we already use `Array.Empty<T>` or `Enumerable.Empty<T>`. It would be consistent to provide the same facility for maps.\r\n\r\n```C#\r\n    var empty = Dictionary.Empty<string, Foo>(); \r\n    empty.Count; // 0\r\n    empty.IsReadOnly; // true\r\n    empty[\"hi\"]; // KeyNotFound or InvalidOperation (?)\r\n    empty.Add(...); // InvalidOperation\r\n    Keys; // Array.Empty<K>\r\n```\r\n\r\n# Proposed API\r\n```C#\r\n    public static class Dictionary // See open questions\r\n    {\r\n        /// <summary>\r\n        /// Returns an empty dictionary that is immutable.\r\n        /// </summary>\r\n        /// <typeparam name=\"TKey\">The type of keys in the dictionary.</typeparam>\r\n        /// <typeparam name=\"TValue\">The type of values in the dictionary.</typeparam>\r\n        /// <returns>Returns an empty <see cref=\"IDictionary{TKey, TValue}\".</returns>\r\n        public static IDictionary<TKey, TValue> Empty<TKey, TValue>() => <singleton impl>;\r\n    }\r\n\r\n    public static class ReadOnlyDictionary\r\n    {\r\n        /// <summary>\r\n        /// Returns an empty dictionary that is immutable.\r\n        /// </summary>\r\n        /// <typeparam name=\"TKey\">The type of keys in the dictionary.</typeparam>\r\n        /// <typeparam name=\"TValue\">The type of values in the dictionary.</typeparam>\r\n        /// <returns>Returns an empty <see cref=\"IReadOnlyDictionary{TKey, TValue}\".</returns>\r\n        public static IReadOnlyDictionary<TKey, TValue> ReadOnlyEmpty<TKey, TValue>() => <singleton impl>;\r\n    }\r\n```\r\n\r\n# Details\r\nThe singletons would return sensible defaults where possible for getters, though indexers would need to throw. Since `IsReadOnly==true`, mutators should throw too. \r\nAll errors should align with those used when a traditional `Dictionary` has 'IsReadOnly=true`.\r\n\r\n\r\n# Open Questions\r\n* I am not sure what namespace & class name to use, since the chance of conflict (in user code) is high if we used `public static class Dictionary` to host the `Empty` singleton. Ditto for `ReadOnlyDictionary`.\r\n* I initially thought that the immutable nature of `Dictionary.Empty` might surprise or confuse users, but if we set `IsReadOnly=true` then it should cause less friction. `ReadOnlyDictionary.Empty` is already expected to be immutable, so it should not have the same problem.\r\n* Not sure exactly what errors to throw in the indexers and mutators. See previous bullet.\r\n\r\nPrototype comprises 3 classes; [ReadOnlyDictionary class](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/ReadOnlyDictionary.cs), [Dictionary class](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/Dictionary.cs) and [Singleton implementation](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/EmptyDictionaryImpl.cs). \r\n\r\n# Pull Request\r\nI am happy to contribute the PR, when/if we gain consensus\r\n\r\n# Updates\r\n\r\n\r\nHappy to PR, but would especially need guidance on namespace, naming, decision on immutability.\r\n"},{"Id":"6897067029","Type":"PullRequestEvent","CreatedAt":"2017-11-23T22:36:06","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25473","RelatedDescription":"Opened pull request \"Remove invalid assertion from Microsoft.CSharp's BindIsEvent\" (#25473) at dotnet/corefx","RelatedBody":"Missed when #25420 removed two similar from InvokeMember.\r\n\r\nAlso include tests for IsEvent, BindIsEvent, etc."},{"Id":"6897058938","Type":"PullRequestEvent","CreatedAt":"2017-11-23T22:31:32","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25472","RelatedDescription":"Opened pull request \"Key item added to KeyNotFoundException\" (#25472) at dotnet/corefx","RelatedBody":"issue- #5188\r\ncoreclr pr - https://github.com/dotnet/coreclr/pull/15201"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6896950427","Type":"IssuesEvent","CreatedAt":"2017-11-23T21:32:47","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23239","RelatedDescription":"Closed issue \"CodeAction GetChangedSolution broken ?\" (#23239) at dotnet/roslyn","RelatedBody":"Happens in vs4mac.\r\n\r\naction.GetChangedSolutionAsync is missing post processing in the generated code - GetChangedSolutionInternalAsync(true, token); is doing the wrong thing for us. Are we doing something wrong ?\r\n\r\nVSTS: https://devdiv.visualstudio.com/DevDiv/_workitems?id=518783&fullScreen=true&_a=edit\r\n\r\nThis fixes it for us:\r\nhttps://github.com/mono/monodevelop/pull/3359\r\n\r\n"},{"Id":"6896313232","Type":"IssuesEvent","CreatedAt":"2017-11-23T17:10:37","Actor":"VladimirReshetnikov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23369","RelatedDescription":"Opened issue \"void-returning method calls should not be allowed as arguments in __arglist(...)\" (#23369) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.5.0 Preview 4.0\r\nVisualStudio.15.Preview/15.5.0-pre.4.0+27110.0\r\n\r\nVisual C# 2017 00369-60000-00001-AA127\r\nMicrosoft Visual C# 2017\r\n\r\nC# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nusing System;\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(string.Concat(\"1\", \"2\", \"3\", \"4\", __arglist(Console.ReadLine())));  // OK      \r\n        Console.WriteLine(string.Concat(\"1\", \"2\", \"3\", \"4\", __arglist(Console.WriteLine()))); // Unhandled Exception: System.InvalidProgramException: Common Language Runtime detected an invalid program.  \r\n    }\r\n}\r\n```\r\n\r\nThe second line should be a compile-time error rather than a runtime exception."},{"Id":"6895137354","Type":"IssuesEvent","CreatedAt":"2017-11-23T12:44:52","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23368","RelatedDescription":"Opened issue \"Incorrect suggestion for object initialization simplification\" (#23368) at dotnet/roslyn","RelatedBody":"Consider the following code:\r\n\r\n``` c#\r\ninterface IExample {\r\n    string Name { get; set; }\r\n}\r\n\r\nclass C : IExample {\r\n    string IExample.Name { get; set; }\r\n}\r\n\r\nvoid Repro() {\r\n  IExample e = new C();\r\n  e.Name = \"jared\"\r\n}\r\n```\r\n\r\nGiven this code the IDE will add the suggestion IDE0017, object initialization can be simplified, on the `IExample e` line. The suggested fix is the following:\r\n\r\n``` c#\r\nIExample e = new C {\r\n  Name = \"jared\"\r\n};\r\n```\r\n\r\nThis results in code that won't compile. The name `Name` is only legal through the type `IExample` but the fix causes `Name` to be evaluated in the context of `C` instead. \r\n"},{"Id":"6893924534","Type":"IssuesEvent","CreatedAt":"2017-11-23T07:43:00","Actor":"paul1956","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23367","RelatedDescription":"Opened issue \"VB ErrorBC32089 on valid code or invalid code with no error\" (#23367) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n15.4.4\r\n**Steps to Reproduce**:\r\n```\r\nOption Strict Off\r\nOption Infer Off\r\n        Friend Overloads Shared Function GetUnificationUseSiteDiagnosticRecursive(Of T As TypeSymbol)(types As ImmutableArray(Of T), owner As Symbol, ByRef checkedTypes As HashSet(Of TypeSymbol)) As DiagnosticInfo\r\n            For Each t In types '            For Each t As T In types '***** This line is the issue\r\n \r\n            Next\r\n            Return Nothing\r\n        End Function\r\n```\r\n**Expected Behavior**:\r\nThe code above should be invalid no matter the state of Option Infer or the commented code should be valid in both cases.\r\n**Actual Behavior**:\r\nIt is only valid with Option Infer On  and no As Clause, there is no way to make the code valid with Option Infer Off or by adding the As Clause."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6897718377","Type":"PullRequestEvent","CreatedAt":"2017-11-24T05:07:04","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5014","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5014) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6897626984","Type":"PullRequestEvent","CreatedAt":"2017-11-24T04:11:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5014","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5014) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6897193334","Type":"IssuesEvent","CreatedAt":"2017-11-23T23:57:57","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5013","RelatedDescription":"Opened issue \"Base class library size on disk footprint workitems\" (#5013) at dotnet/corert","RelatedBody":"I spent some time looking into why an optimized Hello World is 3.8 MB big on Windows. There are two ways to look at this problem: what we do in the compiler to make it this big, and what we do in the class libraries that forces it to be so big. This issue tracks the latter.\r\n\r\nWith a [set of hacks here](https://github.com/MichalStrehovsky/corert/commit/ba04e683cbb647e42a4f448ffb65457f6a826d6f) Hello World can go down to about 2.4 MB. I was focusing mostly on getting the reflection stack out of the binary.\r\n\r\nThe problems:\r\n\r\n- [ ] Some pieces of the class library have ETW tracing enabled. This heavily relies on reflection to work and brings pretty much everything into the binary.\r\n- [ ] ResourceManager. This is mostly used to bring localized exception messages. Too bad we don't have any in the framework. ResourceManager parses custom attributes, so custom attribute support, reflection method invocation, reflection field access etc. is all brought it.\r\n- [ ] Unhandled exception stack trace experience eagerly populates `MethodBase` when initializing `StackFrame`, bringing a lot of MethodInfo support in. This is totally my fault. I asked for this to be implemented similar to CoreCLR, but we have good reasons to make `StackFrame` a bit different.\r\n- [ ] Enum.ToString. We'll probably want a more low level version of this. There's no way around not generating this. Someone will box and enum and someone will call a `ToString`. We'll need to generate this method. It better be lightweight.\r\n- [ ] ValueType.Equals/GetHashCode. This reflects on fields. We've heard complaints that when we fall back to this implementation, it's super slow. Maybe we want something more low level here (e.g. small NativeFormat data structures describing field offsets and their types, if valuetype). If we build new data structures, we'll also need to teach the type loader to build them.\r\n- [ ] IsByRefLike. This is implemented as a custom attribute search. Maybe we shouldn't be calling it from the codepath where it's being called right now.\r\n\r\nThere are also some other opportunities I didn't measure yet:\r\n* There's still a bunch of type loader left in the image. We're not loading new types. It shouldn't be needed.\r\n* Globalization support. We should look into exposing dummy globalization as a build option.\r\n* Manifest resources. We're still emitting 160 kB of resource strings even though the resource manager is gone.\r\n* There's a bunch more reflection stack in there, mostly to support Object.ToString()."},{"Id":"6897079664","Type":"IssuesEvent","CreatedAt":"2017-11-23T22:43:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5012","RelatedDescription":"Reopened issue \"NativeCallable methods can only be called from unmanaged code\" (#5012) at dotnet/corert","RelatedBody":"Calling a method marked with the NativeCallable attribute from managed code throws an unhandled exception.\r\n\r\nE.g\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello World\");\r\n        Print();\r\n    }\r\n\r\n    [NativeCallable(EntryPoint = \"Print\", CallingConvention = CallingConvention.StdCall)]\r\n    static int Print()\r\n    {\r\n        Console.WriteLine(\"Hello from managed code\");\r\n        Random random = new Random();\r\n        return random.Next() + 4;\r\n    }\r\n}\r\n```\r\n\r\nThe generated native binary aborts at the point where `Main` calls `Print`\r\n\r\nOperating System: macOS Sierra\r\nFull LLVM stack trace:\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007fffc01abd42 libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fffc0299457 libsystem_pthread.dylib`pthread_kill + 90\r\n    frame #2: 0x00007fffc0111420 libsystem_c.dylib`abort + 129\r\n    frame #3: 0x00000001001cefd8 csnative`::RaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkUnix.cpp:174\r\n    frame #4: 0x000000010002ba73 csnative`PalRaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkFunctions.h:185\r\n    frame #5: 0x000000010002e018 csnative`Thread::ReversePInvokeAttachOrTrapThread(this=0x0000000101301270, pFrame=0x00007fff5fbff358) at thread.cpp:1148\r\n    frame #6: 0x000000010002e4b7 csnative`::RhpReversePInvokeAttachOrTrapThread2(pFrame=0x00007fff5fbff358) at thread.cpp:1324\r\n    frame #7: 0x000000010002e5c2 csnative`::RhpReversePInvoke2(pFrame=0x00007fff5fbff358) at thread.cpp:1339\r\n    frame #8: 0x00000001001f5140 csnative`Print + 32\r\n    frame #9: 0x00000001001f4fe5 csnative`csnative_csnative_Program__Main + 37\r\n    frame #10: 0x000000010046eb30 csnative`csnative__Module___MainMethodWrapper + 20\r\n    frame #11: 0x000000010046ebbb csnative`__managed__Main + 127\r\n    frame #12: 0x000000010000b84f csnative`main(argc=1, argv=0x00007fff5fbff480) at main.cpp:362\r\n    frame #13: 0x00007fffc007d235 libdyld.dylib`start + 1\r\n```"},{"Id":"6897072317","Type":"IssuesEvent","CreatedAt":"2017-11-23T22:39:14","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5012","RelatedDescription":"Closed issue \"NativeCallable methods can only be called from unmanaged code\" (#5012) at dotnet/corert","RelatedBody":"Calling a method marked with the NativeCallable attribute from managed code throws an unhandled exception.\r\n\r\nE.g\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello World\");\r\n        Print();\r\n    }\r\n\r\n    [NativeCallable(EntryPoint = \"Print\", CallingConvention = CallingConvention.StdCall)]\r\n    static int Print()\r\n    {\r\n        Console.WriteLine(\"Hello from managed code\");\r\n        Random random = new Random();\r\n        return random.Next() + 4;\r\n    }\r\n}\r\n```\r\n\r\nThe generated native binary aborts at the point where `Main` calls `Print`\r\n\r\nOperating System: macOS Sierra\r\nFull LLVM stack trace:\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007fffc01abd42 libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fffc0299457 libsystem_pthread.dylib`pthread_kill + 90\r\n    frame #2: 0x00007fffc0111420 libsystem_c.dylib`abort + 129\r\n    frame #3: 0x00000001001cefd8 csnative`::RaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkUnix.cpp:174\r\n    frame #4: 0x000000010002ba73 csnative`PalRaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkFunctions.h:185\r\n    frame #5: 0x000000010002e018 csnative`Thread::ReversePInvokeAttachOrTrapThread(this=0x0000000101301270, pFrame=0x00007fff5fbff358) at thread.cpp:1148\r\n    frame #6: 0x000000010002e4b7 csnative`::RhpReversePInvokeAttachOrTrapThread2(pFrame=0x00007fff5fbff358) at thread.cpp:1324\r\n    frame #7: 0x000000010002e5c2 csnative`::RhpReversePInvoke2(pFrame=0x00007fff5fbff358) at thread.cpp:1339\r\n    frame #8: 0x00000001001f5140 csnative`Print + 32\r\n    frame #9: 0x00000001001f4fe5 csnative`csnative_csnative_Program__Main + 37\r\n    frame #10: 0x000000010046eb30 csnative`csnative__Module___MainMethodWrapper + 20\r\n    frame #11: 0x000000010046ebbb csnative`__managed__Main + 127\r\n    frame #12: 0x000000010000b84f csnative`main(argc=1, argv=0x00007fff5fbff480) at main.cpp:362\r\n    frame #13: 0x00007fffc007d235 libdyld.dylib`start + 1\r\n```"},{"Id":"6897008161","Type":"IssuesEvent","CreatedAt":"2017-11-23T22:03:10","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5012","RelatedDescription":"Opened issue \"NativeCallable methods can only be called from unmanaged code\" (#5012) at dotnet/corert","RelatedBody":"Calling a method marked with the NativeCallable attribute from managed code throws an unhandled exception.\r\n\r\nE.g\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello World\");\r\n        Print();\r\n    }\r\n\r\n    [NativeCallable(EntryPoint = \"Print\", CallingConvention = CallingConvention.StdCall)]\r\n    static int Print()\r\n    {\r\n        Console.WriteLine(\"Hello from managed code\");\r\n        Random random = new Random();\r\n        return random.Next() + 4;\r\n    }\r\n}\r\n```\r\n\r\nThe generated native binary aborts at the point where `Main` calls `Print`\r\n\r\nOperating System: macOS Sierra\r\nFull LLVM stack trace:\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\r\n  * frame #0: 0x00007fffc01abd42 libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fffc0299457 libsystem_pthread.dylib`pthread_kill + 90\r\n    frame #2: 0x00007fffc0111420 libsystem_c.dylib`abort + 129\r\n    frame #3: 0x00000001001cefd8 csnative`::RaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkUnix.cpp:174\r\n    frame #4: 0x000000010002ba73 csnative`PalRaiseFailFastException(arg1=0x0000000000000000, arg2=0x0000000000000000, arg3=1) at PalRedhawkFunctions.h:185\r\n    frame #5: 0x000000010002e018 csnative`Thread::ReversePInvokeAttachOrTrapThread(this=0x0000000101301270, pFrame=0x00007fff5fbff358) at thread.cpp:1148\r\n    frame #6: 0x000000010002e4b7 csnative`::RhpReversePInvokeAttachOrTrapThread2(pFrame=0x00007fff5fbff358) at thread.cpp:1324\r\n    frame #7: 0x000000010002e5c2 csnative`::RhpReversePInvoke2(pFrame=0x00007fff5fbff358) at thread.cpp:1339\r\n    frame #8: 0x00000001001f5140 csnative`Print + 32\r\n    frame #9: 0x00000001001f4fe5 csnative`csnative_csnative_Program__Main + 37\r\n    frame #10: 0x000000010046eb30 csnative`csnative__Module___MainMethodWrapper + 20\r\n    frame #11: 0x000000010046ebbb csnative`__managed__Main + 127\r\n    frame #12: 0x000000010000b84f csnative`main(argc=1, argv=0x00007fff5fbff480) at main.cpp:362\r\n    frame #13: 0x00007fffc007d235 libdyld.dylib`start + 1\r\n```"},{"Id":"6896956043","Type":"IssuesEvent","CreatedAt":"2017-11-23T21:35:47","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5011","RelatedDescription":"Opened issue \"Support for Reflection.Emit in CoreRT\" (#5011) at dotnet/corert","RelatedBody":"We should consider porting Mono's .NET interpreter (http://www.mono-project.com/news/2017/11/13/mono-interpreter/) over to CoreRT, to support runtime IL generation and execution within native code"},{"Id":"6896428027","Type":"PullRequestEvent","CreatedAt":"2017-11-23T17:46:40","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5010","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6896310144","Type":"PullRequestEvent","CreatedAt":"2017-11-23T17:09:44","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5010","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5010) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6896306164","Type":"PullRequestEvent","CreatedAt":"2017-11-23T17:08:35","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5009","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5009) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6893453650","Type":"IssuesEvent","CreatedAt":"2017-11-23T03:54:56","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1623","RelatedDescription":"Closed issue \"SolutionDir is not resolved during dotnet restore\" (#1623) at dotnet/sdk","RelatedBody":"See the following repository that can reproduce the error\r\n\r\nhttps://github.com/bradphelan/msbuildbug\r\n\r\nfirst reported at\r\n\r\nhttps://stackoverflow.com/questions/46526428/msbuild-solutiondir-resolves-incorrectly-to-c-when-running-msbuild-tresto"},{"Id":"6893426284","Type":"IssuesEvent","CreatedAt":"2017-11-23T03:40:34","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1755","RelatedDescription":"Closed issue \".NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library with PackageReference fails\" (#1755) at dotnet/sdk","RelatedBody":"I have a .NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library (works fine)\r\n\r\nHowever, if the .NET Framework 4.7.1 adds a PackageReference (new style), I get the following error (possibly due to transitivity):\r\n\r\nError    NU1201           Project ClassLibrary2 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project ClassLibrary2 supports: net471 (.NETFramework,Version=v4.7.1)     \r\n\r\nThe package in question being added can be any package, packages that have support for .NET Standard or otherwise, the same error.\r\n\r\nWhat am I missing?\r\n"},{"Id":"6892887507","Type":"PullRequestEvent","CreatedAt":"2017-11-22T23:22:25","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1765","RelatedDescription":"Opened pull request \"Updating the SDK feeds\" (#1765) at dotnet/sdk","RelatedBody":""},{"Id":"6891834423","Type":"IssuesEvent","CreatedAt":"2017-11-22T18:30:16","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1764","RelatedDescription":"Opened issue \"Transitive Project References without respect for ReferenceOutputAssembly\" (#1764) at dotnet/sdk","RelatedBody":""},{"Id":"6891668196","Type":"PullRequestEvent","CreatedAt":"2017-11-22T17:51:42","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1761","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#1761) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171120-080037\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171120-080037 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6888407680","Type":"IssuesEvent","CreatedAt":"2017-11-22T05:43:37","Actor":"Lily721","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1759","RelatedDescription":"Reopened issue \"Assets file 'E:\\****\\obj\\project.assets.json' doesn't have a target for '.NETPortable,Version=v4.0,Profile=Profile111'. Ensure that restore has run and that you have included 'portable40-net45+win8+wpa81' in the TargetFrameworks for your project.\" (#1759) at dotnet/sdk","RelatedBody":"Hi guys,\r\n\r\nWhen I use multi target framework in my project like following:\r\n\r\n`<TargetFrameworks>netstandard1.1;net45</TargetFrameworks><TargetFrameworkProfile>Profile111</TargetFrameworkProfile>` \r\n\r\nAnd following is why I need TargetFrameworkProfile in my .csproj:\r\n\r\n`<Import Project=\"$(MSBuildExtensionsPath)\\Microsoft\\Portable\\v4.5\\Microsoft.Portable.CSharp.targets\" />`\r\n\r\nI faced upper problem, I thought I was right when I see this article [https://docs.microsoft.com/en-us/nuget/schema/target-frameworks],\r\n\r\nProfile111 | .NETFramework 4.5 | portable-net45+win8+wpa81 | netstandard1.1\r\n\r\nI've being working on this a whole day, didn't find any solution yet, does anyone know what's the problem? Thanks a lot."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":197,"FavoriteCount":150,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":61,"RawContent":null},{"Id":"931205222579318784","CreatedAt":"2017-11-16T17:00:00+00:00","UserScreenname":"dotnet","Text":"Having trouble moving to .NET Core because of missing Windows APIs? Introducing the Windows Compatibility Pack for… https://t.co/s3KKSJ467u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":149,"FavoriteCount":85,"RawContent":null}]}},"RunOn":"2017-11-24T05:30:22.61673Z","RunDurationInMilliseconds":7877}