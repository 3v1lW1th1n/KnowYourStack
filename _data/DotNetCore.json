{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7236000390","Type":"PullRequestEvent","CreatedAt":"2018-02-13T04:08:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16340","RelatedDescription":"Merged pull request \"Define type initialization semantics for interface instance methods\" (#16340) at dotnet/coreclr","RelatedBody":"Accessing an instance method on an interface should trigger non-beforefieldinit class constructors (same as it does for valuetypes).\r\n\r\nFixes #15650."},{"Id":"7236000383","Type":"IssuesEvent","CreatedAt":"2018-02-13T04:08:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15650","RelatedDescription":"Closed issue \"[Default interfaces] Define semantics for static initializers\" (#15650) at dotnet/coreclr","RelatedBody":"The way I understand the intent of I.8.9.5 in ECMA-335, the following code should return an exit code of 100, but doesn't.\r\n\r\nIn particular, we might want to mirror the \"first invocation of any instance or virtual method of that type if it is a value type\" rule for interface types since \"first invocation of any constructor for that type\" doesn't cover the interface case (same way it doesn't cover it for valuetypes).\r\n\r\n```\r\n.assembly extern mscorlib { }\r\n.assembly cctor { }\r\n\r\n.class interface private abstract auto ansi IFoo\r\n{\r\n  .method private hidebysig specialname rtspecialname static \r\n          void  .cctor() cil managed\r\n  {\r\n    .maxstack  8\r\n    ldc.i4.s   100\r\n    stsfld int32 s_result\r\n    ret\r\n  }\r\n\r\n  .method public hidebysig newslot virtual \r\n          instance void Frob() cil managed\r\n  {\r\n    .maxstack  8\r\n    ret\r\n  }\r\n}\r\n\r\n.class private auto ansi beforefieldinit Fooer\r\n       extends [mscorlib]System.Object\r\n       implements IFoo\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    .maxstack  8\r\n    ldarg.0\r\n    call       instance void [mscorlib]System.Object::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\n.field public static int32 s_result\r\n\r\n.method private hidebysig static int32 \r\n        Main() cil managed\r\n{\r\n  .entrypoint\r\n  .maxstack  8\r\n  newobj     instance void Fooer::.ctor()\r\n  callvirt   instance void IFoo::Frob()\r\n  ldsfld int32 s_result\r\n  ret\r\n}\r\n```"},{"Id":"7235909771","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:31:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16345","RelatedDescription":"Merged pull request \"Improve perf of DelegateConstruct\" (#16345) at dotnet/coreclr","RelatedBody":"Remove a range lookup that's no longer needed.\r\n\r\nSee related issue #12438."},{"Id":"7235813636","Type":"PullRequestEvent","CreatedAt":"2018-02-13T02:54:20","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16346","RelatedDescription":"Merged pull request \"Fix SSE4.1 encoding with containment form\" (#16346) at dotnet/coreclr","RelatedBody":"This PR\r\n - fix https://github.com/dotnet/coreclr/issues/16296 and re-enable `Avx2.CompareEqual.(U)Int64`\r\n - implements `Sse41.CompareEqual` and `Sse42.CompareGreaterThan` to verify the change without VEX-encoding.\r\n\r\n@tannergooding @CarolEidt PTAL"},{"Id":"7235813629","Type":"IssuesEvent","CreatedAt":"2018-02-13T02:54:20","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16296","RelatedDescription":"Closed issue \"[RyuJIT] Update the emitter for VEX-encoded SSE4.1/4.2 instructions with containment\" (#16296) at dotnet/coreclr","RelatedBody":"Detected this issue from https://github.com/dotnet/coreclr/pull/16287.\r\n\r\nWith VEX-encdoing, certain SSE4.1/SSE4.2 instructions (`vpcmpeqq`) have incorrect encoding on `INS reg, reg, mem` form.\r\nFor example, `vpcmpeqq ymm7, ymm6, ymmword ptr[rax] (ECS:6, ACS:5)` is compiled to\r\n```\r\nC4 E2 4D 39 38\r\n         ^\r\n```\r\nbut the correct encoding should be \r\n```\r\nC4 E2 4D 29 38\r\n         ^\r\n```\r\nThe opcode of `vpcmpeqq` (66 0F 38 **2**9) seems accidently changed.\r\n\r\nSubset of https://github.com/dotnet/coreclr/issues/15908\r\nI will look into this issue after https://github.com/dotnet/coreclr/pull/16249 gets merged.\r\n\r\ncc @CarolEidt @tannergooding "},{"Id":"7235703503","Type":"IssuesEvent","CreatedAt":"2018-02-13T02:13:09","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16350","RelatedDescription":"Opened issue \"HW intrinsics and SuperPMI\" (#16350) at dotnet/coreclr","RelatedBody":"How should the hardware intrinsics work with SuperPMI collection and replay?\r\n\r\nCurrently, when I run, for example, JIT\\HardwareIntrinsics\\X86\\Avx2\\Avx2_ro, the test passes.\r\n\r\nWhen I set some variables to collect SuperPMI on this test:\r\n```\r\nset SuperPMIShimLogPath=e:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\JIT\\HardwareIntrinsics\\X86\\Avx2\\Avx2_ro\r\nset SuperPMIShimPath=e:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\clrjit.dll\r\nset COMPlus_AltJit=*\r\nset COMPlus_AltJitName=superpmi-shim-collector.dll\r\n```\r\n\r\nand run, I get a crash: JIT_ThrowPlatformNotSupportedException, from the stack:\r\n```\r\n...\r\nCoreCLR!JIT_ThrowPlatformNotSupportedException+0x21a\r\nSystem_Private_CoreLib!System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256`1<Byte>, System.Runtime.Intrinsics.Vector256`1<Byte>)+0x5\r\nAvx2_ro!JIT.HardwareIntrinsics.X86.SimpleBinaryOpTest__AddByte.RunBasicScenario()+0x66\r\nAvx2_ro!JIT.HardwareIntrinsics.X86.SimpleBinaryOpTest__AddByte.RunUnsupportedScenario()+0x27\r\nAvx2_ro!JIT.HardwareIntrinsics.X86.Program.AddByte()+0x20\r\nAvx2_ro!JIT.HardwareIntrinsics.X86.Program.Main(System.String[])+0xa1\r\n...\r\n```\r\n\r\nIs there some JIT-EE API not being implemented properly by the SuperPMI shim? Is there additional work that needs to happen to support collection/replay of HW intrinsics?\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7235577991","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:29:29","Actor":"mikeharder","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8596","RelatedDescription":"Opened issue \"\"dotnet run\" passes unexpected arguments to application being run\" (#8596) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Create a console app which prints its arguments:\r\n\r\n```\r\nstatic void Main(string[] args) {\r\n    for (var i=0; i < args.Length; i++) {\r\n      Console.WriteLine($\"args[{i}]: {args[i]}\");\r\n    }\r\n}\r\n```\r\n\r\n2. `dotnet run foo -- bar`\r\n\r\n## Expected  behavior\r\nOnly arguments after `--` are passed to application.\r\n\r\n## Actual behavior\r\n### SDK v1.1.7\r\nAll arguments (including `--`) are passed to application:\r\n\r\n```\r\n> dotnet-dev-win-x64.1.1.7\\dotnet.exe run foo -- bar\r\nargs[0]: foo\r\nargs[1]: --\r\nargs[2]: bar\r\n```\r\n\r\n### SDK v2.1.4\r\nAll arguments (excluding `--`) are passed to application:\r\n```\r\n> dotnet-sdk-2.1.4-win-x64\\dotnet.exe run foo -- bar\r\nargs[0]: foo\r\nargs[1]: bar\r\n```"},{"Id":"7235453012","Type":"PullRequestEvent","CreatedAt":"2018-02-13T00:48:00","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8595","RelatedDescription":"Opened pull request \" Update to roslyn 2.7.0-beta3-62612-07 for 2.1.1xx\" (#8595) at dotnet/cli","RelatedBody":"This build includes satellites built directly from the roslyn repo and so this PR also removes the messy process of getting them from cli-deps-satellites.\r\n\r\nVersion obtained from https://github.com/dotnet/versions/blob/master/build-info/dotnet/roslyn/dev15.6/Latest.txt\r\n\r\n@livarcocc Please review\r\n\r\n@jaredpar Please confirm this version is correct to insert for the CLI that aligns with VS 15.6\r\n\r\n@tmeschter FYI"},{"Id":"7235108604","Type":"IssuesEvent","CreatedAt":"2018-02-12T23:03:40","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8450","RelatedDescription":"Closed issue \"Tool with command name dotnet-foo is not available as cli verb\" (#8450) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Create and install a tool with \r\n```xml\r\n  <PropertyGroup>\r\n    <ToolCommandName>dotnet-greet</ToolCommandName>\r\n  </PropertyGroup>\r\n```\r\n2. execute `dotnet-greet`, observe that the program runs\r\n3. execute `dotnet greet`, observe that the program does not run\r\n```\r\nNo executable found matching command \"dotnet-greet\"\r\n```\r\n\r\nWorkaround:\r\n\r\n```\r\nMartins-MacBook-Pro:~ martin$ cp ~/.dotnet/tools/dotnet-greet /usr/local/bin/\r\nMartins-MacBook-Pro:~ martin$ which dotnet-greet\r\n/usr/local/bin/dotnet-greet\r\nMartins-MacBook-Pro:~ martin$ dotnet greet\r\nHi martin!\r\n```\r\n\r\n## Expected  behavior\r\n\r\nTools named `dotnet-{x}` should be available as CLI verb to be used as `dotnet {x}`.\r\n\r\n## Actual behavior\r\n\r\nThe CLI does not search `PATH` entries prefixed with `~/` for candidate executables and fails to run the global tool as CLI verb.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.300-preview2-008012)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008012\r\n Commit SHA-1 hash:  c9ac5c9c02\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300-preview2-008012/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26116-04\r\n  Build    : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n```\r\n\r\ncc @wli3 @livarcocc \r\n\r\n\r\n"},{"Id":"7235092933","Type":"PullRequestEvent","CreatedAt":"2018-02-12T22:59:45","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8589","RelatedDescription":"Merged pull request \"Support TildeSlash expand\" (#8589) at dotnet/cli","RelatedBody":"**Customer scenario**\r\n\r\nConsumer install a global tool on CLI that has the command name dotnet-mytool. The consumer cannot invoke the command by `dotnet mytool`.\r\n\r\n**Bugs this fixes**\r\n\r\nhttps://github.com/dotnet/cli/issues/8450\r\n\r\n**Workarounds, if any**\r\n\r\nAdd the full path of shim to PATH manually.\r\n\r\n**Risk**\r\n\r\nlow\r\n\r\n**Performance impact**\r\n\r\nno\r\n\r\n**Root cause analysis**\r\n\r\nCLI command resolver does not implementation the same path logic as bash. \r\n\r\n**How was the bug found?**\r\n\r\nIssue filed on GitHub\r\n\r\n-----------------------------\r\n\r\nfix https://github.com/dotnet/cli/issues/8450\r\n\r\nTilda expand is a [bash behavior](https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html). I only add \"~/\" expand to $HOME\r\n\r\nI cannot find a good way to test PATH. Considering we should not put things in CI's home directory. And if we mock a little bit, we are testing string class. So I only manually tested it."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7234553536","Type":"IssuesEvent","CreatedAt":"2018-02-12T21:00:10","Actor":"chadAtGA","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/649","RelatedDescription":"Opened issue \".net core console app reference .net standard class library with nuget pkg by file not project. \" (#649) at dotnet/standard","RelatedBody":"I created a simple .net core 2.0 console project and a simple .net standard 2.0 class library. I add a ref to the nuget package StackExchange.Redis and then use the redis in my class library. I build the release version of my standard 2.0 class library. Then I try and reference that dll by browsing not by project. I startup my console and it says that it cannot find the stackexchange redis dll. I have tried publishing it so all of the dlls are in the but it does not seem to make a difference. Calling ReturnInt no problems calling RetStringRetString it fails. I'm sure I'm missing something simple.\r\n\r\nHere is my class library\r\n\r\n public class Class1\r\n    {\r\n\t\tpublic int ReturnInt()\r\n\t\t{\r\n\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\r\n\t\tpublic string RetString()\r\n\t\t{\r\n\t\t\tStackExchange.Redis.ConnectionMultiplexer connectionMultiplexer = StackExchange.Redis.ConnectionMultiplexer.Connect(\"localhost\");\r\n\r\n\t\t\tif(connectionMultiplexer.IsConnected)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Connecte\");\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n    }"},{"Id":"7227994914","Type":"PullRequestEvent","CreatedAt":"2018-02-11T03:28:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/648","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02511-01 (master)\" (#648) at dotnet/standard","RelatedBody":""},{"Id":"7227937564","Type":"IssuesEvent","CreatedAt":"2018-02-11T02:43:52","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Closed issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225871739","Type":"IssuesEvent","CreatedAt":"2018-02-10T01:47:23","Actor":"hamarb123","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/647","RelatedDescription":"Opened issue \"[Feature-Request] N-bit sized int and floating point types\" (#647) at dotnet/standard","RelatedBody":"I propose we should be able to have N-bit sized int and floating point types.\r\nHere is how it could work:\r\n\r\nObviously we already have the following:\r\n- int 1 / uint 1 (bool)\r\n- uint 8 (byte)\r\n- int 8 (sbyte)\r\n- uint 16, 32 and 64 (ushort, uint and ulong)\r\n- int 16, 32 and 64 (short, int and long)\r\n- float 32 (single)\r\n- float 64 (double)\r\n\r\nBut what about the following:\r\n- (u)int 2 (2 bits)\r\n- (u)int 4 (4 bits)\r\n- (u)int 128 (128 bits)\r\n- (u)int 256 (256 bits)\r\n- (u)int 2^n (2^n bits)\r\n- (float 1 makes no sense but you could still add it)\r\n- float 2 (2 bits)\r\n- float 4 (4 bits)\r\n- float 8 (8 bits)\r\n- float 16 (16 bits)\r\n- float 128 (128 bits)\r\n- float 256 (256 bits)\r\n- float 2^n (2^n bits)\r\n\r\nThe classes could be called the following:\r\nFor integers: `intj` where j is a power of 2 for a j bit integer\r\nFor unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer\r\nFor floats: `floatj` where j is a power of 2 for a j bit float\r\nAnd there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`\r\n\r\nWhy do I need this in my beloved c#?\r\n1. Because it will give you more/less precise floats to use\r\n2. It will give you more integers to use\r\n3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway\r\n\r\nWon't this ruin my IDE with millions of different type names?\r\n1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested"},{"Id":"7225726207","Type":"IssuesEvent","CreatedAt":"2018-02-10T00:34:37","Actor":"laksh-parab","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/646","RelatedDescription":"Opened issue \"Referencing  NET Standard 1.6 project causes web api to return json\" (#646) at dotnet/standard","RelatedBody":"This is one of the weird issue i have seen and here are the steps to reproduce\r\n\r\n1> Create new Web API project in VS 2017 with Target Framework 4.6.2\r\n2> Add Controller that returns a Stream\r\n```\r\npublic class ReportController : ApiController\r\n    {\r\n        [HttpGet]\r\n        public HttpResponseMessage Download()\r\n        {\r\n            var filePath = \"C:\\\\Report.xlsx\";\r\n            var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);\r\n            var result = new HttpResponseMessage(HttpStatusCode.OK)\r\n            {\r\n                Content = new StreamContent(fs)\r\n            };\r\n            result.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n            return result;\r\n        }\r\n    }\r\n```\r\n3> Run the application and invoke the api in IE 11 (use correct port #)\r\nhttp://localhost:40005/api/report/download\r\n\r\nThe browser should download a EXCEL file and you should be able to open EXCEL file.\r\n\r\n5> Stop visual studio\r\n\r\n5> In the same solution create a new project with target framework .NET Standard 1.6\r\n\r\n6> In the Web API Project, add project reference to newly created NET Standard library project\r\n\r\n7> Run the application and invoke api in IE 11\r\nhttp://localhost:40005/api/report/download\r\n\r\nNotice that browser will get json back instead of excel file.\r\n\r\nIf you try with google chrome then instead of json i get exception\r\n\r\n> Type 'System.Net.Http.StreamContent' cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute. If the type is a collection, consider marking it with the CollectionDataContractAttribute. See the Microsoft .NET Framework documentation for other supported types.\r\n\r\nI don't know why just by referencing .NET Standard 1.6 project changes the behavior. If i remove the reference to .NET Standard 1.6 project then everything works fine.\r\n"},{"Id":"7225634063","Type":"PullRequestEvent","CreatedAt":"2018-02-09T23:57:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/645","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02509-01 (master)\" (#645) at dotnet/standard","RelatedBody":""},{"Id":"7224498474","Type":"PullRequestEvent","CreatedAt":"2018-02-09T19:05:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/645","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02509-01 (master)\" (#645) at dotnet/standard","RelatedBody":""},{"Id":"7224422064","Type":"PullRequestEvent","CreatedAt":"2018-02-09T18:49:05","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/644","RelatedDescription":"Merged pull request \"Update intellisense based on the 2-2-2018 doc build\" (#644) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7236017570","Type":"PullRequestEvent","CreatedAt":"2018-02-13T04:16:03","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27083","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26213-00, beta-26213-00, respectively (master)\" (#27083) at dotnet/corefx","RelatedBody":""},{"Id":"7235977873","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:59:15","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27080","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview2-26212-08, preview2-26213-01, respectively (master)\" (#27080) at dotnet/corefx","RelatedBody":""},{"Id":"7235952009","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:48:42","Actor":"clarkis117","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27082","RelatedDescription":"Opened pull request \"Added DCS Tests for System.Drawing Types\" (#27082) at dotnet/corefx","RelatedBody":"This adds DataContractSerializer tests for basic types in System.Drawing\r\n\t-See issue #25729 for a list of types\r\n\r\nResolves #25729 "},{"Id":"7235925812","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:38:25","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27081","RelatedDescription":"Merged pull request \"Lower the default stack buffer size for calling getpwXXX_r methods.\" (#27081) at dotnet/corefx","RelatedBody":"By default, 1K is too large of a buffer to allocate on the stack.\r\n\r\nFixes #26959"},{"Id":"7235925808","Type":"IssuesEvent","CreatedAt":"2018-02-13T03:38:25","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26959","RelatedDescription":"Closed issue \"Re-evaluate default buffer size for getpw native calls\" (#26959) at dotnet/corefx","RelatedBody":"By default, we are allocating 1K of memory on the stack as the first buffer to use in getpwnam_r and getpwuid_r.\r\n\r\nhttps://github.com/dotnet/corefx/blob/bfac45af5dddcbd70b6935fcf92b4b8755f3cd1c/src/Common/src/System/IO/PersistedFiles.Unix.cs#L100\r\n\r\nhttps://github.com/dotnet/corefx/blob/6f5ce856e9f40a7d247c241a6bb916fc546045ff/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L371\r\n\r\nhttps://github.com/dotnet/corefx/blob/426e1c72a0dbda1aece127ec5f56696dc465d74b/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L632\r\n\r\nWe should re-evaluate if this is too large of a buffer to start with on the stack, as it may be too large for what is necessary.\r\n\r\nSee https://github.com/dotnet/corefx/pull/26945/files/55c360ff0e62b30814a085f079304a126dab9d21#diff-015aad2514de8320cbfe19ed2b8ee9a7"},{"Id":"7235611938","Type":"PullRequestEvent","CreatedAt":"2018-02-13T01:40:53","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27081","RelatedDescription":"Opened pull request \"Lower the default stack buffer size for calling getpwXXX_r methods.\" (#27081) at dotnet/corefx","RelatedBody":"By default, 1K is too large of a buffer to allocate on the stack.\r\n\r\nFixes #26959"},{"Id":"7235578400","Type":"PullRequestEvent","CreatedAt":"2018-02-13T01:29:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27080","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26212-08 (master)\" (#27080) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7235779069","Type":"PullRequestEvent","CreatedAt":"2018-02-13T02:41:16","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24724","RelatedDescription":"Merged pull request \"added [Obsolete] to legacy waiter/listener API.\" (#24724) at dotnet/roslyn","RelatedBody":"we should remove these once partner moved to new API.\r\n\r\n### Customer scenario\r\n\r\nThis is not user facing change. this is for our legacy testing API that partner team still depends on.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/24574\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\n[Obsolete] is added. so it will generate warning if partner team still depends on legacy API.\r\n\r\n### Performance impact\r\n\r\nN/A\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nWe are moving some legacy test API to new API. new API and shim is already in dev15.7stg, this is follow up change which add [Obsolete] to shim so that we can get rid of those.\r\n\r\n### How was the bug found?\r\n\r\nN/A\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7236124333","Type":"PullRequestEvent","CreatedAt":"2018-02-13T05:01:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5383","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5383) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7235914800","Type":"PullRequestEvent","CreatedAt":"2018-02-13T03:33:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5381","RelatedDescription":"Merged pull request \"accurancy -> accuracy\" (#5381) at dotnet/corert","RelatedBody":""},{"Id":"7235046169","Type":"IssuesEvent","CreatedAt":"2018-02-12T22:48:05","Actor":"qmfrederik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5382","RelatedDescription":"Opened issue \"Enum.GetValues(Type) results in '{Type}[]' is missing metadata.\" (#5382) at dotnet/corert","RelatedBody":"Continuing my exploration of CoreRT, I'm currently stuck on the following exception:\r\n\r\n> An error occurred while loading the license file. 'Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]' is missing metadata. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=392859\r\n>   at System.Enum.GetValues(Type) + 0x64\r\n>   at Org.BouncyCastle.Utilities.Enums.GetEnumValues(Type) + 0x2a\r\n>   at Org.BouncyCastle.Utilities.Enums.GetArbitraryValue(Type) + 0x9\r\n\r\nI have the following in `rd.xml` which doesn't seem to be sufficient:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"CoreCompat.BouncyCastle\">\r\n      <Type Name=\"Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm\" Browse=\"Required All\" Serialize=\"Required All\" Dynamic=\"Required All\" XmlSerializer=\"Required All\"/>\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nThings I noticed, perhaps not relevant:\r\n- The exception message mentions `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm[]`, so this seems to reference an array?\r\n- `Org.BouncyCastle.Security.DigestUtilities.DigestAlgorithm` is an enum, and a child type of `Org.BouncyCastle.Security.DigestUtilities`, so the proper way to reference this type seems to be `Org.BouncyCastle.Security.DigestUtilities+DigestAlgorithm` (i.e. using a `+` to denote a child type instead of a `.`).\r\n\r\nAny pointers on how to tackle this error would be welcome 😄 ."},{"Id":"7232985605","Type":"PullRequestEvent","CreatedAt":"2018-02-12T15:50:39","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5381","RelatedDescription":"Opened pull request \"accurancy -> accuracy\" (#5381) at dotnet/corert","RelatedBody":""},{"Id":"7232369755","Type":"PullRequestEvent","CreatedAt":"2018-02-12T14:01:54","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5380","RelatedDescription":"Opened pull request \"[ObjWriter] Add IMAGE_REL_BASED_RELPTR32 relocs support\" (#5380) at dotnet/corert","RelatedBody":"\t- https://github.com/dotnet/corert/issues/3278\r\n\t- Enabled only for ARM32. When ObjWriter is remotely updated,\r\n\tit will be possible to completely remove this workaround for other archs.\r\n\r\n@jkotas Need to rebuild and update ObjWriter remotely in repos, so that we can enable it for all architectures, including x64.\r\n@dotnet/arm32-corert-contrib please review"},{"Id":"7230746898","Type":"PullRequestEvent","CreatedAt":"2018-02-12T07:21:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5379","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5379) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7230690980","Type":"PullRequestEvent","CreatedAt":"2018-02-12T07:00:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5378","RelatedDescription":"Merged pull request \"Add handling of multiple CMake installations in probe-win\" (#5378) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/9980\r\n\r\ncurl https://github.com/dotnet/coreclr/commit/6c73fd9440a68f064f4767347a4401155ee88899.patch | git am -p 4 --directory='src/Native/' --reject"},{"Id":"7229555842","Type":"PullRequestEvent","CreatedAt":"2018-02-11T20:54:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5379","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5379) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7229533580","Type":"PullRequestEvent","CreatedAt":"2018-02-11T20:41:40","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5376","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#5376) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7235593405","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:34:26","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Reopened issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7235544721","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:18:03","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Closed issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7235532599","Type":"IssuesEvent","CreatedAt":"2018-02-13T01:14:04","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Reopened issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7235341426","Type":"IssuesEvent","CreatedAt":"2018-02-13T00:11:35","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1383","RelatedDescription":"Closed issue \"PDB files are not copied from package lib folder to the consumer bin folder\" (#1383) at dotnet/sdk","RelatedBody":"Sample code:\r\n1. PackagedLibrary - library, which is packaged as NuGet, includes PDB file along with DLL; currently published as PackagedLibrary-1.0.0-beta.\r\n2. LibraryConsumer - ASP.NET Core 1.1 project, consumes library from NuGet.\r\n\r\nRepro:\r\n1. Unzip, restore packages, rebuild all.\r\n2. Open LibraryConsumer\\bin\\Debug\\net452\\win7-x86. Observe that there's only PackagedLibrary.dll, but not PackagedLibrary.pdb\r\n\r\nExpectation: PDB is also copied to consumer project output.\r\n\r\nIn fact, if you create a new ASP.NET Web Application (.NET Framework) project and add same package there (`Install-Package -Id PackagedLibrary -Version 1.0.0-beta`), you'll see PDB being copied to output.\r\n\r\nWhy is this important? The project I'm working on is a complex web application with a lot of dependencies on internal libraries. All libraries are indexing their source code in PDB and packaging PDBs along with DLLs. If problem occurs and library user needs to debug, they can simply step into the library call. If PDBs are not automatically copied, it's impossible to do (unless you know about this issue and copy PDBs manually).\r\n\r\n[PackagePdbAspNetCore.zip](https://github.com/dotnet/sdk/files/1122688/PackagePdbAspNetCore.zip)\r\n\r\n"},{"Id":"7235283322","Type":"PullRequestEvent","CreatedAt":"2018-02-12T23:53:41","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1952","RelatedDescription":"Merged pull request \"When converting CompileOptions, exclude empty entries when spliting DefineConstants.\" (#1952) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/sdk/issues/1628"},{"Id":"7235283317","Type":"IssuesEvent","CreatedAt":"2018-02-12T23:53:41","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1628","RelatedDescription":"Closed issue \"Remove empty define constants in deps.json\" (#1628) at dotnet/sdk","RelatedBody":"See https://github.com/dotnet/sdk/issues/1364#issuecomment-310662927\r\n\r\nIf someone builds an asp.net MVC app and has two semi-colons in a row in their DefineConstants `NETCOREAPP2_0;;`, it causes an empty entry to be put in the .deps.json file.  Later, this can cause problems when passing the define constants into the compiler:\r\n\r\n```\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException: One or more compilation failures occurred:\r\nfdw11r2q.auy(1,1): error CS8301: Invalid name for a preprocessing symbol; '' is not a valid identifier\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String generatedCode)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n```"},{"Id":"7235074383","Type":"PullRequestEvent","CreatedAt":"2018-02-12T22:54:59","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1955","RelatedDescription":"Opened pull request \"Merge release/2.1 into master\" (#1955) at dotnet/sdk","RelatedBody":"Merge release/2.1 into master"},{"Id":"7235065641","Type":"IssuesEvent","CreatedAt":"2018-02-12T22:52:45","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1814","RelatedDescription":"Closed issue \"Remove interdependency between crossgen and store targets\" (#1814) at dotnet/sdk","RelatedBody":"The crossgen targets (in Microsoft.NET.CrossGen.targets) should be decoupled from the store targets (in Microsoft.NET.ComposeStore.targets) to allow them to be used independently. I came across this while trying to reuse crossgen targets in https://github.com/mono/linker/pull/192 to enable a crossgen step in the publish pipeline. I was able to reuse the targets that restore crossgen with some [workarounds](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R76), but not those that actually run crossgen.\r\n\r\nSpecifically, in the following dependency graph (I've outlined the crossgen-related targets), the following dependencies should be removed or replaced with targets not related to the store:\r\n- _RestoreCrossgen -> PrepforRestoreForComposeStore\r\n- _RunOptimizer -> _ComputeResolvedFilesToStoreTypes\r\n\r\nThere are also some implicit data dependencies between crossgen and store targets, which cause crossgen-related targets to break if they are called as dependencies of external targets (instead of as dependencies of ComposeStore). Here are the ones I've noticed:\r\n- _RestoreCrossgen depends on _TFM, which is set by PrepareForComposeStore, requiring this [workaround](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R81).\r\n- _GetCrossgenProps depends on ComposeWorkingDir, which is computed by PrepareForComposeStore, requiring this [workaround](https://github.com/mono/linker/pull/192/files#diff-acb0851d1c12d340de503c4a2429c4f0R92).\r\n\r\n\r\n![img_20171130_110834](https://user-images.githubusercontent.com/787361/33902203-265b5032-df29-11e7-9129-799cbe13bee0.jpg)\r\n\r\n"},{"Id":"7235065413","Type":"PullRequestEvent","CreatedAt":"2018-02-12T22:52:42","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1954","RelatedDescription":"Merged pull request \"Merge release/2.0.0 into release/2.1\" (#1954) at dotnet/sdk","RelatedBody":"Merge release/2.0.0 into release/2.1"},{"Id":"7235009904","Type":"IssuesEvent","CreatedAt":"2018-02-12T22:39:26","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1832","RelatedDescription":"Closed issue \"TargetFramework for Xamarin platforms\" (#1832) at dotnet/sdk","RelatedBody":"I cannot set `TargetFramework` to `monoandroid10`, `xamarinios10` or `uap10.0`.  The following errors are throw:\r\n\r\n```bash\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'xamarinios10' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'monoandroid10' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(96,5): error : The TargetFramework value 'uap10.0' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly.\r\n```\r\n\r\nThe following configuration is being used:\r\n\r\n```xml\r\n<TargetFrameworks>netstandard1.3;net46;monoandroid10;xamarinios10;uap10.0</TargetFrameworks>\r\n```\r\n\r\nIf I add `TargetFrameworkIdentifier` and `TargetFrameworkVersion` the error changes to missing references:\r\n\r\n```xml\r\n<PropertyGroup Condition=\" '$(TargetFramework)' == 'monoandroid10' \">\r\n  <TargetFrameworkIdentifier>MonoAndroid</TargetFrameworkIdentifier>\r\n  <TargetFrameworkVersion>v1.0</TargetFrameworkVersion>\r\n</PropertyGroup>\r\n```\r\n\r\n```\r\nerror CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n```\r\n\r\nFinally if I add a reference to facade library the error goes away:\r\n```xml\r\n<Reference Include=\"System.Runtime\">\r\n  <HintPath>C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\$(TargetFrameworkIdentifier)\\$(TargetFrameworkVersion)\\Facades\\System.Runtime.dll</HintPath>\r\n</Reference>\r\n```"},{"Id":"7234889291","Type":"PullRequestEvent","CreatedAt":"2018-02-12T22:11:46","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1954","RelatedDescription":"Opened pull request \"Merge release/2.0.0 into release/2.1\" (#1954) at dotnet/sdk","RelatedBody":"Merge release/2.0.0 into release/2.1"},{"Id":"7234729799","Type":"PullRequestEvent","CreatedAt":"2018-02-12T21:37:55","Actor":"cdmihai","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1953","RelatedDescription":"Opened pull request \"Always import BundledVersions.props\" (#1953) at dotnet/sdk","RelatedBody":"Don't know if this is the right thing to do, but it looks like this import always happens. If so, conditioning it on existence represents a needless perf hit, and also makes debugging a failed build due to not having that file much harder."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"963128572595519489","CreatedAt":"2018-02-12T19:12:00+00:00","UserScreenname":"dotnet","Text":"You can run your application anywhere with .NET Core – join @coolsch as he talks about .NET in 2018 at… https://t.co/0sSc3B7yOQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":10,"RawContent":null},{"Id":"963083274636554240","CreatedAt":"2018-02-12T16:12:00+00:00","UserScreenname":"dotnet","Text":"Update your existing .NET application to take advantage of new features in Windows Forms and WPF with @csharpfritz… https://t.co/yjqbIthkKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"961657885137698816","CreatedAt":"2018-02-08T17:48:01+00:00","UserScreenname":"dotnet","Text":"Tomorrow is NOW! @DEVintersection Take a deep dive with the Microsoft’s AI team into machine learning, predictive a… https://t.co/5AcI4VRNyG","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"961596291942961154","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"dotnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onli… https://t.co/kWer0gYtOp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":10,"RawContent":null},{"Id":"961382608914518016","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/dMJ5QcKEcp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":81,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":243,"FavoriteCount":191,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":76,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":211,"FavoriteCount":166,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-02-13T05:30:21.6864711Z","RunDurationInMilliseconds":8241}