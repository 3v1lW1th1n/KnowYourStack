{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "},{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9458416046","Type":"IssuesEvent","CreatedAt":"2019-04-17T05:10:13","Actor":"dotnet-mc-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24055","RelatedDescription":"Opened issue \"Test failure: JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh\" (#24055) at dotnet/coreclr","RelatedBody":"Opened on behalf of @AriNuer\n\nThe test `JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh` has failed.\n\nFailure Message:\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/JIT/SIMD/Reports/JIT.SIMD/Plane_r/Plane_r.output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/JIT/SIMD/Plane_r/IL:/root/helix/work/workitem/JIT/SIMD/Plane_r /in Plane_r.org /out Plane_r.exe\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nNative image Plane_r.exe generated successfully.\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun Plane_r.exe ''\nin ReleaseLock\nExpected: 100\nActual: 255\nEND EXECUTION - FAILED\nTest Harness Exitcode is : 1\nTo run the test:\n> set CORE_ROOT=/root/helix/work/correlation\n> /root/helix/work/workitem/JIT/SIMD/Plane_r/Plane_r.sh\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at JIT_SIMD._Plane_r_Plane_r_._Plane_r_Plane_r_sh() in /__w/2/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.SIMD/JIT.SIMD.XUnitWrapper.cs:line 3432\n```\n\nBuild : 3.0 - 20190416.72 (Ready-To-Run Tests)\nFailing configurations:\n- Alpine.38.Arm64\n  - arm64\n  - arm64\n- Ubuntu.1804.Arm64\n  - arm64\n  - arm64\n- Debian.9.Arm64\n  - arm64\n  - arm64\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190416.72/workItem/JIT/analysis/xunit/JIT_SIMD._Plane_r_Plane_r_~2F_Plane_r_Plane_r_sh"},{"Id":"9458051313","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:18:38","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23843","RelatedDescription":"Merged pull request \"Fix a ZeroMemory call in methodcontext.cpp\" (#23843) at dotnet/coreclr","RelatedBody":"The argument is of type `GetArgTypeValue` and so the `sizeof()` should be\r\ndone on `GetArgTypeValue`, not on the different type `GetArgType`."},{"Id":"9458047553","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:17:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23896","RelatedDescription":"Merged pull request \"Nit: Update comment\" (#23896) at dotnet/coreclr","RelatedBody":""},{"Id":"9458040662","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:15:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24031","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/core-setup\" (#24031) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190416.01\r\n- **Date Produced**: 4/16/2019 8:46 AM\r\n- **Commit**: e32693473d394c9d019d81448e44d171cc9f7d04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27616-01\r\n\r\n"},{"Id":"9458039457","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:15:20","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24020","RelatedDescription":"Merged pull request \"Update CoreClr to preview5-27616-71 (master)\" (#24020) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9458037324","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:14:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24030","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#24030) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190415.16\r\n- **Date Produced**: 4/16/2019 5:33 AM\r\n- **Commit**: 071e6986b2a71e29cab3df4e2dd2cdf3fe3ce574\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19215.16\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview5.19215.16\r\n\r\n"},{"Id":"9458036273","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:14:26","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24029","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#24029) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19215.12\r\n\r\n"},{"Id":"9458032982","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:13:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24042","RelatedDescription":"Merged pull request \"Remove limits on IVT public key lengths.\" (#24042) at dotnet/coreclr","RelatedBody":"Remove abritrary length restrictions on public keys in `InternalsVisibleTo` attributes. \r\n\r\nFixes #21723"},{"Id":"9458032974","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:13:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21723","RelatedDescription":"Closed issue \"Asssembly with IVT to extremely large key cannot be loaded\" (#21723) at dotnet/coreclr","RelatedBody":"**Repro Steps**\r\n\r\n- Create a .NET Standard class library and add the following IVT decelaration\r\n``` csharp\r\n[assembly: InternalsVisibleTo(\"ConsoleApp10, PublicKey=002400000480000014080000060200000024000052534131004000000100010079bb53322249125411d2b44dd63b137e1b452899a7e7f626917328ff9e25c728e3e3b503ba34deab31d1f1ae15588c4bda69eccea5b13e4a4e10b39fc2fd9f05d1ba728beb8365bad6b6da9adc653836d3ff12b9a698900c3f593cf088b2504ec949489b6f837e76fe84ddd30ccedce1d836e5b8fb149b8e9e0b8b8fbc2cdaee0e76eb549270c4df104accb72530113f431d88982ae69ed75e09530d6951722b60342eb1f5dd5babacdb365dd71597680c50fe85bce823ee902ab3377e7eef8f96168f8c8a1e8264ba94481f5208e4c21208ea312bc1a34bd0e615b39ce8948c4a4d2c0a48b0bc901dfc0519afc378f8595a77375e6c265e1c38bdc7dbf7c4d07d36b67ac94464fe5c26aed915f1c035756d0f3363fce7510f12459060f417ab5df610ffca60e6dd739dc750189f23a47716c75a7a8e3363b198f05093d2a0c9debafbfca3d682c5ea3ed578118d9dc7d0f8828cad1c03ede009d774585b9665e0c8d7325805faba80796f668f79c92b9a195bc7530bb8ecaaba07a7cfdb70c46b96ca613102b1a674bfc742fa9562704edb78063db818c0675c9bd8c18d203fc4d5bc2685003bc6c136caf07a202578cb85480d50f6187b88fb733a2f4ce200bbda68c4ef47483a3530ae8403cb38253a06e2e9385b6d3ae9a7182ba7a23f03499cec1c92ae06dde6b304c025d23466ebbbac9e06b5d7eb932fc009bc1803d035710ec7bce4a6176b407ffdc9a5b55a3ff444609172a146bf76ae40759634e8224ba2882371808f4459a37f8e69115424947818f19ff6609a715f550e33de0307195fe1e526c57efc7212d6cb561dd833cb8c28ae9dc32a4bc0f775887001a5ec36cf63e5b2aa9989d3fa29ebf57e4fa89a206a32e75bcac3c2f26c3267ec1b7433d4a3b90bc01563ddbffffe586ccfb8ee59af34e3127ebf99036427e09c107d47c1e885a032065dce6dd646305bf84fb9123392c89794318e2fdffd5eaa62d1e52d29b94e484f2fb73fea0487bbdaa1790e79fc0e09372c6187c742c8a3f160d09818f51dc58f71ff1a1ed955d9b373bfe92e09eac22241c2b96ce0213aa266f21aae95489921269bffdf5c0a0794716daf8b5daa3a496004297b3a25c6472027f4b6f9fd82d4e297546faa6ac31579a30b3da1d6c6f04125667868b536b9d9ebd767e4d1cabbaeb977ec0738dab3b599fe63ea0ec622261d90c3c0c1ebc1ab631b2162284a9659e961c541aab1658853a9a6501e73f11c9c27b8e9bf41f03187dab5909d8433499f9dfaec2a2c907e39bf1683c75c882e469e79aba05d597a24db33479fac758f5bdc4cbd79df03ec1e403f231bfb81ff9db7ee4cfe084f5c187729cc9f072d7a710651ea15f0e43f330e32172321554d7bf9fd784d18a80a13509818286616d4a7251e2c57f1c257aa0c57bd75da0b0e01532ad517de450733f8379a9db8c9f12ac77b65215d44b40eebb513ec9ddc9537f7811eb5283386422d906d26077608a1f506e966426d40cc5e61e2d7e888586c85050ec29eff79116c42c9714ad667244103a9e79af9b330825ff186b19a791b60eca8776539ca2759f9dbbd87d07f3dac38b814ae9707e473ee52e10b3e8d8344bc06287a9c6c58ab36658b4a6ab48ae2e6d08d748b35868c5207aab0831191f451595d0104968050ae1c13e0d619fa766cd90821732b9fbcc429815606704633515cbe5ad5e33a28690534748e15413c65d9a370b12946a36796aa4d8e5b471675a3471439e133476981e21e9a4dfeae52f657a5fe3ab6cd6ad8aabc09bd5d9af77226c6cfbe01fb38546b5c0b8b825e03bda13d85403765bd5a6cbed19fd09674fd691d732328948f5ab07e03d7f919eee0ac23f6de7d49ae44f15f8459683ab792270945ee2807158a5e6898cb912cbe3b0b6820565045a41699d0a5e3b89319fb921008e18bb1c28557600c33cf2c299a79213834cb9ec72ba6402699c381060cfebaa3faf52d9b2f1b68c3cc0db79ff47b293853b80ec4198c7fe099077f876f2d6c26305cab1c9de8bb8daae422e1ef7c5c76949c8d27fde90281781eef364cc001d0916108d6c0ace740521ec549d912fbaf7168bd37f790b46282684030dcdc2d52cb41d4b763adfc701a1d392166d4b3269ab30fb83a4fd1834771e0ea24680c09f55413750b082787e4bb301e107c34cfab1cc88b7d68489602cb8e46bd73c96c8de8af5285f919e93cc6251df057443460a15d432e130510f8adbaa8d28c574db7d9ef6fb947b70e274d93cfaa47d00f3318643a08815c10975722324037504d7f0e3902393d5327bc0467ea5bd555ba0671ca3873486038abeccc6d48a11c6e3ffb2acca285a53641a02233bb7e7c76ab38acf6759b985e22b18da77932c0c04217798d1473ebf41061d8c006c9479b34745fbea8a1761000d16f414a544a7dc4a5a346871981d1ed3fe4dfcb8494e95643b8bae2e13bbfcb5a432c2dfd481e1d61bab2bcc0d7140fe9b472d25112b2e241c3026a7468560ce3ed582d6872b041680bff3998d51afca45094e3e1982510fe8573ac2d3ab596d9d0c6b43a5f72c6046f24c2ac457fd440d6f8d4dd0b71399d0c1aa366e7a86c57ba5235d327da1245b5ecdf0b3e0e81a0418a5743f3fe98ef6c9236dce02463c798af2b239f6ddf2e5a5ffa198151c2ffbf932b7357e80e858c9ddb81fe8223897af61caec44ae4f07e686b1d721fa78b39c7934179786592472f8739fb90fd5ae41e118fafbb30bd7b02c3cf3def669d830f4dcdf863919c1ee6c3b68a4d66a74af3088592a4055b54738804034d134c5a92e47395955d222b04472da50de86f931084653e4b0f91ffccef2c777c80d92683f8f87b6b60733d73b0035501dd2adba2bbdf6697\")]\r\n```\r\n- Create a .NET Core console application named `ConsoleApp10`. \r\n- Sign the console application with [this key](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Test/Resources/Core/SymbolsTests/snMaxSizeKey.snk)\r\n- Have the console application load the .NET Standard DLL\r\n\r\nWhen loading the DLL the runtime will issue a `FileLoadException` with the message \r\n\r\n> The given assembly name or codebase, 'C:\\Users\\jaredpar\\source\\repos\\ConsoleApp10\\ConsoleApp10\\bin\\Debug\\netcoreapp2.1\\ClassLibrary1.dll', was invalid.\r\n\r\nThis issue appears to be specific to CoreClr. The same library and console app will execute just fine when running on the Desktop or Mono runtime. \r\n\r\nNote: the key used here is quite a bit larger than a normal strong name key. It's likely a pretty uncommon scenario. Unsure how big, trying to query from the original PR https://github.com/dotnet/roslyn/pull/13910"},{"Id":"9458032019","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:13:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24039","RelatedDescription":"Merged pull request \"Changing Math.Max, Math.Min, Math.MaxMagnitude, and Math.MinMagnitudeto propagate NaN inputs\" (#24039) at dotnet/coreclr","RelatedBody":"This resolves the CoreCLR side of https://github.com/dotnet/corefx/issues/36931"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9458127145","Type":"PullRequestEvent","CreatedAt":"2019-04-17T03:40:48","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11180","RelatedDescription":"Closed pull request \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11180) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n"},{"Id":"9457952901","Type":"PullRequestEvent","CreatedAt":"2019-04-17T02:51:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11180","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11180) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n"},{"Id":"9457357601","Type":"PullRequestEvent","CreatedAt":"2019-04-17T00:03:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11179","RelatedDescription":"Opened pull request \"dotnet tool uninstall should find the first manifest file contain package id\" (#11179) at dotnet/cli","RelatedBody":"fix https://github.com/dotnet/cli/issues/11139  , a lot of file touched. But most of them are locs\r\n\r\nInstead of the first manifest file regardless. So, the behavior is aligned with tool update.\r\nExtract method ToolManifestFinderExtensions from tool update. And use them in both places.\r\n\r\nI changed the following to make it generic. Since the user just type the command, I don't think uninstall or update in the error message is significant.\r\n\r\n\"If you intended **to uninstall** on a global tool, use the `--global` option for the command.\" to \"If you intended **to perform an action** on a global tool, use the `--global` option for the command.\""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9457947851","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:50:13","Actor":"yyjdelete","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Opened issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149) at dotnet/standard","RelatedBody":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)"},{"Id":"9452679478","Type":"PullRequestEvent","CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1148) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n"},{"Id":"9452610455","Type":"PullRequestEvent","CreatedAt":"2019-04-16T12:04:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1148) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n"},{"Id":"9449160181","Type":"IssuesEvent","CreatedAt":"2019-04-16T00:34:16","Actor":"rashadrivera","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Opened issue \"Please Make AsnReader And AnsWriter Public\" (#1147) at dotnet/standard","RelatedBody":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  "},{"Id":"9444483250","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1146) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n"},{"Id":"9444420057","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:03:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1146) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9458417610","Type":"PullRequestEvent","CreatedAt":"2019-04-17T05:10:40","Actor":"cston","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36951","RelatedDescription":"Opened pull request \"Port StringType\" (#36951) at dotnet/corefx","RelatedBody":"Port `StringType` from reference source."},{"Id":"9458372132","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:56:50","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36950","RelatedDescription":"Opened pull request \"Fix StackTrace.ToString with null frame test\" (#36950) at dotnet/corefx","RelatedBody":"Update test to react to change to avoid a NullReferenceException when passing down a null `StrackFrame`\r\n\r\nDepends on: https://github.com/dotnet/coreclr/pull/23762\r\n\r\nWe will need to cherry-pick this whenever the coreclr update PR contains the above PR."},{"Id":"9458340868","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:47:17","Actor":"MichalStrehovsky","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36924","RelatedDescription":"Merged pull request \"Run IBCMerge on Linux build\" (#36924) at dotnet/corefx","RelatedBody":"This reverts commit 8e843314e1dbd3b3f26abb1f285349be8920cce4."},{"Id":"9458206111","Type":"IssuesEvent","CreatedAt":"2019-04-17T04:04:12","Actor":"ericstj","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36949","RelatedDescription":"Opened issue \"ImageConverter fails with PlatformNotSupported about X509Certificate2UI\" (#36949) at dotnet/corefx","RelatedBody":"When using ImageConverter on Linux I see this:\r\n```\r\nSystem.PlatformNotSupportedException : X509Certificate2UI is not supported on this platform.\r\n```\r\n\r\nAt the very least we need to fix this exception message.  It'd also be nice if we actually supported these converters on linux: I don't think they rely on Windows functionality.  I think we put them in this assembly because WinForms needed them and we didn't want to put them in TypeConverter and pull Drawing.Common into the shared framework.  @safern did we consider putting these in Drawing.Common?  /cc @Anipik "},{"Id":"9458194590","Type":"IssuesEvent","CreatedAt":"2019-04-17T04:00:45","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36947","RelatedDescription":"Closed issue \"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)\" (#36947) at dotnet/corefx","RelatedBody":"Opened on behalf of @AriNuer\n\nThe test `System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\\r\nExpected: 2.0\\r\nActual:   1.1\n```\n\nStack Trace:\n```\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest.SendAsync_RequestVersion20_ResponseVersion20(Uri server) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.cs:line 2544\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190416.9 (Core Tests)\nFailing configurations:\n- Windows.10.Nano.Amd64-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n- Windows.10.Amd64.Core-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.Core-x86\n  - Release\n- Windows.10.Arm64-arm64\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190416.9/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FSendAsync_RequestVersion20_ResponseVersion20(server:%20https:~2F~2Fwww.microsoft.com~2F)"},{"Id":"9458193645","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:00:28","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36945","RelatedDescription":"Merged pull request \"fix tests with http/2\" (#36945) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9458308372","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:37:20","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35047","RelatedDescription":"Opened pull request \"Remove prototype comments and add the run-nullable-analysis flag\" (#35047) at dotnet/roslyn","RelatedBody":"Filed follow up bugs where appropriate. @dotnet/roslyn-compiler please review."},{"Id":"9458236012","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:13:46","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34735","RelatedDescription":"Closed pull request \"Add type and namespace declaration API\" (#34735) at dotnet/roslyn","RelatedBody":"This change was initially included in #34067. I have separated the change on compiler side and added unit tests.\r\n\r\n\r\nnew public compiler APIs (backed by declaration table)\r\n\r\n```cs\r\npublic abstract partial class Compilation\r\n{\r\n    ...\r\n    public abstract INamespaceDeclaration DeclarationRoot { get; }\r\n    ...\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.CodeAnalysis\r\n{   \r\n    public interface INamespaceOrTypeDeclaration\r\n    {\r\n        string Name { get; }\r\n\r\n        ImmutableArray<INamespaceOrTypeDeclaration> Children { get; }\r\n\r\n        bool IsNamespace { get; }\r\n\r\n        bool IsType { get; }\r\n    }\r\n\r\n    public interface ITypeDeclaration : INamespaceOrTypeDeclaration\r\n    {\r\n        TypeKind TypeKind { get; }\r\n\r\n        Accessibility DeclaredAccessibility { get; }\r\n\r\n        int Arity { get; }\r\n\r\n        new ImmutableArray<ITypeDeclaration> Children { get; }\r\n    }\r\n\r\n    public interface INamespaceDeclaration : INamespaceOrTypeDeclaration\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n@CyrusNajmabadi @jcouv @gafter \r\nFYI @dotnet/roslyn-compiler @dotnet/roslyn-ide "},{"Id":"9458232320","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:12:41","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34067","RelatedDescription":"Closed pull request \"[WIP] Import completion\" (#34067) at dotnet/roslyn","RelatedBody":"@gafter @jcouv @CyrusNajmabadi \r\n\r\nCould you please take a look at the new API added to compiler and let me know what do you think?\r\nThe rest is still in prototype quality which I hacked together just to ensure I can get all required data from compiler.\r\n\r\n--------\r\n\r\nnew public APIs (backed by declaration table)\r\n\r\n```cs\r\npublic abstract partial class Compilation\r\n{\r\n    ...\r\n    public abstract INamespaceDeclaration DeclarationRoot { get; }\r\n    ...\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.CodeAnalysis\r\n{   \r\n    public interface INamespaceOrTypeDeclaration\r\n    {\r\n        string Name { get; }\r\n\r\n        ImmutableArray<INamespaceOrTypeDeclaration> Children { get; }\r\n\r\n        bool IsNamespace { get; }\r\n\r\n        bool IsType { get; }\r\n    }\r\n\r\n    public interface ITypeDeclaration : INamespaceOrTypeDeclaration\r\n    {\r\n        TypeKind TypeKind { get; }\r\n\r\n        Accessibility DeclaredAccessibility { get; }\r\n\r\n        int Arity { get; }\r\n\r\n        new ImmutableArray<ITypeDeclaration> Children { get; }\r\n    }\r\n\r\n    public interface INamespaceDeclaration : INamespaceOrTypeDeclaration\r\n    {\r\n    }\r\n}\r\n```\r\n--------\r\nAlso, a screenshot with current prototype implementation using inline description \r\n\r\n![image](https://user-images.githubusercontent.com/788783/54650807-533e6700-4a6d-11e9-9ca1-b4d33c84c00b.png)\r\n\r\n"},{"Id":"9458224672","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:10:13","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34952","RelatedDescription":"Merged pull request \"Remove 'Document' from CompletionItem\" (#34952) at dotnet/roslyn","RelatedBody":"As part of teh \"show completion for items you don't have usings for\" feature, we'd like to be able to cache CompletionItems so we don't have to keep recreating vast numbers of the same items over and over again.\r\n\r\nThis is slightly problematic because CompletionItems today hold onto `Document`s, and that means an entire snapshot of the world from teh past is held onto.  \r\n\r\nThis PR changes CompletionItem to be pure data, without a hard link to a potentially very expensive piece of data like `Document`."},{"Id":"9458224510","Type":"PullRequestEvent","CreatedAt":"2019-04-17T04:10:11","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34808","RelatedDescription":"Merged pull request \"Implement import completion for types\" (#34808) at dotnet/roslyn","RelatedBody":"Using existing symbol APIs.\r\n\r\nThis also includes changes to completion system originally proposed and reviewed in https://github.com/dotnet/roslyn/pull/34952\r\n\r\n### Trigger:\r\n\r\nA new tri-value checkbox is added to intellisense option page, which is set to `indeterminate` by default. This is back by an language specific `Option<bool?>` in the code.\r\n\r\nThis feature is enabled when\r\n1.  this option value is `true`. \r\n2. the option value is `null` (default value) and `Roslyn.TypeImportCompletion` experiment is enabled in the host.\r\n\r\n![image](https://user-images.githubusercontent.com/788783/56062935-d4aeaf80-5d22-11e9-8125-5e7973850a1a.png)\r\n\r\n\r\n\r\n\r\n### Perf:\r\n\r\nSome quick measurement done in code:\r\n\r\n- First invocation in a solution can be slow. Since we are iterating all top level type symbols from all referenced compilations and PE references. Here's the number from `MS.VS.LanguageService.Charp.UnitTest`, which can reach 27 compilations and 232 PEs (including facade assemblies). As a result, 19011 distinct completion items are created, which takes 281ms (this is the time spendt in this completion provider, not the time to collect completion items from all providers)\r\n\r\n![image](https://user-images.githubusercontent.com/788783/55662828-2491f180-57cc-11e9-9683-f1a7909d0115.png)\r\n\r\n- Subsequent invocations would be faster, since we cache all the completion items (both roslyn and VS items). This is still true if edits has been made in the code, because we only need to recreate those items for current compilation.\r\n\r\n![image](https://user-images.githubusercontent.com/788783/55662924-3b851380-57cd-11e9-8028-254af501f9fd.png)\r\n\r\nBelow are profiling results on a project with smaller reference footprint (a test project in roslyn-analyzers solutiin). The traces are collected from five consecutive completion list invocations *after* the completion was triggered at least once in the document, so the cache is populated already. The total completion items created by import completion is ~6,000.\r\n\r\nA couple of key observations:\r\n- the perf of Import completion provider is inline with regular symbol completion provider (59ms vs 37ms), with some opportunities for small improvements.\r\n- the largest diff is in `CompletionServiceWithProviders.MergeAndPruneComletionList` (105ms vs 3ms), where almost 80ms is spent in `Sort` and `ToList` when import completion is provided. We should focus on this part first for further optimization.\r\n\r\n(1) thread time stack with import completion disabled\r\n\r\n![image](https://user-images.githubusercontent.com/788783/55693053-c9920300-5961-11e9-9e21-a0503f0bf5b6.png)\r\n\r\n(2) thread time stack with import completion enabled\r\n\r\n![image](https://user-images.githubusercontent.com/788783/55693076-e9292b80-5961-11e9-866d-4c85cdd2b199.png)\r\n\r\n\r\nTODO:\r\n\r\n- [x] Replacing existing VS item cache with CWT\r\n- [x] Move import items after in-scope symbols\r\n- [x] Fix debug scenario by fully qualifying the type name instead of attempt to add import\r\n- [x] Add VB\r\n- [x] Add C# tests\r\n- [ ] Add VB tests\r\n- [ ] More profiling needs to be done.\r\n- [x] Listen to workspace events and flush cache based on that\r\n- [ ] Talk to editor team about items with same display text\r\n\r\n@CyrusNajmabadi Could you please take a look?\r\n\r\nAlso @heejaechang for the experiment service part"},{"Id":"9458205585","Type":"IssuesEvent","CreatedAt":"2019-04-17T04:04:01","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35046","RelatedDescription":"Opened issue \"Verify Public API documentation for the new nullable APIs\" (#35046) at dotnet/roslyn","RelatedBody":"I've currently added relatively minimal documentation for the new public APIs. We should go through these docs and expand them, and do a formal review."},{"Id":"9458186613","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:58:23","Actor":"mazhou-msft","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35045","RelatedDescription":"Opened issue \"Async Completion List does not resize back after it gets too wide\" (#35045) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 2019 dev16.0 and above\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# project, or open a C# interactive window\r\n2. Type `int`, and try to scroll down the completion list, you will see the width of the list is growing based on the candidate names\r\n3. Type something very short, like `as`, `int` and you will see the completion window never resize back to fit the current candidates' names, make it look odd.\r\n\r\n**Expected Behavior**:\r\n1. Completion list will resize based on the candidate names, the legacy completion list preserves this behavior (resizes when completion list is triggered, if the window is already showed, then no resize.)\r\n2. The list should have a min width, if you just `Alt + Right` in interactive window and filter by keywords, you may get a very narrow window that display incomplete iten names.\r\n\r\n**Actual Behavior**:\r\nIt never resizes back to fit the length, see the screenshot.\r\n![image](https://user-images.githubusercontent.com/12908526/56259957-e2996300-6089-11e9-8bc4-2abcb5982124.png)\r\n"},{"Id":"9458046369","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:17:15","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35044","RelatedDescription":"Opened issue \"Verify BoundAnonymousPropertyDeclaration implementation\" (#35044) at dotnet/roslyn","RelatedBody":"`NullableWalker.VisitAnonymousObjectCreationExpression.getDeclaration` works for cases without errors, but in cases where there are errors it will not produce the correct information. We'll likely need to do some rebinding here to get the appropriate nodes."},{"Id":"9458040080","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:15:31","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35043","RelatedDescription":"Opened issue \"Remove _disableNullabilityAnalysis flag\" (#35043) at dotnet/roslyn","RelatedBody":"This flag is currently used in `NullableWalker` to avoid setting api results for nodes that aren't supported. When we support all nodes (namely patterns and tuples) we should remove this flag."},{"Id":"9458033152","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:13:35","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35042","RelatedDescription":"Opened issue \"Handle bad expression children\" (#35042) at dotnet/roslyn","RelatedBody":"Object and collection initializers are normally handled by the object creation visitor, but we can end up in scenarios with bad code where we hit the `VisitObjectInitializerExpression` and co visitors without hitting a `VisitObjectCreationExpression`. We likely need to analyze the children of these nodes to provide public API info."},{"Id":"9458022706","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:10:29","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35041","RelatedDescription":"Opened issue \"Investigate avoiding work if not rewriting for nullable\" (#35041) at dotnet/roslyn","RelatedBody":"`NullableWalker` currently has several places where we're doing work to calculate nullabilities when it's only necessary for public API information. We should try to make these conditional on whether or not that info is necessary to avoid work if possible."},{"Id":"9458016485","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:08:39","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35040","RelatedDescription":"Opened issue \"Refactor VisitObjectCreationInitializer\" (#35040) at dotnet/roslyn","RelatedBody":"The current handling of object initializers is potentially error-prone, and requires reconstructing types after we've already calculated them. We should refactor and ensure that types aren't recalculated after being calculated once."},{"Id":"9458005338","Type":"IssuesEvent","CreatedAt":"2019-04-17T03:05:43","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35039","RelatedDescription":"Opened issue \"Correct handling of types in `ApplyConversion`\" (#35039) at dotnet/roslyn","RelatedBody":"In the `NullableWalker`, `ApplyConversion` is often putting causing the wrong types to get set for `BoundConversion`s and their children. We need to update this to do the correct thing."},{"Id":"9457849546","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:22:55","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35038","RelatedDescription":"Opened issue \"Ensure that all binding in semantic models is subject to rewriting\" (#35038) at dotnet/roslyn","RelatedBody":"There are several sections of code that currently are not having rewriting done, and they probably should. We need to come up with test cases that will expose the lack of rewriting and then implement the rewriting sections."},{"Id":"9457843090","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:21:11","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35037","RelatedDescription":"Opened issue \"Enable nullable analysis on speculative semantic models\" (#35037) at dotnet/roslyn","RelatedBody":"We need to determine the extent of nullable analysis support for speculative semantic models. In particular, we need to determine just how precise the speculative model needs to be for nullability. For example:\r\n\r\n```C#\r\nclass C\r\n{\r\n    object? F;\r\n    static void M(C c)\r\n    {\r\n        var x = new C() { F = c.F?.ToString() };\r\n    }\r\n}\r\nstatic class ObjectExtensions\r\n{\r\n    object? MyExtension(object o) => null;\r\n}\r\n```\r\n\r\nIf someone were to speculate about replacing the `ToString()` call with `MyExtension(c.F)`, would we need to be precise enough here to not warn about the `c.F` in the invocation of `MyExtension`, since the conditional access guarantees that that `F` won't be null? @jasonmalinowski, thoughts?"},{"Id":"9457816375","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:13:48","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35036","RelatedDescription":"Opened issue \"IDiscardSymbol.NullableAnnotation needs to be implemented\" (#35036) at dotnet/roslyn","RelatedBody":"Currently this is unimplemented."},{"Id":"9457810535","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:12:10","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35035","RelatedDescription":"Opened issue \"Refactor SymbolDisplay's handling of nullablility\" (#35035) at dotnet/roslyn","RelatedBody":"Currently the handling requires `TypeSymbolWithAnnotations` internally, so we need to update it to not need that. Additionally, some of the test format code is directly in `TypeSymbolWithAnnotations`, that also needs to be pulled out."},{"Id":"9457802812","Type":"IssuesEvent","CreatedAt":"2019-04-17T02:10:04","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35034","RelatedDescription":"Opened issue \"IMethodSymbol.ReceiverNullability needs to be implemented\" (#35034) at dotnet/roslyn","RelatedBody":"Currently this is unimplemented."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9457006567","Type":"PullRequestEvent","CreatedAt":"2019-04-16T22:34:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Merged pull request \"ObjWriter build fixes\" (#7315) at dotnet/corert","RelatedBody":""},{"Id":"9456752048","Type":"PullRequestEvent","CreatedAt":"2019-04-16T21:45:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Opened pull request \"ObjWriter build fixes\" (#7315) at dotnet/corert","RelatedBody":""},{"Id":"9456552823","Type":"PullRequestEvent","CreatedAt":"2019-04-16T21:11:30","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Merged pull request \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306) at dotnet/corert","RelatedBody":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9455329358","Type":"PullRequestEvent","CreatedAt":"2019-04-16T17:59:02","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":null,"RelatedBody":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9455329118","Type":"PullRequestEvent","CreatedAt":"2019-04-16T17:59:01","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Closed pull request \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306) at dotnet/corert","RelatedBody":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9455203739","Type":"PullRequestEvent","CreatedAt":"2019-04-16T17:40:16","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Merged pull request \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308) at dotnet/corert","RelatedBody":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9454977914","Type":"PullRequestEvent","CreatedAt":"2019-04-16T17:05:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Merged pull request \"Use CentOS docker image for official builds\" (#7314) at dotnet/corert","RelatedBody":"The same one is used for CoreCLR official builds"},{"Id":"9454353722","Type":"PullRequestEvent","CreatedAt":"2019-04-16T15:39:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Opened pull request \"Use CentOS docker image for official builds\" (#7314) at dotnet/corert","RelatedBody":"The same one is used for CoreCLR official builds"},{"Id":"9454263624","Type":"PullRequestEvent","CreatedAt":"2019-04-16T15:28:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7313) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara"},{"Id":"9453542369","Type":"PullRequestEvent","CreatedAt":"2019-04-16T14:05:35","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7299","RelatedDescription":"Closed pull request \"Move EventSource to shared CoreLib partition\" (#7299) at dotnet/corert","RelatedBody":"Counter-part to https://github.com/dotnet/coreclr/pull/23925."},{"Id":"9453462838","Type":"PullRequestEvent","CreatedAt":"2019-04-16T13:56:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7313) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9450990060","Type":"PullRequestEvent","CreatedAt":"2019-04-16T08:06:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7310) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"434094380","IsPullRequest":false,"CreatedAt":"2019-04-17T05:10:11","Actor":"dotnet-mc-bot","Number":"24055","RawContent":null,"Title":"Test failure: JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh` has failed.\n\nFailure Message:\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/JIT/SIMD/Reports/JIT.SIMD/Plane_r/Plane_r.output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/JIT/SIMD/Plane_r/IL:/root/helix/work/workitem/JIT/SIMD/Plane_r /in Plane_r.org /out Plane_r.exe\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nNative image Plane_r.exe generated successfully.\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun Plane_r.exe ''\nin ReleaseLock\nExpected: 100\nActual: 255\nEND EXECUTION - FAILED\nTest Harness Exitcode is : 1\nTo run the test:\n> set CORE_ROOT=/root/helix/work/correlation\n> /root/helix/work/workitem/JIT/SIMD/Plane_r/Plane_r.sh\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at JIT_SIMD._Plane_r_Plane_r_._Plane_r_Plane_r_sh() in /__w/2/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.SIMD/JIT.SIMD.XUnitWrapper.cs:line 3432\n```\n\nBuild : 3.0 - 20190416.72 (Ready-To-Run Tests)\nFailing configurations:\n- Alpine.38.Arm64\n  - arm64\n  - arm64\n- Ubuntu.1804.Arm64\n  - arm64\n  - arm64\n- Debian.9.Arm64\n  - arm64\n  - arm64\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190416.72/workItem/JIT/analysis/xunit/JIT_SIMD._Plane_r_Plane_r_~2F_Plane_r_Plane_r_sh","Url":"https://github.com/dotnet/coreclr/issues/24055","RelatedDescription":"Open issue \"Test failure: JIT_SIMD._Plane_r_Plane_r_/_Plane_r_Plane_r_sh\" (#24055)"},{"Id":"433762846","IsPullRequest":true,"CreatedAt":"2019-04-17T03:15:40","Actor":"dotnet-maestro[bot]","Number":"24031","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190416.01\r\n- **Date Produced**: 4/16/2019 8:46 AM\r\n- **Commit**: e32693473d394c9d019d81448e44d171cc9f7d04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27616-01\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24031","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#24031)"},{"Id":"433761146","IsPullRequest":true,"CreatedAt":"2019-04-17T03:14:42","Actor":"dotnet-maestro[bot]","Number":"24030","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190415.16\r\n- **Date Produced**: 4/16/2019 5:33 AM\r\n- **Commit**: 071e6986b2a71e29cab3df4e2dd2cdf3fe3ce574\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19215.16\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview5.19215.16\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24030","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#24030)"},{"Id":"433751547","IsPullRequest":true,"CreatedAt":"2019-04-17T03:14:22","Actor":"dotnet-maestro[bot]","Number":"24029","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24029","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#24029)"},{"Id":"433998325","IsPullRequest":true,"CreatedAt":"2019-04-17T03:13:30","Actor":"jkoritzinsky","Number":"24042","RawContent":null,"Title":"Remove limits on IVT public key lengths.","State":"closed","Body":"Remove abritrary length restrictions on public keys in `InternalsVisibleTo` attributes. \r\n\r\nFixes #21723","Url":"https://github.com/dotnet/coreclr/pull/24042","RelatedDescription":"Closed or merged PR \"Remove limits on IVT public key lengths.\" (#24042)"},{"Id":"433976688","IsPullRequest":true,"CreatedAt":"2019-04-17T03:13:13","Actor":"tannergooding","Number":"24039","RawContent":null,"Title":"Changing Math.Max, Math.Min, Math.MaxMagnitude, and Math.MinMagnitudeto propagate NaN inputs","State":"closed","Body":"This resolves the CoreCLR side of https://github.com/dotnet/corefx/issues/36931","Url":"https://github.com/dotnet/coreclr/pull/24039","RelatedDescription":"Closed or merged PR \"Changing Math.Max, Math.Min, Math.MaxMagnitude, and Math.MinMagnitudeto propagate NaN inputs\" (#24039)"},{"Id":"434044581","IsPullRequest":true,"CreatedAt":"2019-04-17T03:12:13","Actor":"GrabYourPitchforks","Number":"24048","RawContent":null,"Title":"Fix incorrect EHCount calculation","State":"closed","Body":"https://github.com/dotnet/coreclr/pull/23833 accidentally introduced a bug in `DynamicMethod` due to an incorrect calculation being used to compute the _EHCount_ value. The incoming value is actually stored in 24 bits, not 32 bits, and we were reading an extra byte and corrupting the actual _EHCount_ value when writing it to the IL stream.\r\n\r\nAlso unblocks CI at https://github.com/dotnet/corefx/pull/36922.","Url":"https://github.com/dotnet/coreclr/pull/24048","RelatedDescription":"Closed or merged PR \"Fix incorrect EHCount calculation\" (#24048)"},{"Id":"434020994","IsPullRequest":true,"CreatedAt":"2019-04-17T03:11:36","Actor":"janvorli","Number":"24045","RawContent":null,"Title":"Fix incorrect thread affinitization","State":"closed","Body":"The PAL_SetCurrentThreadAffinity was incorrectly adding the specified processor\r\nto the current thread affinity set instead of setting the affinity to only\r\nthe processor specified.\r\nIt was causing 20% performance hit in aspnet benchmarks on machines with\r\nmany cores.\r\nThis ~~change~~ issue crept in when I was refactoring the related code while removing\r\nCPU groups emulation.","Url":"https://github.com/dotnet/coreclr/pull/24045","RelatedDescription":"Closed or merged PR \"Fix incorrect thread affinitization\" (#24045)"},{"Id":"434070250","IsPullRequest":true,"CreatedAt":"2019-04-17T03:01:24","Actor":"stephentoub","Number":"24054","RawContent":null,"Title":"Nullable: System.Collections.Concurrent","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24054","RelatedDescription":"Open PR \"Nullable: System.Collections.Concurrent\" (#24054)"},{"Id":"434062731","IsPullRequest":false,"CreatedAt":"2019-04-17T02:24:29","Actor":"stephentoub","Number":"24053","RawContent":null,"Title":"EventPipeController ctor potentially throws ArgumentNullException?","State":"open","Body":"EventPipeController's ctor accesses AppContext.BaseDirectory and passes the result to Path.Combine, which will throw an ArgumentNullException if BaseDirectory returns null.  BaseDirectory returns the result of GetBaseDirectoryCore, which calls Assembly.GetEntryAssembly()?.Location.  GetEntryAssembly may return null, in which case GetBaseDirectoryCore will return null, in which case Path.Combine will throw and the EventPipeController ctor will throw.  This will be eaten in the Initialize method by a catch-all block, but it seems like it'd be better not to throw in the first place.","Url":"https://github.com/dotnet/coreclr/issues/24053","RelatedDescription":"Open issue \"EventPipeController ctor potentially throws ArgumentNullException?\" (#24053)"},{"Id":"434054903","IsPullRequest":true,"CreatedAt":"2019-04-17T01:46:18","Actor":"sywhang","Number":"24052","RawContent":null,"Title":"Runtime counters naming change and setting default rates. ","State":"open","Body":"This renames the names of the runtime-provided EventCounters a more CLI-friendly name as well as some properties (`DisplayName` and `DisplayRateTimeScale`). We mainly need this change for dotnet-counters tool (https://github.com/dotnet/diagnostics/tree/master/src/Tools/dotnet-counters). \r\n\r\nUnits were not included, but I'm hoping to get feedback via Preview 5 release and see if that is something we need to change. If needed they can be added via the new metadata API on EventCounter classes. ","Url":"https://github.com/dotnet/coreclr/pull/24052","RelatedDescription":"Open PR \"Runtime counters naming change and setting default rates. \" (#24052)"},{"Id":"434054223","IsPullRequest":false,"CreatedAt":"2019-04-17T01:42:59","Actor":"VincentBu","Number":"24051","RawContent":null,"Title":"[arm] Error: Cannot delete workspace","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstressregs0x1000_tst/51/\r\n\r\n**Log:**\r\n```\r\nERROR: Cannot delete workspace: remote file operation failed: C:\\j\\workspace\\arm_cross_che---0370727f at hudson.remoting.Channel@4bdd11c3:JNLP4-connect connection from 131.107.160.198/131.107.160.198:6297: java.io.IOException: Unable to delete 'C:\\j\\workspace\\arm_cross_che---0370727f\\bin\\tests\\Windows_NT.arm.Checked\\Interop\\NativeLibraryResolveCallback\\CallbackTests\\CallbackTests.exe'. Tried 3 times (of a maximum of 3) waiting 0.1 sec between attempts.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24051","RelatedDescription":"Open issue \"[arm] Error: Cannot delete workspace\" (#24051)"},{"Id":"434048445","IsPullRequest":false,"CreatedAt":"2019-04-17T01:13:21","Actor":"VincentBu","Number":"24050","RawContent":null,"Title":"[arm] Assertion failure: g_currentProcessCpuCount == g_processAffinitySet.Count()","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/arm_cross_checked_ubuntu_tst/329/\r\n\r\n**Failed tests:**\r\nJIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh\r\n\r\n**Log:**\r\n```\r\nJIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh [FAIL]\r\n        \r\n        Assert failure(PID 14398 [0x0000383e], Thread: 14398 [0x383e]): g_currentProcessCpuCount == g_processAffinitySet.Count()\r\n            File: /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/src/vm/gcenv.os.cpp Line: 117\r\n            Image: /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun\r\n        \r\n        /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh: line 252: 14398 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/Reports/JIT.Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun nonlocalexittobeginningoftry_r.exe ''\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root\r\n        > /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/bin/tests/Linux.arm.Checked/TestWrappers/JIT.Methodical/JIT.Methodical.XUnitWrapper.cs(54678,0): at JIT_Methodical._eh_finallyexec_nonlocalexittobeginningoftry_r_nonlocalexittobeginningoftry_r_._eh_finallyexec_nonlocalexittobeginningoftry_r_nonlocalexittobeginningoftry_r_sh()\r\n        Output:\r\n          \r\n          Assert failure(PID 14398 [0x0000383e], Thread: 14398 [0x383e]): g_currentProcessCpuCount == g_processAffinitySet.Count()\r\n              File: /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/src/vm/gcenv.os.cpp Line: 117\r\n              Image: /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun\r\n          \r\n          /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh: line 252: 14398 Aborted                 $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n          \r\n          Return code:      1\r\n          Raw output file:      /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/Reports/JIT.Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n          /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun nonlocalexittobeginningoftry_r.exe ''\r\n          Expected: 100\r\n          Actual: 134\r\n          END EXECUTION - FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          > set CORE_ROOT=/ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root\r\n          > /ssd/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu_tst/bin/tests/Linux.arm.Checked/JIT/Methodical/eh/finallyexec/nonlocalexittobeginningoftry_r/nonlocalexittobeginningoftry_r.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24050","RelatedDescription":"Open issue \"[arm] Assertion failure: g_currentProcessCpuCount == g_processAffinitySet.Count()\" (#24050)"},{"Id":"434044684","IsPullRequest":true,"CreatedAt":"2019-04-17T00:54:00","Actor":"sandreenko","Number":"24049","RawContent":null,"Title":"Start cleaning arm32 corefx stress testing exclude list.","State":"open","Body":"@dotnet-bot test Windows_NT arm Cross Checked corefx_baseline Build and Test\r\n@dotnet-bot test Ubuntu16.04 arm Cross Checked corefx_baseline Build and Test\r\n\r\n@dotnet-bot test Windows_NT arm Cross Checked corefx_jitstress1 Build and Test\r\n@dotnet-bot test Windows_NT arm Cross Checked corefx_jitstress2 Build and Test\r\n@dotnet-bot test Ubuntu16.04 arm Cross Checked corefx_jitstress1 Build and Test\r\n@dotnet-bot test Ubuntu16.04 arm Cross Checked corefx_jitstress2 Build and Test","Url":"https://github.com/dotnet/coreclr/pull/24049","RelatedDescription":"Open PR \"Start cleaning arm32 corefx stress testing exclude list.\" (#24049)"},{"Id":"434037474","IsPullRequest":false,"CreatedAt":"2019-04-17T00:25:48","Actor":"fadimounir","Number":"24046","RawContent":null,"Title":"ASSERT FAILED: 0 != id","State":"closed","Body":"1) dotnet new wpf\r\n2) Add <ReadyToRun>true</ReadyToRun> in csproj\r\n3) dotnet publish -r win-x64\r\n\r\nCallstack:\r\n`\r\nCROSSGEN! CHECK::Trigger + 0x240 (0x00007ff70bf74bd0) \r\nCROSSGEN! FindECFuncForMethod + 0xD4 (0x00007ff70bd3a564) \r\nCROSSGEN! ECall::GetIntrinsicID + 0xBC (0x00007ff70bd3b01c) \r\nCROSSGEN! CEEInfo::getIntrinsicID + 0xD2 (0x00007ff70bd2fd62) \r\nCROSSGEN! ZapInfo::getIntrinsicID + 0x51 (0x00007ff70bf55491) \r\nCLRJIT! <no symbol> + 0x0 (0x00007ffea99992a3) \r\nCLRJIT! <no symbol> + 0x0 (0x00007ffea999b045) \r\nCLRJIT! sxsJitStartup + 0x2D76D (0x00007ffea99d064d) \r\nCLRJIT! sxsJitStartup + 0x28977 (0x00007ffea99cb857) \r\nCLRJIT! sxsJitStartup + 0x28803 (0x00007ffea99cb6e3)\r\n    File: d:\\git\\coreclr\\src\\vm\\ecall.cpp Line: 346 \r\n    Image: D:\\GIT\\coreclr\\bin\\Product\\Windows_NT.x64.Debug\\crossgen.exe `","Url":"https://github.com/dotnet/coreclr/issues/24046","RelatedDescription":"Closed issue \"ASSERT FAILED: 0 != id\" (#24046)"},{"Id":"434038075","IsPullRequest":true,"CreatedAt":"2019-04-17T00:18:11","Actor":"fadimounir","Number":"24047","RawContent":null,"Title":"Fix RVA field placement order","State":"open","Body":"Fix for #23872 \r\n\r\nRVA fields should be placed in the R2R image after a correct qsort operation, and not as part of ZapNode relocs placement during compilation. This fixes the Managed C++ binaries scenario in R2R.\r\n\r\nUpdating the qsort callback to sort by descending size for fields of equal RVA: we do this for fragile NIs","Url":"https://github.com/dotnet/coreclr/pull/24047","RelatedDescription":"Open PR \"Fix RVA field placement order\" (#24047)"},{"Id":"433933769","IsPullRequest":true,"CreatedAt":"2019-04-16T23:28:50","Actor":"BruceForstall","Number":"24037","RawContent":null,"Title":"Reduce stack requirements of test","State":"closed","Body":"Fixes #24021","Url":"https://github.com/dotnet/coreclr/pull/24037","RelatedDescription":"Closed or merged PR \"Reduce stack requirements of test\" (#24037)"},{"Id":"434013175","IsPullRequest":true,"CreatedAt":"2019-04-16T22:29:39","Actor":"WardenGnaw","Number":"24044","RawContent":null,"Title":"Add toggle for setting exports to not be hidden","State":"open","Body":"This PR adds '-defaultvisibility' to build.sh.\r\n\r\nThis will define DEFAULT_VISIBILITY for CMake.\r\nIf DEFAULT_VISIBILITY is defined, it will not set the compile option to\r\nhave all methods default to be hidden.","Url":"https://github.com/dotnet/coreclr/pull/24044","RelatedDescription":"Open PR \"Add toggle for setting exports to not be hidden\" (#24044)"},{"Id":"434001812","IsPullRequest":true,"CreatedAt":"2019-04-16T21:52:14","Actor":"CarolEidt","Number":"24043","RawContent":null,"Title":"Fix Arm64 UpperVector save/restore","State":"open","Body":"Change the general handling of end-of-block restores so that we always have a RefPosition on which to allocate the register needed on Arm64.\r\n\r\nFix #23885","Url":"https://github.com/dotnet/coreclr/pull/24043","RelatedDescription":"Open PR \"Fix Arm64 UpperVector save/restore\" (#24043)"},{"Id":"433992643","IsPullRequest":true,"CreatedAt":"2019-04-16T21:26:00","Actor":"jkoritzinsky","Number":"24041","RawContent":null,"Title":"Disable COM native-client tests on IL round-trip","State":"open","Body":"Disable tests that are failing in #23427. The failures aren't reproducable outside of Jenkins.\r\n\r\nFixes #23427\r\n","Url":"https://github.com/dotnet/coreclr/pull/24041","RelatedDescription":"Open PR \"Disable COM native-client tests on IL round-trip\" (#24041)"},{"Id":"433990267","IsPullRequest":false,"CreatedAt":"2019-04-16T21:20:06","Actor":"AndyAyersMS","Number":"24040","RawContent":null,"Title":"JIT: revisit weight bump for implicit byref parameters","State":"open","Body":"#19223 added boost to implicit byref param weights to match old behavior (where byref params were also marked as temps).\r\n\r\nThis is probably undesirable, so we should re-visit.","Url":"https://github.com/dotnet/coreclr/issues/24040","RelatedDescription":"Open issue \"JIT: revisit weight bump for implicit byref parameters\" (#24040)"},{"Id":"433970759","IsPullRequest":false,"CreatedAt":"2019-04-16T20:29:29","Actor":"hgroover1","Number":"24038","RawContent":null,"Title":"coreclr hangs inside futex on arm32 linux running hello world","State":"open","Body":"I am running a kernel.org 4.14.77 Linux kernel with additions from the Digi-Linux repo for iMX6. I am running on a dual-core system. I am able to run through the entire ltp (Linux Test Project) suite and this system is otherwise working and stable.\r\n\r\nFirst unusual event: I build a Hello, World dotnet program on a Raspberry Pi (running Raspbian Stretch) and copy the resulting files to the target system, then after changing to the deployment directory run\r\nCOREHOST_TRACE=1 ./Hello\r\nThe last several lines of text I see are\r\nProcessing native/culture for deps entry [runtime.linux-arm.Microsoft.NETCore.Do\r\ntNetHostPolicy, 2.2.0, runtimes/linux-arm/native/libhostpolicy.so]              \r\n  Considering entry [runtime.linux-arm.Microsoft.NETCore.DotNetHostPolicy/2.2.0/\r\nruntimes/linux-arm/native/libhostpolicy.so], probe dir [], probe fx level:0, ent\r\nry fx level:0                                                                   \r\n    Local path query exists /opt/talos-service/libhostpolicy.so                 \r\n    Probed deps dir and matched '/opt/talos-service/libhostpolicy.so'           \r\nProcessing native/culture for deps entry [runtime.linux-arm.Microsoft.NETCore.Do\r\ntNetHostResolver, 2.2.0, runtimes/linux-arm/native/libhostfxr.so]               \r\n  Considering entry [runtime.linux-arm.Microsoft.NETCore.DotNetHostResolver/2.2.\r\n0/runtimes/linux-arm/native/libhostfxr.so], probe dir [], probe fx level:0, entr\r\ny fx level:0                                                                    \r\n    Local path query exists /opt/talos-service/libhostfxr.so                    \r\n    Probed deps dir and matched '/opt/talos-service/libhostfxr.so'              \r\nThe resolved JIT path is '/opt/talos-service/libclrjit.so'                      \r\nCoreCLR path = '/opt/talos-service/libcoreclr.so', CoreCLR dir = '/opt/talos-ser\r\nvice/' \r\n                                                                         \r\nAt this point the application is unresponsive and has to be killed using SIGKILL (kill -9).\r\nUsing strace shows that it is waiting inside a futex call. The app consists of a print statement which has not yet occurred. The futex is being invoked from within the pthread library.\r\n\r\nI have run dotnet applications on the same machine with a different Linux version and the identical build and deployment procedure. This Hello program runs on the Raspberry Pi running a nearly identical kernel version. What I am trying to do is gain better insight into what is failing. I have increased systemwide file handles to 100000 and I am running as root.\r\n\r\nThe next steps for me appear to be rebuilding coreclr as a debug build so I might get additional insight into the failure. Any suggestions on debugging or building components in debug mode would be helpful. Any suggestions on where to start looking at the source corresponding to these last messages would be helpful.\r\n\r\nI have been using the release builds of dotnet and coreclr until this point.","Url":"https://github.com/dotnet/coreclr/issues/24038","RelatedDescription":"Open issue \"coreclr hangs inside futex on arm32 linux running hello world\" (#24038)"},{"Id":"433805004","IsPullRequest":true,"CreatedAt":"2019-04-16T17:24:32","Actor":"stephentoub","Number":"24032","RawContent":null,"Title":"Nullable: Additional COM types","State":"closed","Body":"Somehow these slipped through previous rounds of annotating.","Url":"https://github.com/dotnet/coreclr/pull/24032","RelatedDescription":"Closed or merged PR \"Nullable: Additional COM types\" (#24032)"},{"Id":"433873134","IsPullRequest":true,"CreatedAt":"2019-04-16T16:25:56","Actor":"tarekgh","Number":"24036","RawContent":null,"Title":"Update the types consumers of Index and Range","State":"open","Body":"The C# compiler now can automatically support the indexers with Index and Range parameters on any type meet the conditions:\r\n-\tThe type exposes Length or Count property which returning integer.\r\n-\tThe type has indexer of integer parameter.\r\n-\tThe type has a Slice method which takes 2 integers\r\n\r\nThe change here is to remove the methods and indexers of the types which we previously added it as the compiler will automatically provide those.","Url":"https://github.com/dotnet/coreclr/pull/24036","RelatedDescription":"Open PR \"Update the types consumers of Index and Range\" (#24036)"},{"Id":"433857230","IsPullRequest":false,"CreatedAt":"2019-04-16T15:51:35","Actor":"jzabroski","Number":"24035","RawContent":null,"Title":"COREHOST_TRACE should log AssemblyLoadContext","State":"open","Body":"*Background*\r\nOn Windows, I am integrating with a .NET Core global tool that in turn loads assemblies via command line parameter `assembly=\"c:\\source\\bin\\Debug\\netstandard2.0\\JohnZabroski.Database.dll\"`. `JohnZabroski.Database.dll` transitively references `System.Data.SqlClient`.\r\n\r\n*Problem*\r\nWith `COREHOST_TRACE=1`, my current stderr looks like this:\r\n\r\n```\r\n!!! Could not load file or assembly 'System.Data.SqlClient, Version=4.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Could not find or load a specific file. (Exception from HRESULT: 0x80131621)\r\n!!! +- Could not load file or assembly 'System.Data.SqlClient, Version=4.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Could not load file or assembly 'System.Data.SqlClient, Version=4.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. Could not find or load a specific file. (Exception from HRESULT: 0x80131621) ---> System.IO.FileLoadException: Could not load file or assembly 'System.Data.SqlClient, Version=4.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Reflection.Assembly.LoadFrom(String assemblyFile)\r\n   at System.Reflection.Assembly.LoadFromResolveHandler(Object sender, ResolveEventArgs args)\r\n   at System.AppDomain.InvokeResolveEvent(ResolveEventHandler eventHandler, RuntimeAssembly assembly, String name)\r\n```\r\n\r\nI found the following blogpost to be rather intimidating when trying to troubleshoot WHY my assembling could not be found or located: https://mattwarren.org/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code/\r\n\r\nI have found Assembly Fusion Log Viewer tool in .NET 4.6 to be A LOT easier user experience. See: https://github.com/dotnet/coreclr/issues/10379\r\n\r\n*Possibly related*\r\nhttps://github.com/dotnet/coreclr/issues/15863 - users find debugging assembly loading on Linux to be awful","Url":"https://github.com/dotnet/coreclr/issues/24035","RelatedDescription":"Open issue \"COREHOST_TRACE should log AssemblyLoadContext\" (#24035)"},{"Id":"433850564","IsPullRequest":true,"CreatedAt":"2019-04-16T15:38:47","Actor":"YohDeadfall","Number":"24034","RawContent":null,"Title":"Optimized instance creation via activator","State":"open","Body":"Fixes #7592.\r\n\r\nUnfortunately, I wasn't able to run benchmarks and even tests. An application fails with a `NullReferenceException` and I can't understand why it happens:\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(CharacteristicObject other, IEnumerable`1 characteristicsToApply)\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore()\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.CreateConfig(CommandLineOptions options, IConfig globalConfig)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.<>c__DisplayClass4_0.<Parse>b__0(CommandLineOptions options)\r\n   at CommandLine.ParserResultExtensions.WithParsed[T](ParserResult`1 result, Action`1 action)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.Parse(String[] args, ILogger logger, IConfig globalConfig)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.RunWithDirtyAssemblyResolveHelper(String[] args, IConfig config)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.Run(String[] args, IConfig config)\r\n   at Npgsql.Benchmarks.Program.Main(String[] args)\r\n```\r\n\r\n```csharp\r\n[Config(typeof(Config))]\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class ActivatorTests\r\n{\r\n    public class Config : ManualConfig\r\n    {\r\n        public Config() => Add(StatisticColumn.OperationsPerSecond);\r\n    }\r\n\r\n    [Benchmark]\r\n    public Address CreateClass() => Activator.CreateInstance<Address>();\r\n\r\n    [Benchmark]\r\n    public Coordinates CreateStruct() => Activator.CreateInstance<Coordinates>();\r\n}\r\n\r\npublic class Address\r\n{\r\n    public string Street { get; set; }\r\n    public string City { get; set; }\r\n    public int Zip { get; set; }\r\n}\r\n\r\npublic struct Coordinates\r\n{\r\n    public double Latitude { get; set; }\r\n    public double Longitude { get; set; }\r\n}\r\n```\r\n\r\nI had no other exceptions while debugging. Anyway, I moved implementation into the benchmark (`Allocate` was replaced by `GetUninitializedObject`) and ran it on the official .NET Core 3 preview 3. There is a little performance degradation in the class initialization case, but for value types there is 5 time boost and zero memory allocation.\r\n\r\nAny help with debugging is very appreciated.\r\n\r\n/cc @GrabYourPitchforks @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/24034","RelatedDescription":"Open PR \"Optimized instance creation via activator\" (#24034)"},{"Id":"433836857","IsPullRequest":false,"CreatedAt":"2019-04-16T15:13:26","Actor":"NinoFloris","Number":"24033","RawContent":null,"Title":"DIM allows interfaces to be expanded, reevaluate variance restrictions?","State":"open","Body":"I'm under the impression one of the reasons for disallowing variance on class type arguments was that implementers could easily shoot their future selves in the foot if they didn't judiciously add variance markers to type arguments. \r\n\r\nAs variance limits the positions that a type argument can appear in you might not foresee that you'd want to use a type argument in opposite position in new methods you add later on.\r\n\r\nNow that DIM would open up that possibility for interfaces too is it worth re-examining variance restrictions?","Url":"https://github.com/dotnet/coreclr/issues/24033","RelatedDescription":"Open issue \"DIM allows interfaces to be expanded, reevaluate variance restrictions?\" (#24033)"},{"Id":"433555711","IsPullRequest":true,"CreatedAt":"2019-04-16T14:43:10","Actor":"omajid","Number":"24027","RawContent":null,"Title":"Use delete [] on array types","State":"closed","Body":"Calling delete on types allocated with new[] leads to undefined behaviour.","Url":"https://github.com/dotnet/coreclr/pull/24027","RelatedDescription":"Closed or merged PR \"Use delete [] on array types\" (#24027)"},{"Id":"433591975","IsPullRequest":false,"CreatedAt":"2019-04-16T05:39:17","Actor":"dotnet-mc-bot","Number":"24028","RawContent":null,"Title":"Test failure: baseservices_threading._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_/_interlocked_exchange_ExchangeTString_2_ExchangeTString_2_sh","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `baseservices_threading._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_/_interlocked_exchange_ExchangeTString_2_ExchangeTString_2_sh` has failed.\n\nFailure Message:\n```\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.\n   at System.String.op_Inequality(System.String, System.String)   at System.String.op_Inequality(System.String, System.String)\n\n   at ThreadSafe.ThreadWorkerA(System.Object)   at ThreadSafe.ThreadWorkerB(System.Object)\n\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\n\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\nSystem.Runtime.InteropServices.SEHException: External component has thrown an exception.\n../ExchangeTString/ExchangeTString.sh: line 259:   666 Aborted                 (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/baseservices/threading/Reports/baseservices.threading/interlocked/exchange/ExchangeTString_2/ExchangeTString_2.output.txt\nRaw output:\nBEGIN EXECUTION\nexport CDPATH=/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString_2\n/usr/bin/env bash ../ExchangeTString/ExchangeTString.sh 'null' 'This is a string'\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString/IL:/root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString /in ExchangeTString.org /out ExchangeTString.exe\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nNative image ExchangeTString.exe generated successfully.\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun ExchangeTString.exe 'null' 'This is a string'\nCreating threads\nStarting checker\nJoining threads\nin ReleaseLock\nExpected: 100\nActual: 134\nEND EXECUTION - FAILED\nExpected: 0\nActual: 1\nEND EXECUTION - FAILED\nTest Harness Exitcode is : 1\nTo run the test:\n> set CORE_ROOT=/root/helix/work/correlation\n> /root/helix/work/workitem/baseservices/threading/interlocked/exchange/ExchangeTString_2/ExchangeTString_2.sh\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at baseservices_threading._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_sh() in /__w/1/s/bin/tests/Linux.arm64.Release/TestWrappers/baseservices.threading/baseservices.threading.XUnitWrapper.cs:line 19353\n```\n\nBuild : 3.0 - 20190415.72 (Ready-To-Run Tests)\nFailing configurations:\n- Debian.9.Arm64\n  - arm64\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190415.72/workItem/baseservices.threading/analysis/xunit/baseservices_threading._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_~2F_interlocked_exchange_ExchangeTString_2_ExchangeTString_2_sh","Url":"https://github.com/dotnet/coreclr/issues/24028","RelatedDescription":"Open issue \"Test failure: baseservices_threading._interlocked_exchange_ExchangeTString_2_ExchangeTString_2_/_interlocked_exchange_ExchangeTString_2_ExchangeTString_2_sh\" (#24028)"},{"Id":"433547078","IsPullRequest":false,"CreatedAt":"2019-04-16T01:48:32","Actor":"AriNuer","Number":"24026","RawContent":null,"Title":"[arm64/windows]Test failure:System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs3_tst/28/\r\n\r\n**Failed test:**\r\nSystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\r\n\r\n**Failed log:**\r\n```\r\nystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion [FAIL]\r\n      Assert.Equal() Failure\r\n                   ? (pos 3)\r\n      Expected: ???\r\n      Actual:   ????\r\n                   ? (pos 3)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataRootBuilderTests.cs(384,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion()\r\n    System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2 [FAIL]\r\n      Assert.Equal() Failure\r\n                  ? (pos 2)\r\n      Expected: ??\r\n      Actual:   ???\r\n                  ? (pos 2)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataBuilderTests.cs(486,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2()\r\n  Finished:    System.Reflection.Metadata.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Reflection.Metadata.Tests  Total: 556, Errors: 0, Failed: 2, Skipped: 0, Time: 9.952s\r\n----- end 16:28:28.60 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24026","RelatedDescription":"Open issue \"[arm64/windows]Test failure:System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\" (#24026)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"434068186","IsPullRequest":true,"CreatedAt":"2019-04-17T03:40:47","Actor":"dotnet-maestro[bot]","Number":"11180","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11180","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#11180)"},{"Id":"434035136","IsPullRequest":true,"CreatedAt":"2019-04-17T00:03:51","Actor":"wli3","Number":"11179","RawContent":null,"Title":"dotnet tool uninstall should find the first manifest file contain package id","State":"open","Body":"fix https://github.com/dotnet/cli/issues/11139  , a lot of file touched. But most of them are locs\r\n\r\nInstead of the first manifest file regardless. So, the behavior is aligned with tool update.\r\nExtract method ToolManifestFinderExtensions from tool update. And use them in both places.\r\n\r\nI changed the following to make it generic. Since the user just type the command, I don't think uninstall or update in the error message is significant.\r\n\r\n\"If you intended **to uninstall** on a global tool, use the `--global` option for the command.\" to \"If you intended **to perform an action** on a global tool, use the `--global` option for the command.\"","Url":"https://github.com/dotnet/cli/pull/11179","RelatedDescription":"Open PR \"dotnet tool uninstall should find the first manifest file contain package id\" (#11179)"},{"Id":"433960607","IsPullRequest":true,"CreatedAt":"2019-04-16T22:26:36","Actor":"nguerrera","Number":"11173","RawContent":null,"Title":"dotnet/sdk 2.1.700-preview-64015-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11173","RelatedDescription":"Closed or merged PR \"dotnet/sdk 2.1.700-preview-64015-02\" (#11173)"},{"Id":"434010689","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:52","Actor":"dotnet-bot","Number":"11178","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11178","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11178)"},{"Id":"434010674","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:49","Actor":"dotnet-bot","Number":"11177","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11177","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11177)"},{"Id":"434010646","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:44","Actor":"dotnet-bot","Number":"11176","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11176","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11176)"},{"Id":"434010630","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:42","Actor":"dotnet-bot","Number":"11175","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11175","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11175)"},{"Id":"434010613","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:39","Actor":"dotnet-bot","Number":"11174","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11174","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11174)"},{"Id":"433943551","IsPullRequest":true,"CreatedAt":"2019-04-16T21:44:37","Actor":"peterhuene","Number":"11172","RawContent":null,"Title":"Update branding to 2.2.204.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11172","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.204.\" (#11172)"},{"Id":"433492357","IsPullRequest":true,"CreatedAt":"2019-04-16T21:26:26","Actor":"nguerrera","Number":"11161","RawContent":null,"Title":"dotnet/sdk 2.2.300-preview-64015-01","State":"closed","Body":"Insert dotnet/sdk latest release/2.2.3xx, with nuget version matching latest in dotnet/cli release/2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11161","RelatedDescription":"Closed or merged PR \"dotnet/sdk 2.2.300-preview-64015-01\" (#11161)"},{"Id":"433943349","IsPullRequest":true,"CreatedAt":"2019-04-16T21:15:30","Actor":"peterhuene","Number":"11171","RawContent":null,"Title":"Update branding to 2.2.107.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11171","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.107.\" (#11171)"},{"Id":"433943140","IsPullRequest":true,"CreatedAt":"2019-04-16T21:12:02","Actor":"peterhuene","Number":"11170","RawContent":null,"Title":"Update branding to 2.1.604.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11170","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.604.\" (#11170)"},{"Id":"433942911","IsPullRequest":true,"CreatedAt":"2019-04-16T20:59:50","Actor":"peterhuene","Number":"11169","RawContent":null,"Title":"Update branding to 2.1.507.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11169","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.507.\" (#11169)"},{"Id":"433456916","IsPullRequest":true,"CreatedAt":"2019-04-16T19:56:08","Actor":"nguerrera","Number":"11159","RawContent":null,"Title":"Roslyn 3.1.0-beta2-19211-01 (2.1.7xx)","State":"closed","Body":"Inserting roslyn matching 16.1 p2 into 2.1.7xx CLI","Url":"https://github.com/dotnet/cli/pull/11159","RelatedDescription":"Closed or merged PR \"Roslyn 3.1.0-beta2-19211-01 (2.1.7xx)\" (#11159)"},{"Id":"433458322","IsPullRequest":true,"CreatedAt":"2019-04-16T19:55:45","Actor":"nguerrera","Number":"11160","RawContent":null,"Title":"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)","State":"closed","Body":"Insert Roslyn matching 16.1 p2 into CLI 2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11160","RelatedDescription":"Closed or merged PR \"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)\" (#11160)"},{"Id":"433654118","IsPullRequest":false,"CreatedAt":"2019-04-16T17:49:35","Actor":"chrisfcarroll","Number":"11163","RawContent":null,"Title":"dotnet pack for web projects not only does nothing, it gives no explanation as to why","State":"closed","Body":"## Steps to reproduce\r\n1. dotnet pack a web project. For instance, your deployment pipeline may go via a nuget feed.\r\n2. Note the complete absence of output **and** the complete absence of any explanation for the lack of output.\r\n3. Spend a couple of hours failing to find the warning – buried at the bottom of https://docs.microsoft.com/en-gb/dotnet/core/tools/dotnet-pack – that this won't work by design.\r\nhttps://github.com/dotnet/docs/issues/11847#issuecomment-483421470\r\n\r\nFor the love of all that is counter-intuitive, why would you invent this “feature”?\r\n\r\nthankyou for your kind consideration of this frustration :-)\r\n\r\n## Expected  behavior\r\nThat `dotnet pack` does the 'obvious' thing in all cases, i.e. packs the project. OR, explains that \"dotnet pack is inappropriate for a web project because _\"\r\n\r\n## Actual behavior\r\nNothing happens *and there is no explanation as to why*\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.105\r\n Commit:  7cecb35b92","Url":"https://github.com/dotnet/cli/issues/11163","RelatedDescription":"Closed issue \"dotnet pack for web projects not only does nothing, it gives no explanation as to why\" (#11163)"},{"Id":"433774586","IsPullRequest":false,"CreatedAt":"2019-04-16T13:16:45","Actor":"PDostalek","Number":"11168","RawContent":null,"Title":"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\n\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question to Core team.\r\n\r\nCould you help please? Thanks!**\r\n\r\nSource:\r\nRoll forward on no candidate framework (0=off, 1=roll minor, 2=roll major & minor).\r\n\r\nFile Name:\r\ndotnet\\commands\\dotnet-help\\xlf\\LocalizableStrings.xlf\r\n\r\nResource ID:\r\n0; \"RollForwardOnNoCandidateFxDefinition\"\r\n\r\nQuery:\r\nPlease define the meaning of \"no candidate framework\".","Url":"https://github.com/dotnet/cli/issues/11168","RelatedDescription":"Open issue \"[loc][Query][dotnet_cli] Localizability of string: 0; \"RollForwardOnNoCandidateFxDefinition\"\" (#11168)"},{"Id":"433767575","IsPullRequest":false,"CreatedAt":"2019-04-16T13:01:44","Actor":"ViktorHofer","Number":"11167","RawContent":null,"Title":"dotnet tool restore is missing a --tool-path option to support CI helix scenarios","State":"open","Body":"We recently switched to .NET Core SDK 3.0.0-preview3 in **corefx** and want to make use of the new repo tools feature. As we test with helix we need to be able to restore the tools upfront **from the tool’s manifest**, archive them and submit the archive as a helix payload.\r\n\r\nThe dotnet-tools.json contains all the necessary information but I’m missing a `--tool-path` option in `dotnet tool restore`. If we can’t restore from the manifest to a certain location then this solution can’t be used which would be unfortunate.\r\n\r\ncc @ericstj @safern @wli3 ","Url":"https://github.com/dotnet/cli/issues/11167","RelatedDescription":"Open issue \"dotnet tool restore is missing a --tool-path option to support CI helix scenarios\" (#11167)"},{"Id":"433743378","IsPullRequest":true,"CreatedAt":"2019-04-16T12:06:19","Actor":"dotnet-maestro[bot]","Number":"11166","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190415.3\r\n- **Date Produced**: 4/16/2019 6:53 AM\r\n- **Commit**: 8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19215.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11166","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11166)"},{"Id":"433743215","IsPullRequest":true,"CreatedAt":"2019-04-16T12:05:55","Actor":"dotnet-maestro[bot]","Number":"11165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11165","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11165)"},{"Id":"433662786","IsPullRequest":false,"CreatedAt":"2019-04-16T09:00:12","Actor":"LightVolk","Number":"11164","RawContent":null,"Title":"Why visual studio publish empty app.runtimeconfig.json?","State":"open","Body":"Why visual studio publish empty app.runtimeconfig.json?\r\n\r\n## Steps to reproduce\r\n```\r\nPublish .net core app 2.2 project.\r\nProfile Settings:\r\n\r\nConfiguration: Release|x64\r\nTargetFramework: netcoreapp2.2\r\nDeployment Mode:Self-contained\r\nTargetRuntime:win-x64\r\n```\r\n\r\n## Expected  behavior\r\n\r\napp.runtimeconfig:\r\n\r\n`{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.2\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.2.0\"\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n## Actual behavior\r\n```\r\n{\r\n  \"runtimeOptions\": {}\r\n}\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nЏ ЄҐв SDK ¤«п .NET Core (®ва ¦ ойЁ© «оЎ®© global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\n‘аҐ¤  ўлЇ®«­Ґ­Ёп:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n.csproj:\r\n\r\n   ```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <Import Project=\"../../../../.build/build.props\"></Import>\r\n\r\n  <PropertyGroup Label=\"Globals\">\r\n    <SccProjectName>SAK</SccProjectName>\r\n    <SccProvider>SAK</SccProvider>\r\n    <SccAuxPath>SAK</SccAuxPath>\r\n    <SccLocalPath>SAK</SccLocalPath>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <ApplicationIcon />\r\n    <StartupObject>MyService.Program</StartupObject>\r\n    <LangVersion>7.1</LangVersion>\r\n    <Description>MyService</Description>\r\n    <AssemblyName>MyService</AssemblyName>\r\n    <ApplicationIcon />\r\n    <FileVersion>1.0.0.$(BuildNumber)</FileVersion>\r\n    <AssemblyVersion>$(FileVersion)</AssemblyVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"System.ServiceProcess.ServiceController\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\My\\Monitel.My.csproj\" />\r\n  </ItemGroup>      \r\n</Project>\r\n```\r\n\r\n\r\nSo, if i change deploy to FrameworkDependent -it generated valid app.runtimeconfig.json.\r\n\r\nBut, if i deploy and run Self-Contained - it generated empty parameters and i can not run exe file!\r\nIt says, that needs `hostpolicy`  dll.Why?\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11164","RelatedDescription":"Open issue \"Why visual studio publish empty app.runtimeconfig.json?\" (#11164)"},{"Id":"433495962","IsPullRequest":false,"CreatedAt":"2019-04-15T21:57:37","Actor":"joshfree","Number":"11162","RawContent":null,"Title":"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'","State":"open","Body":"**_Moved from original issue by @jamesBrosnahan at  https://github.com/dotnet/core/issues/2587_**  :\r\n\r\n\r\n\r\nProblem encountered on https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create\r\nOperating System: Linux Ubuntu 18.04 - x64\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.\r\n\r\nTypo using command outputs excessive information:\r\ndotnet new consle -o myApp\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: consle.\r\n\r\nTemplates                                         Short Name         Language          Tags                                 \r\n----------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console            [C#], F#, VB      Common/Console                       \r\nClass library                                     classlib           [C#], F#, VB      Common/Library                       \r\nUnit Test Project                                 mstest             [C#], F#, VB      Test/MSTest                          \r\nNUnit 3 Test Project                              nunit              [C#], F#, VB      Test/NUnit                           \r\nNUnit 3 Test Item                                 nunit-test         [C#], F#, VB      Test/NUnit                           \r\nxUnit Test Project                                xunit              [C#], F#, VB      Test/xUnit                           \r\nRazor Page                                        page               [C#]              Web/ASP.NET                          \r\nMVC ViewImports                                   viewimports        [C#]              Web/ASP.NET                          \r\nMVC ViewStart                                     viewstart          [C#]              Web/ASP.NET                          \r\nASP.NET Core Empty                                web                [C#], F#          Web/Empty                            \r\nASP.NET Core Web App (Model-View-Controller)      mvc                [C#], F#          Web/MVC                              \r\nASP.NET Core Web App                              webapp             [C#]              Web/MVC/Razor Pages                  \r\nASP.NET Core with Angular                         angular            [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js                        react              [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js and Redux              reactredux         [C#]              Web/MVC/SPA                          \r\nRazor Class Library                               razorclasslib      [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi             [C#], F#          Web/WebAPI                           \r\nglobal.json file                                  globaljson                           Config                               \r\nNuGet Config                                      nugetconfig                          Config                               \r\nWeb Config                                        webconfig                            Config                               \r\nSolution File                                     sln                                  Solution                             \r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new mstest \r\n    dotnet new --help\r\n```\r\nThe dotnet command should do error checking prior to outputting a welcome message and then use a 'Did you mean' algorithm to determine if the template in the command is a typo or has not been installed; then prompt the user with a group of candidate templates or offer to download templates from the .NET Foundation if available.","Url":"https://github.com/dotnet/cli/issues/11162","RelatedDescription":"Open issue \"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'\" (#11162)"},{"Id":"433245182","IsPullRequest":true,"CreatedAt":"2019-04-15T20:13:53","Actor":"dotnet-maestro[bot]","Number":"11155","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190414.1\r\n- **Date Produced**: 4/14/2019 3:06 PM\r\n- **Commit**: fe57a1c3888750e1656da45d36235b14d6c5aa28\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19214.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11155","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11155)"},{"Id":"433410073","IsPullRequest":true,"CreatedAt":"2019-04-15T20:11:28","Actor":"rainersigwald","Number":"11158","RawContent":null,"Title":"MSBuild 16.1.59 (2.2.3xx)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11158","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.59 (2.2.3xx)\" (#11158)"},{"Id":"433408848","IsPullRequest":true,"CreatedAt":"2019-04-15T20:11:03","Actor":"rainersigwald","Number":"11156","RawContent":null,"Title":"MSBuild 16.1.59 (2.1.7xx)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11156","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.59 (2.1.7xx)\" (#11156)"},{"Id":"433409336","IsPullRequest":false,"CreatedAt":"2019-04-15T18:01:15","Actor":"wli3","Number":"11157","RawContent":null,"Title":"Remove apphost template when apphosts are bundled","State":"open","Body":"original change is here https://github.com/dotnet/cli/pull/8893/files#diff-0805a49c9b784cecb879590476022506R1\r\n\r\nSince we will bundle all apphosts, this apphost template for global tools is no longer needed","Url":"https://github.com/dotnet/cli/issues/11157","RelatedDescription":"Open issue \"Remove apphost template when apphosts are bundled\" (#11157)"},{"Id":"433245011","IsPullRequest":true,"CreatedAt":"2019-04-15T12:40:51","Actor":"dotnet-maestro[bot]","Number":"11154","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11154","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11154)"},{"Id":"432984517","IsPullRequest":true,"CreatedAt":"2019-04-14T14:29:04","Actor":"am11","Number":"11153","RawContent":null,"Title":"Update manpages with dotnet/docs master branch","State":"open","Body":"This PR updates manpages for .NET Core using latest pandoc on Debian 9; following the instructions described here: https://github.com/dotnet/cli/tree/2995f33f/Documentation/manpages/tool#ubuntu-example-from-scratch.\r\n\r\n@nguerrera, @mmitche, can it be plugged into the CI pipeline? One clean approach would be to mount a volume on prebuilt docker container, with required pandoc version and other dependencies installed, run it in CI job and push a commit to PR with `dotnet-mastero` as author. Here is a similar example of this idea in action: https://github.com/maxmind/GeoIP2-dotnet/blob/master/Makefile#L6-L27.","Url":"https://github.com/dotnet/cli/pull/11153","RelatedDescription":"Open PR \"Update manpages with dotnet/docs master branch\" (#11153)"},{"Id":"432966508","IsPullRequest":true,"CreatedAt":"2019-04-14T12:40:08","Actor":"dotnet-maestro[bot]","Number":"11152","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11152)"},{"Id":"432948475","IsPullRequest":false,"CreatedAt":"2019-04-14T10:51:59","Actor":"mattiasw2","Number":"11151","RawContent":null,"Title":"How to disable \"System.GC.Server\" ?","State":"closed","Body":"I want to disable the server GC, since it isn't aggressive enough and ends up using 100% of the 512 Mb the machine has. The application is a small kestrel apps, reads blobs up to size 300kb, and most likely the large object heap is the reason.\r\n\r\nHowever,  `` \"System.GC.Server\": false, ``  is ignored, how to I change that value?\r\n\r\nI created a file called runtimeconfig.template.json and put it on the root\r\n\r\n```\r\n{\r\n  \"configProperties\": {\r\n    \"System.GC.Server\": false,\r\n    \"foobar\":  true \r\n  }\r\n}\r\n```\r\n\r\nI added the foobar stuff to make sure the template is used.\r\n\r\nHowever, the resulting <prject>.runtimeconfig.json in the published folder is\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"2.1.1\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true,\r\n      \"foobar\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11151","RelatedDescription":"Closed issue \"How to disable \"System.GC.Server\" ?\" (#11151)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-16T00:34:16","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"Please Make AsnReader And AnsWriter Public","State":"open","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Open issue \"Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-13T07:42:03","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"open","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Open issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"429978073","IsPullRequest":true,"CreatedAt":"2019-04-09T16:30:37","Actor":"JohnTortugo","Number":"1126","RawContent":null,"Title":"Onboard on async publishing","State":"closed","Body":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241","Url":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Closed or merged PR \"Onboard on async publishing\" (#1126)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"},{"Id":"430137273","IsPullRequest":true,"CreatedAt":"2019-04-07T12:13:36","Actor":"dotnet-maestro[bot]","Number":"1129","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1129)"},{"Id":"429990573","IsPullRequest":false,"CreatedAt":"2019-04-07T05:49:47","Actor":"benneyman","Number":"1127","RawContent":null,"Title":"[Help] Targeting netstandard2.0 for a class library","State":"closed","Body":"After a lot of googling I came to realize that my existing class library(net462) should be targeting netstandard2.0 to be able to reference into my react app (dotnet new react) which targets netcoreapp2.1.\r\n\r\nI am not sure how to make my class library to target netstandard2.0 from Visual Studio 2013. From the extensive googling I did I know we need VS 2017 (15.3) to do this. I do not have access to VS 2017.\r\n\r\nI feel there could be other ways of doing this without having to have VS2017 from the googling I did. But I can't any concrete solutions.\r\n\r\nCould you please guide me on how to target a class library to netstandard2.0 from Visual Studio 2013 or using CLI tools so that I will be able to add a project reference to my react project.","Url":"https://github.com/dotnet/standard/issues/1127","RelatedDescription":"Closed issue \"[Help] Targeting netstandard2.0 for a class library\" (#1127)"},{"Id":"430027157","IsPullRequest":true,"CreatedAt":"2019-04-06T12:13:34","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"429720581","IsPullRequest":true,"CreatedAt":"2019-04-05T12:11:02","Actor":"dotnet-maestro[bot]","Number":"1125","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1125)"},{"Id":"429609384","IsPullRequest":false,"CreatedAt":"2019-04-05T07:06:16","Actor":"Jacksiro","Number":"1124","RawContent":null,"Title":"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'","State":"closed","Body":"I am using VS 2017 Community and have targeted .Net v4.5 in my app. My app throws the error of \r\n\r\n```\r\n\r\n> See the end of this message for details on invoking \r\n> just-in-time (JIT) debugging instead of this dialog box.\r\n> \r\n> ************** Exception Text **************\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\r\n> File name: 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n>    at EasyTabs.TitleBarTabs.SetFrameSize()\r\n>    at EasyTabs.TitleBarTabs.OnSizeChanged(EventArgs e)\r\n>    at System.Windows.Forms.Control.UpdateBounds(Int32 x, Int32 y, Int32 width, Int32 height, Int32 clientWidth, Int32 clientHeight)\r\n>    at System.Windows.Forms.Control.UpdateBounds()\r\n>    at System.Windows.Forms.Control.WndProc(Message& m)\r\n>    at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n>    at System.Windows.Forms.Form.WndProc(Message& m)\r\n>    at EasyTabs.TitleBarTabs.WndProc(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n>    at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n> \r\n> WRN: Assembly binding logging is turned OFF.\r\n> To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\n> Note: There is some performance penalty associated with assembly bind failure logging.\r\n> To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n> \r\n> \r\n> \r\n> ************** Loaded Assemblies **************\r\n> mscorlib\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll\r\n> ----------------------------------------\r\n> vSongBook\r\n>     Assembly Version: 2.3.5.2\r\n>     Win32 Version: 2.3.5.2\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/vSongBook.exe\r\n> ----------------------------------------\r\n> System.Windows.Forms\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll\r\n> ----------------------------------------\r\n> System\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll\r\n> ----------------------------------------\r\n> System.Drawing\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll\r\n> ----------------------------------------\r\n> JacksiroCtrl\r\n>     Assembly Version: 1.2.5.0\r\n>     Win32 Version: 1.2.5.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/JacksiroCtrl.DLL\r\n> ----------------------------------------\r\n> SQLite.NET\r\n>     Assembly Version: 0.21.1869.3794\r\n>     Win32 Version: 0.21.1869.3794\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/SQLite.NET.DLL\r\n> ----------------------------------------\r\n> System.Data\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.Data/v4.0_4.0.0.0__b77a5c561934e089/System.Data.dll\r\n> ----------------------------------------\r\n> System.Core\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll\r\n> ----------------------------------------\r\n> System.Xml\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll\r\n> ----------------------------------------\r\n> EasyTabs\r\n>     Assembly Version: 1.3.3.0\r\n>     Win32 Version: 1.3.3.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/EasyTabs.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Uxtheme\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Uxtheme.DLL\r\n> ----------------------------------------\r\n> Win32Interop.User32\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.User32.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Dwmapi\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Dwmapi.DLL\r\n> ----------------------------------------\r\n> \r\n> ************** JIT Debugging **************\r\n> To enable just-in-time (JIT) debugging, the .config file for this\r\n> application or computer (machine.config) must have the\r\n> jitDebugging value set in the system.windows.forms section.\r\n> The application must also be compiled with debugging\r\n> enabled.\r\n> \r\n> For example:\r\n> \r\n> <configuration>\r\n>     <system.windows.forms jitDebugging=\"true\" />\r\n> </configuration>\r\n> \r\n> When JIT debugging is enabled, any unhandled exception\r\n> will be sent to the JIT debugger registered on the computer\r\n> rather than be handled by this dialog box.\r\n\r\n```\r\n\r\nKIndly advice me on the on how to resolve this issue","Url":"https://github.com/dotnet/standard/issues/1124","RelatedDescription":"Closed issue \"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'\" (#1124)"},{"Id":"429582381","IsPullRequest":false,"CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Number":"1123","RawContent":null,"Title":"phantom connection when mixing async & blocking calls on TcpClient ","State":"open","Body":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Open issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123)"},{"Id":"429333028","IsPullRequest":false,"CreatedAt":"2019-04-04T15:07:55","Actor":"Korporal","Number":"1122","RawContent":null,"Title":"The end of .NET Framework support?","State":"open","Body":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Open issue \"The end of .NET Framework support?\" (#1122)"},{"Id":"429240376","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1121","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1121)"},{"Id":"429232379","IsPullRequest":false,"CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Number":"1120","RawContent":null,"Title":"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0","State":"open","Body":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary.","Url":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Open issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"434094472","IsPullRequest":true,"CreatedAt":"2019-04-17T05:10:40","Actor":"cston","Number":"36951","RawContent":null,"Title":"Port StringType","State":"open","Body":"Port `StringType` from reference source.","Url":"https://github.com/dotnet/corefx/pull/36951","RelatedDescription":"Open PR \"Port StringType\" (#36951)"},{"Id":"434091880","IsPullRequest":true,"CreatedAt":"2019-04-17T04:56:49","Actor":"safern","Number":"36950","RawContent":null,"Title":"Fix StackTrace.ToString with null frame test","State":"open","Body":"Update test to react to change to avoid a NullReferenceException when passing down a null `StrackFrame`\r\n\r\nDepends on: https://github.com/dotnet/coreclr/pull/23762\r\n\r\nWe will need to cherry-pick this whenever the coreclr update PR contains the above PR.","Url":"https://github.com/dotnet/corefx/pull/36950","RelatedDescription":"Open PR \"Fix StackTrace.ToString with null frame test\" (#36950)"},{"Id":"433866831","IsPullRequest":true,"CreatedAt":"2019-04-17T04:47:16","Actor":"MichalStrehovsky","Number":"36924","RawContent":null,"Title":"Run IBCMerge on Linux build","State":"closed","Body":"This reverts commit 8e843314e1dbd3b3f26abb1f285349be8920cce4.","Url":"https://github.com/dotnet/corefx/pull/36924","RelatedDescription":"Closed or merged PR \"Run IBCMerge on Linux build\" (#36924)"},{"Id":"434082038","IsPullRequest":false,"CreatedAt":"2019-04-17T04:04:12","Actor":"ericstj","Number":"36949","RawContent":null,"Title":"ImageConverter fails with PlatformNotSupported about X509Certificate2UI","State":"open","Body":"When using ImageConverter on Linux I see this:\r\n```\r\nSystem.PlatformNotSupportedException : X509Certificate2UI is not supported on this platform.\r\n```\r\n\r\nAt the very least we need to fix this exception message.  It'd also be nice if we actually supported these converters on linux: I don't think they rely on Windows functionality.  I think we put them in this assembly because WinForms needed them and we didn't want to put them in TypeConverter and pull Drawing.Common into the shared framework.  @safern did we consider putting these in Drawing.Common?  /cc @Anipik ","Url":"https://github.com/dotnet/corefx/issues/36949","RelatedDescription":"Open issue \"ImageConverter fails with PlatformNotSupported about X509Certificate2UI\" (#36949)"},{"Id":"434054113","IsPullRequest":false,"CreatedAt":"2019-04-17T04:00:44","Actor":"dotnet-mc-bot","Number":"36947","RawContent":null,"Title":"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)","State":"closed","Body":"Opened on behalf of @AriNuer\n\nThe test `System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\\r\nExpected: 2.0\\r\nActual:   1.1\n```\n\nStack Trace:\n```\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest.SendAsync_RequestVersion20_ResponseVersion20(Uri server) in F:\\workspace\\_work\\1\\s\\src\\System.Net.Http\\tests\\FunctionalTests\\HttpClientHandlerTest.cs:line 2544\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190416.9 (Core Tests)\nFailing configurations:\n- Windows.10.Nano.Amd64-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n- Windows.10.Amd64.Core-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.Core-x86\n  - Release\n- Windows.10.Arm64-arm64\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190416.9/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FSendAsync_RequestVersion20_ResponseVersion20(server:%20https:~2F~2Fwww.microsoft.com~2F)","Url":"https://github.com/dotnet/corefx/issues/36947","RelatedDescription":"Closed issue \"Test failure: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest/SendAsync_RequestVersion20_ResponseVersion20(server: https://www.microsoft.com/)\" (#36947)"},{"Id":"434047284","IsPullRequest":true,"CreatedAt":"2019-04-17T04:00:27","Actor":"wfurt","Number":"36945","RawContent":null,"Title":"fix tests with http/2","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/36945","RelatedDescription":"Closed or merged PR \"fix tests with http/2\" (#36945)"},{"Id":"434056838","IsPullRequest":false,"CreatedAt":"2019-04-17T01:55:29","Actor":"stephentoub","Number":"36948","RawContent":null,"Title":"PRs failing with \"No such host is known\" when downloading Microsoft.TargetingPack.Private.WinRT","State":"open","Body":"PRs are failing with\r\n```\r\nD:\\a\\1\\s\\.dotnet\\sdk\\3.0.100-preview3-010431\\NuGet.targets(119,5): error : Failed to retrieve information about 'Microsoft.TargetingPack.Private.WinRT' from remote source 'https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.targetingpack.private.winrt/index.json'. [D:\\a\\1\\s\\external\\winrt\\winrt.depproj]\r\nD:\\a\\1\\s\\.dotnet\\sdk\\3.0.100-preview3-010431\\NuGet.targets(119,5): error :   No such host is known. [D:\\a\\1\\s\\external\\winrt\\winrt.depproj]\r\n```\r\ncc: @ViktorHofer, @danmosemsft ","Url":"https://github.com/dotnet/corefx/issues/36948","RelatedDescription":"Open issue \"PRs failing with \"No such host is known\" when downloading Microsoft.TargetingPack.Private.WinRT\" (#36948)"},{"Id":"434054074","IsPullRequest":true,"CreatedAt":"2019-04-17T01:42:18","Actor":"stephentoub","Number":"36946","RawContent":null,"Title":"Fix SocketsHttpHandler streams to do sync I/O in sync methods","State":"open","Body":"SocketsHttpHandler hands back response Streams for reading response body content.  While we encourage developers to use the async Stream APIs, Stream does expose synchronous APIs, yet the current implementations are just wrapping the async ones and doing sync-over-async.\r\n\r\nThis fixes the response stream synchronous APIs to be sync down to the underlying networking stream.\r\n\r\nIt also fixes a couple other minor issues, e.g. Flush{Async} on read-only stream should be nops rather than throwing, we should include an error message about a stream being read-only when trying to write to it, etc.\r\n\r\ncc: @davidsh, @wfurt, @karelz","Url":"https://github.com/dotnet/corefx/pull/36946","RelatedDescription":"Open PR \"Fix SocketsHttpHandler streams to do sync I/O in sync methods\" (#36946)"},{"Id":"433991158","IsPullRequest":true,"CreatedAt":"2019-04-17T00:40:31","Actor":"ViktorHofer","Number":"36938","RawContent":null,"Title":"Update testdata versions","State":"closed","Body":"We uploaded new versions of all the test data packages to reset the versioning schema. The new package versions don't contain any changes except System.Drawing.Common.TestData (cc @Anipik)","Url":"https://github.com/dotnet/corefx/pull/36938","RelatedDescription":"Closed or merged PR \"Update testdata versions\" (#36938)"},{"Id":"434025984","IsPullRequest":true,"CreatedAt":"2019-04-17T00:29:25","Actor":"safern","Number":"36943","RawContent":null,"Title":"[master] Update dependencies from arcade build 20190416.2","State":"closed","Body":"Update arcade to pull GenApi readonly members support\r\n\r\ncc: @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/36943","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from arcade build 20190416.2\" (#36943)"},{"Id":"434037745","IsPullRequest":true,"CreatedAt":"2019-04-17T00:16:34","Actor":"am11","Number":"36944","RawContent":null,"Title":"Use NativeLibrary.[Try]Load for netcoreapp3","State":"open","Body":"Follow up on #35548\r\nContributes to: #24538\r\n\r\nFreeBSD has `dlopen` in libc, instead of `libdl`. By switching to `NativeLibrary` load methods in .NET Core 3, we can abstract this disparity at call-sites.","Url":"https://github.com/dotnet/corefx/pull/36944","RelatedDescription":"Open PR \"Use NativeLibrary.[Try]Load for netcoreapp3\" (#36944)"},{"Id":"433890315","IsPullRequest":true,"CreatedAt":"2019-04-17T00:15:31","Actor":"davidsh","Number":"36928","RawContent":null,"Title":"Fix ClientWebSocket close handshake when using proxy","State":"closed","Body":"When the client websocket was going through a proxy, it would sometimes transition to the\r\n'Aborted' state and not the 'Closed' state after a successful closing handshake.\r\n\r\nI first opened this bug a year ago but finally was able to get back to it and root cause the\r\nproblem. The problem only occured with the managed websocket. The .NET Framework did not have\r\nthis problem. And some proxies didn't cause a problem with managed websocket (such as Fiddler).\r\n\r\nThe root cause is a misinterpretation of RFC 6455, Section 7.1.1. This describes the behavior\r\nof how the websocket's TCP connection should be closed. The most graceful way is to wait for\r\nthe server to initiate the close of the socket. In cases where it is taking too long to wait\r\nfor the server to start the TCP close, then the client can start the TCP close of the socket.\r\n\r\nBut no matter how the socket is finally closed, the websocket state should transition to 'Closed'\r\nas soon as a valid closing handshake was performed (i.e. close frames both sent and received).\r\nAnd this occurs before any logic for closing the TCP connection.\r\n\r\nThe code in managed websocket has a timer to wait 1 second for the server to start a close. If\r\nthe timer finishes, then the managed websocket calls an Abort() method to close the socket. This\r\nends up transitioning the websocket to an 'Aborted' state which is incorrect. The state should\r\nonly be moved to the 'Aborted' state if a closing handshake was not completed.\r\n\r\nI added a new test to support this change and moved the LoopbackProxyServer code to Common.\r\n\r\nFixes #28027","Url":"https://github.com/dotnet/corefx/pull/36928","RelatedDescription":"Closed or merged PR \"Fix ClientWebSocket close handshake when using proxy\" (#36928)"},{"Id":"433943993","IsPullRequest":true,"CreatedAt":"2019-04-16T23:06:40","Actor":"ericstj","Number":"36934","RawContent":null,"Title":"Fix VB.Core SLN configurations","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/36934","RelatedDescription":"Closed or merged PR \"Fix VB.Core SLN configurations\" (#36934)"},{"Id":"434006886","IsPullRequest":false,"CreatedAt":"2019-04-16T23:01:25","Actor":"pianoman4873","Number":"36941","RawContent":null,"Title":"parallel foreach strange behavior","State":"closed","Body":"I've code the runs more or less the following construct - \r\nand when ParallelRunner gets the delegate function testFunc it hangs , \r\nHowever if instead of providing a delegate I write the function explicitly inside the ParallelRunner method it works fine.\r\n\r\nNote that this exact test method works, but a very similar code running under IIS ( in a background thread ) fails , and once I remove the testFunc delegate and explicitly write its code in ParallelRunner  , or even call TestCondition directly ( without a delegate ) it works fine.\r\n\r\nAny idea what could cause this strange behavior ?\r\n\r\n\r\n\r\n```\r\n       interface I { }\r\n\r\n        class A : I { }\r\n        class B :I { }\r\n\r\n        [TestMethod]\r\n        public void TestParallelWithDelegate()\r\n        {\r\n            var list = new List<I>();\r\n            \r\n            for (int i = 0; i < 300000; i++)\r\n            {\r\n                if (i % 2 == 0)\r\n                {\r\n                    list.Add(new A());\r\n\r\n                }\r\n                else\r\n                {\r\n                    list.Add(new B());\r\n                }\r\n                \r\n\r\n            }\r\n\r\n            var bag = new ConcurrentBag<I>();\r\n\r\n            Func<I, bool> testFunc = TestCondition;\r\n            \r\n            ParallelRunner(list,bag,testFunc);\r\n\r\n            Console.WriteLine($\"terminated with delegate bag size = {bag.Count}\");\r\n\r\n        }\r\n        private static bool TestCondition(I i)\r\n        {\r\n            return !(i is A);\r\n        }\r\n\r\n\r\n        void ParallelRunner(List<I> list, ConcurrentBag<I> bag, Func<I,bool> testFunc = null)\r\n        {\r\n            Parallel.ForEach(list, new ParallelOptions { MaxDegreeOfParallelism = \r\n                                  Environment.ProcessorCount * 3 },\r\n                x =>\r\n                {\r\n                    if (testFunc == null || testFunc(x))\r\n                    {\r\n                        bag.Add(x);\r\n\r\n                    }\r\n                });\r\n\r\n        }\r\n```","Url":"https://github.com/dotnet/corefx/issues/36941","RelatedDescription":"Closed issue \"parallel foreach strange behavior\" (#36941)"},{"Id":"434019428","IsPullRequest":false,"CreatedAt":"2019-04-16T22:54:19","Actor":"SergeyKanzhelev","Number":"36942","RawContent":null,"Title":"Activity.Current should allow association with the active Asp.Net Core app","State":"open","Body":"There are scenarios when multiple apps are running in a single process. It may be service fabric hosting multiple ASP.NET apps or Azure Functions host tearing down and loading the new function.\r\n\r\nIn scenarios like this telemetry configuration is typically set up per app, not per host. Thus when DiagnosticsListener is created and listens for the Activity events - there is no way to react differently depending on on the current app settings.\r\n\r\nIdeally there should be some way to get to the app definition, or better of DI container from the `Activity.Current` or from some other package in `AsyncLocal`.\r\n\r\nSo it may be either `Activity` feature or the feature of DI in ASP.NET Core.\r\n\r\nCC: @davidfowl @lmolkova @glennc @anurse ","Url":"https://github.com/dotnet/corefx/issues/36942","RelatedDescription":"Open issue \"Activity.Current should allow association with the active Asp.Net Core app\" (#36942)"},{"Id":"434005109","IsPullRequest":true,"CreatedAt":"2019-04-16T22:02:31","Actor":"steveharter","Number":"36940","RawContent":null,"Title":"Add Json serializer property name related features","State":"open","Body":"Implements the approved API for these new features.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/36351\r\n\r\ncc @rynowak \r\n\r\ncc @GrabYourPitchforks please review the string comparisons. Note that if the case insensitivity feature is turned on, currently Turkish i will fail. However, I added a todo in the code and issue https://github.com/dotnet/corefx/issues/36939 to address.\r\n\r\ncc @layomia see the DictionaryKeyPolicy property for Dictionary when you add that support for IDictionary.","Url":"https://github.com/dotnet/corefx/pull/36940","RelatedDescription":"Open PR \"Add Json serializer property name related features\" (#36940)"},{"Id":"434003975","IsPullRequest":false,"CreatedAt":"2019-04-16T21:58:53","Actor":"steveharter","Number":"36939","RawContent":null,"Title":"Deserializer should use Dictionary for property name lookup when high property count or case insensitive","State":"open","Body":"This is a placeholder for a todo in JsonClassInfo.cs that states:\r\n```\r\n// Todo: on classes with many properties (about 50) we need to switch to a hashtable for performance. \r\n// Todo: when using PropertyNameCaseInsensitive we also need to use the hashtable with case-insensitive \r\n// comparison to handle Turkish etc. cultures properly.\r\n```\r\n\r\nThe case insensitive section relates to feature https://github.com/dotnet/corefx/issues/3635.\r\n","Url":"https://github.com/dotnet/corefx/issues/36939","RelatedDescription":"Open issue \"Deserializer should use Dictionary for property name lookup when high property count or case insensitive\" (#36939)"},{"Id":"433977450","IsPullRequest":true,"CreatedAt":"2019-04-16T21:24:35","Actor":"carlossanlop","Number":"36936","RawContent":null,"Title":"Update owners","State":"closed","Body":"Updating ownership in the System.Net area.","Url":"https://github.com/dotnet/corefx/pull/36936","RelatedDescription":"Closed or merged PR \"Update owners\" (#36936)"},{"Id":"433983275","IsPullRequest":true,"CreatedAt":"2019-04-16T21:01:29","Actor":"Anipik","Number":"36937","RawContent":null,"Title":"Adding default encoder as png for MemoryBmp","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/34771, https://github.com/dotnet/corefx/issues/36525\r\nThere is no encoder for the byte array which results in argument null exception.\r\nAdding the a default png encoder if we are not able to get the encoder from destination type. (similar to .net Framework)","Url":"https://github.com/dotnet/corefx/pull/36937","RelatedDescription":"Open PR \"Adding default encoder as png for MemoryBmp\" (#36937)"},{"Id":"433794684","IsPullRequest":true,"CreatedAt":"2019-04-16T21:01:20","Actor":"Dotnet-GitSync-Bot","Number":"36923","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corefx/pull/36923","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36923)"},{"Id":"433976817","IsPullRequest":true,"CreatedAt":"2019-04-16T20:45:25","Actor":"tannergooding","Number":"36935","RawContent":null,"Title":"Fixing the Min/Max and MinMagnitude/MaxMagnitude for System.Math and System.MathF to expect NaN propagation","State":"open","Body":"This resolves https://github.com/dotnet/corefx/issues/36931","Url":"https://github.com/dotnet/corefx/pull/36935","RelatedDescription":"Open PR \"Fixing the Min/Max and MinMagnitude/MaxMagnitude for System.Math and System.MathF to expect NaN propagation\" (#36935)"},{"Id":"433925454","IsPullRequest":true,"CreatedAt":"2019-04-16T18:45:14","Actor":"collinsauve","Number":"36933","RawContent":null,"Title":"add interface for HttpMessageInvoker.SendAsync","State":"closed","Body":"For https://github.com/dotnet/corefx/issues/36932","Url":"https://github.com/dotnet/corefx/pull/36933","RelatedDescription":"Closed or merged PR \"add interface for HttpMessageInvoker.SendAsync\" (#36933)"},{"Id":"433913445","IsPullRequest":false,"CreatedAt":"2019-04-16T18:01:51","Actor":"collinsauve","Number":"36932","RawContent":null,"Title":"Add interface for HttpMessageInvoker.SendAsync","State":"open","Body":"\r\n## Rationale and Usage\r\n\r\nThere is currently a lot of confusion / second-guessing in the community about how to properly handle the lifetimes of instances of `HttpClient`.  Should instances be shared? When should they be disposed?  \r\n\r\n[You're using httpclient wrong and it is destabilizing your software](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/)\r\n[Do HttpClient and HttpClientHandler have to be disposed?](https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed)\r\n[C#: HttpClient should NOT be disposed](https://medium.com/@nuno.caneco/c-httpclient-should-not-be-disposed-or-should-it-45d2a8f568bc)\r\n\r\n\r\nAdditionally the inclusion of mutable properties on `HttpClient` (eg `BaseAddress`, `DefaultRequestHeaders`) is problematic as it can discourage re-use within a code-base.  If clients are treated as singletons it is difficult to guarantee that one area of a code-base will not mess with a different area.  If you do indeed want to use these properties in order to simplify your code and apply transformations, you then cannot share that client with others.\r\n\r\nFor that reason, at our company we have [created immutable wrapper classes](https://github.com/NudgeSoftware/Nudge.Clients/blob/master/src/Http/IHttpClient.cs) around `HttpClient` that only expose the action methods themselves and do not expose the mutable properties and `Dispose` methods.  You can then use a fluent interface using extension methods to [progressively apply transformations](https://github.com/NudgeSoftware/Nudge.Clients/blob/master/src/Http/HttpClientWithExtensions.cs) on top of clients that will not affect the original client.\r\n\r\n## Proposed API\r\n\r\nI would to request that an interface for [HttpMessageInvoker.SendAsync](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpMessageInvoker.cs#L40) be added so that we can re-implement the invoker in a standard way:\r\n\r\n```\r\npublic interface IHttpMessageInvoker\r\n{\r\n    Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);\r\n}\r\n```\r\n\r\nSee [TransformingHttpClient](https://github.com/NudgeSoftware/Nudge.Clients/blob/master/src/Http/TransformingHttpClient.cs) for a concrete implementer of this interface that allows any conceivable transformation.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36932","RelatedDescription":"Open issue \"Add interface for HttpMessageInvoker.SendAsync\" (#36932)"},{"Id":"433912617","IsPullRequest":false,"CreatedAt":"2019-04-16T17:59:42","Actor":"tannergooding","Number":"36931","RawContent":null,"Title":"Revert Math.Max and Math.Min to propagate NaN","State":"open","Body":"# Rationale\r\n\r\ndotnet/coreclr#20912 updated the existing `Math.Min`/`Math.Max` functions to be both IEEE 754:2008 compliant and to be inline with the C/C++ language standard (`Annex F - IEC 60559 floating-point arithmetic`). This also brought it inline with MSVC, GCC, and Clang for their implementations under 'precise' floating-point mode.\r\n\r\nHowever, it looks like the draft for IEEE 754:2019 (a summary can be found here http://754r.ucbtest.org/background/, but I also have the latest draft locally) is changing things up a bit. Namely, they are removing `minNum`/`maxNum` from the list of \"required\" operations and replacing them with new `minimum`/`maximum` and `minimumNumber`/`maximumNumber` operations which are recommended by not required and which more clearly specify various behaviors.\r\n* `minimumNumber`/`maximumNumber` are largely compatible with the existing `minNum`/`maxNum` functions. But also clarifies that `+0` is greater than `-0` for the purpose of this function and clarifies the behavior of signalling NaN.\r\n* `minimum`/`maximum` are new and would propagate the `NaN` as expected here. They likewise clarify that `+0` is greater than `-0` for the purpose of this function.\r\n\r\n# Proposal\r\n\r\nGiven this change of behavior in the new spec and that partners, such as WPF, are dependent on the existing functionality. We should revert the behavior to continue propagating the NaN.\r\n\r\n# Notes\r\n\r\nA separate proposal to expose methods which don't propagate the NaN is here: https://github.com/dotnet/corefx/issues/36925\r\n\r\nWe should keep the change that treats `+0` as greater than `-0` for the purposes of these functions. This ensures that there won't need to be future changes to the functions for IEEE 754:2019 compliance and makes the behavior deterministic regardless of whether you do `Math.Min(-0.0, +0.0)` or `Math.Min(+0.0, -0.0)`.","Url":"https://github.com/dotnet/corefx/issues/36931","RelatedDescription":"Open issue \"Revert Math.Max and Math.Min to propagate NaN\" (#36931)"},{"Id":"433905790","IsPullRequest":true,"CreatedAt":"2019-04-16T17:43:10","Actor":"danmosemsft","Number":"36930","RawContent":null,"Title":"Duplicate of https://github.com/dotnet/corefx/pull/36911/files","State":"open","Body":"dupe of https://github.com/dotnet/corefx/pull/36911/files to do parallel CI .\r\n\r\n@jkoritzinsky @RussKeldorph @jeffschwMSFT ","Url":"https://github.com/dotnet/corefx/pull/36930","RelatedDescription":"Open PR \"Duplicate of https://github.com/dotnet/corefx/pull/36911/files\" (#36930)"},{"Id":"433903448","IsPullRequest":false,"CreatedAt":"2019-04-16T17:37:20","Actor":"idg10","Number":"36929","RawContent":null,"Title":"System.Xml.Resolvers.XmlPreloadedResolver does not support XmlKnownDtds and fails with surprising error","State":"open","Body":"In desktop .NET, the `XmlPreloadedResolver` offers some baked in DTDs, as listed in the `XmlKnownDtds` enumeration. If you construct a `new XmlPreloadedResolver(XmlKnownDtds.Xhtml10)`, it will be able to resolve DTDs with common ids such as `\"\"-//W3C//DTD XHTML 1.0 Strict//EN\";\"`. (In fact, this will make a family of related DTDs available. It makes it possible to parse XHTML documents. Without these DTDs, certain standard entities that are valid in XHTML but which are not standard XML entities, will cause failures during XML parsing.)\r\n\r\nHowever, in .NET core, these DTDs are not compiled in. See commit https://github.com/dotnet/corefx/commit/9a4b23992930abce2dceee5e10b35cfd38518a39 for where the relevant `<EmbeddedResource>` was commented out.\r\n\r\nIt seems that this wasn't a deliberate decision. The comment in the `.csproj` where the code embedding these DTDs was commented out indicates that the committer didn't know why they were being compiled in in the first place.\r\n\r\nIt may well be a reasonable choice not to embed these DTDs in .NET Core, because the space they take up might not be justified. (Maybe I'm the first person ever to try to read an XHTML document that contains standard XHTML entities that are not standard XML entites using `XmlReader` in .NET Core.) But if that is the case, the `XmlPreloadedResolver` should probably throw an exception (e.g., `NotSupportedException`) when you try to construct it in a way that asks it to make these well-known DTDs available.\r\n\r\nAs it is, it lets you construct it just fine, and then fails at the point where something first tries to resolve the relevant DTD. This makes it hard to work out what has gone on, because it's not at all obvious that the `XmlPreloadedResolver` simply doesn't support this particular use case in the same way that it always has done in desktop .NET. If it's not going to support the usage model you specify at construction, then it would be better for it to let you know that at construction.","Url":"https://github.com/dotnet/corefx/issues/36929","RelatedDescription":"Open issue \"System.Xml.Resolvers.XmlPreloadedResolver does not support XmlKnownDtds and fails with surprising error\" (#36929)"},{"Id":"433874834","IsPullRequest":true,"CreatedAt":"2019-04-16T16:29:44","Actor":"tarekgh","Number":"36927","RawContent":null,"Title":"Update the Index and Range interfaces and tests","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/36927","RelatedDescription":"Open PR \"Update the Index and Range interfaces and tests\" (#36927)"},{"Id":"433871043","IsPullRequest":true,"CreatedAt":"2019-04-16T16:21:13","Actor":"am11","Number":"36926","RawContent":null,"Title":"Improve System.Native build experience for new platforms","State":"open","Body":"1. From top-level script, we can pass (only*) one extra argument to `build-native.sh` via `BuildNativeClang` as MSBuild property; `/p:BuildNativeClang`. This PR renames it to `BuildNativeCompiler` so it doesn't look confusing when selecting GCC compiler: `corefx/build.sh /p:BuildNativeCompiler=-gcc`.\r\n2. When libssl devel package is not installed on the system, the default CMake's \"library not found\" message is unhelpful. This patch aligns the error handling of `NOT OPENSSL_FOUND` with those of KRB5 and CURL etc., so user knows which missing package to install.\r\n\r\n---\r\n\\* Currently there is no way to pass more than one arguments via `BuildNativeCompiler`, as they get stripped somewhere in `eng` directory in `corefx/build.sh -> ... -> corefx/src/Native/build-native.sh` call chain. For example, we cannot do:\r\n\r\n> ./build.sh /p:BuildNativeCompiler=\"cmakeargs -DSOME_CLR_PROPERTY=SomeValue cmakeargs -DCMAKE_C_FLAGS=-march=native\" release cross arm64\r\n\r\nbecause a pass-through script strips away the quotes.","Url":"https://github.com/dotnet/corefx/pull/36926","RelatedDescription":"Open PR \"Improve System.Native build experience for new platforms\" (#36926)"},{"Id":"433868571","IsPullRequest":false,"CreatedAt":"2019-04-16T16:15:30","Actor":"tannergooding","Number":"36925","RawContent":null,"Title":"Expose Math.MaxNumber and Math.MinNumber functions that don't propagate NaN","State":"open","Body":"# Rationale\r\n\r\ndotnet/coreclr#20912 updated the existing `Math.Min`/`Math.Max` functions to be both IEEE 754:2008 compliant and to be inline with the C/C++ language standard (`Annex F - IEC 60559 floating-point arithmetic`). This also brought it inline with MSVC, GCC, and Clang for their implementations under 'precise' floating-point mode.\r\n\r\nHowever, it looks like the draft for IEEE 754:2019 (a summary can be found here http://754r.ucbtest.org/background/, but I also have the latest draft locally) is changing things up a bit. Namely, they are removing `minNum`/`maxNum` from the list of \"required\" operations and replacing them with new `minimum`/`maximum` and `minimumNumber`/`maximumNumber` operations which are recommended by not required and which more clearly specify various behaviors.\r\n* `minimumNumber`/`maximumNumber` are largely compatible with the existing `minNum`/`maxNum` functions. But also clarifies that `+0` is greater than `-0` for the purpose of this function and clarifies the behavior of signalling NaN.\r\n* `minimum`/`maximum` are new and would propagate the `NaN` as expected here. They likewise clarify that `+0` is greater than `-0` for the purpose of this function.\r\n\r\n# Proposal\r\n\r\nGiven this change of behavior in the new spec, it might be desirable to revert `Math.Min`/`Math.Max` to continue propagating the `NaN` result. We could then expose new functions which do not propagate the `NaN` instead.\r\n\r\nThis would be, overall, a more compatible change and would still allow us to be IEEE compliant.\r\n\r\nSuch new APIs would be:\r\n```csharp\r\npublic static partial class Math\r\n{\r\n    public static double MaxNumber(double x, double y);\r\n    public static double MaxMagnitudeNumber(double x, double y);\r\n    public static double MinNumber(double x, double y);\r\n    public static double MinMagnitudeNumber(double x, double y);\r\n}\r\n\r\npublic static partial class MathF\r\n{\r\n    public static float MaxNumber(float x, float y);\r\n    public static float MaxMagnitudeNumber(float x, float y);\r\n    public static float MinNumber(float x, float y);\r\n    public static float MinMagnitudeNumber(float x, float y);\r\n}\r\n```\r\n\r\n# Notes\r\n\r\nWPF hit a bug due to the change in behavior: https://github.com/dotnet/wpf/issues/521\r\n\r\nWe have detected a perf regression due to the new behavior being more complex: https://github.com/dotnet/coreclr/issues/22951. We still need to keep the change that `+0` is greater than `-0`, but it will lessen the regression overall and make a fix easier to attain.\r\n\r\nIEEE 754:2008 refer to these as `minNum`, `maxNum`, `minNumMag`, and `maxNumMag`. However, IEEE 754:2019 (draft) refers to them as `minimumNumber`, `maximumNumber`, `minimumMagnitudeNumber`, and `maxmimumMagnitudeNumber`. I opted with the latter postfix (`MagnitudeNumber`, rather than `NumberMagnitude`), as I believe it is more readable.","Url":"https://github.com/dotnet/corefx/issues/36925","RelatedDescription":"Open issue \"Expose Math.MaxNumber and Math.MinNumber functions that don't propagate NaN\" (#36925)"},{"Id":"433770791","IsPullRequest":true,"CreatedAt":"2019-04-16T13:08:34","Actor":"dotnet-maestro[bot]","Number":"36922","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190415.72\r\n- **Date Produced**: 4/16/2019 12:43 AM\r\n- **Commit**: 47c6539dc73a23bf167e5eaadce475475c512f44\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27615-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27615-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27615-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36922","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#36922)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"434087974","IsPullRequest":true,"CreatedAt":"2019-04-17T04:37:20","Actor":"333fred","Number":"35047","RawContent":null,"Title":"Remove prototype comments and add the run-nullable-analysis flag","State":"open","Body":"Filed follow up bugs where appropriate. @dotnet/roslyn-compiler please review.","Url":"https://github.com/dotnet/roslyn/pull/35047","RelatedDescription":"Open PR \"Remove prototype comments and add the run-nullable-analysis flag\" (#35047)"},{"Id":"434082018","IsPullRequest":false,"CreatedAt":"2019-04-17T04:04:01","Actor":"333fred","Number":"35046","RawContent":null,"Title":"Verify Public API documentation for the new nullable APIs","State":"open","Body":"I've currently added relatively minimal documentation for the new public APIs. We should go through these docs and expand them, and do a formal review.","Url":"https://github.com/dotnet/roslyn/issues/35046","RelatedDescription":"Open issue \"Verify Public API documentation for the new nullable APIs\" (#35046)"},{"Id":"434080997","IsPullRequest":false,"CreatedAt":"2019-04-17T03:58:21","Actor":"mazhou-msft","Number":"35045","RawContent":null,"Title":"Async Completion List does not resize back after it gets too wide","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 dev16.0 and above\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# project, or open a C# interactive window\r\n2. Type `int`, and try to scroll down the completion list, you will see the width of the list is growing based on the candidate names\r\n3. Type something very short, like `as`, `int` and you will see the completion window never resize back to fit the current candidates' names, make it look odd.\r\n\r\n**Expected Behavior**:\r\n1. Completion list will resize based on the candidate names, the legacy completion list preserves this behavior (resizes when completion list is triggered, if the window is already showed, then no resize.)\r\n2. The list should have a min width, if you just `Alt + Right` in interactive window and filter by keywords, you may get a very narrow window that display incomplete iten names.\r\n\r\n**Actual Behavior**:\r\nIt never resizes back to fit the length, see the screenshot.\r\n![image](https://user-images.githubusercontent.com/12908526/56259957-e2996300-6089-11e9-8bc4-2abcb5982124.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/35045","RelatedDescription":"Open issue \"Async Completion List does not resize back after it gets too wide\" (#35045)"},{"Id":"434073442","IsPullRequest":false,"CreatedAt":"2019-04-17T03:17:15","Actor":"333fred","Number":"35044","RawContent":null,"Title":"Verify BoundAnonymousPropertyDeclaration implementation","State":"open","Body":"`NullableWalker.VisitAnonymousObjectCreationExpression.getDeclaration` works for cases without errors, but in cases where there are errors it will not produce the correct information. We'll likely need to do some rebinding here to get the appropriate nodes.","Url":"https://github.com/dotnet/roslyn/issues/35044","RelatedDescription":"Open issue \"Verify BoundAnonymousPropertyDeclaration implementation\" (#35044)"},{"Id":"434073070","IsPullRequest":false,"CreatedAt":"2019-04-17T03:15:30","Actor":"333fred","Number":"35043","RawContent":null,"Title":"Remove _disableNullabilityAnalysis flag","State":"open","Body":"This flag is currently used in `NullableWalker` to avoid setting api results for nodes that aren't supported. When we support all nodes (namely patterns and tuples) we should remove this flag.","Url":"https://github.com/dotnet/roslyn/issues/35043","RelatedDescription":"Open issue \"Remove _disableNullabilityAnalysis flag\" (#35043)"},{"Id":"434072634","IsPullRequest":false,"CreatedAt":"2019-04-17T03:13:33","Actor":"333fred","Number":"35042","RawContent":null,"Title":"Handle bad expression children","State":"open","Body":"Object and collection initializers are normally handled by the object creation visitor, but we can end up in scenarios with bad code where we hit the `VisitObjectInitializerExpression` and co visitors without hitting a `VisitObjectCreationExpression`. We likely need to analyze the children of these nodes to provide public API info.","Url":"https://github.com/dotnet/roslyn/issues/35042","RelatedDescription":"Open issue \"Handle bad expression children\" (#35042)"},{"Id":"434071984","IsPullRequest":false,"CreatedAt":"2019-04-17T03:10:24","Actor":"333fred","Number":"35041","RawContent":null,"Title":"Investigate avoiding work if not rewriting for nullable","State":"open","Body":"`NullableWalker` currently has several places where we're doing work to calculate nullabilities when it's only necessary for public API information. We should try to make these conditional on whether or not that info is necessary to avoid work if possible.","Url":"https://github.com/dotnet/roslyn/issues/35041","RelatedDescription":"Open issue \"Investigate avoiding work if not rewriting for nullable\" (#35041)"},{"Id":"434071648","IsPullRequest":false,"CreatedAt":"2019-04-17T03:08:37","Actor":"333fred","Number":"35040","RawContent":null,"Title":"Refactor VisitObjectCreationInitializer","State":"open","Body":"The current handling of object initializers is potentially error-prone, and requires reconstructing types after we've already calculated them. We should refactor and ensure that types aren't recalculated after being calculated once.","Url":"https://github.com/dotnet/roslyn/issues/35040","RelatedDescription":"Open issue \"Refactor VisitObjectCreationInitializer\" (#35040)"},{"Id":"434071084","IsPullRequest":false,"CreatedAt":"2019-04-17T03:05:43","Actor":"333fred","Number":"35039","RawContent":null,"Title":"Correct handling of types in `ApplyConversion`","State":"open","Body":"In the `NullableWalker`, `ApplyConversion` is often putting causing the wrong types to get set for `BoundConversion`s and their children. We need to update this to do the correct thing.","Url":"https://github.com/dotnet/roslyn/issues/35039","RelatedDescription":"Open issue \"Correct handling of types in `ApplyConversion`\" (#35039)"},{"Id":"434062427","IsPullRequest":false,"CreatedAt":"2019-04-17T02:22:55","Actor":"333fred","Number":"35038","RawContent":null,"Title":"Ensure that all binding in semantic models is subject to rewriting","State":"open","Body":"There are several sections of code that currently are not having rewriting done, and they probably should. We need to come up with test cases that will expose the lack of rewriting and then implement the rewriting sections.","Url":"https://github.com/dotnet/roslyn/issues/35038","RelatedDescription":"Open issue \"Ensure that all binding in semantic models is subject to rewriting\" (#35038)"},{"Id":"434062030","IsPullRequest":false,"CreatedAt":"2019-04-17T02:21:10","Actor":"333fred","Number":"35037","RawContent":null,"Title":"Enable nullable analysis on speculative semantic models","State":"open","Body":"We need to determine the extent of nullable analysis support for speculative semantic models. In particular, we need to determine just how precise the speculative model needs to be for nullability. For example:\r\n\r\n```C#\r\nclass C\r\n{\r\n    object? F;\r\n    static void M(C c)\r\n    {\r\n        var x = new C() { F = c.F?.ToString() };\r\n    }\r\n}\r\nstatic class ObjectExtensions\r\n{\r\n    object? MyExtension(object o) => null;\r\n}\r\n```\r\n\r\nIf someone were to speculate about replacing the `ToString()` call with `MyExtension(c.F)`, would we need to be precise enough here to not warn about the `c.F` in the invocation of `MyExtension`, since the conditional access guarantees that that `F` won't be null? @jasonmalinowski, thoughts?","Url":"https://github.com/dotnet/roslyn/issues/35037","RelatedDescription":"Open issue \"Enable nullable analysis on speculative semantic models\" (#35037)"},{"Id":"434060441","IsPullRequest":false,"CreatedAt":"2019-04-17T02:13:47","Actor":"333fred","Number":"35036","RawContent":null,"Title":"IDiscardSymbol.NullableAnnotation needs to be implemented","State":"open","Body":"Currently this is unimplemented.","Url":"https://github.com/dotnet/roslyn/issues/35036","RelatedDescription":"Open issue \"IDiscardSymbol.NullableAnnotation needs to be implemented\" (#35036)"},{"Id":"434060116","IsPullRequest":false,"CreatedAt":"2019-04-17T02:12:10","Actor":"333fred","Number":"35035","RawContent":null,"Title":"Refactor SymbolDisplay's handling of nullablility","State":"open","Body":"Currently the handling requires `TypeSymbolWithAnnotations` internally, so we need to update it to not need that. Additionally, some of the test format code is directly in `TypeSymbolWithAnnotations`, that also needs to be pulled out.","Url":"https://github.com/dotnet/roslyn/issues/35035","RelatedDescription":"Open issue \"Refactor SymbolDisplay's handling of nullablility\" (#35035)"},{"Id":"434059712","IsPullRequest":false,"CreatedAt":"2019-04-17T02:10:03","Actor":"333fred","Number":"35034","RawContent":null,"Title":"IMethodSymbol.ReceiverNullability needs to be implemented","State":"open","Body":"Currently this is unimplemented.","Url":"https://github.com/dotnet/roslyn/issues/35034","RelatedDescription":"Open issue \"IMethodSymbol.ReceiverNullability needs to be implemented\" (#35034)"},{"Id":"434057338","IsPullRequest":false,"CreatedAt":"2019-04-17T01:57:46","Actor":"333fred","Number":"35033","RawContent":null,"Title":"Investigate nullability with aliases","State":"open","Body":"Ensure the behavior of what happens when a user types an alias with a nullability on it. See `CSharpSemanticModel.GetTypeInfoForSymbol`, where we're currently substituting `default` for `Nullability` in constructing the `CSharpTypeInfo`.","Url":"https://github.com/dotnet/roslyn/issues/35033","RelatedDescription":"Open issue \"Investigate nullability with aliases\" (#35033)"},{"Id":"434056506","IsPullRequest":false,"CreatedAt":"2019-04-17T01:53:46","Actor":"333fred","Number":"35032","RawContent":null,"Title":"NullableWalker's result recording for patterns needs to be updated","State":"open","Body":"Currently patterns aren't supported by the result recording steps, this should be updated.","Url":"https://github.com/dotnet/roslyn/issues/35032","RelatedDescription":"Open issue \"NullableWalker's result recording for patterns needs to be updated\" (#35032)"},{"Id":"434056190","IsPullRequest":false,"CreatedAt":"2019-04-17T01:52:13","Actor":"333fred","Number":"35031","RawContent":null,"Title":"NullabilityRewriter needs to handle updating SymbolInfos","State":"open","Body":"BoundNodes with symbols such as `BoundCall`, `BoundPropertyAccess`, etc., are currently not being updated. This means that `GetSymbolInfo` and related APIs will not return symbols with correct nullability information.","Url":"https://github.com/dotnet/roslyn/issues/35031","RelatedDescription":"Open issue \"NullabilityRewriter needs to handle updating SymbolInfos\" (#35031)"},{"Id":"434033967","IsPullRequest":true,"CreatedAt":"2019-04-17T01:30:08","Actor":"dotnet-bot","Number":"35026","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35026","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35026)"},{"Id":"434040668","IsPullRequest":true,"CreatedAt":"2019-04-17T00:31:39","Actor":"gafter","Number":"35030","RawContent":null,"Title":"Lambdas in array initializers checked in nullable walker","State":"open","Body":"Also fixes a corresponding issue in the switch expression\r\nFixes #34299\r\nSee also #35029","Url":"https://github.com/dotnet/roslyn/pull/35030","RelatedDescription":"Open PR \"Lambdas in array initializers checked in nullable walker\" (#35030)"},{"Id":"434037306","IsPullRequest":false,"CreatedAt":"2019-04-17T00:14:20","Actor":"gafter","Number":"35029","RawContent":null,"Title":"Unexpected inference for conditional expression","State":"open","Body":"The following test demonstrates the behavior I would expect for the `?:` expression when only one side of the `:` \"has a type\".  But this isn't how the compiler behaves.  It is inferring an oblivious result rather than taking the type from the only operand that has a type and reporting a warning on the conversion.  Silently inferring an oblivious result undermines the safety of the nullable feature.\r\n\r\n``` c#\r\n        [Fact]\r\n        public void CheckLambdaInConditional()\r\n        {\r\n            var source =\r\n@\"using System;\r\n\r\nclass C\r\n{\r\n    static Func<T> M<T>(Func<T> f) => f;\r\n    static void G(int i, object? o, string? s)\r\n    {\r\n        if (o == null) return;\r\n        var f = M(() => o) /*T:System.Func<object!>!*/;\r\n        f().ToString();\r\n        var f2 = (i == 0) ? f : (() => s); // 1\r\n        _ = f2 /*T:System.Func<object!>!*/;\r\n        f2().ToString();\r\n        var f3 = (i == 0) ? f : (() => { return s; }); // 2\r\n        _ = f3 /*T:System.Func<object!>!*/;\r\n        f3().ToString();\r\n    }\r\n}\r\n\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyTypes();\r\n            comp.VerifyDiagnostics(\r\n                // (12,42): warning CS8603: Possible null reference return.\r\n                //        var f2 = (i == 0) ? f : (() => s); // 1\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"s\").WithLocation(12, 42),\r\n                // (14,32): warning CS8603: Possible null reference return.\r\n                //        var f3 = (i == 0) ? f : (() => { return s; }); // 2\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"s\").WithLocation(14, 32));\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35029","RelatedDescription":"Open issue \"Unexpected inference for conditional expression\" (#35029)"},{"Id":"434036231","IsPullRequest":false,"CreatedAt":"2019-04-17T00:08:48","Actor":"VBAndCs","Number":"35028","RawContent":null,"Title":"VB Editor changed VB keywords casing although they are used as literal strings in my code!","State":"open","Body":"**Version Used**: \r\nVS.NET 2019 Communtity\r\n\r\nI had this Function in  VB\r\n```VB.NET\r\n    Private Function convVars(type As String) As String\r\n        If type Is Nothing Then Return Nothing\r\n        Dim t = type.Trim().ToLower()\r\n        Select Case t\r\n            Case \"Byte\", \"SByte\", \"Short\", \"UShort\", \"Long\", \"ULong\", \"douple\", \"Decimal\"\r\n                Return t\r\n            Case \"Integer\"\r\n                Return \"int\"\r\n            Case \"UInteger\"\r\n                Return \"uint\"\r\n            Case \"Single\"\r\n                Return \"float\"\r\n            Case Else\r\n                Return type.Trim().Replace(\r\n                    (\" Byte\", \" Byte\"), (\" SBtye\", \" SByte\"), (\" Short\", \" Short\"),\r\n                    (\" UShort\", \" UShort\"), (\" Long\", \" Long\"), (\" ULong\", \" ULong\"),\r\n                    (\" Double\", \" douple\"), (\" Decimal\", \" Decimal\"),\r\n                    (\" Integer\", \" int\"), (\" UInteger\", \" uint\"), (\" Single\", \" float\"),\r\n                    (\"(Of \", LessThan), (\"Of \", LessThan), (\")\", GreaterThan)\r\n                )\r\n\r\n        End Select\r\n\r\n\r\n    End Function\r\n```\r\n\r\nYou can notice the statement:\r\n` Dim t = type.Trim().ToLower()`\r\nThen I check the values of t using `Select case`\r\nObviously, I wouldn't change to small case the compare with strings containing upper case letters!\r\nThis code isn't what I wrote! The editor suddenly changed the case of all VB keywords although they are just quoted strings!\r\nThis happened also in another function where I used the string \"declare\" but suddenly found it became \"Declare\"!\r\nAlso I found a strange `Then` added after a string although there is no `If` nearby!\r\nThe sudden failure of unit testes (that passed before) reveals all this!\r\nI had to repair all these editor mistakes, but I am afraid to happen again!\r\nI don't know what triggers this strange action. I had these codes running for days! This just happed in the past few minutes, and I have no reason to think about!\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35028","RelatedDescription":"Open issue \"VB Editor changed VB keywords casing although they are used as literal strings in my code!\" (#35028)"},{"Id":"434036196","IsPullRequest":false,"CreatedAt":"2019-04-17T00:08:39","Actor":"vsfeedback","Number":"35027","RawContent":null,"Title":"Intellisense broken inside of methods that have delegates as arguments","State":"open","Body":"<p>Intellisense broken for callbacks. Inside of the Foo callback below builder. shows intellisense for the Delegate type instead of the Builder type. This works fine in 16 but broken in 16.1 preview 2.</p><pre>using System;\nnamespace ConsoleApp40\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Foo(builder =&gt;\n            {\n                builder.\n            });\n        }\n        static void Foo(Action&lt;Builder&gt; configure)\n        {\n            var builder = new Builder();\n            configure(builder);\n        }\n    }\n    class Builder\n    {\n        public int Something { get; set; }\n    }\n}&lt;br&gt;</pre>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/533644/intellisense-broken-inside-of-methods-that-have-de.html\nVSTS ticketId: 847803_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/15/2019, 08:17 PM (20 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 4/16/2019, 00:07 PM (5 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35027","RelatedDescription":"Open issue \"Intellisense broken inside of methods that have delegates as arguments\" (#35027)"},{"Id":"434010404","IsPullRequest":true,"CreatedAt":"2019-04-16T23:57:57","Actor":"dotnet-bot","Number":"35020","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35020","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35020)"},{"Id":"434010331","IsPullRequest":true,"CreatedAt":"2019-04-16T23:30:10","Actor":"dotnet-bot","Number":"35019","RawContent":null,"Title":"Merge dev16.1-preview2-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35019","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview2-vs-deps to master-vs-deps\" (#35019)"},{"Id":"434027330","IsPullRequest":false,"CreatedAt":"2019-04-16T23:27:30","Actor":"vsfeedback","Number":"35025","RawContent":null,"Title":"Internal Error in the expression evaluator","State":"open","Body":"VSF_TYPE_MARKDOWNVS2019.  Attempting to watch a very large string value (called responseXML) during debug.  Also tried immediate window with ?responseXML.  Returns &quot;Internal Error in the expression evaluator&quot;.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/527429/internal-error-in-the-expression-evaluator-3.html\nVSTS ticketId: 844665_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/10/2019, 06:50 PM (5 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nCraig Fisher on 4/15/2019, 02:56 PM (25 hours ago): <p>I'm getting this error when trying to view exception details. I don't have a large string value involved.</p>\n\nVisual Studio Feedback System on 4/15/2019, 06:08 PM (22 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\nCraig Fisher on 4/16/2019, 01:41 PM (2 hours ago): Actually I'm also getting it just trying to view objects in the debugger. Turning on \"use legacy C# & VB expression evaluator\" gets around the problem.\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35025","RelatedDescription":"Open issue \"Internal Error in the expression evaluator\" (#35025)"},{"Id":"434025376","IsPullRequest":true,"CreatedAt":"2019-04-16T23:18:46","Actor":"chborl","Number":"35024","RawContent":null,"Title":"Fix complete statement's semicolon placement to better handle incomplete code","State":"open","Body":"Fix for 34983","Url":"https://github.com/dotnet/roslyn/pull/35024","RelatedDescription":"Open PR \"Fix complete statement's semicolon placement to better handle incomplete code\" (#35024)"},{"Id":"434021689","IsPullRequest":true,"CreatedAt":"2019-04-16T23:03:32","Actor":"mavasani","Number":"35023","RawContent":null,"Title":"Fix assert in remove unused member analyzer","State":"open","Body":"Fixes #33765","Url":"https://github.com/dotnet/roslyn/pull/35023","RelatedDescription":"Open PR \"Fix assert in remove unused member analyzer\" (#35023)"},{"Id":"434020941","IsPullRequest":true,"CreatedAt":"2019-04-16T23:00:19","Actor":"ryzngard","Number":"35022","RawContent":null,"Title":"Add Nullable Reference Analysis to C# > Advanced options page","State":"open","Body":"This hooks up the NRT Analysis compiler feature up to the advanced option page for C#. When enabled, the compiler flag \"run-nullable-analysis\" will be set to true; disabled will set it to false. No value will do the default behavior for the compiler. \r\n\r\n![image](https://user-images.githubusercontent.com/475144/56249854-2d06e980-6062-11e9-8aa7-a5cb55d457f5.png)\r\n","Url":"https://github.com/dotnet/roslyn/pull/35022","RelatedDescription":"Open PR \"Add Nullable Reference Analysis to C# > Advanced options page\" (#35022)"},{"Id":"434010442","IsPullRequest":true,"CreatedAt":"2019-04-16T22:20:05","Actor":"dotnet-bot","Number":"35021","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35021","RelatedDescription":"Open PR \"Merge master-vs-deps to features/razorSupport2\" (#35021)"},{"Id":"433994023","IsPullRequest":true,"CreatedAt":"2019-04-16T21:29:31","Actor":"chsienki","Number":"35018","RawContent":null,"Title":"Make Generated syntax trees restore to project-level nullability","State":"open","Body":"Fixes #34094","Url":"https://github.com/dotnet/roslyn/pull/35018","RelatedDescription":"Open PR \"Make Generated syntax trees restore to project-level nullability\" (#35018)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"433999560","IsPullRequest":true,"CreatedAt":"2019-04-16T22:34:23","Actor":"jkotas","Number":"7315","RawContent":null,"Title":"ObjWriter build fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Closed or merged PR \"ObjWriter build fixes\" (#7315)"},{"Id":"433323004","IsPullRequest":true,"CreatedAt":"2019-04-16T21:11:30","Actor":"trylek","Number":"7306","RawContent":null,"Title":"Smaller SuperIlc fixes for bugs I hit in local testing","State":"closed","Body":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Closed or merged PR \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306)"},{"Id":"433505434","IsPullRequest":true,"CreatedAt":"2019-04-16T17:40:15","Actor":"trylek","Number":"7308","RawContent":null,"Title":"Fixes for some of the remaining Pri#1 CPAOT compilation buckets","State":"closed","Body":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Closed or merged PR \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308)"},{"Id":"433850919","IsPullRequest":true,"CreatedAt":"2019-04-16T17:05:26","Actor":"jkotas","Number":"7314","RawContent":null,"Title":"Use CentOS docker image for official builds","State":"closed","Body":"The same one is used for CoreCLR official builds","Url":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Closed or merged PR \"Use CentOS docker image for official builds\" (#7314)"},{"Id":"433794769","IsPullRequest":true,"CreatedAt":"2019-04-16T15:28:46","Actor":"Dotnet-GitSync-Bot","Number":"7313","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7313)"},{"Id":"433034057","IsPullRequest":true,"CreatedAt":"2019-04-16T14:05:34","Actor":"filipnavara","Number":"7299","RawContent":null,"Title":"Move EventSource to shared CoreLib partition","State":"closed","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/23925.","Url":"https://github.com/dotnet/corert/pull/7299","RelatedDescription":"Closed or merged PR \"Move EventSource to shared CoreLib partition\" (#7299)"},{"Id":"433552374","IsPullRequest":true,"CreatedAt":"2019-04-16T08:06:54","Actor":"Dotnet-GitSync-Bot","Number":"7310","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7310)"},{"Id":"433571783","IsPullRequest":true,"CreatedAt":"2019-04-16T07:09:59","Actor":"jkotas","Number":"7312","RawContent":null,"Title":"Add AdditionalBuildArgs option for the official build pipeline","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Closed or merged PR \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312)"},{"Id":"433568931","IsPullRequest":true,"CreatedAt":"2019-04-16T07:08:27","Actor":"jkotas","Number":"7311","RawContent":null,"Title":"Add musl targets in packages","State":"closed","Body":"Contribute to #4552","Url":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Closed or merged PR \"Add musl targets in packages\" (#7311)"},{"Id":"433521193","IsPullRequest":true,"CreatedAt":"2019-04-16T02:12:54","Actor":"Dotnet-GitSync-Bot","Number":"7309","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7309)"},{"Id":"433456685","IsPullRequest":false,"CreatedAt":"2019-04-15T20:08:37","Actor":"josephmoresena","Number":"7307","RawContent":null,"Title":"Compile Gui.cs example win-x64","State":"open","Body":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n","Url":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Open issue \"Compile Gui.cs example win-x64\" (#7307)"},{"Id":"433044565","IsPullRequest":false,"CreatedAt":"2019-04-15T12:48:38","Actor":"UNDEFINED-BEHAVIOR","Number":"7300","RawContent":null,"Title":"What is the correct system codepage for build.cmd script","State":"closed","Body":"![image](https://user-images.githubusercontent.com/8407331/56100592-a4028c00-5f55-11e9-9abd-3af4f5a5856e.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7300","RelatedDescription":"Closed issue \"What is the correct system codepage for build.cmd script\" (#7300)"},{"Id":"433259360","IsPullRequest":true,"CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Number":"7305","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7305)"},{"Id":"433156142","IsPullRequest":true,"CreatedAt":"2019-04-15T11:44:52","Actor":"MichalStrehovsky","Number":"7303","RawContent":null,"Title":"Remove problematic characters in eventtrace.cpp","State":"closed","Body":"The C++ compiler finds the typographic apostrophe disturbing.\r\n\r\n`warning C4828: The file contains a character starting at offset 0x103e5 that is illegal in the current source character set (codepage 65001).`","Url":"https://github.com/dotnet/corert/pull/7303","RelatedDescription":"Closed or merged PR \"Remove problematic characters in eventtrace.cpp\" (#7303)"},{"Id":"433157869","IsPullRequest":true,"CreatedAt":"2019-04-15T08:32:26","Actor":"MichalStrehovsky","Number":"7304","RawContent":null,"Title":"Add normalized equivalent of YieldProcessor","State":"open","Body":"Ports dotnet/coreclr#13670 to CoreRT.\r\n\r\nMarked as draft because I don't have good perf numbers yet (and this is not an area that I'm comfortable making changes in).","Url":"https://github.com/dotnet/corert/pull/7304","RelatedDescription":"Open PR \"Add normalized equivalent of YieldProcessor\" (#7304)"},{"Id":"433075833","IsPullRequest":true,"CreatedAt":"2019-04-15T04:09:51","Actor":"Dotnet-GitSync-Bot","Number":"7302","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7302","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7302)"},{"Id":"433060403","IsPullRequest":true,"CreatedAt":"2019-04-15T02:33:52","Actor":"Dotnet-GitSync-Bot","Number":"7301","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @razfriman","Url":"https://github.com/dotnet/corert/pull/7301","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7301)"},{"Id":"432982157","IsPullRequest":true,"CreatedAt":"2019-04-14T19:55:54","Actor":"MichalStrehovsky","Number":"7296","RawContent":null,"Title":"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource","State":"closed","Body":"EventSource requires these specially named nested types.","Url":"https://github.com/dotnet/corert/pull/7296","RelatedDescription":"Closed or merged PR \"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource\" (#7296)"},{"Id":"432982222","IsPullRequest":true,"CreatedAt":"2019-04-14T19:54:01","Actor":"MichalStrehovsky","Number":"7297","RawContent":null,"Title":"Add analysis of EventSource metadata","State":"closed","Body":"Event sources should not be blocked, so we need to poke a hole through blocking. On Project N, there's a separate IL2IL transform that deals with framework-provided event sources to sidestep this - I don't think we want to replicate that.\r\n\r\nThen we need to add special rule to make the compiler keep metadata for the magical nested types.","Url":"https://github.com/dotnet/corert/pull/7297","RelatedDescription":"Closed or merged PR \"Add analysis of EventSource metadata\" (#7297)"},{"Id":"432982311","IsPullRequest":true,"CreatedAt":"2019-04-14T19:53:04","Actor":"MichalStrehovsky","Number":"7298","RawContent":null,"Title":"Enhance analysis of reflection dependencies","State":"closed","Body":"EventSource reflects on method signatures that might refer to types we never heard about (they were never referenced from code in a way that would bring in the dependency). Bring the dependencies explicitly.","Url":"https://github.com/dotnet/corert/pull/7298","RelatedDescription":"Closed or merged PR \"Enhance analysis of reflection dependencies\" (#7298)"},{"Id":"432697541","IsPullRequest":true,"CreatedAt":"2019-04-14T12:28:51","Actor":"krwq","Number":"7289","RawContent":null,"Title":"Remove duplicate GetCurrentThreadId","State":"closed","Body":"Found as part of https://github.com/dotnet/coreclr/pull/23914\r\ncc: @stephentoub ","Url":"https://github.com/dotnet/corert/pull/7289","RelatedDescription":"Closed or merged PR \"Remove duplicate GetCurrentThreadId\" (#7289)"},{"Id":"432951950","IsPullRequest":true,"CreatedAt":"2019-04-14T12:21:57","Actor":"MichalStrehovsky","Number":"7295","RawContent":null,"Title":"Fix portable threadpool build on Windows","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7295","RelatedDescription":"Closed or merged PR \"Fix portable threadpool build on Windows\" (#7295)"},{"Id":"432932349","IsPullRequest":true,"CreatedAt":"2019-04-14T09:03:58","Actor":"Dotnet-GitSync-Bot","Number":"7294","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @filipnavara @sdmaclea @dotnet-maestro-bot","Url":"https://github.com/dotnet/corert/pull/7294","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7294)"},{"Id":"432668188","IsPullRequest":true,"CreatedAt":"2019-04-14T04:42:08","Actor":"Dotnet-GitSync-Bot","Number":"7288","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @tannergooding @tarekgh @luhenry @filipnavara @EgorBo @sdmaclea @stephentoub @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7288","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7288)"},{"Id":"432900041","IsPullRequest":true,"CreatedAt":"2019-04-14T03:11:11","Actor":"MichalStrehovsky","Number":"7293","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7293","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7293)"},{"Id":"432899417","IsPullRequest":true,"CreatedAt":"2019-04-13T21:03:54","Actor":"dotnet-bot","Number":"7292","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7292","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7292)"},{"Id":"432839971","IsPullRequest":true,"CreatedAt":"2019-04-13T15:20:34","Actor":"MichalStrehovsky","Number":"7291","RawContent":null,"Title":"Delete ManualResetEventSlim.cs","State":"closed","Body":"We use the copy in the `shared` directory.","Url":"https://github.com/dotnet/corert/pull/7291","RelatedDescription":"Closed or merged PR \"Delete ManualResetEventSlim.cs\" (#7291)"},{"Id":"432757001","IsPullRequest":true,"CreatedAt":"2019-04-12T21:45:23","Actor":"nattress","Number":"7290","RawContent":null,"Title":"[WIP] Update CoreCLR test scripting","State":"open","Body":"The scripts to support running downloaded CoreCLR tests are from 2017 and have received some compelling updates since then:\r\n\r\n- No longer depend on desktop Xunit runner (`xunit.runner.msbuild`) and instead uses `xunit.console`. This should unblock https://github.com/dotnet/corert/issues/7032.\r\n- Cross platform Python script to drive test execution which lets us remove a bunch of the scripting we brought over last time.\r\n\r\nThe process here was similar to last time - drop runtest.py into this repo and then bring over enough scripts to make it run the test tree. Alternatively, we could have re-written this scripting to clone CoreCLR, build the product and tests, and run them with a custom launcher that first runs CPAOT / ILC. This takes about 25 minutes for the Pri0 tests and would slow our CI down significantly. The Pri0 test binaries are stored in an Azure blob which downloads and extracts in 1 minute at a periodic cost of updating these scripts (currently a 2 year period).\r\n\r\nThe Windows test binaries are supported with this commit. Unix support will be added once the CI looks good for Windows.\r\n\r\nNB: The wrappers are extremely slow to generate (5 minutes on my machine) and run each time we run CoreCLR tests. If we change test exclusion file they need generating, otherwise we can re-use if it's the same test subset. An optimization here would improve quality of life.\r\n\r\nNB2: @trylek FYI since this necessarily involves updating the binary test zips, we may see CPAOT pass rate regressions. There are also ~300 more tests than before based on a quick `dir /s *.cmd`.","Url":"https://github.com/dotnet/corert/pull/7290","RelatedDescription":"Open PR \"[WIP] Update CoreCLR test scripting\" (#7290)"},{"Id":"432654145","IsPullRequest":true,"CreatedAt":"2019-04-12T17:18:40","Actor":"Dotnet-GitSync-Bot","Number":"7287","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub @sdmaclea @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7287","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7287)"},{"Id":"432535975","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:54","Actor":"MichalStrehovsky","Number":"7286","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7286","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7286)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"433940775","IsPullRequest":false,"CreatedAt":"2019-04-16T19:10:12","Actor":"KirillOsenkov","Number":"3131","RawContent":null,"Title":"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input","State":"open","Body":"See https://github.com/Microsoft/msbuild/issues/4313\r\n\r\nhttps://github.com/dotnet/sdk/blob/8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateSupportedRuntime.targets#L44\r\n\r\nWe should find another way to invalidate. I'm seeing RAR cache written to every time even during rebuilds where nothing has changed. This in turn triggers rebuild of WriteAppConfig, even though the app config is the same.","Url":"https://github.com/dotnet/sdk/issues/3131","RelatedDescription":"Open issue \"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input\" (#3131)"},{"Id":"433742612","IsPullRequest":true,"CreatedAt":"2019-04-16T12:04:30","Actor":"dotnet-maestro[bot]","Number":"3130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3130","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3130)"},{"Id":"431984959","IsPullRequest":true,"CreatedAt":"2019-04-16T05:37:10","Actor":"dotnet-bot","Number":"3113","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3113","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3113)"},{"Id":"431772059","IsPullRequest":true,"CreatedAt":"2019-04-16T03:37:40","Actor":"dsplaisted","Number":"3111","RawContent":null,"Title":"Use PackageDownload","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS).","Url":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed or merged PR \"Use PackageDownload\" (#3111)"},{"Id":"431068288","IsPullRequest":true,"CreatedAt":"2019-04-15T21:46:40","Actor":"nugetlurker","Number":"3106","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3106","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3106)"},{"Id":"431068261","IsPullRequest":true,"CreatedAt":"2019-04-15T21:04:02","Actor":"nugetlurker","Number":"3105","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3105","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3105)"},{"Id":"433471159","IsPullRequest":false,"CreatedAt":"2019-04-15T20:47:03","Actor":"ericstj","Number":"3129","RawContent":null,"Title":"SDK doesn't honor TargetingPackVersion on FrameworkReference","State":"open","Body":"SDK permits specifying TargetingPackVersion metdata on FrameworkReference:\r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L99-L103\r\n\r\nBut then it constructs the path to the targeting pack based on KnownFrameworkReference: \r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L122\r\n\r\nAlso, is this really the way we should be specifying which framework to build against?  I had expected `RuntimeFrameworkVersion` to work, but it looks like that only controls the runtime and not ref-pack.\r\n\r\n/cc @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3129","RelatedDescription":"Open issue \"SDK doesn't honor TargetingPackVersion on FrameworkReference\" (#3129)"},{"Id":"433460479","IsPullRequest":false,"CreatedAt":"2019-04-15T20:18:34","Actor":"vidarw","Number":"3128","RawContent":null,"Title":"No package for Ubuntu 19.04 (Disco Dingo)","State":"open","Body":"Ubuntu is officially releasing version 19.04 (Disco Dingo) within a week.\r\nThere is currently no `dotnet-sdk-2.2` available for the newset version of Ubuntu in the Microsoft repository.\r\n\r\nSolution would be to add a disco compatible release package or as a temporary fix provide a standalone .deb package to install with `dpkg`.","Url":"https://github.com/dotnet/sdk/issues/3128","RelatedDescription":"Open issue \"No package for Ubuntu 19.04 (Disco Dingo)\" (#3128)"},{"Id":"433244399","IsPullRequest":true,"CreatedAt":"2019-04-15T19:21:53","Actor":"dotnet-maestro[bot]","Number":"3127","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3127","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3127)"},{"Id":"432532625","IsPullRequest":true,"CreatedAt":"2019-04-14T13:54:35","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19211.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19212.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3118","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3118)"},{"Id":"431838901","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:41","Actor":"peterhuene","Number":"3112","RawContent":null,"Title":"Escape output item specs for ResolvePackageAssets task.","State":"closed","Body":"This commit fixes the ResolvePackageAssets task to escape the output\r\nitem specs.  This allows assets in packages to contain characters that\r\nmight get unescaped by MSBuild.\r\n\r\nFixes #3069.","Url":"https://github.com/dotnet/sdk/pull/3112","RelatedDescription":"Closed or merged PR \"Escape output item specs for ResolvePackageAssets task.\" (#3112)"},{"Id":"432140915","IsPullRequest":true,"CreatedAt":"2019-04-12T23:48:57","Actor":"johnbeisner","Number":"3114","RawContent":null,"Title":"[WIP] running perf tests and upload to benchview in Azure DevOps","State":"closed","Body":"First draft: running perf tests and upload to benchview in Azure DevOps","Url":"https://github.com/dotnet/sdk/pull/3114","RelatedDescription":"Closed or merged PR \"[WIP] running perf tests and upload to benchview in Azure DevOps\" (#3114)"},{"Id":"432691504","IsPullRequest":true,"CreatedAt":"2019-04-12T23:15:36","Actor":"dsplaisted","Number":"3120","RawContent":null,"Title":"Allow test tools to roll forward across major versions of .NET Core","State":"closed","Body":"Currently the dotnet tools which run our tests target .NET Core 2.1.  This updates them to allow roll-forward across major .NET Core versions, so that they can run on a 3.0 runtime if 2.x isn't installed.","Url":"https://github.com/dotnet/sdk/pull/3120","RelatedDescription":"Closed or merged PR \"Allow test tools to roll forward across major versions of .NET Core\" (#3120)"},{"Id":"432733384","IsPullRequest":true,"CreatedAt":"2019-04-12T20:30:59","Actor":"sbomer","Number":"3125","RawContent":null,"Title":"Add ILLink targets and tests","State":"open","Body":"This adds linker targets, mostly adapted from https://github.com/mono/linker/blob/9766e2b2406a3d44cbf05e49ab2bd19b535e3e5a/src/ILLink.Tasks/ILLink.Tasks.targets, to run the linker after `ComputeFilesToPublish`.\r\n\r\nA few things still need to change (but I wanted to get what I have so far out for review):\r\n- Change property names to agreed-upon strings\r\n- Update deps file generation in response to https://github.com/dotnet/sdk/pull/3086. I think this needs https://github.com/dotnet/sdk/pull/3113 or another update PR to be merged.\r\n- Update the linker:\r\n  - to include `UsingTask` for other tasks in the assembly (namely, `ComputeManagedAssemblies`)\r\n  - for `ReferencePath` support\r\n  - with a net472 build of the task dll\r\n\r\nWhen I run these tests locally with a recent version of the linker, the checks pass up to the deps file asserts.\r\n\r\n@nguerrera, @fadimounir, @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3125","RelatedDescription":"Open PR \"Add ILLink targets and tests\" (#3125)"},{"Id":"432733028","IsPullRequest":false,"CreatedAt":"2019-04-12T20:29:52","Actor":"KathleenDollard","Number":"3124","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/sdk/issues/3124","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#3124)"},{"Id":"432729778","IsPullRequest":true,"CreatedAt":"2019-04-12T20:20:56","Actor":"fadimounir","Number":"3123","RawContent":null,"Title":"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios","State":"open","Body":"Unsupported scenarios are:\r\n1) When a RID is not provided\r\n2) When publishing framework dependent apps (TEMP, until #3109 and #3110 are fixed)","Url":"https://github.com/dotnet/sdk/pull/3123","RelatedDescription":"Open PR \"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios\" (#3123)"},{"Id":"432723599","IsPullRequest":false,"CreatedAt":"2019-04-12T20:03:24","Actor":"JunTaoLuo","Number":"3122","RawContent":null,"Title":"Unable to resolve AppHost for the current runtime if it's not included in the SDK","State":"open","Body":"I'm seeing broken behaviour when the app host is not bundled in the targeting pack of the SDK.\r\n\r\nI discovered this as part of our dependency update in https://github.com/aspnet/AspNetCore-Tooling/pull/409. When we first ingested the changes, we saw errors such like:\r\n```\r\n(AspNetCore-Tooling) C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents> dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreApp30PackageVersion=3.0.0-preview5-27608-16 /p:_RazorBuildServerPipeName=\"bc0e5740-2362-4e4c-8244-64c38154f0d7\" /t:Build /p:Configuration=Debug /p:_RazorForceBuildServer=true\r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Microsoft.Common.CurrentVersion.targets(4552,5): error MSB3030: Could not copy the file \"C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\obj\\Debug\\netcoreapp3.0\\MvcWithComponents.exe\" because it was not found. [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\n```\r\nI have a binlog for the failing scenario:\r\n[msbuild.zip](https://github.com/dotnet/sdk/files/3074987/msbuild.zip)\r\n\r\nIt seems like the issue is that the app host package could not be found in \"\\.dotnet\\x64\\packs\\runtime.win-x64.Microsoft.NETCore.DotNetAppHost\" since the version of the runtime we reference is ahead of the the version that's included in the SDK. In this case, sdk\\3.0.100-preview4-011136 doesn't contain the targeting pack for runtime\\3.0.0-preview5-27608-16. However, using a newer runtime than what's included in the SDK is a core scenario that we depend on so how should this work?\r\n\r\nCan someone on the SDK team please advise on the expectation here and look through the binlog to see why the mechanism breaks in our scenario?\r\n\r\ncc @nguerrera @dsplaisted \r\n\r\ncc @dougbu @natemcmaster\r\n","Url":"https://github.com/dotnet/sdk/issues/3122","RelatedDescription":"Open issue \"Unable to resolve AppHost for the current runtime if it's not included in the SDK\" (#3122)"},{"Id":"432722156","IsPullRequest":true,"CreatedAt":"2019-04-12T19:59:08","Actor":"fadimounir","Number":"3121","RawContent":null,"Title":"Couple of fixes and tweaks to the R2R creation logic","State":"open","Body":"Changing crossgen commands to use response files.\r\nChanging /Platform_Assemblies_Paths to a set of /r arguments\r\nUsing resolved files list as assembly references to crossgen (temp hack until issue 3110 is fixed)","Url":"https://github.com/dotnet/sdk/pull/3121","RelatedDescription":"Open PR \"Couple of fixes and tweaks to the R2R creation logic\" (#3121)"},{"Id":"432641949","IsPullRequest":true,"CreatedAt":"2019-04-12T16:12:36","Actor":"chcosta","Number":"3119","RawContent":null,"Title":"/* Work in progress */ Test arcade changes","State":"open","Body":"Do not merge!\r\n\r\nPlaying around with some template changes to enable test run title for publishing test results.","Url":"https://github.com/dotnet/sdk/pull/3119","RelatedDescription":"Open PR \"/* Work in progress */ Test arcade changes\" (#3119)"},{"Id":"433231210","IsPullRequest":false,"CreatedAt":"2019-04-12T15:12:26","Actor":"cartermp","Number":"3126","RawContent":null,"Title":"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms","State":"open","Body":"Even if we have cool tooling that adds the appropriate stuff to a project file based on various actions in the IDE, there will still be users who manually edit their WinForms/WPF project files.\r\n\r\nWe should emit a warning under the following conditions:\r\n\r\n* `Microsoft.NET.Sdk.WindowsDesktop` is specified but there is no `UseWPF` or `UseWinForms`\r\n* `UseWPF` or `UseWinForms` is specified but the SDK attribute is not `Microsoft.NET.Sdk.WindowsDesktop`\r\n\r\nIn the first case, it would be great if the warning could say something to the effect of:\r\n\r\n\"Microsoft.NET.Sdk.WindowsDesktop is specified, but no corresponding UseWPF or UseWinForms property was found.\"\r\n\r\nIn the latter case, using WPF as an example, something to the effect of:\r\n\r\n\"UseWPF was specified but the SDK attribute is not Microsoft.NET.Sdk.WindowsDesktop\"\r\n\r\nNot sure if this is an SDK concern or not, but I figured I'd log it somewhere.","Url":"https://github.com/dotnet/sdk/issues/3126","RelatedDescription":"Open issue \"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms\" (#3126)"},{"Id":"432300971","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:45","Actor":"nugetlurker","Number":"3117","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117)"},{"Id":"432300957","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:42","Actor":"nugetlurker","Number":"3116","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3116","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3116)"},{"Id":"432201230","IsPullRequest":false,"CreatedAt":"2019-04-11T19:21:25","Actor":"KathleenDollard","Number":"3115","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/sdk/issues/3115","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#3115)"},{"Id":"431111800","IsPullRequest":true,"CreatedAt":"2019-04-11T02:07:16","Actor":"dsplaisted","Number":"3107","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replace #3072","Url":"https://github.com/dotnet/sdk/pull/3107","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3107)"},{"Id":"431061785","IsPullRequest":false,"CreatedAt":"2019-04-10T13:20:40","Actor":"johnbeisner","Number":"3104","RawContent":null,"Title":"Allow for the disablement of ResolveAppHosts","State":"closed","Body":"**Repro steps:**\r\nBuild win-arm [all arm* RIDs have this failure] @ commit 0606a12720f0eace5af77c545d0d91b96ec92e27\r\n\r\n**Error:**\r\nerror NU1605: Detected package downgrade: runtime.win-arm.Microsoft.NETCore.DotNetAppHost from 3.0.0-preview5-27607-08 to 3.0.0-preview4-27501-7. Reference the package directly from the project to select a different version. \r\n DownloadPackage -> Microsoft.NETCore.DotNetAppHost 3.0.0-preview5-27607-08 -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview5-27607-08) \r\n DownloadPackage -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview4-27501-7)\r\n\r\n**From Microsoft.NET.Sdk.TargetingPackResolution.targets:**\r\n```\r\n    <ResolveAppHosts TargetFrameworkIdentifier=\"$(TargetFrameworkIdentifier)\"\r\n                     TargetFrameworkVersion=\"$(_TargetFrameworkVersionWithoutV)\"\r\n                     TargetingPackRoot=\"$(NetCoreTargetingPackRoot)\"\r\n                     AppHostRuntimeIdentifier=\"$(AppHostRuntimeIdentifier)\"\r\n                     RuntimeFrameworkVersion=\"$(RuntimeFrameworkVersion)\"\r\n                     PackAsToolShimRuntimeIdentifiers=\"@(_PackAsToolShimRuntimeIdentifiers)\"\r\n                     DotNetAppHostExecutableNameWithoutExtension=\"$(_DotNetAppHostExecutableNameWithoutExtension)\"\r\n                     RuntimeGraphPath=\"$(BundledRuntimeIdentifierGraphFile)\"\r\n                     KnownAppHostPacks=\"@(KnownAppHostPack)\">\r\n\r\n      <Output TaskParameter=\"PackagesToDownload\" ItemName=\"_PackageReferenceToAdd\" />\r\n      <Output TaskParameter=\"AppHost\" ItemName=\"AppHostPack\" />\r\n      <Output TaskParameter=\"PackAsToolShimAppHostPacks\" ItemName=\"PackAsToolShimAppHostPack\" />\r\n\r\n    </ResolveAppHosts>\r\n```\r\n\r\n_Work-around is to disable the 'ResolveFrameworkReferences' target._\r\n\r\nThe 'ResolveFrameworkReferences' step of the 'ResolveFrameworkReferences' target can be disabled by adding:\r\n`<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>`\r\n\r\nThe 'ResolveAppHosts' step of the 'ResolveFrameworkReferences' target should have a similar mechanism.\r\n","Url":"https://github.com/dotnet/sdk/issues/3104","RelatedDescription":"Closed issue \"Allow for the disablement of ResolveAppHosts\" (#3104)"},{"Id":"431235557","IsPullRequest":false,"CreatedAt":"2019-04-09T23:14:53","Actor":"nguerrera","Number":"3110","RawContent":null,"Title":"Resolve runtime pack assets for crossgen even if app is framework-dependent","State":"open","Body":"Crossgen operates on implementation assemblies only, even when passed as references to the compiler. To crossgen a framework-dependent app, we need all of the framework implementation assemblies to be passed to crossgen as references.\r\n\r\nNote that crossgen requires picking a RID. The app can be framework-dependent, but it must be RID specific. (Crossgen generates native code, which can't be rid-agnostic, obviously.) We are guaranteed to have downloaded the runtime packs, we just need to resolve the framework assemblies from it as though the app was self-contained, but without putting them in deps.json or copying them, etc.\r\n\r\nToday, crossgen tasks can find the base shared framework implementation assemblies next to it (it ships in the base runtime pack), but this doesn't work for the other frameworks like WindowsDesktop or ASP.NET. This also can't just blindly aggregate all the files in all the runtime packs, this list needs to account for conflict resolution (WindowsBase in WindowsDesktop wins over WindowsBase in NETCoreApp), etc.","Url":"https://github.com/dotnet/sdk/issues/3110","RelatedDescription":"Open issue \"Resolve runtime pack assets for crossgen even if app is framework-dependent\" (#3110)"},{"Id":"431234100","IsPullRequest":false,"CreatedAt":"2019-04-09T23:08:44","Actor":"nguerrera","Number":"3109","RawContent":null,"Title":"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker","State":"open","Body":"Today, crossgen (new ReadyToRun feature) operates over all files to publish and filters out what is not IL. We have decided that the compilation set should be restricted by default to the set of files that we deem are runtime managed assets and designate as such in the .deps.json.\r\n\r\nAs of now, there isn't an exact match for this list that is readily available. _ResolvedCopyLocalPublishAssets + IntermediateAssembly is close.\r\n\r\nI suspect that with #3080, this will be easier to do, but I didn't review in detail yet.\r\n\r\nWe will want to use the same set of runtime assemblies as candidates for the linker as crossgen. This is high priority as we are hoping to have both linker and crossgen feature-complete for Preview 5.","Url":"https://github.com/dotnet/sdk/issues/3109","RelatedDescription":"Open issue \"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker\" (#3109)"},{"Id":"431167464","IsPullRequest":true,"CreatedAt":"2019-04-09T20:08:25","Actor":"dsplaisted","Number":"3108","RawContent":null,"Title":"Fix conflicts between multiple uses of _PackageReferenceToAdd","State":"open","Body":"Fixes #3027","Url":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Open PR \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108)"},{"Id":"430812433","IsPullRequest":false,"CreatedAt":"2019-04-09T07:35:55","Actor":"yyjdelete","Number":"3103","RawContent":null,"Title":"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference","State":"open","Body":"Sdk Version: `3.0.100-preview3-010431`, `2.1.504`\r\nRun `ConsoleApp5` in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an `MissingMethodException` and an `FileNotFoundException` for `System.Data.SqlClient, Version=4.5.0.0`\r\n\r\nThis can also happen with `PackageReference`. I reference Dapper from an ClassLibrary with netstandard2.0, and the main App is net472, and failed to found `System.Data.SqlClient, Version=4.5.0.0`.\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\nExpected:\r\nThe `FileNotFoundException` not happen and the `System.Data.SqlClient, Version=4.5.0.0` is include in the output bins.\r\nThe below behavior may be not expected, but it's the current behavior for project struct(dependencies) in VS2019. (Rider follow the actual behavior for project struct)\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0)\r\n------|--System.Data.SqlClient(netstandard2.0)\r\n```\r\n\r\nActual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(missing from the output of ConsoleApp5)\r\n---|--ClassLibrary2(net472)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3103","RelatedDescription":"Open issue \"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\" (#3103)"},{"Id":"430708743","IsPullRequest":true,"CreatedAt":"2019-04-09T00:03:03","Actor":"dsplaisted","Number":"3102","RawContent":null,"Title":"Don't include base FrameworkReferences when creating NuGet packages","State":"open","Body":"Per [comment](https://github.com/aspnet/AspNetCore/pull/9033#issuecomment-481043113) from @nkolev92:\r\n\r\n> I think regardless of whether it gets reverted or not, the SDK should set \"pack=false\" to Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/pull/3102","RelatedDescription":"Open PR \"Don't include base FrameworkReferences when creating NuGet packages\" (#3102)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":13,"RawContent":null},{"Id":"1114554336577609729","CreatedAt":"2019-04-06T15:43:55+00:00","UserScreenname":"dotnet","Text":"Using Windows Installer XML (WiX)? Time to say congrats to @robmen,  @barnson and all the other contributors of… https://t.co/P1rw6S2wGf","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":60,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2019-04-17T05:30:29.7742309Z","RunDurationInMilliseconds":8927}