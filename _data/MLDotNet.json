{"Data":{"GitHub":{"Issues":[{"Id":"421266301","IsPullRequest":true,"CreatedAt":"2019-03-15T04:02:11","Actor":"sfilipi","Number":"2960","RawContent":null,"Title":"Checking in the samples generated during bug bash for MissingNa, Repl…","State":"closed","Body":"Towards #1209 \r\n\r\nGathering the work of PR: #2814, #2779 and #2773\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2960","RelatedDescription":"Closed or merged PR \"Checking in the samples generated during bug bash for MissingNa, Repl…\" (#2960)"},{"Id":"421308588","IsPullRequest":true,"CreatedAt":"2019-03-15T01:03:25","Actor":"artidoro","Number":"2973","RawContent":null,"Title":"Cleaning TrainCatalog and RecommenderCatalog","State":"open","Body":"Fixes #2972.\r\n\r\nIn this PR I clean `TrainCatalog` (commit 1) and `RecommenderCatalog` (commit 2).\r\nThe other commits are simply the adjustments in the code that need to be done to compile. ","Url":"https://github.com/dotnet/machinelearning/pull/2973","RelatedDescription":"Open PR \"Cleaning TrainCatalog and RecommenderCatalog\" (#2973)"},{"Id":"421308185","IsPullRequest":false,"CreatedAt":"2019-03-15T01:01:12","Actor":"artidoro","Number":"2972","RawContent":null,"Title":"TrainCatalog and RecommenderCatalog need cleaning","State":"open","Body":"There are some methods in the catalogs that do not respect the naming conventions that we are enforcing in the trainers and the transforms. \r\n\r\nThe methods that should be fixed are the `Evaluate` and `CrossValidate` in particular.\r\n\r\nWe should rename the parameters accordingly.","Url":"https://github.com/dotnet/machinelearning/issues/2972","RelatedDescription":"Open issue \"TrainCatalog and RecommenderCatalog need cleaning\" (#2972)"},{"Id":"421306728","IsPullRequest":true,"CreatedAt":"2019-03-15T00:53:47","Actor":"zeahmed","Number":"2971","RawContent":null,"Title":"Fixed a rendering issue in the TensorFlow doc.","State":"open","Body":"There is a rendering issue with TensorFlow documentation where a link appears as code snippet in the doc at the following link. \r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.tensorflowcatalog?view=ml-dotnet\r\n\r\nThis PR fixes it.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2971","RelatedDescription":"Open PR \"Fixed a rendering issue in the TensorFlow doc.\" (#2971)"},{"Id":"421297095","IsPullRequest":true,"CreatedAt":"2019-03-15T00:05:08","Actor":"shmoradims","Number":"2970","RawContent":null,"Title":"Updated xml docs for tree-based trainers.","State":"open","Body":"Updated XML documentation for tree-based trainers (FastTree, FastForest, GAM, etc). Related to #2522.\r\n\r\nSamples to come in a separate PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2970","RelatedDescription":"Open PR \"Updated xml docs for tree-based trainers.\" (#2970)"},{"Id":"421292514","IsPullRequest":true,"CreatedAt":"2019-03-14T23:43:39","Actor":"Ivanidzo4ka","Number":"2969","RawContent":null,"Title":"Configurable Threshold for binary models","State":"open","Body":"fixes #2465","Url":"https://github.com/dotnet/machinelearning/pull/2969","RelatedDescription":"Open PR \"Configurable Threshold for binary models\" (#2969)"},{"Id":"421289748","IsPullRequest":true,"CreatedAt":"2019-03-14T23:31:42","Actor":"abgoswam","Number":"2968","RawContent":null,"Title":"Fixing ModelParameter discrepancies","State":"open","Body":"Fixes #2938 \r\n\r\n- Fixes to the ~7 odd ModelParameter types which were inconsistent  with the  rest of the ModelParameter types\r\n\r\nCouple of notes: \r\n\r\n1.  PR follows naming convention  used by other ModelParameter types in the codebase\r\n    - {AlgoName}(optional){TypeOfTask}ModelParameters\r\n    - {TypeOfTask} is added  only when needed to distinguish between `Binary` , `Regression` or `Multiclass`\r\n\r\n2. ModelParameter types do not use the word `Classification` in the {TypeOfTask} . PR follows that convention.","Url":"https://github.com/dotnet/machinelearning/pull/2968","RelatedDescription":"Open PR \"Fixing ModelParameter discrepancies\" (#2968)"},{"Id":"421286304","IsPullRequest":false,"CreatedAt":"2019-03-14T23:17:10","Actor":"zeahmed","Number":"2967","RawContent":null,"Title":"More tests for TextFeaturizer.","State":"open","Body":"TextFeaturizer is a complex transform and it takes more options as input then any other component in ML.NET. Using those options, the TextFeaturizer build up the underlying components.\r\n\r\nAssuming that underlying component are well tested, there is a need to test the options for TextFeaturizer so that we are sure that underlying components are created as intended and results produced are as expected.","Url":"https://github.com/dotnet/machinelearning/issues/2967","RelatedDescription":"Open issue \"More tests for TextFeaturizer.\" (#2967)"},{"Id":"421285821","IsPullRequest":true,"CreatedAt":"2019-03-14T23:15:17","Actor":"artidoro","Number":"2966","RawContent":null,"Title":"Clean FeatureContributionCalculation and PermutationFeatureImportance","State":"open","Body":"Fixes #2965.\r\n\r\nIn this PR:\r\n1.  I move and rename the extension `MlContext.Model.Explainability.FeatureContributionCalculation` to `MlContext.Transforms.CalculateFeatureContribution`.\r\n\r\n2. I also remove the `MlContext.Model.Explainability` catalog. \r\n\r\n3. Clean up the `FeatureContributionCalculation` extension\r\n\r\n4. Clean up PFI extensions \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2966","RelatedDescription":"Open PR \"Clean FeatureContributionCalculation and PermutationFeatureImportance\" (#2966)"},{"Id":"421285020","IsPullRequest":false,"CreatedAt":"2019-03-14T23:11:59","Actor":"artidoro","Number":"2965","RawContent":null,"Title":"Scrubbing of FeatureContributionCalculation and Explainability Catalog","State":"open","Body":"Explainability catalog should be cleaned up. \r\n\r\nThe `MlContext.Model.Explainability` catalog was created with the idea that all the model explainability operations would live there.\r\n\r\nBut it only contains `FeatureContributionCalculation` because `PermutationFeatureImportance` lives in the training task specific catalog (i.e. `MlContext.BinaryClassification`...) because it is task specific. \r\n\r\n@rogancarr  and @TomFinley  agreed that it is not desirable to have a subcatalog with only one transform. And since `FeatureContributionCalculation` is an estimator/transformer it should probably live under:\r\n\r\n`MlContext.Transforms.FeatureContributionCalculation`","Url":"https://github.com/dotnet/machinelearning/issues/2965","RelatedDescription":"Open issue \"Scrubbing of FeatureContributionCalculation and Explainability Catalog\" (#2965)"},{"Id":"421284905","IsPullRequest":true,"CreatedAt":"2019-03-14T23:11:35","Actor":"ganik","Number":"2964","RawContent":null,"Title":"Remove duplicate NormalizeFeatures from FFM trainer","State":"open","Body":"Fixes #2958. There are two flags controlling normalization steps right before and in FFM trainer. We decide to disable the former one because FFM has its own built-in normalization for multiple feature columns and the other normalization only works with a single feature column.","Url":"https://github.com/dotnet/machinelearning/pull/2964","RelatedDescription":"Open PR \"Remove duplicate NormalizeFeatures from FFM trainer\" (#2964)"},{"Id":"421284887","IsPullRequest":false,"CreatedAt":"2019-03-14T23:11:29","Actor":"rogancarr","Number":"2963","RawContent":null,"Title":"Create functional tests for all ONNX scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the ONNX functionality we want fully supported in V1.\r\n\r\nScenarios:\r\n- I can take an existing ONNX model and get predictions from it (as both final output and as input to downstream pipelines)\r\n- P1: I can export ML.NET models to ONNX (limited to the existing internal functionality) (In Model Files section, but can be fleshed out a bit better with other ONNX tests)","Url":"https://github.com/dotnet/machinelearning/issues/2963","RelatedDescription":"Open issue \"Create functional tests for all ONNX scenarios\" (#2963)"},{"Id":"421284175","IsPullRequest":true,"CreatedAt":"2019-03-14T23:08:21","Actor":"zeahmed","Number":"2962","RawContent":null,"Title":"Made 'StopWordsRemover' in TextFeaturizer configurable again.","State":"open","Body":"This PR addresses the StopWordsRemover issue in https://github.com/dotnet/machinelearning/issues/838\r\n\r\nThis PR make available two options to remove stop words.\r\n1. PredefinedStopWordsRemover: removes stops words using built in technique in ML.NET.\r\n2. UseCustomStopWordsRemover: User provides the list of stop words to remove. Currently `string[]` is exposed to collect that list.\r\n\r\nNo support is added to load stop words from file. I think if we make No.2 take list as `IEnumerable<string>` instead of `string[]` then user can load list on their own. Let me know if reviewers have any thought.","Url":"https://github.com/dotnet/machinelearning/pull/2962","RelatedDescription":"Open PR \"Made 'StopWordsRemover' in TextFeaturizer configurable again.\" (#2962)"},{"Id":"421271958","IsPullRequest":true,"CreatedAt":"2019-03-14T22:23:26","Actor":"shauheen","Number":"2961","RawContent":null,"Title":"Enable MyGet uploads again","State":"open","Body":"#2240 required to disable the upload. Seems the issue is fixed now.","Url":"https://github.com/dotnet/machinelearning/pull/2961","RelatedDescription":"Open PR \"Enable MyGet uploads again\" (#2961)"},{"Id":"421259205","IsPullRequest":true,"CreatedAt":"2019-03-14T21:46:31","Actor":"artidoro","Number":"2959","RawContent":null,"Title":"Hiding of ColumnOptions","State":"open","Body":"First step towards solving issue #2884.\r\n\r\nThe objective of this PR is to internalize the code that uses `ColumnOptions`. \r\nAll the commits are logically ordered.\r\n\r\n1. Internalization of the extensions using `ColumnOptions`\r\n2. Internalization of the `ColumnOptions` living on the estimators\r\n3. Update the extensions to make all the arguments in the `ColumnOptions` available through the extensions\r\n4. Updated the samples when possible, or moved them to the test folder when they contained `ColumnOptions`\r\n5. Other small changes to make the code compile\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2959","RelatedDescription":"Open PR \"Hiding of ColumnOptions\" (#2959)"},{"Id":"421257608","IsPullRequest":false,"CreatedAt":"2019-03-14T21:41:52","Actor":"ganik","Number":"2958","RawContent":null,"Title":"Duplicate param NormalizeFeatures for FieldAwareFactorizationMachineBinaryClassificationTrainer.Options ","State":"open","Body":"FieldAwareFactorizationMachineBinaryClassificationTrainer.Options (subclass of TrainerInputBaseWithWeight) has a parameter:\r\n[Argument(ArgumentType.AtMostOnce, HelpText = \"Whether to normalize the input vectors so that the concatenation of all fields' feature vectors is unit-length\", ShortName = \"norm\", SortOrder = 6)]\r\npublic bool Normalize = true;\r\n\r\nHowever base class TrainerInputBaseWithWeight already has such parameter:\r\n[Argument(ArgumentType.AtMostOnce, HelpText = \"Normalize option for the feature column\", ShortName = \"norm\", SortOrder = 5, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n        internal NormalizeOption NormalizeFeatures = NormalizeOption.Auto;\r\n\r\nWe have duplicate parameter to indicate whether to normalizes features.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2958","RelatedDescription":"Open issue \"Duplicate param NormalizeFeatures for FieldAwareFactorizationMachineBinaryClassificationTrainer.Options \" (#2958)"},{"Id":"421179861","IsPullRequest":false,"CreatedAt":"2019-03-14T18:30:16","Actor":"rogancarr","Number":"2957","RawContent":null,"Title":"FeaturizeText outputTokens uses a magical string to name a new column","State":"open","Body":"When using `OutputTokens=true`, `FeaturizeText` creates a new column called `${OutputColumnName}_TransformedText`. This isn't really well documented anywhere, and it's odd behavior. I suggest that we make the tokenized text column name explicit in the API.\r\n\r\nMy suggestion would be the following:\r\n- Change `OutputTokens = [bool]` to `OutputTokensColumn = [string]`, and a `string.NullOrWhitespace(OutputTokensColumn)` signifies that this column will not be created.\r\n\r\nWhat do you all think?","Url":"https://github.com/dotnet/machinelearning/issues/2957","RelatedDescription":"Open issue \"FeaturizeText outputTokens uses a magical string to name a new column\" (#2957)"},{"Id":"421171470","IsPullRequest":true,"CreatedAt":"2019-03-14T18:18:35","Actor":"rogancarr","Number":"2956","RawContent":null,"Title":"Updating OVA tests","State":"closed","Body":"Fix for OVA #2949  went in without updates to tests. This PR updates the tests to work with the new OVA API.\r\n\r\nFixes: #2955 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2956","RelatedDescription":"Closed or merged PR \"Updating OVA tests\" (#2956)"},{"Id":"421170418","IsPullRequest":false,"CreatedAt":"2019-03-14T18:18:35","Actor":"rogancarr","Number":"2955","RawContent":null,"Title":"Update tests for OVA","State":"closed","Body":"Fixes for OVA went in independently of updates to the tests. The tests need to be updated so that master builds.","Url":"https://github.com/dotnet/machinelearning/issues/2955","RelatedDescription":"Closed issue \"Update tests for OVA\" (#2955)"},{"Id":"420762734","IsPullRequest":true,"CreatedAt":"2019-03-14T17:54:05","Actor":"Ivanidzo4ka","Number":"2950","RawContent":null,"Title":"Get rid of public tuples","State":"closed","Body":"fixes #2881","Url":"https://github.com/dotnet/machinelearning/pull/2950","RelatedDescription":"Closed or merged PR \"Get rid of public tuples\" (#2950)"},{"Id":"420760127","IsPullRequest":true,"CreatedAt":"2019-03-14T17:52:49","Actor":"ganik","Number":"2949","RawContent":null,"Title":"Allow only binary classifiers in OVA","State":"closed","Body":"fixes #2920 ","Url":"https://github.com/dotnet/machinelearning/pull/2949","RelatedDescription":"Closed or merged PR \"Allow only binary classifiers in OVA\" (#2949)"},{"Id":"420945143","IsPullRequest":true,"CreatedAt":"2019-03-14T17:32:02","Actor":"llRandom","Number":"2953","RawContent":null,"Title":"Micro-accuracy for Multiclass Classification tests","State":"closed","Body":"Fixes #1268","Url":"https://github.com/dotnet/machinelearning/pull/2953","RelatedDescription":"Closed or merged PR \"Micro-accuracy for Multiclass Classification tests\" (#2953)"},{"Id":"421135717","IsPullRequest":false,"CreatedAt":"2019-03-14T16:54:51","Actor":"sfilipi","Number":"2954","RawContent":null,"Title":"The samples that are part of the Microsoft.ML.Samples project need to have a corresponding baseline test","State":"open","Body":"The samples currently have compile time checks, by being part of the solution, but not runtime validation. \r\nCreate a baseline test for each sample, to verify the output of their execution has not changed. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2954","RelatedDescription":"Open issue \"The samples that are part of the Microsoft.ML.Samples project need to have a corresponding baseline test\" (#2954)"},{"Id":"420790199","IsPullRequest":false,"CreatedAt":"2019-03-14T01:23:19","Actor":"vrjesus","Number":"2952","RawContent":null,"Title":"Create the Binary Classification With Array float values","State":"open","Body":"### Binary classification\r\n\r\nI want create a Machine Learning, but I need use a vector (array) of floats values (through of a sensor). My question is this, each value must be a Column or I must create a single Column with all values separate with a the comma?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2952","RelatedDescription":"Open issue \"Create the Binary Classification With Array float values\" (#2952)"},{"Id":"420768624","IsPullRequest":true,"CreatedAt":"2019-03-13T23:40:58","Actor":"maryamariyan","Number":"2951","RawContent":null,"Title":"[WIP] Separate nuget packaging into Stable and Experimental","State":"open","Body":"- [x] I added `StableProjects` property in a new `StablePackagesInfo.props` file, which has name of stable projects separated by semicolon.\r\n- [x] I set the strategy for having two separate versions by adding another file next to default `BranchInfo.props`, called `BranchInfo.Stable.props`. The files contain version information. Either of the two would be used depending on whether or not a project is listed in `StableProjects` property.\r\n- [x] I tested the assembly versions and nuget package versions using the diff in this PR.\r\n- [x] The conditions could perhaps be simplified more - needs review\r\n\r\nCurrently `BranchInfo.props` generates `0.12.0-preview` for all projects. The Major/Minor/Patch versions to set for stable projects are specified in `BranchInfo.Stable.props` and have identical values to `BranchInfo.props` until we decide to change them in the near future.\r\n\r\nFixes: #2279 \r\ncc: @eerhardt @TomFinley @Ivanidzo4ka @sfilipi @Anipik \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2951","RelatedDescription":"Open PR \"[WIP] Separate nuget packaging into Stable and Experimental\" (#2951)"},{"Id":"420740123","IsPullRequest":true,"CreatedAt":"2019-03-13T23:00:02","Actor":"rogancarr","Number":"2947","RawContent":null,"Title":"FeaturizeText: Add instructions to turn off char- or word-gram generation to the tooltip.","State":"closed","Body":"Adding a note on how to turn off char-grams and word-grams in `FeaturizeText`.\r\n\r\nFixes #2946 ","Url":"https://github.com/dotnet/machinelearning/pull/2947","RelatedDescription":"Closed or merged PR \"FeaturizeText: Add instructions to turn off char- or word-gram generation to the tooltip.\" (#2947)"},{"Id":"420710834","IsPullRequest":false,"CreatedAt":"2019-03-13T23:00:02","Actor":"rogancarr","Number":"2946","RawContent":null,"Title":"It is awkward to turn off char-grams with FeaturizeText","State":"closed","Body":"`FeaturizeText` was upgraded to allow specification of n-grams for words and characters. However, now it awkward to use `FeaturizeText` *without* specifying n-grams. It is now necessary to explicitly set `CharFeatureExtractor` as `null`.\r\n\r\nThis is how to compose a bag-of-words with the current API:\r\n```cs\r\nvar pipeline = mlContext.Transforms.Text.FeaturizeText(\r\n    \"Features\",\r\n    new TextFeaturizingEstimator.Options\r\n    {\r\n        KeepPunctuations = false,\r\n        OutputTokens = true,\r\n        CharFeatureExtractor = null,\r\n        WordFeatureExtractor = new WordBagEstimator.Options { NgramLength = 1},\r\n        VectorNormalizer = TextFeaturizingEstimator.NormFunction.None\r\n    },\r\n    \"SentimentText\");\r\n```\r\n\r\nI would expect to be able to do something like\r\n```cs\r\nCharFeatureExtractor = new WordBagEstimator.Options { NgramLength = 0},\r\n```\r\nBut this throws an error that `Skipgrams` is not less-than `NgramLength`, and `Skipgrams` must be positive.\r\n\r\nOverall, it is a bit awkward and not obvious that you have to manually null a option. Is this the API we want to ship in v1.0?","Url":"https://github.com/dotnet/machinelearning/issues/2946","RelatedDescription":"Closed issue \"It is awkward to turn off char-grams with FeaturizeText\" (#2946)"},{"Id":"420753999","IsPullRequest":true,"CreatedAt":"2019-03-13T22:49:04","Actor":"singlis","Number":"2948","RawContent":null,"Title":"WIP: Updating LightGBM Arguments","State":"open","Body":"This PR moves the LightGBM options from an all-in-one class to individual options for the binary, multiclass, regression and ranker trainers. \r\n- Options code that used to live in LightGbmArguments has moved to LightGbmBaseTrainer. Each trainer now has their own respective options class. \r\n- The booster options have changed a bit to hide the IBoosterFactory interface #2559 \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2948","RelatedDescription":"Open PR \"WIP: Updating LightGBM Arguments\" (#2948)"},{"Id":"420648744","IsPullRequest":true,"CreatedAt":"2019-03-13T20:46:59","Actor":"wschin","Number":"2944","RawContent":null,"Title":"Scrub text featurizers","State":"closed","Body":"Last step of #2832.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2944","RelatedDescription":"Closed or merged PR \"Scrub text featurizers\" (#2944)"},{"Id":"420685279","IsPullRequest":false,"CreatedAt":"2019-03-13T19:41:32","Actor":"RussellKirkwood","Number":"2945","RawContent":null,"Title":"Ignore a column on Training","State":"open","Body":"### System information\r\n\r\n- Win10\r\n- .net core 2.1\r\n\r\nCan I tell Training to Ignore Columns in Training Data\r\n\r\nI tried just leaving them out of Features but that does not appear to work. I thought by not including them in Features it would ignore, but prediction results are not good. If I totaly remove those fields from Data, then my predictions are really good.\r\n\r\nI would like to ignore IncidentReportedByID, IncidentReportedMethod and ID.\r\n```\r\npublic class MyData\r\n    {\r\n        [LoadColumn(0)]\r\n        public float State;\r\n\r\n        [LoadColumn(1)]\r\n        public float City;\r\n\r\n        [LoadColumn(2)]\r\n        public float IncidentType;\r\n\r\n        [LoadColumn(3)]\r\n        public float IncidentReportedByID;\r\n\r\n        [LoadColumn(4)]\r\n        public float IncidentReportedMethod;\r\n        \r\n        [LoadColumn(5)]\r\n        public float Label;\r\n    }\r\n```\r\n\r\nmy training looks like this\r\n```\r\nvar dataProcessPipeline = mlContext.Transforms.Concatenate(DefaultColumnNames.Features, nameof(MyData.State),                                                                                   nameof(MyData.City),\r\n                                                                                   nameof(MyData.IncidentType),                                                                                   \r\n                                                                       .AppendCacheCheckpoint(mlContext);\r\n           \r\n            var trainer = mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumnName: DefaultColumnNames.Label, featureColumnName: DefaultColumnNames.Features);\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2945","RelatedDescription":"Open issue \"Ignore a column on Training\" (#2945)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-15T05:30:31.4994878Z","RunDurationInMilliseconds":598}