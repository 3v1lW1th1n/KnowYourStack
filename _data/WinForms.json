{"Data":{"GitHub":{"Issues":[{"Id":"604429265","IsPullRequest":true,"CreatedAt":"2020-04-22T03:55:13","Actor":"RussKie","Number":"3116","RawContent":null,"Title":"Disable tests that rely on RemoteExecutor","State":"closed","Body":"See: https://github.com/dotnet/arcade/issues/5325\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3116)","Url":"https://github.com/dotnet/winforms/pull/3116","RelatedDescription":"Closed or merged PR \"Disable tests that rely on RemoteExecutor\" (#3116)"},{"Id":"604420856","IsPullRequest":true,"CreatedAt":"2020-04-22T03:15:03","Actor":"RussKie","Number":"3115","RawContent":null,"Title":"Validate requested clipboard formats","State":"open","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nContributes to tests stability work.\r\n\r\n## Proposed changes\r\n\r\nCertain clipboard tests failed because they fed in `null` and empty string as formats. These would ultimately lead to failure when we attempted to register these formats with `RegisterClipboardFormatW` call.\r\n\r\n```\r\n[xUnit.net 00:00:09.54]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: \"\") [FAIL]\r\n[xUnit.net 00:00:09.54]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: null) [FAIL]\r\n  X System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: \"\") [3ms]\r\n  Error Message:\r\n   System.ComponentModel.Win32Exception : Clipboard format registration did not succeed.\r\n  Stack Trace:\r\n     at System.Windows.Forms.DataFormats.GetFormat(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataFormats.cs:line 188\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresentInner(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1764\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1782      \r\n   at System.Windows.Forms.DataObject.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 229\r\n   at System.Windows.Forms.Clipboard.ContainsData(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Clipboard.cs:line 255\r\n   at System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ClipboardTests.cs:line 56\r\n\r\n  X System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(format: null) [2ms]\r\n  Error Message:\r\n   System.ComponentModel.Win32Exception : Clipboard format registration did not succeed.\r\n  Stack Trace:\r\n     at System.Windows.Forms.DataFormats.GetFormat(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataFormats.cs:line 188\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresentInner(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1764\r\n   at System.Windows.Forms.DataObject.OleConverter.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 1782      \r\n   at System.Windows.Forms.DataObject.GetDataPresent(String format, Boolean autoConvert) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\DataObject.cs:line 229\r\n   at System.Windows.Forms.Clipboard.ContainsData(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Clipboard.cs:line 255\r\n   at System.Windows.Forms.Tests.ClipboardTests.Clipboard_ContainsData_InvokeMultipleTimes_Success(String format) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\ClipboardTests.cs:line 56\r\n                                                                                                                                                                                                                [xUnit.net 00:00:09.67]     System.Windows.Forms.Tests.ClipboardTests.Clipboard_GetDataObject_InvokeMultipleTimes_Success [FAIL]\r\n```\r\n\r\nClamp down on this and ensure these formats are rejected up front.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Some customers may see it as a breaking changes, since instead of `Win32Exception` we'll now be throwing `ArgumentException` if `null`, empty string or whitespaces are passed in.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal, handling of an edge-case scenario\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- existing `ClipboardTests` now succeed\r\n- new tests to `DataFormatsTests`\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3115)","Url":"https://github.com/dotnet/winforms/pull/3115","RelatedDescription":"Open PR \"Validate requested clipboard formats\" (#3115)"},{"Id":"604280305","IsPullRequest":true,"CreatedAt":"2020-04-22T01:00:07","Actor":"mmitche","Number":"3113","RawContent":null,"Title":"Remove unnecessary coherency attributes and prepare for strict coherency","State":"closed","Body":"Remove the unnecessary coherency attributes. These coherency attributes\r\nare not needed because the packages are produced in the same build as\r\nthe CPD parent.\r\n\r\nThis also prepares this repo for 'strict' coherency\r\nhttps://github.com/dotnet/arcade/issues/5195. Strict coherency is\r\nsignificantly simpler and resolves a few cases where legacy CPD can\r\ndowngrade dependencies in incremental servicing. It looks in the CPD\r\nparent's version.details.xml file to find the the CPD dependency, then\r\nupdates to that version. In winforms case, the CPD's dependencies are not\r\ndependended on within runtime's own build, and the CPD attribute should be removed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3113)","Url":"https://github.com/dotnet/winforms/pull/3113","RelatedDescription":"Closed or merged PR \"Remove unnecessary coherency attributes and prepare for strict coherency\" (#3113)"},{"Id":"604341975","IsPullRequest":true,"CreatedAt":"2020-04-22T00:44:36","Actor":"dotnet-maestro[bot]","Number":"3114","RawContent":null,"Title":"[release/5.0-preview4] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:440f0db1-50fd-4e00-9b1a-08d7e1735b84)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 440f0db1-50fd-4e00-9b1a-08d7e1735b84\r\n- **Build**: 20200421.7\r\n- **Date Produced**: 4/21/2020 9:58 PM\r\n- **Commit**: b7cdadcc6de83f2138dc86dac14870af3b27d373\r\n- **Branch**: refs/heads/release/5.0-preview4\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20218.3 to 5.0.0-preview.4.20221.7\r\n\r\n[marker]: <> (End:440f0db1-50fd-4e00-9b1a-08d7e1735b84)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3114)","Url":"https://github.com/dotnet/winforms/pull/3114","RelatedDescription":"Closed or merged PR \"[release/5.0-preview4] Update dependencies from dotnet/runtime\" (#3114)"},{"Id":"603761994","IsPullRequest":true,"CreatedAt":"2020-04-22T00:35:27","Actor":"RussKie","Number":"3103","RawContent":null,"Title":"Manually add publishing for p4 and p5 channels while arcade is not flowing","State":"closed","Body":"As per instructions\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3103)","Url":"https://github.com/dotnet/winforms/pull/3103","RelatedDescription":"Closed or merged PR \"Manually add publishing for p4 and p5 channels while arcade is not flowing\" (#3103)"},{"Id":"604201416","IsPullRequest":true,"CreatedAt":"2020-04-21T18:42:31","Actor":"hughbe","Number":"3112","RawContent":null,"Title":"Add some initial DataGridViewColumnCollection tests","State":"open","Body":"## Proposed Changes\r\n- Add some initial DataGridViewColumnCollection tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3112)","Url":"https://github.com/dotnet/winforms/pull/3112","RelatedDescription":"Open PR \"Add some initial DataGridViewColumnCollection tests\" (#3112)"},{"Id":"604183995","IsPullRequest":true,"CreatedAt":"2020-04-21T18:13:11","Actor":"lonitra","Number":"3111","RawContent":null,"Title":"Fix: StringCollectionEditor Unable to Create Instance of Type System.String","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3049\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add a mapping for `StringCollection` in `UITypeEditor`so correct editor opens \r\n- Explicit checks if `itemType` is of type `string` so user will still be able to create instances of a `string` if we don't have a mapping for the editor on the collection of `string` that the user is trying to invoke\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will no longer see an error message when trying to create instances of `string` with an editor on a collection of `string` we don't have a mapping to\r\n- Customers will see the correct editor for an editor on type `StringCollection`\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n**Incorrect Editor:**\r\n![image](https://user-images.githubusercontent.com/30007367/79895874-70560f80-83bc-11ea-9887-3f15537e421d.png)\r\n\r\n**Error Message:**\r\n![image](https://user-images.githubusercontent.com/30007367/79897115-16564980-83be-11ea-9464-fc23430b0bda.png)\r\n\r\n### After\r\n**Correct Editor shown:**\r\n![image](https://user-images.githubusercontent.com/30007367/79896267-012ceb00-83bd-11ea-854c-05d6fb0dc41e.png)\r\n\r\n**Fixed error for the case we don't have mapping for an editor on the collection of string user is trying to invoke:**\r\n![image](https://user-images.githubusercontent.com/30007367/79896737-96c87a80-83bd-11ea-9f7d-d5c60691eb2d.png)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Did some manual testing, but will need to be tested further\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3111)","Url":"https://github.com/dotnet/winforms/pull/3111","RelatedDescription":"Open PR \"Fix: StringCollectionEditor Unable to Create Instance of Type System.String\" (#3111)"},{"Id":"604012465","IsPullRequest":true,"CreatedAt":"2020-04-21T13:47:12","Actor":"hughbe","Number":"3110","RawContent":null,"Title":"Add some more TabPage related tests for Visual Styles coverage","State":"open","Body":"## Proposed Changes\r\n- Add some more TabPage related tests for Visual Styles coverage\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3110)","Url":"https://github.com/dotnet/winforms/pull/3110","RelatedDescription":"Open PR \"Add some more TabPage related tests for Visual Styles coverage\" (#3110)"},{"Id":"603971671","IsPullRequest":true,"CreatedAt":"2020-04-21T12:49:14","Actor":"M-Lipin","Number":"3109","RawContent":null,"Title":"Fixng issue 3099 property descriptor grid entry accesible collapsed is incorrect","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3099\r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding the test to reveal the issue with providing incorrect Collapsed/expanded accessible status for PropertyDescriptorGridEntries (like for expandable Font property).\r\n- Fixing the issue with providing incorrect Collapsed/expanded accessible status for PropertyDescriptorGridEntries - with the fix if property row is expanded then Expanded accessible state is provided.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Screen reader users will be able to distinguish the state of expandable PropertyGrid entries (like Font).\r\n- There will be no inaccuracy when providing accessible collapsed/expanded state for PropertyGrid entries.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![Before](https://user-images.githubusercontent.com/23213980/79867699-6dbcdf80-83e7-11ea-96de-b5f2a91d5a4d.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![After](https://user-images.githubusercontent.com/23213980/79867706-71506680-83e7-11ea-9cc5-77df54dc0e6f.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\nC:\\Users\\v-milipi>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3109)","Url":"https://github.com/dotnet/winforms/pull/3109","RelatedDescription":"Open PR \"Fixng issue 3099 property descriptor grid entry accesible collapsed is incorrect\" (#3109)"},{"Id":"603900352","IsPullRequest":false,"CreatedAt":"2020-04-21T10:48:39","Actor":"weltkante","Number":"3108","RawContent":null,"Title":"Revisit facade versioning for 5.0","State":"open","Body":"**.NET Core Version:**\r\nmaster branch / 5.0 preview releases\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nNo\r\n\r\n**Problem description:**\r\nWinForms versions its facade assemblies as 5.0 while the dotnet runtime repository versions its facade assemblies as 4.0. This means depending on the selected SDK you'll either compile against a 4.0 or a 5.0 version of `System.Drawing`, even though the WinForms facade is supposed to replace the dotnet runtime version.\r\n\r\nIn #2413 the guidance was [to not version facades](https://github.com/dotnet/winforms/issues/2413#issuecomment-615273450):\r\n> For desktop compat shims don’t change the assembly version. Don’t remove types, maintain APICompat with previous release. APICompat should catch problems where you remove type forwards.\r\n>\r\n> .NETCore does allow newer assembly versions to automatically satisfy older references, but there is no good reason to version the compat shims since they have no types.\r\n\r\nSince #2413 was fixed without resolving the versioning discussion I'm opening this follow-up issue.\r\n\r\n**Expected behavior:**\r\nWinForms and dotnet runtime should agree about versioning facades.\r\n\r\n**Minimal repro:**\r\n* Build a project against `Microsoft.NET.Sdk` and you get `System.Drawing` in version 4.0 from `Microsoft.NetCore.App`\r\n* Build a project against `Microsoft.NET.Sdk.WindowsDesktop` and you get `System.Drawing` in version 5.0","Url":"https://github.com/dotnet/winforms/issues/3108","RelatedDescription":"Open issue \"Revisit facade versioning for 5.0\" (#3108)"},{"Id":"603900107","IsPullRequest":true,"CreatedAt":"2020-04-21T10:48:15","Actor":"hughbe","Number":"3107","RawContent":null,"Title":"Add ListBox.ObjectCollection tests and fix bugs","State":"open","Body":"## Proposed Changes\r\n- Validate owner in ListBox.ObjectCollection constructor\r\n- Validate destination in ListBox.ObjectCollection.CopyTo\r\n- Validate owner.CheckDataSource in ListBox.ObjectCollection.Remove\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3107)","Url":"https://github.com/dotnet/winforms/pull/3107","RelatedDescription":"Open PR \"Add ListBox.ObjectCollection tests and fix bugs\" (#3107)"},{"Id":"603816524","IsPullRequest":false,"CreatedAt":"2020-04-21T08:38:21","Actor":"weltkante","Number":"3106","RawContent":null,"Title":"Remove workaround for facade reference","State":"open","Body":"**.NET Core Version:**\r\n.NET Core 5.0 (master branch)\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nNo (not applicable)\r\n\r\n**Problem description:**\r\nFor resolution of issue #2413 (PR #3098) a workaround for dotnet/sdk#3254 is required, this issue serves for tracking removal of the workaround once the SDK bug is resolved.\r\n\r\nThe bug affects all ProjectReference in that the generated deps.json doesn't contain the referenced version number, but currently only for System.Drawing it is causing problems for assembly resolution, so the workaround is only present there. Might be added to other references as required.\r\n\r\n**Expected behavior:**\r\nNo workaround required for `ProjectReference` to a facade assembly\r\n\r\n**Minimal repro:**\r\nReference a facade assembly and observe that the deps.json produced as build output does not include the version of the assembly you referenced:\r\n\r\n```json\r\n        \"runtime\": {\r\n          \"System.Drawing.dll\": {}\r\n        }\r\n```","Url":"https://github.com/dotnet/winforms/issues/3106","RelatedDescription":"Open issue \"Remove workaround for facade reference\" (#3106)"},{"Id":"603431851","IsPullRequest":true,"CreatedAt":"2020-04-21T08:00:55","Actor":"weltkante","Number":"3098","RawContent":null,"Title":"Fix facade reference and unskip unit test","State":"closed","Body":"Fixes #2413\r\n\r\n## Proposed changes\r\n\r\nAdd reference to System.Drawing facade in order to be able to unit-test it. If you don't do this you inherit the System.Drawing from shared framework `Microsoft.NetCore.App` which does not contain the same redirects as the WinForms version, in particular the `UITypeEditor` redirect is missing.\r\n\r\n## Open questions\r\n\r\n* In the issue discussion it was noted that WinForms should not update the facade versions to 5.0 but instead keep them at 4.0 like the shared framework does.\r\n  * The facades don't contain any code, they'll always be a redirect of the Desktop Version for compatibility and not get any new stuff\r\n  * WinForms and the shared framework should agree about versioning, if the base framework doesn't level its facades for 5.0 neither should do WinForms for facades its replacing.\r\n\r\n  The versioning problem does not prevent fixing the unit tests so it could be split off into a separate issue\r\n\r\n* The PR contains a workaround for dotnet/sdk#3254 - will create a follow-up issue to track removal of the workaround unless something better can be figured out\r\n\r\n## Customer Impact\r\n\r\nas is the PR has no customer impact\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades this change is visible to users who already compiled against a 5.0 preview\r\n\r\n## Regression? \r\n\r\nunclear, probably not (the regression part of not redirecting UITypeEditor should already have been fixed, we just couldn't test it)\r\n\r\n## Risk\r\n\r\nlow, as-is the PR only affects unit tests\r\n\r\nonce we roll back the 5.0 versioning of System.Drawing and other facades there may be some risk of breaking people who already have been compiling against earlier 5.0 previews and built nuget packages and stuff, but thats probably acceptable since its a preview?\r\n\r\n## Test methodology\r\n\r\nskipped unit test now passes, test is now able to confirm what already was present in the product\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3098)","Url":"https://github.com/dotnet/winforms/pull/3098","RelatedDescription":"Closed or merged PR \"Fix facade reference and unskip unit test\" (#3098)"},{"Id":"603782796","IsPullRequest":true,"CreatedAt":"2020-04-21T07:46:06","Actor":"RussKie","Number":"3105","RawContent":null,"Title":"Move to NetCorePublic-Pool","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3105)","Url":"https://github.com/dotnet/winforms/pull/3105","RelatedDescription":"Open PR \"Move to NetCorePublic-Pool\" (#3105)"},{"Id":"603773825","IsPullRequest":true,"CreatedAt":"2020-04-21T07:30:56","Actor":"dotnet-maestro[bot]","Number":"3104","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NetCore.ILAsm)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NETCore.App)\r\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5 (parent: Microsoft.NetCore.ILAsm)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200421.5\r\n- **Date Produced**: 4/21/2020 4:54 PM\r\n- **Commit**: 6bb37e1fbac49eec470f277dd6c1f84f472fd78b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.CodeDom**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Drawing.Common**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Security.Permissions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.4.20220.15 to 5.0.0-preview.4.20221.5\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3104)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3104","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3104)"},{"Id":"603756189","IsPullRequest":true,"CreatedAt":"2020-04-21T07:19:26","Actor":"RussKie","Number":"3102","RawContent":null,"Title":"Disable tests suspected to cause deadlocks","State":"closed","Body":"See: #3095\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3102)","Url":"https://github.com/dotnet/winforms/pull/3102","RelatedDescription":"Closed or merged PR \"Disable tests suspected to cause deadlocks\" (#3102)"},{"Id":"603608188","IsPullRequest":false,"CreatedAt":"2020-04-20T23:53:34","Actor":"JeremyKuhne","Number":"3101","RawContent":null,"Title":"Should always use Unicode in RichTextBox","State":"open","Body":"`RichTextBox` uses the latest RichEdit and as such should be able to remove the code paths where we're grabbing `Encoding` and converting back and forth from Unicode to ASCII. If we're using Unicode everywhere we can be more efficient and avoid conversion headaches.\r\n\r\nSee #3032 for an example of where this happens.","Url":"https://github.com/dotnet/winforms/issues/3101","RelatedDescription":"Open issue \"Should always use Unicode in RichTextBox\" (#3101)"},{"Id":"603606594","IsPullRequest":true,"CreatedAt":"2020-04-20T23:48:35","Actor":"JeremyKuhne","Number":"3100","RawContent":null,"Title":"Fix RichTextBox Rtf encoding","State":"open","Body":".NET Core Encoding.Default gets UTF-8, not the default code page. Change our code to get the code page as we're sending\r\ndata to the control as ASCII.\r\n\r\nUltimately we should remove all non-Unicode codePaths in RichTextBox. This should be possible as we're force loading the latest RichEdit.\r\n\r\nFixes #3032\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3100)","Url":"https://github.com/dotnet/winforms/pull/3100","RelatedDescription":"Open PR \"Fix RichTextBox Rtf encoding\" (#3100)"},{"Id":"603484569","IsPullRequest":false,"CreatedAt":"2020-04-20T19:38:29","Actor":"M-Lipin","Number":"3099","RawContent":null,"Title":"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nProperty Grid sub-level item accessibility: Narrator announces collapsed when Font Property node is expanded, `ExpandCollapse.ExpandCollapseState` value is `Collapsed(0)`.\r\n\r\n\r\n**Expected behavior:**\r\nCollapsed Property Grid sub-level items should be announced as collapsed and Inspect should show collapsed state for these items.\r\nExpanded Property Grid sub-level items should be announced as expanded and Inspect should show expanded state for these items.\r\n\r\n**Minimal repro:**\r\n1. Create WinForms app and add PropertyGrid control and Button to the form.\r\n2. Set PropertyGrid's SelectedObject to Button.\r\n3. Run the app and review the Font property of the button in PropertyGrid using Inspect: expand and collapse the Font property and review its collapsed/expanded state.\r\n\r\n![Inspect](https://user-images.githubusercontent.com/23213980/79792675-fab85800-8357-11ea-8be6-5626ef339929.png)\r\n![Announcement](https://user-images.githubusercontent.com/23213980/79792699-01df6600-8358-11ea-8fe4-a851da9d790e.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3099","RelatedDescription":"Open issue \"Accessibility: PropertyGrid sub-level item expanded/collapsed state is not correct\" (#3099)"},{"Id":"603275470","IsPullRequest":true,"CreatedAt":"2020-04-20T14:19:11","Actor":"weltkante","Number":"3097","RawContent":null,"Title":"Avoid Application.Exit in unit tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3095\r\n\r\n## Proposed changes\r\n\r\nDon't use `Application.Exit` because that will exit all threads and thus risks deadlock (and also makes other tests unstable if they exit unexpectedly). Using `Application.ExitThread` will exit just the current thread.\r\n\r\nIf the test was intended to cover `Application.Exit` usage it must be changed to execute in an isolated process since that method being global will interfere with other tests.\r\n\r\n## Customer Impact\r\n\r\nNone, issue is caused by unit test.\r\n\r\n## Regression? \r\n\r\nUnknown, caused by wrong usage of global API, no idea how that classifies.\r\n\r\n## Risk\r\n\r\nnone, this change is isolated to unit tests\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nRun `build.cmd -test` repeatedly locally to see if there are deadlocks.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3097)","Url":"https://github.com/dotnet/winforms/pull/3097","RelatedDescription":"Open PR \"Avoid Application.Exit in unit tests\" (#3097)"},{"Id":"603258538","IsPullRequest":true,"CreatedAt":"2020-04-20T13:55:50","Actor":"hughbe","Number":"3096","RawContent":null,"Title":"Avoid allocating array for ListBox SelectionMode.One","State":"open","Body":"## Proposed Changes\r\n- Avoid allocating array for ListBox SelectionMode.One\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3096)","Url":"https://github.com/dotnet/winforms/pull/3096","RelatedDescription":"Open PR \"Avoid allocating array for ListBox SelectionMode.One\" (#3096)"},{"Id":"603209619","IsPullRequest":false,"CreatedAt":"2020-04-20T12:44:04","Actor":"weltkante","Number":"3095","RawContent":null,"Title":"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests","State":"open","Body":"**.NET Core Version:**\r\nmaster branch, compiled locally, probably present in all versions having this test but didn't check\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot relevant, you can probably cause it there too though\r\n\r\n**Problem description:**\r\nExecuting `Application.Exit` inside a `Form.Load` event handler can lead to a deadlock when using more than one UI thread. This is because Form.Load is invoked with locks already held and `Application.Exit` needs more global locks. These locks may already be held by a different UI thread currently waiting to create a new control.\r\n\r\nUpon further investigation it turns out the real problem is that `Application.Exit` wants to exit all threads not just the current UI threads application (thats why it needs a lock)\r\n* never use `Application.Exit` in multithreaded unit tests\r\n  * use isolated processes if you need to test something related with `Application.Exit`\r\n  * use `Application.ExitThread` to exit just the current thread (probably the intended behavior here)\r\n  * use `ApplicationContext` if you want controlled shutdown of a single application frame\r\n* generally you'll want to keep logic in `Form.Load` or `UserControl.Load` events very simple in the multithreaded unit tests because this logic is executed under locks. Testing complex load events should preferrably be done in separate processes.\r\n\r\n**Expected behavior:**\r\nNo deadlock\r\n\r\n**Minimal repro:**\r\nNot available. You could try repeatedly running the tests from console (`build.cmd -test`) but since this is a threading issue the deadlock is random and probably hard to reproduce. You might be able to build a more reliable repro scenario by repeatedly starting UI threads in a tight loop and having someone randomly call `Application.Exit` from a Load event handler.","Url":"https://github.com/dotnet/winforms/issues/3095","RelatedDescription":"Open issue \"Deadlock caused by PropertyGridViewRowsAccessibleObjectTests\" (#3095)"},{"Id":"603197985","IsPullRequest":true,"CreatedAt":"2020-04-20T12:24:27","Actor":"hughbe","Number":"3094","RawContent":null,"Title":"Add ListBox.IntegerCollection tests and fix bugs","State":"open","Body":"Proposed Changes\r\n- Validate owner in ListBox.IntegerCollection constructor: fixes #3092\r\n- Validate index in ListBox.IntegerCollection item accessor\r\n- Validate destination in LisBox.IntegerCollection.CopyTo\r\n- Make ListBox.IntegerCollection.IsSynchronized return false: contributes to #3088 \r\n\r\nShould I create issues for each of the other fixes?\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3094)","Url":"https://github.com/dotnet/winforms/pull/3094","RelatedDescription":"Open PR \"Add ListBox.IntegerCollection tests and fix bugs\" (#3094)"},{"Id":"603146325","IsPullRequest":false,"CreatedAt":"2020-04-20T10:58:50","Actor":"hughbe","Number":"3093","RawContent":null,"Title":"ListBox.IntegerCollection should contain unique values, but if we use the item setter, we can have duplicated","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n`ListBox.IntegerCollection` should be a collection of unique integers. However, if we call the `collection[index] = valueAlreadyInCollection` we can end up with duplicates - see repro\r\n\r\n**Expected behavior:**\r\n\r\nWe should not add the duplicate. We should also sort the array\r\n\r\n**Minimal repro:**\r\n\r\nNotice that the collection contains duplicates and is not sorted\r\n```cs\r\n[WinFormsFact]\r\npublic void ListBoxIntegerCollection_IListItem_Set_ReturnsExpected()\r\n{\r\n    using var owner = new ListBox();\r\n    IList collection = new ListBox.IntegerCollection(owner);\r\n    collection.Add(2);\r\n    collection.Add(1);\r\n    collection.Add(1);\r\n    collection.Add(3);\r\n\r\n    // Set first.\r\n    collection[0] = 4;\r\n    Assert.Equal(new int[] { 4, 2, 3 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n    \r\n    // Set middle.\r\n    collection[1] = 1;\r\n    Assert.Equal(new int[] { 4, 1, 3 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n    \r\n    // Set last.\r\n    collection[2] = 4;\r\n    Assert.Equal(new int[] { 4, 1, 4 }, collection.Cast<int>());\r\n    Assert.Empty(owner.CustomTabOffsets);\r\n    Assert.False(owner.IsHandleCreated);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3093","RelatedDescription":"Open issue \"ListBox.IntegerCollection should contain unique values, but if we use the item setter, we can have duplicated\" (#3093)"},{"Id":"603139466","IsPullRequest":false,"CreatedAt":"2020-04-20T10:48:04","Actor":"hughbe","Number":"3092","RawContent":null,"Title":"ListBox.IntegerCollection item indexer doesn't throw for some invalid indices","State":"open","Body":"* .NET Core Version: \r\nMaster branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n`_innerArray` has a greater buffer size than the collection itself so if we index between `collection.Count` and `_innerArray.Length` then we return `0` (uninitialised buffer).\r\n\r\nALSO, if the collection is empty (and `_innerArray == null`) then we throw `NullReferenceException`\r\n\r\n```cs\r\npublic int this[int index]\r\n{\r\n    get\r\n    {\r\n        return innerArray[index];\r\n    }\r\n    set\r\n    {\r\n        if (index < 0 || index >= count)\r\n        {\r\n            throw new ArgumentOutOfRangeException(nameof(index), index, string.Format(SR.InvalidArgument, nameof(index), index));\r\n        }\r\n        innerArray[index] = (int)value;\r\n        owner.UpdateCustomTabOffsets();\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nWe should throw `ArgumentOutOfRangeException` in the setter as we do in the getter.\r\n\r\nNote this would change the exception from `IndexOutOfRangeException` or `NullReferenceException` but would be an improvement\r\n\r\n**Minimal repro:**\r\n\r\n```cs\r\n\r\n\r\n[WinFormsTheory]\r\n[InlineData(-1)]\r\n[InlineData(0)]\r\n[InlineData(1)]\r\npublic void ListBoxIntegerCollection_Item_GetInvalidIndexEmpty_ThrowsArgumentOutOfRangeException(int index)\r\n{\r\n    using var owner = new ListBox();\r\n    var collection = new ListBox.IntegerCollection(owner);\r\n    Assert.Throws<ArgumentOutOfRangeException>(\"index\", () => collection[index]);\r\n}\r\n\r\n[WinFormsTheory]\r\n[InlineData(-1)]\r\n[InlineData(1)]\r\n[InlineData(2)]\r\npublic void ListBoxIntegerCollection_Item_GetInvalidIndexNotEmpty_ThrowsArgumentOutOfRangeException(int index)\r\n{\r\n    using var owner = new ListBox();\r\n    var collection = new ListBox.IntegerCollection(owner);\r\n    collection.Add(1);\r\n    Assert.Throws<ArgumentOutOfRangeException>(\"index\", () => collection[index]);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3092","RelatedDescription":"Open issue \"ListBox.IntegerCollection item indexer doesn't throw for some invalid indices\" (#3092)"},{"Id":"602846966","IsPullRequest":false,"CreatedAt":"2020-04-19T23:12:49","Actor":"hughbe","Number":"3091","RawContent":null,"Title":"Test errors in Pipelines include Msbuild environment variable names","State":"open","Body":"See https://dev.azure.com/dnceng/public/_build/results?buildId=607683&view=ms.vss-test-web.build-test-results-tab\r\n\r\n![image](https://user-images.githubusercontent.com/1275900/79702279-9b950d80-829b-11ea-8af9-cc1f6fc98f22.png)\r\n\r\n\r\nWe have `$(AgentOsName)` in the logs which should be replaced with the real value","Url":"https://github.com/dotnet/winforms/issues/3091","RelatedDescription":"Open issue \"Test errors in Pipelines include Msbuild environment variable names\" (#3091)"},{"Id":"602845588","IsPullRequest":false,"CreatedAt":"2020-04-19T23:05:44","Actor":"hughbe","Number":"3090","RawContent":null,"Title":"It doesn't look like `IClassFixture<ThreadExceptionFixture>` is working","State":"open","Body":"See https://github.com/dotnet/winforms/pull/3089\r\n\r\nTest failures are hanging... Adding the code from `ThreadExceptionFixture` directly into the test class prevents the hang\r\n\r\n/cc @weltkante ","Url":"https://github.com/dotnet/winforms/issues/3090","RelatedDescription":"Open issue \"It doesn't look like `IClassFixture<ThreadExceptionFixture>` is working\" (#3090)"},{"Id":"602822422","IsPullRequest":true,"CreatedAt":"2020-04-19T21:18:08","Actor":"hughbe","Number":"3089","RawContent":null,"Title":"Consolidate CHARFORMATW and CHARFORMAT2W","State":"open","Body":"## Proposed Changes\r\n- Consolidate CHARFORMATW and CHARFORMAT2W\r\n\r\nWe only need one definition of `CHARFORMATW`, and that is the one with the most functionality, i.e. `CHARFORMAT2W`\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3089)","Url":"https://github.com/dotnet/winforms/pull/3089","RelatedDescription":"Open PR \"Consolidate CHARFORMATW and CHARFORMAT2W\" (#3089)"},{"Id":"602784994","IsPullRequest":false,"CreatedAt":"2020-04-19T18:16:54","Actor":"hughbe","Number":"3088","RawContent":null,"Title":"ListBox collections have varied `IsSynchronized` method implementations","State":"open","Body":"- `ListBox.SelectedIndexCollection` and `ListBox.IntegerCollection`  have `IsSynchronized == true`\r\n- `ListBox.SelectedObjectCollection` and `ListBox.ObjectCollection` have `IsSynchronized == false`\r\n\r\nIt appears both are actually not synchronized, so should return `IsSynchronized == false`\r\n","Url":"https://github.com/dotnet/winforms/issues/3088","RelatedDescription":"Open issue \"ListBox collections have varied `IsSynchronized` method implementations\" (#3088)"},{"Id":"602783297","IsPullRequest":false,"CreatedAt":"2020-04-19T18:09:55","Actor":"hughbe","Number":"3087","RawContent":null,"Title":"ListBox.SelectedIndexCollection modification works but IList versions throw NotSupportedException","State":"open","Body":"## Example Problems\r\nE.g.\r\n```cs\r\nvoid IList.Clear()\r\n{\r\n    throw new NotSupportedException(SR.ListBoxSelectedIndexCollectionIsReadOnly);\r\n}\r\n\r\npublic void Clear()\r\n{\r\n    if (owner != null)\r\n    {\r\n        owner.ClearSelected();\r\n    }\r\n}\r\n```\r\n\r\nAlso, the properties `IsFixedSize` and `IsReadOnly` return `true`, but this is quite clearly not the case\r\n\r\n## Proposed Changes\r\n- Modify `IsFixedSize` and `IsReadOnly` to `false`\r\n- Modify the IList modification methods to call the non-IList methods on the collection: `Add`, `Clear`, `Remove`\r\n\r\nThoughts? This would be breaking, but in the way that is good as we change exception to something functional: see https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/docs/coding-guidelines/breaking-changes.md","Url":"https://github.com/dotnet/winforms/issues/3087","RelatedDescription":"Open issue \"ListBox.SelectedIndexCollection modification works but IList versions throw NotSupportedException\" (#3087)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-22T05:30:50.9864949Z","RunDurationInMilliseconds":909}