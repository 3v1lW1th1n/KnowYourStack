{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":65,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7546509019","Type":"PullRequestEvent","CreatedAt":"2018-04-18T03:19:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17617","RelatedDescription":"Merged pull request \"Ensure thumb bit is set when searching for debugger jit info on ARM\" (#17617) at dotnet/coreclr","RelatedBody":"This ensures that the ARM thumb bit is set on ARM platforms when searching for _DebuggerJitInfo_ in DebuggerMethodInfo::FindOrCreateInitAndAddJitInfo.\r\n\r\nWhen adding breakpoints the thumb bit **is** set, where here wasn't, leading to two instances of _DebuggerJitInfo_ being created for the same underlying code in certain circumstances. This can then lead to multiple patches being applied to the same code when creating breakpoints, ending in the created breakpoint being hit twice. "},{"Id":"7546265309","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:56:33","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17635","RelatedDescription":null,"RelatedBody":"Fixes #17393"},{"Id":"7546265133","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:56:30","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17635","RelatedDescription":"Closed pull request \"Fix reading Time zone rules using Julian days\" (#17635) at dotnet/coreclr","RelatedBody":"Fixes #17393"},{"Id":"7546261985","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:55:29","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17633","RelatedDescription":"Merged pull request \"Adjust non-PR triggers\" (#17633) at dotnet/coreclr","RelatedBody":"1. Enable weekly Ubuntu arm32 GCStress jobs.\r\n2. Fix bugs where both flow and non-flow jobs were being triggered for some configurations.\r\n3. Convert Windows ARM push jobs to daily jobs to conserve limited hardware.\r\n4. Convert Windows ARM64 every-four-hour jobs to daily jobs to conserve limited hardware.\r\n5. Convert Windows ARM64 R2R baseline job from daily to weekly to conserve limited hardware.\r\n6. For altjit jobs, only do push jobs for Checked builds; there's no need for more than that.\r\n7. Add Windows and Ubuntu ARM R2R weekly jobs.\r\n8. Add Windows ARM and ARM64, and Ubuntu ARM, weekly R2R JIT stress jobs.\r\n\r\nFixes #17572, #17241."},{"Id":"7546261977","Type":"IssuesEvent","CreatedAt":"2018-04-18T01:55:28","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17572","RelatedDescription":"Closed issue \"[arm32/Ubuntu] Enable R2R jobs as periodic/cron jobs\" (#17572) at dotnet/coreclr","RelatedBody":"The Ubuntu arm32 R2R jobs exist, but are not scheduled periodically. Now that they work, they should be added to the set of periodic jobs.\r\n"},{"Id":"7546215600","Type":"PullRequestEvent","CreatedAt":"2018-04-18T01:39:26","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17602","RelatedDescription":"Merged pull request \"Clean up FlushInstructionCache for precodes and interlocked target change operations\" (#17602) at dotnet/coreclr","RelatedBody":"Updated based on discussion below\r\n\r\n~~Add missing FlushInstructionCache to ResetTargetInterlocked~~\r\n\r\n~~Not sure if it's necessary considering the interlocked operation, but it's there in Precode::SetTargetInterlocked so I assume it's necessary. Probably no issue anyway, it's unlikely that call counting won't be done as a result of the instruction cache. No change to perf on JitBench with tiering enabled. On arm32 and arm64 executable code is not changed, so no need for the flush there.~~"},{"Id":"7546174542","Type":"IssuesEvent","CreatedAt":"2018-04-18T01:24:58","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17582","RelatedDescription":"Closed issue \"[arm32/Windows] Hang in corefx Microsoft.Win32.SystemEvents.Tests\" (#17582) at dotnet/coreclr","RelatedBody":"Many arm32 Windows corefx jobs in the CI are hanging, apparently on Microsoft.Win32.SystemEvents.Tests, e.g.:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_baseline_tst/11/console\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstress1_tst/11/console\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs2_tst/9/console\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs0x1000_tst/10/console\r\n\r\nThey also show failures before the hang.\r\n\r\nSample output:\r\n```\r\n22:52:06 Running: C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\tests\\Microsoft.Win32.SystemEvents.Tests\\netcoreapp-Windows_NT-Release-arm\\RunTests.cmd C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\r\n22:52:06 Using C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm as the test runtime folder.\r\n22:52:06 Executing in C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\tests\\Microsoft.Win32.SystemEvents.Tests\\netcoreapp-Windows_NT-Release-arm\\ \r\n22:52:06 ----- start 22:52:08.17 ===============  To repro directly: ===================================================== \r\n22:52:06 pushd C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\tests\\Microsoft.Win32.SystemEvents.Tests\\netcoreapp-Windows_NT-Release-arm\\\r\n22:52:06 call C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe xunit.console.netcore.exe Microsoft.Win32.SystemEvents.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing\r\n22:52:06 popd\r\n22:52:06 ===========================================================================================================\r\n22:52:06 \r\n22:52:06 C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\tests\\Microsoft.Win32.SystemEvents.Tests\\netcoreapp-Windows_NT-Release-arm>call C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe xunit.console.netcore.exe Microsoft.Win32.SystemEvents.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\n22:52:07 xUnit.net console test runner (32-bit .NET Core)\r\n22:52:07 Copyright (C) 2014 Outercurve Foundation.\r\n22:52:07 \r\n22:52:07 Discovering: Microsoft.Win32.SystemEvents.Tests\r\n22:52:09 Discovered:  Microsoft.Win32.SystemEvents.Tests\r\n22:52:10 Starting:    Microsoft.Win32.SystemEvents.Tests\r\n22:52:23 \r\n   Microsoft.Win32.SystemEventsTests.LowMemoryTests.SignalsEventsAsynchronouslyOnMessage [FAIL]\r\n22:52:23       Assert.True() Failure\r\n22:52:23       Expected: True\r\n22:52:23       Actual:   False\r\n22:52:23       Stack Trace:\r\n22:52:24             at Microsoft.Win32.SystemEventsTests.GenericEventTests.SignalsEventsAsynchronouslyOnMessage()\r\n22:52:33    Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled [FAIL]\r\n22:52:33       Assert.True() Failure\r\n22:52:33       Expected: True\r\n22:52:33       Actual:   False\r\n22:52:33       Stack Trace:\r\n22:52:33          D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\tests\\SystemEvents.CreateTimer.cs(58,0): at Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled()\r\n22:52:43    Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers [FAIL]\r\n22:52:43       Assert.True() Failure\r\n22:52:43       Expected: True\r\n22:52:43       Actual:   False\r\n22:52:43       Stack Trace:\r\n22:52:43          D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\tests\\SystemEvents.CreateTimer.cs(113,0): at Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers()\r\n22:52:53    Microsoft.Win32.SystemEventsTests.DisplaySettingsTests.SignalsDisplayEventsAsynchronouslyOnDISPLAYCHANGE [FAIL]\r\n22:52:53       Assert.True() Failure\r\n22:52:53       Expected: True\r\n22:52:53       Actual:   False\r\n22:52:53       Stack Trace:\r\n22:52:53          D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\tests\\SystemEvents.DisplaySettings.cs(37,0): at Microsoft.Win32.SystemEventsTests.DisplaySettingsTests.SignalsDisplayEventsAsynchronouslyOnDISPLAYCHANGE()\r\n22:53:03    Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsOnSameThreadAsOtherEvents [FAIL]\r\n22:53:03       Assert.True() Failure\r\n22:53:03       Expected: True\r\n22:53:03       Actual:   False\r\n22:53:03       Stack Trace:\r\n22:53:03             at Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsOnSameThreadAsOtherEvents()\r\n22:53:13    Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously [FAIL]\r\n22:53:13       Assert.True() Failure\r\n22:53:13       Expected: True\r\n22:53:13       Actual:   False\r\n22:53:13       Stack Trace:\r\n22:53:13          D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\tests\\SystemEvents.InvokeOnEventsThread.cs(22,0): at Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.InvokeOnEventsThreadRunsAsynchronously()\r\n06:44:16 \r\nBuild timed out (after 480 minutes). Marking the build as aborted.\r\n06:44:16 \r\n```\r\n"},{"Id":"7546168403","Type":"IssuesEvent","CreatedAt":"2018-04-18T01:22:42","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17487","RelatedDescription":"Closed issue \"arm32v7: ASP.NET Core applications die with segmentation fault on macOS Docker\" (#17487) at dotnet/coreclr","RelatedBody":"I'm trying to verify ASP.NET Core 2.1 works on arm32v7 using Docker 18.03-ce on macOS. ASP.NET Core applications can successfully be launched, but dies on the first HTTP requests with this error:\r\n```\r\nqemu: uncaught target signal 11 (Segmentation fault) - core dumped\r\n```\r\n\r\n**Repro**\r\n1. Create a dockerfile with the contents below and run `docker build . -t test-img`\r\n2. Start a container with `docker run --rm -it -p 5000:80 test-img` and open a browser to http://localhost:5000/\r\n```Dockerfile\r\nFROM microsoft/dotnet-nightly:2.1.300-preview2-sdk AS build\r\nWORKDIR /code\r\nRUN dotnet new web --no-restore \\\r\n    && sed -i -E 's/Version=\"(.*)\"/Version=\"2.1.0-preview3-32175\"/g' code.csproj \\\r\n    && dotnet restore \\\r\n        --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json \\\r\n        --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json \\\r\n    && dotnet publish -c Release -o /code/pub\r\n\r\nFROM microsoft/dotnet-nightly:2.1-runtime-bionic-arm32v7\r\nEXPOSE 80\r\n\r\nRUN curl -sSL -o /tmp/aspnetcore.tar.gz https://dotnetcli.blob.core.windows.net/dotnet/aspnetcore/Runtime/2.1.0-preview3-32175/aspnetcore-runtime-2.1.0-preview3-32175-linux-arm.tar.gz \\\r\n    && tar xzf /tmp/aspnetcore.tar.gz -C /usr/share/dotnet \\\r\n    && rm /tmp/aspnetcore.tar.gz\r\n\r\nWORKDIR /app\r\nCOPY --from=build /code/pub .\r\nENTRYPOINT [ \"dotnet\", \"code.dll\" ]\r\n```\r\n\r\n**Result**\r\n\r\nLog output:\r\n(Trimmed about 100 log lines that say `qemu: Unsupported syscall: 345`)\r\n```\r\n$ docker run --rm -it -p 5000:80 test-img\r\nqemu: Unsupported syscall: 389\r\nqemu: Unsupported syscall: 345\r\nHosting environment: Production\r\nContent root path: /app\r\nNow listening on: http://[::]:80\r\nApplication started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets[14]\r\n      Connection id \"0HLCUE9HPHETO\" communication error.\r\nMicrosoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted\r\nqemu: uncaught target signal 11 (Segmentation fault) - core dumped\r\n```\r\n\r\n**Details**\r\n\r\nmacOS 10.13.3\r\n\r\nSome docker info:\r\n```\r\nServer Version: 18.03.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\ncontainerd version: cfd04396dc68220d1cecbe686a6cc3aa5ce3667c\r\nrunc version: 4fc53a81fb7c994640722ac585fa9ca548971871\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.87-linuxkit-aufs\r\nOperating System: Docker for Mac\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 5.818GiB\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7546381951","Type":"PullRequestEvent","CreatedAt":"2018-04-18T02:36:07","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9090","RelatedDescription":"Opened pull request \"pick up nuget loc\" (#9090) at dotnet/cli","RelatedBody":"Works well. Fix #8471\r\n![capture1](https://user-images.githubusercontent.com/6993335/38908650-1d2ff48a-4276-11e8-86f4-fdb259746419.PNG)\r\n![capture2](https://user-images.githubusercontent.com/6993335/38908649-1d1f3ef6-4276-11e8-8493-255a664ba943.PNG)\r\n"},{"Id":"7546022317","Type":"PullRequestEvent","CreatedAt":"2018-04-18T00:29:58","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9089","RelatedDescription":"Opened pull request \"Rename buildserver command.\" (#9089) at dotnet/cli","RelatedBody":"This commit renames the `buildserver` command to `build-server`.\r\n\r\nFixes #9075.\r\n"},{"Id":"7545920037","Type":"PullRequestEvent","CreatedAt":"2018-04-17T23:54:02","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9011","RelatedDescription":"Merged pull request \"[Arm64] Enable crossgen\" (#9011) at dotnet/cli","RelatedBody":"Enable Arm64 Crossgen \r\n\r\nFixes for arm64 #8998 \r\n\r\nDepends on dotnet/core-setup#3987 ++\r\n\r\nWorks if I manually copy crossgen dependencies from core-setup\r\n\r\n```bash\r\n# Copy x64_arm64 crossgen\r\n cp -r \\\r\n    ../core-setup/packages/transport.runtime.linux-arm64.microsoft.netcore.runtime.coreclr/2.1.0-preview3-26404-06/tools/x64_arm64 \\\r\n    ./.nuget/packages/runtime.linux-arm64.microsoft.netcore.app/2.1.0-preview3-26404-01/tools\r\n\r\n# Copy x64_arm64 libclrjit.so\r\ncp -r \\\r\n    ../core-setup/packages/transport.runtime.linux-arm64.microsoft.netcore.jit/2.1.0-preview3-26404-06/runtimes/x64_arm64 \\\r\n    ./.nuget/packages/runtime.linux-arm64.microsoft.netcore.app/2.1.0-preview3-26404-01/runtimes/\r\n\r\n```\r\n\r\n@eerhardt \r\nContains #8896 which I hope/expect will merge before dotnet/core-setup#3987 is ready"},{"Id":"7545917113","Type":"PullRequestEvent","CreatedAt":"2018-04-17T23:53:04","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9086","RelatedDescription":"Merged pull request \"Sign the 'nupkg' files; CLI:release/2.1.3xx\" (#9086) at dotnet/cli","RelatedBody":"'nupkg' packages are required to be signed on Windows official builds; but not 'symbols.nupkg' packages\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7545738930","Type":"PullRequestEvent","CreatedAt":"2018-04-17T22:55:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/710","RelatedDescription":"Opened pull request \"Fix old project system warnings\" (#710) at dotnet/standard","RelatedBody":"When NETStandard.Library was referenced in a .NETFramework project using the old project system,\r\nit would evaluate the project ignoring conditions on ItemGroups.  Apparently this is done to\r\ndisplay the superset of project configurations (eg both debug and release) in the solution heirarchy.\r\nThe warnings were a result of the items never being resolved after design time build finished\r\nresolving references (because of course the items were conditioned out for the target framework).\r\n\r\nWe can workaround this using choose/when.  Apparently the evaluation of the project is bold\r\nenough to ignore the conditions on an itemgroup, but not bold enough to choose one of many\r\nwhen (or all) clauses. :)\r\n\r\nFixes #708 "},{"Id":"7545460661","Type":"PullRequestEvent","CreatedAt":"2018-04-17T21:43:26","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/709","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02717-01 (master)\" (#709) at dotnet/standard","RelatedBody":""},{"Id":"7537003851","Type":"IssuesEvent","CreatedAt":"2018-04-16T15:45:42","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/708","RelatedDescription":"Opened issue \"Wrong reference path in NETStandard.Library.targets\" (#708) at dotnet/standard","RelatedBody":"@cannehag commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1440)\n\n# After installing NetStandard.Library 2.0.2, a lot of warning occur.\r\nNetStandard.Library.targets 2.0.2 have \r\n<Reference Include=\"$(MSBuildThisFileDirectory)\\ref\\Microsoft.Win32.Primitives.dll...\r\nAccording to documentation MSBuildThisFileDirectory will include a final slash, thus giving a path with double slash and the error message \r\nThe referenced component 'C:\\Users\\xxx\\.nuget\\packages\\netstandard.library\\2.0.2\\build\\netstandard2.0\\\\ref\\Microsoft.Win32.Primitives.dll could not be found'\r\n\r\nVersion 2.0.1 does not have this issue since the targets file is including *.dll from another path\r\n<ReferenceCopyLocalPaths Condition=\"'$(_NetStandardLibraryLibPath)' != ''\" Include=\"$(_NetStandardLibraryLibPath)*.dll\">\r\n\n\n---\n\n@elementalpete commented on [Mon Apr 16 2018](https://github.com/dotnet/core/issues/1440#issuecomment-381640157)\n\nI experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.\n\n"},{"Id":"7520936673","Type":"IssuesEvent","CreatedAt":"2018-04-12T15:42:33","Actor":"akaylh","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/707","RelatedDescription":"Opened issue \"Need DbProviderFactories\" (#707) at dotnet/standard","RelatedBody":"DbProviderFactories is very  important feature,Please support in standard.\r\nBTW I know already in .net core 2.1."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7546831333","Type":"IssuesEvent","CreatedAt":"2018-04-18T05:22:40","Actor":"AceHack","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29172","RelatedDescription":"Opened issue \"Add High level System.Reflection.Metadata API\" (#29172) at dotnet/corefx","RelatedBody":"Please add high-level APIs that can be used without having to deference/follow all the pointers/handles.  I would love to just load an assembly and loop through the tree."},{"Id":"7546796877","Type":"PullRequestEvent","CreatedAt":"2018-04-18T05:10:22","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29171","RelatedDescription":"Opened pull request \"More SSL error queue cleaning\" (#29171) at dotnet/corefx","RelatedBody":"Another batch of cleaning SSL error queue. Trying to be minimize the extension of the changes while ensuring the SSL error queue is clean of typical errors without affecting exceptions currently throw by the code. In interest of keeping the perf unchanged calls to cleanup the queue are ideally only added in case of errors and preferably via ERR_clear_error.\r\n\r\nThe targets addressed on this change were identified via debugger by selecting calls that were putting errors on the SSL queue. The removal of the active issue is at this point still tentative: I can't be sure that it is going to pass reliable on Outerloop and I do not have any more local repros."},{"Id":"7546659646","Type":"IssuesEvent","CreatedAt":"2018-04-18T04:15:07","Actor":"MisinformedDNA","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29170","RelatedDescription":"Opened issue \"MemoryExtensions.Equals with StringComparison\" (#29170) at dotnet/corefx","RelatedBody":"I'm trying to check for certain file extensions with the new `Span` APIs. I came across some odd behavior. Here's where I started, which, of course, only works for case-insensitive cases (i.e. Linux):\r\n\r\n```\r\nforeach (var extension in _extensionsToWatch)\r\n{\r\n    if (Path.GetExtension(entry.FileName).SequenceEqual(extension))\r\n        return true;\r\n}\r\n```\r\n\r\n`SequenceEqual` doesn't have a case-insensitive overload, so I found \r\n\r\n`if (MemoryExtensions.Equals(Path.GetExtension(entry.FileName), extension, StringComparison.OrdinalIgnoreCase))` which works.\r\n\r\nBut I like to call extension methods as extension methods, so I rewrite this as\r\n\r\n`if (Path.GetExtension(entry.FileName).Equals(extension, StringComparison.OrdinalIgnoreCase))`\r\n\r\nBut now I get a compiler error\r\n\r\n> Member 'object.Equals(object, object)' cannot be accessed with an instance reference; qualify it with a type name instead\r\n\r\nOK, that's odd. Shouldn't it have picked up the `MemoryExtensions` extension method used above?\r\n\r\nNow this next one I stumbled into on accident\r\n\r\n`if (Path.GetExtension(entry.FileName).Equals((extension, StringComparison.OrdinalIgnoreCase)))`\r\n\r\nThe difference is subtle, but all I did was add some redundant(?) parentheses. No compiler error, but I get a runtime error\r\n\r\n> System.NotSupportedException: 'Equals() on Span and ReadOnlySpan is not supported. Use operator== instead.'\r\n\r\nSo now it is telling me to use the `==` operator, which, I assume, will do a case-sensitive comparison, which is the opposite of what I want, and is not valid replacement for `StringComparison`.\r\n\r\nWhy are things not working like I think they should?\r\n"},{"Id":"7546354932","Type":"IssuesEvent","CreatedAt":"2018-04-18T02:26:59","Actor":"keeratsingh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29169","RelatedDescription":"Opened issue \"Compilation errors while linking corefx\\src\\Common\\src\\Interop\\Windows\\NtDll\\Interop.NtCreateFile.cs\" (#29169) at dotnet/corefx","RelatedBody":"I am getting the following compilation errors when linking [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs) in `System.Data.SqlClient` project. \r\n[FileSystemEnumerator.Win32.cs](https://github.com/dotnet/corefx/blob/dd4519d0373e26789905a4836c3fc88a9257cc1c/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemEnumerator.Win32.cs#L54) includes a call to `Interop.NtDll.CreateFile` method and no compilation issues are observer with this project.\r\n\r\nCould someone kindly help me with the following:\r\n- Are issues 1,2,3 and 5 are being resolved in the correct manner, if not is there a better solution ?\r\n- How can I resolve Issue 4 (*CS0029*) ?\r\nI have added my comments and an excerpt from the log below, the logs are after including the mentioned changes.\r\n\r\n| No      |Error Code          | Description        | Project  | File | Comments |\r\n|:------------- |:-------------|:------------------|:---------|:-----|:-----|\r\n| 1.     | CS0208 | Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') | System.Data.SqlClient | [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L84) | Removing the `*` operator resolves the compilation error.|\r\n| 2.     | CS0208      |  Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') | System.Data.SqlClient | [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L102) | Removing the `*` operator resolves the compilation error.|\r\n| 3.     | BCL0015      |   ntdll.dll!NtCreateFile is not supported on one\\more targeted platforms. |  System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L14) | This error can be removed by suppressing the warning `#pragma warning disable BCL0015 // Invalid Pinvoke call.` Is there a better way to do this ?|\r\n| 4.     | CS0029      |   Cannot implicitly convert type 'System.IntPtr' to 'string' |   System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L44) | Changing this to `Buffer = new string( c )` resolves the `intellisense` error, however the compilation error `convert type 'string' to 'System.IntPtr'` is observed.   |\r\n| 5.     | CS0208      |   Cannot take the address of, get the size of, or declare a pointer to a managed type ('Interop.UNICODE_STRING') |   System.Data.SqlClient |   [Interop.NtCreateFile.cs](https://github.com/dotnet/corefx/blob/a28a2cdda67c024126f690bbe1331174a194f9ce/src/Common/src/Interop/Windows/NtDll/Interop.NtCreateFile.cs#L48) | Removing the `&` operator resolves the compilation error. |\r\n\r\n\r\n```cmd\r\nSystem.Linq.Expressions -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Linq.Expressions\\netcoreapp\\System\r\n  .Linq.Expressions.dll\r\n  System.Private.Xml.Linq -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Private.Xml.Linq\\netcoreapp\\System\r\n  .Private.Xml.Linq.dll\r\n  System.Xml.XmlDocument -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.XmlDocument\\netcoreapp\\System.X\r\n  ml.XmlDocument.dll\r\n  System.Xml.XPath -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.XPath\\netcoreapp\\System.Xml.XPath.dll\r\n  System.Xml.ReaderWriter -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.ReaderWriter\\netcoreapp\\System\r\n  .Xml.ReaderWriter.dll\r\n  System.Xml.XmlSerializer -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.XmlSerializer\\netcoreapp\\Syst\r\n  em.Xml.XmlSerializer.dll\r\n  System.Xml.XPath.XDocument -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.XPath.XDocument\\netcoreapp\\\r\n  System.Xml.XPath.XDocument.dll\r\n  System.Xml.XDocument -> D:\\dotNetCore\\corefx\\bin\\Windows_NT.AnyCPU.Debug\\System.Xml.XDocument\\netcoreapp\\System.Xml.X\r\n  Document.dll\r\n\r\nBuild FAILED.\r\n\r\nD:\\dotNetCore\\corefx\\src\\Common\\src\\Interop\\Windows\\NtDll\\Interop.NtCreateFile.cs(46,30): error CS0029: Cannot implicit\r\nly convert type 'string' to 'System.IntPtr' [D:\\dotNetCore\\corefx\\src\\System.IO.FileSystem\\src\\System.IO.FileSystem.csp\r\nroj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:02:26.71\r\nCommand execution failed with exit code 1.\r\n\r\n\r\n```\r\n\r\ncc @saurabh500 @AfsanehR "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7546669698","Type":"PullRequestEvent","CreatedAt":"2018-04-18T04:19:04","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26224","RelatedDescription":"Opened pull request \"Add refactoring for UseImplicitType\" (#26224) at dotnet/roslyn","RelatedBody":"I saw in the release notes for [15.7 preview 3](https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-preview-relnotes#dotnet_tooling): \r\n> Use `Ctrl+.` to toggle between `var` and the explicit type, regardless of your code style preferences. \r\n\r\nBut in 15.7, we actually only implemented a one-way refactoring (from `var` to explicit type), since that seemed most useful.\r\nThis PR adds a converse refactoring.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/38911446-455b168e-4284-11e8-900c-fd1243156c80.png)\r\n\r\nRelates to https://github.com/dotnet/roslyn/pull/25208 (UseExplicitType refactoring)"},{"Id":"7546643263","Type":"PullRequestEvent","CreatedAt":"2018-04-18T04:08:22","Actor":"zaytsev-victor","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26223","RelatedDescription":"Opened pull request \"\"Extract Interface ...\" preserves banner at the top of the file\" (#26223) at dotnet/roslyn","RelatedBody":"Fixes #23855\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7546581332","Type":"IssuesEvent","CreatedAt":"2018-04-18T03:45:11","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26000","RelatedDescription":"Closed issue \"Pattern-matching compiler does not permit a constant named `var` as a pattern\" (#26000) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/issues/25999\r\n\r\nIt isn't clear if this is intentional. If it is, it needs to be documented.\r\n"},{"Id":"7546580979","Type":"IssuesEvent","CreatedAt":"2018-04-18T03:45:03","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25999","RelatedDescription":"Closed issue \"When keyword recommender failure with constant named `var`\" (#25999) at dotnet/roslyn","RelatedBody":"Some tests are skipped in the branch `features/recursive-patterns` because the compiler treats `var` as a keyword in pattern contexts. It is not clear if that is intentional.\r\n\r\nHere is an example from `WhenKeywordRecommenderTests.cs`:\r\n\r\n``` c#\r\n        [Fact(Skip = \"https://github.com/dotnet/roslyn/issues/25999\"), Trait(Traits.Feature, Traits.Features.KeywordRecommending)]\r\n        public async Task TestForSwitchCase_SemanticCheck_AfterClassAndLocalConstantVar_BeforeBreak() =>\r\n    await VerifyKeywordAsync(@\"\r\nclass var { }\r\nclass C\r\n{\r\n    void M() { const object var = null; switch (new object()) { case var $$ break; } }\r\n}\");\r\n```\r\n"},{"Id":"7546579941","Type":"PullRequestEvent","CreatedAt":"2018-04-18T03:44:39","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26019","RelatedDescription":"Merged pull request \"Fix parser regression in pattern switch parsing\" (#26019) at dotnet/roslyn","RelatedBody":"`when` is not permitted as a pattern variable name at the top level\r\nFixes #25999\r\nFixes #26000\r\nThis regression only occurred on the `features/recursive-patterns` branch.\r\n\r\n@cston @agocke Please review this small bug fix.\r\n@dotnet/roslyn-compiler FYI\r\n"},{"Id":"7546573365","Type":"IssuesEvent","CreatedAt":"2018-04-18T03:42:14","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23062","RelatedDescription":"Closed issue \"Private Protected for VB\" (#23062) at dotnet/roslyn","RelatedBody":"Roslyn, in master, has support for the protection modifier combination `Private Protected` in VB. However, according to the design notes, it was intended that the modifier be named `ProtectedAndFriend`. See https://github.com/dotnet/vblang/blob/master/meetings/2014/LDM-2014-03-12.md\r\n\r\nOne way to correct this to align with the design notes would be to\r\n1. Add support for `ProtectedAndFriend` and `ProtectedOrFriend` modifiers (as keywords?)\r\n2. Modify the pretty-lister to reformat `Private Protected` as `ProtectedAndFriend`\r\n3. Make `Private Protected` an error in binding.\r\n\r\nWe could stop at any step along that path.\r\n"},{"Id":"7546556235","Type":"IssuesEvent","CreatedAt":"2018-04-18T03:35:56","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18526","RelatedDescription":"Closed issue \"Implemented dotnet/csharplang#323\" (#18526) at dotnet/roslyn","RelatedBody":"@gafter \r\nI have implemented your proposal dotnet/csharplang#323 together with dotnet/csharplang#328 (default coalescing operator). It wasn't so complicated after all. Maybe there are some side-effects I have overseen?\r\nCurrently there are no tests.\r\n\r\nI would like to submit a PR for a first review.\r\n\r\n(See https://github.com/lachbaer/roslyn/tree/DefaultCoalescingOperator)\r\n\r\n~Update:\r\nI just encountered a slight problem. In case of~\r\n```C#\r\nclass C1\r\n{\r\n    public int x {get; set;}\r\n    public int? y {get; set;}\r\n}\r\n\r\nc?.x ?? 42;\r\nc?.y ?? 42;\r\n```\r\n~the behaviour of a *default-coalescing-operator* is completely arbitrary. I've got to sort that out, first!~\r\nSorted that out. It behaves as expected by the specs (`c?.x` gets converted to (int?) and thus has no ambiguity).\r\n\r\n\r\n"},{"Id":"7546542912","Type":"IssuesEvent","CreatedAt":"2018-04-18T03:31:11","Actor":"evildour","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26222","RelatedDescription":"Closed issue \"How to package analyzers?\" (#26222) at dotnet/roslyn","RelatedBody":"Hello, I would like to build Roslyn analyzers to be distributed with a C# library I work on. There seem to be two ways to do that:\r\n1. Package the analyzers within the NuGet package for the library, at analyzers\\dotnet\\cs\\ for example.\r\n2. Package the analyzers in their own NuGet package (at the same path) and include that package as a package reference in the library.\r\n\r\nMost examples I’ve seen (Roslyn included) seem to use option 2, but I see a few disadvantages (some minor) with this approach over option 1:\r\n- Updating the analyzers takes more steps: with a separate package, you’d need to re-publish the new analyzer package, then update the reference to it in the target library, and then re-publish that library's package. By packaging them together, you only need to re-publish the one package.\r\n- For projects including the NuGet package, Visual Studio shows the analyzers twice in the Dependencies node: once under Analyzers and a 2nd time under NuGet. When they are packaged together the analyzers are only under the Analyzers node.\r\n- Users wanting to opt out of the analyzers need to include an extra reference (although this doesn’t seem to work currently anyway due to https://github.com/dotnet/sdk/issues/1212):\r\n```\r\n<PackageReference Include=\"Microsoft.CodeAnalysis\" Version=\"2.7.0\" />\r\n<PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"1.1.0\" ExcludeAssets=\"analyzers\" />\r\n```\r\nas opposed to if they were in the same package:\r\n```\r\n<PackageReference Include=\"Microsoft.CodeAnalysis\" Version=\"2.7.0\" ExcludeAssets=\"analyzers\" />\r\n```\r\n\r\nThe only downside I can see with packaging everything together is if the analyzers and main library include assets in the same areas of the package, it would prevent someone from being able to selectively exclude just the assets from the analyzers. But if that’s isn’t the case, is there any other disadvantage I’m not seeing? If I picked option 1, is there anything that would prevent or make difficult a switch to option 2 in the future (splitting up the packages)?\r\n\r\nI looked to the docs for guidance [here](https://docs.microsoft.com/en-us/nuget/reference/analyzers-conventions), but they weren’t that clear. They say “Analyzers themselves are typically _packaged and distributed **as part of** the NuGet packages_ that implement the API or library in question”, which would seem like option 1 is being recommended, but then it says “For a good example, see the System.Runtime.Analyzers package…”, which is a standalone package of analyzers - option 2. I think the docs should have some better guidance here.\r\n\r\nThank you."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7546512712","Type":"PullRequestEvent","CreatedAt":"2018-04-18T03:20:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5724","RelatedDescription":"Merged pull request \"Update dependencies\" (#5724) at dotnet/corert","RelatedBody":""},{"Id":"7545770457","Type":"PullRequestEvent","CreatedAt":"2018-04-17T23:05:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5724","RelatedDescription":"Opened pull request \"Update dependencies\" (#5724) at dotnet/corert","RelatedBody":""},{"Id":"7545314968","Type":"PullRequestEvent","CreatedAt":"2018-04-17T21:12:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5723","RelatedDescription":"Opened pull request \"Add StdCall intrinsic support\" (#5723) at dotnet/corert","RelatedBody":"This is a building block to be able to write a repro case for #5587 in C#. With this, it's possible to use `AddrOf` intrinsic in connection with `StdCall` and a `NativeCallable` method to hit the unimplemented functionality with pure C#."},{"Id":"7545098731","Type":"PullRequestEvent","CreatedAt":"2018-04-17T20:31:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5722","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5722) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7544430008","Type":"PullRequestEvent","CreatedAt":"2018-04-17T18:24:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5722","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5722) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7544295480","Type":"PullRequestEvent","CreatedAt":"2018-04-17T17:59:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5721","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5721) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7543751652","Type":"IssuesEvent","CreatedAt":"2018-04-17T16:20:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5217","RelatedDescription":"Closed issue \"Marshal.Sizeof(new object()) asserts the class library\" (#5217) at dotnet/corert","RelatedBody":"We are asking a reference type EEType to compute its valuetype size. There used to be a valuetype check in `int SizeOfHelper(Type t, bool throwIfNotMarshalable)` up until TFS changeset 1168403 when it got removed. Not sure where it's supposed to do the check now.\r\n\r\nNow we're left with this:\r\n\r\nhttps://github.com/dotnet/corert/blob/daaed31e3307155b9d1897da64aae485d7db774a/src/System.Private.Interop/src/System/Runtime/InteropServices/Marshal.cs#L157-L175\r\n  "},{"Id":"7543749760","Type":"PullRequestEvent","CreatedAt":"2018-04-17T16:20:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5707","RelatedDescription":"Merged pull request \"Fix struct marshaling bugs\" (#5707) at dotnet/corert","RelatedBody":"- Enable struct Marshal APIs for reference types\r\n- Fix mismatched argument order for native to managed marshaling\r\n- Fix sizes reported by Marshal.SizeOf APIs\r\n- Delete some unnecessary wrappers and fixed a few typos\r\n\r\nFixes #5674 and #5217"},{"Id":"7543749730","Type":"IssuesEvent","CreatedAt":"2018-04-17T16:20:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5674","RelatedDescription":"Closed issue \"HttpClient GetAsync with https (on windows) does not work\" (#5674) at dotnet/corert","RelatedBody":"Reported by @abydal on gitter. From https://gist.github.com/abydal/e235558bad6f73ed96964697dc0eaec3:\r\n\r\n```\r\nusing System;\r\nusing System.Net.Http;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TestCoreRt\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Run().Wait();\r\n        }\r\n\r\n        static async Task Run(){\r\n\r\n            using (var client = new HttpClient())\r\n            {\r\n                try\r\n                {\r\n                    var url = $\"https://www.google.no/search?q=test\";\r\n\r\n                    using (var request = await client.GetAsync(new Uri(url)))\r\n                    {\r\n                        if(!request.IsSuccessStatusCode){\r\n                            Console.WriteLine(\"Url call to: \" + url +\" failed with \"+request.ReasonPhrase);\r\n                        }\r\n\r\n                        Console.WriteLine(await request.Content.ReadAsStringAsync());\r\n                    }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    if(e is AggregateException ae)\r\n                        Console.WriteLine(ae.Flatten().ToString());\r\n                    else\r\n                        Console.WriteLine(e.ToString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```"},{"Id":"7543746911","Type":"PullRequestEvent","CreatedAt":"2018-04-17T16:19:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5709","RelatedDescription":"Merged pull request \"Add error message for common case of unsupported cross-compilation\" (#5709) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7546153314","Type":"IssuesEvent","CreatedAt":"2018-04-18T01:17:22","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2115","RelatedDescription":"Closed issue \"Configuration vs ConfigurationName build parameter\" (#2115) at dotnet/sdk","RelatedBody":"_From @groogiam on April 5, 2018 21:30_\n\nThere appears to be a discrepancy between specifying the configuration from msbuild from the command line between the old and new csproj formats.\r\n\r\nThe old csproj file allowed specifying the configuration using /p:configuration=\"Test\"\r\n\r\ne.g. `msbuild MySln.sln /p:configuration=\"Test\"`\r\n\r\nThis would properly set the ConfigurationName parameter for pre build events.\r\n\r\nNote: ConfigurationName is what visual macro dialog uses as well.\r\n![image](https://user-images.githubusercontent.com/1992395/38392710-7c4f1c40-38f6-11e8-80d0-a9deeb63dbe0.png)\r\n\r\nThis however does not happen for the new csproj format. In order to fix this I have to specify another command line argument `/p:configurationName=\"Test\"`.\r\n\r\nIt seems like the setting configuration from msbuild should set this variable correctly no matter which csproj format is used.\r\n\r\n\n\n_Copied from original issue: dotnet/project-system#3452_"},{"Id":"7545866218","Type":"PullRequestEvent","CreatedAt":"2018-04-17T23:35:59","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2151","RelatedDescription":"Opened pull request \"Update branding to 2.1.4xx\" (#2151) at dotnet/sdk","RelatedBody":""},{"Id":"7545531199","Type":"IssuesEvent","CreatedAt":"2018-04-17T21:59:56","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2150","RelatedDescription":"Opened issue \"Enable perf runs for Linux\" (#2150) at dotnet/sdk","RelatedBody":"We did not enable Linux perf runs because at the time there was a bug in the XUnit.Performance library on Linux with the way we were using it.  That should now be fixed so we should enable Linux perf runs."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":15,"RawContent":null},{"Id":"985915431499259904","CreatedAt":"2018-04-16T16:18:50+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz and his pair-programming guest @fiercekittenz tomorrow for some LIVE CODING and discussion ab… https://t.co/Vll8gfdlKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"984485381071450112","CreatedAt":"2018-04-12T17:36:20+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview2 now available https://t.co/W0wBUDkqXt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":91,"FavoriteCount":78,"RawContent":null},{"Id":"984130513383317505","CreatedAt":"2018-04-11T18:06:13+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 2 https://t.co/SS9hInyJlJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":124,"FavoriteCount":82,"RawContent":null},{"Id":"984127988592623616","CreatedAt":"2018-04-11T17:56:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 2 https://t.co/T8ah6NSIAq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":425,"FavoriteCount":255,"RawContent":null},{"Id":"983818840961269761","CreatedAt":"2018-04-10T21:27:44+00:00","UserScreenname":"dotnet","Text":"Explore CosmosDB with .NET Core and MongoDB https://t.co/9VeWPHkIKo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":111,"FavoriteCount":37,"RawContent":null}]}},"RunOn":"2018-04-18T05:30:19.8894021Z","RunDurationInMilliseconds":7810}