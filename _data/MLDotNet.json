{"Data":{"GitHub":{"Issues":[{"Id":"352317120","IsPullRequest":true,"CreatedAt":"2018-08-24T03:50:19","Actor":"eerhardt","Number":"700","RawContent":null,"Title":" Replace all ML.Transforms SubComponent usages with IComponentFactory.","State":"closed","Body":"Working towards #585\r\n\r\nPlease ignore the first commit, it is being proposed separately as #698. I am using these new constructors in this PR, so I needed to include it.  If you have any comments regarding it directly, please put them on #698.\r\n\r\nThere are 2 \"hacks\" in this PR that I'm not proud of:\r\n\r\n1. `LearnerFeatureSelectionTransform` depends on `SDCA`, but `ML.Transforms` doesn't have a reference to `ML.StandardLearners`. I wasn't sure how to proceed here (add the dependency, or move some code around).  For now I continued to use Dependency Injection to create the component. Please give me your opinion on what the best approach forward would be.\r\n\r\n2. `RffTransform` has an undesirable coupling to which kind of MatrixGenerator it is using (gaussian or not). Previously, it was using the ComponentCatalog to determine which type of MatrixGenerator it was working with before actually creating it. However, I can no longer do that without actually creating the generator, so I needed to make a \"dummy\" instance. I spoke with @yaeldekel, and we decided this was \"OK\" for now, since it typically only used with a small number of columns (i.e. 1). I've logged #699 for this.","Url":"https://github.com/dotnet/machinelearning/pull/700","RelatedDescription":"Closed or merged PR \" Replace all ML.Transforms SubComponent usages with IComponentFactory.\" (#700)"},{"Id":"353622297","IsPullRequest":false,"CreatedAt":"2018-08-24T02:40:08","Actor":"eerhardt","Number":"726","RawContent":null,"Title":"Indirect references in ML.NET using Dependency Injection","State":"open","Body":"I've found 2 indirect references in our product that I'm not sure how to proceed on.\r\n\r\n1. `LearnerFeatureSelectionTransform` depends on `SDCA`, but `ML.Transforms` doesn't have a reference to `ML.StandardLearners`.\r\n2. The 'train' commands in `ML.Data` (`CV`, `Train`, `TrainTest`) all have a default Trainer of `AveragedPerceptron`.  but `AveragedPerceptron` lives in the `ML.StandardLearners` assembly. And `ML.StandardLearners` references `ML.Data`, but this dependency is in the wrong order.\r\n\r\nA couple of options:\r\n1. Change these parameters to be 'user required', i.e. they don't have a default and fail if you didn't specify it.\r\n2. Move some code around so the dependencies line up correctly.  For example, we could move our 'train' commands out of `ML.Data` and into a higher assembly.\r\n3. For (1) above, we could move `LearnerFeatureSelectionTransform` into `ML.StandardLearners` instead of being in `ML.Transforms`. Or we could add the dependency from `ML.Transforms` to ML.StandardLearners.\r\n4. Continue to use Dependency Injection and just assume/hope the component is there at runtime.\r\n\r\nFrom an internal conversation with @TomFinley, we are thinking of taking option (1) above - make these parameters required and not have a default.\r\n\r\nThoughts?\r\n\r\ncc @TomFinley @Zruty0 @codemzs @Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/726","RelatedDescription":"Open issue \"Indirect references in ML.NET using Dependency Injection\" (#726)"},{"Id":"353621181","IsPullRequest":false,"CreatedAt":"2018-08-24T02:34:29","Actor":"eerhardt","Number":"725","RawContent":null,"Title":"CustomStopWordsRemoverTransform shouldn't hard-code its column name","State":"open","Body":"See the conversation here:\r\nhttps://github.com/dotnet/machinelearning/pull/700/files/e30785ff454627c7b74e3b6873d70b9e6de28bdf#r212152727\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/44561816-2ff04b00-a71c-11e8-95bf-9f015ab9ce4f.png)\r\n\r\nWe should consider making the column name configurable instead of hard-coding the column name, which may be hiding an existing column.\r\n\r\n/cc @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/725","RelatedDescription":"Open issue \"CustomStopWordsRemoverTransform shouldn't hard-code its column name\" (#725)"},{"Id":"353587247","IsPullRequest":true,"CreatedAt":"2018-08-23T23:11:19","Actor":"adamsitnik","Number":"724","RawContent":null,"Title":"Benchmarks created by @yaeldekel","State":"open","Body":"I took the benchmarks created by @yaeldekel, solved merge conflict run them and changed the config a little bit to run just one warmup iteration. \r\n\r\n\r\n@davidwrighton to run all the benchmarks you need to pass `*` as the filer:\r\n\r\n        dotnet run -c Release -- -f * --join\r\n\r\nSample results:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.0, OS=Windows 10.0.17134.228 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz (Max: 2.90GHz), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=2.1.301\r\n  [Host] : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\r\n\r\nToolchain=InProcessToolchain  MaxIterationCount=20  WarmupCount=1  \r\n\r\n```\r\n|                                          Type |              Method |         Mean |       Error |      StdDev | AccuracyMacro |       Gen 0 |      Gen 1 |     Gen 2 |   Allocated |\r\n|---------------------------------------------- |-------------------- |-------------:|------------:|------------:|--------------:|------------:|-----------:|----------:|------------:|\r\n|              KMeansAndLogisticRegressionBench |    TrainKMeansAndLR | 2,134.265 ms | 164.3370 ms | 189.2507 ms |          0,98 |  16000.0000 |  9000.0000 | 3000.0000 | 49949.23 KB |\r\n| StochasticDualCoordinateAscentClassifierBench |      TrainSentiment | 2,130.503 ms |  24.8173 ms |  23.2141 ms |          0,98 | 122000.0000 | 35000.0000 | 5000.0000 | 759772.8 KB |\r\n| StochasticDualCoordinateAscentClassifierBench |           TrainIris |   834.229 ms | 254.5284 ms | 293.1152 ms |          0,98 |   6000.0000 |  1000.0000 |         - | 12173.28 KB |\r\n| StochasticDualCoordinateAscentClassifierBench |         PredictIris |     2.472 ms |   0.1202 ms |   0.1384 ms |          0,98 |     35.1563 |    15.6250 |    3.9063 |   123.24 KB |\r\n| StochasticDualCoordinateAscentClassifierBench | PredictIrisBatchOf1 |     2.712 ms |   0.3276 ms |   0.3773 ms |          0,98 |     35.1563 |    15.6250 |    3.9063 |    123.2 KB |\r\n| StochasticDualCoordinateAscentClassifierBench | PredictIrisBatchOf2 |     2.370 ms |   0.1334 ms |   0.1482 ms |          0,98 |     35.1563 |    15.6250 |    3.9063 |   123.31 KB |\r\n| StochasticDualCoordinateAscentClassifierBench | PredictIrisBatchOf5 |     2.492 ms |   0.1678 ms |   0.1865 ms |          0,98 |     35.1563 |    15.6250 |    3.9063 |   123.61 KB |\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/724","RelatedDescription":"Open PR \"Benchmarks created by @yaeldekel\" (#724)"},{"Id":"353535995","IsPullRequest":true,"CreatedAt":"2018-08-23T20:12:46","Actor":"Zruty0","Number":"723","RawContent":null,"Title":"Turn TextLoader into a data reader","State":"open","Body":"Fixes #718 ","Url":"https://github.com/dotnet/machinelearning/pull/723","RelatedDescription":"Open PR \"Turn TextLoader into a data reader\" (#723)"},{"Id":"353510298","IsPullRequest":true,"CreatedAt":"2018-08-23T18:57:08","Actor":"briancylui","Number":"722","RawContent":null,"Title":"Add new benchmarks to test\\Microsoft.ML.Benchmarks","State":"open","Body":"Submitting this PR on behalf of @yaeldekel.\r\n\r\n- Added a new benchmark for KMeans and Logistic Regression (LR) under `test\\Microsoft.ML.Benchmarks`\r\n- Added a new sentiment test inside the existing SDCA benchmark\r\n\r\ncc: @yaeldekel @eerhardt ","Url":"https://github.com/dotnet/machinelearning/pull/722","RelatedDescription":"Open PR \"Add new benchmarks to test\\Microsoft.ML.Benchmarks\" (#722)"},{"Id":"353504477","IsPullRequest":false,"CreatedAt":"2018-08-23T18:40:23","Actor":"danmosemsft","Number":"721","RawContent":null,"Title":"Main package has MKL dependency","State":"open","Body":"Microsoft.ML.Runtime.Data in the main package has WhiteningTransform which uses exports of MKL. If we want to segregate MKL users into Microsoft.ML.HalLearners then WhiteningTransform may need to move into an assembly in that package.\r\n\r\n@eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/721","RelatedDescription":"Open issue \"Main package has MKL dependency\" (#721)"},{"Id":"353492937","IsPullRequest":true,"CreatedAt":"2018-08-23T18:06:24","Actor":"ericstj","Number":"720","RawContent":null,"Title":"Create a redist package for tensorflowCreate a nuget package that red…","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/713\r\n\r\nCreate a nuget package that redistributes the TensorFlow C-API.\r\n\r\nThis is a straight up repack of the bits published on tensorflow.org.  I made sure to apply the TensorFlow license to this package and not sign it with our authenticate certificates.\r\n\r\nThis is part 1 of the TF packaging.  Once @abgoswam merges #704 I plan to refactor that into its own package and depend on this (as well as update the tests to use the binaries from this redist project).  I can either do that as a separate PR or as part of this.","Url":"https://github.com/dotnet/machinelearning/pull/720","RelatedDescription":"Open PR \"Create a redist package for tensorflowCreate a nuget package that red…\" (#720)"},{"Id":"352602524","IsPullRequest":true,"CreatedAt":"2018-08-23T17:04:30","Actor":"adamsitnik","Number":"703","RawContent":null,"Title":"Few benchmark fixes","State":"closed","Body":"1. I added README.md so everyone can find out how to run the benchmarks\r\n2. I fixed a bug in the benchmarks where it was returning a lazy-executed `IEnumerable<T>` without the actual execution. So instead of 16 nanoseconds we now have 2.3 milisecond ;)\r\n3. I updated BenchmarkDotNet to latest version to get advantage of performance improvements and new features.\r\n4. I have changed the configuration to run not 3 (`Job.Short`) but up to 20 iterations (BenchmarkDotNet implements a heuristic based on standard error and runs the benchmarks until they are not stable). 3 iterations is simply not enough to get trustworthy results.\r\n\r\n/cc @danmosemsft @KrzysztofCwalina ","Url":"https://github.com/dotnet/machinelearning/pull/703","RelatedDescription":"Closed or merged PR \"Few benchmark fixes\" (#703)"},{"Id":"353428133","IsPullRequest":false,"CreatedAt":"2018-08-23T15:11:48","Actor":"Zruty0","Number":"719","RawContent":null,"Title":"IRowMapper to use IColumns","State":"open","Body":"Change the interface of `IRowMapper` to use `IColumn` (or something akin to it) to convey the schema information. \r\n\r\nThis will simplify the usage of `IRowMapper` in cases where it emits metadata for the new columns. ","Url":"https://github.com/dotnet/machinelearning/issues/719","RelatedDescription":"Open issue \"IRowMapper to use IColumns\" (#719)"},{"Id":"353424245","IsPullRequest":false,"CreatedAt":"2018-08-23T15:03:21","Actor":"Zruty0","Number":"718","RawContent":null,"Title":"Estimator for TextLoader","State":"open","Body":"Convert `TextLoader` to a pair of `DataReaderEstimator` / `DataReader`.\r\n\r\nGet rid of `MyTextLoader` in `Wrappers`.","Url":"https://github.com/dotnet/machinelearning/issues/718","RelatedDescription":"Open issue \"Estimator for TextLoader\" (#718)"},{"Id":"353252630","IsPullRequest":false,"CreatedAt":"2018-08-23T07:13:29","Actor":"iSatishYadav","Number":"717","RawContent":null,"Title":"Installing package Microsoft.ML on target framework .NET Framework 4.6.2 fails.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET 4.6.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to install Nuget Package `Microsoft.ML` on a `.NET 4.6.2` project in Visual Studio 2013 (Version 12.0.40629.00 Update 5)\r\n\r\n- **What happened?**\r\nNuget Package installation failed with error.\r\n\r\n- **What did you expect?**\r\nNuget Package should have been installed successfully as `netstandard 2.0` supports `.NET Framework 4.6.2`.\r\n\r\n### Source code / logs\r\n````\r\nInstalling 'Microsoft.ML 0.4.0'.\r\nSuccessfully installed 'Microsoft.ML 0.4.0'.\r\nAdding 'Microsoft.ML 0.4.0' to XXX.\r\nUninstalling 'Microsoft.ML 0.4.0'.\r\nSuccessfully uninstalled 'Microsoft.ML 0.4.0'.\r\nInstall failed. Rolling back...\r\nCould not install package 'Microsoft.ML 0.4.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.2', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\r\n````","Url":"https://github.com/dotnet/machinelearning/issues/717","RelatedDescription":"Open issue \"Installing package Microsoft.ML on target framework .NET Framework 4.6.2 fails.\" (#717)"},{"Id":"353133987","IsPullRequest":true,"CreatedAt":"2018-08-22T21:33:38","Actor":"Zruty0","Number":"716","RawContent":null,"Title":"SDCA trainers become Estimators","State":"open","Body":"Converted the SDCA family to Estimators","Url":"https://github.com/dotnet/machinelearning/pull/716","RelatedDescription":"Open PR \"SDCA trainers become Estimators\" (#716)"},{"Id":"353129833","IsPullRequest":false,"CreatedAt":"2018-08-22T21:19:46","Actor":"yaeldekel","Number":"715","RawContent":null,"Title":"Find a C# API for extracting input/output metadata from ONNX models","State":"open","Body":"This will be needed for implementing an ONNX transform, so that we can validate the names and sizes of the inputs, and be able to know the sizes of the outputs in advance (before we see any data).","Url":"https://github.com/dotnet/machinelearning/issues/715","RelatedDescription":"Open issue \"Find a C# API for extracting input/output metadata from ONNX models\" (#715)"},{"Id":"353128512","IsPullRequest":false,"CreatedAt":"2018-08-22T21:15:26","Actor":"yaeldekel","Number":"714","RawContent":null,"Title":"Test TensorFlow pre-trained models","State":"open","Body":"We should run some TensorFlow pre-trained models using the TensorFlowTransform and validate the results.","Url":"https://github.com/dotnet/machinelearning/issues/714","RelatedDescription":"Open issue \"Test TensorFlow pre-trained models\" (#714)"},{"Id":"353126659","IsPullRequest":false,"CreatedAt":"2018-08-22T21:09:34","Actor":"yaeldekel","Number":"713","RawContent":null,"Title":"Package TF binaries in a separate nuget package for distribution","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/713","RelatedDescription":"Open issue \"Package TF binaries in a separate nuget package for distribution\" (#713)"},{"Id":"353126229","IsPullRequest":false,"CreatedAt":"2018-08-22T21:08:16","Actor":"yaeldekel","Number":"712","RawContent":null,"Title":"Enable outputting multiple layers in one call to TF","State":"open","Body":"Users should be able to specify a list of output names to the TF transform arguments.","Url":"https://github.com/dotnet/machinelearning/issues/712","RelatedDescription":"Open issue \"Enable outputting multiple layers in one call to TF\" (#712)"},{"Id":"352308659","IsPullRequest":true,"CreatedAt":"2018-08-22T17:19:22","Actor":"eerhardt","Number":"698","RawContent":null,"Title":"Add convenience constructors for TextLoader.","State":"closed","Body":"Creating a TextLoader and specifying its arguments manually is too verbose. We should add a few constructor overloads to make it easier.\r\n\r\nThis work item is related to the new API proposal #371","Url":"https://github.com/dotnet/machinelearning/pull/698","RelatedDescription":"Closed or merged PR \"Add convenience constructors for TextLoader.\" (#698)"},{"Id":"353047060","IsPullRequest":false,"CreatedAt":"2018-08-22T17:15:33","Actor":"Zruty0","Number":"711","RawContent":null,"Title":"Perf benchmarks for optimization","State":"open","Body":"We want to have a couple ML scenarios to be used for tracking performance. We can use it to detect regression from build to build, as well as improve performance.","Url":"https://github.com/dotnet/machinelearning/issues/711","RelatedDescription":"Open issue \"Perf benchmarks for optimization\" (#711)"},{"Id":"352958681","IsPullRequest":false,"CreatedAt":"2018-08-22T13:40:54","Actor":"JeataekRyu","Number":"710","RawContent":null,"Title":"Is there any way to make it the same as the vector created by the TextFeaturizer in ML.NET(ex. korean, chinese) unsupported language?","State":"open","Body":"pipeline.Add(New TextFeaturizer(\"Features\", \"Text\"))\r\n\r\nWhen  language(like Korean, Chinese) support is not available, it seems that i can create a learning model by using  my own vector(based on the language text). If possible, I hope that the relevant content is shared.","Url":"https://github.com/dotnet/machinelearning/issues/710","RelatedDescription":"Open issue \"Is there any way to make it the same as the vector created by the TextFeaturizer in ML.NET(ex. korean, chinese) unsupported language?\" (#710)"},{"Id":"352906101","IsPullRequest":false,"CreatedAt":"2018-08-22T11:09:14","Actor":"EduardoGarcias","Number":"709","RawContent":null,"Title":"Data preprocessing question","State":"open","Body":"I'd like to ask a few question regarding data preprocessing in ML.NET.\r\n\r\n1.) Is there a possibility of getting rid of **outliers** in case of input data?\r\n2.) Is it possible to perform a **normalization** or **standardization** on the input data?\r\n\r\nThank you in advance.","Url":"https://github.com/dotnet/machinelearning/issues/709","RelatedDescription":"Open issue \"Data preprocessing question\" (#709)"},{"Id":"352857147","IsPullRequest":false,"CreatedAt":"2018-08-22T08:44:26","Actor":"Balduran90","Number":"708","RawContent":null,"Title":"Sentinemt Analysis - ML prediction wrong","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10  Pro x64\r\n- **.NET Version (eg., dotnet --info)**:  .NET version 4.7/ C# 7.2\r\n\r\n### Issue\r\nI used the \"sentiment analysis\" tutorial and wrote the console application as described.\r\nIt seems to be working, but the predictions are wrong. The model predicts \"positive\" every time.\r\nI used the training and testing data from github of course.\r\n\r\n\r\n### Source code / logs\r\n`using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Models;\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Trainers;\r\nusing Microsoft.ML.Transforms;\r\n\r\nnamespace MyML\r\n{\r\n    class Program{\r\n        \r\n        //Variables for training and testing\r\n        static readonly string _dataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"wikipedia-detox-250-line-data.tsv\");\r\n        static readonly string _testDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"wikipedia-detox-250-line-test.tsv\");\r\n        static readonly string _modelpath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"Model.zip\");\r\n\r\n        //starting the program\r\n        static async Task Main(string[] args){\r\n            var model = await Train();\r\n            Evaluate(model);\r\n            Predict(model);\r\n\r\n            //keeps the console open until enter is pressed\r\n            Console.WriteLine(\"Done. Press 'Enter' to exit.\");\r\n            Console.ReadLine();\r\n        }\r\n\r\n        //Creating and training the model. Writes learned data into a .zip file\r\n        public static async Task<PredictionModel<SentimentData, SentimentPrediction>> Train(){\r\n            var pipeline = new LearningPipeline();\r\n            pipeline.Add(new TextLoader(_dataPath).CreateFrom<SentimentData>());\r\n            pipeline.Add(new TextFeaturizer(\"Features\", \"SentimentText\"));\r\n            pipeline.Add(new FastTreeBinaryClassifier() { NumLeaves = 5, NumTrees = 5, MinDocumentsInLeafs = 2 });\r\n            PredictionModel<SentimentData, SentimentPrediction> model =\r\n            pipeline.Train<SentimentData, SentimentPrediction>();\r\n            await model.WriteAsync(_modelpath);\r\n            return model;\r\n        }\r\n\r\n        //Evaluating data after model training\r\n        public static void Evaluate(PredictionModel<SentimentData, SentimentPrediction> model){\r\n            var testData = new TextLoader(_testDataPath).CreateFrom<SentimentData>();\r\n            var evaluator = new BinaryClassificationEvaluator();\r\n            BinaryClassificationMetrics metrics = evaluator.Evaluate(model, testData);\r\n\r\n            //Console user information\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"PredictionModel quality metrics evaluation\");\r\n            Console.WriteLine(\"------------------------------------------\");\r\n            Console.WriteLine($\"Accuracy: {metrics.Accuracy:P2}\");\r\n            Console.WriteLine($\"Auc: {metrics.Auc:P2}\");\r\n            Console.WriteLine($\"F1Score: {metrics.F1Score:P2}\");\r\n        }\r\n\r\n        //Method for sentiment prediction. Use after training & evaluation\r\n        public static void Predict(PredictionModel<SentimentData, SentimentPrediction> model){\r\n            //Small testdata for prediction\r\n            IEnumerable<SentimentData> sentiments = new[] {\r\n                new SentimentData{\r\n                    SentimentText = \"Please refrain from adding nonsense to Wikipedia.\"},\r\n                new SentimentData{\r\n                    SentimentText = \"He is the best, and the article should say that.\"}\r\n            };\r\n\r\n            IEnumerable<SentimentPrediction> predictions = model.Predict(sentiments);\r\n\r\n            //User information header\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"Sentiment Predictions\");\r\n            Console.WriteLine(\"---------------------\");\r\n\r\n            var sentimentsAndPredictions = sentiments.Zip(predictions, (sentiment, prediction) => (sentiment, prediction));\r\n\r\n            //Write prediction to console for the user\r\n            //Error! The model predicts \"Positive\" every time!\r\n            foreach (var item in sentimentsAndPredictions)\r\n            {\r\n                Console.WriteLine($\"Sentiment: {item.sentiment.SentimentText} | Prediction: {(item.prediction.Sentiment ? \"Positive\" : \"Negative\")}\");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n    }\r\n}\r\n`\r\n`using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.ML.Runtime.Api;\r\n\r\nnamespace MyML\r\n{\r\n    public class SentimentData\r\n    {\r\n        [Column(ordinal: \"0\", name: \"Label\")]\r\n        public float Sentiment;\r\n        [Column(ordinal: \"1\")]\r\n        public string SentimentText;\r\n    }\r\n\r\n    public class SentimentPrediction\r\n    {\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public bool Sentiment;\r\n    }\r\n}\r\n`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/708","RelatedDescription":"Open issue \"Sentinemt Analysis - ML prediction wrong\" (#708)"},{"Id":"352756926","IsPullRequest":false,"CreatedAt":"2018-08-22T00:25:04","Actor":"Zruty0","Number":"707","RawContent":null,"Title":"Need a 'workout test' for estimators","State":"open","Body":"Pretty much any `IEstimator` needs to adhere to certain properties, which we should enforce in a test:\r\n\r\nEstimator `est`:\r\n- `est.Fit()` throws on a data if `est.GetOutputSchema()` throws on its schema.\r\n  - The opposite may not be true.\r\n- `est.Fit()` on the same data produces identical transformers.\r\n- Schema validation errors should look properly (same message).\r\n\r\nFitted transformer `xf = est.Fit(data)`:\r\n- `xf` should be able to transform the data it was fitted on.\r\n- `xf.GetOutputSchema()` should match `est.GetOutputSchema()`.\r\n- `xf.Transform()` throws on a data if `xf.GetOutputSchema()` throws on its schema.\r\n  - The opposite may not be true.\r\n- Save/load should be transparent for `xf`. \r\n- Subject the outputs of `xf.Transform()` to the same workouts as we do for transforms: `CheckSameSchema`, `CheckSameValues`.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/707","RelatedDescription":"Open issue \"Need a 'workout test' for estimators\" (#707)"},{"Id":"352745900","IsPullRequest":true,"CreatedAt":"2018-08-21T23:23:13","Actor":"Ivanidzo4ka","Number":"706","RawContent":null,"Title":"Implementing copy column estimator","State":"open","Body":"+ @Zruty0 ","Url":"https://github.com/dotnet/machinelearning/pull/706","RelatedDescription":"Open PR \"Implementing copy column estimator\" (#706)"},{"Id":"352741604","IsPullRequest":true,"CreatedAt":"2018-08-21T23:01:35","Actor":"codemzs","Number":"705","RawContent":null,"Title":"RIP Replace DvText with .NET Standard type.","State":"open","Body":"I need to do some clean up but its good for initial review.\r\n\r\nfixes #673 ","Url":"https://github.com/dotnet/machinelearning/pull/705","RelatedDescription":"Open PR \"RIP Replace DvText with .NET Standard type.\" (#705)"},{"Id":"352713186","IsPullRequest":true,"CreatedAt":"2018-08-21T21:15:40","Actor":"abgoswam","Number":"704","RawContent":null,"Title":"TensorFlowMapper transform for scoring Tensorflow models in ML.NET","State":"open","Body":"Fixes #696 \r\n\r\nThis PR creates a new transform 'TensorFlowMapper' for scoring Tensorflow models in ML.NET.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/704","RelatedDescription":"Open PR \"TensorFlowMapper transform for scoring Tensorflow models in ML.NET\" (#704)"},{"Id":"352327477","IsPullRequest":true,"CreatedAt":"2018-08-21T16:15:00","Actor":"danmosemsft","Number":"701","RawContent":null,"Title":"Add package tags","State":"closed","Body":"Fix https://github.com/dotnet/machinelearning/issues/484\r\n\r\nAdd some tags to the nuget package to help us appear more prominently when searching for \"ML.NET\"\r\n\r\nWe can also add a custom title (see first commit) which apparently helps, but it is probably not a good idea, since as @eerhardt pointed out, one might expect to be able to add `<PackageReference Include=\"ML.NET\" />` if the title is `ML.NET`, but not the package ID.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/701","RelatedDescription":"Closed or merged PR \"Add package tags\" (#701)"},{"Id":"352429217","IsPullRequest":false,"CreatedAt":"2018-08-21T08:06:52","Actor":"JeataekRyu","Number":"702","RawContent":null,"Title":"Can I get an example of simple naive bayes based on ML.NET?","State":"open","Body":"I would like to use NaiveBayesClassifier instead of StochasticDualCoordinateAscentBinaryClassifier, but the example [here ](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.naivebayesclassifier?view=ml-dotnet)is not detailed and has limitations.\r\n\r\nI want to do various tests with ML.NET, but there are not many examples, I can not find any explanation, and there are many restrictions on learning. In particular, I wonder how to useFeatureColumn, LabelColumn, and TrainingData.\r\n\r\nI think it will be improvement in the future, but I want to know when the plan will be.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/702","RelatedDescription":"Open issue \"Can I get an example of simple naive bayes based on ML.NET?\" (#702)"},{"Id":"352317080","IsPullRequest":false,"CreatedAt":"2018-08-20T22:20:04","Actor":"eerhardt","Number":"699","RawContent":null,"Title":"RffTransform has undesirable coupling to its MatrixGenerator","State":"open","Body":"`RffTransform` has an undesirable coupling to which kind of MatrixGenerator it is using (gaussian or not). \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e77f24e68d92f033910a5d783576d1879763d979/src/Microsoft.ML.Transforms/RffTransform.cs#L421-L425\r\n\r\nIt is using the ComponentCatalog to determine which type of MatrixGenerator it was working with before actually creating it. And then depending on the Type, it is doing a different distance scaling algorithm.\r\n\r\nThis type of decision (which algorithm to use for distance scaling) should be done by the MatrixGenerator itself, and not necessarily decided by the RffTransform.\r\n\r\nI am changing RffTransform to no longer use SubComponent. However, I can no longer tell which type of MatrixGenerator is going to be created without actually creating the generator, so I needed to make a \"dummy\" instance. I spoke with @yaeldekel, and we decided this was \"OK\" for now, since it typically only used with a small number of columns (i.e. 1).\r\n\r\nWe should consider refactoring RffTransform and the IFourierDistributionSampler types to allow RffTransform to not have to switch based on whether Gaussian sampling is used or not.","Url":"https://github.com/dotnet/machinelearning/issues/699","RelatedDescription":"Open issue \"RffTransform has undesirable coupling to its MatrixGenerator\" (#699)"},{"Id":"352284689","IsPullRequest":false,"CreatedAt":"2018-08-20T20:29:34","Actor":"justinormont","Number":"697","RawContent":null,"Title":"Attribution of Wikipedia images","State":"open","Body":"Images in https://github.com/dotnet/machinelearning/tree/master/test/data/images/ need citations to their Wikipedia sources. \r\n\r\n![Banana](https://github.com/dotnet/machinelearning/blob/bdb742d3cc2bc273b18831e7e778f95a81e96a56/test/data/images/banana.jpg?raw=true)\r\n\r\nPerhaps listing in the [README.md](https://github.com/dotnet/machinelearning/blob/5e812d166d01d9cbd4c9ed16d4648041fbb7c83a/test/data/README.md) file? ","Url":"https://github.com/dotnet/machinelearning/issues/697","RelatedDescription":"Open issue \"Attribution of Wikipedia images\" (#697)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-24T05:23:52.2838283Z","RunDurationInMilliseconds":1025}