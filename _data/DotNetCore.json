{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or Linux? Have that ever happened to you too late when a major part of your code is... <a aria-label=\"read more about Introducing API Analyzer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked about C# 6.0! In the C# 7.0 &#34;wave&#34; we are trying something new. Tools such as Visual Studio upgrade on a frequent... <a aria-label=\"read more about Welcome to C# 7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This feature has been introduced in Visual Studio 2017 15.5 Preview 2 behind a feature flag. You can try it out by... <a aria-label=\"read more about Moving to real time test discovery in Test Explorer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6793125504","Type":"PullRequestEvent","CreatedAt":"2017-11-01T05:26:15","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14787","RelatedDescription":"Opened pull request \"Fix publish parameters to match dependency flow spec\" (#14787) at dotnet/coreclr","RelatedBody":"@weshaggard @wtgodbe @chcosta "},{"Id":"6793064134","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:56:15","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14767","RelatedDescription":"Merged pull request \"Fix checking for reg in use\" (#14767) at dotnet/coreclr","RelatedBody":"Combine the check for an inactive but not-yet-freed interval, with the check for other cases of a register that is in use at the current location. This simplifies the code and fixes the assert condition for double registers.\r\n\r\nFix #14373"},{"Id":"6793064132","Type":"IssuesEvent","CreatedAt":"2017-11-01T04:56:15","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14373","RelatedDescription":"Closed issue \"[RyuJIT/arm32][JitStress=2][JitStressRegs=3] Assertion failed 'nextAssignedRef->nodeLocation == refLocation || (nextAssignedRef->nodeLocation + 1 == refLocation && nextAssignedRef->delayRegFree)'\" (#14373) at dotnet/coreclr","RelatedBody":"Found in x86_arm_altjit run.\r\n\r\n```\r\nAssert failure(PID 6456 [0x00001938], Thread: 5536 [0x15a0]): Assertion failed 'nextAssignedRef->nodeLocation == refLocation || (nextAssignedRef->nodeLocation + 1 == refLocation && nextAssignedRef->delayRegFree)' in 'testout1:Func_0_5_5_3():struct' (IL size 652)\r\n\r\n    File: d:\\j\\workspace\\x86_arm_altji---2c922e9d\\src\\jit\\lsra.cpp Line: 5961\r\n    Image: D:\\j\\workspace\\x86_arm_altji---2c922e9d\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTests/configurations:\r\n```\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=3\r\n\r\nJIT\\Methodical\\fp\\exgen\\10w5d_cs_ro\\10w5d_cs_ro.cmd\r\n```\r\n"},{"Id":"6792945026","Type":"IssuesEvent","CreatedAt":"2017-11-01T03:57:15","Actor":"Salty-Sailor","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14786","RelatedDescription":"Opened issue \"How To Build My Own .Net Core Profiler\" (#14786) at dotnet/coreclr","RelatedBody":"I have a .NetCore(2.0) App and want to do some profile work. Based on the .NetCore  Profiling Overview docs  (**https://github.com/dotnet/coreclr/blob/master/Documentation/botr/profiling.md**)，it seems like that I just need to implement the Profiler DLL and add into my .NetCore Project(is that right?).But I have no experience on write code like this(what I only know is that I need to implement the **ICorProfilerCallback2** interfaces in the Profiler DLL).\r\nSo, is there any suggestions on how to start to build my own Profiler or some Profiler examples? Thank you :)\r\nPS: My work OS is macOS&centOS 7,\r\nand in this file (https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md) it seems that the profiling API was finished on Windows/Linux"},{"Id":"6792916714","Type":"PullRequestEvent","CreatedAt":"2017-11-01T03:44:28","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14775","RelatedDescription":"Merged pull request \"Remove intermediate sync for test build\" (#14775) at dotnet/coreclr","RelatedBody":"This should fix the build break in official test builds.\r\n@jashook @wtgodbe @weshaggard "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6792729575","Type":"IssuesEvent","CreatedAt":"2017-11-01T02:27:18","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7921","RelatedDescription":"Closed issue \"dotnet build is failing\" (#7921) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet build is failing if Product Code targets netstandard1.4 and test project targets netcoreapp1.0/netcoreapp2.0.\r\n\r\n1. git clone https://github.com/microsoft/vstest\r\n2. git checkout 347c59f73943921786bf9d5a7e42d2cf011ddd15\r\n3. build.cmd -noloc\r\n\r\n\r\n## Expected  behavior\r\n1. Build should complete successfully.\r\n\r\n## Actual behavior\r\n1. Getting errors like \r\n```\r\nC:\\code\\github\\vstest\\tools\\dotnet\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\code\\github\\vstes\r\nt\\src\\Microsoft.TestPlatform.Common\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v1.0'. Ensure that restore has run and that you have included 'netcoreapp1.0'\r\n in the TargetFrameworks for your project. [C:\\code\\github\\vstest\\src\\Microsoft.TestPlatform.Common\\Microsoft.TestPlatform.Common.csproj]\r\nC:\\code\\github\\vstest\\tools\\dotnet\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\code\\github\\vstes\r\nt\\src\\Microsoft.TestPlatform.CommunicationUtilities\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v1.0'. Ensure that restore has run and that you have included\r\n 'netcoreapp1.0' in the TargetFrameworks for your project. [C:\\code\\github\\vstest\\src\\Microsoft.TestPlatform.CommunicationUtilities\\Microsoft.TestPlatform.CommunicationUtilities.csproj]\r\nC:\\code\\github\\vstest\\tools\\dotnet\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\code\\github\\vstes\r\nt\\src\\Microsoft.TestPlatform.ObjectModel\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v1.0'. Ensure that restore has run and that you have included 'netcoreap\r\np1.0' in the TargetFrameworks for your project. [C:\\code\\github\\vstest\\src\\Microsoft.TestPlatform.ObjectModel\\Microsoft.TestPlatform.ObjectModel.csproj]\r\n```\r\n## Environment data\r\n**Not working on this build**\r\n.NET Command Line Tools (2.2.0-preview1-007460)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007460\r\n Commit SHA-1 hash:  173cc035e4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\code\\github\\vstest\\tools\\dotnet\\sdk\\2.2.0-preview1-007460\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25825-07\r\n  Build    : 4c165c13bd390adf66f9af30a088d634d3f37a9d\r\n\r\n**Working on this build:**\r\n.NET Command Line Tools (2.1.0-preview1-007372)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007372\r\n Commit SHA-1 hash:  a1ecb3bb3f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\code\\github\\harshjain2\\vstest\\tools\\dotnet\\sdk\\2.1.0-preview1-007372\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25816-02\r\n  Build    : c5006ff91f92e300b426eb26a9a0fa67192590b1\r\n\r\n\r\n\r\n\r\n"},{"Id":"6791635889","Type":"IssuesEvent","CreatedAt":"2017-10-31T20:23:30","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7946","RelatedDescription":"Closed issue \"Developer-guide.md should mention Powershell 3.0 or greater required\" (#7946) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn Win 7 SP1 machine with git installed (and on path), attempted to build cli \r\n## Expected  behavior\r\nBuild should succeed\r\n\r\n## Actual behavior\r\nBuild failed with \"Join-Path : Cannot bind argument to parameter 'Path' because it is an empty string\".\r\nAlmost certainly due to Powershell version (I believe minimum required is 3.0)\r\n\r\nAfter installing PS 3 & restarting the build was able to start."},{"Id":"6791427504","Type":"IssuesEvent","CreatedAt":"2017-10-31T19:37:14","Actor":"Pilchie","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7948","RelatedDescription":"Opened issue \".NET Core console application does not find referenced assemblies\" (#7948) at dotnet/cli","RelatedBody":"_From @ioancrisan on October 13, 2017 10:26_\n\nI have a console application that loads dynamically the assemblies found in the deployment folder. This works *after* we publish the app, but in debug mode we do not have any referenced assemblies in the output folder, from where those assemblies should be loaded. Side note: some of those assemblies come from referenced nuget packages. So, when trying to debug the app, no assemblies are loaded simply because they are not there. How should we develop with such a scenario? Thanks!\n\n_Copied from original issue: dotnet/project-system#2890_"},{"Id":"6791426168","Type":"IssuesEvent","CreatedAt":"2017-10-31T19:36:55","Actor":"Pilchie","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7947","RelatedDescription":"Opened issue \"Multiple library redirect warnings with .NET 4.7.1 and new SDK project format\" (#7947) at dotnet/cli","RelatedBody":"_From @Tornhoof on October 19, 2017 7:56_\n\nUpgrading to .NET 4.7.1 with the new SDK format results in multiple library redirect warnings for system libraries (e.g. System.IO). Targeting .NET 4.7 does not have this problem.\r\n\r\n```ini\r\nThere was a conflict between \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n     \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n     References which depend on \"System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime\\4.3.0\\ref\\net462\\System.Runtime.dll].\r\n         C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime\\4.3.0\\ref\\net462\\System.Runtime.dll\r\n           Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime\\4.3.0\\ref\\net462\\System.Runtime.dll\".\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime\\4.3.0\\ref\\net462\\System.Runtime.dll\r\n     References which depend on \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7.1\\Facades\\System.Runtime.dll].\r\n         C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\r\n           Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\".\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.0.0\\lib\\net46\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.0.0\\lib\\net46\\Microsoft.CodeAnalysis.Razor.dll\r\n         C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\r\n           Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\".\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.3.1\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.0.0\\lib\\net46\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.0.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\r\n             C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.0.0\\lib\\net46\\Microsoft.CodeAnalysis.Razor.dll\r\n```\r\nThere are warnings for the following libraries\r\n```\r\nSystem.ValueTuple,\r\nSystem.Runtime,\r\nSystem.IO,\r\nSystem.Reflection,\r\nSystem.Security.Cryptography,\r\nSystem.Linq,\r\nSystem.Runtime.Extensions,\r\nSystem.Runtime.InteropServices,\r\nSystem.IO.FileSystem,\r\nSystem.IO.FileSystem.Primitives,\r\nSystem.Xml.ReaderWriter,\r\nSystem.Security.Cryptography.Primitives,\r\nSystem.Linq.Expressions,\r\n```\r\n\r\n\r\n# Steps to reproduce\r\n1. Create a new solution\r\n2. Create a web project targeting ASP.NET targeting net471\r\n3. Create a lib project with XUnit 2.3 and targeting net471 with new SDK project format\r\n4. Enable the auto binding redirect settings (apparently makes no difference)\r\n```xml\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n```\r\n5. Add a few unit tests\r\n## Expected result\r\n1. No build warnings\r\n## Actual result\r\n1. Redirect warnings\r\n\r\n[RedirectWarnings.zip](https://github.com/dotnet/project-system/files/1397537/RedirectWarnings.zip)\r\n\n\n_Copied from original issue: dotnet/project-system#2905_"},{"Id":"6791384167","Type":"IssuesEvent","CreatedAt":"2017-10-31T19:27:45","Actor":"wizofaus","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7946","RelatedDescription":"Opened issue \"Developer-guide.md is incomplete\" (#7946) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn Win 7 SP1 machine with git installed (and on path), attempted to build cli \r\n## Expected  behavior\r\nBuild should succeed\r\n\r\n## Actual behavior\r\nBuild failed with \"Join-Path : Cannot bind argument to parameter 'Path' because it is an empty string\".\r\nAlmost certainly due to Powershell version (I believe minimum required is 3.0)\r\n\r\nHowever it seems hard to believe just git and powershell 3.0 are the only requirements for a base Windows 7 SP1 system - e.g. the dotnet package itself is also required! (but yes, I'd installed this).\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6791946259","Type":"IssuesEvent","CreatedAt":"2017-10-31T21:36:24","Actor":"AlexGhiondea","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/567","RelatedDescription":"Opened issue \".NET Standard issues on .NET Framework 4.7.1\" (#567) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nApplications that target the .NET Framework 4.6.1 and use .NET Standard libraries may experience System.TypeLoadException exceptions when running on the .NET Framework 4.7.1\r\n\r\n## Symptoms and root cause\r\n\r\nThe .NET Framework 4.7.1 adds support for .NET Standard in-box. As part of this change, a few assemblies that used to ship independently from the .NET Framework have now been added to the .NET Framework. As these .NET Standard assemblies were not part of the .NET Framework prior to .NET 4.7.1, they were deployed with the application, and a binding redirect was added to the application's app.config file.\r\n\r\nWhen running on the .NET Framework 4.7.1, where the assemblies are now part of the Framework, the application now has two types with different identities, and that leads to a TypeLoadException. One type comes from the app-local assembly, and the other one comes from the .NET Framework assembly.\r\n\r\nAlso reported here: https://github.com/Microsoft/dotnet-framework-early-access/issues/9\r\n\r\nThe following types are potentially impacted by this issue.\r\n\r\n- System.Data.Common.DbColumn\r\n- System.Data.Common.DbDataReaderExtensions\r\n- System.Data.Common.IDbColumnSchemaGenerator\r\n- System.Diagnostics.StackFrameExtensions\r\n- System.Globalization.GlobalizationExtensions\r\n- System.Net.Sockets.SocketReceiveFromResult\r\n- System.Net.Sockets.SocketReceiveMessageFromResult\r\n- System.Net.Sockets.SocketTaskExtensions\r\n- System.Runtime.CompilerServices.TupleElementNamesAttribute\r\n- System.Runtime.InteropServices.Architecture\r\n- System.Runtime.InteropServices.OSPlatform\r\n- System.Runtime.InteropServices.RuntimeInformation\r\n- System.Runtime.Serialization.DataContractSerializerExtensions\r\n- System.Runtime.Serialization.ISerializationSurrogateProvider\r\n- System.Security.Cryptography.ECCurve\r\n- System.Security.Cryptography.ECParameters\r\n- System.Security.Cryptography.ECPoint\r\n- System.Security.Cryptography.IncrementalHash\r\n- System.Security.SecureStringMarshal\r\n- System.StringNormalizationExtensions\r\n- System.Threading.PreAllocatedOverlapped\r\n- System.Threading.ThreadPoolBoundHandle\r\n- System.TupleExtensions\r\n- System.ValueTuple\r\n- System.ValueTuple`1\r\n- System.ValueTuple`2\r\n- System.ValueTuple`3\r\n- System.ValueTuple`4\r\n- System.ValueTuple`5\r\n- System.ValueTuple`6\r\n- System.ValueTuple`7\r\n- System.ValueTuple`8\r\n- System.Xml.XPath.XDocumentExtensions\r\n\r\n### Plan\r\n\r\nWe have identified the problem and we will ship a fix for .NET Framework 4.7.1 in the next few months and in the next version of .NET Framework.\r\n\r\n## Workarounds\r\n\r\nThere are two ways to work around this issue:\r\n - When running on .NET Framework 4.7.1, remove the binding redirects from the app.config file for the assemblies that are now part of the .NET Framework.\r\n - Re-target your application to target the .NET Framwork 4.7 or .NET Framework 4.7.1.\r\n\r\n\r\n"},{"Id":"6789886145","Type":"PullRequestEvent","CreatedAt":"2017-10-31T14:51:19","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/565","RelatedDescription":"Merged pull request \"Add retry logic for setup of dotnet cli\" (#565) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.\r\n\r\nFixes dotnet/core-eng#1966"},{"Id":"6787854995","Type":"PullRequestEvent","CreatedAt":"2017-10-31T07:01:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/566","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02131-01 (master)\" (#566) at dotnet/standard","RelatedBody":""},{"Id":"6786580989","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:39:00","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/563","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02130-03 (master)\" (#563) at dotnet/standard","RelatedBody":""},{"Id":"6786387543","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:46:36","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/565","RelatedDescription":"Opened pull request \"Add retry logic for setup of dotnet cli\" (#565) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.\r\n\r\nFixes dotnet/core-eng#1966"},{"Id":"6784576808","Type":"IssuesEvent","CreatedAt":"2017-10-30T15:40:45","Actor":"Poppyto","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/564","RelatedDescription":"Opened issue \"Can't launch UWP XBox One when a lib .net standard 2.0 is added\" (#564) at dotnet/standard","RelatedBody":"Using .net standard 2.0 library on XBOXOne (Fall Creators) app fails anytime at launch :\r\n\r\n![image](https://user-images.githubusercontent.com/12406939/32179808-a114039c-bd90-11e7-96ed-26e3ab5e3e42.png)\r\n\r\nStep Reproduction :\r\n- Create a new UWP app With Fall Creators support\r\n- Create an empty lib .net standard 2.0\r\n- Add a reference of the lib on the UWP app\r\n- Launch on XBoxOne\r\n\r\nIf I remove the .net standard lib reference, the app is launching.\r\n\r\n\r\n"},{"Id":"6778790926","Type":"PullRequestEvent","CreatedAt":"2017-10-28T15:19:20","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/563","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02128-02 (master)\" (#563) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6793106668","Type":"PullRequestEvent","CreatedAt":"2017-11-01T05:17:12","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24991","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25831-01, beta-25831-01, respectively (master)\" (#24991) at dotnet/corefx","RelatedBody":""},{"Id":"6793049590","Type":"IssuesEvent","CreatedAt":"2017-11-01T04:49:11","Actor":"anthonywanted","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24990","RelatedDescription":"Opened issue \"TcpClient bug in branch release/1.1.0 (Unix)\" (#24990) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/release/1.1.0/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.Unix.cs\r\nand\r\nhttps://github.com/dotnet/corefx/blob/release/1.1.0/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs\r\n\r\nConnectAsync(string, int) will call ConnectAsyncCore(host, port);\r\nConnectAsync(IPAddress[], int) will call ConnectAsyncCore(IPAddress[], int);\r\nConnectAsync(IPAddress, int) will call BeginConnect\r\n\r\nIn ConnectAsyncCore(host, port) and ConnectAsyncCore(IPAddress[], int) will do this\r\nif (_clientSocket != null)\r\n{\r\nthrow new PlatformNotSupportedException(SR.net_sockets_connect_multiaddress_notsupported);\r\n}\r\n\r\nTcpClient.Client will call TcpClient.ClientCore\r\nTcpClient.ClientCore will set _clientSocket;\r\nSo once we call TcpClient.Client, _clientSocket is not null, then ConnectAsyncCore(host, port) and ConnectAsyncCore(IPAddress[], int) will throw a wrong PlatformNotSupportedException"},{"Id":"6792985301","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:16:06","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24989","RelatedDescription":"Opened pull request \"Add a simple way to test wmi remote\" (#24989) at dotnet/corefx","RelatedBody":"Simply using an environment variable, WmiTestTargetMachine, to specify\r\nthe target machine. When running the tests ensure that the account\r\nrunning the tests has rights on the target machine.\r\n\r\nThere is not much value in adding similar scope to other tests since\r\nregarding remote connectivity they actually end up hitting the same\r\ncode, so keep this just for some key tests."},{"Id":"6792980451","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:13:43","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24979","RelatedDescription":"Merged pull request \"Generate debuginfo on all builds on unix platforms\" (#24979) at dotnet/corefx","RelatedBody":"The windows build already includes `/Zi /Zl` as part of commit 920fd2f3 (PR #7840). It looks like it was simply missed on Unix.\r\n\r\nThis change also makes the native debug information closer to what CoreCLR does on all platforms. See https://github.com/dotnet/coreclr/pull/3445 for more information.\r\n\r\nThis is also needed for the end-to-end debuginfo generation as part of source-build. See https://github.com/dotnet/source-build/issues/267"},{"Id":"6792879795","Type":"PullRequestEvent","CreatedAt":"2017-11-01T03:28:26","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24983","RelatedDescription":"Merged pull request \"Find native dll via registry\" (#24983) at dotnet/corefx","RelatedBody":"Perform a best effort to throw PNSE for Windows versions without the\r\nfull framework."},{"Id":"6792849549","Type":"PullRequestEvent","CreatedAt":"2017-11-01T03:15:48","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24964","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC, Standard to prerelease-02201-02, preview1-25831-09, preview1-25831-01, preview1-25830-04, beta-25831-00, beta-25831-00, preview1-25831-01, respectively (master)\" (#24964) at dotnet/corefx","RelatedBody":""},{"Id":"6792766996","Type":"PullRequestEvent","CreatedAt":"2017-11-01T02:42:22","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24798","RelatedDescription":"Merged pull request \"Change lifetime of Socket used in NamedPipeServerStream on Unix\" (#24798) at dotnet/corefx","RelatedBody":"We currently create and destroy the unix domain socket each time WaitForConnection{Async} is called, and it lives until the client connects.  This causes problems when multiple clients try to connect before WaitForConnection{Async} is called; any number that's under the min listen limit applied by the OS will have their connections completed, even though Accept hasn't been called, and then when the socket is closed, the connections will all fail.  This change moves the UDS creation to when the NamedPipeServerStream is created, deleting it when the NPSS is disposed.\r\n\r\ncc: @pjanotti, @JeremyKuhne, @jaredpar, @khyperia"},{"Id":"6792748014","Type":"PullRequestEvent","CreatedAt":"2017-11-01T02:34:47","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24959","RelatedDescription":"Merged pull request \"EventLog tests enabled on windows 7\" (#24959) at dotnet/corefx","RelatedBody":"Fixes #24874 \r\nThe EventLog tests were failing on windows 7. It was throwing win32exception. In order to solve the problem we wait  and retry the job after some time."},{"Id":"6792747989","Type":"IssuesEvent","CreatedAt":"2017-11-01T02:34:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24874","RelatedDescription":"Closed issue \"EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex failed with ArgumentException\" (#24874) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/94474b7e9325802a019eace4ffce5cb6add96b0b/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogEntryCollectionTests~2FCheckingEntryEqualityAndIndex\r\n```\r\nUnhandled Exception of Type System.ArgumentException\r\nMessage :\r\nSystem.ArgumentException : Index -1 is out of bounds.\r\nStack Trace :\r\n   at System.Diagnostics.EventLogInternal.GetEntryAt(Int32 index)\r\n   at System.Diagnostics.EventLogEntryCollection.get_Item(Int32 index)\r\n   at System.Diagnostics.Tests.EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex()\r\n```"},{"Id":"6792610305","Type":"PullRequestEvent","CreatedAt":"2017-11-01T01:36:32","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24975","RelatedDescription":"Merged pull request \"Make wmi test with Win32_Process more reliable\" (#24975) at dotnet/corefx","RelatedBody":"This should fix #24912 and #24961: it seems that the process id is being re-used and the call to Get is not throwing the expected exception. This change should prevent re-use of process id while the test is running.\r\n\r\nWindows Server Core has both WMI and notepad so the test is fine to run on it."},{"Id":"6792610300","Type":"IssuesEvent","CreatedAt":"2017-11-01T01:36:32","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24912","RelatedDescription":"Closed issue \"Test: System.Management.Tests.ManagementObjectTests/Invoke_Instance_And_Static_Method_Win32_Process failed with \"Xunit.Sdk.ThrowsException\"\" (#24912) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Management.Tests.ManagementObjectTests/Invoke_Instance_And_Static_Method_Win32_Process` has failed.\n\nAssert.Throws() Failure\\r\n    Expected: typeof(System.Management.ManagementException)\\r\n    Actual:   (No exception was thrown)\n\n        Stack Trace:\n\n           at System.Management.Tests.ManagementObjectTests.Invoke_Instance_And_Static_Method_Win32_Process()\nBuild : Master - 20171027.01 (Core Tests)\nFailing configurations:\n- Windows.10.Amd64.Core-x64\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171027.01/workItem/System.Management.Tests/analysis/xunit/System.Management.Tests.ManagementObjectTests~2FInvoke_Instance_And_Static_Method_Win32_Process"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6792971743","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:09:28","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22946","RelatedDescription":"Opened pull request \"Add LangVersion for C# 7.3\" (#22946) at dotnet/roslyn","RelatedBody":""},{"Id":"6792465028","Type":"IssuesEvent","CreatedAt":"2017-11-01T00:30:44","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22261","RelatedDescription":"Closed issue \"Extra conversion inserted in an expression tree\" (#22261) at dotnet/roslyn","RelatedBody":"\r\nThis is likely a result of the fix for https://github.com/dotnet/roslyn/issues/4471 which was about the absence of such conversion nodes in general.\r\n\r\nNow there is a smaller case where a conversion is unexpected.\r\n\r\n```cs\r\nusing System;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace TestExpression\r\n{\r\n    class MainClass\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Bar<IFooChild> bar = new Bar<IFooChild>();\r\n\r\n            Call(bar);\r\n        }\r\n\r\n        static void Call<TInterface>(Bar<TInterface> foo)\r\n            where TInterface : IFoo\r\n        {\r\n            foo.PrintExpression((x) => x.value);\r\n        }\r\n    }\r\n\r\n    public interface IFooChild : IFoo\r\n    {\r\n    }\r\n\r\n    public interface IFoo\r\n    {\r\n        int value { get; set; }\r\n    }\r\n\r\n    public class Bar<TInterface>\r\n        where TInterface : IFoo\r\n    {\r\n        public void PrintExpression(Expression<Func<TInterface, int>> valueExpression)\r\n        {\r\n            Console.WriteLine(valueExpression.ToString());\r\n            return;\r\n        }\r\n    }\r\n} \r\n\r\n```\r\n\r\nOne workaround is to add 'class' to the template part (change where TInterface : IFoo to where TInterface : class, IFoo)  ,  but ideally compiler should not insert this cast."},{"Id":"6792337286","Type":"IssuesEvent","CreatedAt":"2017-10-31T23:37:14","Actor":"cartermp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22945","RelatedDescription":"Opened issue \"Different refactoring icon shown for me in the same editor\" (#22945) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.5 Preview 2\r\n\r\n![different-icons](https://user-images.githubusercontent.com/6309070/32253721-a91c3356-be59-11e7-99a0-558b6309f2da.gif)\r\n\r\nIs this intentional?"},{"Id":"6792306003","Type":"PullRequestEvent","CreatedAt":"2017-10-31T23:25:27","Actor":"genlu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22944","RelatedDescription":"Opened pull request \"Add a few regression tests for Operation.Syntax invariant\" (#22944) at dotnet/roslyn","RelatedBody":"#22943 "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6793027375","Type":"PullRequestEvent","CreatedAt":"2017-11-01T04:37:55","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4854","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4854) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6792487578","Type":"PullRequestEvent","CreatedAt":"2017-11-01T00:41:15","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4808","RelatedDescription":"Merged pull request \"implemented newobj for WASM using malloc\" (#4808) at dotnet/corert","RelatedBody":"@morganbr \r\nAlso added evaluation stack spillage and cut down on unneeded llvm casts. \r\nThe relationship between ILImporter and StackEntry doesn't feel 100% to me. Do you see a better way to do this without mixing functionality between ILImporter and StackEntry?\r\nSpillage, I'm not reusing slots at all here do I need to?\r\n\r\n"},{"Id":"6792144912","Type":"PullRequestEvent","CreatedAt":"2017-10-31T22:31:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4853","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4853) at dotnet/corert","RelatedBody":""},{"Id":"6792144399","Type":"PullRequestEvent","CreatedAt":"2017-10-31T22:31:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4853","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4853) at dotnet/corert","RelatedBody":""},{"Id":"6792091820","Type":"PullRequestEvent","CreatedAt":"2017-10-31T22:15:45","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4836","RelatedDescription":"Merged pull request \"enable build System.Private.Interop project\" (#4836) at dotnet/corert","RelatedBody":"verify the fix for build issue "},{"Id":"6791855819","Type":"PullRequestEvent","CreatedAt":"2017-10-31T21:13:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4852","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4852) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6790426911","Type":"PullRequestEvent","CreatedAt":"2017-10-31T16:21:53","Actor":"v-zbsail","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1705","RelatedDescription":"Opened pull request \"LOC CHECKIN | dotnet/sdk - release/15.5 | 20171031\" (#1705) at dotnet/sdk","RelatedBody":null},{"Id":"6787851761","Type":"PullRequestEvent","CreatedAt":"2017-10-31T07:00:38","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1704","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1704) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171031-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171031-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":385,"FavoriteCount":346,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2017-11-01T05:30:21.3365199Z","RunDurationInMilliseconds":7974}