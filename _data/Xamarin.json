{"Data":{"Blog":{"FeedItems":[{"Title":"Community Books on Xamarin Development","PublishedOn":"2018-04-20T15:01:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin development is constantly growing and evolving to meet the needs of developers. To help you find the right resources for your development education, we&#8217;ve curated a list of community...","Href":"https://blog.xamarin.com/community-books-xamarin-development/","RawContent":null},{"Title":"Automatic Provisioning with Visual Studio 2017","PublishedOn":"2018-04-18T17:22:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS device provisioning is largely regarded by all iOS developers, Xamarin or otherwise, as being one of the biggest barriers to getting started with iOS. To test and deploy your app on a device, you...","Href":"https://blog.xamarin.com/automatic-provisioning-visual-studio-2017/","RawContent":null},{"Title":"A Brief History of .NET Standard","PublishedOn":"2018-04-16T16:21:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin (and before that, Mono) allowed .NET code to run on multiple platforms for years. These days, there&#8217;s a new push in cross-platform with .NET Core and .NET Standard. This post looks at...","Href":"https://blog.xamarin.com/history-dot-net-standard/","RawContent":null},{"Title":"Using the iOS 11 Drag and Drop APIs in Xamarin.iOS Apps","PublishedOn":"2018-04-13T17:07:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS 11 introduced drag and drop, a feature that allows users to easily move or copy data within or between apps. With drag and drop, users can: Select items to drag Add extra items to a drag after it...","Href":"https://blog.xamarin.com/drag-and-drop-apis-for-xamarin-apps/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio 2017","PublishedOn":"2018-04-11T18:30:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 previews are now available, featuring significant improvements to the XAML experience for mobile developers. The Xamarin.Forms XAML editing experience is now powered by...","Href":"https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2017 Version 15.7 Preview 3","PublishedOn":"2018-04-09T21:32:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2017 version 15.7 Preview 3 was released today (April 9, 2018) and includes many improvements for mobile developers in Visual Studio. This release sports a brand new IntelliSense...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-7-preview-3/","RawContent":null},{"Title":"Right-To-Left Localization in Xamarin.Forms","PublishedOn":"2018-04-06T20:05:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re making apps that support right-to-left languages, we have great news for you: Xamarin.Forms 3.0 makes it easier than ever to flip layouts to match language direction! We&#8217;ll use...","Href":"https://blog.xamarin.com/right-to-left-localization-xamarin-forms/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 3 – Mono","PublishedOn":"2018-04-04T18:38:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the third post of four in the Debugging Xamarin Open Source Frameworks series, debugging Mono. Part 1 covers building Xamarin.Forms from the source and debugging that code, Part 2 covers...","Href":"https://blog.xamarin.com/debugging-xamarin-mono/","RawContent":null},{"Title":"Find Local Xamarin and .NET Developer Events This April","PublishedOn":"2018-04-02T18:42:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Spring into action this April by finding a Xamarin or .NET user group hosting Xamarin (and related technology) events near you! Get the latest news on exciting releases, tooling, and updates all month...","Href":"https://blog.xamarin.com/xamarin-developer-community-events-april/","RawContent":null},{"Title":"Update to Xamarin.Forms 3.0 Pre-Release Available Today!","PublishedOn":"2018-03-30T19:02:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that the latest update to the Xamarin.Forms 3.0 Pre-release is now available! Help us make this our best Xamarin.Forms release ever by updating today and giving it a...","Href":"https://blog.xamarin.com/update-to-xamarin-forms-3-0-pre-release-available-today/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7564794632","Type":"PullRequestEvent","CreatedAt":"2018-04-21T01:38:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1572","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] plumbing for coded warnings\" (#1572) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\nTo get started in fixing #1560, some of our helper methods need updating\r\nin order to completely support coded warnings in MSBuild tasks.\r\n\r\n- `AsyncTask` needs \"background-thread-safe\" versions of `LogWarning`\r\nthat allow us to specify error codes. The `WaitForCompletion` method\r\nalso needed to call `LogCodedWarning` internally.\r\n- Overloads of `LogError` and `LogWarning` that specify an error code\r\nare renamed to `LogCodedError` and `LogCodedWarning`. This will help us\r\nidentify log messages that need error codes by searching for `LogError`\r\n- `MSBuildExtensions` need proper method overloads for\r\n`LogCodedWarning`, I copied what we have for `LogCodedError` so\r\n`LogCodedWarning` will match it exactly\r\n\r\nChanges to `<Aapt />`, as a guinea pig:\r\n- All warnings will report APT0000\r\n- Updated tests where appropriate, note that MSBuild appends\r\n`warning APT0000:` and `aapt` prints its own `warning :` afterward\r\n- It doesn't look like we can make an error coming from `aapt` any more\r\nspecific than `APT0000`, but open to suggestions\r\n- Added documentation for `APT0000`, which is about as helpful as it can\r\nbe. It at least explains what `aapt` is and links to the Android\r\ndocumentation, listing a few messages returned by `aapt` as examples.\r\n\r\nOther fixes:\r\n- Since the overload for an error code with `AsyncTask.LogError` was\r\nremoved, these needed to change to `LogCodedError` in\r\n`<ResolveAssemblies />`"},{"Id":"7564782499","Type":"PullRequestEvent","CreatedAt":"2018-04-21T01:29:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1586","RelatedDescription":"Merged pull request \"[build] Generate XABuildPaths.cs for all $(CONFIGURATIONS)\" (#1586) at xamarin/xamarin-android","RelatedBody":"Commit e937f9b4 broke `make prepare` for the Release configuration.\r\nJenkins assumes that `make prepare` is a single invocation for *both*\r\nDebug & Release builds; see e.g. `make prepare-external`:\r\n\r\n\t$(foreach conf, $(CONFIGURATIONS), ...)\r\n\r\nCommit e937f9b4 didn't abide by this requirement, and thus only\r\ngenerated `XABuildPaths.cs` for the Debug configuration. As such, when\r\nattempting to build in the Release configuration, [things broke][0]:\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/958/\r\n\r\n\tCSC: error CS2001: Source file '…/xamarin-android/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/../../../../bin/TestRelease/XABuildPaths.cs' could not be found.\r\n\r\nThe fix is to update `make prepare-paths` so that it generates\r\n`bin/Test$(Configuration)/XABuildPaths.cs` for *all*\r\n`$(CONFIGURATIONS)` values."},{"Id":"7564189940","Type":"IssuesEvent","CreatedAt":"2018-04-20T21:27:02","Actor":"rubo","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1588","RelatedDescription":"Opened issue \"NetworkOnMainThreadException in AndroidClientHandler on cancellation\" (#1588) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nUnfortunately, I'm not able to reproduce this error myself as it works fine on my devices. I got the error report from App Center.\r\n\r\n### Expected Behavior\r\nCancelling HTTP task from main thread should not cause NetworkOnMainThreadException. Actual HTTP task is launched from another thread.\r\n\r\n### Actual Behavior\r\n```\r\nExceptionDispatchInfo.Throw ()\r\nJniEnvironment+InstanceMethods.CallVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args)\r\nJniPeerMembers+JniInstanceMethods.InvokeAbstractVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters)\r\nHttpsURLConnectionInvoker.Disconnect ()\r\nAndroidClientHandler+<>c__DisplayClass42_0.<ConnectAsync>b__1 ()\r\nCancellationToken.ActionToActionObjShunt (System.Object obj)\r\nCancellationCallbackInfo.ExecutionContextCallback (System.Object obj)\r\nExecutionContext.RunInternal (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx)\r\nExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx)\r\nExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state)\r\nCancellationCallbackInfo.ExecuteCallback ()\r\nCancellationTokenSource.CancellationCallbackCoreWork (System.Threading.CancellationCallbackCoreWorkArguments args)\r\nCancellationTokenSource.ExecuteCallbackHandlers (System.Boolean throwOnFirstException)\r\n\r\n\r\nandroid.os.NetworkOnMainThreadException\r\nandroid.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1166)\r\ncom.android.org.conscrypt.OpenSSLSocketImpl.close(OpenSSLSocketImpl.java:1010)\r\ncom.android.okhttp.Connection.close(Connection.java:175)\r\ncom.android.okhttp.internal.Util.closeQuietly(Util.java:110)\r\ncom.android.okhttp.internal.http.HttpEngine.release(HttpEngine.java:447)\r\ncom.android.okhttp.internal.http.HttpURLConnectionImpl.disconnect(HttpURLConnectionImpl.java:104)\r\ncom.android.okhttp.internal.http.HttpsURLConnectionImpl.disconnect(HttpsURLConnectionImpl.java:124)\r\nmono.android.view.View_OnClickListenerImplementor.n_onClick(Native Method)\r\nmono.android.view.View_OnClickListenerImplementor.onClick(View_OnClickListenerImplementor.java:30)\r\nandroid.view.View.performClick(View.java:4640)\r\nandroid.view.View$PerformClick.run(View.java:19425)\r\nandroid.os.Handler.handleCallback(Handler.java:733)\r\nandroid.os.Handler.dispatchMessage(Handler.java:95)\r\nandroid.os.Looper.loop(Looper.java:146)\r\nandroid.app.ActivityThread.main(ActivityThread.java:5593)\r\njava.lang.reflect.Method.invokeNative(Native Method)\r\njava.lang.reflect.Method.invoke(Method.java:515)\r\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1283)\r\ncom.android.internal.os.ZygoteInit.main(ZygoteInit.java:1099)\r\ndalvik.system.NativeStart.main(Native Method)\r\n```\r\n### Version Information\r\nThis happens on devices from KitKat to Nougat. No info on Oreo."},{"Id":"7563908576","Type":"PullRequestEvent","CreatedAt":"2018-04-20T20:19:31","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1587","RelatedDescription":"Opened pull request \"[mono-sdks] Pass the Host{Cc,Cxx}{32,64} parameters\" (#1587) at xamarin/xamarin-android","RelatedBody":""},{"Id":"7562759790","Type":"PullRequestEvent","CreatedAt":"2018-04-20T16:10:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1586","RelatedDescription":"Opened pull request \"[build] Generate XABuildPaths.cs for all $(CONFIGURATIONS)\" (#1586) at xamarin/xamarin-android","RelatedBody":"Commit e937f9b4 broke `make prepare` for the Release configuration.\r\nJenkins assumes that `make prepare` is a single invocation for *both*\r\nDebug & Release builds; see e.g. `make prepare-external`:\r\n\r\n\t$(foreach conf, $(CONFIGURATIONS), ...)\r\n\r\nCommit e937f9b4 didn't abide by this requirement, and thus only\r\ngenerated `XABuildPaths.cs` for the Debug configuration. As such, when\r\nattempting to build in the Release configuration, [things broke][0]:\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/958/\r\n\r\n\tCSC: error CS2001: Source file '…/xamarin-android/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/../../../../bin/TestRelease/XABuildPaths.cs' could not be found.\r\n\r\nThe fix is to update `make prepare-paths` so that it generates\r\n`bin/Test$(Configuration)/XABuildPaths.cs` for *all*\r\n`$(CONFIGURATIONS)` values."},{"Id":"7561891175","Type":"PullRequestEvent","CreatedAt":"2018-04-20T13:43:48","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1581","RelatedDescription":"Closed pull request \"[Xamarin.Android.Build.Tests] Use `MSBUILD` environment variable rather than `USE_MSBUILD`.\" (#1581) at xamarin/xamarin-android","RelatedBody":"In our old unit test system we called into msbuild/xbuild\r\ndirectly. With our new system we make use of `xabuild`. This\r\nis a wrapper around msbuild/xbuild which sets up the\r\nxamarin-android environment.\r\n\r\nFor the old tests we passed `USE_MSBUILD` to control if we neeed\r\nto use msbuild or xbuild. However with `xabuild` we pass the\r\n`MSBUILD` environment varioable. This can be `msbuild` or `xbuild`\r\nrather than a `1` or `0`.\r\n\r\nThe problem is the old variable was still being used so there\r\nwas a mismatch between what the tests were expecting and what\r\nwas being used. So take\r\n\r\n\tMSBUILD=msbuild\r\n\tUSE_MSBUILD=0\r\n\r\nThe tests would expect to be using xbuild and will therefore check\r\nfor xbuild type messages and behaviour. But xabuild would be using\r\nmsbuild. This results in weird errors.\r\n\r\nSo lets get rid of the `USE_MSBUILD` usage and just use the `MSBUILD`\r\nenvionment variable to decide which system we are using."},{"Id":"7561389820","Type":"IssuesEvent","CreatedAt":"2018-04-20T12:07:45","Actor":"stmax82","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1585","RelatedDescription":"Opened issue \"Wrong Android resources found - works with rebuild, doesn't work with build\" (#1585) at xamarin/xamarin-android","RelatedBody":"We're haunted by a weird problem in one of our apps and I think I was finally able to reduce the project to a small post-able example.\r\n\r\nA layout in an Android library defines a SurfaceView with the id \"cameraPreview\":\r\n\r\n```xml\r\n    <SurfaceView\r\n        android:id=\"@+id/cameraPreview\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n```\r\n\r\nThen the problem happens with the following line of code:\r\n\r\n```csharp\r\nvar preview = FindViewById<SurfaceView>(Resource.Id.cameraPreview);\r\n```\r\n\r\n* Sometimes this line correctly returns a SurfaceView instance.\r\n* Sometimes it returns null (and causes NullReferenceExceptions further down).\r\n* Sometimes it throws an InvalidCastException because it tries to return an instance of something else.\r\n\r\nWe are not sure what causes the different behaviours. There seems to be a difference between Build and Rebuild and Clean+Build before starting the app. But we also have a project where the problem always happens, no matter if we Build, Rebuild or Clean+Build...\r\n\r\n### Steps to Reproduce\r\n\r\n* Please download (or git clone) the following example: https://github.com/stmax82/XamarinBuildVsRebuild.git\r\n* Connect an Android phone to the PC\r\n* Open MyApp.sln\r\n* Set as StartUp Project \"MyApp.Android\"\r\n* Make sure the phone is selected (normally happens automatically)\r\n* Press F5 to start the app on the phone\r\n* Once started, press the \"TEST\" button\r\n\r\n**-> It will either fail with a NullReferenceException or with an InvalidCastException**\r\n\r\nNow **delete everything** (this is important) and start over:\r\n\r\n* Please download (or git clone) the following example: https://github.com/stmax82/XamarinBuildVsRebuild.git\r\n* Connect an Android phone to the PC\r\n* Open MyApp.sln\r\n* Set as StartUp Project \"MyApp.Android\"\r\n* Make sure the phone is selected (normally happens automatically)\r\n* **Click \"Clean Solution\" on the solution**\r\n* Press F5 to start the app on the phone\r\n* Once started, press the \"TEST\" button\r\n\r\n**-> This time it will work and display \"Result: foo\"**\r\n\r\n### Expected Behavior\r\n\r\n1. FindViewById should always return the SurfaceView with the id \"cameraPreview\"\r\n2. Build vs Rebuild vs Clean+Build should always produce the exact same output\r\n\r\n### Actual Behavior\r\n\r\n* FindViewById sometimes returns wrong views or nothing (null) even though the view's id is defined\r\n* Build produces a different output than Clean+Build and Rebuild\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.6.6\r\nVisualStudio.15.Release/15.6.6+27428.2037\r\nMicrosoft .NET Framework\r\nVersion 4.7.02558\r\n\r\nInstalled Version: Professional\r\n\r\nVisual F# Tools 10.1 for F# 4.1   00369-60000-00001-AA170\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.11.10402.2\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40314.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51214.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40215.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40215.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCookiecutter   15.6.18072.2\r\nProvides tools for finding, instantiating and customizing templates in cookiecutter format.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.2.9000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.2.9000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.2.9000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51212.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.9.11-pre (71eb098)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.6.18072.2\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - Django support   15.6.18072.2\r\nProvides templates and integration for the Django web framework.\r\n\r\nPython - IronPython support   15.6.18072.2\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.6.18072.2\r\nProfiling support for Python projects.\r\n\r\nR Tools for Visual Studio   1.3.40104.1351\r\nProvides project system, R Interactive window, plotting, and more for the R programming language.\r\n\r\nSQL Server Data Tools   15.1.61801.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.6.20202.3\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.9.0.753 (f0f46392f)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.10.96 (a702a9ceb)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.2.0.16 (HEAD/a78295902)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.9.1.24 (f62de47)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7568596964","Type":"IssuesEvent","CreatedAt":"2018-04-22T21:22:54","Actor":"EltonGarcia","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2521","RelatedDescription":"Opened issue \"MarkupExtension not found with net standard 2.0\" (#2521) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nMarkupExtension not found with net standard 2.0\r\n\r\n### Steps to Reproduce\r\n\r\n1. Clone the issue project sample (https://github.com/EltonGarcia/XamarinMarkupExtensionIssue)\r\n2. Build the project\r\n\r\n### Expected Behavior\r\nBuild successful\r\n\r\n### Actual Behavior\r\nBuild fails with error: Type design:HslColorExtension not found in xmlns clr-namespace:Design.Extensions;assembly:Design (MarkupIssue)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.444934\r\n- Last known good version: ?\r\n- IDE: Visual Studio for Mac\r\n- Nuget Packages: Xamarin Forms and System.ComponentModel\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/EltonGarcia/XamarinMarkupExtensionIssue\r\n"},{"Id":"7565171131","Type":"IssuesEvent","CreatedAt":"2018-04-21T06:34:57","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2039","RelatedDescription":"Closed issue \"ForceUpdateSize Delay issue\" (#2039) at xamarin/Xamarin.Forms","RelatedBody":"Hi Xamarin\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/Cells/Cell.cs#L211-L218\r\n\r\nWe can see such comment \"don't run more than once per 16 milliseconds\", but this code doesn't ensure 16 milliseconds delay... It just requires to wait every thread, there is no thread sync..\r\n\r\nPerhaps, it can be regarding to https://forums.xamarin.com/discussion/123437/forceupdatesize-slows-ui#latest"},{"Id":"7564938113","Type":"IssuesEvent","CreatedAt":"2018-04-21T03:22:43","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2520","RelatedDescription":"Opened issue \"[Android] Effects don't detach and OnElementchanged(null) is never called\" (#2520) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nOn Android when the Renderer disposes it doesn't call SetElement(null) it only sets the property so it doesn't propagate anywhere.  This behavior isn't consistent with how it works on iOS and UWP.  In the documentation it typically talks about using *OnDetached* and *if(e.OldElement != null)* to unhooks your code.  As it stands on Android it's probably best to write a general method that unhooks everything and then call that from both Dispose and *if(e.OldElement != null)*  as that's the only reliable way your custom bits will be disposed of.\r\n\r\nI tested calling *SetElement(null)* but it didn't \"just work\" \r\n\r\n\r\n### Steps to Reproduce\r\n- run the sample\r\n- the sample has a custom effect and it's own custom button renderer\r\n- click the button on the first page to navigate forward\r\n- click the button on the second page to navigate back\r\n- notice on UWP/iOS that OnDetached and OnElementChanged are called when the page is popped off the stack but Android that does not happen\r\n\r\n\r\n\r\n\r\n### Expected Behavior\r\n- OnElementChanged gets called when the Element is set to null\r\n- Effects get Detached when the Element is set to null\r\n\r\n### Actual Behavior\r\n- OnElementChanged never gets called when the Element is set to null\r\n- Effects don't Detached when the Element is set to null\r\n\r\n### Basic Information\r\n- Version with issue: 3.0 \r\n \r\n### Reproduction Link\r\n[EffectsAndRenderers.zip](https://github.com/xamarin/Xamarin.Forms/files/1934109/EffectsAndRenderers.zip)\r\n"},{"Id":"7564600699","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:48:40","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2519","RelatedDescription":"Opened pull request \"[Core] Improve Renderer registration order\" (#2519) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRenderers are registered in three ways in Xamarin.Forms:\r\n\r\n1. Via the `RenderWithAttribute`. This is how core renderers are registered for Android.\r\n2. Via the `ExportRendererAttribute`. This is how core renderers are registered for iOS, UWP, and how users typically register their custom renderers.\r\n3. Via `RegisterHandlerForDefaultRenderer`. This is how core renderers are registered for AppCompat and Fast Renderers.\r\n\r\nAfter we introduced the `RenderWith` model, it became possible for the `Registrar` to return a less specific renderer for a type if a renderer for a base type was registered first.\r\n\r\nThis change alters the order in which we hunt for the most specific renderer and also ensures that we are registering the proper types with the proper renderers.\r\n\r\n### Bugs Fixed ###\r\n\r\n- fixes #2489\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\nNone observed, but this is a significant core change that should be tested thoroughly.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7565975017","Type":"PullRequestEvent","CreatedAt":"2018-04-21T15:47:25","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3971","RelatedDescription":"Merged pull request \"[Foundation] Implement NSUrlProtocolClient properly on macOS. Fixes #3968.\" (#3971) at xamarin/xamarin-macios","RelatedBody":"This fixes a 3 year old \"temporary\" workaround: https://github.com/xamarin/maccore/commit/89e981147d47833e6e8eeaeda8a9635044f10e2c\n\nFixes https://github.com/xamarin/xamarin-macios/issues/3968."},{"Id":"7565975012","Type":"IssuesEvent","CreatedAt":"2018-04-21T15:47:24","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3968","RelatedDescription":"Closed issue \"NSUrlProtocolClient is not implemented properly on macOS\" (#3968) at xamarin/xamarin-macios","RelatedBody":"See: https://github.com/xamarin/maccore/commit/89e981147d47833e6e8eeaeda8a9635044f10e2c\r\n\r\nA temporary workaround that was forgotten, and is now over 3 years old.\r\n\r\nCustomers have used a workaround: https://github.com/bratsche/azure-activedirectory-library-for-dotnet/blob/905c52139d86596ac1908885041e827ce0636d79/src/ADAL.PCL.iOS/AdalCustomUrlProtocol.cs#L32-L34, which makes this code incorrect: https://github.com/bratsche/azure-activedirectory-library-for-dotnet/blob/905c52139d86596ac1908885041e827ce0636d79/src/ADAL.PCL.iOS/AdalCustomUrlProtocol.cs#L92, because it's calling GetINativeObject with a class, not an interface, which may result in exceptions if there already is a managed instance for that particular native object (but with a different managed class)."},{"Id":"7564788881","Type":"IssuesEvent","CreatedAt":"2018-04-21T01:34:03","Actor":"biozal","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3974","RelatedDescription":"Opened issue \"Build errors after updating any XIB or Storyboard file \" (#3974) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\nAny time making any changes to a XIB or storyboard file using XCode - get build errors in LaunchScreen.storyboard even though LaunchScreen.storyboard didn't change. Only fix is to clean, exit out of Visual Studio for Mac and relaunch it.  VERY frustrating for working on large projects.\r\n\r\n### Expected Behavior\r\nbuild works without issues\r\n\r\n### Actual Behavior\r\nGet build errors - forced to clean project several times or restart Visual Studio for Mac before it starts working again.\r\n\r\n### Environment\r\nSee attached logs\r\n\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.4.3 (build 10)\r\nInstallation UUID: 34bee655-6c62-47e9-8e60-463ef21d3764\r\nRuntime:\r\n\tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508010000\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Version: 2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3 (14154)\r\nBuild 9E145\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.1.29 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.1.24 (Visual Studio Enterprise)\r\nHash: f62de472\r\nBranch: xcode9.3\r\nBuild date: 2018-03-29 19:30:53-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.16 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/lebeaaa/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t5.1 (API level 22)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704030010\r\nGit revision: 5af3e98549653fcc5335896ccc296343d08f31bb\r\nBuild date: 2018-04-12 12:32:07-04\r\nXamarin addins: fadb82fb0fe2668cb7789f8b524aec6fb8568ee7\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nVim 0.53.1\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n[IB-agent-diagnostics_2018-04-20_21-00-21_503000.zip](https://github.com/xamarin/xamarin-macios/files/1934042/IB-agent-diagnostics_2018-04-20_21-00-21_503000.zip)\r\n\r\n[Archive.zip](https://github.com/xamarin/xamarin-macios/files/1934043/Archive.zip)\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7564405854","Type":"IssuesEvent","CreatedAt":"2018-04-20T22:31:31","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3930","RelatedDescription":"Closed issue \"[XI]WatchOS Intent sample fail to build with MT4116 / NullReferenceException\" (#3930) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build watch intent sample from IDE or command line\r\n\r\n### Expected Behavior\r\nApp should build successfully\r\n### Actual Behavior\r\nApp fails to build with an error could not register the assembly xamarin.watchOS. This issue occurs only with watch intent sample. Watchkitcatalog is building successfully\r\n### Environment\r\n```\r\nhttps://gist.github.com/GouriKumari/49a33b1658478361ce0b177808b7fdbb\r\n```\r\n\r\n### Build Logs\r\n\r\nBuild Log: https://gist.github.com/GouriKumari/cca1bfb3a64d77a64e6e164b414e63b5\r\n\r\n### Regression:\r\nThis is working with d15-6, hence it is a regression in watch intent sample. This issue also occurs with latest XI from d15-7 11.10.1.170\n\n> VS bug [#599867](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/599867)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"988180901405364225","CreatedAt":"2018-04-22T22:21:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/WHbOgNnjfL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":5,"RawContent":null},{"Id":"987830341409832966","CreatedAt":"2018-04-21T23:08:01+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/VcwvXVvsi6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":96,"FavoriteCount":46,"RawContent":null},{"Id":"987416244490993664","CreatedAt":"2018-04-20T19:42:32+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":108,"FavoriteCount":49,"RawContent":null},{"Id":"987362257762967553","CreatedAt":"2018-04-20T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/4JyHATQW2I","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":70,"FavoriteCount":17,"RawContent":null},{"Id":"986658974685679617","CreatedAt":"2018-04-18T17:33:25+00:00","UserScreenname":"xamarinhq","Text":"Automatic iOS app provisioning with #VS2017 15.7 Preview 3: https://t.co/vFjy3uXtie https://t.co/sLhjkaHc9X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":100,"FavoriteCount":54,"RawContent":null},{"Id":"986626430950920192","CreatedAt":"2018-04-18T15:24:06+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/piucqHprNe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":118,"FavoriteCount":50,"RawContent":null},{"Id":"986268805629345792","CreatedAt":"2018-04-17T15:43:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/eK0geeikW6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":22,"RawContent":null},{"Id":"985953326079594496","CreatedAt":"2018-04-16T18:49:25+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":37,"RawContent":null},{"Id":"985907924479479811","CreatedAt":"2018-04-16T15:49:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/HMGMdGgDYr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"985296899346456576","CreatedAt":"2018-04-14T23:21:01+00:00","UserScreenname":"xamarinhq","Text":"Try out the #Xamarin Android Device Manager Preview, a tool for creating, editing, and controlling Android virtual… https://t.co/POMrs2vlnD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":33,"RawContent":null},{"Id":"984843662428459008","CreatedAt":"2018-04-13T17:20:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/1JLVLvKR0M","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":26,"RawContent":null},{"Id":"984821292938465285","CreatedAt":"2018-04-13T15:51:07+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/KTX4gcGjqZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":12,"RawContent":null},{"Id":"984463408073408513","CreatedAt":"2018-04-12T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/tX03cw88GD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"984140279061020672","CreatedAt":"2018-04-11T18:45:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with new #XamarinForms #XAML IntelliSense functionality in #VisualStudio 2017: https://t.co/EPKoitU5bA https://t.co/JnlquxCZN9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":37,"RawContent":null},{"Id":"983738884319334400","CreatedAt":"2018-04-10T16:10:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build Xamarin.iOS from the source code in the second part of our four-part series on debugging… https://t.co/uVkITyoInQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":12,"RawContent":null},{"Id":"983374729166934016","CreatedAt":"2018-04-09T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/O4ILyulYAJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":27,"RawContent":null},{"Id":"983104477468266496","CreatedAt":"2018-04-08T22:09:07+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your Xamarin apps with Azure CosmosDB: https://t.co/acrN8gdJdS https://t.co/7dgtdHbqn9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":16,"RawContent":null},{"Id":"982728475831390208","CreatedAt":"2018-04-07T21:15:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/FGw0WVLZMU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":21,"RawContent":null},{"Id":"982351517544996870","CreatedAt":"2018-04-06T20:17:07+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/0hyFj6caS2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":27,"RawContent":null},{"Id":"982287570737315842","CreatedAt":"2018-04-06T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/jQc7aGUfzQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-04-23T05:30:44.0203064Z","RunDurationInMilliseconds":4347}