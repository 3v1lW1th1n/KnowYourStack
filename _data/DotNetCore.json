{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7029631789","Type":"PullRequestEvent","CreatedAt":"2017-12-26T03:03:26","Actor":"dezsiszabi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15635","RelatedDescription":"Opened pull request \"Extending FormatException's message with datetime/format\" (#15635) at dotnet/coreclr","RelatedBody":"This PR is for dotnet/corefx#21825\r\n\r\nAdded the passed in string to the exception's message where applicable.\r\n\r\nIn order to do this I had to pass in the `__DTString` struct to some of the methods to have access to the `ReadOnlySpan<char>` and set the failure state accordingly.\r\n\r\nI also added a new exception message called `Format_NoFormatSpecifier`. This is shown when the user does this for example:\r\n\r\n    DateTime dt2 = DateTime.ParseExact(\"2012-12-12\", new string[0], DateTimeFormatInfo.CurrentInfo, DateTimeStyles.None); // passing in empty format specifier array\r\n\r\nI think the `No format specifiers were provided.` message is better than `Format specifier '' was invalid.`\r\n"},{"Id":"7029107873","Type":"PullRequestEvent","CreatedAt":"2017-12-25T18:19:00","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15634","RelatedDescription":"Opened pull request \"Use lower contention local TP queues\" (#15634) at dotnet/coreclr","RelatedBody":"When fairness is not required, use lower contention local TP queues rather than the single global one\r\n\r\n/cc @stephentoub "},{"Id":"7028546787","Type":"IssuesEvent","CreatedAt":"2017-12-25T11:05:07","Actor":"Luoyingliang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15633","RelatedDescription":"Closed issue \"IPEndPoint cannot return the correct value when compare the same value\" (#15633) at dotnet/coreclr","RelatedBody":"There are wrong value return when I do the execute this code:\r\n`ip1==ip2`\r\nboth `ip1` and `ip2` are IPEndPoint type,and value both are \"192.168.31.15:55360\",but it doesn't return true.\r\nnow I used the `ToString()` method to instead of that"},{"Id":"7028320135","Type":"IssuesEvent","CreatedAt":"2017-12-25T08:51:38","Actor":"Luoyingliang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15633","RelatedDescription":"Opened issue \"IPEndPoint cannot return the correct value when compare the same value\" (#15633) at dotnet/coreclr","RelatedBody":"There are wrong value return when I do the execute this code:\r\n`ip1==ip2`\r\nboth `ip1` and `ip2` are IPEndPoint type,and value both are \"192.168.31.15\",but it doesn't return true "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7028226039","Type":"PullRequestEvent","CreatedAt":"2017-12-25T08:00:41","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8293","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8293) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171225-080039\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171225-080039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7026179007","Type":"PullRequestEvent","CreatedAt":"2017-12-23T22:17:49","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8292","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26023-02 (master)\" (#8292) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7026062843","Type":"IssuesEvent","CreatedAt":"2017-12-23T20:19:41","Actor":"ThadHouse","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8291","RelatedDescription":"Opened issue \"Better instructions for using preview SDK's from Visual Studio\" (#8291) at dotnet/cli","RelatedBody":"I wanted to test out some of the Span functionality, so I was attempting to install the newest preview SDK in order to do this. I installed the latest version of the preview SDK (2.2.0-preview1-007851 at the time of this issue), and made sure I was using Visual Studio 15.5.2. I also added the myget nuget package source to my solution. However, visual studio does not seem to properly be restoring everything. I get an error `Unable to find package Microsoft.NETCore.App with version (>= 2.2.0-preview1-007851)`, and then a whole bunch of errors saying the System namespace can not be found. I can't find any more instructions on how to make it easy to use preview SDK's from visual studios. Can I get some help with getting this working, and potentially some better instructions for future users who want to do this? Below I have put my csproj file.\r\n\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>2.2.0-preview1-007851</RuntimeFrameworkVersion>\r\n    <LangVersion>7.2</LangVersion>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n"},{"Id":"7026059654","Type":"IssuesEvent","CreatedAt":"2017-12-23T20:16:29","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8290","RelatedDescription":"Opened issue \".NET Core SDK doesn't run in globalization invariant mode\" (#8290) at dotnet/cli","RelatedBody":"I wasn't able to get the .NET Core SDK to run in globalization invariant mode with Alpine.\r\n\r\nSee https://github.com/dotnet/dotnet-docker-nightly/pull/508\r\n\r\nTo repro, remove the last three lines of the Dockerfile.\r\n\r\nSample you can use for testing is at https://github.com/dotnet/dotnet-docker-samples/tree/alpine/dotnetapp-prod"},{"Id":"7025997341","Type":"PullRequestEvent","CreatedAt":"2017-12-23T19:15:46","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8289","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26023-01 (master)\" (#8289) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7025953055","Type":"PullRequestEvent","CreatedAt":"2017-12-23T18:33:37","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8289","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26023-01 (master)\" (#8289) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7025797190","Type":"IssuesEvent","CreatedAt":"2017-12-23T16:14:45","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8288","RelatedDescription":"Opened issue \"CLI first-run process creates repeating visual artifacts\" (#8288) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nBuild [SDK docker container](https://github.com/dotnet/dotnet-docker/tree/master/2.0/sdk/stretch/amd64).\r\n\r\n## Expected  behavior\r\n\r\nNo duplicating artifacts\r\n\r\n## Actual behavior\r\n\r\nA command is running to populate your local package cache to improve restore speed and enable offline access. This command takes up to one minute to complete and only runs once.\r\nDecompressingms\r\nExpandingms\r\n\r\n## Environment\r\n\r\nHappens with cmd.exe and bash when building container images with Docker.exe."},{"Id":"7024735529","Type":"PullRequestEvent","CreatedAt":"2017-12-22T23:15:20","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8287","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26022-04 (master)\" (#8287) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7024659621","Type":"PullRequestEvent","CreatedAt":"2017-12-22T22:34:25","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8287","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26022-04 (master)\" (#8287) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7024582180","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:57:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8281","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-preview2-4759 into cli\" (#8281) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into cli master branch"},{"Id":"7024456474","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:03:06","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8277","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#8277) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171221-080038\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171221-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7020301855","Type":"IssuesEvent","CreatedAt":"2017-12-21T20:59:25","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Closed issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"},{"Id":"7018954133","Type":"IssuesEvent","CreatedAt":"2017-12-21T15:32:21","Actor":"0xF6","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/612","RelatedDescription":"Opened issue \"Merge Library?\" (#612) at dotnet/standard","RelatedBody":"Now to merge.NET Standard libraries into one library?"},{"Id":"7016897774","Type":"IssuesEvent","CreatedAt":"2017-12-21T07:05:12","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Opened issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7015432489","Type":"PullRequestEvent","CreatedAt":"2017-12-20T21:45:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02320-01 (master)\" (#610) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7029785464","Type":"IssuesEvent","CreatedAt":"2017-12-26T04:50:31","Actor":"yishaigalatzer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26054","RelatedDescription":"Opened issue \"Potential unexpected null in httpclient\" (#26054) at dotnet/corefx","RelatedBody":"This [SO](https://stackoverflow.com/questions/47973590/httpclient-header-getting-nulled-when-using-in-async-methods) question alludes to a potential unexpected header being null.\r\n\r\nThis [line](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L600) does not check for header value being possibly null, leading to the argument null exception. \r\n\r\nIn case the SO thread disappears here is the call stack, not that it is in net 4.6.1 and not core, so I'm 50/50 if this exists here or not.\r\n\r\n#### Callstack\r\nSystem.ArgumentNullException: Value cannot be null.\r\n   at System.Threading.Monitor.Enter(Object obj)\r\n   at System.Net.Http.Headers.HttpHeaders.ParseRawHeaderValues(String name, HeaderStoreItemInfo info, Boolean removeEmptyHeader)\r\n   at System.Net.Http.Headers.HttpHeaders.AddHeaders(HttpHeaders sourceHeaders)\r\n   at System.Net.Http.Headers.HttpRequestHeaders.AddHeaders(HttpHeaders sourceHeaders)\r\n   at System.Net.Http.HttpClient.PrepareRequestMessage(HttpRequestMessage request)\r\n   at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)\r\n   at Attributes.Controllers.AttributesBaseController.<UpdateAttributes>d__6.MoveNext() in D:\\Git\\PortalSystem\\Attributes\\Controllers\\AttributesBaseController.cs:line 42"},{"Id":"7029453738","Type":"IssuesEvent","CreatedAt":"2017-12-26T00:56:20","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26053","RelatedDescription":"Opened issue \"Getting a ref return value using PropertyInfo\" (#26053) at dotnet/corefx","RelatedBody":"    public class RefAndRefReadonlyTestClass\r\n    {\r\n        private int _refField;\r\n        private readonly int _refReadonlyField;\r\n\r\n        public RefAndRefReadonlyTestClass(int refReadonlyField)\r\n        {\r\n            _refReadonlyField = refReadonlyField;\r\n        }\r\n\r\n        public ref int RefField => ref _refField;\r\n\r\n        public ref readonly int RefReadonlyField => ref _refReadonlyField;\r\n\r\n        public void SetRefField(int value)\r\n        {\r\n            _refField = value;\r\n        }\r\n    }\r\n\r\n    [Test]\r\n    public void GetRefReturnProperty()\r\n    {\r\n        PropertyInfo property = TestReflectionUtils.GetProperty(typeof(RefAndRefReadonlyTestClass), nameof(RefAndRefReadonlyTestClass.RefField));\r\n\r\n        RefAndRefReadonlyTestClass c1 = new RefAndRefReadonlyTestClass(123);\r\n        c1.SetRefField(456);\r\n\r\n        object v = property.GetValue(c1, null);\r\n    }\r\n\r\nThe code above throws this exception: `System.NotSupportedException: 'ByRef return value not supported in reflection invocation.'`\r\n\r\nCan you use a PropertyInfo to get the value of a ref return property?"},{"Id":"7029204203","Type":"PullRequestEvent","CreatedAt":"2017-12-25T20:00:50","Actor":"MarcoRossignoli","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26052","RelatedDescription":"Opened pull request \"\"Don't directly throw Exception\" System.Threading.Tasks.Dataflow\" (#26052) at dotnet/corefx","RelatedBody":"Contributes to #23748 .\r\n\r\ncc: @kouvel, @tarekgh"},{"Id":"7029109369","Type":"PullRequestEvent","CreatedAt":"2017-12-25T18:20:29","Actor":"mqudsi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26051","RelatedDescription":"Opened pull request \"Only set Headers.ContentLength if it isn't already correct\" (#26051) at dotnet/corefx","RelatedBody":"An unmanaged COM exception is thrown by Windows.Web.Http.dll when an\r\nattempt to set an already-present header is made. This particular line\r\nis in the hot path and is almost always invoked on outgoing requests\r\ncausing these COM exceptions to be thrown all the time. Avoiding\r\ndownstream exceptions should make things faster and result in fewer\r\npipeline flushes, etc.\r\n\r\nThe unmanaged exception stack trace under Windows 10 build 17063:\r\n\r\n```\r\n>\tKernelBase.dll!RaiseException\u001e()\tUnknown\tSymbols loaded.\r\n \tcombase.dll!SendReport(HRESULT error=0x8000000b, unsigned int cchMax=0, const wchar_t * message=0x00007ff854b2d8e4, unsigned short pSid=0x0000000000000000, void * pExceptionObject=0x0000000000000000, IUnknown *) Line 438\tC++\tSymbols loaded.\r\n \tcombase.dll!RoOriginateError(HRESULT error=0x8000000b, HSTRING__ * message) Line 590\tC++\tSymbols loaded.\r\n \tWindows.Web.Http.dll!Windows::Foundation::Collections::Internal::HashMap<struct HSTRING__ *,struct HSTRING__ *,struct StringCaseInsensitiveHash,struct StringCaseInsensitiveEquals,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,struct Windows::Foundation::Collections::Internal::HashMapOptions<struct HSTRING__ *,struct HSTRING__ *,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,0,1,0> >::Remove(struct HSTRING__ *)\tUnknown\tSymbols loaded.\r\n \tWindows.Web.Http.dll!HttpHeaderCollectionBase::Remove(struct HSTRING__ *)\tUnknown\tSymbols loaded.\r\n \tWindows.Web.Http.dll!HttpHeaderCollectionBase::TryRemoveHeaderValueInfo(struct HSTRING__ *)\tUnknown\tSymbols loaded.\r\n \tWindows.Web.Http.dll!HttpHeaderCollectionBase::SetParsedValue(unsigned short const *,struct IInspectable *)\tUnknown\tSymbols loaded.\r\n \t[Managed to Native Transition]\t\tAnnotated Frame\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.CreateRequestContentAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, Windows.Web.Http.Headers.HttpRequestHeaderCollection rtHeaderCollection = {Windows.Web.Http.Headers.HttpRequestHeaderCollection}) Line 390\tC#\tSymbols loaded.\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.ConvertRequestAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Net.Http.HttpMethod httpMethod = {System.Net.Http.HttpMethod}, bool skipRequestContentIfPresent = false) Line 333\tC#\tSymbols loaded.\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Threading.CancellationToken cancel = IsCancellationRequested = false) Line 78\tC#\tSymbols loaded.\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false) Line 596\tC#\tSymbols loaded.\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) Line 51\tC#\tSymbols loaded.\r\n \tSystem.Net.Http.dll!System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Net.Http.HttpCompletionOption completionOption = ResponseHeadersRead, System.Threading.CancellationToken cancellationToken) Line 433\tC#\tSymbols loaded.\r\n \tSystem.Net.Requests.dll!System.Net.HttpWebRequest.SendRequest() Line 1222\tC#\tSymbols loaded.\r\n \tSystem.Net.Requests.dll!System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback callback = {System.AsyncCallback}, object state = {System.Net.HttpWebRequest}) Line 1234\tC#\tSymbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.TaskFactory<System.Net.WebResponse>.FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, System.Net.WebResponse> endFunction = {System.Func<System.IAsyncResult, System.Net.WebResponse>}, System.Action<System.IAsyncResult> endAction = null, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) Line 810\tC#\tSymbols loaded.\r\n \tSystem.Net.Requests.dll!System.Net.WebRequest.GetResponseAsync.AnonymousMethod__68_0() Line 548\tC#\tSymbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<System.Threading.Tasks.Task<System.Net.WebResponse>>.InnerInvoke() Line 611\tC#\tSymbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 145\tC#\tSymbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 3321, Status = Running, Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context., Result = Cannot evaluate expression because a native frame is on the top of the call stack.) Line 2449\tC#\tSymbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 582\tC#\tSymbols loaded.\r\n \t[Native to Managed Transition]\t\tAnnotated Frame\r\n \tkernel32.dll!00007ff853204354()\tUnknown\tNo symbols loaded.\r\n \tntdll.dll!RtlUserThreadStart\u001e()\tUnknown\tSymbols loaded.\r\n```\r\n\r\nI don't have access to the source code for `Windows.Web.Http.dll` so this workaround is the best I can offer."},{"Id":"7028969773","Type":"PullRequestEvent","CreatedAt":"2017-12-25T16:14:02","Actor":"MarcoRossignoli","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26050","RelatedDescription":"Opened pull request \"\"Don't directly throw Exception\" System.ComponentModel.TypeConverter\" (#26050) at dotnet/corefx","RelatedBody":"Contributes to #23748 \r\n\r\ncc: @maryamariyan, @safern "},{"Id":"7028958352","Type":"IssuesEvent","CreatedAt":"2017-12-25T16:04:51","Actor":"realvictorprm","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26045","RelatedDescription":"Closed issue \"Add another constructor to Span using IntPtr\" (#26045) at dotnet/corefx","RelatedBody":"Hello,\r\n\r\nin F# we cannot cast ptr's to void ptr's (the type `nativeptr<unit>` is disallowed due to `unit` isn't an unmanaged type). Therefor it's currently not possible for me to create a Span from stackallocated memory in F# 😢 (Signature of the constructor is funnily `ptr:nativeptr<unit>* length:int -> Span`).\r\n\r\nEasiest solution short-term would be to add another constructor to the Span class which accepts an `IntPtr`. Long-term I try to solve the issue in F#, for reference see [this](https://github.com/Microsoft/visualfsharp/issues/4166) issue.\r\n\r\nIf there's something wrong with `IntPtr` please tell me, I might miss some reason for not using it🤔 ?"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7029785062","Type":"PullRequestEvent","CreatedAt":"2017-12-26T04:50:13","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23935","RelatedDescription":"Opened pull request \"Command-line options starting with dash are not file paths\" (#23935) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nInvoke the compiler with invalid command-line argument which starts with a `-` but also contains a `/`. The compiler throws an assertion.\r\nFor example, `-debug+/debug:portable`.\r\nThe assertion is that options can start with `-`, but paths shouldn't. The reason we're treating this argument as a possible path is because it contains a `/` (which is recognized by a heuristic for Linux paths).\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/21508\r\n\r\n### Workarounds, if any\r\nSpecify valid command-line arguments.\r\n\r\n### Risk\r\n### Performance impact\r\nLow. Adding a character check during command-line parsing.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nReported by team-member."},{"Id":"7029683868","Type":"IssuesEvent","CreatedAt":"2017-12-26T03:35:29","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23903","RelatedDescription":"Closed issue \"Clarify that the default is 'latest major version' on the wiki/NuGet-packages page\" (#23903) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/roslyn/wiki/NuGet-packages has a list of versions, and I find it to be misleading in its current form. For example:\r\n\r\n> Version 2.6 means C# 7.2 and VB 15.5 (Visual Studio 2017 version 15.5).\r\n\r\nThat doesn't mean C# 7.2 will be used, it means C# 7.2 is available. By default, C# 7.0 will be used.\r\n\r\nThe documentation should mention that you need to modify the project properties to target the latest minor version. This can be done via the UI (see the screenshot below), although this simply modifies configurations instead of modifying a `<PropertyGroup>` without `Condition=\"...\"`. So an alternative is to modify the `.csproj` file manually.\r\n\r\n![image](https://user-images.githubusercontent.com/1618054/34263466-e6d547a8-e66f-11e7-913d-6d3f8742fe97.png)\r\n"},{"Id":"7029528233","Type":"IssuesEvent","CreatedAt":"2017-12-26T01:57:00","Actor":"kuhlenh","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23934","RelatedDescription":"Opened issue \"Turn expression-body for methods off by default\" (#23934) at dotnet/roslyn","RelatedBody":"This came up in a review that it's confusing for customers to see gray dots in a template, fix it, and then have an icon appear showing to convert it back. \r\n\r\nFYI @jinujoseph @Pilchie "},{"Id":"7029516705","Type":"PullRequestEvent","CreatedAt":"2017-12-26T01:48:57","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23933","RelatedDescription":"Opened pull request \"Missing argument should not trigger GenerateConstructor/AddParamter\" (#23933) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nIn VB, invoke a constructor with an omitted argument `New C(, 0)`. The error for a missing argument triggers the GenerateConstructor/AddParameter code fixers.\r\nThat code fixer cannot handle this case and should not. The fix is to not trigger this code fixer on this diagnostic.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/23927\r\n\r\n### Risk\r\n### Performance impact\r\nLow. Just removing an error code from the list of fixable errors.\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### How was the bug found?\r\nReported by customer"},{"Id":"7029452423","Type":"PullRequestEvent","CreatedAt":"2017-12-26T00:55:08","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23932","RelatedDescription":"Opened pull request \"[WIP] Disposable pooled syntax list builders\" (#23932) at dotnet/roslyn","RelatedBody":"Experiment to see the effects of using disposable pooled syntax list builders."},{"Id":"7029451961","Type":"PullRequestEvent","CreatedAt":"2017-12-26T00:54:39","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23931","RelatedDescription":"Opened pull request \"Add test for obsolete Deconstruct method\" (#23931) at dotnet/roslyn","RelatedBody":"Test-only check to verify that an obsolete Deconstruct method is properly reported when used in a deconstruction."},{"Id":"7029428192","Type":"PullRequestEvent","CreatedAt":"2017-12-26T00:28:52","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23926","RelatedDescription":"Merged pull request \"Merge master to features/compiler\" (#23926) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compiler-20171225-080024\ngit reset --hard upstream/features/compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/compiler-20171225-080024 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7029427359","Type":"PullRequestEvent","CreatedAt":"2017-12-26T00:27:53","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23930","RelatedDescription":"Opened pull request \"Fix two bugs in async lifting analysis which results in unnecessarily lifted locals.\" (#23930) at dotnet/roslyn","RelatedBody":"The first issue is that we did not properly track the unreachable state in lifting analysis. I believe we did so to work around a bug that has since been fixed.\r\nThe second issue is that an assignment in a conditional branch condition was not treated as conditional.\r\n\r\nSince VB does not have an assignment expression, I do not have a repro for user locals, but the fix results in some temps no longer being unnecessarily lifted (as shown by changes in existing tests)\r\n\r\n### Customer scenario\r\n\r\nAsync methods have longer bodies, and more locals lifted, than necessary.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #13759\r\n\r\n### Workarounds, if any\r\n\r\nNone known.\r\n\r\n### Risk\r\n\r\nThe fix is simple. On the other hand, flow analysis is subtle and the reasons that we tracked unreachable state the way we did is lost in prehistory.\r\n\r\n### Performance impact\r\n\r\nChanges are simple and local, so no performance impact expected.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nWe do not have extensive testing for which locals are lifted in async code under what circumstances. Too much lifting is generally only a performance (not correctness) problem, so we did not prioritize it.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n\r\nIt would be good to add tests around which locals are lifted for various language constructs. Once that is in place, we could add it as an item to check off for testing new features. This suggestion is recorded in #23929.\r\n"},{"Id":"7029419667","Type":"IssuesEvent","CreatedAt":"2017-12-26T00:18:29","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23929","RelatedDescription":"Opened issue \"Add tests for lifted variables in async/iterator code\" (#23929) at dotnet/roslyn","RelatedBody":"We do not have many tests that verify the set of variables lifted in async or iterator code. It would be good to add a bit of testing infrastructure to make that easy, and add tests. Also, this could be added to the checklist for new features."},{"Id":"7029335613","Type":"IssuesEvent","CreatedAt":"2017-12-25T22:34:40","Actor":"paul1956","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23928","RelatedDescription":"Opened issue \"VB Collection with ? gets an error \" (#23928) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 2017 15.5.2\r\n**Steps to Reproduce**:\r\n```\r\n                   For Each a In node.AccessorList**?**.Accessors\r\n                       ' Anything\r\n                   Next\r\n```\r\n1. With the above code I would expect no errors\r\n2. The problem is with the ?. before Accessors \r\n\r\n**Expected Behavior**:\r\nNo Error\r\n**Actual Behavior**:\r\nError\tBC32023\tExpression is of type 'SyntaxList(Of AccessorDeclarationSyntax)?', which is not a collection type"},{"Id":"7029080845","Type":"IssuesEvent","CreatedAt":"2017-12-25T17:52:15","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23927","RelatedDescription":"Opened issue \"VB: VisualBasicAddParameterCodeFixProvider should not crash when code has semantic errors\" (#23927) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nType in the following code in a VB console project:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Private Class Foo\r\n    Public Sub New(Arg1 As Integer)\r\n    End Sub\r\n\r\n    Public Sub New(Arg1 As Integer, Arg2 As Integer)\r\n    End Sub\r\n  End Class\r\n\r\n  Public Sub Main()\r\n    Dim x = New Foo(, 0) '<--- this line has an error (first argument not specified)\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nThe editor will correctly put a red squiggle on `Foo` and complain than an argument has not been specified in that constructor call, but when you hover over the squiggle to see the error, the `VisualBasicAddParameterCodeFixProvider` is triggered and crashes:\r\n\r\n![vs_addparamprovider_crash](https://user-images.githubusercontent.com/20465797/34341964-d48b5a3c-e9b3-11e7-8fb2-258970770c0d.png)\r\n\r\nIf you click the Enable button in that error message near the top, then hover over the red squiggly again it crashes again. You can repeat this as many times as you want and it crashes every time. The stack trace given is:\r\n\r\n```\r\nSystem.ArgumentNullException : Value cannot be null.\r\nParameter name: node\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetTypeInfoForNode(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetTypeInfoCore(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.DetermineFirstArgumentToAdd(SemanticModel semanticModel,ISyntaxFactsService syntaxFacts,StringComparer comparer,IMethodSymbol method,SeparatedSyntaxList`1 arguments,TArgumentSyntax argumentOpt)\r\n   at async Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.HandleObjectCreationExpressionAsync[TArgumentSyntax,TAttributeArgumentSyntax,TArgumentListSyntax,TAttributeArgumentListSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.RegisterCodeFixesAsync[TArgumentSyntax,TAttributeArgumentSyntax,TArgumentListSyntax,TAttributeArgumentListSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIt should not crash. This seems similar to #23807 and it appears as if these code fix providers don't have the same resilience of the core compilers. In both issues, the compiler reports the syntax/semantic errors without crashing, it would be great if the code fix providers could leverage that resilience in their analysis before triggering 👍\r\n\r\nCC: @jcouv @dpoeschl \r\nPS: Merry Christmas!"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7027661455","Type":"PullRequestEvent","CreatedAt":"2017-12-25T01:06:53","Actor":"benaadams","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5153","RelatedDescription":"Opened pull request \"Reduce EC Save+Restore for Default context\" (#5153) at dotnet/corert","RelatedBody":"Matching change for shared code in https://github.com/dotnet/coreclr/pull/15629"},{"Id":"7027287246","Type":"PullRequestEvent","CreatedAt":"2017-12-24T17:50:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5150","RelatedDescription":"Merged pull request \"Fix marshaling of pointers marked with [Out]\" (#5150) at dotnet/corert","RelatedBody":"[Out] on pointers need to be ignored similar to how it is ignored on other blittable types"},{"Id":"7027065651","Type":"IssuesEvent","CreatedAt":"2017-12-24T14:28:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5152","RelatedDescription":"Reopened issue \"Fix marshalling code to meet the CIL backwards branch constraint\" (#5152) at dotnet/corert","RelatedBody":"See #5149 - we can't use the validating IL emitter to generate marshalling code because the generated code fails to satisfy ECMA-335 III.1.7.5 on backwards branch constraints.\r\n"},{"Id":"7027065564","Type":"IssuesEvent","CreatedAt":"2017-12-24T14:28:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5152","RelatedDescription":"Closed issue \"Fix marshalling code to meet the CIL backwards branch constraint\" (#5152) at dotnet/corert","RelatedBody":"See #5149 - we can't use the validating IL emitter to generate marshalling code because the generated code fails to satisfy ECMA-335 III.1.7.5 on backwards branch constraints.\r\n"},{"Id":"7027064703","Type":"PullRequestEvent","CreatedAt":"2017-12-24T14:27:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5149","RelatedDescription":"Merged pull request \"Add algorithm to compute the MaxStack value\" (#5149) at dotnet/corert","RelatedBody":"This serves two purposes:\r\n\r\n- Compute MaxStack for generated IL. We were estimating the MaxStack by reporting the number of bytes of IL but this was inhibiting inlining in RyuJIT\r\n- Add code to validate stack balance for IL we generate. This lets us catch issues before they reach codegen. This should help productivity because it lets us avoid having to either build a checked RyuJIT to troubleshoot this, or debug the IL manually on paper.\r\n\r\nFixes #2119."},{"Id":"7027064701","Type":"IssuesEvent","CreatedAt":"2017-12-24T14:27:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/2119","RelatedDescription":"Closed issue \"ILEmitter should compute the maxstack value\" (#2119) at dotnet/corert","RelatedBody":"Maxstack is currently set to the number of bytes in the IL body of the method, but this number is unnecessarily big. RyuJIT makes e.g. inlining decisions using the value of maxstack. For well formed IL it is a trivial operation to compute maxstack.\r\n\r\nOnce we can compute stack height at arbitrary instructions, we can also use it to provide better asserts to validate the IL and improve developer productivity (validate that branches don't cause stack imbalance, method has a return value on the stack, etc.)."},{"Id":"7026978294","Type":"IssuesEvent","CreatedAt":"2017-12-24T13:12:49","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5152","RelatedDescription":"Opened issue \"Fix marshalling code to meet the CIL backwards branch constraint\" (#5152) at dotnet/corert","RelatedBody":"See #5149 - we can't use the validating IL emitter to generate marshalling code because the generated code fails to satisfy ECMA-335 III.1.7.5 on backwards branch constraints.\r\n"},{"Id":"7026968716","Type":"PullRequestEvent","CreatedAt":"2017-12-24T13:03:32","Actor":"yaram","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5151","RelatedDescription":"Opened pull request \"Implement cpobj opcode for wasm\" (#5151) at dotnet/corert","RelatedBody":"Implements the ILToWebAssemblyImporter.ImportCpObj method using a call\r\nto an llvm.malloc.* intrinsic.\r\n\r\nFix #4548"},{"Id":"7026551616","Type":"PullRequestEvent","CreatedAt":"2017-12-24T05:43:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5150","RelatedDescription":"Opened pull request \"Fix marshaling of pointers marked with [Out]\" (#5150) at dotnet/corert","RelatedBody":"[Out] on pointers need to be ignored similar to how it is ignored on other blittable types"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7025969737","Type":"PullRequestEvent","CreatedAt":"2017-12-23T18:49:12","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"},{"Id":"7024482097","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:13:52","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"},{"Id":"7024443991","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:57:50","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"7024440549","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:56:24","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.5.0-rtm-4651 into sdk\" (#1753) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"7024228195","Type":"PullRequestEvent","CreatedAt":"2017-12-22T19:36:32","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1829","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4745 into sdk\" (#1829) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4745 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-26T05:30:21.0366648Z","RunDurationInMilliseconds":7652}