{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. Please avoid installing this update on Windows 7 or Windows Server 2008 R2. See .NET Framework January 2018 Rollup Known Issue...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7127944366","Type":"IssuesEvent","CreatedAt":"2018-01-21T04:52:09","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15954","RelatedDescription":"Opened issue \"ArrayPool logging initialization is 70% of startup for empty program\" (#15954) at dotnet/coreclr","RelatedBody":"Empty program executes about 320 methods managed methods today (in release build). Initialization of ArrayPool logging (ArrayPoolEventSource) is responsible for 220 of them. When the ArrayPool initialization is commented out, I am back to about 100 where we used to to be historically.\r\n\r\nIs the ArrayPool logging valueable enough to contribute this much to startup cost of empty program? Can we make it cheaper or not have it?"},{"Id":"7127797339","Type":"PullRequestEvent","CreatedAt":"2018-01-21T02:33:47","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15953","RelatedDescription":"Opened pull request \"Move TimeZoneInfo.Win32.cs to shared CoreLib partition\" (#15953) at dotnet/coreclr","RelatedBody":"Reconcile deltas with CoreRT and refactor interop for follow coding conventions"},{"Id":"7127780295","Type":"PullRequestEvent","CreatedAt":"2018-01-21T02:18:08","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15952","RelatedDescription":"Merged pull request \"Define Interop.Kernel32.MAX_PATH\" (#15952) at dotnet/coreclr","RelatedBody":"For consistency with CoreFX and coding conventions."},{"Id":"7127749898","Type":"PullRequestEvent","CreatedAt":"2018-01-21T01:49:42","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15948","RelatedDescription":"Merged pull request \"Fix a minor bug\" (#15948) at dotnet/coreclr","RelatedBody":"This bug is from https://github.com/dotnet/coreclr/pull/15798\r\n\r\ncc @CarolEidt @BruceForstall @sdmaclea "},{"Id":"7127427341","Type":"PullRequestEvent","CreatedAt":"2018-01-20T21:32:47","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15951","RelatedDescription":"Merged pull request \"Fix timezone lookup to be consistently case insensitive\" (#15951) at dotnet/coreclr","RelatedBody":"The timezone ids used case insensitive comparisons everywhere, except in the dictionary used to cache timezones.\r\n\r\nFixes dotnet/corefx#26479"},{"Id":"7127193342","Type":"PullRequestEvent","CreatedAt":"2018-01-20T18:55:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15952","RelatedDescription":"Opened pull request \"Define Interop.Kernel32.MAX_PATH\" (#15952) at dotnet/coreclr","RelatedBody":"For consistency with CoreFX and coding conventions."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7127834865","Type":"PullRequestEvent","CreatedAt":"2018-01-21T03:08:44","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8437","RelatedDescription":"Opened pull request \"WIP [tools]MacOs HighSierra Fallback\" (#8437) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/8436"},{"Id":"7127376175","Type":"IssuesEvent","CreatedAt":"2018-01-20T20:58:41","Actor":"dasMulli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8436","RelatedDescription":"Opened issue \"[tool] Cannot install tool cerated using PackAsTool=true\" (#8436) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n* Using `2.2.0-preview1-008000` on high sierra\r\n* Create a console app targeting `netcoreapp2.1` and set `PackAsTool` property to `true`. (`sayhi.csproj`)\r\n* Create a nuget.config file to add `dotnet-core` feed and a local folder for the produced nupkg file.\r\n* Use `dotnet pack` to create a nupkg file from the tool app.\r\n* Use `dotnet install tool -g --configfile $(pwd)/nuget.config sayhi`\r\n\r\n## Expected  behavior\r\n\r\nInstalls the tool\r\n\r\n## Actual behavior\r\n\r\nError that the package is not compatible with `netcoreapp2.1 (.NETCoreApp,Version=v2.1) / osx.10.13-x64` but only supports `netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any`:\r\n\r\n```\r\n$ dotnet install tool -g --configfile $(pwd)/nuget.config sayhi\r\nInstall failed. Failed to download package:\r\nNuGet returned:\r\n\r\nFailed to restore package. \r\nWorkingDirectory: \r\nArguments: restore /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj --configfile /Users/martin/tmp/toolstest/sayhi/nuget.config --runtime osx.10.13-x64 /p:BaseIntermediateOutputPath=\\\"/Users/martin/.dotnet/tools/sayhi/tn02uk3w.ykb\\\"\r\nOutput:   Restoring packages for /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj...\r\n  Installing Microsoft.NETCore.Platforms 2.1.0-preview1-26116-01.\r\n  Installing sayhi 1.0.0.\r\n/var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj : error NU1202: Package sayhi 1.0.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / osx.10.13-x64. Package sayhi 1.0.0 supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any\r\n  Restore failed in 1.26 sec for /var/folders/b1/p_sdf_v932sfdvr0ccxt2gd80000gn/T/4zstq4rl.ya5/jaj1vnsm.wf1.csproj.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-008000)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-008000\r\n Commit SHA-1 hash:  02a98d4e63\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.0-preview1-008000/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26116-04\r\n  Build    : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n```\r\n\r\ncc @wli3 "},{"Id":"7126086196","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8166","RelatedDescription":"Merged pull request \"Skipping GenerateResxSource task when building in design time build.\" (#8166) at dotnet/cli","RelatedBody":"Skipping GenerateResxSource task when building in design time build. This unblocks requiring a full build of the CLI before using VS.\r\n"},{"Id":"7126085689","Type":"PullRequestEvent","CreatedAt":"2018-01-20T05:25:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8429","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4825 into cli\" (#8429) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4825 into cli release/2.1.1xx branch"},{"Id":"7125756657","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:15:35","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8414","RelatedDescription":"Merged pull request \"[tools] Integrate NuGet\" (#8414) at dotnet/cli","RelatedBody":"Please review this change **by commit**.\r\n\r\nThe CI won't pass since I am pointing to a private NuGet build\r\n\r\nThe only WIP is to insert correct NuGet version after https://github.com/NuGet/NuGet.Client/pull/1900/ is merged. I hope to get this PR approved and merge it once NuGet is available. So I didn't make separate PRs.\r\n\r\nIt has \r\n\r\n* Update NuGet version. Rely on NuGet to filter TFM. And use asset.json to find entrypoint\r\n\r\n* Update XML file to per TFM\r\n\r\n* Add extra property to the fake project according to nuget\r\n\r\n* Treat nuget fallback folder as offline cache for tool\r\n\r\n* Require -g to install global tool #8395 "},{"Id":"7125640521","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:19:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8433","RelatedDescription":"Merged pull request \"Simplify the tool_launcher to build for just one version of .NET Framework\" (#8433) at dotnet/cli","RelatedBody":"As @nguerrera pointed out, we don't actually need to cross-target. A .NET Framework app can be configured to automatically roll forward from 3.5 to 4.5 by listing multiple supported runtime versions in app.config.\r\n\r\n"},{"Id":"7125501793","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:25:29","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8435","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1-4846 into cli\" (#8435) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into cli master branch"},{"Id":"7125489380","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:21:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8432","RelatedDescription":"Merged pull request \"Update to aspnetcore 2.1.0-preview1-28124\" (#8432) at dotnet/cli","RelatedBody":"Updates to the latest daily build of aspnetcore.\r\n\r\nSome changes since 28042\r\n - signalr added to the shared framework\r\n - changed Kestrel default back to Libuv\r\n - improvements to razor"},{"Id":"7125482560","Type":"IssuesEvent","CreatedAt":"2018-01-19T23:18:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/8317","RelatedDescription":"Reopened issue \"xunit test fail to load System.Reflection.Extensions when targeting netcoreapp1.0 and not referencing xunit.runner.visualstudio package\" (#8317) at dotnet/cli","RelatedBody":"As mentioned in https://github.com/xunit/xunit/issues/1601#issuecomment-354843968\r\n\r\n1. `dotnet new xunit`\r\n2. down targeting `netcoreapp1.0`\r\n3. upgrade xunit verions to `2.4.0-*`\r\n4. remove the `xunit.runner.visualstudio` package reference\r\n5. when restoring, use the xunit myget feed too: `https://www.myget.org/F/xunit/api/v3/index.json`\r\n6. `dotnet xunit`\r\n\r\n**Actual**:\r\n```\r\nDetecting target frameworks in repro.csproj...\r\nBuilding for framework netcoreapp1.0...\r\n  repro -> C:\\temp\\repro\\bin\\Debug\\netcoreapp1.0\\repro.dll\r\nRunning .NET Core 1.0.5 tests for framework netcoreapp1.0...\r\nerror: Could not load file or assembly 'System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n```\r\n\r\n**Expected**:\r\nThe removal of `xunit.runner.visualstudio` package shouldn't affect command line runs.\r\n\r\nIf we don't do step 4) then the test runs fine.\r\n\r\nDifferences in csproj/deps.json/asserts.json only shows the presence/absence of `xunit.runner.visualstudio` package. Nothing additional is restored by adding this package reference. @bradwilson suggested that .NET Core team should investigate.\r\n\r\nHere's the only diff in the csproj:\r\n\r\n![image](https://user-images.githubusercontent.com/7583839/34505898-20e7206c-efdd-11e7-986e-12a27923f1bb.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7120169085","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:43:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/626","RelatedDescription":"Opened issue \"Trimming will break when SDK stops running RunResolvePackageDependencies\" (#626) at dotnet/standard","RelatedBody":"I chatted with @nguerrera and he mentioned that SDK will no longer run RunResolvePackageDependencies as part of the build for perf reasons.\r\n\r\nWe depend on the PackageDependencies item in trimming in order to construct the package graph and will no longer get them.\r\n\r\nWe should update the target sequencing so that we run RunResolvePackageDependencies ourselves in order to get these items.  We should be careful when doing this to not regress the non-SDK case which may not have the RunResolvePackageDependencies target."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7127981659","Type":"IssuesEvent","CreatedAt":"2018-01-21T05:29:43","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26405","RelatedDescription":"Closed issue \"Basic proxy auth does not work\" (#26405) at dotnet/corefx","RelatedBody":"Steps to reproduce:\r\n1. `export  http_proxy=http://furt:foo@10.121.122.110:3128`\r\n2. wire simple app using http handler and fetch a page.\r\n3. verify that connection will get redirected to proxy.\r\n3. `export COMPlus_UseManagedHttpClientHandler=true`\r\n4. run the test again. \r\n5. The connection is redirected to proxy but the proxy fails with 407 error.\r\n\r\nTested on: Linux & Mac (Windows not attempted)\r\n\r\nIt seems like the code is trying to add Proxy-Authorization header and send it again but it never makes to the wire. (see attached packet capture) \r\n\r\nI found this while working on #26341. I did not test Digest-Auth. \r\nAlso note that curl will send Proxy-Authorization in first request if proxy auth is set. \r\nThis may be design decision but it may be worth of verification. \r\nIt would be unpleasant if we need to double every request. \r\n(needs more testing with fetching various documents via same proxy server) "},{"Id":"7127905436","Type":"PullRequestEvent","CreatedAt":"2018-01-21T04:17:38","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26491","RelatedDescription":"Opened pull request \"Remove orphaned methods from Microsoft.CSharp\" (#26491) at dotnet/corefx","RelatedBody":"Remove some methods that are unused due to their call sites being removed by other dead-code removal. The sort of completely-dead code that would be identified in #17905 if the reports for that were run again.\r\n\r\nThe first couple of commits here make use of methods that aren't being used, but were using them makes an improvement, and a further refactoring that doing that suggested, the last is just simple removal of methods that are never called.\r\n\r\n* Switch on `MethodSymbol.MethKind` instead of repeated tests.\r\n\r\nAnd make it a property.\r\n\r\n* Make `isConversionOperator` an assertion and remove `isExplicit`\r\n\r\n`isExplicit` is only used to assert the symbol is a conversion, so make the method itself an assertion property.\r\n\r\n* Use binary `MethWithType` ctor\r\n\r\nRather than the nullary, only to set properties.\r\n\r\n* Make `UdConvInfo` a readonly struct\r\n\r\n* Remove orphaned methods."},{"Id":"7127887443","Type":"IssuesEvent","CreatedAt":"2018-01-21T04:00:23","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26490","RelatedDescription":"Opened issue \"[ManagedHandler] Consider removing ManagedHandler.Supports* properties\" (#26490) at dotnet/corefx","RelatedBody":"These properties don't seem useful.  They are always true.\r\n\r\nThese make more sense on HttpClientHandler, which depends on external platform code and thus may not be able to support these in all scenarios.\r\n\r\nSpecific properties:\r\n\r\nSupportsAutomaticDecompression\r\nSupportsProxy\r\nSupportsRedirectConfiguration"},{"Id":"7127880240","Type":"PullRequestEvent","CreatedAt":"2018-01-21T03:52:54","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26489","RelatedDescription":"Opened pull request \"Refactor Microsoft.CSharp's SubstContext\" (#26489) at dotnet/corefx","RelatedBody":"* Remove `SubstTypeFlags.NoRefOutDifference`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `SubstTypeFlags.DenormClass`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `SubstTypeFlags.Norm*`\r\n\r\nLooked for, but never set.\r\n\r\n* Remove `_stvcClass`\r\n\r\nNo longer used.\r\n\r\n* Move init into ctor and make fields readonly\r\n\r\n* Remove unused ctors\r\n\r\n* Remove counts from `SubsContext`\r\n\r\nJust get them from the arrays.\r\n\r\n* `FNop()` method to `IsNop` property\r\n\r\n* Rename context's arrays\r\n\r\nNon-Hungarian based.\r\n\r\n* Remove `SubstTypeFlags`\r\n\r\nOnly two values in use, so use boolean.\r\n\r\n* Remove `denormMeth` argument to `SubstEqualTypeArrays`\r\n\r\nAlways true\r\n\r\n* Remove most uses of context in `ErrAppendType`\r\n\r\nInstead of setting to null, just use null.\r\n"},{"Id":"7127815540","Type":"IssuesEvent","CreatedAt":"2018-01-21T02:50:21","Actor":"wli3","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26488","RelatedDescription":"Opened issue \"osx.10.13-x64 is not in the runtime.json\" (#26488) at dotnet/corefx","RelatedBody":"It cause restore on High Sierra failed, even when the package is considered \"any\".\r\nhttps://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json#L1018\r\n\r\nrelate: https://github.com/dotnet/cli/issues/8436\r\n"},{"Id":"7127797780","Type":"PullRequestEvent","CreatedAt":"2018-01-21T02:34:10","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26487","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview1-26121-01, preview1-26120-02, respectively (master)\" (#26487) at dotnet/corefx","RelatedBody":""},{"Id":"7127677480","Type":"IssuesEvent","CreatedAt":"2018-01-21T00:44:17","Actor":"Thiez","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26486","RelatedDescription":"Opened issue \"The `System.Json.JsonObject.Save(System.IO.Stream)` method produces invalid json.\" (#26486) at dotnet/corefx","RelatedBody":"The \"json\" this method writes to the stream puts a comma between keys and values, and does not separate the next key from the previous value with a comma. E.g. when you expect the output `{\"foo\":\"bar\",\"baz\":\"frop\"}`, you will actually get something like `{\"foo\",\"bar\"\"baz\",\"frop\"}`. This bug has existed since the `JsonObject` class was invented in 2008, see [here](https://github.com/mono/mono/commit/66ecab0058cbf5c8aaa1c9ca89da52752d465eb4#diff-6a07ba1015d9ca7fc1b5b5a10859b17eR162). Perhaps the best fix would be to remove the override of `JsonValue.Save(Stream)` in `JsonObject` entirely; clearly nobody is using it (or this bug would have been noticed before), and the base implementation on `JsonValue` actually does the right thing."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7127779257","Type":"PullRequestEvent","CreatedAt":"2018-01-21T02:17:13","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24323","RelatedDescription":"Merged pull request \"Fix tests to avoid time zone dependent DateTime values\" (#24323) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nUnable to successfully run compiler tests in Eastern time zone\r\n\r\n### Bugs this fixes\r\n\r\nN/A\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\nN/A\r\n\r\n### Performance impact\r\n\r\nN/A\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nThe tests in question were introduced in 706389986880e7d10e8a2adf502c8bac3e722134. An instance of `DateTime` is used as an example of a reference type in the tests for this fix, but the way in which those instances are constructed is time zone dependent; the `DateTime.Parse()` method always converts the date to `DateTimeKind.Local`, meaning that the actual value of `Ticks` will be different depending on where in the world the tests are run.\r\n\r\n### How was the bug found?\r\n\r\nWhile in the Eastern time zone, I cloned Roslyn and tried to run the tests.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n</details>\r\n"},{"Id":"7127742187","Type":"IssuesEvent","CreatedAt":"2018-01-21T01:42:22","Actor":"Joe4evr","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24361","RelatedDescription":"Opened issue \"[Proposal][IDE] 'Extract Interface' options for property extraction\" (#24361) at dotnet/roslyn","RelatedBody":"Oftentimes, a domain is modeled using POCOs with public settable properties, as that is (AFAIK) what most major serialization frameworks (JSON.NET, EF, etc.) primarily expect to use to actually fill in the data. If you started off from this angle and want the rest of your code to see the objects as read-only, you can have VS generate interfaces for you, but then you'd have to remove all the setters manually (which can be mitigated, but it still feels like a chore).\r\n\r\nIf the 'Extract Interface' dialog had an option to take only the property getters (and while I'm at it, option 3: take only the setters to make a write-only interface), then it could save a lot of hassle."},{"Id":"7127741114","Type":"IssuesEvent","CreatedAt":"2018-01-21T01:41:18","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24360","RelatedDescription":"Opened issue \"Add -skipApplyOptimizations to build.cmd\" (#24360) at dotnet/roslyn","RelatedBody":"Currently when using build.cmd it doesn't seem possible to pass /p:SkipApplyOptimizations=true to turn off IBCMerge.\r\n\r\nIt would be nice for local builds that emulate official builds."},{"Id":"7127605508","Type":"PullRequestEvent","CreatedAt":"2018-01-20T23:42:17","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24359","RelatedDescription":"Opened pull request \"SignatureHelp: fix display or ref-returning indexer\" (#24359) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nSignatureHelp on a ref-returning or ref-readonly-returning indexer should display the \"ref\" or \"ref readonly\" modifiers, as the screenshot shows (post fix).\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/35189069-f0d74234-fdf7-11e7-96a6-30a75a631547.png)\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24311\r\n\r\n### Risk\r\n### Performance impact\r\nLow. Just adding a check for ref-returning symbols in the SignatureHelp and adding a couple of parts to display when appropriate.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nThe SignatureHelper only relies on the SymbolDisplayVisitor to display parts of an indexer's signature. The SymbolDisplayVisitor would display `ref int C.this[...]`, but the SignatureHelper wants to display `ref int C[...]`. This non-standard behavior is the reason why the fix in SymbolDisplayVisitor did not automatically handle this scenario.\r\n\r\n### How was the bug found?\r\nReported by customer.\r\n\r\n@dotnet/roslyn-ide for review. Thanks\r\nTagging @VSadov @OmarTawfik as FYI"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7127828785","Type":"IssuesEvent","CreatedAt":"2018-01-21T03:02:57","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5272","RelatedDescription":"Opened issue \"Implement localloc opcode for WebAssembly\" (#5272) at dotnet/corert","RelatedBody":"Implement the [localloc opcode](https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.localloc(v=vs.110).aspx) for WebAssembly, which allocates the specified amount of memory on the local stack and frees it on return. It also zeroes that memory if initlocals is true (which it usually is). This could potentially be implemented either by:\r\n1. Doing bookkeeping with the managed shadow stack (including incorporating that into HandleCall so callees end up properly on top of the localloced memory).\r\n2. Using LLVM's alloca to allocate it on the native stack. This only works if there won't be GC references from the allocated memory, but I don't think it's possible to.\r\n\r\nThe method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/4ae63bb273535562b5138ab7dc65af1f2b6cb0f5/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1868\r\n"},{"Id":"7127654435","Type":"PullRequestEvent","CreatedAt":"2018-01-21T00:23:16","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5207","RelatedDescription":"Merged pull request \"force alignment for all stack allocations in WebAssembly\" (#5207) at dotnet/corert","RelatedBody":"@morganbr \r\n\r\nFix #5176 \r\nI think I've got all of the spots I'm supposed to align, I purposefully didn't do alignment for sizeof type operations because that didn't look right."},{"Id":"7127654432","Type":"IssuesEvent","CreatedAt":"2018-01-21T00:23:16","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5176","RelatedDescription":"Closed issue \"Align shadow stack\" (#5176) at dotnet/corert","RelatedBody":"The WebAssembly shadow stack currently is only 1-byte aligned. However, parts of the runtime may require alignment and memory operations would likely be more efficient if types were aligned (that is: 3+ byte types start at a multiple of 4, 2 byte types start at a multiple of 2).\r\n\r\nThe methods that would need to handle this would likely be ```ILImporter.GetTotalLocalOffset```, ```ILImporter.GetTotalRealLocalOffset``` ```ILImporter.GetTotalParameterOffset```, ```ILImporter.GetArgSizeAndOffsetAtIndex```, ```ILImporter.GetLocalSizeAndOffsetAtIndex```,  ```ILImporter.GetSpillSizeAndOffsetAtIndex```, and ```ILImporter.HandleCall``` (and any other usages of ```GetElementSize()``` with the shadow stack I missed)."},{"Id":"7127073327","Type":"PullRequestEvent","CreatedAt":"2018-01-20T17:38:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5271","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5271) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126942115","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:16:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5270","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5270) at dotnet/corert","RelatedBody":""},{"Id":"7126941854","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:16:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5270","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5270) at dotnet/corert","RelatedBody":""},{"Id":"7126941389","Type":"PullRequestEvent","CreatedAt":"2018-01-20T16:15:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5269","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5269) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126286278","Type":"PullRequestEvent","CreatedAt":"2018-01-20T08:14:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5268","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5268) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126209526","Type":"PullRequestEvent","CreatedAt":"2018-01-20T07:14:16","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5268","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5268) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7126208365","Type":"PullRequestEvent","CreatedAt":"2018-01-20T07:13:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5267","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5267) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7125844722","Type":"PullRequestEvent","CreatedAt":"2018-01-20T02:09:35","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1876","RelatedDescription":"Merged pull request \"Merge release/2.1 into master\" (#1876) at dotnet/sdk","RelatedBody":""},{"Id":"7125754877","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:14:40","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125733087","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:20","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1878","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1878) at dotnet/sdk","RelatedBody":"@livarcocc \r\ncc @rrelyea "},{"Id":"7125732685","Type":"PullRequestEvent","CreatedAt":"2018-01-20T01:03:08","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Closed pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125635540","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:43","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1877","RelatedDescription":"Merged pull request \"Merge release/2.0.0 into release/2.1\" (#1877) at dotnet/sdk","RelatedBody":""},{"Id":"7125635452","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:17:41","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1875","RelatedDescription":"Merged pull request \"Updating repo-toolset to 1.0.0-beta-62519-01\" (#1875) at dotnet/sdk","RelatedBody":"Had to update to a new .NET Build Feed task version and update the publish proj to start importing a new props file that the feed task is providing."},{"Id":"7125587857","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:58:42","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1881","RelatedDescription":"Opened pull request \"WIP Testinsertion\" (#1881) at dotnet/sdk","RelatedBody":""},{"Id":"7125536002","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:38:11","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1880","RelatedDescription":"Closed pull request \"WIP test ci\" (#1880) at dotnet/sdk","RelatedBody":""},{"Id":"7125443645","Type":"PullRequestEvent","CreatedAt":"2018-01-19T23:05:13","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1880","RelatedDescription":"Opened pull request \"WIP test ci\" (#1880) at dotnet/sdk","RelatedBody":""},{"Id":"7125343539","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:46","Actor":"rohit21agrawal","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125342015","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:34:20","Actor":"rohit21agrawal","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"},{"Id":"7125334335","Type":"PullRequestEvent","CreatedAt":"2018-01-19T22:32:06","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1879","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-preview1-4846 into sdk\" (#1879) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1-4846 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":5,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"953279226869960704","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/ZtyD9ubcE6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"952185961085067266","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/kXZpzdtOqA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":57,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2018-01-21T05:30:22.5501172Z","RunDurationInMilliseconds":8307}