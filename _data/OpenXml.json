{"Data":{"Sdk":{"Events":[{"Id":"9893834902","Type":"PullRequestEvent","CreatedAt":"2019-06-26T01:25:18","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/602","RelatedDescription":"Merged pull request \"Ready particle validation infrastructure for Sdb removal\" (#602) at OfficeDev/Open-XML-SDK","RelatedBody":"In order to remove Sdb related infrastructure, we first need to clean up a number of issues within the particle validator infrastructure. This includes:\r\n\r\n- Remove usage of ElementId and use the Type object instead\r\n- Fix hierarchy of particles (ie ElementType should only be on ElementParticle)\r\n- Add tests for all particles to ensure future changes are not unexpected\r\n- Make the particles read only if possible"},{"Id":"9893538406","Type":"PullRequestEvent","CreatedAt":"2019-06-25T23:58:45","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/602","RelatedDescription":"Opened pull request \"Ready particle infrastructure for Sdb removal\" (#602) at OfficeDev/Open-XML-SDK","RelatedBody":"In order to remove Sdb related infrastructure, we first need to clean up a number of issues within the particle validator infrastructure. This includes:\r\n\r\n- Remove usage of ElementId and use the Type object instead\r\n- Fix hierarchy of particles (ie ElementType should only be on ElementParticle)\r\n- Add tests for all particles to ensure future changes are not unexpected\r\n- Make the particles read only if possible"},{"Id":"9878359900","Type":"IssuesEvent","CreatedAt":"2019-06-24T07:23:00","Actor":"stefanbg","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/600","RelatedDescription":"Closed issue \"Row.Hidden always reads first sheet\" (#600) at OfficeDev/Open-XML-SDK","RelatedBody":"\r\n\r\n**Description**\r\n\r\nRow.Hidden always reads first sheet\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Framework 4.6.2\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n**Repro**\r\n\r\n```csharp\r\n        public static void ExcelVisibleRowCount(string filePath, int TabToUse)\r\n        {\r\n            using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\r\n            {\r\n                using (var spreadsheetDocument = SpreadsheetDocument.Open(fileStream, false))\r\n                {\r\n                    var sharedStringTable = spreadsheetDocument.WorkbookPart.SharedStringTablePart.SharedStringTable;\r\n                    if (spreadsheetDocument.WorkbookPart.WorksheetParts != null && spreadsheetDocument.WorkbookPart.WorksheetParts.Count() >= TabToUse + 1)\r\n                    {\r\n                        var worksheetPart = spreadsheetDocument.WorkbookPart.WorksheetParts.ElementAtOrDefault(TabToUse);\r\n                        foreach (var sheetData in worksheetPart.Worksheet.Elements<SheetData>())\r\n                        {\r\n                            if (sheetData.HasChildren)\r\n                            {\r\n                                var count = sheetData.Elements<Row>().Count(x => x.Hidden == null || x.Hidden == false);\r\n                                Console.WriteLine(count);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n**Observed**\r\nUse attached Excel file [TestHidden.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/3301470/TestHidden.xlsx)\r\n or create one like this\r\n- Create a Excel with two sheets. \r\n- Add 5 rows with same data on both\r\n- Hide one row in the first sheet. Save.\r\n\r\nRun the code (with path to file and 1 (as TabToUse)\r\n\r\n**Expected**\r\n\r\nShould return 5 since the second sheet have no hidden rows. But it returns 4\r\n"},{"Id":"9867456295","Type":"IssuesEvent","CreatedAt":"2019-06-21T10:14:13","Actor":"DizTortion","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/601","RelatedDescription":"Opened issue \"WorkbookProtection corrupts Spreadsheet for Excel 2019\" (#601) at OfficeDev/Open-XML-SDK","RelatedBody":"Spreadsheets saved with Excel 2019 get corrupted as soon as you add a WorkbookProtection. Files saved with Excel 2010 are not affected.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 3.5\r\n- DocumentFormat.OpenXml Version: 2.9.1, 2.10.0-beta0001\r\n\r\n**Repro**\r\n\r\nCreate an empty spreadsheet in Excel 2019 and perform the following operation:\r\n\r\n```csharp\r\nusing (var document = SpreadsheetDocument.Open(\"...\", true) {\r\n  document.WorkbookPart.Workbook.WorkbookProtection = new WorkbookProtection();\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\nExcel fails to open and repair the file.\r\n\r\n![Exception](https://user-images.githubusercontent.com/145854/41104354-74e23734-6a6b-11e8-856f-184535172d76.png)\r\n\r\nThe resulting workbook.xml contains the newly added `x:workbookProtection` followed by the `x:revisionPtr`. \r\n\r\n```xml\r\n<x:workbookProtection />\r\n<xr:revisionPtr revIDLastSave=\"0\" documentId=\"13_ncr:1_{4BF1E7C4-2F1B-4756-81DA-B102ED8D212D}\" xr6:coauthVersionLast=\"36\" xr6:coauthVersionMax=\"36\" xr10:uidLastSave=\"{00000000-0000-0000-0000-000000000000}\" />\r\n```\r\n\r\nManually changing the order (unzip/edit/zip) repairs the file.\r\n\r\n```xml\r\n<xr:revisionPtr revIDLastSave=\"0\" documentId=\"13_ncr:1_{4BF1E7C4-2F1B-4756-81DA-B102ED8D212D}\" xr6:coauthVersionLast=\"36\" xr6:coauthVersionMax=\"36\" xr10:uidLastSave=\"{00000000-0000-0000-0000-000000000000}\" />\r\n<x:workbookProtection />\r\n\r\n```\r\n\r\n `x:revisionPtr` was introduced in Office 2016 so this might explain why files saved in Excel 2010 are not affected.\r\n\r\n**Expected**\r\n\r\nFile should not get corrupted."},{"Id":"9843823795","Type":"IssuesEvent","CreatedAt":"2019-06-18T12:37:29","Actor":"stefanbg","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/600","RelatedDescription":"Opened issue \"Row.Hidden always reads first sheet\" (#600) at OfficeDev/Open-XML-SDK","RelatedBody":"\r\n\r\n**Description**\r\n\r\nRow.Hidden always reads first sheet\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Framework 4.6.2\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n**Repro**\r\n\r\n```csharp\r\n        public static void ExcelVisibleRowCount(string filePath, int TabToUse)\r\n        {\r\n            using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\r\n            {\r\n                using (var spreadsheetDocument = SpreadsheetDocument.Open(fileStream, false))\r\n                {\r\n                    var sharedStringTable = spreadsheetDocument.WorkbookPart.SharedStringTablePart.SharedStringTable;\r\n                    if (spreadsheetDocument.WorkbookPart.WorksheetParts != null && spreadsheetDocument.WorkbookPart.WorksheetParts.Count() >= TabToUse + 1)\r\n                    {\r\n                        var worksheetPart = spreadsheetDocument.WorkbookPart.WorksheetParts.ElementAtOrDefault(TabToUse);\r\n                        foreach (var sheetData in worksheetPart.Worksheet.Elements<SheetData>())\r\n                        {\r\n                            if (sheetData.HasChildren)\r\n                            {\r\n                                var count = sheetData.Elements<Row>().Count(x => x.Hidden == null || x.Hidden == false);\r\n                                Console.WriteLine(count);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n**Observed**\r\nUse attached Excel file [TestHidden.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/3301470/TestHidden.xlsx)\r\n or create one like this\r\n- Create a Excel with two sheets. \r\n- Add 5 rows with same data on both\r\n- Hide one row in the first sheet. Save.\r\n\r\nRun the code (with path to file and 1 (as TabToUse)\r\n\r\n**Expected**\r\n\r\nShould return 5 since the second sheet have no hidden rows. But it returns 4\r\n"},{"Id":"9831779259","Type":"IssuesEvent","CreatedAt":"2019-06-16T20:34:32","Actor":"IrakliLomidze","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/599","RelatedDescription":"Opened issue \"Incorporate Open XML Power Tools in base SDK\" (#599) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [X] Question on library usage\r\n\r\n\r\n**Open XML Power tool features in base SDK**\r\n\r\nOpen XML Power tools had perfect tools that is was very helpful but, Microsoft decided to kill that product. Is it any plan to incorporate that functionality in this SDK ? and support them/\r\n\r\nIt would be really nice to be.\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2019-06-26T05:30:41.5315351Z","RunDurationInMilliseconds":993}