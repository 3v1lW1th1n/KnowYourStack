{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin Joins docs.microsoft.com","PublishedOn":"2018-03-14T17:22:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#8217;re beginning a new chapter in mobile developer documentation: Xamarin docs are now live on docs.microsoft.com/xamarin! Here are a few highlights of the new documentation experience:...","Href":"https://blog.xamarin.com/xamarin-joins-docs-microsoft-com/","RawContent":null},{"Title":"Podcast: Visual Studio 2017 version 15.6, AR with UrhoSharp, and ML with CoreML","PublishedOn":"2018-03-12T18:43:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the fun new features in the Visual Studio 2017 version 15.6 stable release, including macOS environment setup and iOS WiFi...","Href":"https://blog.xamarin.com/podcast-visual-studio-2017-version-15-6-ar-urhosharp-ml-coreml/","RawContent":null},{"Title":"Contributing to Xamarin.iOS and Xamarin.Mac","PublishedOn":"2018-03-08T19:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Two years ago this month, we made some exciting announcements about the future of Xamarin. One of those announcements detailed the open sourcing of the Xamarin.iOS and Xamarin.Mac SDK. Open source is...","Href":"https://blog.xamarin.com/contributing-to-xamarin-ios-xamarin-mac/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Now Available!","PublishedOn":"2018-03-06T20:17:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Our last release, Visual Studio 2017 version 15.5, featured awesome new updates, such as the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android emulators with...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-now-available/","RawContent":null},{"Title":"Mobile Developer Events in March","PublishedOn":"2018-03-01T19:05:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Around the world, Xamarin and .NET user groups are meeting up to learn and discuss the latest news on exciting releases, tooling, and updates with Xamarin and related technologies. This March, you can...","Href":"https://blog.xamarin.com/mobile-developer-events-march/","RawContent":null},{"Title":"The New, Feature-Packed UrhoSharp 1.8","PublishedOn":"2018-02-28T19:34:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"UrhoSharp is a .NET API for building 3D experiences in your apps. A .NET binding to the Urho3D engine, it allows developers to write cross-platform code targeting Android, iOS, Windows and macOS with...","Href":"https://blog.xamarin.com/announcing-urhosharp-1-8-release/","RawContent":null},{"Title":"New Xamarin University Course: Navigation Patterns in Xamarin.Forms (XAM205)","PublishedOn":"2018-02-26T19:10:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms, a popular choice for cross-platform Xamarin apps, has two stacks. It&#8217;s common to implement navigation by pushing and popping Pages on a stack, but the two stacks are intended for...","Href":"https://blog.xamarin.com/xamarin-forms-navigation-patterns-xam205/","RawContent":null},{"Title":"Add Tizen Projects to Your Xamarin.Forms Applications","PublishedOn":"2018-02-23T19:24:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Jay Cho of the Samsung Tizen team. It&#8217;s been a while since the first preview version of Tizen .NET was released. Thanks to the newest release, developing...","Href":"https://blog.xamarin.com/add-tizen-projects-xamarin-forms-apps/","RawContent":null},{"Title":"Create and Host tvOS TVML Apps with Azure and Xamarin","PublishedOn":"2018-02-22T20:30:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Creating amazing tvOS TVML apps doesn&#8217;t have to be hard. In this blog post, I&#8217;ll go over the many similarities tvOS has to iOS and show you how to create a sample quiz app using UIKit that...","Href":"https://blog.xamarin.com/create-tvos-tvml-apps-azure-xamarin/","RawContent":null},{"Title":"Use CoreML And Azure To Create Simple Xamarin.iOS Apps","PublishedOn":"2018-02-20T19:36:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last year Apple released a device-optimized machine learning framework called Core ML to make it as easy as possible to integrate machine learning and artificial intelligence services into your iOS...","Href":"https://blog.xamarin.com/coreml-azure-create-simple-xamarin-ios-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7381993099","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:03:21","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1420","RelatedDescription":"Merged pull request \"[msbuild] fix for JavaSourceJar and test\" (#1420) at xamarin/xamarin-android","RelatedBody":"Context #1091\r\n\r\nThe test `BindingBuildTest.JavaSourceJar` appears to pass under xbuild,\r\nbut fail under msbuild. This seems be true for macOS or Windows.\r\n\r\nUnder further inspection, I noticed the `BuildDocumentation` target was\r\nnever running under msbuild. It was being skipped due to the outputs\r\nbeing up-to-date in comparison to the inputs. To fix the skipped target,\r\nI was able to add an additional input in\r\n`Xamarin.Android.Bindings.targets`.\r\n\r\nThe line:\r\n```\r\n    <Copy\r\n      SourceFiles=\"@(IntermediateAssembly->'$(IntermediateOutputPath)%(filename).xml')\"\r\n      DestinationFiles=\"@(IntermediateAssembly->'$(OutputPath)%(filename).xml')\"\r\n      SkipUnchangedFiles=\"true\" />\r\n```\r\n\r\nImplies that `@(IntermediateAssembly->'$(IntermediateOutputPath)%(filename).xml')`\r\nalso should be an input.\r\n\r\nAdditionally, there was some stuff in the test that seemed incorrect:\r\n- The return value of `bindingBuilder.Build` should have an assertion\r\nthat it is true\r\n- For some reason the text from `GetIntermediaryAsText` was being passed\r\nto `Path.Combine`. I think this was a typo that wasn't intentional."},{"Id":"7381083880","Type":"IssuesEvent","CreatedAt":"2018-03-14T21:27:38","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1422","RelatedDescription":"Opened issue \"PreserveLists/mscorlib.xml\" (#1422) at xamarin/xamarin-android","RelatedBody":"Mono bundles correct and updated mscorlib descriptor inside every mscorlib. The  XA copy should be removed to not confuse the linker."},{"Id":"7380949560","Type":"PullRequestEvent","CreatedAt":"2018-03-14T20:59:40","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1421","RelatedDescription":"Opened pull request \"Ignore the `nonuapaottests` category of XUnit tests\" (#1421) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1400"},{"Id":"7380496962","Type":"PullRequestEvent","CreatedAt":"2018-03-14T19:27:35","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1420","RelatedDescription":"Opened pull request \"[msbuild] fix for JavaSourceJar and test\" (#1420) at xamarin/xamarin-android","RelatedBody":"Context #1091\r\n\r\nThe test `BindingBuildTest.JavaSourceJar` appears to pass under xbuild,\r\nbut fail under msbuild. This seems be true for macOS or Windows.\r\n\r\nUnder further inspection, I noticed the `BuildDocumentation` target was\r\nnever running under msbuild. It was being skipped due to the outputs\r\nbeing up-to-date in comparison to the inputs. To fix the skipped target,\r\nI was able to add an additional input in\r\n`Xamarin.Android.Bindings.targets`.\r\n\r\nThe line:\r\n```\r\n    <Copy\r\n      SourceFiles=\"@(IntermediateAssembly->'$(IntermediateOutputPath)%(filename).xml')\"\r\n      DestinationFiles=\"@(IntermediateAssembly->'$(OutputPath)%(filename).xml')\"\r\n      SkipUnchangedFiles=\"true\" />\r\n```\r\n\r\nImplies that `@(IntermediateAssembly->'$(IntermediateOutputPath)%(filename).xml')`\r\nalso should be an input.\r\n\r\nAdditionally, there was some stuff in the test that seemed incorrect:\r\n- The return value of `bindingBuilder.Build` should have an assertion\r\nthat it is true\r\n- For some reason the text from `GetIntermediaryAsText` was being passed\r\nto `Path.Combine`. I think this was a typo that wasn't intentional."},{"Id":"7380166025","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:22:58","Actor":"dehghani-mehdi","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1419","RelatedDescription":"Closed issue \"Hello world app, Linking set to Sdk and User assemblies, the generated APK doesn't work on device\" (#1419) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Xamarin.Android App\r\n2. Add Support library v4 and v7\r\n3. Switch to Release mode\r\n4. Select Sdk and User assemblies option as linking\r\n5. Archive\r\n6. Try to run generated APK on device\r\n\r\n### Expected Behavior\r\nApp should run on device\r\n\r\n### Actual Behavior\r\nIt installed but crash on load\r\n\r\n### Version Information\r\nI'm using VS 15.6.0\r\n\r\nFor Sdk assemblies only it works, but the APK is bigger than Sdk and User assemblies option (~6MB bigger)\r\n\r\nThanks."},{"Id":"7380054103","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:02:40","Actor":"dehghani-mehdi","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1419","RelatedDescription":"Opened issue \"Hello world app, Linking set to Sdk and User assemblies, the generated APK doesn't work on device\" (#1419) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create new Xamarin.Android App\r\n2. Add Support library v4 and v7\r\n3. Switch to Release mode\r\n4. Select Sdk and User assemblies option as linking\r\n5. Archive\r\n6. Try to run generated APK on device\r\n\r\n### Expected Behavior\r\nApp should run on device\r\n\r\n### Actual Behavior\r\nIt installed but crash on load\r\n\r\n### Version Information\r\nI'm using VS 15.6.0\r\n\r\nFor Sdk assembliesonly it works, but the APK has ~6MB size more than Sdk and User assemblies option\r\n\r\nThanks."},{"Id":"7379527481","Type":"PullRequestEvent","CreatedAt":"2018-03-14T16:33:50","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1418","RelatedDescription":"Opened pull request \"[tests] fix for VSTS Windows builds\" (#1418) at xamarin/xamarin-android","RelatedBody":"This is an initial change to see the result on VSTS, don't merge yet.\r\n\r\n`<Exec />` calls to `nunit-console` need `ContinueOnError=ErrorAndContinue`."},{"Id":"7379415625","Type":"PullRequestEvent","CreatedAt":"2018-03-14T16:16:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1417","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix Warning in Design Time Build.\" (#1417) at xamarin/xamarin-android","RelatedBody":"When building a MultiTarget netstandard project which includes\r\n`monoandroidX.X` we get the following warning\r\n\r\n\tSystem.ArgumentException: Specified resource directory was not found:\r\n\r\nThis is raised by the `ManagedResourceParser` because the\r\n`$(MonoAndroidResourcePrefix)` does not exist. Its a netstandard\r\nproject so it won't have any (maybe).\r\nThis commit makes sure we only run the `GenerateResourceDesigner`\r\nif that directory exists. This will stop the warning showing and\r\ngive us a clean Design Time build."},{"Id":"7379410646","Type":"PullRequestEvent","CreatedAt":"2018-03-14T16:15:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1412","RelatedDescription":"Merged pull request \"[create-vsix] Remove unnecessary cruft\" (#1412) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1267\r\n\r\nThe commercial Windows `Xamarin.Android.Sdk.*.vsix` file contains lots\r\nof files that the macOS `xamarin.android*.pkg` file does not.\r\n\r\nUpdate `build-tools/create-vsix` to remove some of the additional\r\nfiles which are not necessary, including:\r\n\r\n  * `*.dylib`: macOS native libraries, not needed on Windows.\r\n  * `$MSBuild/Xamarin/Android/**/*.pdb`: Debug symbols.\r\n  * `$MSBuild/Xamarin/Android/lib/**/*.d.so`: Native libraries which\r\n    have not been `strip`d.\r\n  * `$ReferenceAssemblies/Microsoft/Framework/MonoAndroid/**/libZipSharp.*\r\n    `libZipSharp*` is only needed in `$MSBuild`.\r\n  * Distribute `Mono.Android.Export.*`, `OpenTK.*`, and `OpenTK-1.0.*`\r\n    for only *one* API level, not *every* API level.\r\n    `RedistList/FrameworkList.xml` ensures that previous framework\r\n    versions will be included in assembly resolution via\r\n    `/FileList/@IncludeFramework`, so there is no need to ship 10+\r\n    identical copies of these assemblies.\r\n\r\nA remaining (significant!) contribution to the size difference between\r\nWindows and macOS is *documentation*: `Mono.Android.xml` is included\r\nfor each `$(TargetFrameworkVersion)`, and is ~57MB *per copy*.\r\nThis will *not* be addressed in xamarin-android, as documentation is\r\nhandled elsewhere (and I'm not entirely sure how to handle it)."},{"Id":"7379410616","Type":"IssuesEvent","CreatedAt":"2018-03-14T16:15:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1267","RelatedDescription":"Closed issue \"Remove cruft from .vsix installer\" (#1267) at xamarin/xamarin-android","RelatedBody":"The `.vsix` installer is full of cruft, containing files which are not necessary:\r\n\r\n* `v8.0/libZipSharp.dll.config`\r\n* `v8.0/libzip.3.0.dylib`\r\n* `v8.0/Mono.Android.Export.dll`\r\n* `v8.0/OpenTK*`\r\n* `v8.0/Mono.Android.GoogleMaps.xml`\r\n* ...\r\n\r\nMany of these files aren't needed (`.dylib` files on Windows?!). Many are obsolete and shouldn't exist at all (`Mono.Android.GoogleMaps.xml`?!). Many are \"duplicative\": `OpenTK*` is present in v2.3; there is no need for it to be in later API levels.\r\n\r\nReview and cleanup the `.vsix` contents."},{"Id":"7379288706","Type":"PullRequestEvent","CreatedAt":"2018-03-14T15:58:02","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1417","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Fix Warning in Design Time Build.\" (#1417) at xamarin/xamarin-android","RelatedBody":"When building a MultiTarget netstandard project which includes\r\n`monoandroidX.X` we get the following warning\r\n\r\n\tSystem.ArgumentException: Specified resource directory was not found:\r\n\r\nThis is raised by the `ManagedResourceParser` because the\r\n`$(MonoAndroidResourcePrefix)` does not exist. Its a netstandard\r\nproject so it won't have any (maybe).\r\nThis commit makes sure we only run the `GenerateResourceDesigner`\r\nif that directory exists. This will stop the warning showing and\r\ngive us a clean Design Time build."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7381825572","Type":"PullRequestEvent","CreatedAt":"2018-03-15T01:00:48","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2106","RelatedDescription":"Opened pull request \"Try/Catch assembly loading so previewer doesn't have a fit\" (#2106) at xamarin/Xamarin.Forms","RelatedBody":"Fix for previewer, no bug filed."},{"Id":"7381537205","Type":"IssuesEvent","CreatedAt":"2018-03-14T23:21:56","Actor":"tgmcguire","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2105","RelatedDescription":"Opened issue \"Difficulty with Sync using Xamarin.Forms Starter App\" (#2105) at xamarin/Xamarin.Forms","RelatedBody":"Hi there! 👋\r\n\r\nFirst off, my apologies if this is better suited for discussion elsewhere – I'm new to the Azure/Xamarin space and not sure where I'd get the best feedback. Any feedback here is greatly appreciated!\r\n\r\nGetting my feet wet with Xamarin, and doing some feasibility testing/research. I've [downloaded the starter app](https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-xamarin-forms-get-started) to test out syncing Xamarin.Forms with Azure Mobile Apps. I've done practically no customization from the starter app generated from Azure – except for adding a few extra fields to my table, just to simulate a little larger dataset. I'm encountering four issues, which I'll detail here – but first, my environment:\r\n\r\n# Environment\r\n\r\n- Visual Studio for Mac (Community), v7.4 build 1033\r\n- Microsoft.Azure.Mobile.Client v4.0.1\r\n- Microsoft.Azure.Mobile.Client.SQLiteStore v4.0.1\r\n- NETStandard.Library v1.6.1\r\n- Xamarin.Forms v2.3.4.247\r\n\r\n## 1. Duplicate items ([Screencast](https://drive.google.com/file/d/1lUm0YC5r-Y8TTsNVSNdYN7-8y370lxsU/view?usp=sharing))\r\n\r\nAdding items can sometimes result in duplicate records being added to the database. These duplicate records sometimes clear out over time, but sometimes they don't.\r\n\r\n## 2. If there are duplicate items, only one is updated  ([Screencast](https://drive.google.com/file/d/1iAhx4mQCUr2LvTh6N2BLToMqCGTV8dQM/view?usp=sharing))\r\n\r\nIf there are duplicate items in the database as a result of the above point, and that item is updated within the app, only the one record in the database is updated – not both. So in addition to data duplication, we also don't seem to have a way of knowing which record is authoritative.\r\n\r\n## 3. Deleting items in database doesn't delete in app ([Screencast](https://drive.google.com/file/d/1sLQEoruq0Sqi1Nzb5qOdeMdUUlU1mMVp/view?usp=sharing))\r\n\r\nIf records are deleted from the database, they seem to get \"stuck\" in the app. In fact, force-closing and re-launching the app does not regenerate the local database. It takes a full re-install before these \"stuck\" items are removed/database is synced.\r\n\r\n## 4. Items can reappear after deletion ([Screencast](https://drive.google.com/file/d/18kDlV1JyQxDV_Jzbxty6g34iZsnMu3_H/view?usp=sharing))\r\n\r\nIf I delete records from the database, we already know from `3` above that they're not removed from the app. But I found that if I add a new item within the app, they're added back to the database. In this example video, it's also worth noting that the record for \"Newmont Mining Corporation\" is _not_ re-added to the database, and the \"App 2\" item I added in the app was not synced to the database either.\r\n\r\n---\r\n\r\nThese issues are obviously a bit concerning, and would be challenging to work with in a production environment. I just want to make sure I'm not missing anything obvious in my initial testing. 🙂\r\n\r\nNote that in all of the above examples, the app is connected to the database the whole time. These problems seem to be made worse when the device is offline, especially items getting \"stuck\" in their old state – but I'm more concerned about the core functionality of syncing with Azure.\r\n\r\nAny insight you can provide here would be fantastic. I'm not sure how stable this syncing functionality is \"out in the wild\", so I'm be curious about that as well, or if we should investigate alternative solutions.\r\n\r\nThanks so much!"},{"Id":"7380486816","Type":"PullRequestEvent","CreatedAt":"2018-03-14T19:25:34","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2091","RelatedDescription":"Merged pull request \"Editor Auto Resize with Text Changes\" (#2091) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nfixes #1733\r\n\r\nAdded a property to Editor that will cause it to grow dynamically as the content of the Editor is changed. Basically as the text is changed the Editors size is recalculated and re-measured\r\n\r\n#### Android\r\nAndroid was the least amount of work and was able to resize itself purely based on having its measure invalidated.\r\n\r\n#### iOS\r\niOS almost worked as seamlessly as Android. \r\nWhen a new line is added to the UITextView the vertical growth happens after the view has already scrolled meaning now you had a line of text partially scrolled off screen. I added an event to watch for Frame Changes on the UITextView and if these happened then I forced the ScrollPosition to go back to *(0,0)*  If the Editor is set to AutoSize then the Frame of the UITextView should never be scrolled if the internal content hasn't grown outside the max constraints of the UITextView. Once the UITextView has grown as much as it can then FrameChange events no longer fire so it's able to still scroll without any issues.\r\n\r\n#### UWP \r\nUWP proved to be the most challenging to coerce into resizing to the text as the text changed.\r\n\r\nPurely invalidating the layout as text is added to the TextBox won't cause it to expand horizontally.\r\nIf the TextBox is set to WordWrap and it's part of the layout it will refuse to Measure itself beyond its established width. Even giving it infinite constraints will cause it to always set its DesiredSize to the same width but with a vertical growth. The only way I was able to grow it was by setting layout renderers width explicitly to some value but then it just set its own Width to that Width which is not helpful. Even vertically it would measure oddly in cases of rapid text changes. Holding down the backspace key or enter key would cause the final result to be not quite right. Both of these issues were fixed by just creating a static TextBox that is not part of the layout which let me just measure the size of the text as it would fit into the TextBox unconstrained and then just return that Size from the GetDesiredSize call.\r\n\r\nBefore pictures if you added text to an already rendered Editor\r\n![image](https://user-images.githubusercontent.com/5375137/37356759-52fd1808-26ac-11e8-89bc-804f3e9e021f.png)\r\n\r\nSetting AutoSize to TextChanges will now resize the Editors to fit the text based on how much the Editor is allowed to grow\r\n![image](https://user-images.githubusercontent.com/5375137/37356795-6d67ba90-26ac-11e8-955f-9fe59c6078b1.png)\r\n\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - public EditorAutoSizeOption AutoSize {get;set;} //Bindable Property\r\n\r\n```csharp\r\nnamespace Xamarin.Forms\r\n{\r\n\tpublic enum EditorAutoSizeOption\r\n\t{\r\n\t\tDisabled = 0,\r\n\t\tTextChanges = 1\r\n\t}\r\n}\r\n```\r\n\r\n### Behavioral Changes ###\r\n\r\nBy default this is disabled so users should notice no behavioral changes unless they opt in for this setting\r\n\r\n### PR Checklist ###\r\n\r\n- [X] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of master at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"},{"Id":"7380302601","Type":"PullRequestEvent","CreatedAt":"2018-03-14T18:48:25","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2103","RelatedDescription":"Merged pull request \"Mark ctors public\" (#2103) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nMakes FormsEditText, EntryEditText, and EditorEditText constructors public. Consumption of these classes is generally a bad idea.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixes #1797\r\n\r\n### API Changes ###\r\n\r\nDescription says it all\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7380007978","Type":"PullRequestEvent","CreatedAt":"2018-03-14T17:54:32","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2103","RelatedDescription":"Opened pull request \"Mark ctors public\" (#2103) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nMakes FormsEditText, EntryEditText, and EditorEditText constructors public. Consumption of these classes is generally a bad idea.\r\n\r\n### Bugs Fixed ###\r\n\r\n- Fixes #1797\r\n\r\n### API Changes ###\r\n\r\nDescription says it all\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7382201295","Type":"IssuesEvent","CreatedAt":"2018-03-15T03:17:30","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3752","RelatedDescription":"Opened issue \"Symbolicate crash report for libmonosgen-2.0.dylib not working?\" (#3752) at xamarin/xamarin-macios","RelatedBody":"How do I get symbolicated crash reports for `libmonosgen-2.0.dylib` and `libxamarin-debug.dylib`?\r\n\r\nMaybe I'm doing something wrong but I assumed that with the app and the attached dSYM, the crash log would be symbolicated fully (including `libmonosgen`). Am I missing something?\r\n\r\nTried to run `/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash -v` to force the resymbolization (in case Xcode didn't do it completely).\r\n\r\nCrash + app + dSYM here:\r\nhttps://www.dropbox.com/s/hx6by53vbgkoayz/NotFullySymbolicated.zip?dl=0\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.4 (build 1033)\r\nInstallation UUID: bef2b48b-cfbf-4371-bca9-fa440adab7db\r\nRuntime:\r\n\tMono 5.10.0.171 (2017-12/ef8ab4986af) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 510000171\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.2\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.0.99.26 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/vince/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 27.0.0\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.3 (14136.3)\r\nBuild 9Q127n\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.4.0.36 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.9.0.10 (Visual Studio Enterprise)\r\nHash: 06d390ce\r\nBranch: xcode9.3\r\nBuild date: 2018-03-09 10:07:38-0500\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704001033\r\nGit revision: 053991068f3c88497d3e5cc52fe7fdf57c28b62f\r\nBuild date: 2018-02-28 05:02:28-05\r\nXamarin addins: cc3283953e0af0b8bfab1bdfdf847d9e403c4606\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.3\r\nDarwin 17.4.0 Darwin Kernel Version 17.4.0\r\n    Sun Dec 17 09:19:54 PST 2017\r\n    root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nNuGet Package Explorer 0.2\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n```\r\n\r\n### Crash logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n[symbolicated-crash-report.txt](https://github.com/xamarin/xamarin-macios/files/1813881/symbolicated-crash-report.txt)\r\n\r\n"},{"Id":"7381422044","Type":"PullRequestEvent","CreatedAt":"2018-03-14T22:48:09","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3747","RelatedDescription":"Merged pull request \"[msbuild] fix creation ouf output dependency\" (#3747) at xamarin/xamarin-macios","RelatedBody":"attempt to fix https://github.com/mono/mono/issues/7518\r\n\r\n`ilrepack.txt` should only be created if `ilrepack.exe` was successful.\r\n\r\nTo be honest, I've no idea what I'm doing, and it might not work for the problem we see on the bots. I had a similar issue _locally_ and this change fixed it for me, but I can't explain it really. My msbuild knowledge is pretty... bad 🙂 \r\n\r\nThat said, if I undestand the `ILRepack` task correctly, it does something like that translated to `make`:\r\n\r\n```Makefile\r\nilrepack.txt: 1.dll 2.dll 3.dll 4.dll\r\n  ilrepack /out:1.dll $^\r\n  touch $@\r\n```\r\n\r\nThat is funky and I think we shouldn't do that. Instead we should have a dedicated `.dll` for the merged result. Alas, I'm not able to translate that to `msbuild` words 😅 \r\n"},{"Id":"7381412555","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:45:34","Actor":"flusharcade","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3751","RelatedDescription":"Opened issue \"UIKit.UIAccessibility.RequestGuidedAccessSession(true, (obj) => { }); Crash\" (#3751) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. In AppDelegate.cs file adding in line UIKit.UIAccessibility.RequestGuidedAccessSession(true, (obj) => { }); to set Single App Mode causes crash.\r\n\r\nFollow up to bug logged here:\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59196\r\n\r\nIssue is still not solved.\r\n\r\n### Expected Behavior\r\n\r\nApp should assign to single app mode.\r\n\r\n### Actual Behavior\r\n\r\nCrash \r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nUIKit.UIAccessibility.RequestGuidedAccessSession(true, (obj) => { }); \r\n\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7381378124","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:36:11","Actor":"yevgeniy-seleznev","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3750","RelatedDescription":"Opened issue \"Deploying to iOS via USB fails and causes soft reset \" (#3750) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Attach a provisioned iOS device through USB and attempt to deploy your Xamarin.iOS app to it.\r\n2. Observe error message in log and that the device hangs.\r\n3. After a minute or two, observe a \"Failed to launch\" message and the device is soft resetting i.e. a black spinning cursor is seen for a while, after which the device returns to the lock screen.\r\n\r\n### Expected Behavior\r\n\r\nApp is launched successfully with debugger attached.\r\n\r\n### Actual Behavior\r\n\r\nApp is not launched, phone is reset.\r\n\r\nOne of our phones is now bricked as a result of having this happen several times. It no longer can launch any app, not even the iOS Settings app. Each time, it freezes and soft resets.\r\n\r\n### Environment\r\nVisual Studio Enterprise 2017 for Mac\r\nVersion 7.4 (build 1033)\r\nInstallation UUID: 6e029159-d9dc-4e46-a319-e3e299407d8c\r\nRuntime:\r\n\tMono 5.8.0.129 (2017-10/835a98d8559) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508000129\r\n\r\nNuGet\r\nVersion: 4.3.1.4445\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.3\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.3\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nXamarin.Android\r\nVersion: 8.2.0.15 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/yevgeniy/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nApple Developer Tools\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\nXamarin.Mac\r\nXamarin.Mac not installed. Can't find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\nXamarin.iOS\r\nVersion: 11.8.0.20 (Visual Studio Enterprise)\r\nHash: 1c6f300e\r\nBranch: d15-6\r\nBuild date: 2018-02-07 23:42:40-0500\r\n\r\nXamarin Inspector\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 704001033\r\nGit revision: 053991068f3c88497d3e5cc52fe7fdf57c28b62f\r\nBuild date: 2018-02-28 05:02:28-05\r\nXamarin addins: cc3283953e0af0b8bfab1bdfdf847d9e403c4606\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\nOperating System\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:58:50 PST 2018\r\n    root:xnu-4570.51.1~2/RELEASE_X86_64 x86_64\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\t\t\tDetails:  Failed to start Instruments daemon on device “96dc4562231e94b7a755951afde69c91470cafe4”: Error Domain=com.apple.dtdevicekit Code=-402653150 \"An error was encountered while attempting to communicate with this device. (The service is invalid.)\" UserInfo={NSLocalizedDescription=An error was encountered while attempting to communicate with this device. (The service is invalid.), com.apple.dtdevicekit.stacktrace=(\r\n\t\t\t\t0   DTDeviceKitBase                     0x000000010e811fed DTDKCreateNSError + 113\r\n\t\t\t\t1   DTDeviceKitBase                     0x000000010e812831 DTDK_AMDErrorToNSError + 1135\r\n\t\t\t\t2   DTDeviceKitBase                     0x000000010e823e8f __63-[DTDKRemoteDeviceConnection startFirstServiceOf:unlockKeybag:]_block_invoke + 300\r\n\t\t\t\t3   DTDeviceKitBase                     0x000000010e823521 __48-[DTDKRemoteDeviceConnection futureWithSession:]_block_invoke_3 + 22\r\n\t\t\t\t4   DTDeviceKitBase                     0x000000010e814815 __DTDKExecuteInSession_block_invoke_2 + 35\r\n\t\t\t\t5   DTDeviceKitBase                     0x000000010e813c1f __DTDKExecuteWithConnection_block_invoke_2 + 474\r\n\t\t\t\t6   DTDeviceKitBase                     0x000000010e813a1a __DTDKExecuteWithConnection_block_invoke + 111\r\n\t\t\t\t7   libdispatch.dylib                   0x00007fff6f1abe08 _dispatch_client_callout + 8\r\n\t\t\t\t8   libdispatch.dylib                   0x00007fff6f1c27dc _dispatch_sync_invoke_and_complete_recurse + 65\r\n\t\t\t\t9   libdispatch.dylib                   0x00007fff6f1c2275 _dispatch_sync_wait + 585\r\n\t\t\t\t10  DVTFoundation                       0x000000010d39a6f0 DVTDispatchBarrierSync + 213\r\n\t\t\t\t11  DVTFoundation                       0x000000010d373c7a -[DVTDispatchLock performLockedBlock:] + 75\r\n\t\t\t\t12  DTDeviceKitBase                     0x000000010e813915 DTDKExecuteWithConnection + 231\r\n\t\t\t\t13  DTDeviceKitBase                     0x000000010e814681 DTDKExecuteInSession + 381\r\n\t\t\t\t14  DTDeviceKitBase                     0x000000010e823458 __48-[DTDKRemoteDeviceConnection futureWithSession:]_block_invoke_2 + 119\r\n\t\t\t\t15  DVTFoundation                       0x000000010d399a4f __DVTDispatchAsync_block_invoke + 806\r\n\t\t\t\t16  libdispatch.dylib                   0x00007fff6f1b364a _dispatch_call_block_and_release + 12\r\n\t\t\t\t17  libdispatch.dylib                   0x00007fff6f1abe08 _dispatch_client_callout + 8\r\n\t\t\t\t18  libdispatch.dylib                   0x00007fff6f1c0267 _dispatch_queue_serial_drain + 635\r\n\t\t\t\t19  libdispatch.dylib                   0x00007fff6f1b31b6 _dispatch_queue_invoke + 373\r\n\t\t\t\t20  libdispatch.dylib                   0x00007fff6f1c0f5d _dispatch_root_queue_drain_deferred_wlh + 332\r\n\t\t\t\t21  libdispatch.dylib                   0x00007fff6f1c4d71 _dispatch_workloop_worker_thread + 880\r\n\t\t\t\t22  libsystem_pthread.dylib             0x00007fff6f4fcfd2 _pthread_wqthread + 980\r\n\t\t\t\t23  libsystem_pthread.dylib             0x00007fff6f4fcbe9 start_wqthread + 13\r\n\t\t\t), NSLocalizedRecoverySuggestion=Please try rebooting and reconnecting the device. (0xE8000022)., NSLocalizedFailureReason=Please try rebooting and reconnecting the device. (0xE8000022).}\r\n\t\t\tObject:   <DTDKRemoteDeviceConnection: 0x7fefda475d80>\r\n\t\t\tMethod:   -instrumentsConnection\r\n\t\t\tThread:   <NSThread: 0x7fefd9f76b70>{number = 11, name = (null)}\r\n\t\t\tPlease file a bug at http://bugreport.apple.com with this warning message and any useful information you can provide.\r\n\t\t\twarning MT1043: Failed to launch the application using the instruments service. Will try launching the app using gdb service.\r\n\t\t\tLaunching 'com.microsoft.seeingai-dev' on the device 'meherk’s iPhone'\r\n\t\t\twarning HE0030: Could not mount developer tools on 'meherk’s iPhone': Could not locate device support files.\r\n\t\t\twarning HE0031: Failed to mount developer tools on 'meherk’s iPhone'.\r\n\t\t\twarning HE0030: Could not mount developer tools on 'meherk’s iPhone': Could not locate device support files.\r\n\t\t\twarning HE0031: Failed to mount developer tools on 'meherk’s iPhone'.\r\nerror MT1007: Failed to launch the application '/Users/yevgeniy/Documents/Source/SeeingAI-Mobile/iOS/App/bin/iPhone/Debug/device-builds/iphone7.1-11.3/SeeingAI.iOS.app' on the device 'meherk’s iPhone': Failed to launch the application 'com.microsoft.seeingai-dev' on the device 'meherk’s iPhone': Invalid Service Error (error: 0xe8000022). You can still launch the application manually by tapping on it.\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7381067091","Type":"IssuesEvent","CreatedAt":"2018-03-14T21:24:02","Actor":"marek-safar","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3749","RelatedDescription":"Opened issue \"Remove Descriptors/mscorlib.xml\" (#3749) at xamarin/xamarin-macios","RelatedBody":"Mono bundles correct and updated mscorlib descriptor inside every mscorlib. The macios copies should be removed to not confuse the linker."},{"Id":"7380966446","Type":"IssuesEvent","CreatedAt":"2018-03-14T21:02:49","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3654","RelatedDescription":"Reopened issue \"XI and XM bindings projects use MCS not CSC\" (#3654) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create New XI or XM Binding Project\r\n2. Look at build log for mcs or csc\r\n3. Notice mcs \r\n\r\n### Environment\r\n\r\nLatest master\r\n\r\n### Build Logs\r\n\r\nhttps://gist.github.com/chamons/23397ab1935469d9ebda6bf89c1532ba\n\n> VS bug [#580959](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580959), VS bug [#580960](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580960)"},{"Id":"7380959986","Type":"IssuesEvent","CreatedAt":"2018-03-14T21:01:36","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3654","RelatedDescription":"Closed issue \"XI and XM bindings projects use MCS not CSC\" (#3654) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create New XI or XM Binding Project\r\n2. Look at build log for mcs or csc\r\n3. Notice mcs \r\n\r\n### Environment\r\n\r\nLatest master\r\n\r\n### Build Logs\r\n\r\nhttps://gist.github.com/chamons/23397ab1935469d9ebda6bf89c1532ba\n\n> VS bug [#580959](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580959), VS bug [#580960](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580960)"},{"Id":"7380950844","Type":"IssuesEvent","CreatedAt":"2018-03-14T20:59:57","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3654","RelatedDescription":"Reopened issue \"XI and XM bindings projects use MCS not CSC\" (#3654) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create New XI or XM Binding Project\r\n2. Look at build log for mcs or csc\r\n3. Notice mcs \r\n\r\n### Environment\r\n\r\nLatest master\r\n\r\n### Build Logs\r\n\r\nhttps://gist.github.com/chamons/23397ab1935469d9ebda6bf89c1532ba\n\n> VS bug [#580959](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580959), VS bug [#580960](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580960)"},{"Id":"7380929998","Type":"IssuesEvent","CreatedAt":"2018-03-14T20:55:50","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3654","RelatedDescription":"Closed issue \"XI and XM bindings projects use MCS not CSC\" (#3654) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create New XI or XM Binding Project\r\n2. Look at build log for mcs or csc\r\n3. Notice mcs \r\n\r\n### Environment\r\n\r\nLatest master\r\n\r\n### Build Logs\r\n\r\nhttps://gist.github.com/chamons/23397ab1935469d9ebda6bf89c1532ba\n\n> VS bug [#580959](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580959), VS bug [#580960](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/580960)"},{"Id":"7380792410","Type":"PullRequestEvent","CreatedAt":"2018-03-14T20:28:12","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3715","RelatedDescription":"Closed pull request \"Binding projects should use CSC not MCS\" (#3715) at xamarin/xamarin-macios","RelatedBody":"- Separated into 3 commits so we can cherry-pick functional changes into release branch without tests (that forces https://github.com/xamarin/xamarin-macios/commit/d5b50765f5997f3bf23f8cea8fda3c0733b1e7bc to come along) if we desire\r\n- I don't love enshrining the csc hack in btouch.cs but not sure what else to do"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"973975762419224577","CreatedAt":"2018-03-14T17:34:52+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin joins https://t.co/zGGlEXOMrE! Learn more: https://t.co/dYZuo1IFIk https://t.co/a0BJMelbL9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":40,"RawContent":null},{"Id":"973950886191030273","CreatedAt":"2018-03-14T15:56:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the #XamarinAndroid Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/HF0W9uigKU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":14,"RawContent":null},{"Id":"973590055234228224","CreatedAt":"2018-03-13T16:02:12+00:00","UserScreenname":"xamarinhq","Text":"The #CSharp developer’s guide to shipping better apps with #VSAppCenter: https://t.co/jU0cnONnM8 https://t.co/5UiJzLeMBf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":72,"FavoriteCount":37,"RawContent":null},{"Id":"973272277876752385","CreatedAt":"2018-03-12T18:59:28+00:00","UserScreenname":"xamarinhq","Text":"Start your week off with the @XamarinPodcast, featuring discussion of #VS2017 version 15.6, AR with UrhoSharp, and… https://t.co/xgDtF4E72X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":8,"RawContent":null},{"Id":"973226616020176896","CreatedAt":"2018-03-12T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/MkadlSMfqL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":10,"RawContent":null},{"Id":"972993579109974016","CreatedAt":"2018-03-12T00:32:01+00:00","UserScreenname":"xamarinhq","Text":"The open source suite of SmartHotel360 reference apps includes mobile and desktop apps for business travelers, a we… https://t.co/i9MWn6ypXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":140,"FavoriteCount":45,"RawContent":null},{"Id":"972643544832856065","CreatedAt":"2018-03-11T01:21:06+00:00","UserScreenname":"xamarinhq","Text":"Get started with the #Xamarin Live Player for iOS: https://t.co/jQnSvYwtB1 https://t.co/sa0DV2n2aD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":94,"FavoriteCount":55,"RawContent":null},{"Id":"972152285550862336","CreatedAt":"2018-03-09T16:49:01+00:00","UserScreenname":"xamarinhq","Text":"Build a simple #XamarinForms chat app that leverages and connects to an https://t.co/y9erV6ivVL Core #WebSocket:… https://t.co/hDELQELDqc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":143,"FavoriteCount":56,"RawContent":null},{"Id":"971835801377091585","CreatedAt":"2018-03-08T19:51:25+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/FGappPLbxT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":71,"FavoriteCount":26,"RawContent":null},{"Id":"971796730722377729","CreatedAt":"2018-03-08T17:16:10+00:00","UserScreenname":"xamarinhq","Text":"An introduction to #tvOS with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/Qafo4W8L3m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"971430573867720704","CreatedAt":"2018-03-07T17:01:11+00:00","UserScreenname":"xamarinhq","Text":"Learn how to turn on automatic signing that allows #VS4Mac to take care of generating and using the required signin… https://t.co/snE707bjji","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":11,"RawContent":null},{"Id":"971119957894418433","CreatedAt":"2018-03-06T20:26:55+00:00","UserScreenname":"xamarinhq","Text":"#VS2017 version 15.6 is now available! Get all the details on this exciting release: https://t.co/QIxlfX9I7F","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":35,"RawContent":null},{"Id":"971068644288540672","CreatedAt":"2018-03-06T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Simplified app signing with secure files in #VSTS: https://t.co/O5XooxuL40 https://t.co/b0oYm5btmK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":16,"RawContent":null},{"Id":"970709776488419328","CreatedAt":"2018-03-05T17:17:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":17,"RawContent":null},{"Id":"970456916488015873","CreatedAt":"2018-03-05T00:32:13+00:00","UserScreenname":"xamarinhq","Text":"Add a little 3D to your #Xamarin iOS apps with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/jQn1NkyLSA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":12,"RawContent":null},{"Id":"970104538375118848","CreatedAt":"2018-03-04T01:12:00+00:00","UserScreenname":"xamarinhq","Text":"Better resource organization in #XamarinForms: https://t.co/8bKeJx4e22","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":18,"RawContent":null},{"Id":"969656588805001217","CreatedAt":"2018-03-02T19:32:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss this! It's your chance to ask living legend @migueldeicaza your questions in his @reddit… https://t.co/6qG4JhCwia","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"969616829483311104","CreatedAt":"2018-03-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add cross-platform charts to any app the easy way with #MicroCharts: https://t.co/VeqfS1vfIL https://t.co/3D8bDqoefW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":109,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-03-15T05:30:44.369592Z","RunDurationInMilliseconds":4707}