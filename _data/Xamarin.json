{"Data":{"Blog":{"FeedItems":[{"Title":"Podcast: Connect(); 2017 Xamarin and App Center Recap","PublishedOn":"2017-11-17T22:08:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, I am joined by App Center program manager James White. We sit down and cover all of the amazing announcements from this years Connect(); 2017 event. Sit back,...","Href":"https://blog.xamarin.com/podcast-connect-2017-xamarin-app-center-recap/","RawContent":null},{"Title":"Xamarin Announcements from Microsoft Connect(); 2017","PublishedOn":"2017-11-15T16:42:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2017, we shared some very exciting updates related to Visual Studio and Xamarin. We invite you to join us tomorrow and Thursday to see even more during the remainder of...","Href":"https://blog.xamarin.com/xamarin-announcements-microsoft-connect-2017/","RawContent":null},{"Title":"Visual Studio App Center: The Next Generation of Xamarin Test Cloud","PublishedOn":"2017-11-15T13:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at Microsoft Connect(); we announced the launch of Visual Studio App Center, the next generation of Xamarin Test Cloud. App Center brings the power of Xamarin Test Cloud combined with ability to...","Href":"https://blog.xamarin.com/visual-studio-app-center-next-generation-xamarin-test-cloud/","RawContent":null},{"Title":"Microsoft Connect(); 2017 Sessions for Xamarin Developers","PublishedOn":"2017-11-15T12:18:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Connect(); 2017 is underway, and there will be a ton of great content for mobile developers over the next three days. To help ensure you catch it all,  we’ve compiled a list of the sessions...","Href":"https://blog.xamarin.com/microsoft-connect-2017-sessions-xamarin-developers/","RawContent":null},{"Title":"Webinar Recording | Build Better Games with Unity and Microsoft Azure","PublishedOn":"2017-11-14T19:49:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join David Antognoli in this pre-recorded webinar and see how to take your Unity games to the next level with powerful cloud services. He walks through how to connect your apps to Microsoft Azure,...","Href":"https://blog.xamarin.com/webinar-recording-build-better-games-unity-microsoft-azure/","RawContent":null},{"Title":"Adding Sound to a Xamarin.Forms App","PublishedOn":"2017-11-13T20:15:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Audio has many uses in mobile applications. Sounds can be essential to your app; they may notify users of important events or make your app accessible to visually-impaired users. We can also use sound...","Href":"https://blog.xamarin.com/adding-sound-xamarin-forms-app/","RawContent":null},{"Title":".NET Standard Comes to Xamarin.Forms Project Templates!","PublishedOn":"2017-11-10T19:06:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Standard is a formal specification of the .NET APIs that allow you to share even more code across the platforms you target. Xamarin developers are able to use .NET Standard libraries for sharing...","Href":"https://blog.xamarin.com/net-standard-comes-xamarin-forms-project-templates/","RawContent":null},{"Title":"Xamarin and Xamarin University Sessions at Microsoft Connect(); 2017","PublishedOn":"2017-11-09T20:47:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We invite you to join us for Microsoft&#8217;s annual Connect(); developer event, scheduled to stream live online November 15–17, 2017! Save the date now to ensure you don&#8217;t miss a minute of...","Href":"https://blog.xamarin.com/xamarin-xamarin-university-sessions-microsoft-connect-2017/","RawContent":null},{"Title":"Android Oreo Notification Channels","PublishedOn":"2017-11-07T20:52:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important features introduced in Android 8.0 Oreo is notification channels. Notification channels make it possible for you to group notifications so that all notifications posted to a...","Href":"https://blog.xamarin.com/android-oreo-notification-channels/","RawContent":null},{"Title":"Simplified App Signing with Secure Files in Visual Studio Team Services","PublishedOn":"2017-11-06T21:00:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing I never want to worry about when building my apps is needing to remember where I stored my provisioning profiles, certificates, and keystores. Thanks to Visual Studio Team Services (VSTS), I...","Href":"https://blog.xamarin.com/simplified-app-signing-secure-files-visual-studio-team-services/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6872901138","Type":"PullRequestEvent","CreatedAt":"2017-11-18T02:40:45","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/980","RelatedDescription":"Merged pull request \"Add API Level 27.\" (#980) at xamarin/xamarin-android","RelatedBody":"I cannot check if it builds by myself because I never get working build locally. `make clean` should never fail but it never got fixed. And asking to run `git clean -xdf` for developers is a huge no-go."},{"Id":"6872014405","Type":"PullRequestEvent","CreatedAt":"2017-11-17T20:57:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1040","RelatedDescription":"Merged pull request \"[tests] set $(AndroidSdkDirectory) for JI tests\" (#1040) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/java.interop/pull/211\r\n\r\nFor Windows to set `ANDROID_SDK_PATH` for the Java.Interop unit tests,\r\nwe need to pass `$(AndroidSdkDirectory)` through.\r\n\r\nOtherwise a few tests get skipped in\r\nXamarin.Android.Tools.Bytecode-Tests.dll."},{"Id":"6872002041","Type":"PullRequestEvent","CreatedAt":"2017-11-17T20:54:20","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1041","RelatedDescription":"Merged pull request \"[tests] fix emulator launch when ANDROID_HOME is set\" (#1041) at xamarin/xamarin-android","RelatedBody":"It appears the installation of Android Studio has exported `ANDROID_HOME`\r\non my system. This is problematic for our build, since it installs a\r\nspecific version of the Android SDK into ~/android-toolchain/sdk.\r\n\r\nThe fix is to set `ANDROID_HOME` for the `emulator` command using the\r\nexisting value for `AndroidSdkHome` from our build. This allows the emulator\r\nto locate the proper system image in ~/android-toolchain/sdk/system-images.\r\nI suspect a similar problem is happening on VSTS, in our monodroid build.\r\n\r\nI also added the `-verbose` flag to the `emulator` command so we will have\r\nmore information if the emulator fails to launch during a build."},{"Id":"6871143397","Type":"PullRequestEvent","CreatedAt":"2017-11-17T17:29:21","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1041","RelatedDescription":"Opened pull request \"[tests] fix emulator launch when ANDROID_HOME is set\" (#1041) at xamarin/xamarin-android","RelatedBody":"It appears the installation of Android Studio has exported `ANDROID_HOME`\r\non my system. This is problematic for our build, since it installs a\r\nspecific version of the Android SDK into ~/android-toolchain/sdk.\r\n\r\nThe fix is to set `ANDROID_HOME` for the `emulator` command using the\r\nexisting value for `AndroidSdkHome` from our build. This allows the emulator\r\nto locate the proper system image in ~/android-toolchain/sdk/system-images.\r\nI suspect a similar problem is happening on VSTS, in our monodroid build.\r\n\r\nI also added the `-verbose` flag to the `emulator` command so we will have\r\nmore information if the emulator fails to launch during a build."},{"Id":"6870509545","Type":"PullRequestEvent","CreatedAt":"2017-11-17T15:24:45","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1040","RelatedDescription":"Opened pull request \"[tests] set $(AndroidSdkDirectory) for JI tests\" (#1040) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/java.interop/pull/211\r\n\r\nFor Windows to set `ANDROID_SDK_PATH` for the Java.Interop unit tests,\r\nwe need to pass `$(AndroidSdkDirectory)` through.\r\n\r\nOtherwise a few tests get skipped in\r\nXamarin.Android.Tools.Bytecode-Tests.dll."},{"Id":"6870190972","Type":"PullRequestEvent","CreatedAt":"2017-11-17T14:20:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1039","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Apksigner invocation fails on build-tools 25 and lower\" (#1039) at xamarin/xamarin-android","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=525752\r\n\r\nOlder `apksigner` versions did not have an `--in` parameter. Instead\r\nthey expected the last item to be passed to be the .apk to sign.\r\n\r\nSo to make this work on older `apksigner` versions we should rework\r\nthe Task to pass the apk last."},{"Id":"6870174354","Type":"PullRequestEvent","CreatedAt":"2017-11-17T14:17:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1030","RelatedDescription":"Merged pull request \"[Xamarin.Android.Bcl-Tests] Allow Xamarin.Android.NUnitLite.dll path to be overridden\" (#1030) at xamarin/xamarin-android","RelatedBody":"This is required for \"system\" execution on Windows, as there is no 'xbuild-frameworks' folder installed by the XA .vsix. An example framework installation location in VS2017 is shown below:\r\n'C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0'."},{"Id":"6869581525","Type":"PullRequestEvent","CreatedAt":"2017-11-17T11:52:15","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1039","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Apksigner invocation fails on build-tools 25 and lower\" (#1039) at xamarin/xamarin-android","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=525752\r\n\r\nOlder `apksigner` versions did not have an `--in` parameter. Instead\r\nthey expected the last item to be passed to be the .apk to sign.\r\n\r\nSo to make this work on older `apksigner` versions we should rework\r\nthe Task to pass the apk last."},{"Id":"6867823980","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:45:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1035","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Aapt task needs to ignore fakeLogOpen\" (#1035) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1137183\r\n(search for APT0000 in Xamarin.Android-Tests.sln output)\r\n\r\nOur Windows builds on VSTS are randomly failing with:\r\n```\r\n2017-11-14T00:49:35.1654201Z   Executing package -f -m -M\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2\\manifest\\AndroidManifest.xml -J\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2 --custom-package mono.android_tests -F\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2\\resources.apk.bk -S obj\\Debug\\res -S\r\nE:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\obj\\Debug\\lp\\1\\jl\\res -I\r\nC:\\Users\\dlab\\android-toolchain\\sdk\\platforms\\android-26\\android.jar\r\n--auto-add-overlay --max-res-version 26 (TaskId:87)\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_crash, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2333825Z Done executing task \"Aapt\" -- FAILED.\r\n(TaskId:87)\r\n```\r\n\r\nI was able to repro this locally with the following PowerShell script:\r\n```\r\n$successful='0'\r\nwhile ($successful -eq '0')\r\n{\r\n    & git clean -dxf .\\src\\ .\\bin\\TestDebug\\\r\n    & .\\bin\\Debug\\bin\\xabuild.exe .\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj /t:SignAndroidPackage /bl /noconsolelogger\r\n    $successful = $lastExitCode\r\n}\r\n```\r\n\r\nMerely cleaning stuff and rebuilding over and over would cause the issue\r\nto crop up.\r\n\r\nWhat is also odd about the failure:\r\n- Running the `aapt.exe` command manually after the failure works\r\n- The exit code is 0\r\n- If I change the Aapt task to ignore errors, the APK seems to be valid.\r\nMono.Android-Tests still pass when I deploy and run them.\r\n\r\nSo what I *think* should be done here is to just check for `fakeLogOpen`\r\nin the output, and treat this as a warning. This allows the build to go\r\non, which seems to produce a valid APK. We may not know this is resolved\r\nuntil merged into master and we see a few builds succeed on VSTS."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6870951848","Type":"PullRequestEvent","CreatedAt":"2017-11-17T16:48:53","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1286","RelatedDescription":"Opened pull request \"[UWP] Entry alignment re-adjustment\" (#1286) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nOne more removal of bottom alignment re: #1220  to correctly fix placeholder.\r\n\r\n![1](https://user-images.githubusercontent.com/1251024/32958666-27f4e43a-cb8d-11e7-8f0c-c4d6869e7496.JPG)\r\n![2](https://user-images.githubusercontent.com/1251024/32958669-291c33c2-cb8d-11e7-8277-429dbebe2951.JPG)\r\n\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60041\r\n\r\n### API Changes ###\r\n\r\nN/A\r\n\r\n### Behavioral Changes ###\r\n\r\nN/A\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6869197452","Type":"PullRequestEvent","CreatedAt":"2017-11-17T10:20:02","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1281","RelatedDescription":"Merged pull request \"[XamlC] treat netstandard types as mscorlib\" (#1281) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf the end user project type differs from Core's type, the compiler can\r\nbe confused while comparing base styles, like System.Double.\r\n\r\nthis fixes that by assuming System.Runtime, mscorlib and netstandard\r\ntypes are equivalent (because they are)\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"},{"Id":"6868822045","Type":"PullRequestEvent","CreatedAt":"2017-11-17T08:56:20","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1277","RelatedDescription":"Merged pull request \"[Xaml] use [Before|After]Targets to avoid being overridden\" (#1277) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nOn `netstandard` the imports are imported before the common targets (except with `package.config`).\r\n\r\nAs the default `*DependsOn` properties are not additive, our values gets replaced\r\n```\r\nProperty reassignment: $(CoreCompileDependsOn)=\"_ComputeNonExistentFileProperty;ResolveCodeAnalysisRuleSet\"\r\n(previous value: \"\r\n            XamlG;\r\n            ;\r\n        \") at /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.CurrentVersion.targets (175,9)\r\n```\r\n\r\nuse AfterTargets and BeforeTargets to avoid that.\r\n\r\nsee also https://github.com/Microsoft/msbuild/issues/1468#issuecomment-269560176\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"},{"Id":"6868004993","Type":"PullRequestEvent","CreatedAt":"2017-11-17T03:57:23","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1285","RelatedDescription":"Opened pull request \"Fix various memory leaks in UWP applications\" (#1285) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCurrently the UWP ListView creates its first set of cells without going through the TemplatedItemsList; because of this, subsequent updates to the data behind the cells causes a second set of cells to be realized; this both doubles the number of cells created and leaks the first set of cells (they can never been garbage collected). This change forces all cell creation to go through the TemplateItemsList to avoid double creation and leaking.\r\n\r\nThis change fixes a bug where switching the application's main page while displaying a modal page leaked the modal page and its contents on Windows. \r\n\r\nThis change fixes a bug where NavigationPageRenderer instances were leaked because event handlers for PageControl were not cleaned up.\r\n\r\nThis change fixes a bug where Page instances were leaked because resource changed event handlers were not cleaned up.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [45722 – Memory leak in Xamarin Forms ListView](https://bugzilla.xamarin.com/show_bug.cgi?id=45722)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6867428417","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:25:38","Actor":"WonyoungChoi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1284","RelatedDescription":"Opened pull request \"[XamlC] Add NETStandard2.0 support to XF.Build.Tasks\" (#1284) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis is a modification to build the Xamarin.Forms application including xaml files using dotnet-cli (>=.NETCore 2.0).\r\n\r\nPreviously, when trying to build an app with dotnet-cli, the following error occurred.\r\n\r\n> Could not load file or assembly 'Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n\r\nThe reason of this error is that Xamarin.Forms.Build.Tasks.dll was built with NET45 target framework.\r\nFor dotnet-cli, it must be build with NETStandard or NETCoreApp.\r\n\r\nThis PR has following changes.\r\n- Change Xamarin.Forms.Build.Tasks.csproj with new project-system (VS2017)\r\n- Use Mono.Cecil 0.10.0-beta7\r\n- Fix some code of Xamarin.Forms.Build.Tasks to build with netstandard2.0\r\n- Use project-dependency in solution file instead of ProjectReference for Xamarin.Forms.Build.Tasks\r\n- Add netstandard2.0 stuff to Xamarin.Forms.nuspec\r\n\r\nRelated PR: https://github.com/xamarin/Xamarin.Forms/pull/868\r\n\r\n### Bugs Fixed ###\r\n\r\nsee dotnet/cli#5457 (comment) for a repro\r\n\r\n### API Changes ###\r\n\r\nN/A\r\n\r\n### Behavioral Changes ###\r\n\r\nIf a XF app is built with NETStandard 2.0 or a target framework that supports it, Xamarin.Forms.Build.Tasks.dll, built with netstandard2.0, is used.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of master at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6872438962","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:56:14","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3022","RelatedDescription":"Opened pull request \"Bump mono\" (#3022) at xamarin/xamarin-macios","RelatedBody":"- Picking up fix for https://bugzilla.xamarin.com/show_bug.cgi?id=60540"},{"Id":"6871422459","Type":"PullRequestEvent","CreatedAt":"2017-11-17T18:35:55","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3021","RelatedDescription":"Merged pull request \"[macos] Fix APITest crash due to missing version check\" (#3021) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6871120443","Type":"PullRequestEvent","CreatedAt":"2017-11-17T17:24:09","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3016","RelatedDescription":"Merged pull request \"[MTouch] If we are building a shared code extension, do not build the msym dir. #60415\" (#3016) at xamarin/xamarin-macios","RelatedBody":"We used to try and build the msym dir for shared code extensions, this meant that a warning was given because in that case, the msym is shared, therefore we already have it in the app path as per comments in the bug https://bugzilla.xamarin.com/show_bug.cgi?id=60415\r\n\r\nSince the action is done at the very end, we know what we are building and we can scape the method if we are an extension and shared."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"931551005816311809","CreatedAt":"2017-11-17T15:54:01+00:00","UserScreenname":"xamarinhq","Text":"Day 3 of #MSFTConnect starts NOW! Get FREE live, online training from @XamarinU, streaming all day—join us:… https://t.co/SDurZQlgnh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null},{"Id":"931327778301063168","CreatedAt":"2017-11-17T01:07:00+00:00","UserScreenname":"xamarinhq","Text":"Thanks for joining us for Day 2 of #MSFTConnect! Tune in tomorrow for live online training from @XamarinU.","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"931308149457506305","CreatedAt":"2017-11-16T23:49:00+00:00","UserScreenname":"xamarinhq","Text":"It's the last talk of the day at #MSFTConnect! Join Donovan Brown &amp; Jessica Deen for \"#DevOps for Any Language and… https://t.co/BYNjySPV9Y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":8,"FavoriteCount":10,"RawContent":null},{"Id":"931293552717582336","CreatedAt":"2017-11-16T22:51:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @JamesMontemagno takes the stage with \"#Xamarin: The Future of App Development\" at #MSFTConnect at 3 pm P… https://t.co/pLEDlA2VAK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":5,"RawContent":null},{"Id":"931279207916650496","CreatedAt":"2017-11-16T21:54:00+00:00","UserScreenname":"xamarinhq","Text":"Don't touch that browser! You've got a choice coming up—\"#CICD #DevOps Pipeline for Mobile Apps and Services\" with… https://t.co/v6YuQuwoS6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":11,"RawContent":null},{"Id":"931263355259621376","CreatedAt":"2017-11-16T20:51:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss this—join us at 1 pm PT / 4 pm ET on the #MSFTConnect live stream to learn how to \"Ship Five… https://t.co/cXLM0ODYH4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"931236175414784003","CreatedAt":"2017-11-16T19:03:00+00:00","UserScreenname":"xamarinhq","Text":"Can't watch #MSFTConnect live? Check out these #Xamarin-focused on demand videos from the event: https://t.co/6pOPUzJTMN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":8,"RawContent":null},{"Id":"931225857670156288","CreatedAt":"2017-11-16T18:22:00+00:00","UserScreenname":"xamarinhq","Text":"See \"What's New in #XamarinForms\" with @davidortinau in this on demand video from #MSFTConnect: https://t.co/hSAuXQjcYf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":17,"RawContent":null},{"Id":"931205440263938048","CreatedAt":"2017-11-16T17:00:52+00:00","UserScreenname":"xamarinhq","Text":"Don't miss \"A Day in the Life of a Modern #dotNET Developer\" with Scott Hunter, featuring live Q&amp;A, next up at 12 p… https://t.co/age6LgkvjS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"931189619772805121","CreatedAt":"2017-11-16T15:58:00+00:00","UserScreenname":"xamarinhq","Text":"Day 2 of #MSFTConnect is about to start! Don't know which sessions you should prioritize? Here's our guide to the b… https://t.co/DRguluF5x4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":11,"RawContent":null},{"Id":"930920821035601920","CreatedAt":"2017-11-15T22:09:54+00:00","UserScreenname":"xamarinhq","Text":"That's it for Day 1 of #MSFTConnect! Join us again tomorrow for technical deep dives on today's announcements: https://t.co/kdvGKzBVFW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":6,"RawContent":null},{"Id":"930877295233064961","CreatedAt":"2017-11-15T19:16:56+00:00","UserScreenname":"xamarinhq","Text":"Everything #Xamarin developers should know about from #MSFTConnect, from #VSAppCenter to new #VisualStudio tools:… https://t.co/Z9XxAesS3S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":72,"FavoriteCount":55,"RawContent":null},{"Id":"930875853751373825","CreatedAt":"2017-11-15T19:11:13+00:00","UserScreenname":"xamarinhq","Text":"#VSAppCenter is the next generation of #Xamarin Test Cloud. Learn more: https://t.co/mjIAHM40mM https://t.co/xQR77mRQiA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":47,"RawContent":null},{"Id":"930874776209543169","CreatedAt":"2017-11-15T19:06:56+00:00","UserScreenname":"xamarinhq","Text":"#MSFTConnect has SO MANY amazing sessions from today through Friday! Not sure where to start? Here's our guide to C… https://t.co/2HHFUNEayR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":7,"RawContent":null},{"Id":"930868754552180737","CreatedAt":"2017-11-15T18:43:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss #Xamarin's @NatFriedman showing you how to build and ship apps faster with C# and #VSAppCenter, live fro… https://t.co/6yKsZl32lU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":12,"RawContent":null},{"Id":"930810377390002177","CreatedAt":"2017-11-15T14:51:02+00:00","UserScreenname":"xamarinhq","Text":"It's time! Join us live online for the FREE #MSFTConnect developer conference, starting at 7 am PT / 10 am ET / 3 p… https://t.co/fOdhC65nln","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2017-11-18T05:30:39.8401851Z","RunDurationInMilliseconds":4032}