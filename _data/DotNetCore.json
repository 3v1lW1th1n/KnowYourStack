{"Data":{"Blog":{"FeedItems":[{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":72,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":79,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3694","PublishedOn":"2018-11-29T00:21:07+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We are happy to let you know that .NET Framework 4.8 is now feature complete and we have an early access build to share with you all! We will continue to stabilize this release and take more fixes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/28/announcing-net-framework-4-8-early-access-build-3694/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"},{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8752711525","Type":"PullRequestEvent","CreatedAt":"2018-12-14T04:44:00","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21545","RelatedDescription":"Opened pull request \"Add Azure DevOps signing support\" (#21545) at dotnet/coreclr","RelatedBody":"Add signing support for Azure DevOps pipelines. This uses the arcade signing step, but with custom logic to find files to sign while we're not using arcade for the rest of the build."},{"Id":"8752655115","Type":"PullRequestEvent","CreatedAt":"2018-12-14T04:20:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21540","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#21540) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren"},{"Id":"8752615881","Type":"PullRequestEvent","CreatedAt":"2018-12-14T04:05:41","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21502","RelatedDescription":"Merged pull request \"Running and visualizing tests in AzureDevOps (Part 1)\" (#21502) at dotnet/coreclr","RelatedBody":"The changes are the following:\r\n1. Enable Azure Pipelines reporter so the test results can be seen in-place - TestRunNamePrefix should encode all the needed information for a test run to be identifiable.\r\n1. Scenarios property should use comma (not semi-colon) to work correctly on non-Windows\r\n1. Specify timeout to test jobs (the numbers are taken from netci.groovy) - we would adjust them as soon as we get this running in each PR\r\n1. Specify timeout for Helix work items (the number is taken from buildpipeline) - same as above\r\n1. Specify helixType and helixRepo properties to the job and use _HelixType and _HelixSource variables in MSBuild project instead of defining them manually\r\n1. Limit Pri0 Checked test jobs to running against pull requests. This also should be limited in the future to \"default\" build definition name - so when we have PR workload selection feature working we can distinguish between default PR validation and user triggered jobs.\r\n1. Remove \"Prepare tests for helix\" step - instead of archiving Core_Root and tests folders ourselves - directly specify them as correlation payload and work item payload directories and let the archiving be handled by Helix Sdk. \r\n\r\nThe are several things left to make Innerloop testing green but I prefer to fix them separately:\r\n1. I see frequent Task Cancelled exception when submitting jobs to Helix that seems to be a known issue https://github.com/dotnet/arcade/issues/1286\r\n2. Some Helix queues have their specific problems which need to be debugged and addressed one by one. For example, all the test runs are failing on OSX 12 now with this message\r\n```\r\n+ python runtest_helix.py -wrapper baseservices.varargs.XUnitWrapper.dll\r\ndlopen failed to open the libcoreclr.so with error dlopen(/Users/dotnet-bot/dotnetbuild/work/e051bc25-0102-4e21-8189-82085c7db0dd/Payload/libcoreclr.dylib, 6): Symbol not found: _syslog$DARWIN_EXTSN\r\n  Referenced from: /Users/dotnet-bot/dotnetbuild/work/e051bc25-0102-4e21-8189-82085c7db0dd/Payload/libcoreclr.dylib (which was built for Mac OS X 10.13)\r\n  Expected in: /usr/lib/libSystem.B.dylib\r\n```\r\n3. Benchmarks Games tests can't find input files due to different placement of Core_Root and testing assembly folders:\r\nhttps://github.com/dotnet/coreclr/blob/fdef855fa1df3540ba632bfae850279d627bde66/tests/src/JIT/Performance/CodeQuality/BenchmarksGame/regex-redux/harness-helpers.cs#L56\r\n\r\nExamples of the pipeline runs for:\r\n* PullRequest: https://dnceng.visualstudio.com/public/_build/results?buildId=58201\r\n* GitHub push: https://dnceng.visualstudio.com/public/_build/results?buildId=58199\r\n"},{"Id":"8752329797","Type":"IssuesEvent","CreatedAt":"2018-12-14T02:27:35","Actor":"hoyosjs","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21544","RelatedDescription":"Opened issue \"Debug mode code gen optimizes unused parameters away\" (#21544) at dotnet/coreclr","RelatedBody":"@dotnet/jit-contrib \r\n\r\nThis issue repros on Windows x64 with runtimes 2.1.6, 2.2.0, and 3.0.0 preview. (SDK 2.1.502, 2.2.101, 3.0.0\r\n\r\nWith the repro below, the value of `a` gets updated under the debugger once `x` gets defined, possibly as `a` has no future references and it's a value type parameter. However, this doesn't seem to happen with other parameter types. From what I can see got variables have the same address, although in debug mode I expect the JIT not to optimize unused variables (as they can potentially be inspected or used for funceval.\r\n\r\n```c#\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Test(0); \r\n        }\r\n\r\n        private static void Test(decimal a)\r\n        {\r\n            var x = a - 10;\r\n            return; // break here\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```xml\r\n<Project Sdk = \"Microsoft.NET.Sdk\" >\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n"},{"Id":"8752314183","Type":"PullRequestEvent","CreatedAt":"2018-12-14T02:22:32","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21541","RelatedDescription":"Merged pull request \"Signing fixes\" (#21541) at dotnet/coreclr","RelatedBody":"More signing testing changes going into a branch."},{"Id":"8752264727","Type":"PullRequestEvent","CreatedAt":"2018-12-14T02:06:23","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21543","RelatedDescription":"Opened pull request \"Enable PinPlugAtGCTime event for standalone GC\" (#21543) at dotnet/coreclr","RelatedBody":"PinPlugAtGCTime event was never ported to use the new interface we have for emitting GC events. This is a fix to address that. "},{"Id":"8752226411","Type":"IssuesEvent","CreatedAt":"2018-12-14T01:54:30","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21542","RelatedDescription":"Opened issue \"[x64_arm64_altjit] Test failure: JIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\" (#21542) at dotnet/coreclr","RelatedBody":"**Job:**\r\nx64_arm64_altjit_checked_windows_nt_jitstress1\r\n\r\n**Failed tests:**\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd\r\n\r\n**Failed log:**\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd [FAIL]\r\n        \r\n        Assert failure(PID 12176 [0x00002f90], Thread: 5632 [0x1600]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd [FAIL]\r\n        \r\n        Assert failure(PID 1404 [0x0000057c], Thread: 10504 [0x2908]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```"},{"Id":"8752224562","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:53:54","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21541","RelatedDescription":"Opened pull request \"Signing fixes\" (#21541) at dotnet/coreclr","RelatedBody":""},{"Id":"8752185108","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:41:21","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21540","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#21540) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8752158582","Type":"IssuesEvent","CreatedAt":"2018-12-14T01:33:10","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20499","RelatedDescription":"Closed issue \"JIT: assertion failure creating struct copy for synchronized method\" (#20499) at dotnet/coreclr","RelatedBody":"Repro derived from #20442\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nstruct S\r\n{\r\n    public long y;\r\n    public int x;\r\n}\r\n\r\nclass Z\r\n{\r\n    virtual public S F()\r\n    {\r\n        S s = new S();\r\n        s.x = 100;\r\n        s.y = -1;\r\n        return s;\r\n    }\r\n\r\n}\r\n\r\nclass X\r\n{\r\n    Z z;\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.Synchronized)]\r\n    public S G() => z.F();\r\n\r\n    public static int Main()\r\n    {\r\n        var x = new X();\r\n        x.z = new Z();\r\n        return x.G().x;\r\n    }\r\n}\r\n```\r\nJitting of `X.G` for arm64 causes this assert:\r\n```\r\nAssert failure(PID 834268 [0x000cbadc], Thread: 834304 [0xcbb00]): Assertion failed 'impTreeLast != nullptr' in 'X:G():struct:this' (IL size 12)\r\n\r\n    File: e:\\repos\\coreclr\\src\\jit\\importer.cpp Line: 562\r\n```\r\nThe jit is copying a struct-typed return to the return local in a synchronous method, and ends up invoking an importer utility outside the importer, where `impTreeLast` is not set.\r\n\r\ncc @dotnet/jit-contrib @stephentoub "},{"Id":"8752076319","Type":"IssuesEvent","CreatedAt":"2018-12-14T01:08:48","Actor":"swaroop-sridhar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21167","RelatedDescription":"Closed issue \"Interop_MarshalAPI._NativeLibrary_NativeLibraryTests_NativeLibraryTests_._NativeLibrary_NativeLibraryTests_NativeLibraryTests_sh [FAIL]\" (#21167) at dotnet/coreclr","RelatedBody":"Ubuntu x64 Checked Innerloop Build and Test (Jit - TieredCompilation=0) \r\n\r\nSeen in https://github.com/dotnet/coreclr/pull/21159\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_no_tiered_compilation_innerloop_tst_prtest/3267/console"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8752042674","Type":"IssuesEvent","CreatedAt":"2018-12-14T00:58:23","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10469","RelatedDescription":"Opened issue \"Extra new line when tool restore is successful\" (#10469) at dotnet/cli","RelatedBody":"```\r\nλ dotnet  tool restore\r\nTool 't-rex' (version '1.0.109') was restored. Available commands: t-rex\r\nTool 'dotnetsay' (version '2.1.4') was restored. Available commands: dotnetsay\r\n\r\n\r\nRestore was successful.\r\n```"},{"Id":"8750955954","Type":"IssuesEvent","CreatedAt":"2018-12-13T20:47:17","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10458","RelatedDescription":"Closed issue \"Adding dotnet tool from custom source doesn't work on Ubuntu\" (#10458) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nTry installing the following tool from myget pre-release source:\r\n```\r\ndotnet tool install -g Nethereum.Generator.Console --version 1.0.2-CI-20181129-133640 --add-source https://www.myget.org/F/nethereum/api/v3/index.json\r\n```\r\n\r\n## Expected  behavior\r\n```\r\nYou can invoke the tool using the following command: Nethereum.Generator.Console\r\nTool 'nethereum.generator.console' (version '1.0.2-ci-20181129-133640') was successfully installed.\r\n```\r\n\r\n## Actual behavior\r\n```\r\nThe settings file in the tool's NuGet package is invalid: Failed to retrieve tool configuration: Could not find a part of the path '/home/vsts/.dotnet/tools/.store/nethereum.generator.console/1.0.2-ci-20181129-133640/nethereum.generator.console/1.0.2-CI-20181129-133640/tools/netcoreapp2.1/any/DotnetToolSettings.xml'.\r\nTool 'nethereum.generator.console' failed to install. Please contact the tool author for assistance.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n2018-12-09T20:35:08.3469399Z .NET Core SDK (reflecting any global.json):\r\n2018-12-09T20:35:08.3470064Z  Version:   2.1.500\r\n2018-12-09T20:35:08.3476095Z  Commit:    b68b931422\r\n2018-12-09T20:35:08.3476541Z \r\n2018-12-09T20:35:08.3476837Z Runtime Environment:\r\n2018-12-09T20:35:08.3477067Z  OS Name:     ubuntu\r\n2018-12-09T20:35:08.3477314Z  OS Version:  16.04\r\n2018-12-09T20:35:08.3477560Z  OS Platform: Linux\r\n2018-12-09T20:35:08.6814327Z  RID:         ubuntu.16.04-x64\r\n2018-12-09T20:35:08.7161135Z  Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n2018-12-09T20:35:08.7208165Z \r\n2018-12-09T20:35:08.7208445Z Host (useful for support):\r\n2018-12-09T20:35:08.7208576Z   Version: 2.1.6\r\n2018-12-09T20:35:08.7208682Z   Commit:  3f4f8eebd8\r\n2018-12-09T20:35:08.7208828Z \r\n2018-12-09T20:35:08.7208939Z .NET Core SDKs installed:\r\n2018-12-09T20:35:08.7209048Z   1.0.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209249Z   1.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209363Z   1.1.5 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209467Z   1.1.7 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209605Z   1.1.8 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209717Z   1.1.9 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209819Z   1.1.10 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209979Z   1.1.11 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210092Z   2.0.0 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210194Z   2.0.3 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210295Z   2.1.2 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210573Z   2.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210733Z   2.1.100 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210769Z   2.1.101 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210859Z   2.1.102 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210934Z   2.1.103 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210966Z   2.1.104 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211014Z   2.1.105 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211045Z   2.1.200 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211123Z   2.1.201 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211156Z   2.1.202 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211185Z   2.1.300 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211214Z   2.1.301 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211296Z   2.1.302 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211326Z   2.1.400 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211355Z   2.1.401 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211603Z   2.1.402 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211640Z   2.1.403 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211676Z   2.1.500 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211700Z \r\n2018-12-09T20:35:08.7211738Z .NET Core runtimes installed:\r\n2018-12-09T20:35:08.7211824Z   Microsoft.AspNetCore.All 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7211867Z   Microsoft.AspNetCore.All 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212087Z   Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212174Z   Microsoft.AspNetCore.All 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212215Z   Microsoft.AspNetCore.All 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212365Z   Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212451Z   Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212491Z   Microsoft.AspNetCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212529Z   Microsoft.AspNetCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212609Z   Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212650Z   Microsoft.AspNetCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212697Z   Microsoft.AspNetCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212736Z   Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212819Z   Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212864Z   Microsoft.NETCore.App 1.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212904Z   Microsoft.NETCore.App 1.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212990Z   Microsoft.NETCore.App 1.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213029Z   Microsoft.NETCore.App 1.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213067Z   Microsoft.NETCore.App 1.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213147Z   Microsoft.NETCore.App 1.0.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213196Z   Microsoft.NETCore.App 1.0.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213234Z   Microsoft.NETCore.App 1.0.13 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213311Z   Microsoft.NETCore.App 1.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213351Z   Microsoft.NETCore.App 1.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213397Z   Microsoft.NETCore.App 1.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213507Z   Microsoft.NETCore.App 1.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213547Z   Microsoft.NETCore.App 1.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213585Z   Microsoft.NETCore.App 1.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213624Z   Microsoft.NETCore.App 1.1.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213706Z   Microsoft.NETCore.App 1.1.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213753Z   Microsoft.NETCore.App 2.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213791Z   Microsoft.NETCore.App 2.0.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213873Z   Microsoft.NETCore.App 2.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213920Z   Microsoft.NETCore.App 2.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213957Z   Microsoft.NETCore.App 2.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214043Z   Microsoft.NETCore.App 2.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214083Z   Microsoft.NETCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214122Z   Microsoft.NETCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214203Z   Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214365Z   Microsoft.NETCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214404Z   Microsoft.NETCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214443Z   Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214527Z   Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\nThis is an Azure hosted Ubuntu-16.04 environment.\r\n\r\nI am only having this problem on Ubuntu 16.04, otherwise it works on macOS Mojave and Windows 10 as expected."},{"Id":"8748884958","Type":"IssuesEvent","CreatedAt":"2018-12-13T15:05:56","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10466","RelatedDescription":"Closed issue \"Issues compiling after installing SDK 2.2\" (#10466) at dotnet/cli","RelatedBody":"_From @SkinnySackboy on December 11, 2018 15:45_\n\nHi,\r\n\r\nHaving already been using .NET Core 2.0 and 2.1 in production already, earlier this week we decided to start upgrading to .NET Core 2.2. On our machines (i.e. in Visual Studio), so far so good - we installed the SDK without having modified any projects and everything still works as it always used to.\r\n\r\nOn our TeamCity agents, we decided to do the same as we have in the past, i.e. to install the .NET Core 2.2 SDK. This is where the interesting problems start. Suddenly, our existing solutions which contain a .NET Core 2.1 project (event unit tests) started failing with the following error:\r\n\r\n**error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)**\r\n\r\nThis does not happen from Visual Studio - it only seems to happen when using the dotnet CLI. It gets even more interesting as if we first compile from Visual Studio and subsequently run dotnet build from the command line, it all works. If however you delete the bin/obj folders, dotnet build from the command line fails with the previous error.\r\n\r\nHas anyone else come across this issue, as I was not expecting the mere presence of the 2.2 SDK to suddenly cause all previous builds still targeting .NET Core 2.1 to start failing?\r\n\r\nThanks in advance\n\n_Copied from original issue: dotnet/core#2130_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8750744665","Type":"PullRequestEvent","CreatedAt":"2018-12-13T20:07:30","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Opened pull request \"Reduce noise in reference assemblies\" (#1020) at dotnet/standard","RelatedBody":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n"},{"Id":"8750661813","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Opened pull request \"Require support for default implementations of interfaces\" (#1019) at dotnet/standard","RelatedBody":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity."},{"Id":"8750605391","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:42:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Opened pull request \"WIP: Add support for Index and Range\" (#1018) at dotnet/standard","RelatedBody":"The adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1."},{"Id":"8750481131","Type":"PullRequestEvent","CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Opened pull request \"Add IAsyncEnumerable<T>\" (#1017) at dotnet/standard","RelatedBody":"***Before merging, change base to master**. Can only happen after #1014 is merged*."},{"Id":"8750347510","Type":"PullRequestEvent","CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Merged pull request \"Enable publishing to build-assets registry\" (#1015) at dotnet/standard","RelatedBody":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL"},{"Id":"8748277819","Type":"PullRequestEvent","CreatedAt":"2018-12-13T13:31:44","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Merged pull request \"Update dependency files\" (#1016) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n"},{"Id":"8748104940","Type":"PullRequestEvent","CreatedAt":"2018-12-13T13:01:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Opened pull request \"Update dependency files\" (#1016) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8752322144","Type":"PullRequestEvent","CreatedAt":"2018-12-14T02:25:07","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34092","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview-27214-01, preview-27213-02, respectively (master)\" (#34092) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8752197172","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:45:16","Actor":"jkoritzinsky","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34091","RelatedDescription":"Opened pull request \"Remove [Out] by-value string parameter usage from System.Management.\" (#34091) at dotnet/corefx","RelatedBody":"Fixes #34083."},{"Id":"8752176476","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:38:28","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34078","RelatedDescription":"Merged pull request \"Expose AsyncIteratorStateMachineAttribute\" (#34078) at dotnet/corefx","RelatedBody":"cc: @kouvel, @tarekgh "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8752819729","Type":"PullRequestEvent","CreatedAt":"2018-12-14T05:27:31","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31787","RelatedDescription":"Opened pull request \"Force cancellation if switching to UI thread completed after cancellation request\" (#31787) at dotnet/roslyn","RelatedBody":"This issue was discovered by @jasonmalinowski while investigating #30661.\r\n\r\nTo ensure the issue does not affect other code, the changes in 2c85db1c were audited and updated to ensure code does not continue executing after a cancellation request."},{"Id":"8752770769","Type":"PullRequestEvent","CreatedAt":"2018-12-14T05:08:04","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31786","RelatedDescription":"Opened pull request \"Hide the start page to improve test performance\" (#31786) at dotnet/roslyn","RelatedBody":""},{"Id":"8752754257","Type":"PullRequestEvent","CreatedAt":"2018-12-14T05:01:26","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31785","RelatedDescription":"Opened pull request \"Add Span and Memory conversion methods for ImmutableArray\" (#31785) at dotnet/roslyn","RelatedBody":""},{"Id":"8752442015","Type":"PullRequestEvent","CreatedAt":"2018-12-14T03:04:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31580","RelatedDescription":"Merged pull request \"Async-streams: Fix crash with async-iterator method with only throw\" (#31580) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/31552\r\n\r\nFor context, a method body without a `yield` is not considered an iterator."},{"Id":"8752442009","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:04:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31552","RelatedDescription":"Closed issue \"csc.exe crashes with async enumerable function containing only a throw statement\" (#31552) at dotnet/roslyn","RelatedBody":"**Version Used**:  .NET Core 3.0.0-preview-27122-01, win10-x64\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create the test program (see below)\r\n2. Run\r\n3. Wait\r\n\r\n**Expected Behavior**:\r\n\r\nShould compile successfully\r\n\r\n**Actual Behavior**:\r\n\r\ncsc.exe crashes with the following output:\r\n\r\n```text\r\n1>------ Erstellen gestartet: Projekt: TestCsConsole, Konfiguration: Debug Any CPU ------\r\n1>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(142,5): message NETSDK1057: Sie arbeiten mit einer Vorschauversion des .NET Core SDK. Sie können die SDK-Version über eine Datei \"global.json\" im aktuellen Projekt definieren. Weitere Informationen finden Sie unter https://go.microsoft.com/fwlink/?linkid=869452.\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(52,5): error MSB6006: \"csc.exe\" wurde mit dem Code -2146232797 beendet.\r\n1>Die Erstellung des Projekts \"TestCsConsole.csproj\" ist abgeschlossen -- FEHLER.\r\n========== Erstellen: 0 erfolgreich, 1 fehlerhaft, 0 aktuell, 0 übersprungen ==========\r\n```\r\n\r\n# Example program\r\n\r\n## Program.cs:\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TestCsConsole\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            await foreach (var num in GetNumbersAsync())\r\n            {\r\n                Console.WriteLine(num);\r\n            }\r\n        }\r\n\r\n        private static async IAsyncEnumerable<int> GetNumbersAsync()\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableReferenceTypes>true</NullableReferenceTypes>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n"},{"Id":"8752440230","Type":"PullRequestEvent","CreatedAt":"2018-12-14T03:03:24","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31741","RelatedDescription":"Merged pull request \"Use Equals to compare array types in attributes\" (#31741) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/31740"},{"Id":"8752440219","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:03:24","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31740","RelatedDescription":"Closed issue \"Nullable and attributes with array args don't work\" (#31740) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.11.0-beta2-63529-05\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the following project in the IDE, observe two errors.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableReferenceTypes>true</NullableReferenceTypes>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Compilers\" Version=\"2.11.0-beta2-63529-05\" PrivateAssets=\"All\" /> \r\n    <PackageReference Include=\"microsoft.visualstudio.shell.15.0\" Version=\"16.0.28316-pre\" />\r\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```c#\r\nusing System;\r\nusing Microsoft.VisualStudio.Shell;\r\nusing Xunit;\r\n\r\n[ProvideUIContextRule(ActivationContextGuid,\r\n    \"Load Managed Project Package\",\r\n\"dotnetcore\",\r\nnew string[] { \"dotnetcore\" },\r\nnew string[] { \"SolutionHasProjectCapability:.NET & CPS\" }\r\n)]\r\npublic class Program\r\n{\r\n    public const string ActivationContextGuid = \"\";\r\n\r\n    [Theory]\r\n    [InlineData(new object[] { new string[] { \"Hi\" } })]\r\n    public void Main(string[] args)\r\n    {\r\n        Assert.NotEmpty(args);\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nCompiles fine\r\n\r\n**Actual Behavior**:\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0182\tAn attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type\tConsoleApp4\tC:\\Users\\kevinpi\\source\\repos\\ConsoleApp4\\ConsoleApp4\\Program.cs\t5\tActive\r\nError\txUnit1010\tThe value is not convertible to the method parameter 'args' of type 'string[]'.\tConsoleApp4\tC:\\Users\\kevinpi\\source\\repos\\ConsoleApp4\\ConsoleApp4\\Program.cs\t16\tActive\r\n"},{"Id":"8752196354","Type":"IssuesEvent","CreatedAt":"2018-12-14T01:45:01","Actor":"NickCraver","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31784","RelatedDescription":"Opened issue \"Convert to LINQ (call form) generates extra .Select() overhead\" (#31784) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 2019 Preview 1\r\n\r\nRelated to #31780. An example of this in action:\r\n![image](https://user-images.githubusercontent.com/454813/49978116-ffc0f800-ff16-11e8-935e-21542ab1b8c0.png)\r\n\r\n**Steps to Reproduce**:\r\n```#\r\n// Boilerplate\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\n```\r\n\r\n1. Enter the following code:\r\n```c#\r\nforeach (var item in _items)\r\n{\r\n    if (item.Length < 3)\r\n    {\r\n        yield return item;\r\n    }\r\n}\r\n```\r\n2. Check suggestions and select \"Convert to LINQ (call form)\r\n\r\n**Expected Behavior**:\r\nGenerated code would be:\r\n```c#\r\n_items.Where(item => item.Length < 3).Consume(consumer);\r\n```\r\n\r\n**Actual Behavior**:\r\nGenerated code is:\r\n```c#\r\n_items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n```\r\n\r\nIt would seen the `.Select(...)` is part of an always-generated formula, but it could be better here. There's overhead involved in the call - so can we avoid that overhead in the generated code?\r\n\r\nSample benchmarks:\r\n```c#\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\nprivate readonly Consumer consumer = new Consumer();\r\n\r\n[Benchmark(Description = \"foreach\")]\r\npublic void ForEach()\r\n{\r\n    IEnumerable<string> Inner()\r\n    {\r\n        foreach (var item in _items)\r\n        {\r\n            if (item.Length < 3)\r\n            {\r\n                yield return item;\r\n            }\r\n        }\r\n    }\r\n    Inner().Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form)\")]\r\npublic void LINQCallForm()\r\n{\r\n    _items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form optimal)\")]\r\npublic void LINQCallFormOptimal()\r\n{\r\n    _items.Where(item => item.Length < 3).Consume(consumer);\r\n}\r\n```\r\n\r\n|                     Method |  Job | Runtime |     Mean |    Error |   StdDev | Allocated Memory/Op |\r\n|--------------------------- |----- |-------- |---------:|---------:|---------:|--------------------:|\r\n|                    foreach |  Clr |     Clr | 262.0 us | 3.138 us | 2.782 us |                60 B |\r\n|         'LINQ (call form)' |  Clr |     Clr | 401.6 us | 1.783 us | 1.580 us |               156 B |\r\n| 'LINQ (call form optimal)' |  Clr |     Clr | 363.8 us | 3.123 us | 2.769 us |                76 B |\r\n|                    foreach | Core |    Core | 233.4 us | 1.989 us | 1.861 us |                56 B |\r\n|         'LINQ (call form)' | Core |    Core | 543.7 us | 4.368 us | 4.086 us |               152 B |\r\n| 'LINQ (call form optimal)' | Core |    Core | 549.4 us | 8.623 us | 7.644 us |                72 B |\r\n\r\nNote: the performance on Core is within the margin of error and note the minimal jitter- it's always equal or faster. The allocations are always higher. [Benchmarks are in a repo here](https://github.com/NickCraver/PerfBenchmarks/blob/0b98537fd20d807ab1766a67f1417ffea47d6e4a/Benchmarks/LINQLoops.cs)\r\n\r\nTo run:\r\n```ps\r\ncd Benchmarks\r\ndotnet run -c Release -f netcoreapp2.2 -- LINQLoop\r\n```"},{"Id":"8752182503","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:40:32","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31783","RelatedDescription":"Opened pull request \"rename BoundPatternSwitchLabel to BoundSwitchLabel\" (#31783) at dotnet/roslyn","RelatedBody":"Fixes #31773"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8752185482","Type":"PullRequestEvent","CreatedAt":"2018-12-14T01:41:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6686) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8751115297","Type":"IssuesEvent","CreatedAt":"2018-12-13T21:17:04","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6685","RelatedDescription":"Opened issue \"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout\" (#6685) at dotnet/corert","RelatedBody":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). ProjectN should ensure that these types are appropriately handled before they ship so that types are laid out appropriately in memory and so that it does not become a breaking change to fix them in the future.\r\n\r\nCoreCLR is already correctly handling these types in the VM layer: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L9521"},{"Id":"8750883749","Type":"PullRequestEvent","CreatedAt":"2018-12-13T20:33:53","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Merged pull request \"Clean up CPAOT statics management per Michal's advice\" (#6683) at dotnet/corert","RelatedBody":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8750069820","Type":"PullRequestEvent","CreatedAt":"2018-12-13T18:06:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6684) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii"},{"Id":"8749692901","Type":"PullRequestEvent","CreatedAt":"2018-12-13T17:01:26","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6684) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8749309365","Type":"PullRequestEvent","CreatedAt":"2018-12-13T16:05:49","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Opened pull request \"Clean up CPAOT statics management per Michal's advice\" (#6683) at dotnet/corert","RelatedBody":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8748486678","Type":"IssuesEvent","CreatedAt":"2018-12-13T14:05:37","Actor":"kbaladurin","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6682","RelatedDescription":"Opened issue \"[CppCodeGen] Inheritance is missing in some cases\" (#6682) at dotnet/corert","RelatedBody":"Following sample compiles incorrectly:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        class A<T, U>\r\n        {\r\n\r\n        }\r\n\r\n        class C<T>\r\n        {\r\n\r\n        }\r\n\r\n        class B<T> : A<string, C<T>>\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var b = new B<string>();\r\n            Console.WriteLine(\"b = \" + b);\r\n        }\r\n    }\r\n}\r\n```\r\n`B<System.__Canon>` doesn't inherit `A`:\r\n```\r\nnamespace Hello { namespace Hello { class Program_B_1_A__System___Canon_V_ {\r\n                public:\r\n                        static MethodTable * __getMethodTable();\r\n                        static void _ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n                        static void unbox__ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n};\r\n};};\r\n```\r\n\r\nOne of the problems is that `B<System.__Canon>` is emitted before `A<System.__Canon, System.__Canon>`. So the check `_emittedTypes.Contains(nodeType.BaseType)` in `CppWriter.OutputTypeNode` returns false. Are there any guarantees that base type is emitted before type itself?\r\n\r\nThank you!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8751905936","Type":"PullRequestEvent","CreatedAt":"2018-12-14T00:15:33","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Merged pull request \"Merge release/2.2.2xx to master\" (#2746) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8751711465","Type":"IssuesEvent","CreatedAt":"2018-12-13T23:21:34","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Opened issue \"Pack as tool should not generate exe in nupkg\" (#2749) at dotnet/sdk","RelatedBody":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure"},{"Id":"8750458296","Type":"IssuesEvent","CreatedAt":"2018-12-13T19:16:53","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2725","RelatedDescription":"Closed issue \"Uninstalling may be not enough\" (#2725) at dotnet/sdk","RelatedBody":"@KathleenDollard asked me to post dotnet/docs#9412 here so here we go:\r\n\r\nHad a lot of runtimes and sdks accumulated over time on my dev machine. At some point i decided to do the cleanup and uninstalled quite a few from under appwiz.cpl (or add/remove programs). Unfortunately after running `dotnet --list-sdks` or `dotnet --list-runtimes` i still saw those which were uninstalled... Interestingly enough i discovered that installers have left a lot of empty dirs under `C:\\Program Files\\dotnet\\sdk`, `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All` and `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App`. Removing those made `--list-sdks` and `--list-runtimes` to no longer list uninstalled runtimes/sdks."},{"Id":"8749997404","Type":"IssuesEvent","CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748) at dotnet/sdk","RelatedBody":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm."},{"Id":"8749743699","Type":"IssuesEvent","CreatedAt":"2018-12-13T17:09:29","Actor":"nphmuller","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Opened issue \"Option to treat NETSDK warnings as errors\" (#2748) at dotnet/sdk","RelatedBody":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"279475345","IsPullRequest":true,"CreatedAt":"2018-05-18T19:10:06","Actor":"heiligerdankgesang","Number":"92","RawContent":null,"Title":"Remove contact email from system.drawing.md","State":"closed","Body":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information.","Url":"https://github.com/dotnet/foundation/pull/92","RelatedDescription":"Closed or merged PR \"Remove contact email from system.drawing.md\" (#92)"},{"Id":"285274998","IsPullRequest":true,"CreatedAt":"2018-05-18T19:09:35","Actor":"onovotny","Number":"93","RawContent":null,"Title":"Add Humanizer","State":"closed","Body":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682","Url":"https://github.com/dotnet/foundation/pull/93","RelatedDescription":"Closed or merged PR \"Add Humanizer\" (#93)"},{"Id":"286511421","IsPullRequest":true,"CreatedAt":"2018-05-18T19:07:08","Actor":"ctaggart","Number":"94","RawContent":null,"Title":"add SourceLink","State":"closed","Body":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138","Url":"https://github.com/dotnet/foundation/pull/94","RelatedDescription":"Closed or merged PR \"add SourceLink\" (#94)"},{"Id":"288415599","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:48","Actor":"bfistein","Number":"95","RawContent":null,"Title":"Fix broken logo URL","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/95","RelatedDescription":"Closed or merged PR \"Fix broken logo URL\" (#95)"},{"Id":"288749196","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:24","Actor":"galatrash","Number":"96","RawContent":null,"Title":"Adding DNN Platform.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/96","RelatedDescription":"Closed or merged PR \"Adding DNN Platform.\" (#96)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"390963737","IsPullRequest":true,"CreatedAt":"2018-12-14T04:44:00","Actor":"morganbr","Number":"21545","RawContent":null,"Title":"Add Azure DevOps signing support","State":"open","Body":"Add signing support for Azure DevOps pipelines. This uses the arcade signing step, but with custom logic to find files to sign while we're not using arcade for the rest of the build.","Url":"https://github.com/dotnet/coreclr/pull/21545","RelatedDescription":"Open PR \"Add Azure DevOps signing support\" (#21545)"},{"Id":"390931602","IsPullRequest":true,"CreatedAt":"2018-12-14T04:20:48","Actor":"Dotnet-GitSync-Bot","Number":"21540","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/coreclr/pull/21540","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#21540)"},{"Id":"390940246","IsPullRequest":false,"CreatedAt":"2018-12-14T02:27:35","Actor":"hoyosjs","Number":"21544","RawContent":null,"Title":"Debug mode code gen optimizes unused parameters away","State":"open","Body":"@dotnet/jit-contrib \r\n\r\nThis issue repros on Windows x64 with runtimes 2.1.6, 2.2.0, and 3.0.0 preview. (SDK 2.1.502, 2.2.101, 3.0.0\r\n\r\nWith the repro below, the value of `a` gets updated under the debugger once `x` gets defined, possibly as `a` has no future references and it's a value type parameter. However, this doesn't seem to happen with other parameter types. From what I can see got variables have the same address, although in debug mode I expect the JIT not to optimize unused variables (as they can potentially be inspected or used for funceval.\r\n\r\n```c#\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Test(0); \r\n        }\r\n\r\n        private static void Test(decimal a)\r\n        {\r\n            var x = a - 10;\r\n            return; // break here\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```xml\r\n<Project Sdk = \"Microsoft.NET.Sdk\" >\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21544","RelatedDescription":"Open issue \"Debug mode code gen optimizes unused parameters away\" (#21544)"},{"Id":"390933849","IsPullRequest":true,"CreatedAt":"2018-12-14T02:22:32","Actor":"morganbr","Number":"21541","RawContent":null,"Title":"Signing fixes","State":"closed","Body":"More signing testing changes going into a branch.","Url":"https://github.com/dotnet/coreclr/pull/21541","RelatedDescription":"Closed or merged PR \"Signing fixes\" (#21541)"},{"Id":"390936183","IsPullRequest":true,"CreatedAt":"2018-12-14T02:06:23","Actor":"sywhang","Number":"21543","RawContent":null,"Title":"Enable PinPlugAtGCTime event for standalone GC","State":"open","Body":"PinPlugAtGCTime event was never ported to use the new interface we have for emitting GC events. This is a fix to address that. ","Url":"https://github.com/dotnet/coreclr/pull/21543","RelatedDescription":"Open PR \"Enable PinPlugAtGCTime event for standalone GC\" (#21543)"},{"Id":"390933956","IsPullRequest":false,"CreatedAt":"2018-12-14T01:54:30","Actor":"VincentBu","Number":"21542","RawContent":null,"Title":"[x64_arm64_altjit] Test failure: JIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress1/372/\r\n\r\n**Failed tests:**\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd\r\n\r\n**Failed log:**\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd [FAIL]\r\n        \r\n        Assert failure(PID 12176 [0x00002f90], Thread: 5632 [0x1600]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```\r\n```\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd [FAIL]\r\n        \r\n        Assert failure(PID 1404 [0x0000057c], Thread: 10504 [0x2908]): Assertion failed 'simdType == getSIMDVectorType()' in 'System.Runtime.Intrinsics.Vector256`1[Double][System.Double]:WithUpper(struct):struct:this' (IL size 142)\r\n        \r\n            File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\compiler.h Line: 7653\r\n            Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n  Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21542","RelatedDescription":"Open issue \"[x64_arm64_altjit] Test failure: JIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\" (#21542)"},{"Id":"390923223","IsPullRequest":true,"CreatedAt":"2018-12-14T00:58:44","Actor":"erozenfeld","Number":"21539","RawContent":null,"Title":"WIP: Re-enable ObjectStackAllocationTests for arm32","State":"open","Body":"Using this to do some CI testing.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21539","RelatedDescription":"Open PR \"WIP: Re-enable ObjectStackAllocationTests for arm32\" (#21539)"},{"Id":"390918021","IsPullRequest":false,"CreatedAt":"2018-12-14T00:31:10","Actor":"KevinRansom","Number":"21538","RawContent":null,"Title":"RefEmit does not have the desktop api MarkSequencePoint","State":"open","Body":"In FSI we use **ILGenerator.MarkSequencePoint** to enable debugging of generated code from the in-memory generated assembly.\r\n\r\nWill this be added back, and will debugging coreclr code enable it to work correctly once it has been?\r\n\r\n// @jkotas, @dsyme, @joshfree, @steveharter \r\n","Url":"https://github.com/dotnet/coreclr/issues/21538","RelatedDescription":"Open issue \"RefEmit does not have the desktop api MarkSequencePoint\" (#21538)"},{"Id":"390915102","IsPullRequest":true,"CreatedAt":"2018-12-14T00:17:45","Actor":"morganbr","Number":"21537","RawContent":null,"Title":"Real signing test","State":"closed","Body":"Put real signing changes in a branch so we can test them","Url":"https://github.com/dotnet/coreclr/pull/21537","RelatedDescription":"Closed or merged PR \"Real signing test\" (#21537)"},{"Id":"390914074","IsPullRequest":true,"CreatedAt":"2018-12-14T00:11:17","Actor":"sbomer","Number":"21536","RawContent":null,"Title":"Publish packages in Azure DevOps official build","State":"open","Body":"This enables coreclr participation in dependency flow.","Url":"https://github.com/dotnet/coreclr/pull/21536","RelatedDescription":"Open PR \"Publish packages in Azure DevOps official build\" (#21536)"},{"Id":"390909948","IsPullRequest":true,"CreatedAt":"2018-12-13T23:52:48","Actor":"CarolEidt","Number":"21535","RawContent":null,"Title":"Update var life for multireg local","State":"open","Body":"When a multi-reg var is defined by a call, but doesn't currently reside in a register,\r\nwe must still update liveness.\r\n\r\nFix #21500","Url":"https://github.com/dotnet/coreclr/pull/21535","RelatedDescription":"Open PR \"Update var life for multireg local\" (#21535)"},{"Id":"390908753","IsPullRequest":true,"CreatedAt":"2018-12-13T23:47:34","Actor":"mikem8361","Number":"21534","RawContent":null,"Title":"Fixes issue #21484 createdump segfaults","State":"open","Body":"Issue #21484: createdump segfaults with ASP.NET app\r\n\r\nThe problem is the ClrDataModule Request faulted on a dynamic module\r\ngetting the file layout flag.\r\n\r\nFixed the Request code not get the file layout and in the crash dump\r\ncode skip any dynamic modules.\r\n\r\nIssue #21485: fix EnumProcessModules hPseudoCurrentProcess bug.","Url":"https://github.com/dotnet/coreclr/pull/21534","RelatedDescription":"Open PR \"Fixes issue #21484 createdump segfaults\" (#21534)"},{"Id":"390907343","IsPullRequest":true,"CreatedAt":"2018-12-13T23:41:23","Actor":"erozenfeld","Number":"21533","RawContent":null,"Title":"Enable object stack allocation in R2R mode.","State":"open","Body":"This change modified the importer to create GenTreeAllocObj node for\r\nbox and newobj instead of a helper call in R2R mode. ObjectAllocator phase\r\ndecides whether the object can be allocated on the stack or has to be created\r\non the heap via a helper call.\r\n\r\nTo trigger object stack allocation COMPlus_JitObjectStackAllocation has\r\nto be set (it's not set by default).","Url":"https://github.com/dotnet/coreclr/pull/21533","RelatedDescription":"Open PR \"Enable object stack allocation in R2R mode.\" (#21533)"},{"Id":"390798031","IsPullRequest":true,"CreatedAt":"2018-12-13T23:37:22","Actor":"mikem8361","Number":"21526","RawContent":null,"Title":"Fixes issue #21485 and #21484","State":"closed","Body":"Issue #21485: fix EnumProcessModules hPseudoCurrentProcess bug.\r\n\r\nAdded handle reference.\r\n\r\nIssue #21484: createdump segfaults with ASP.NET app\r\n\r\nThe problem is the ClrDataModule Request faulted on a dynamic module\r\ngetting the file layout flag.\r\n\r\nFixed the Request code not get the file layout and in the crash dump\r\ncode skip any dynamic modules.","Url":"https://github.com/dotnet/coreclr/pull/21526","RelatedDescription":"Closed or merged PR \"Fixes issue #21485 and #21484\" (#21526)"},{"Id":"390896042","IsPullRequest":true,"CreatedAt":"2018-12-13T22:55:03","Actor":"BruceForstall","Number":"21532","RawContent":null,"Title":"Fix Python 3 issues","State":"open","Body":"Fixes #21433","Url":"https://github.com/dotnet/coreclr/pull/21532","RelatedDescription":"Open PR \"Fix Python 3 issues\" (#21532)"},{"Id":"390479415","IsPullRequest":false,"CreatedAt":"2018-12-13T22:36:36","Actor":"BruceForstall","Number":"21517","RawContent":null,"Title":"Warnings in test build: CS0618: 'UnmanagedType.Struct' is obsolete","State":"closed","Body":"https://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/checked_windows_nt/10934/consoleFull\r\n\r\n```\r\nExplicitLayout.cs(20,36): warning CS0618: 'UnmanagedType.Struct' is obsolete: 'Applying UnmanagedType.Struct is unnecessary when marshalling a struct. Support for UnmanagedType.Struct when marshalling a reference type may be unavailable in future releases.' [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\JIT\\Methodical\\structs\\ExplicitLayout.csproj]\r\nExplicitLayout.cs(23,37): warning CS0618: 'UnmanagedType.Struct' is obsolete: 'Applying UnmanagedType.Struct is unnecessary when marshalling a struct. Support for UnmanagedType.Struct when marshalling a reference type may be unavailable in future releases.' [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\JIT\\Methodical\\structs\\ExplicitLayout.csproj]\r\nexplicitStruct_oddSize.cs(16,33): warning CS0618: 'UnmanagedType.VariantBool' is obsolete: 'Marshalling as VariantBool may be unavailable in future releases.' [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\Loader\\classloader\\explicitlayout\\Regressions\\298006\\explicitStruct_oddSize.csproj]\r\nmanagedcom.cs(8,17): warning CS0618: 'ClassInterfaceType.AutoDual' is obsolete: 'Support for IDispatch may be unavailable in future releases.' [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\baseservices\\exceptions\\regressions\\v4.0\\706099\\ManagedCom.csproj]\r\nStackCommitCommon.cs(17,60): warning CS0618: 'UnmanagedType.Struct' is obsolete: 'Applying UnmanagedType.Struct is unnecessary when marshalling a struct. Support for UnmanagedType.Struct when marshalling a reference type may be unavailable in future releases.' [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\baseservices\\threading\\commitstackonlyasneeded\\DefaultStackCommit.csproj]\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21517","RelatedDescription":"Closed issue \"Warnings in test build: CS0618: 'UnmanagedType.Struct' is obsolete\" (#21517)"},{"Id":"390824502","IsPullRequest":true,"CreatedAt":"2018-12-13T22:36:25","Actor":"AaronRobinsonMSFT","Number":"21529","RawContent":null,"Title":"Suppress warning of obsolete API","State":"closed","Body":"see #21517","Url":"https://github.com/dotnet/coreclr/pull/21529","RelatedDescription":"Closed or merged PR \"Suppress warning of obsolete API\" (#21529)"},{"Id":"390865927","IsPullRequest":false,"CreatedAt":"2018-12-13T21:24:14","Actor":"tannergooding","Number":"21531","RawContent":null,"Title":"Determine if we can ensure `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` are appropriately aligned for RVA statics and the stack.","State":"open","Body":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). If possible (i.e. it can be done in a \"pay for play\" manner), we should look at ensuring these types meet the alignment requirements for stack locals and RVA statics.","Url":"https://github.com/dotnet/coreclr/issues/21531","RelatedDescription":"Open issue \"Determine if we can ensure `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` are appropriately aligned for RVA statics and the stack.\" (#21531)"},{"Id":"390798987","IsPullRequest":true,"CreatedAt":"2018-12-13T21:18:30","Actor":"CarolEidt","Number":"21527","RawContent":null,"Title":"Fix HWIntrinsics ifdef","State":"closed","Body":"Fix the ifdef for creating a zero HWIntrinsics node.","Url":"https://github.com/dotnet/coreclr/pull/21527","RelatedDescription":"Closed or merged PR \"Fix HWIntrinsics ifdef\" (#21527)"},{"Id":"390853288","IsPullRequest":false,"CreatedAt":"2018-12-13T20:47:18","Actor":"erozenfeld","Number":"21530","RawContent":null,"Title":"Dead calls to R2R allocators are not deleted","State":"open","Body":"```\r\nusing System;\r\n\r\npublic class Test\r\n{\r\n    public static void Main()\r\n    {\r\n        Test test = new Test();\r\n        test.Foo();        \r\n    }\r\n\r\n    public void Foo()\r\n    {\r\n        Console.WriteLine(\"In foo\");\r\n    }\r\n}\r\n```\r\n\r\nJit codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       48B968300010FA010000 mov      rcx, 0x1FA10003068\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       E829FBFFFF           call     System.Console:WriteLine(ref)\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 29, prolog size 5 for method Test:Main()\r\n```\r\n\r\nFragile crossgen codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       488B0D00000000       mov      rcx, qword ptr [(reloc)]\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       E800000000           call     System.Console:WriteLine(ref)\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 26, prolog size 5 for method Test:Main()\r\n```\r\n\r\nR2R codegen:\r\n\r\n```\r\n; Assembly listing for method Test:Main()\r\n; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V01 tmp1         [V01,T00] (  0,  0   )     ref  ->  zero-ref    class-hnd exact \"NewObj constructor temp\"\r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M30453_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       90                   nop\r\n\r\nG_M30453_IG02:\r\n       FF1500000000         call     [CORINFO_HELP_READYTORUN_NEW]\r\n       488B0D00000000       mov      rcx, qword ptr [(reloc)]\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       FF1500000000         call     [System.Console:WriteLine(ref)]\r\n       90                   nop\r\n\r\nG_M30453_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\n; Total bytes of code 33, prolog size 5 for method Test:Main()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21530","RelatedDescription":"Open issue \"Dead calls to R2R allocators are not deleted\" (#21530)"},{"Id":"390808446","IsPullRequest":true,"CreatedAt":"2018-12-13T18:41:12","Actor":"tannergooding","Number":"21528","RawContent":null,"Title":"Simplifying the emitter handling of 4-byte encoded SSE instructions","State":"open","Body":"This is an incremental cleanup on the emitter around the 4-byte encoded SSE instruction handling.\r\n\r\nCurrently, we set `UseSSE4=true` whenever the compiler supports any ISA that requires such encoding. In the emitter, we then check this value along with some other metadata/values to determine if we need to increase the estimated bytes emitted or if we have an extra byte to actually emit.\r\n\r\nWe can simplify this logic greatly by just getting rid of `UseSSE4` and relying only on `EncodedBySSE38OrSSE3A` and `UseVexEncoding`.","Url":"https://github.com/dotnet/coreclr/pull/21528","RelatedDescription":"Open PR \"Simplifying the emitter handling of 4-byte encoded SSE instructions\" (#21528)"},{"Id":"390789976","IsPullRequest":true,"CreatedAt":"2018-12-13T17:48:50","Actor":"MichalStrehovsky","Number":"21525","RawContent":null,"Title":"Fix stack walking and reporting of default interface methods","State":"open","Body":"Default interface methods in their unresolved state don't have a generic context. The generic context is only added once the method is resolved to its implementation.\r\n\r\nFixes #16376. Fixes #16898. Fixes #21044.","Url":"https://github.com/dotnet/coreclr/pull/21525","RelatedDescription":"Open PR \"Fix stack walking and reporting of default interface methods\" (#21525)"},{"Id":"390681721","IsPullRequest":false,"CreatedAt":"2018-12-13T13:35:58","Actor":"gleocadie","Number":"21524","RawContent":null,"Title":"New Contention event with duration as a field","State":"open","Body":"Currently, when you want to measure the contention using ETW/LTTng events emitted by the Runtime, you have to get the timestamp of the Start event and subtract it to the timestamp of the Stop event.\r\n\r\nWouldn't it be simpler to have a new event (ContentionStat or a new version of ContentionEnd) which contains the duration of the contention (and other info is needed… don't have a new one in mind for now)?","Url":"https://github.com/dotnet/coreclr/issues/21524","RelatedDescription":"Open issue \"New Contention event with duration as a field\" (#21524)"},{"Id":"390528187","IsPullRequest":false,"CreatedAt":"2018-12-13T11:48:28","Actor":"skybook888","Number":"21522","RawContent":null,"Title":"createdump cored when dumping the running program with dotnet core 2.2","State":"closed","Body":"dumping current process with\r\n“/usr/share/dotnet/shared/Microsoft.NETCore.App/2.2.0/createdump -u $pid”\r\noutput：\r\n```\r\nWriting full dump to file core.mini.11457\r\nSegmentation fault\r\n```\r\nlldb with the coredump file：\r\nbacktrace\r\n```\r\n* thread #1: tid = 0, 0x00007ff78094f89a libmscordaccore.so`??? + 362, name = 'createdump', stop reason = signal SIGSEGV\r\n    frame #0: 0x00007ff78094f89a libmscordaccore.so`??? + 362\r\n    frame #1: 0x00007ff78094f9cd libmscordaccore.so`??? + 189\r\n    frame #2: 0x000000000040d244 createdump`CrashInfo::EnumerateManagedModules(IXCLRDataProcess*) + 260\r\n    frame #3: 0x000000000040c19d createdump`CrashInfo::EnumerateMemoryRegionsWithDAC(_MINIDUMP_TYPE) + 269\r\n    frame #4: 0x000000000040adf7 createdump`CrashInfo::GatherCrashInfo(_MINIDUMP_TYPE) + 663\r\n    frame #5: 0x000000000040a093 createdump`CreateDumpCommon(char const*, _MINIDUMP_TYPE, CrashInfo*) + 179\r\n    frame #6: 0x0000000000409bbe createdump`main + 606\r\n    frame #7: 0x00007ff77fc6c830 libc.so.6`__libc_start_main + 240\r\n    frame #8: 0x0000000000409899 createdump`_start + 41\r\n(lldb)\r\n```\r\ndotnet info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n### In container\r\nsame program dumped in container\r\n```\r\n* thread #1: tid = 188, 0x00007ff24d09bc43 libmscordaccore.so`ClrDataAccess::EnumWksGlobalMemoryRegions(CLRDataEnumMemoryFlags) [inlined] __DPtr<dac_heap_segment> Dereference<dac_heap_segment>(ptr=<unavailable>) + 15 at request_common.h:26, name = 'createdump', stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007ff24d09bc43 libmscordaccore.so`ClrDataAccess::EnumWksGlobalMemoryRegions(CLRDataEnumMemoryFlags) [inlined] __DPtr<dac_heap_segment> Dereference<dac_heap_segment>(ptr=<unavailable>) + 15 at request_common.h:26\r\n    frame #1: 0x00007ff24d09bc34 libmscordaccore.so`ClrDataAccess::EnumWksGlobalMemoryRegions(this=<unavailable>, flags=<unavailable>) + 68 at request.cpp:3808\r\n    frame #2: 0x00007ff24d06a557 libmscordaccore.so`ClrDataAccess::EnumMemCLRHeapCrticalStatic(this=0x0000000000cd17b0, flags=CLRDATA_ENUM_MEM_HEAP) + 391 at enummem.cpp:170\r\n    frame #3: 0x00007ff24d06f9ae libmscordaccore.so`ClrDataAccess::EnumMemoryRegionsWorkerHeap(this=0x0000000000cd17b0, flags=CLRDATA_ENUM_MEM_HEAP) + 270 at enummem.cpp:350\r\n    frame #4: 0x00007ff24d0774ce libmscordaccore.so`ClrDataAccess::EnumMemoryRegionsWrapper(this=0x0000000000cd17b0, flags=CLRDATA_ENUM_MEM_HEAP) + 126\r\nat enummem.cpp:1851\r\n    frame #5: 0x00007ff24d077739 libmscordaccore.so`ClrDataAccess::EnumMemoryRegions(this=0x0000000000cd17b0, callback=<unavailable>, miniDumpFlags=512, flags=<unavailable>) + 233 at enummem.cpp:1939\r\n    frame #6: 0x000000000040c16b createdump`CrashInfo::EnumerateMemoryRegionsWithDAC(this=0x0000000000c6d4c0, minidumpType=MiniDumpWithPrivateReadWriteMemory) + 219 at crashinfo.cpp:643\r\n    frame #7: 0x000000000040adf7 createdump`CrashInfo::GatherCrashInfo(this=<unavailable>, minidumpType=<unavailable>) + 663 at crashinfo.cpp:209\r\n    frame #8: 0x000000000040a093 createdump`CreateDumpCommon(dumpPathTemplate=\"core.mini.%d\", minidumpType=MiniDumpWithPrivateReadWriteMemory, crashInfo=0x0000000000c6d4c0) + 179 at createdump.cpp:47\r\n    frame #9: 0x0000000000409bbe createdump`main(argc=<unavailable>, argv=<unavailable>) + 606 at main.cpp:81\r\n    frame #10: 0x00007ff24c3f62e1 libc.so.6`__libc_start_main + 241\r\n    frame #11: 0x0000000000409899 createdump`_start + 41\r\n```\r\ndotnet info in container\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.100/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21522","RelatedDescription":"Closed issue \"createdump cored when dumping the running program with dotnet core 2.2\" (#21522)"},{"Id":"390542115","IsPullRequest":true,"CreatedAt":"2018-12-13T06:54:38","Actor":"Maoni0","Number":"21523","RawContent":null,"Title":"Porting desktop changes to core","State":"open","Body":"this includes the following -\r\n\r\n+alloc lock split into SOH and LOH\r\n+provisional mode to fix too many gen2 GCs triggered in low mem situation when the heap has heavy pinning fragmentation\r\n+better free list usage\r\n+premature OOM fixes\r\n+3 new configs: GCHeapAffinitizeMask, GCHighMemPercent, GCLOHThreshold (will be documented)\r\n\r\nI still have one perf todo for the YieldProcessor scaling factor that I have to test as the desktop and coreclr implementations are different. I'll get to it tomorrow.","Url":"https://github.com/dotnet/coreclr/pull/21523","RelatedDescription":"Open PR \"Porting desktop changes to core\" (#21523)"},{"Id":"390485366","IsPullRequest":true,"CreatedAt":"2018-12-13T04:29:48","Actor":"stephentoub","Number":"21520","RawContent":null,"Title":"Suppress unused warnings for events raised by the VM","State":"closed","Body":"Fixes https://github.com/dotnet/coreclr/issues/21516\r\ncc: @jkotas, @BruceForstall ","Url":"https://github.com/dotnet/coreclr/pull/21520","RelatedDescription":"Closed or merged PR \"Suppress unused warnings for events raised by the VM\" (#21520)"},{"Id":"390476478","IsPullRequest":false,"CreatedAt":"2018-12-13T04:29:48","Actor":"BruceForstall","Number":"21516","RawContent":null,"Title":"Warnings in System.Private.CoreLib build","State":"closed","Body":"There are new warnings in the System.Private.CoreLib build:\r\n```\r\n07:07:14 src\\System\\AppContext.cs(81,60): warning CS0067: The event 'AppContext.UnhandledException' is never used [D:\\j\\workspace\\checked_windo---14fb495b\\src\\System.Private.CoreLib\\System.Private.CoreLib.csproj]\r\n07:07:14 src\\System\\AppContext.cs(83,80): warning CS0067: The event 'AppContext.FirstChanceException' is never used [D:\\j\\workspace\\checked_windo---14fb495b\\src\\System.Private.CoreLib\\System.Private.CoreLib.csproj]\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/checked_windows_nt/10934/consoleFull\r\n\r\nThis appears to be due to https://github.com/dotnet/coreclr/pull/21460\r\n","Url":"https://github.com/dotnet/coreclr/issues/21516","RelatedDescription":"Closed issue \"Warnings in System.Private.CoreLib build\" (#21516)"},{"Id":"390498398","IsPullRequest":false,"CreatedAt":"2018-12-13T03:04:24","Actor":"yanzhenms","Number":"21521","RawContent":null,"Title":"[Android] Segmentation fault in libcoreclr.so","State":"open","Body":"Hi, after followed this tutorial https://github.com/qmfrederik/coredroid, I got a lot of binaries successfull. I pushed them to Android /data/local/tmp/ and try to run a HelloWorld sample. It doesn't show \"Hello, world\" but gives me a \"segmentation fault in libcoreclr.so\". \r\n\r\n```\r\nHWNXT:/data/local/tmp/hello1 $ ../dotnet/corerun  hello\r\nWARNING: linker: /data/local/tmp/dotnet/libcoreclr.so: unused DT entry: type 0xf arg 0xeba\r\nSegmentation fault\r\n```\r\n\r\nAre there pre-built binaries or docker for Android cross built so I can save some time?\r\n\r\nThanks~","Url":"https://github.com/dotnet/coreclr/issues/21521","RelatedDescription":"Open issue \"[Android] Segmentation fault in libcoreclr.so\" (#21521)"},{"Id":"390480387","IsPullRequest":false,"CreatedAt":"2018-12-13T01:30:56","Actor":"BruceForstall","Number":"21519","RawContent":null,"Title":"build warning CS0184: The given expression is never of the provided ('I<object>') type","State":"open","Body":"Build warning:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/checked_windows_nt/10934/consoleFull\r\n\r\n```\r\ntests.cs(90,16): warning CS0184: The given expression is never of the provided ('I<object>') type [D:\\j\\workspace\\checked_windo---14fb495b\\tests\\src\\JIT\\opt\\Casts\\tests.csproj]\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21519","RelatedDescription":"Open issue \"build warning CS0184: The given expression is never of the provided ('I<object>') type\" (#21519)"},{"Id":"390479964","IsPullRequest":true,"CreatedAt":"2018-12-13T01:28:39","Actor":"AndyAyersMS","Number":"21518","RawContent":null,"Title":"JIT: align Tier1 methods at 16 byte boundaries for xarch [WIP]","State":"open","Body":"Align Tier1, small and IBC hot methods to 16 byte boundaries for x64 and x86.\r\nConsensus from various folks I polled was that this isn't as helpful for arm\r\narchitectures, so for now this is xarch only.\r\n\r\nThis ensures that instruction prefetch pulls in as much code as possible.\r\n\r\nIt should also improve performance stability in some benchmarks, as well as\r\nopening the door for possible loop-top aligment padding.\r\n\r\nResolves #16873.","Url":"https://github.com/dotnet/coreclr/pull/21518","RelatedDescription":"Open PR \"JIT: align Tier1 methods at 16 byte boundaries for xarch [WIP]\" (#21518)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"390923155","IsPullRequest":false,"CreatedAt":"2018-12-14T00:58:22","Actor":"wli3","Number":"10469","RawContent":null,"Title":"Extra new line when tool restore is successful","State":"open","Body":"```\r\nλ dotnet tool restore\r\nTool 't-rex' (version '1.0.109') was restored. Available commands: t-rex\r\nTool 'dotnetsay' (version '2.1.4') was restored. Available commands: dotnetsay\r\n\r\n\r\nRestore was successful.\r\n```","Url":"https://github.com/dotnet/cli/issues/10469","RelatedDescription":"Open issue \"Extra new line when tool restore is successful\" (#10469)"},{"Id":"389061467","IsPullRequest":false,"CreatedAt":"2018-12-13T20:47:16","Actor":"ConnorChristie","Number":"10458","RawContent":null,"Title":"Adding dotnet tool from custom source doesn't work on Ubuntu","State":"closed","Body":"## Steps to reproduce\r\nTry installing the following tool from myget pre-release source:\r\n```\r\ndotnet tool install -g Nethereum.Generator.Console --version 1.0.2-CI-20181129-133640 --add-source https://www.myget.org/F/nethereum/api/v3/index.json\r\n```\r\n\r\n## Expected  behavior\r\n```\r\nYou can invoke the tool using the following command: Nethereum.Generator.Console\r\nTool 'nethereum.generator.console' (version '1.0.2-ci-20181129-133640') was successfully installed.\r\n```\r\n\r\n## Actual behavior\r\n```\r\nThe settings file in the tool's NuGet package is invalid: Failed to retrieve tool configuration: Could not find a part of the path '/home/vsts/.dotnet/tools/.store/nethereum.generator.console/1.0.2-ci-20181129-133640/nethereum.generator.console/1.0.2-CI-20181129-133640/tools/netcoreapp2.1/any/DotnetToolSettings.xml'.\r\nTool 'nethereum.generator.console' failed to install. Please contact the tool author for assistance.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n2018-12-09T20:35:08.3469399Z .NET Core SDK (reflecting any global.json):\r\n2018-12-09T20:35:08.3470064Z  Version:   2.1.500\r\n2018-12-09T20:35:08.3476095Z  Commit:    b68b931422\r\n2018-12-09T20:35:08.3476541Z \r\n2018-12-09T20:35:08.3476837Z Runtime Environment:\r\n2018-12-09T20:35:08.3477067Z  OS Name:     ubuntu\r\n2018-12-09T20:35:08.3477314Z  OS Version:  16.04\r\n2018-12-09T20:35:08.3477560Z  OS Platform: Linux\r\n2018-12-09T20:35:08.6814327Z  RID:         ubuntu.16.04-x64\r\n2018-12-09T20:35:08.7161135Z  Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n2018-12-09T20:35:08.7208165Z \r\n2018-12-09T20:35:08.7208445Z Host (useful for support):\r\n2018-12-09T20:35:08.7208576Z   Version: 2.1.6\r\n2018-12-09T20:35:08.7208682Z   Commit:  3f4f8eebd8\r\n2018-12-09T20:35:08.7208828Z \r\n2018-12-09T20:35:08.7208939Z .NET Core SDKs installed:\r\n2018-12-09T20:35:08.7209048Z   1.0.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209249Z   1.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209363Z   1.1.5 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209467Z   1.1.7 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209605Z   1.1.8 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209717Z   1.1.9 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209819Z   1.1.10 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7209979Z   1.1.11 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210092Z   2.0.0 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210194Z   2.0.3 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210295Z   2.1.2 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210573Z   2.1.4 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210733Z   2.1.100 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210769Z   2.1.101 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210859Z   2.1.102 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210934Z   2.1.103 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7210966Z   2.1.104 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211014Z   2.1.105 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211045Z   2.1.200 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211123Z   2.1.201 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211156Z   2.1.202 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211185Z   2.1.300 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211214Z   2.1.301 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211296Z   2.1.302 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211326Z   2.1.400 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211355Z   2.1.401 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211603Z   2.1.402 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211640Z   2.1.403 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211676Z   2.1.500 [/usr/share/dotnet/sdk]\r\n2018-12-09T20:35:08.7211700Z \r\n2018-12-09T20:35:08.7211738Z .NET Core runtimes installed:\r\n2018-12-09T20:35:08.7211824Z   Microsoft.AspNetCore.All 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7211867Z   Microsoft.AspNetCore.All 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212087Z   Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212174Z   Microsoft.AspNetCore.All 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212215Z   Microsoft.AspNetCore.All 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212365Z   Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212451Z   Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n2018-12-09T20:35:08.7212491Z   Microsoft.AspNetCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212529Z   Microsoft.AspNetCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212609Z   Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212650Z   Microsoft.AspNetCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212697Z   Microsoft.AspNetCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212736Z   Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212819Z   Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n2018-12-09T20:35:08.7212864Z   Microsoft.NETCore.App 1.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212904Z   Microsoft.NETCore.App 1.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7212990Z   Microsoft.NETCore.App 1.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213029Z   Microsoft.NETCore.App 1.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213067Z   Microsoft.NETCore.App 1.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213147Z   Microsoft.NETCore.App 1.0.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213196Z   Microsoft.NETCore.App 1.0.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213234Z   Microsoft.NETCore.App 1.0.13 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213311Z   Microsoft.NETCore.App 1.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213351Z   Microsoft.NETCore.App 1.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213397Z   Microsoft.NETCore.App 1.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213507Z   Microsoft.NETCore.App 1.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213547Z   Microsoft.NETCore.App 1.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213585Z   Microsoft.NETCore.App 1.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213624Z   Microsoft.NETCore.App 1.1.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213706Z   Microsoft.NETCore.App 1.1.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213753Z   Microsoft.NETCore.App 2.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213791Z   Microsoft.NETCore.App 2.0.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213873Z   Microsoft.NETCore.App 2.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213920Z   Microsoft.NETCore.App 2.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7213957Z   Microsoft.NETCore.App 2.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214043Z   Microsoft.NETCore.App 2.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214083Z   Microsoft.NETCore.App 2.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214122Z   Microsoft.NETCore.App 2.1.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214203Z   Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214365Z   Microsoft.NETCore.App 2.1.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214404Z   Microsoft.NETCore.App 2.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214443Z   Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n2018-12-09T20:35:08.7214527Z   Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\nThis is an Azure hosted Ubuntu-16.04 environment.\r\n\r\nI am only having this problem on Ubuntu 16.04, otherwise it works on macOS Mojave and Windows 10 as expected.","Url":"https://github.com/dotnet/cli/issues/10458","RelatedDescription":"Closed issue \"Adding dotnet tool from custom source doesn't work on Ubuntu\" (#10458)"},{"Id":"390254603","IsPullRequest":false,"CreatedAt":"2018-12-13T15:05:55","Actor":"nguerrera","Number":"10466","RawContent":null,"Title":"Issues compiling after installing SDK 2.2","State":"closed","Body":"_From @SkinnySackboy on December 11, 2018 15:45_\n\nHi,\r\n\r\nHaving already been using .NET Core 2.0 and 2.1 in production already, earlier this week we decided to start upgrading to .NET Core 2.2. On our machines (i.e. in Visual Studio), so far so good - we installed the SDK without having modified any projects and everything still works as it always used to.\r\n\r\nOn our TeamCity agents, we decided to do the same as we have in the past, i.e. to install the .NET Core 2.2 SDK. This is where the interesting problems start. Suddenly, our existing solutions which contain a .NET Core 2.1 project (event unit tests) started failing with the following error:\r\n\r\n**error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)**\r\n\r\nThis does not happen from Visual Studio - it only seems to happen when using the dotnet CLI. It gets even more interesting as if we first compile from Visual Studio and subsequently run dotnet build from the command line, it all works. If however you delete the bin/obj folders, dotnet build from the command line fails with the previous error.\r\n\r\nHas anyone else come across this issue, as I was not expecting the mere presence of the 2.2 SDK to suddenly cause all previous builds still targeting .NET Core 2.1 to start failing?\r\n\r\nThanks in advance\n\n_Copied from original issue: dotnet/core#2130_","Url":"https://github.com/dotnet/cli/issues/10466","RelatedDescription":"Closed issue \"Issues compiling after installing SDK 2.2\" (#10466)"},{"Id":"390362977","IsPullRequest":false,"CreatedAt":"2018-12-12T22:51:13","Actor":"ap0llo","Number":"10467","RawContent":null,"Title":"dotnet pack: Cannot change PackageId based on TFM","State":"closed","Body":"## Scenario\r\n\r\nI'm tyring to package up a console application / tool targeting both `netcoreapp2.1` and `net461`. For .NET Core I want to provide the tool as global tool, for .NET framework, the tool should be packaged as a \"tools\" package (a plain `.exe` inside the `tools` directory). I'd like to create two packages, one for each target platform.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a new console application: `dotnet new console`\r\n2. Add `net461` as additional target framework\r\n3. Set `PackageId` using a conditional `PropertyGroup`\r\n4. Run `dotnet build` and `dotnet pack`\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net461;netcoreapp2.1</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net461' \">\r\n    <IsTool>true</IsTool>    \r\n    <PackageId>Package_MultiTargeted_NetFramework</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.1' \">\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackageId>Package_MultiTargeted_NetCore</PackageId>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n(Full repo, including a Framework-only and core-only tool can be found [here](https://github.com/ap0llo/repro-dotnet-pack-targetframework-dependent-packageid))\r\n\r\n\r\n## Expected  behavior\r\n`dotnet pack` creates two NuGet packages:\r\n\r\n- one package named `Package_MultiTargeted_NetFramework` containing only the .NET Framework exe inside the `tools` folder\r\n- a second package named `Package_MultiTargeted_NetCore` containing the .NET Core global tool (inside the `tools\\netcoreapp2.1\\any` folder)\r\n\r\n## Actual behavior\r\n\r\nA single package named `MultiTargetedTool` is created, containing \r\n\r\n- the .NET Core global tool\r\n- A `net461` build of the project inside the `lib` folder\r\n- A `netcoreapp2.1` build of the proejct inside the `lib` folder\r\n\r\n![image](https://user-images.githubusercontent.com/2821818/49891736-8c9c8080-fe47-11e8-847e-e775f3d6231e.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10467","RelatedDescription":"Closed issue \"dotnet pack: Cannot change PackageId based on TFM\" (#10467)"},{"Id":"390396402","IsPullRequest":false,"CreatedAt":"2018-12-12T20:29:57","Actor":"dagood","Number":"10468","RawContent":null,"Title":"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'","State":"open","Body":"From https://github.com/dotnet/source-build/issues/926#issuecomment-446345298:\r\n\r\n> [@tmds] 'requires a runtime that is not installed' should be added to 'This failure may have been caused by'.\r\n\r\nhttps://github.com/dotnet/cli/blob/22cbfcb49bd9a38292ac6f66a14158b426daefdb/src/dotnet/commands/dotnet-tool/install/LocalizableStrings.resx#L182-L189\r\n\r\nFailure context:\r\n\r\n```\r\n$ dotnet tool install -g dotnet-dev-certs\r\nerror NU1202: Package dotnet-dev-certs 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any. Package dotnet-dev-certs 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2) / any\r\nThe tool package could not be restored.\r\nTool 'dotnet-dev-certs' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\n/cc @wli3 ","Url":"https://github.com/dotnet/cli/issues/10468","RelatedDescription":"Open issue \"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'\" (#10468)"},{"Id":"390037621","IsPullRequest":false,"CreatedAt":"2018-12-12T18:13:44","Actor":"xavierjohn","Number":"10465","RawContent":null,"Title":"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work","State":"closed","Body":"Trying to publish a .net core exe without the runtime using the following command\r\n\r\n## Steps to reproduce\r\ndotnet publish --configuration Release --runtime win7-x64 --self-contained false --output c:\\outputfolder\r\n\r\n## Expected  behavior\r\nProduces a {application}.exe\r\n\r\n## Actual behavior\r\nProduces apphost.exe that does not work.\r\n\r\nI can run the program using\r\ndotnet.exe application.dll\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17134\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\nVersion: 2.1.6\r\nCommit: 3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10465","RelatedDescription":"Closed issue \"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work\" (#10465)"},{"Id":"390022633","IsPullRequest":false,"CreatedAt":"2018-12-12T05:52:07","Actor":"donhuvy","Number":"10464","RawContent":null,"Title":"No webpage was found for the web address: https://localhost:5001/","State":"closed","Body":"## Steps to reproduce\r\nUse Windows 10 Pro, Visual studio 2019 Preview\r\n```\r\ndotnet new webapi\r\ndotnet restore\r\ndotnet run\r\n```\r\n\r\n## Expected  behavior\r\nhttps://localhost:5001/ Show webpage\r\n\r\n## Actual behavior\r\nhttps://localhost:5001/ Error\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nC:\\Users\\donhuvy>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.600-preview-009426\r\n Commit:    48b4f2105d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009426\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n<img width=\"960\" alt=\"dotnet1\" src=\"https://user-images.githubusercontent.com/1328316/49840337-8d9cc600-fde5-11e8-9969-957e01a3e58a.png\">\r\n<img width=\"800\" alt=\"dotnet2\" src=\"https://user-images.githubusercontent.com/1328316/49840338-8e355c80-fde5-11e8-8c46-d314285e44c2.png\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10464","RelatedDescription":"Closed issue \"No webpage was found for the web address: https://localhost:5001/\" (#10464)"},{"Id":"389996026","IsPullRequest":true,"CreatedAt":"2018-12-11T23:16:47","Actor":"jainaashish","Number":"10463","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli","Url":"https://github.com/dotnet/cli/pull/10463","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10463)"},{"Id":"389836381","IsPullRequest":true,"CreatedAt":"2018-12-11T17:38:13","Actor":"nugetlurker","Number":"10462","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10462","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10462)"},{"Id":"388965434","IsPullRequest":false,"CreatedAt":"2018-12-11T17:35:59","Actor":"taori","Number":"10454","RawContent":null,"Title":"CS0118 if folder name ends with \"Application\"","State":"closed","Body":"## Steps to reproduce\r\n- create folder like Company.Desktop.Application\r\n- enter folder\r\n- dotnet new wpf\r\n- dotnet run\r\n\r\n## Expected  behavior\r\nApplication runs\r\n\r\n## Actual behavior\r\nApplication can't compile because of CS0118\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ndotnet --info\r\n\r\nMicrosoft Windows [Version 6.3.9600]\r\n(c) 2013 Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10454","RelatedDescription":"Closed issue \"CS0118 if folder name ends with \"Application\"\" (#10454)"},{"Id":"389836363","IsPullRequest":true,"CreatedAt":"2018-12-11T16:05:45","Actor":"nugetlurker","Number":"10461","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5707 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10461","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5707 into cli\" (#10461)"},{"Id":"389754456","IsPullRequest":true,"CreatedAt":"2018-12-11T13:03:33","Actor":"dotnet-maestro[bot]","Number":"10460","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10460","RelatedDescription":"Open PR \"Update dependency files\" (#10460)"},{"Id":"389447196","IsPullRequest":false,"CreatedAt":"2018-12-10T19:17:18","Actor":"seancpeters","Number":"10459","RawContent":null,"Title":"dotnet tool aspnet-codegenerator looks for executable at wrong path","State":"open","Body":"_From @tbureck on December 8, 2018 23:16_\n\nI'm currently following [this guide](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=netcore-cli#scaffold-identity-into-an-empty-project) in order to scaffold Identity in my existing ASP.NET Core project. When trying to run the scaffolder command with the help option, though, I'm getting this error message:\r\n\r\n```\r\n> dotnet aspnet-codegenerator --help\r\nThe application to execute does not exist: 'C:\\Users\\Tim\\.dotnet\\tools\\.store\\dotnet-aspnet-codegenerator\\2.2.0-rtm-35687\\dotnet-aspnet-codegener\r\nator\\2.2.0-rtm-35687\\tools\\netcoreapp2.1\\any\\dotnet-aspnet-codegenerator.dll'.\r\n```\r\n\r\nI've checked the .dotnet\\tools\\.store directory and the tool seems to be installed correctly. BUT, it is installed in a `2.2.0` directory instead of the `2.2.0-rtm-35687` directory, which dotnet tool is looking in.\r\n\r\nI've opened [a thread on Stackoverflow](https://stackoverflow.com/questions/53676499/dotnet-tool-aspnet-codegenerator-looks-for-executable-at-wrong-path) as well and someone else seems to have the same issue, which is why I'm creating this issue.\r\n\r\nWhy is it that `dotnet tool` is looking in the `2.2.0-rtm-35687` sub directory instead of the `2.2.0` where it is actually installed?\r\n\r\nEdit: my dotnet version is `2.2.100`\n\n_Copied from original issue: aspnet/Scaffolding#932_","Url":"https://github.com/dotnet/cli/issues/10459","RelatedDescription":"Open issue \"dotnet tool aspnet-codegenerator looks for executable at wrong path\" (#10459)"},{"Id":"389058322","IsPullRequest":false,"CreatedAt":"2018-12-10T17:28:27","Actor":"taori","Number":"10457","RawContent":null,"Title":"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1","State":"closed","Body":"I was able to create a control lib using dotnet new classlib, however this project lacks some attributes for wpf to bind to it properly. + at this stage it seems the targetframework has to be locked to .net461+ in order to reference PresentationCore and other relevant assemblies.\r\n\r\nIdeally that option should exist before netcore 3 is RTM","Url":"https://github.com/dotnet/cli/issues/10457","RelatedDescription":"Closed issue \"Feature request: dotnet new wpfcontrollib 3.0.0 Preview 1\" (#10457)"},{"Id":"388920339","IsPullRequest":true,"CreatedAt":"2018-12-09T18:56:21","Actor":"dotnet-maestro[bot]","Number":"10453","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10453","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10453)"},{"Id":"389041633","IsPullRequest":false,"CreatedAt":"2018-12-09T18:47:38","Actor":"rrnewton","Number":"10456","RawContent":null,"Title":"Add Warning? dotnet publish --output of multiple projects corrupts dependencies (DLL hell)","State":"closed","Body":"## Steps to reproduce\r\n\r\nBuild two projects with the same output:\r\n\r\n```\r\ndotnet publish --output <absolutepath> A.csproj\r\ndotnet publish --output <absolutepath> B.csproj\r\n```\r\n\r\n## Expected  behavior\r\n\r\nErrors when the A and B projects attempt to copy conflicting versions of some dependency (`Foo.dll`).\r\n\r\nOR \r\n\r\nTells us that we're being very naughty and not to ever publish two projects to the same directory.\r\n\r\n## Actual behavior\r\n\r\nB's version of `Foo.dll` clobbers the second.  Executables installed by A can run with undefined behavior because they pick up the wrong version of this library (reviving DLL hell).\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nWe're releasing a project that is testing on Mac, Windows, Linux and inside Docker containers.  This is consistent across all the versions of the .NET core SDK we're using (oldest 2.1.202 under Docker, newest is 2.1.500 on Azure DevOps Pipelines hosts).  Here's one example from an ADO run:\r\n\r\n```\r\n .NET Core SDK (reflecting any global.json):\r\nVersion:   2.1.500\r\nCommit:    b68b931422\r\nRuntime Environment:\r\nOS Name:     ubuntu\r\nOS Version:  16.04\r\nOS Platform: Linux\r\nRID:         ubuntu.16.04-x64\r\nBase Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\nVersion: 2.1.6\r\nCommit:  3f4f8eebd8\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10456","RelatedDescription":"Closed issue \"Add Warning? dotnet publish --output of multiple projects corrupts dependencies (DLL hell)\" (#10456)"},{"Id":"389037832","IsPullRequest":false,"CreatedAt":"2018-12-09T18:38:21","Actor":"balbarak","Number":"10455","RawContent":null,"Title":"Add command line to upgrade dotnet runtime and SDK","State":"closed","Body":"### Ex:\r\n\r\ndotnet upgrade {version-no}\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10455","RelatedDescription":"Closed issue \"Add command line to upgrade dotnet runtime and SDK\" (#10455)"},{"Id":"388823399","IsPullRequest":false,"CreatedAt":"2018-12-08T17:16:05","Actor":"dsplaisted","Number":"10450","RawContent":null,"Title":"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview","State":"closed","Body":"@pgolebiowski commented on [Mon Nov 26 2018](https://github.com/dotnet/core/issues/2075)\n\n## Steps to reproduce\r\n\r\n1. Go to the page with [daily builds of .NET Core 3.0](https://github.com/dotnet/core-sdk/blob/master/README.md#installers-and-binaries).\r\n2. Download the macOS installer for *Master (3.0.x Runtime)*.\r\n3. Install.\r\n4. Check `dotnet` version and info:\r\n\r\n```bash\r\n↪ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009784\r\n Commit:    d86a1816c4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009784/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [/usr/local/share/dotnet/sdk]\r\n  2.1.402 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009784 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18572-0018 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n5. Create a new console application:\r\n\r\n```bash\r\ndotnet new console -o Test\r\n```\r\n\r\nwhich by default contains:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n6. Hit `dotnet run`.\r\n\r\n## Error\r\n\r\n```\r\n↪ dotnet run\r\n/usr/local/share/dotnet/sdk/2.1.402/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [/Users/pgolebio/patryk/home/apps/hyperflow/src/Test/Test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Question\r\n\r\nHow to successfully run this console application? Why does it use 2.1.402 even though when asked for `dotnet --version`, it says `3.0.100-preview-009784`?\n\n---\n\n@karelz commented on [Tue Nov 27 2018](https://github.com/dotnet/core/issues/2075#issuecomment-442176157)\n\n@nguerrera @dsplaisted can you please help route this issue?\n\n---\n\n@pgolebiowski commented on [Fri Dec 07 2018](https://github.com/dotnet/core/issues/2075#issuecomment-445191533)\n\nHey guys, do you have an idea for how to proceed? @karelz @nguerrera @dsplaisted \n\n","Url":"https://github.com/dotnet/cli/issues/10450","RelatedDescription":"Closed issue \"Error when trying to`dotnet run` and using the latest build of .NET Core 3.0 preview\" (#10450)"},{"Id":"388884055","IsPullRequest":false,"CreatedAt":"2018-12-08T04:26:44","Actor":"igormcoelho","Number":"10452","RawContent":null,"Title":"error MSB4018: System.InvalidOperationException: PE image does not have metadata.","State":"open","Body":"## Steps to reproduce\r\nFailure is happening when I try to `dotnet restore` a `.csproj` with the following packages (inside a docker container):\r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FluentAssertions\" Version=\"4.19.4\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\r\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Moq\" Version=\"4.7.63\" />\r\n    <PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit\" Version=\"1.3.10\" />\r\n    <PackageReference Include=\"Akka.TestKit.Xunit2\" Version=\"1.3.10\" />\r\n  </ItemGroup>\r\n```\r\nIf I remove package `<PackageReference Include=\"Akka.MultiNodeTestRunner\" Version=\"1.3.10\" />` the process goes correctly, so it must be something related to it.\r\n\r\n## Expected  behavior\r\n\r\nSome packages download normally, and it finishes with this error:\r\n`error MSB4018: System.InvalidOperationException: PE image does not have metadata.` (followed by many other errors.\r\nAnother error happens just before this one: `/usr/share/dotnet/sdk/2.1.200/Microsoft.Common.CurrentVersion.targets(2106,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly.`\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n(I tried with dotnet core 2.2, but the same happens)\r\n","Url":"https://github.com/dotnet/cli/issues/10452","RelatedDescription":"Open issue \"error MSB4018: System.InvalidOperationException: PE image does not have metadata.\" (#10452)"},{"Id":"388865869","IsPullRequest":false,"CreatedAt":"2018-12-08T00:55:20","Actor":"KirillOsenkov","Number":"10451","RawContent":null,"Title":"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder","State":"open","Body":"When running outside MSBuild folder there's a first-chance COMException in VSSettings.cs: Element not found (HRESULT 0x80070490).\r\n\r\nIt was introduced here:\r\nhttps://github.com/dotnet/cli/pull/9547\r\n\r\nwith the comment:\r\n```\r\nNeed try/catch around the interop here. Getting COMException when running an msbuild.exe outside of VS folder.\r\n```\r\n\r\nThis is certainly very low pri, but I'd still be curious if there's any way to work around this. Is this because Windows is looking to find the native .dll in the current directory or PATH, and doesn't find it? Wasn't there a trick to add the directory with the .dll to the PATH environment variable to solve this kind of issues?\r\n\r\nWould be nice to fix, but not very blocking or urgent.\r\n\r\nThanks.\r\n\r\nStack:\r\n```\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 41\tC#\r\n>\tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.VSSettings.VSSettings Line 25\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tMicrosoft.DotNet.MSBuildSdkResolver.dll!Microsoft.DotNet.MSBuildSdkResolver.DotNetMSBuildSdkResolver.DotNetMSBuildSdkResolver Line 38\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tmscorlib.dll!System.RuntimeType.CreateInstanceSlow Line 5430\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 193\tC#\r\n \tmscorlib.dll!System.Activator.CreateInstance Line 134\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.SdkResolution.SdkResolverLoader.LoadResolvers Line 164\tC#\r\n```","Url":"https://github.com/dotnet/cli/issues/10451","RelatedDescription":"Open issue \"Try to avoid first-chance COMException in VSSettings.cs when running outside MSBuild folder\" (#10451)"},{"Id":"388801696","IsPullRequest":true,"CreatedAt":"2018-12-07T21:25:41","Actor":"nguerrera","Number":"10449","RawContent":null,"Title":"Update roslyn","State":"closed","Body":"Matching dotnet/toolset#53 for 2.1.6xx\r\n","Url":"https://github.com/dotnet/cli/pull/10449","RelatedDescription":"Closed or merged PR \"Update roslyn\" (#10449)"},{"Id":"388646327","IsPullRequest":true,"CreatedAt":"2018-12-07T18:14:36","Actor":"dotnet-maestro[bot]","Number":"10447","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10447","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10447)"},{"Id":"388716372","IsPullRequest":false,"CreatedAt":"2018-12-07T17:30:45","Actor":"DoCode","Number":"10448","RawContent":null,"Title":"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100","State":"closed","Body":"## Steps to reproduce\r\n`dotnet restore project.proj`\r\n\r\n## Expected  behavior\r\nNuGet restore is successful.\r\n\r\n## Actual behavior\r\n```\r\nRetrying 'FindPackagesByIdAsyncCore' for source 'https://xxx.xxx.xxx/f/core-dev/api/v2/FindPackagesById()?id='xxx'&semVerLevel=2.0.0'.\r\nResponse status code does not indicate success: 401 (Unauthorized).\r\n```\r\n\r\nIt works with all version before 2.2.100!  \r\nAll other versions, also 3.x failed.","Url":"https://github.com/dotnet/cli/issues/10448","RelatedDescription":"Closed issue \"dotnet restore failed on private (authenticated) feeds on .NET SDK > v2.2.100\" (#10448)"},{"Id":"388204756","IsPullRequest":true,"CreatedAt":"2018-12-07T00:44:03","Actor":"dotnet-maestro[bot]","Number":"10444","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10444","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10444)"},{"Id":"388418998","IsPullRequest":false,"CreatedAt":"2018-12-06T22:07:58","Actor":"wli3","Number":"10446","RawContent":null,"Title":"`dotnet new tool-manifest` will put dotnet-tools.json under .config folder","State":"open","Body":"Open this issue for feedback. We hope to use the convention of `.config` folder to avoid the clutter of config file under the repo root. Start from local tools manifest","Url":"https://github.com/dotnet/cli/issues/10446","RelatedDescription":"Open issue \"`dotnet new tool-manifest` will put dotnet-tools.json under .config folder\" (#10446)"},{"Id":"388384314","IsPullRequest":false,"CreatedAt":"2018-12-06T20:26:59","Actor":"aL3891","Number":"10445","RawContent":null,"Title":"Incorrect binding redirect in net471 project with .net core 3 sdk","State":"open","Body":"Hello friends,\r\n\r\nI'm having an odd issue with our existing projects that are targeting net 471. After installing the .net core 3 preview, binding redirects are generated differently, causing runtime exceptions. What's more, setting the sdk version in global.json does not seem to fix the issue, only uninstalling the v3 sdk does the trick. (this seems very strange to me btw, almost to the point that i think i've done something wrong)\r\n\r\nOne webapp that is using signalR on full framework produces this .config snippet without .net core 3 sdk\r\n\r\n```\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Owin.Security\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-11.0.0.0\" newVersion=\"11.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n```\r\n\r\nand with the .net 3 sdk installed (exact same source):\r\n\r\n```\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-10.0.0.0\" newVersion=\"10.0.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Owin\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-2.1.0.0\" newVersion=\"2.1.0.0\" />\r\n      </dependentAssembly>\r\n```\r\n\r\ni can supply binlog files if it would be helpful but our solution is fairly large so i might have to send them directly to someone\r\n\r\nI was just wondering if anyone else has seen something like this. if i set the binding redirects manually to the correct versions everything works, it's just the auto generated ones that seem fail. These project uses the new format.","Url":"https://github.com/dotnet/cli/issues/10445","RelatedDescription":"Open issue \"Incorrect binding redirect in net471 project with .net core 3 sdk\" (#10445)"},{"Id":"387878638","IsPullRequest":true,"CreatedAt":"2018-12-05T23:02:07","Actor":"livarcocc","Number":"10441","RawContent":null,"Title":"Update SDK to 2.2.101-preview3-63605-02","State":"closed","Body":"Contains a matching nuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10441","RelatedDescription":"Closed or merged PR \"Update SDK to 2.2.101-preview3-63605-02\" (#10441)"},{"Id":"387968555","IsPullRequest":true,"CreatedAt":"2018-12-05T22:11:17","Actor":"rainersigwald","Number":"10443","RawContent":null,"Title":"MSBuild 16.0.256-preview","State":"open","Body":"This version of MSBuild is in VS `lab/d16.0stg` at the moment.","Url":"https://github.com/dotnet/cli/pull/10443","RelatedDescription":"Open PR \"MSBuild 16.0.256-preview\" (#10443)"},{"Id":"387879538","IsPullRequest":false,"CreatedAt":"2018-12-05T18:06:51","Actor":"livarcocc","Number":"10442","RawContent":null,"Title":"Use flattened runtime packs","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10442","RelatedDescription":"Open issue \"Use flattened runtime packs\" (#10442)"},{"Id":"387877676","IsPullRequest":false,"CreatedAt":"2018-12-05T18:01:32","Actor":"livarcocc","Number":"10440","RawContent":null,"Title":"Switching to using Download only packages to acquire runtime packs","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10440","RelatedDescription":"Open issue \"Switching to using Download only packages to acquire runtime packs\" (#10440)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-13T20:07:29","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"open","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Open PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"390833738","IsPullRequest":true,"CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Number":"1019","RawContent":null,"Title":"Require support for default implementations of interfaces","State":"open","Body":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity.","Url":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Open PR \"Require support for default implementations of interfaces\" (#1019)"},{"Id":"390830254","IsPullRequest":true,"CreatedAt":"2018-12-13T19:42:55","Actor":"terrajobst","Number":"1018","RawContent":null,"Title":"WIP: Add support for Index and Range","State":"open","Body":"The adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1.","Url":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Open PR \"WIP: Add support for Index and Range\" (#1018)"},{"Id":"390822437","IsPullRequest":true,"CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Number":"1017","RawContent":null,"Title":"WIP: Add IAsyncEnumerable<T>","State":"open","Body":"This API is depending on the CoreFX work: dotnet/corefx#33909. Once we closed on the design I'll update this PR.\r\n\r\n***Before merging, change base to master**. Can only happen after #1014 is merged*.","Url":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Open PR \"WIP: Add IAsyncEnumerable<T>\" (#1017)"},{"Id":"390444044","IsPullRequest":true,"CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Number":"1015","RawContent":null,"Title":"Enable publishing to build-assets registry","State":"closed","Body":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Closed or merged PR \"Enable publishing to build-assets registry\" (#1015)"},{"Id":"390668875","IsPullRequest":true,"CreatedAt":"2018-12-13T13:31:43","Actor":"dotnet-maestro[bot]","Number":"1016","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1016)"},{"Id":"390354570","IsPullRequest":true,"CreatedAt":"2018-12-12T23:16:02","Actor":"terrajobst","Number":"1012","RawContent":null,"Title":"Add private fields for structs","State":"closed","Body":"No public API changes, but this fixes #678. \r\n\r\nIn a nutshell, the compiler needs to know whether a struct has any fields in order to apply definitive assignment rules. While stripping all private fields from types is generally OK, we can't do this for structs. Fortunately, for private fields the compiler doesn't really care what they are, but what their characteristics are. For example:\r\n\r\n1. Does the struct have any fields?\r\n\r\n2. Does the struct contain any reference types (to validate generic instantiations that have the unmanaged constraint)?\r\n\r\n3. Does the struct use the generic parameter in a field declaration (to validate cyclic layout problems)?\r\n\r\nThis adds dummy fields to structs to conform to these rules. These aren't computed separately but are instead taken from .NET Core.\r\n\r\nFor more details, see this issue in CoreFX:\r\n\r\nhttps://github.com/dotnet/corefx/issues/6185","Url":"https://github.com/dotnet/standard/pull/1012","RelatedDescription":"Closed or merged PR \"Add private fields for structs\" (#1012)"},{"Id":"390383237","IsPullRequest":true,"CreatedAt":"2018-12-12T19:52:20","Actor":"terrajobst","Number":"1014","RawContent":null,"Title":"Add IAsyncDisposable","State":"open","Body":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md","Url":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Open PR \"Add IAsyncDisposable\" (#1014)"},{"Id":"390377097","IsPullRequest":true,"CreatedAt":"2018-12-12T19:35:16","Actor":"terrajobst","Number":"1013","RawContent":null,"Title":"Add missing readonly modifiers","State":"open","Body":"This fixes #842.","Url":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Open PR \"Add missing readonly modifiers\" (#1013)"},{"Id":"390224712","IsPullRequest":false,"CreatedAt":"2018-12-12T19:00:27","Actor":"YairHalberstadt","Number":"1011","RawContent":null,"Title":"Add HashSet.TryGetValue to .Net Standard","State":"closed","Body":"This method is already implemented by .Net Core 2.0 and .Net Framework 4.7.2, so I imagine this would be relatively easy to include in .Net Standard 2.1.","Url":"https://github.com/dotnet/standard/issues/1011","RelatedDescription":"Closed issue \"Add HashSet.TryGetValue to .Net Standard\" (#1011)"},{"Id":"388028724","IsPullRequest":true,"CreatedAt":"2018-12-12T18:55:14","Actor":"terrajobst","Number":"999","RawContent":null,"Title":"Sync .NET Standard's RefEmit with .NET Framework","State":"closed","Body":"Fixes #987\r\n\r\nThe point of the sync is to get increase parity with .NET Framework and thus making it easier to port more existing code to .NET Standard 2.1 (or any platform implementing it).","Url":"https://github.com/dotnet/standard/pull/999","RelatedDescription":"Closed or merged PR \"Sync .NET Standard's RefEmit with .NET Framework\" (#999)"},{"Id":"390052989","IsPullRequest":true,"CreatedAt":"2018-12-12T16:50:02","Actor":"terrajobst","Number":"1009","RawContent":null,"Title":"Clean-up reference assembly","State":"closed","Body":"This aligns the physical representation of the reference assembly with how it look like in .NET Core. No changes to the API surface; it's just to remove noise in future diffs.","Url":"https://github.com/dotnet/standard/pull/1009","RelatedDescription":"Closed or merged PR \"Clean-up reference assembly\" (#1009)"},{"Id":"390215935","IsPullRequest":true,"CreatedAt":"2018-12-12T13:46:59","Actor":"dotnet-maestro[bot]","Number":"1010","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1010","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1010)"},{"Id":"389518834","IsPullRequest":true,"CreatedAt":"2018-12-12T03:42:31","Actor":"terrajobst","Number":"1007","RawContent":null,"Title":"Update FWLinks to use https instead of http","State":"closed","Body":"This change only affects the string for `[Obsolete]` message.\r\n\r\nJustification: It's generally bad to use `http` these day. Plus, it causes noise in the diffs.","Url":"https://github.com/dotnet/standard/pull/1007","RelatedDescription":"Closed or merged PR \"Update FWLinks to use https instead of http\" (#1007)"},{"Id":"389753658","IsPullRequest":true,"CreatedAt":"2018-12-11T13:11:39","Actor":"dotnet-maestro[bot]","Number":"1008","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18610.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1008","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1008)"},{"Id":"389020595","IsPullRequest":true,"CreatedAt":"2018-12-09T13:10:59","Actor":"dotnet-maestro[bot]","Number":"1006","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1006","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1006)"},{"Id":"388920215","IsPullRequest":true,"CreatedAt":"2018-12-08T13:10:58","Actor":"dotnet-maestro[bot]","Number":"1005","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1005)"},{"Id":"388645771","IsPullRequest":true,"CreatedAt":"2018-12-07T13:16:15","Actor":"dotnet-maestro[bot]","Number":"1004","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1004)"},{"Id":"388551526","IsPullRequest":false,"CreatedAt":"2018-12-07T08:26:51","Actor":"he-dev","Number":"1003","RawContent":null,"Title":"Documentation still not up-to-date","State":"open","Body":"I'd be great if you could keep the documentation up-to-date. Currently the only place where you can find anything about these two _super-secret_ elements:\r\n\r\n- `AppendTargetFrameworkToOutputPath`\r\n- `AppendRuntimeIdentifierToOutputPath `\r\n\r\nis this [comment](https://github.com/dotnet/standard/issues/512#issuecomment-332291043). Are there any more _hidden_ settings? \r\n\r\nDo you think you could improve this and maybe also add other _unofficial_ yet fully supported settings (if there are any)?","Url":"https://github.com/dotnet/standard/issues/1003","RelatedDescription":"Open issue \"Documentation still not up-to-date\" (#1003)"},{"Id":"388402668","IsPullRequest":true,"CreatedAt":"2018-12-06T22:17:23","Actor":"wtgodbe","Number":"1002","RawContent":null,"Title":"Move build output from `bin` to `artifacts`","State":"closed","Body":"This allows Arcade to take over in deciding where we output our build artifacts, so we no longer have everything going into the `bin` dir. I don't believe there's anywhere else that explicitly depends on Standard's `bin` dir, but please let me know if you think I'm missing anything.\r\n\r\n@ericstj @ViktorHofer @weshaggard PTAL\r\n\r\n@danmosemsft CC","Url":"https://github.com/dotnet/standard/pull/1002","RelatedDescription":"Closed or merged PR \"Move build output from `bin` to `artifacts`\" (#1002)"},{"Id":"388373169","IsPullRequest":true,"CreatedAt":"2018-12-06T20:04:55","Actor":"ericstj","Number":"1001","RawContent":null,"Title":"Remove Trimming package from dotnet/standard","State":"closed","Body":"Fixes: https://github.com/dotnet/standard/issues/788\r\n\r\nThose looking for an officially supported trimming tool should try:\r\nhttps://github.com/dotnet/core/blob/master/samples/linker-instructions.md\r\n\r\nThe assembly level linker has moved to:\r\nhttps://github.com/ericstj/Microsoft.Packaging.Tools.Trimming","Url":"https://github.com/dotnet/standard/pull/1001","RelatedDescription":"Closed or merged PR \"Remove Trimming package from dotnet/standard\" (#1001)"},{"Id":"386996248","IsPullRequest":true,"CreatedAt":"2018-12-06T18:57:40","Actor":"wtgodbe","Number":"991","RawContent":null,"Title":"Dummy commit to trigger CI - don't merge","State":"closed","Body":"Attempting to trigger CI again, please don't merge","Url":"https://github.com/dotnet/standard/pull/991","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI - don't merge\" (#991)"},{"Id":"388204009","IsPullRequest":true,"CreatedAt":"2018-12-06T13:11:37","Actor":"dotnet-maestro[bot]","Number":"1000","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1000","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1000)"},{"Id":"387555933","IsPullRequest":true,"CreatedAt":"2018-12-06T02:14:39","Actor":"terrajobst","Number":"996","RawContent":null,"Title":"List excluded reflection emit APIs","State":"closed","Body":"I did a diff between `System.Reflection.Emit` in .NET Framework and .NET Standard to make sure the APIs we explicitly didn't bring to .NET Standard are listed here. This adds no APIs to .NET Standard, just comments to the source code of the reference assembly.\r\n\r\nI assume the @dotnet/nsboard has no problems with that as it's just book keeping for folks like me. Unless there is push back, I'm going to merge this tomorrow.\r\n\r\n**Update:** I forgot to mention that I plan to add another PR with the APIs we plan to add .NET Standard.","Url":"https://github.com/dotnet/standard/pull/996","RelatedDescription":"Closed or merged PR \"List excluded reflection emit APIs\" (#996)"},{"Id":"387902379","IsPullRequest":true,"CreatedAt":"2018-12-05T20:00:00","Actor":"wtgodbe","Number":"998","RawContent":null,"Title":"Change yml name to azure-pipelines.yml","State":"closed","Body":"In response to https://github.com/dotnet/arcade/issues/690#issuecomment-444562580\r\n\r\nChanges name of our pipeline file to the standard `azure-pipelines.yml`. I'll also update the build defs to reflect this change.\r\n\r\nCC @chcosta ","Url":"https://github.com/dotnet/standard/pull/998","RelatedDescription":"Closed or merged PR \"Change yml name to azure-pipelines.yml\" (#998)"},{"Id":"387746721","IsPullRequest":true,"CreatedAt":"2018-12-05T18:59:29","Actor":"dotnet-maestro[bot]","Number":"997","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18604.15\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18604.15\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/997","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#997)"},{"Id":"387484691","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:23","Actor":"wtgodbe","Number":"995","RawContent":null,"Title":"Output packages into Artifacts dir","State":"closed","Body":"This outputs packages into `ArtifactsPackagesDir`, so that Arcade can easily find them for signing & publishing (with this, we no longer need a custom `Signing.props` to specify where our packages live).\r\n\r\n@chcosta @ericstj PTAL\r\n\r\nShould fix the build error in https://dnceng.visualstudio.com/internal/_build/results?buildId=52052","Url":"https://github.com/dotnet/standard/pull/995","RelatedDescription":"Closed or merged PR \"Output packages into Artifacts dir\" (#995)"},{"Id":"387041262","IsPullRequest":true,"CreatedAt":"2018-12-04T18:10:15","Actor":"wtgodbe","Number":"993","RawContent":null,"Title":"Don't reference FeedTasksPackage","State":"closed","Body":"Arcade already restores this package when trying to publish: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Tools.proj#L49\r\n\r\nSince the default version in arcade is currently `2.2-xxx` (https://github.com/dotnet/arcade/blob/069237d9a7e83bed62c9f664228125b95ddf91f6/src/Microsoft.DotNet.Arcade.Sdk/tools/DefaultVersions.props#L71), the build would fail when trying to import files from that package, since only the 3.0.0 version was getting restored: https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L30\r\n\r\nCC @safern you'll want to make a similar change in CoreFx if you plan on doing Arcade publishing\r\n\r\n@chcosta PTAL","Url":"https://github.com/dotnet/standard/pull/993","RelatedDescription":"Closed or merged PR \"Don't reference FeedTasksPackage\" (#993)"},{"Id":"387274996","IsPullRequest":true,"CreatedAt":"2018-12-04T13:16:29","Actor":"dotnet-maestro[bot]","Number":"994","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18603.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18603.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/994","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#994)"},{"Id":"387011624","IsPullRequest":true,"CreatedAt":"2018-12-03T21:47:39","Actor":"wtgodbe","Number":"992","RawContent":null,"Title":"Fix _SignType, Variable Groups in pipebuild","State":"closed","Body":"This PR makes it so that we only access secrets in internal builds, and passes _SignType to the Windows builds.\r\n\r\n@chcosta PTAL","Url":"https://github.com/dotnet/standard/pull/992","RelatedDescription":"Closed or merged PR \"Fix _SignType, Variable Groups in pipebuild\" (#992)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"390939795","IsPullRequest":true,"CreatedAt":"2018-12-14T02:25:07","Actor":"dotnet-maestro-bot","Number":"34092","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27214-01, preview-27213-02, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34092","RelatedDescription":"Open PR \"Update CoreClr, CoreSetup to preview-27214-01, preview-27213-02, respectively (master)\" (#34092)"},{"Id":"390932319","IsPullRequest":true,"CreatedAt":"2018-12-14T01:45:16","Actor":"jkoritzinsky","Number":"34091","RawContent":null,"Title":"Remove [Out] by-value string parameter usage from System.Management.","State":"open","Body":"Fixes #34083.","Url":"https://github.com/dotnet/corefx/pull/34091","RelatedDescription":"Open PR \"Remove [Out] by-value string parameter usage from System.Management.\" (#34091)"},{"Id":"390852666","IsPullRequest":true,"CreatedAt":"2018-12-14T01:38:28","Actor":"stephentoub","Number":"34078","RawContent":null,"Title":"Expose AsyncIteratorStateMachineAttribute","State":"closed","Body":"cc: @kouvel, @tarekgh ","Url":"https://github.com/dotnet/corefx/pull/34078","RelatedDescription":"Closed or merged PR \"Expose AsyncIteratorStateMachineAttribute\" (#34078)"},{"Id":"390894896","IsPullRequest":true,"CreatedAt":"2018-12-14T01:38:09","Actor":"mattwarren","Number":"34085","RawContent":null,"Title":"The 'mscorlib' link returns a 404","State":"closed","Body":"mscorlib -> System.Private.CoreLib renaming happened a while back","Url":"https://github.com/dotnet/corefx/pull/34085","RelatedDescription":"Closed or merged PR \"The 'mscorlib' link returns a 404\" (#34085)"},{"Id":"390896751","IsPullRequest":true,"CreatedAt":"2018-12-14T01:37:46","Actor":"mattwarren","Number":"34086","RawContent":null,"Title":"'mscorlib' link returns 404 -> 'System.Private.CoreLib'","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34086","RelatedDescription":"Closed or merged PR \"'mscorlib' link returns 404 -> 'System.Private.CoreLib'\" (#34086)"},{"Id":"390864412","IsPullRequest":true,"CreatedAt":"2018-12-14T01:01:19","Actor":"ViktorHofer","Number":"34082","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181213.4 of https://github.com/dotnet/arcade","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34082","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181213.4 of https://github.com/dotnet/arcade\" (#34082)"},{"Id":"390919980","IsPullRequest":true,"CreatedAt":"2018-12-14T00:42:01","Actor":"geoffkizer","Number":"34090","RawContent":null,"Title":"HTTP2: Improve SETTINGS handling and other small changes","State":"open","Body":"(1) Send appropriate settings in our initial client settings frame\r\n(2) Add code to parse/validate received settings that we care about\r\n(3) Send initial connection-level window update\r\n(4) Improve exception handling so that failed requests properly get HttpRequestException\r\n(5) Test additions/improvements\r\n\r\nFixes #31295\r\nFixes #31704\r\nFixes #31394\r\nFixes #31520\r\n\r\n@dotnet/ncl","Url":"https://github.com/dotnet/corefx/pull/34090","RelatedDescription":"Open PR \"HTTP2: Improve SETTINGS handling and other small changes\" (#34090)"},{"Id":"390915518","IsPullRequest":true,"CreatedAt":"2018-12-14T00:18:33","Actor":"wfurt","Number":"34089","RawContent":null,"Title":"catch exception in ssl handshake so it can be propagated to async caller","State":"open","Body":"this is related to #33857 and was recommended by @stephentoub.\r\nThis allows to catch IO exception in SSL handshake. \r\n\r\nThere is still issue connecting the site but at least it can be handled now. ","Url":"https://github.com/dotnet/corefx/pull/34089","RelatedDescription":"Open PR \"catch exception in ssl handshake so it can be propagated to async caller\" (#34089)"},{"Id":"390912850","IsPullRequest":true,"CreatedAt":"2018-12-14T00:05:26","Actor":"NattyNarwhal","Number":"34088","RawContent":null,"Title":"Fix ConvertDirent for AIX by always returning PAL_DT_UNKNOWN","State":"open","Body":"I commited the sin of untested code, as this function wasn't wired\r\nup to Mono's BCL until a few days ago, and I had triggered the\r\nsituation where I needed this working by purging stale build\r\nartifacts.\r\n\r\nWhat happened here was me being too clever; I tried stat, but\r\nwe only have the file name, and from the unmanaged call stack this\r\nwould run in, we'd have no way to get the directory it's in\r\n(without butchering the function signature) to properly use stat\r\nfor non-cwd directories. This meant that the check would get random\r\ngarbage on the stack; sometimes the data for \"..\", sometimes\r\nanother function would clobber it, and it'd read that. This caused\r\nthe Mono gensources tool to act erratically, preventing the BCL\r\nfrom building.\r\n\r\nFix this by always returning DT_UNKNOWN. This isn't ideal, but the\r\nBCL seems to handle this with grace and does a stat afterwards\r\nto properly fill in data. It's enough to get the Mono build from\r\nscratch working again. (The stat bit was verified by me running the\r\nsyscall tracing tool, `truss` over it, plus Mono's JIT trace.)","Url":"https://github.com/dotnet/corefx/pull/34088","RelatedDescription":"Open PR \"Fix ConvertDirent for AIX by always returning PAL_DT_UNKNOWN\" (#34088)"},{"Id":"390899631","IsPullRequest":true,"CreatedAt":"2018-12-13T23:08:31","Actor":"333fred","Number":"34087","RawContent":null,"Title":"Renamed Microsoft.VisualBasic to Microsoft.VisualBasic.Core","State":"open","Body":"Part of porting Microsoft.VisualBasic to core. A facade for\r\nMicrosoft.VisualBasic is now generated in place of the original dll so\r\nexisting applications will be able to continue with the same set of\r\nreferences.\r\n\r\n@ericstj and @danmosemsft for review. FYI @jaredpar.","Url":"https://github.com/dotnet/corefx/pull/34087","RelatedDescription":"Open PR \"Renamed Microsoft.VisualBasic to Microsoft.VisualBasic.Core\" (#34087)"},{"Id":"390893532","IsPullRequest":true,"CreatedAt":"2018-12-13T22:46:12","Actor":"wfurt","Number":"34084","RawContent":null,"Title":"avoid processing incorrect ICMP message on Unix","State":"open","Body":"fixes #33699 Ping.Unix falsely returns successful pings\r\n\r\nWhen we use RAW socket implementation we simply create socket to get all ICMP.\r\nWhen there are multiple pings going (even from different process)  the raw socket would receive all ICMP responses and than it can incorrectly report success even for non existing host. \r\n\r\nThis change effectively implements address filtering. Instead of doing it explicitly as discussed in issue, it uses Connect() to ping socket to only that address for Unicast. (similar behavior to UDP)\r\n\r\nI don't know if there is better way to determine multicast (leading 1110) IP for IPv4.\r\n\r\nAside from running tests, I did verify that ping to multicast (224.0.0.1 all nodes) still works as it used to. There is currently not good API to know what nodes responded to the query. So successful response means that there is at least one responding node.\r\n\r\nI also did tests with broadcast and directed broadcast (xx.xx.xx.255) \r\nIt fails with even for root:\r\n\r\n> Unhandled Exception: System.Net.Sockets.SocketException: Permission denied\r\n>    at System.Net.Sockets.Socket.DoBeginSendTo(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, EndPoint endPointSnapshot, SocketAddress socketAddress, OverlappedAsyncResult asyncResult)\r\n> \r\n\r\nthis is because we would need to do ioctl to enable broadcast functions on socket. \r\nThis behavior remains same with this change. \r\n\r\n\r\n\r\n\r\n \r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34084","RelatedDescription":"Open PR \"avoid processing incorrect ICMP message on Unix\" (#34084)"},{"Id":"390878444","IsPullRequest":false,"CreatedAt":"2018-12-13T22:02:47","Actor":"jkoritzinsky","Number":"34083","RawContent":null,"Title":"System.Management uses in-place string modification in interop","State":"open","Body":"While working to block users from intentionally using interop to modify the internal buffer of a `string` to avoid corrupting interned strings and crashing during ALC unloading, I discovered that the `IWbemPath` interface in `System.Management`'s `GetPath_` method has a `[In][Out][MarshalAs(UnmanagedType.LPWStr)] string path` parameter that modifies the string value in-place. We should change this to use an `[In][Out][MarshalAs(UnmanagedType.LPWStr)] StringBuilder path` parameter so we aren't modifying a `string`s internal buffer from native code.\r\n\r\nSee dotnet/coreclr#21513\r\ncc: @AaronRobinsonMSFT, @janvorli ","Url":"https://github.com/dotnet/corefx/issues/34083","RelatedDescription":"Open issue \"System.Management uses in-place string modification in interop\" (#34083)"},{"Id":"390858333","IsPullRequest":false,"CreatedAt":"2018-12-13T21:01:27","Actor":"bartonjs","Number":"34081","RawContent":null,"Title":"Utf8JsonReader should throw when isFinal is true and the first call to Read returns false","State":"open","Body":"json.org's version of the JSON grammar says that a JSON payload has precisely one value.\r\n\r\nCurrently the reader will return false with no exception if no semantic value was present, which I found to be surprising.\r\n\r\n* `ReadOnlySpan<byte>.Empty`\r\n* `new byte[] { 0x20 }`\r\n* Comments: Skip, `Encoding.UTF8.GetBytes(\"// just a comment\")`\r\n* Comments: Skip, `Encoding.UTF8.GetBytes(\"   /* comment and whitespace */     \")`\r\n\r\nAll of these are equivalently \"there was no JSON here\".\r\n\r\nWhile it's possible for the caller to check that Read returned successfully at least once, or that in the final state reader.TokenType is not None; it seems like an easy pit of failure that the reader should report via an exception.\r\n\r\nNaive interpretation is that right before a `return false` in Read() it should add `if (isFinal && TokenType == JsonTokenType.None) throw new JsonReaderException(...);`","Url":"https://github.com/dotnet/corefx/issues/34081","RelatedDescription":"Open issue \"Utf8JsonReader should throw when isFinal is true and the first call to Read returns false\" (#34081)"},{"Id":"390858188","IsPullRequest":false,"CreatedAt":"2018-12-13T21:01:05","Actor":"TylerBrinkley","Number":"34080","RawContent":null,"Title":"Add a PrimaryAttribute type","State":"open","Body":"Split from #15453 \r\n\r\nFor the `Enum` method `GetName` when there are multiple enum members with the same value the name it returns is undefined. I propose adding a `PrimaryAttribute` to be applied to enum members where there is ambiguity which will ensure its name is returned.\r\n\r\n## Proposed API\r\n```c#\r\nnamespace System.ComponentModel {\r\n    public sealed class PrimaryAttribute : Attribute {\r\n        public PrimaryAttribute();\r\n    }\r\n}\r\n```\r\n\r\n## API Details\r\n* The `PrimaryAttribute` is used to specify what enum member to retrieve when there are multiple enum members with the same value. It could be used for more than just enum members for cases in code where there is ambiguity.","Url":"https://github.com/dotnet/corefx/issues/34080","RelatedDescription":"Open issue \"Add a PrimaryAttribute type\" (#34080)"},{"Id":"390854923","IsPullRequest":false,"CreatedAt":"2018-12-13T20:52:08","Actor":"TylerBrinkley","Number":"34079","RawContent":null,"Title":"Add flag Enum methods","State":"open","Body":"Moved from #15453 \r\n\r\nEnums are essential commonly used types but have several areas in need of improvement. There should be better support for flag enums, bit-masked enums with the `FlagsAttribute` applied. Support for enum validation should be improved to support flag enums.\r\n\r\n## Rationale and Usage\r\n1. Support for flag enums is limited to just the `HasFlag` method which isn't type-safe, is inefficient, and is ambiguous as to whether it indicates if the value has all or any of the specified flags. It's also visible to all enum values whether it's a flag enum or not.\r\n2. Built-in support for enum validation is currently limited to the `IsDefined` method which doesn't support flag enum combinations and is inefficient due to a lack of caching of reflection results.\r\n\r\nWhat used to be this to validate a flag enum value\r\n\r\n```c#\r\nMyFlagEnum value = ???;\r\nbool isValid = (value & Enum.GetValues(typeof(MyFlagEnum))\r\n    .Cast<MyFlagEnum>()\r\n    .Aggregate((working, next) => working | next)) == value;\r\n```\r\n\r\nnow becomes just this\r\n\r\n```c#\r\nMyFlagEnum value = ???;\r\nbool isValid = value.IsValidFlagCombination();\r\n```\r\n\r\nWith this implemented it will address #693 and #10908.\r\n\r\n## Proposed API\r\n```diff\r\n namespace System {\r\n     public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable {\r\n-        public bool HasFlag(Enum flag);\r\n+        [Obsolete(\"Use FlagEnum.HasAllFlags or FlagEnum.HasAnyFlags instead\"), EditorBrowsable(EditorBrowsableState.Never)] public bool HasFlag(Enum flag);\r\n+        public static bool IsFlagEnum<TEnum>() where TEnum : struct, Enum;\r\n+        public static bool IsFlagEnum(Type enumType);\r\n     }\r\n }\r\n // Separate namespace and class to make flag enum extension methods' visibility optional\r\n+namespace System.Flags {\r\n+    public static class FlagEnum {\r\n         // Generic API\r\n+        public static TEnum AllFlags<TEnum>() where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2, TEnum flag3) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(TEnum flag0, TEnum flag1, TEnum flag2, TEnum flag3, TEnum flag4) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(params TEnum[] flags) where TEnum : struct, Enum;\r\n+        public static TEnum CombineFlags<TEnum>(IEnumerable<TEnum> flags) where TEnum : struct, Enum;\r\n+        public static TEnum CommonFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static IEnumerable<TEnum> GetFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAllFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAllFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static bool HasAnyFlags<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static bool HasAnyFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n+        public static bool IsValidFlagCombination<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static TEnum RemoveFlags<TEnum>(this TEnum value, TEnum flags) where TEnum : struct, Enum;\r\n\r\n         // Non-Generic API\r\n+        public static object AllFlags(Type enumType);\r\n+        public static object CombineFlags(Type enumType, object value, object flags);\r\n+        public static object CombineFlags(Type enumType, params object[] flags);\r\n+        public static object CombineFlags(Type enumType, IEnumerable<object> flags);\r\n+        public static object CommonFlags(Type enumType, object value, object flags);\r\n+        public static IEnumerable<object> GetFlags(Type enumType, object value);\r\n+        public static bool HasAllFlags(Type enumType, object value);\r\n+        public static bool HasAllFlags(Type enumType, object value, object flags);\r\n+        public static bool HasAnyFlags(Type enumType, object value);\r\n+        public static bool HasAnyFlags(Type enumType, object value, object flags);\r\n+        public static bool IsValidFlagCombination(Type enumType, object value);\r\n+        public static object RemoveFlags(Type enumType, object value, object flags);\r\n+    }\r\n+}\r\n```\r\n\r\n## API Details\r\n### `Enum` API Details\r\n* `HasFlag` is being deprecated as it's ambiguous and clutters up the intellisense as it's always accessible to all enum values. Using `System.Flags.FlagEnum.HasAllFlags` removes the naming ambiguity and since it's in a separate namespace it'll only be visible within a source file when the file explicitly includes `System.Flags`.\r\n* `IsFlagEnum` indicates if the enum has the `FlagsAttribute` applied.\r\n\r\n### `FlagEnum` API Details\r\nThe flag enum operations are defined in the separate `FlagEnum` class in the `System.Flags` namespace to make flag enum extension methods' visibility optional.\r\n\r\n* `CombineFlags` returns the bitwise OR of the values. The name was chosen as it mirrors the naming of `Delegate.Combine`.\r\n* `CommonFlags` returns the bitwise AND of the values.\r\n* `AllFlags` returns all enum members' values that are powers of two bitwise ORed together.\r\n* `GetFlags` retrieves each valid flag included in the value in increasing significance bit order.\r\n* `HasAllFlags` indicates if the value contains all of the specified flags, equivalent to the current `HasFlag`.\r\n* `HasAnyFlags` indicates if the value contains any of the specified flags.\r\n* `IsValidFlagCombination` is defined as `(value & AllFlags) == value`.\r\n* `RemoveFlags` returns value with all of the specified flags removed and is defined as `(value & (~flags))`. The name was chosen as it mirrors the naming of `Delegate.Remove`.\r\n\r\n## Implementation Details\r\nUtilizes performance improved implementation from #15453.\r\n\r\n## Open Questions\r\n* Should the `FlagEnum` class members be instead moved into `System.Enum` and their extension methods would then be visible on all enum values?","Url":"https://github.com/dotnet/corefx/issues/34079","RelatedDescription":"Open issue \"Add flag Enum methods\" (#34079)"},{"Id":"390771925","IsPullRequest":true,"CreatedAt":"2018-12-13T20:50:16","Actor":"Dotnet-GitSync-Bot","Number":"34072","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corefx/pull/34072","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34072)"},{"Id":"390841711","IsPullRequest":false,"CreatedAt":"2018-12-13T20:14:00","Actor":"TylerBrinkley","Number":"34077","RawContent":null,"Title":"Add EnumMember API","State":"open","Body":"Split off from #15453 \r\n\r\n## Rationale and Usage\r\n\r\nCurrently, to retrieve both the names and values of an enum's members requires two separate calls and requires you to use a for loop which is quite clumsy. Additionally the pattern to associate extra data with an enum member using `Attribute`s is not directly supported and instead requires users to manually retrieve the `Attribute`s via reflection. This pattern is commonly used on enums using the `DescriptionAttribute`, `EnumMemberAttribute`, and `DisplayAttribute`. There should be added direct support for the retrieval of `Attribute`s applied to enum members.\r\n\r\nWhat used to be this to retrieve both the names and values of an enum's members\r\n\r\n```c#\r\nvar values = (MyEnum[])Enum.GetValues(typeof(MyEnum));\r\nvar names = Enum.GetNames(typeof(MyEnum));\r\nfor (int i = 0; i < values.Length; ++i)\r\n{\r\n    MyEnum value = values[i];\r\n    string name = names[i];\r\n}\r\n```\r\n\r\nnow becomes this\r\n\r\n```c#\r\nforeach (var member in Enum.GetMembers<MyEnum>())\r\n{\r\n    MyEnum value = member.Value;\r\n    string name = member.Name;\r\n}\r\n```\r\n\r\nAnd what used to be this to retrieve the `DescriptionAttribute.Description` of an enum member\r\n\r\n```c#\r\nMyEnum value = ???;\r\nstring description = ((DescriptionAttribute)Attribute.GetCustomAttribute(\r\n    typeof(MyEnum).GetField(value.ToString()),\r\n    typeof(DescriptionAttribute),\r\n    false))?.Description;\r\n```\r\n\r\nnow becomes this\r\n\r\n```c#\r\nMyEnum value = ???;\r\nstring description = value.GetMember()?.Attributes.Get<DescriptionAttribute>()?.Description;\r\n```\r\n\r\n## Proposed API\r\n```diff\r\n namespace System {\r\n     public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable {\r\n         // New Generic API\r\n+        public static EnumMember<TEnum> GetMember<TEnum>(this TEnum value) where TEnum : struct, Enum;\r\n+        public static EnumMember<TEnum> GetMember<TEnum>(string name) where TEnum : struct, Enum;\r\n+        public static EnumMember<TEnum> GetMember<TEnum>(string name, bool ignoreCase) where TEnum : struct, Enum;\r\n+        public static EnumMember<TEnum> GetMember<TEnum>(ReadOnlySpan<char> name) where TEnum : struct, Enum;\r\n+        public static EnumMember<TEnum> GetMember<TEnum>(ReadOnlySpan<char> name, bool ignoreCase) where TEnum : struct, Enum;\r\n+        public static IEnumerable<EnumMember<TEnum>> GetMembers<TEnum>() where TEnum : struct, Enum;\r\n\r\n         // New Non-Generic API\r\n+        public static EnumMember GetMember(Type enumType, object value)\r\n+        public static EnumMember GetMember(Type enumType, string name);\r\n+        public static EnumMember GetMember(Type enumType, string name, bool ignoreCase);\r\n+        public static EnumMember GetMember(Type enumType, ReadOnlySpan<char> name);\r\n+        public static EnumMember GetMember(Type enumType, ReadOnlySpan<char> name, bool ignoreCase);\r\n+        public static IEnumerable<EnumMember> GetMembers(Type enumType);\r\n     }\r\n+    public abstract class EnumMember : IEquatable<EnumMember>, IComparable<EnumMember>, IComparable, IConvertible, IFormattable {\r\n+        public ComponentModel.AttributeCollection Attributes { get; }\r\n+        public string Name { get; }\r\n+        public object Value { get; }\r\n+        public bool Equals(EnumMember other);\r\n+        public sealed override bool Equals(object other);\r\n+        public sealed override int GetHashCode();\r\n+        public sealed override string ToString();\r\n+        public string ToString(string format);\r\n+    }\r\n+    public abstract class EnumMember<TEnum> : EnumMember, IEquatable<EnumMember<TEnum>>, IComparable<EnumMember<TEnum>> {\r\n+        public new TEnum Value { get; }\r\n+        public bool Equals(EnumMember<TEnum> other);\r\n+    }\r\n }\r\n namespace System.ComponentModel {\r\n-    public class AttributeCollection : ICollection, IEnumerable\r\n+    public class AttributeCollection : ICollection, IEnumerable, IList<Attribute>, IReadOnlyList<Attribute> {\r\n+        public TAttribute Get<TAttribute>() where TAttribute : Attribute;\r\n+        public Attribute Get(Type attributeType);\r\n+        public IEnumerable<TAttribute> GetAll<TAttribute>() where TAttribute : Attribute;\r\n+        public IEnumerable<Attribute> GetAll(Type attributeType);\r\n+        public bool Has<TAttribute>() where TAttribute : Attribute;\r\n+        public bool Has(Type attributeType);\r\n     }\r\n }\r\n```\r\n\r\n## API Details\r\nThis proposal makes use of a `C#` language feature that needs to be added in order for this proposal to make the most impact.\r\n\r\nThis proposal specifies extension methods within `System.Enum` and as such requires `C#` to allow extension methods within non-static classes as is proposed in [csharplang#301](https://github.com/dotnet/csharplang/issues/301). Promoting these to extension methods later would be a breaking change due to [csharplang#665](https://github.com/dotnet/csharplang/issues/665) but I feel this is acceptable.\r\n\r\nAlternatively, the extension methods could be defined in a separate static `EnumExtensions` class. This is uglier but would avoid this issue and the extension methods would be available immediately instead of needing to wait for a later `C#` version to support this.\r\n\r\nThis proposal stems from my work on the open source library [Enums.NET](https://github.com/TylerBrinkley/Enums.NET).\r\n\r\n### `Enum` API Details\r\n* `GetAttributes` retrieves the `AttributeCollection` of an enum member with the specified value. If there are multiple enum members with the specified value the enum member marked with the `PrimaryAttribute` will be used. If there are no enum members with the specified value `null` is returned. This may or may not be warranted as an extension method. \r\n* `GetMember` retrieves the `EnumMember` with the specified value or name. If there are multiple enum members with the specified value the enum member marked with the `PrimaryAttribute` will be retrieved. If there are no enum members with the specified value or name `null` is returned.\r\n* `GetMembers` retrieves all of the `EnumMember`s of the specified enum in increasing significance bit order by their respective values.\r\n\r\n### `EnumMember` API Details\r\n* `EnumMember` and `EnumMember<TEnum>` are a new object model formed over an enum member which include its name, value, and attributes. They only have internal constructors and there is only one instance of `EnumMember` created for each enum member thus one can use `ReferenceEquals` for determining equality. This also prevents allocations after the first retrieval.\r\n* It seems there's no reason to constrain `TEnum` in `EnumMember<TEnum>` to an `Enum` as it's not publicly constructible and being unconstrained would be beneficial in unconstrained generic programming.\r\n\r\n### `AttributeCollection` API Details\r\n* `Get` returns the first `Attribute` in the collection that is assignable to the specified attribute type if available otherwise `null`.\r\n* `GetAll` returns all `Attribute`s in the collection that are assignable to the specified attribute type.\r\n* `Has` indicates if any `Attribute`s in the collection are assignable to the specified attribute type.\r\n* Type needs to be moved from the `System.ComponentModel.TypeConverter` assembly into `mscorlib` while adding an automatic binding redirect.\r\n\r\n## Implementation Details\r\nUtilizes performance improved implementation from #15453.","Url":"https://github.com/dotnet/corefx/issues/34077","RelatedDescription":"Open issue \"Add EnumMember API\" (#34077)"},{"Id":"390708252","IsPullRequest":true,"CreatedAt":"2018-12-13T19:49:56","Actor":"dotnet-maestro-bot","Number":"34069","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to preview-27213-02, preview.18613.4, preview-27213-01, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34069","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to preview-27213-02, preview.18613.4, preview-27213-01, respectively (master)\" (#34069)"},{"Id":"390827850","IsPullRequest":false,"CreatedAt":"2018-12-13T19:36:10","Actor":"terrajobst","Number":"34076","RawContent":null,"Title":"Implement all companion APIs for System.Index and System.Range","State":"open","Body":"The spec is [here](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis).","Url":"https://github.com/dotnet/corefx/issues/34076","RelatedDescription":"Open issue \"Implement all companion APIs for System.Index and System.Range\" (#34076)"},{"Id":"390827838","IsPullRequest":false,"CreatedAt":"2018-12-13T19:36:07","Actor":"rmkerr","Number":"34075","RawContent":null,"Title":"Unable to load libgdiplus on Alpine","State":"open","Body":"A significant number of System.Resources tests have been failing on Alpine Linux in the daily test runs. It looks like the failure occurs when we try to load libgdiplus:\r\n```\r\nMessage\r\n--\r\nSystem.TypeInitializationException : The type initializer for 'Gdip' threw an exception.\\n---- System.DllNotFoundException : Unable to load DLL 'libgdiplus': The specified module could not be found.\r\n```","Url":"https://github.com/dotnet/corefx/issues/34075","RelatedDescription":"Open issue \"Unable to load libgdiplus on Alpine\" (#34075)"},{"Id":"390576318","IsPullRequest":false,"CreatedAt":"2018-12-13T18:23:09","Actor":"dotnet-mc-bot","Number":"34064","RawContent":null,"Title":"Test failure: CoreFx.Private.TestUtilities.Tests.ConditionalAttributeTests/ValidateConditionalFact","State":"closed","Body":"Opened on behalf of @AriNuer\n\nThe test `CoreFx.Private.TestUtilities.Tests.ConditionalAttributeTests/ValidateConditionalFact` has failed.\n\nFailure Message:\n```\nAssert.True() Failure\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at CoreFx.Private.TestUtilities.Tests.ConditionalAttributeTests.ValidateConditionalFact() in E:\\A\\_work\\17\\s\\corefx\\src\\CoreFx.Private.TestUtilities\\tests\\ConditionalAttributeTests.cs:line 46\n```\n\nBuild : 3.0 - 20181213.02 (Full Framework Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20181213.02/workItem/CoreFx.Private.TestUtilities.Tests/analysis/xunit/CoreFx.Private.TestUtilities.Tests.ConditionalAttributeTests~2FValidateConditionalFact","Url":"https://github.com/dotnet/corefx/issues/34064","RelatedDescription":"Closed issue \"Test failure: CoreFx.Private.TestUtilities.Tests.ConditionalAttributeTests/ValidateConditionalFact\" (#34064)"},{"Id":"390794794","IsPullRequest":false,"CreatedAt":"2018-12-13T18:02:39","Actor":"tannergooding","Number":"34074","RawContent":null,"Title":"Consider enabling WarnAsError for both MSBuild and Csc","State":"open","Body":"Now that https://github.com/dotnet/corefx/issues/29861 has been resolved and our build is once again warning free, it might be good to consider enabling `WarnAsError` for both MSBuild and Csc (and for any other tools that have similar options).\r\n\r\nThis would avoid us having these warnings committed in the first place.","Url":"https://github.com/dotnet/corefx/issues/34074","RelatedDescription":"Open issue \"Consider enabling WarnAsError for both MSBuild and Csc\" (#34074)"},{"Id":"390789508","IsPullRequest":false,"CreatedAt":"2018-12-13T17:47:34","Actor":"MgSam","Number":"34073","RawContent":null,"Title":"AsyncLock","State":"open","Body":"Please add @stephentoub's excellent [AsyncLock ](https://blogs.msdn.microsoft.com/pfxteam/2012/02/12/building-async-coordination-primitives-part-6-asynclock/) and async primitive friends into Core FX. \r\n\r\nI searched and was surprised not to find this suggested before. Feel free to close this if it was and I just couldn't find it. \r\n\r\nWhile it is true that Stephen Cleary has added this to his great [AsyncEx](https://github.com/StephenCleary/AsyncEx/wiki/AsyncLock) library, I think this is a common enough need that it should be part of the framework itself.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34073","RelatedDescription":"Open issue \"AsyncLock\" (#34073)"},{"Id":"390768359","IsPullRequest":false,"CreatedAt":"2018-12-13T16:52:38","Actor":"ericstj","Number":"34071","RawContent":null,"Title":"Removal of reference assemblies left behind a ref placeholder","State":"open","Body":"The [change](https://github.com/dotnet/corefx/commit/03bad43b5b063b46fdea07c2e292cf880bafb063) to set ExcludeReferenceAssets isn't excluding the placeholders added by InboxOnTargetFramework: https://github.com/dotnet/buildtools/blob/64e2e93c0560ceb2108c69fdb0d8795d2f7b52ba/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L328-L332\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34071","RelatedDescription":"Open issue \"Removal of reference assemblies left behind a ref placeholder\" (#34071)"},{"Id":"390757701","IsPullRequest":false,"CreatedAt":"2018-12-13T16:28:07","Actor":"alexdrl","Number":"34070","RawContent":null,"Title":"TempAssembly not found when generating XML documents","State":"open","Body":"Hello, we started migrating our application from .netcoreapp2.0 to .netcoreapp2.2. In the process, we encounter a problem with XML Serialization. The call stack and the error is the following.\r\n ![](https://user-images.githubusercontent.com/26382633/49952173-b9aa6b00-fefb-11e8-9dfd-867171ada1b7.png)\r\n\r\nThe code in between is a external library code that tries to generate some XML document dynamically. The error also happens in runtime code not only with TestServer.\r\n\r\nI've tried to find the assembly without luck, and searching the code in https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/Serialization/Compilation.cs and https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs does not seem to reveal the location of the generated assembly (if it ever gets generated). Should the assembly get generated in a file? Why the parameter location in the XMLSerializer constructor is not used?\r\n","Url":"https://github.com/dotnet/corefx/issues/34070","RelatedDescription":"Open issue \"TempAssembly not found when generating XML documents\" (#34070)"},{"Id":"390638923","IsPullRequest":false,"CreatedAt":"2018-12-13T11:37:27","Actor":"davidkaya","Number":"34068","RawContent":null,"Title":"Difference between the behaviour of File.GetAttributes(string path) and new FileInfo(string path).Attributes","State":"open","Body":"I encountered this problem (?) when I was writing tests for #29323 \r\n\r\n```\r\nvar nonExistingFileInfo = new FileInfo(\"non-existing-file\");\r\nif ((nonExistingFileInfo.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)\r\n    Console.WriteLine(\"File is hidden.\"); // This is printed because FileInfo returns -1\r\nelse\r\n    Console.WriteLine(\"File is visible.\");\r\n\r\nFile.GetAttributes(\"non-existing-file\"); // This throws exception \r\n```\r\n\r\nI know that documentation states `If the path doesn't exist as of the last cached state, the return value is (FileAttributes)(-1). FileNotFoundException or DirectoryNotFoundException can only be thrown when setting the value.` however is this expected behaviour?  I was writing tests for #29323 and I used the method available at https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/tests/FileInfo/GetSetAttributes.cs#L11 with a non existing file `(GetAttributes(\".nonexistingfile\") & FileAttributes.Hidden) == FileAttributes.Hidden` and basically I got `true` even though I shouldn't have (I know that based on the documentation I should've have checked whether it didn't return -1). ","Url":"https://github.com/dotnet/corefx/issues/34068","RelatedDescription":"Open issue \"Difference between the behaviour of File.GetAttributes(string path) and new FileInfo(string path).Attributes\" (#34068)"},{"Id":"390625328","IsPullRequest":false,"CreatedAt":"2018-12-13T10:59:12","Actor":"ramsubbaraoc","Number":"34067","RawContent":null,"Title":"how to create .resources file using dotnet core on linux","State":"open","Body":"On Windows we can use Resgen tool to generate .resources files from the text files. How can we achieve the same using dotnet core","Url":"https://github.com/dotnet/corefx/issues/34067","RelatedDescription":"Open issue \"how to create .resources file using dotnet core on linux\" (#34067)"},{"Id":"390602464","IsPullRequest":false,"CreatedAt":"2018-12-13T10:01:28","Actor":"999999999999mail","Number":"34066","RawContent":null,"Title":"The SSL connection could not be established, see inner exception","State":"open","Body":"System\r\nOS : Windows Server 2012 R2 Standard\r\n.Net Core : 2.1.5\r\n\r\nProblem\r\nHTTPS address request, sometimes this error occurs, not every request will be wrong\r\n\r\nThe SSL connection could not be established, see inner exception.\r\n\r\nDetails\r\nThe SSL connection could not be established, see inner exception.\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Rookies.Pay.Infrastructure.HttpClientWrap.PostAsync(String url, String postData, IDictionary`2 headers, String contentType, Int32 timeout, Encoding encoding) in E:/...\r\n\r\nInner Exception:\r\nAuthentication failed, see inner exception.\r\n\r\nCode:\r\npublic async Task<HttpResp> PostAsync(string url, string postData, IDictionary<string, string> headers = null, string contentType = \"application/x-www-form-urlencoded\", int timeout = 0, Encoding encoding = null)\r\n        {\r\n            HttpResp resp = new HttpResp();\r\n\r\n            var client = _httpClientFactory.CreateClient();\r\n            if (headers != null)\r\n            {\r\n                foreach (KeyValuePair<string, string> header in headers)\r\n                {\r\n                    client.DefaultRequestHeaders.Add(header.Key, header.Value);\r\n                }\r\n            }\r\n            if (timeout > 0)\r\n            {\r\n                client.Timeout = new TimeSpan(0, 0, timeout);\r\n            }\r\n            using (HttpContent content = new StringContent(postData ?? \"\", encoding ?? Encoding.UTF8))\r\n            {\r\n                if (contentType != null)\r\n                {\r\n                    content.Headers.ContentType = new MediaTypeHeaderValue(contentType);\r\n                }\r\n                using (HttpResponseMessage responseMessage = await client.PostAsync(url, content))\r\n                {\r\n                    resp.StatusCode = responseMessage.StatusCode;\r\n                    byte[] resultBytes = await responseMessage.Content.ReadAsByteArrayAsync();\r\n                    resp.ResponseText = (encoding ?? Encoding.UTF8).GetString(resultBytes);\r\n                }\r\n            }\r\n\r\n            return resp;\r\n        }","Url":"https://github.com/dotnet/corefx/issues/34066","RelatedDescription":"Open issue \"The SSL connection could not be established, see inner exception\" (#34066)"},{"Id":"390584786","IsPullRequest":false,"CreatedAt":"2018-12-13T09:17:15","Actor":"v-haren","Number":"34065","RawContent":null,"Title":"Invalid argument: /m:1","State":"open","Body":"failed in job: https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu16.04_release/3622\r\n\r\nfailed log:\r\n+ python3.5 /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/Microsoft.BenchView.JSONFormat/tools/submission-metadata.py --name corefx rolling master  fa576b8877e7b8a20af56ed22320a1b93a3ad3f3 --user-email dotnet-bot@microsoft.com\r\n[2018-12-12 22:20][INFO ] Serialized object written to: \"submission-metadata.json\"\r\n+ python3.5 /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/Microsoft.BenchView.JSONFormat/tools/build.py git --branch master --type rolling\r\n[2018-12-12 22:20][INFO ] Serialized object written to: \"build.json\"\r\n[perf_ubuntu16.04_release] $ /bin/sh -xe /tmp/jenkins4086817392035087193.sh\r\n+ python3.5 /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/Microsoft.BenchView.JSONFormat/tools/machinedata.py\r\n[2018-12-12 22:20][INFO ] Serialized object written to: \"machinedata.json\"\r\n[perf_ubuntu16.04_release] $ /bin/sh -xe /tmp/jenkins4668323872596237135.sh\r\n+ bash ./build.sh --ci -release -includetests /p:BuildNative=false /p:Performance=true /p:TargetOS=Linux /m:1 /p:LogToBenchview=true /p:BenchviewRunType=rolling /p:PerformanceType=Profile\r\nInvalid argument: /m:1\r\nCommon settings:\r\n  --configuration <value>    Build configuration: 'Debug' or 'Release' (short: --c)\r\n  --verbosity <value>        Msbuild verbosity: q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] (short: -v)\r\n  --binaryLog                Create MSBuild binary log (short: -bl)\r\n\r\nActions:\r\n  --restore                  Restore dependencies (short: -r)\r\n  --build                    Build all projects (short: -b)\r\n  --rebuild                  Rebuild all projects\r\n  --test                     Run all unit tests (short: -t)\r\n  --sign                     Sign build outputs\r\n  --publish                  Publish artifacts (e.g. symbols)\r\n  --pack                     Package build outputs into NuGet packages and Willow components\r\n  --help                     Print help and exit (short: -h)\r\n\r\nAdvanced settings:\r\n  --projects <value>       Project or solution file(s) to build\r\n  --ci                     Set when running on CI server\r\n  --prepareMachine         Prepare machine for CI run, clean up processes after build\r\n  --nodeReuse <value>      Sets nodereuse msbuild parameter ('true' or 'false')\r\n  --warnAsError <value>    Sets warnaserror msbuild parameter ('true' or 'false')\r\n\r\nCommand line arguments starting with '/p:' are passed through to MSBuild.\r\nBuild step 'Execute shell' marked build as failure","Url":"https://github.com/dotnet/corefx/issues/34065","RelatedDescription":"Open issue \"Invalid argument: /m:1\" (#34065)"},{"Id":"390559180","IsPullRequest":false,"CreatedAt":"2018-12-13T07:58:48","Actor":"LadislavLang","Number":"34063","RawContent":null,"Title":"TcpListener BeginAcceptTcpClient throws loop of SocketExceptions (10057) on WindowsServer 2012 Standard","State":"open","Body":"```c#\r\nusing System;\r\nusing System.Net.Sockets;\r\n\r\nclass Program\r\n{\r\n    private static TcpListener listener;\r\n\r\n    private static void Main(string[] args)\r\n    {\r\n        try\r\n        {\r\n            listener = TcpListener.Create(12345);\r\n\r\n            listener.Start();\r\n            listener.BeginAcceptTcpClient(AcceptClient, null);\r\n\r\n            using (var client = new TcpClient())\r\n            {\r\n                client.Connect(\"localhost\", 12345);\r\n            }\r\n\r\n            Console.ReadLine();\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            Console.WriteLine(exception);\r\n        }\r\n    }\r\n\r\n    private static void AcceptClient(IAsyncResult asyncResult)\r\n    {\r\n        try\r\n        { \r\n            listener.BeginAcceptTcpClient(AcceptClient, null);\r\n\r\n            using (var client = listener.EndAcceptTcpClient(asyncResult))\r\n            {\r\n                Console.WriteLine(\"OK\");\r\n            }\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            Console.WriteLine(exception);\r\n            Console.WriteLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWindows 10 - net47: OK\r\nWindows 10 - netcoreapp2.1: OK\r\nWindows 10 - netcoreapp2.2: OK\r\nWindows 10 - netcoreapp3.0 (preview): OK\r\n\r\nWindows Server 2012 - net47: OK\r\nWindows Server 2012 - netcoreapp2.1 & netcoreapp2.2 & netcoreapp3.0 (preview): \r\n\r\n**At first, there is loop of many SocketExceptions** \r\nSystem.Net.Sockets.SocketException (10057): A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram\r\n socket using a sendto call) no address was supplied\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.EndAccept(Byte[]& buffer, Int32& bytesTransferred, IAsyncResult asyncResult)\r\n   at System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult asyncResult)\r\n   at Program.AcceptClient(IAsyncResult asyncResult)\r\n\r\n**And finaly it crashed with one of these unhandled exceptions:** \r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(NativeOverlapped* overlapped)\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionPortCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)\r\n\r\nOr\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(NativeOverlapped* overlapped)\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionPortCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)\r\n\r\nOr\r\n\r\nSystem.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.InternalFinalize()\r\n   at System.Runtime.InteropServices.SafeHandle.Finalize()\r\n\r\nOr\r\n\r\nInvalidOperationException: NativeOverlapped cannot be reused for multiple operations.\r\n   at System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n**PS: Sometime it crash Windows completely!**","Url":"https://github.com/dotnet/corefx/issues/34063","RelatedDescription":"Open issue \"TcpListener BeginAcceptTcpClient throws loop of SocketExceptions (10057) on WindowsServer 2012 Standard\" (#34063)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"390970783","IsPullRequest":true,"CreatedAt":"2018-12-14T05:27:31","Actor":"sharwell","Number":"31787","RawContent":null,"Title":"Force cancellation if switching to UI thread completed after cancellation request","State":"open","Body":"This issue was discovered by @jasonmalinowski while investigating #30661.\r\n\r\nTo ensure the issue does not affect other code, the changes in 2c85db1c were audited and updated to ensure code does not continue executing after a cancellation request.","Url":"https://github.com/dotnet/roslyn/pull/31787","RelatedDescription":"Open PR \"Force cancellation if switching to UI thread completed after cancellation request\" (#31787)"},{"Id":"390967483","IsPullRequest":true,"CreatedAt":"2018-12-14T05:08:04","Actor":"sharwell","Number":"31786","RawContent":null,"Title":"Hide the start page to improve test performance","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31786","RelatedDescription":"Open PR \"Hide the start page to improve test performance\" (#31786)"},{"Id":"390966450","IsPullRequest":true,"CreatedAt":"2018-12-14T05:01:26","Actor":"agocke","Number":"31785","RawContent":null,"Title":"Add Span and Memory conversion methods for ImmutableArray","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31785","RelatedDescription":"Open PR \"Add Span and Memory conversion methods for ImmutableArray\" (#31785)"},{"Id":"390932272","IsPullRequest":false,"CreatedAt":"2018-12-14T01:45:00","Actor":"NickCraver","Number":"31784","RawContent":null,"Title":"Convert to LINQ (call form) generates extra .Select() overhead","State":"open","Body":"**Version Used**: VS 2019 Preview 1\r\n\r\nRelated to #31780. An example of this in action:\r\n![image](https://user-images.githubusercontent.com/454813/49978116-ffc0f800-ff16-11e8-935e-21542ab1b8c0.png)\r\n\r\n**Steps to Reproduce**:\r\n```#\r\n// Boilerplate\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\n```\r\n\r\n1. Enter the following code:\r\n```c#\r\nforeach (var item in _items)\r\n{\r\n    if (item.Length < 3)\r\n    {\r\n        yield return item;\r\n    }\r\n}\r\n```\r\n2. Check suggestions and select \"Convert to LINQ (call form)\r\n\r\n**Expected Behavior**:\r\nGenerated code would be:\r\n```c#\r\n_items.Where(item => item.Length < 3).Consume(consumer);\r\n```\r\n\r\n**Actual Behavior**:\r\nGenerated code is:\r\n```c#\r\n_items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n```\r\n\r\nIt would seen the `.Select(...)` is part of an always-generated formula, but it could be better here. There's overhead involved in the call - so can we avoid that overhead in the generated code?\r\n\r\nSample benchmarks:\r\n```c#\r\nprivate static readonly List<string> _items = Enumerable.Range(0, 50000).Select(i => \"Num\" + i).ToList();\r\nprivate readonly Consumer consumer = new Consumer();\r\n\r\n[Benchmark(Description = \"foreach\")]\r\npublic void ForEach()\r\n{\r\n    IEnumerable<string> Inner()\r\n    {\r\n        foreach (var item in _items)\r\n        {\r\n            if (item.Length < 3)\r\n            {\r\n                yield return item;\r\n            }\r\n        }\r\n    }\r\n    Inner().Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form)\")]\r\npublic void LINQCallForm()\r\n{\r\n    _items.Where(item => item.Length < 3).Select(item => item).Consume(consumer);\r\n}\r\n\r\n[Benchmark(Description = \"LINQ (call form optimal)\")]\r\npublic void LINQCallFormOptimal()\r\n{\r\n    _items.Where(item => item.Length < 3).Consume(consumer);\r\n}\r\n```\r\n\r\n|                     Method |  Job | Runtime |     Mean |    Error |   StdDev | Allocated Memory/Op |\r\n|--------------------------- |----- |-------- |---------:|---------:|---------:|--------------------:|\r\n|                    foreach |  Clr |     Clr | 262.0 us | 3.138 us | 2.782 us |                60 B |\r\n|         'LINQ (call form)' |  Clr |     Clr | 401.6 us | 1.783 us | 1.580 us |               156 B |\r\n| 'LINQ (call form optimal)' |  Clr |     Clr | 363.8 us | 3.123 us | 2.769 us |                76 B |\r\n|                    foreach | Core |    Core | 233.4 us | 1.989 us | 1.861 us |                56 B |\r\n|         'LINQ (call form)' | Core |    Core | 543.7 us | 4.368 us | 4.086 us |               152 B |\r\n| 'LINQ (call form optimal)' | Core |    Core | 549.4 us | 8.623 us | 7.644 us |                72 B |\r\n\r\nNote: the performance on Core is within the margin of error and note the minimal jitter- it's always equal or faster. The allocations are always higher. [Benchmarks are in a repo here](https://github.com/NickCraver/PerfBenchmarks/blob/0b98537fd20d807ab1766a67f1417ffea47d6e4a/Benchmarks/LINQLoops.cs)\r\n\r\nTo run:\r\n```ps\r\ncd Benchmarks\r\ndotnet run -c Release -f netcoreapp2.2 -- LINQLoop\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31784","RelatedDescription":"Open issue \"Convert to LINQ (call form) generates extra .Select() overhead\" (#31784)"},{"Id":"390931463","IsPullRequest":true,"CreatedAt":"2018-12-14T01:40:31","Actor":"gafter","Number":"31783","RawContent":null,"Title":"rename BoundPatternSwitchLabel to BoundSwitchLabel","State":"open","Body":"Fixes #31773","Url":"https://github.com/dotnet/roslyn/pull/31783","RelatedDescription":"Open PR \"rename BoundPatternSwitchLabel to BoundSwitchLabel\" (#31783)"},{"Id":"390911660","IsPullRequest":true,"CreatedAt":"2018-12-14T01:30:08","Actor":"dotnet-bot","Number":"31776","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31776","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31776)"},{"Id":"390911685","IsPullRequest":true,"CreatedAt":"2018-12-14T01:30:05","Actor":"dotnet-bot","Number":"31777","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31777","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#31777)"},{"Id":"390925482","IsPullRequest":true,"CreatedAt":"2018-12-14T01:10:17","Actor":"JoeRobich","Number":"31782","RawContent":null,"Title":"Fix additional newlines being added when adding all missing imports","State":"open","Body":"Before applying the missing imports remove any additional newlines that are introduced by add import wanting to separate the import from the rest of the code. This only occurs when there are no pre-existing imports.\r\n\r\nFixes #31768\r\n","Url":"https://github.com/dotnet/roslyn/pull/31782","RelatedDescription":"Open PR \"Fix additional newlines being added when adding all missing imports\" (#31782)"},{"Id":"390925256","IsPullRequest":true,"CreatedAt":"2018-12-14T01:09:13","Actor":"gafter","Number":"31781","RawContent":null,"Title":"Permit tests that fail certain assertions to run in !DEBUG","State":"open","Body":"See #25702 for details.","Url":"https://github.com/dotnet/roslyn/pull/31781","RelatedDescription":"Open PR \"Permit tests that fail certain assertions to run in !DEBUG\" (#31781)"},{"Id":"390923425","IsPullRequest":false,"CreatedAt":"2018-12-14T00:59:55","Actor":"kendrahavens","Number":"31780","RawContent":null,"Title":"Include performance warning in loop conversion","State":"open","Body":"Converting foreach loops to LINQ queries and methods can cause performance hits in some cases. (I believe when there are very few iterations in the loop LINQ isn't more performant. Correct me if I'm wrong!)\r\n\r\n[User request](https://twitter.com/Nick_Craver/status/1073380063557627904) is to include a message in the code fix warning/prompting/asking the user to consider perf. This could also be an editorconfig setting.","Url":"https://github.com/dotnet/roslyn/issues/31780","RelatedDescription":"Open issue \"Include performance warning in loop conversion\" (#31780)"},{"Id":"390916394","IsPullRequest":true,"CreatedAt":"2018-12-14T00:22:52","Actor":"tmat","Number":"31779","RawContent":null,"Title":"WIP: Fix issues with using dogfood compilers","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31779","RelatedDescription":"Open PR \"WIP: Fix issues with using dogfood compilers\" (#31779)"},{"Id":"390914013","IsPullRequest":true,"CreatedAt":"2018-12-14T00:11:01","Actor":"tmat","Number":"31778","RawContent":null,"Title":"Arcade SDK 1.0.0-beta.18613.19","State":"open","Body":"Switch to Arcade SDK, remove RepoToolset targets.","Url":"https://github.com/dotnet/roslyn/pull/31778","RelatedDescription":"Open PR \"Arcade SDK 1.0.0-beta.18613.19\" (#31778)"},{"Id":"390908662","IsPullRequest":true,"CreatedAt":"2018-12-13T23:47:06","Actor":"mavasani","Number":"31775","RawContent":null,"Title":"Add some more bail out cases for unused parameters and value assignments analyzers","State":"open","Body":"1. Presence of expression trees\r\n2. Assignment to VB static locals\r\n3. Parameters of VB handles method\r\n4. Parameters of MEF importing constructors","Url":"https://github.com/dotnet/roslyn/pull/31775","RelatedDescription":"Open PR \"Add some more bail out cases for unused parameters and value assignments analyzers\" (#31775)"},{"Id":"390906271","IsPullRequest":false,"CreatedAt":"2018-12-13T23:36:24","Actor":"Gnbrkm41","Number":"31774","RawContent":null,"Title":"CS1525 \"Invalid expression term '/'\" at wrong line when there is other comments prior to it","State":"open","Body":"**Version Used**: \r\nVisual Studio 2017 Community 15.9.4 with ReSharper Ultimate 2018.2.3\r\nVisual Studio 2019 16.0.0 Preview 1.1 \r\n**Steps to Reproduce**:\r\n\r\n1. Type some comments (Can be either block comments or single-line comment)\r\n2. Type some code with a single forward slash in front of it \r\n\r\n**Expected Behavior**:\r\nCS1525 \"Invalid expression term '/'\" error should be displayed at the line where the code with incomplete comment header is (i.e. division operator with nothing in front of it?)\r\n\r\n**Actual Behavior**:\r\n\r\n![2018-12-14 082359](https://user-images.githubusercontent.com/42944058/49973992-ab4f6400-ff7a-11e8-9b24-e78868fa7201.png)\r\n(Ignore the red squiggle on the right side, at line 33; that one's ReSharper's warning)\r\n\r\n![2018-12-14 082806](https://user-images.githubusercontent.com/42944058/49973991-ab4f6400-ff7a-11e8-8b49-0a65c23681c2.png)\r\n\r\n![2018-12-14 082720](https://user-images.githubusercontent.com/42944058/49973993-ab4f6400-ff7a-11e8-808b-28412b184634.png)\r\n\r\nThe warning is displayed at the end of the line prior to the comment.","Url":"https://github.com/dotnet/roslyn/issues/31774","RelatedDescription":"Open issue \"CS1525 \"Invalid expression term '/'\" at wrong line when there is other comments prior to it\" (#31774)"},{"Id":"390906200","IsPullRequest":false,"CreatedAt":"2018-12-13T23:36:04","Actor":"gafter","Number":"31773","RawContent":null,"Title":"rename BoundPatternSwitchLabel to BoundSwitchLabel","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/31773","RelatedDescription":"Open issue \"rename BoundPatternSwitchLabel to BoundSwitchLabel\" (#31773)"},{"Id":"390902285","IsPullRequest":false,"CreatedAt":"2018-12-13T23:19:25","Actor":"tmat","Number":"31772","RawContent":null,"Title":"BuildBoss: Validate Hint Paths are not used ","State":"open","Body":"We added `{HintPathFromItem}` to `<AssemblySearchPaths>` in https://github.com/dotnet/arcade/pull/428\r\n","Url":"https://github.com/dotnet/roslyn/issues/31772","RelatedDescription":"Open issue \"BuildBoss: Validate Hint Paths are not used \" (#31772)"},{"Id":"390898633","IsPullRequest":true,"CreatedAt":"2018-12-13T23:04:17","Actor":"cston","Number":"31771","RawContent":null,"Title":"Report nested nullability warnings for arguments to user-defined conversions","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/31770.","Url":"https://github.com/dotnet/roslyn/pull/31771","RelatedDescription":"Open PR \"Report nested nullability warnings for arguments to user-defined conversions\" (#31771)"},{"Id":"390895132","IsPullRequest":false,"CreatedAt":"2018-12-13T22:51:49","Actor":"cston","Number":"31770","RawContent":null,"Title":"No warning for nested nullability mismatch of argument to user-defined conversion","State":"open","Body":"No warnings reported for conversions of `A<object?>` to `B`:\r\n```C#\r\nclass A<T> { }\r\n\r\nclass B\r\n{\r\n    public static implicit operator B(A<object> a) => throw null;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void F(B b) { }\r\n\r\n    static void Main()\r\n    {\r\n        A<object?> a = new A<object?>();\r\n        B b = a; // warning: mismatch\r\n        F(a);    // warning: mismatch\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31770","RelatedDescription":"Open issue \"No warning for nested nullability mismatch of argument to user-defined conversion\" (#31770)"},{"Id":"390893100","IsPullRequest":true,"CreatedAt":"2018-12-13T22:44:30","Actor":"ivanbasov","Number":"31769","RawContent":null,"Title":"Editor Completion: the rest of projection scenarios tests","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/27446\r\nTest only","Url":"https://github.com/dotnet/roslyn/pull/31769","RelatedDescription":"Open PR \"Editor Completion: the rest of projection scenarios tests\" (#31769)"},{"Id":"390890854","IsPullRequest":false,"CreatedAt":"2018-12-13T22:36:49","Actor":"kendrahavens","Number":"31768","RawContent":null,"Title":"Add missing usings has extra whitespace","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.0.0 Preview 1.1 [28407.52.d16.0]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Copy and paste in code that needs usings\r\n2. Apply new codefix that adds missing usings\r\n\r\n![image](https://user-images.githubusercontent.com/8293542/49971575-ce7b0480-fee3-11e8-8cd7-7093d87896a5.png)\r\n\r\n\r\n\r\n**Expected Behavior**:\r\nThere should be only one new line between usings.\r\n![image](https://user-images.githubusercontent.com/8293542/49971636-f8342b80-fee3-11e8-9f02-269de5981f74.png)\r\n\r\n\r\n**Actual Behavior**:\r\nThere are two new lines between usings\r\n![image](https://user-images.githubusercontent.com/8293542/49971781-7db7db80-fee4-11e8-9c1e-8ecdc45e72e8.png)\r\n\r\n@JoeRobich for reference.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31768","RelatedDescription":"Open issue \"Add missing usings has extra whitespace\" (#31768)"},{"Id":"390889458","IsPullRequest":false,"CreatedAt":"2018-12-13T22:32:05","Actor":"jaredpar","Number":"31767","RawContent":null,"Title":"Move trigger branches to YAML","State":"open","Body":"This is supported by Azure DevOps now. Here is an example: \r\n\r\nhttps://github.com/dotnet/arcade-minimalci-sample/blob/master/azure-pipelines.yml#L10\r\n\r\n``` yaml\r\n# CI and PR triggers\r\ntrigger:\r\n- master\r\n\r\npr:\r\n- master\r\n```\r\n\r\nThe understanding is that Azure will use the target branch of the PR as the source of truth when deciding if a build should occur or not. Example: if a PR is done to master-vs-deps Azure will look at the YAML in master-vs-deps to see if a trigger exists for that branch. \r\n","Url":"https://github.com/dotnet/roslyn/issues/31767","RelatedDescription":"Open issue \"Move trigger branches to YAML\" (#31767)"},{"Id":"390857201","IsPullRequest":true,"CreatedAt":"2018-12-13T20:58:39","Actor":"jasonmalinowski","Number":"31766","RawContent":null,"Title":"Remove assumption that project names are unique","State":"open","Body":"While refactoring the project system shims I assumed what we were calling the \"unique name\" was actually unique. It's not, really -- you can have the same name in different solution folders. We only use this name for hosting IVsContainedLanguage instances, and it turns out there we were first filtering by IVsHierarchy and only using the name to distinguish after that. This returns to that pattern.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/742526.","Url":"https://github.com/dotnet/roslyn/pull/31766","RelatedDescription":"Open PR \"Remove assumption that project names are unique\" (#31766)"},{"Id":"390829015","IsPullRequest":true,"CreatedAt":"2018-12-13T20:50:14","Actor":"sharwell","Number":"31761","RawContent":null,"Title":"Ensure Visual Studio has focus at the start of each new test","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31761","RelatedDescription":"Closed or merged PR \"Ensure Visual Studio has focus at the start of each new test\" (#31761)"},{"Id":"390851255","IsPullRequest":false,"CreatedAt":"2018-12-13T20:41:10","Actor":"jcouv","Number":"31765","RawContent":null,"Title":"Nullable warning reported in Error List with \"Build+Intellisense\" filter","State":"open","Body":"Reported by @arivoir in https://github.com/dotnet/docs/issues/9517\r\n\r\nAs I understood the repro steps:\r\n- using dev16 preview1 or preview1.1\r\n- clone https://github.com/arivoir/Open.Flickr\r\n- build (notice there are no nullable warnings in Output)\r\n- open the Error List:\r\n  - notice there are no nullable warnings when filtered with \"Build\"\r\n  - but there are unexpected nullable warnings when filtered with \"Build+Intellisense\"\r\n\r\n@arivoir Please confirm this is an accurate summary. It would be great if you could attach a small screenshot of the error list.\r\nAlso, did you try repairing your instance of preview1.1?\r\n\r\nI was not able to repro on preview1 or preview2. So I'm looking for troubleshooting steps to provide @arivoir. \r\n@heejaechang is there a way to log some information from the build that powers the \"Intellisense\" list?","Url":"https://github.com/dotnet/roslyn/issues/31765","RelatedDescription":"Open issue \"Nullable warning reported in Error List with \"Build+Intellisense\" filter\" (#31765)"},{"Id":"390843103","IsPullRequest":true,"CreatedAt":"2018-12-13T20:17:57","Actor":"jcouv","Number":"31764","RawContent":null,"Title":"Add guard to DisposeAsync","State":"open","Body":"The behavior for `DisposeAsync` is only specified if the method is at the beginning, the end or a `yield return`. It is unspecified if the method is suspended at an `await` or running.\r\nPer discussion with LDM, although it doesn't not guarantee that users couldn't call `DisposeAsync` at the wrong time (there are still possible race conditions that we can't guard against) we'll throw in such cases.\r\n\r\nTo that effect:\r\n- a new state is introduced to represent the beginning of the method (-3)\r\n- the states for `yield return` and `await` are split: `yield return` uses negative numbers (-4 and down), `await` uses positive numbers (0 and up, as in regular async methods)\r\n\r\nThe APIs could be mis-used in other ways , but we will not guard those:\r\n- calling `MoveNextAsync()` on two separate threads is unspecified,\r\n- calling `MoveNextAsync()` after `DisposeAsync()` is unspecified, but the implementation just returns `false` (no items left).\r\n\r\n```C#\r\nValueTask IAsyncDisposable.DisposeAsync()\r\n{\r\n    if (state >= StateMachineStates.NotStartedStateMachine /* -1 */)\r\n    {\r\n        throw new NotSupportedException();\r\n    }\r\n    if (state == StateMachineStates.FinishedStateMachine /* -2 */)\r\n    {\r\n        return default;\r\n    }\r\n    disposeMode = true;\r\n    _valueOrEndPromise.Reset();\r\n    var inst = this;\r\n    _builder.Start(ref inst);\r\n    return new ValueTask(this, _valueOrEndPromise.Version);  // note this leverages the state machine's implementation of IValueTaskSource\r\n}\r\n```\r\n\r\n```\r\n        DisposeAsync                              await\r\n +------------------------+             +------------------------> N\r\n |                        |             |                          |\r\n v   GetAsyncEnumerator   |             |        resuming          |\r\n-2 --------------------> -3 --------> -1 <-------------------------+    Dispose mode = false\r\n ^                                   |  |                          |\r\n |         done and disposed         |  |      yield return        |\r\n +-----------------------------------+  +-----------------------> -N\r\n |                                   |                             |\r\n |                                   |                             |\r\n |                             yield |                             |\r\n |                             break |           DisposeAsync      |\r\n |                                   |  +--------------------------+\r\n |                                   |  |\r\n |                                   |  |\r\n |         done and disposed         v  v    suspension (await)\r\n +----------------------------------- -1 ------------------------> N\r\n                                        ^                          |    Dispose mode = true\r\n                                        |         resuming         |\r\n                                        +--------------------------+\r\n```\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/30109","Url":"https://github.com/dotnet/roslyn/pull/31764","RelatedDescription":"Open PR \"Add guard to DisposeAsync\" (#31764)"},{"Id":"390835027","IsPullRequest":true,"CreatedAt":"2018-12-13T19:56:10","Actor":"jaredpar","Number":"31763","RawContent":null,"Title":"Fix build task on CoreClr 3.0","State":"open","Body":"The compiler build tasks were broken on CoreClr due to some private reflection code that got invalidated by runtime changes. As I dug into this though most of this usage stemmed from our days when the compiler build task was single targeted and targeting netstandard1.3. Now that we multi-target all of our end points and reference netstandard2.0 lots of this light up code can simply be deleted. \r\n\r\ncloses #31737 ","Url":"https://github.com/dotnet/roslyn/pull/31763","RelatedDescription":"Open PR \"Fix build task on CoreClr 3.0\" (#31763)"},{"Id":"390833939","IsPullRequest":false,"CreatedAt":"2018-12-13T19:53:18","Actor":"jaredpar","Number":"31762","RawContent":null,"Title":"Scripting needs to remove CoreLightup usage","State":"open","Body":"This issue comes from investigating #31737\r\n\r\nThe root issue here is that the light up code in `CoreLightup` uses private reflection and the location of the type has moved. It's not as easy as updating the private reflection though as we have to consider a number of different cases now: net472, netcoreapp2.1 and netcoreapp3.0. I'm unsure what the right fix is for scripting. ","Url":"https://github.com/dotnet/roslyn/issues/31762","RelatedDescription":"Open issue \"Scripting needs to remove CoreLightup usage\" (#31762)"},{"Id":"390823045","IsPullRequest":true,"CreatedAt":"2018-12-13T19:22:41","Actor":"CyrusNajmabadi","Number":"31760","RawContent":null,"Title":" Rename an enum member to be clearer, and add docs as well. ","State":"open","Body":"Note: i decided against SyntaxTreeAnalysis as i really wanted the member to be very visible asnot being appropriate if you do anything the semantic model.  With this name, my hope is that PRs are easier because someone would see this and then more readily notice if the semantic model was used.","Url":"https://github.com/dotnet/roslyn/pull/31760","RelatedDescription":"Open PR \" Rename an enum member to be clearer, and add docs as well. \" (#31760)"},{"Id":"390820799","IsPullRequest":true,"CreatedAt":"2018-12-13T19:16:14","Actor":"sharwell","Number":"31759","RawContent":null,"Title":"Remove IBuiltInAnalyzer.GetAnalyzerCategory","State":"open","Body":"Closes #31758","Url":"https://github.com/dotnet/roslyn/pull/31759","RelatedDescription":"Open PR \"Remove IBuiltInAnalyzer.GetAnalyzerCategory\" (#31759)"},{"Id":"390820366","IsPullRequest":false,"CreatedAt":"2018-12-13T19:15:01","Actor":"CyrusNajmabadi","Number":"31758","RawContent":null,"Title":"Remove DiagnosticAnalyzercategory (if possible without perf regressions).","State":"open","Body":"From: https://github.com/dotnet/roslyn/issues/31746\r\n\r\n> Easiest way is just get rid of DiagnosticAnalyzerCategory in a blanket ban. If it didn't have enough of a performance impact to include in the public analyzer API, then it doesn't have enough of a performance impact to use for the built-in analyzers.\r\n\r\n> I agree with Sam, that we should get rid of it, but we also need to make sure that it does not regress perf for built in analyzer execution. If it does, we need to implement such filtering for all analyzers based on registered action counts.\r\n\r\nBasically, this enum is a bit of hack, and it causes problems.  We should try to remove and see if it's possible to do the right thing without it.","Url":"https://github.com/dotnet/roslyn/issues/31758","RelatedDescription":"Open issue \"Remove DiagnosticAnalyzercategory (if possible without perf regressions).\" (#31758)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"390931623","IsPullRequest":true,"CreatedAt":"2018-12-14T01:41:28","Actor":"Dotnet-GitSync-Bot","Number":"6686","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#6686)"},{"Id":"390863483","IsPullRequest":false,"CreatedAt":"2018-12-13T21:17:03","Actor":"tannergooding","Number":"6685","RawContent":null,"Title":"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout","State":"open","Body":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). ProjectN should ensure that these types are appropriately handled before they ship so that types are laid out appropriately in memory and so that it does not become a breaking change to fix them in the future.\r\n\r\nCoreCLR is already correctly handling these types in the VM layer: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L9521","Url":"https://github.com/dotnet/corert/issues/6685","RelatedDescription":"Open issue \"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout\" (#6685)"},{"Id":"390747404","IsPullRequest":true,"CreatedAt":"2018-12-13T20:33:53","Actor":"trylek","Number":"6683","RawContent":null,"Title":"Clean up CPAOT statics management per Michal's advice","State":"closed","Body":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Closed or merged PR \"Clean up CPAOT statics management per Michal's advice\" (#6683)"},{"Id":"390771984","IsPullRequest":true,"CreatedAt":"2018-12-13T18:06:21","Actor":"Dotnet-GitSync-Bot","Number":"6684","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6684)"},{"Id":"390693664","IsPullRequest":false,"CreatedAt":"2018-12-13T14:05:37","Actor":"kbaladurin","Number":"6682","RawContent":null,"Title":"[CppCodeGen] Inheritance is missing in some cases","State":"open","Body":"Following sample compiles incorrectly:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        class A<T, U>\r\n        {\r\n\r\n        }\r\n\r\n        class C<T>\r\n        {\r\n\r\n        }\r\n\r\n        class B<T> : A<string, C<T>>\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var b = new B<string>();\r\n            Console.WriteLine(\"b = \" + b);\r\n        }\r\n    }\r\n}\r\n```\r\n`B<System.__Canon>` doesn't inherit `A`:\r\n```\r\nnamespace Hello { namespace Hello { class Program_B_1_A__System___Canon_V_ {\r\n                public:\r\n                        static MethodTable * __getMethodTable();\r\n                        static void _ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n                        static void unbox__ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n};\r\n};};\r\n```\r\n\r\nOne of the problems is that `B<System.__Canon>` is emitted before `A<System.__Canon, System.__Canon>`. So the check `_emittedTypes.Contains(nodeType.BaseType)` in `CppWriter.OutputTypeNode` returns false. Are there any guarantees that base type is emitted before type itself?\r\n\r\nThank you!","Url":"https://github.com/dotnet/corert/issues/6682","RelatedDescription":"Open issue \"[CppCodeGen] Inheritance is missing in some cases\" (#6682)"},{"Id":"390340707","IsPullRequest":true,"CreatedAt":"2018-12-12T17:55:04","Actor":"trylek","Number":"6681","RawContent":null,"Title":"Initial support for GC ref map emission in the CPAOT compiler","State":"open","Body":"I have basically forked away ArgIterator and TransitionBlock from\r\nthe calling convention converter and I adapted it to use by the\r\nCPAOT compiler. I have not yet added multi-architecture support,\r\nfor now it only works for the compiler build architecture. There are\r\nalso a few NotImplemented cases I'll fix once I hit them in testing.\r\n\r\nMy initial thinking is that, after finalizing this code and after\r\nwe start working on other architectures, I'll further refactor this\r\ncode based on JanK's suggestion by merging in preprocessed versions\r\nof the ArgIterator source file for the four architectures.\r\n\r\nI also plan to further experiment with runtime architecture\r\nvirtualization that I tried to prototype in a trimmed-down\r\nclone of TransitionBlock I coded up for the purpose of R2RDump\r\nGC ref map decoder and I'm quite pleased with the result which\r\nlooks quite elegant and compact to me.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6681","RelatedDescription":"Open PR \"Initial support for GC ref map emission in the CPAOT compiler\" (#6681)"},{"Id":"388854973","IsPullRequest":true,"CreatedAt":"2018-12-12T17:20:52","Actor":"trylek","Number":"6664","RawContent":null,"Title":"Additional fixes for field placement in CPAOT","State":"closed","Body":"After making improvements to R2RDump to let me smoothly diff CPAOT\r\nand Crossgen code I managed to identify tests crashing to obvious\r\ninconsistencies in access to class / struct fields. There were\r\nmultiple reasons for these inconsistencies and, while I cannot claim\r\nthis change fixes all of them, it fixes quite a few.\r\n\r\nWhile our longer-term plan is to start embedding field placement\r\ninformation in the R2R executables, I believe this change is useful\r\nto both provide immediate fixes for some of the previously failing\r\nCoreCLR tests and to seed the CPAOT field placement algorithm with\r\na closer match to what CoreCLR uses - even if we decide to deviate\r\nfrom that at some point, it's still probably a reasonable starting\r\npoint.\r\n\r\n1) My original implementation of the static field layout placement\r\nwas based on the method Module::BuildStaticsOffsets but that's\r\nincorrect - this method is only used to calculate the required space\r\nfor statics of each type in the module and use this information to\r\ncalculate offsets within a big array that subsequently gets allocated\r\nas part of the DomainLocalModule / ThreadLocalModule structures.\r\nFor the actual field placement, MethodTableBuilder uses the same\r\nalgorithm as the dynamic layout placement so I unified these two\r\nand I refactored the code to cater for the two-level field resolution.\r\n\r\n2) Reverse token lookup for fields was incomplete so I fixed that.\r\n\r\n3) For static struct fields, we must set a special flag in CPAOT,\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP, this triggers\r\nthe proper double indirection code in JIT that caters for implicitly\r\nboxed struct statics in CoreCLR.\r\n\r\n4) For extra-bubble statics, we instead use a special helper\r\nREADYTORUN_HELPER_FieldAddress in accordance with the postprocessing\r\nin ZapInfo::getFieldInfo around lines 2940-2990.\r\n\r\n5) For instance fields, it turns out there's a slight difference in\r\nhow CoreRT vs. CoreCLR decides field layout for structs. In CoreRT,\r\nstructs use sequential layout by default. In CoreCLR, structs use\r\nsequential layout only when they are blittable, otherwise they use\r\nauto layout.\r\n\r\n6) As part of this change I have forked out the method\r\n\"MarshalHelpers.IsBlittableType\" into a separate static class\r\nIsBlittable because the MarshalHelpers carry around a ton of\r\ndependencies that wreak havoc when propagating to all places where\r\nthe blittable check is newly used as part of the field placement\r\nlogic. With this surgical separation I managed to make this change\r\nrequire very few changes to other projects.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6664","RelatedDescription":"Closed or merged PR \"Additional fixes for field placement in CPAOT\" (#6664)"},{"Id":"390260931","IsPullRequest":true,"CreatedAt":"2018-12-12T15:59:02","Actor":"Dotnet-GitSync-Bot","Number":"6680","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @pentp","Url":"https://github.com/dotnet/corert/pull/6680","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6680)"},{"Id":"389384132","IsPullRequest":true,"CreatedAt":"2018-12-12T15:15:55","Actor":"MarcoRossignoli","Number":"6669","RawContent":null,"Title":"[ILVerify]Check interface method implementation","State":"closed","Body":"closes https://github.com/dotnet/corert/issues/6203\r\nOutput message:\r\n```\r\n[MD]: Error: Class implements interface but not method, Class: '[InterfaceImplementation]MissingMethod_InvalidType_InterfaceMethodNotImplemented' Interface: '[InterfaceDefinition]Interface' Method: [InterfaceDefinition]Interface.M1()(class:02000004 interface:09000004 method:06000001).\r\n```\r\n\r\n/cc @jkotas @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/6669","RelatedDescription":"Closed or merged PR \"[ILVerify]Check interface method implementation\" (#6669)"},{"Id":"390184149","IsPullRequest":false,"CreatedAt":"2018-12-12T14:01:12","Actor":"jojify","Number":"6679","RawContent":null,"Title":"Failed to build Chromely (https://github.com/mattkol/Chromely)","State":"closed","Body":"Chromely is built using .Net standard 2.0.\r\nI used latest pre- release version (Install-Package Chromely.CefGlue.Winapi -Version 68.0.0-pre01).\r\nPlease find the attached screenshot.\r\n![sh1](https://user-images.githubusercontent.com/3658295/49859167-dc198700-fe1c-11e8-8782-9f575d75dabe.png)\r\n\r\nI followed steps from the link exactly. (https://github.com/mattkol/Chromely/wiki/Getting-Started-CefGlue-Winapi-(.NET-Core)). \r\nWhen I build the program using visual studio, it runs perfectly. \r\n\r\nBut again when I tried to build using CoreRT, I got the native executable in the native folder. It shows an error:-Value can't be null. parameter name :path1. Attached screen shot.\r\n![sc2](https://user-images.githubusercontent.com/3658295/49860871-a8d8f700-fe20-11e8-83d5-01f549154887.png)\r\n\r\n[chromely Sample.zip](https://github.com/mattkol/Chromely/files/2671351/chromely.Sample.zip)\r\n\r\nI am trying to build a native application using chromely. It will be great if you can take a look into this.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6679","RelatedDescription":"Closed issue \"Failed to build Chromely (https://github.com/mattkol/Chromely)\" (#6679)"},{"Id":"390121697","IsPullRequest":true,"CreatedAt":"2018-12-12T12:10:26","Actor":"MichalStrehovsky","Number":"6677","RawContent":null,"Title":"Add comment to WinRT SystemSupportsLeapSeconds","State":"closed","Body":"Per https://github.com/dotnet/corert/pull/6672#issuecomment-446430564.","Url":"https://github.com/dotnet/corert/pull/6677","RelatedDescription":"Closed or merged PR \"Add comment to WinRT SystemSupportsLeapSeconds\" (#6677)"},{"Id":"390122572","IsPullRequest":true,"CreatedAt":"2018-12-12T08:52:12","Actor":"kvochko","Number":"6678","RawContent":null,"Title":"Generate ARM CFIs in the correct order","State":"open","Body":"This is a CoreRT counterpart to https://github.com/dotnet/coreclr/pull/21505 . Since CFI codes are now generated in prolog, they are already in reverse order, so we don't need to reverse them in CoreRT.\r\nFixes #6626 \r\nCC @jkotas @alpencolt ","Url":"https://github.com/dotnet/corert/pull/6678","RelatedDescription":"Open PR \"Generate ARM CFIs in the correct order\" (#6678)"},{"Id":"389955581","IsPullRequest":true,"CreatedAt":"2018-12-12T04:40:26","Actor":"Dotnet-GitSync-Bot","Number":"6676","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6676","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6676)"},{"Id":"389835095","IsPullRequest":true,"CreatedAt":"2018-12-11T16:02:59","Actor":"MichalStrehovsky","Number":"6675","RawContent":null,"Title":"Make it possible to align at 32 byte boundaries","State":"open","Body":"This will be necessary to support computing layout for types that embed `Vector256`.\r\n\r\nFollow up on https://github.com/dotnet/corert/pull/6663#issuecomment-445574774.\r\n\r\nThis is foundational work needed to support the new HW intrinsics. We may or may not end up implementing function multiversioning for ready to run for .NET Core 3.0 CPAOT, but being able to compute the layout will let us at least pregenerate method bodies that pass through vector types without actually calling the intrinsics.\r\n\r\nSee individual commits. I'm flexible on whether we should include 47bacbd.","Url":"https://github.com/dotnet/corert/pull/6675","RelatedDescription":"Open PR \"Make it possible to align at 32 byte boundaries\" (#6675)"},{"Id":"389776056","IsPullRequest":true,"CreatedAt":"2018-12-11T13:55:45","Actor":"MichalStrehovsky","Number":"6674","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6674","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6674)"},{"Id":"389496528","IsPullRequest":true,"CreatedAt":"2018-12-11T12:18:32","Actor":"Dotnet-GitSync-Bot","Number":"6671","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6671","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6671)"},{"Id":"389609642","IsPullRequest":true,"CreatedAt":"2018-12-11T10:03:32","Actor":"jkotas","Number":"6673","RawContent":null,"Title":"Delete unnecessary struct initialization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6673","RelatedDescription":"Closed or merged PR \"Delete unnecessary struct initialization\" (#6673)"},{"Id":"389401689","IsPullRequest":true,"CreatedAt":"2018-12-11T06:06:22","Actor":"MichalStrehovsky","Number":"6670","RawContent":null,"Title":"Rename IlogB -> ILogB","State":"closed","Body":"This was updated in dotnet/coreclr#20912. Fortunately, ApiCompat found it in dotnet/corefx#33956.","Url":"https://github.com/dotnet/corert/pull/6670","RelatedDescription":"Closed or merged PR \"Rename IlogB -> ILogB\" (#6670)"},{"Id":"389560609","IsPullRequest":true,"CreatedAt":"2018-12-11T06:01:27","Actor":"tarekgh","Number":"6672","RawContent":null,"Title":"Fix leap seconds mirrored code","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6672","RelatedDescription":"Closed or merged PR \"Fix leap seconds mirrored code\" (#6672)"},{"Id":"389240063","IsPullRequest":true,"CreatedAt":"2018-12-10T15:53:16","Actor":"Dotnet-GitSync-Bot","Number":"6668","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub @tarekgh","Url":"https://github.com/dotnet/corert/pull/6668","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6668)"},{"Id":"388845374","IsPullRequest":true,"CreatedAt":"2018-12-10T10:38:08","Actor":"Dotnet-GitSync-Bot","Number":"6663","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6663","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6663)"},{"Id":"389194828","IsPullRequest":true,"CreatedAt":"2018-12-10T09:32:45","Actor":"MichalStrehovsky","Number":"6667","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Probably needed to unblock #6663.","Url":"https://github.com/dotnet/corert/pull/6667","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6667)"},{"Id":"389067443","IsPullRequest":true,"CreatedAt":"2018-12-10T03:28:03","Actor":"MichalStrehovsky","Number":"6666","RawContent":null,"Title":"Fix handling of intrinsic types in RyuJIT","State":"closed","Body":"This should unblock integrations from CoreCLR.","Url":"https://github.com/dotnet/corert/pull/6666","RelatedDescription":"Closed or merged PR \"Fix handling of intrinsic types in RyuJIT\" (#6666)"},{"Id":"389067160","IsPullRequest":false,"CreatedAt":"2018-12-09T21:40:30","Actor":"MichalStrehovsky","Number":"6665","RawContent":null,"Title":"Auto layout algorithm doesn't compute the right size","State":"open","Body":"Found when I was running the tests Tanner added in dotnet/coreclr#15961 (while half of the tests focuses on Vector64/128/256, the second half is a general purpose test and we're failing computing the right sizes).\r\n\r\nI have a fix that is halfway there in https://github.com/MichalStrehovsky/corert/commit/7f94460a4a0e2ea550dfdf26c4c5603bfc22faf3.\r\n\r\nWhat it lacks is handling of Align8 and unit tests.\r\n\r\nFor the record, here's the relevant part of the output of Tanner's test:\r\n\r\n```\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Char].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Double].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.IntPtr].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Single].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UIntPtr].\r\n     Expected: 16; Actual: 9\r\n```","Url":"https://github.com/dotnet/corert/issues/6665","RelatedDescription":"Open issue \"Auto layout algorithm doesn't compute the right size\" (#6665)"},{"Id":"388775575","IsPullRequest":true,"CreatedAt":"2018-12-07T20:23:02","Actor":"Dotnet-GitSync-Bot","Number":"6662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6662)"},{"Id":"388653472","IsPullRequest":true,"CreatedAt":"2018-12-07T14:18:54","Actor":"Dotnet-GitSync-Bot","Number":"6661","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6661)"},{"Id":"388602491","IsPullRequest":true,"CreatedAt":"2018-12-07T13:20:15","Actor":"Dotnet-GitSync-Bot","Number":"6660","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6660","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6660)"},{"Id":"388400207","IsPullRequest":true,"CreatedAt":"2018-12-07T10:47:49","Actor":"Dotnet-GitSync-Bot","Number":"6657","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6657","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6657)"},{"Id":"388601063","IsPullRequest":true,"CreatedAt":"2018-12-07T10:47:02","Actor":"MichalStrehovsky","Number":"6659","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6659","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6659)"},{"Id":"388588514","IsPullRequest":true,"CreatedAt":"2018-12-07T10:46:28","Actor":"MichalStrehovsky","Number":"6658","RawContent":null,"Title":"Work around an MCG bug","State":"closed","Body":"This is blocking TFS integrations.","Url":"https://github.com/dotnet/corert/pull/6658","RelatedDescription":"Closed or merged PR \"Work around an MCG bug\" (#6658)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"390007564","IsPullRequest":true,"CreatedAt":"2018-12-14T00:15:33","Actor":"dotnet-bot","Number":"2746","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2746)"},{"Id":"390902820","IsPullRequest":false,"CreatedAt":"2018-12-13T23:21:33","Actor":"wli3","Number":"2749","RawContent":null,"Title":"Pack as tool should not generate exe in nupkg","State":"open","Body":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure","Url":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Open issue \"Pack as tool should not generate exe in nupkg\" (#2749)"},{"Id":"388344039","IsPullRequest":false,"CreatedAt":"2018-12-13T19:16:52","Actor":"zawor","Number":"2725","RawContent":null,"Title":"Uninstalling may be not enough","State":"closed","Body":"@KathleenDollard asked me to post dotnet/docs#9412 here so here we go:\r\n\r\nHad a lot of runtimes and sdks accumulated over time on my dev machine. At some point i decided to do the cleanup and uninstalled quite a few from under appwiz.cpl (or add/remove programs). Unfortunately after running `dotnet --list-sdks` or `dotnet --list-runtimes` i still saw those which were uninstalled... Interestingly enough i discovered that installers have left a lot of empty dirs under `C:\\Program Files\\dotnet\\sdk`, `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All` and `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App`. Removing those made `--list-sdks` and `--list-runtimes` to no longer list uninstalled runtimes/sdks.","Url":"https://github.com/dotnet/sdk/issues/2725","RelatedDescription":"Closed issue \"Uninstalling may be not enough\" (#2725)"},{"Id":"390775310","IsPullRequest":false,"CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Number":"2748","RawContent":null,"Title":"Option to treat NETSDK warnings as errors","State":"closed","Body":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm.","Url":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748)"},{"Id":"390333769","IsPullRequest":false,"CreatedAt":"2018-12-12T17:36:19","Actor":"abpiskunov","Number":"2747","RawContent":null,"Title":"Add publish capabilities for SDK based ClassLibraries and ConsoleApps","State":"open","Body":"Per our discussion with @nguerrera and @davkean we need to switch to new capabilities schema for publish (see below). To accomplish that one of the workitems is to add\r\n\r\n- FolderPublish to SDK-based class libraries and console apps , along with WPF and WinForms (if it is not present yet)\r\n- AppServicePublish to SDK-based class libraries and console apps \r\n\r\nThis needs to happen in P2 and earlier rather than later since Publish would need to commit and test changes after all capabilities are added.\r\n\r\nCapabilities \r\n \r\n•         \"Publish\": all projects that support any kind of publish should contain this capability\r\no    All .NET project types\r\n•         \"FolderPublish\": if project supports publishing to folder\r\no    Class libraries  (classic and core). Note: we don't own Publish for classic class libraries and classic ConsoleApps, ClickOnce does. There should be separate work item tracking ClickOnce support for our publish framework. However we can add capability now and it would light up when ClickOnce adds apublish provider.\r\no    Console app (classic, core). \r\no    WebSites, WAP, Web core\r\no    WPF (core and classic)\r\no    WinForms (classic and core)\r\n•         \"AppServicePublish\": if project is publishable to any web related publish target: Web, AppService, etc \r\no    Console apps (classic and core)\r\no    WebSites, WAP, Web core\r\n \r\nPotential pending capabilities:\r\n•         \"ClickOnce\"\r\no    Classic console apps\r\no    WPF (classic)\r\no    WinForms (classic)\r\n•         \"MSIX\"\r\no    Console apps (classic and core)\r\no    WPF (classic and core)\r\no    WinForms (classic and core)\r\n \r\n \r\n \r\nProviders \r\n \r\n•         FolderProvider: AppliesTo(\"Publish&FolderPublish\")\r\n•         AppServiceProvider: AppliesTo(\"Publish&AppServicePublish\")\r\n•         IISProvider: AppliesTo(\"Publish&Web\")\r\n•         AzureVMProvider: AppliesTo(\"Publish&Web\")\r\n•         AppServiceLinuxProvider: AppliesTo(\"Publish&DotNetCoreWeb\")\r\n•         ContainerRegistryProvider:AppliesTo(Publish&AppServicePublish&(Web|DotnetCoreWeb))\r\n•         ClickOnceProvider:AppliesTo(Publish&ClickOnce)\r\n•         MSIXProvider:AppliesTo(Publish&MSIX)\r\n \r\n \r\nWorkitems:\r\n \r\n•\tAdd FolderPublish to WPF and WinForms (classic and core), Class Libraries and Console Apps (classic and core). Some of them already have it , just make sure all of them have. <- CSharp & SDK\r\n•\tAdd AppServicePublish to Console apps (classic and core) <- CSharp and SDK\r\n•\tAdd AppServicePublish to WebSites, WAP, and Core Web <- WAP and WebSdk\r\n \r\nClickOnce and MSIX I would leave to their owner to request/add when they are ready.\r\n","Url":"https://github.com/dotnet/sdk/issues/2747","RelatedDescription":"Open issue \"Add publish capabilities for SDK based ClassLibraries and ConsoleApps\" (#2747)"},{"Id":"389994622","IsPullRequest":true,"CreatedAt":"2018-12-11T23:11:35","Actor":"jainaashish","Number":"2745","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"open","Body":"Keeping it consistent with 2.2.2xx train","Url":"https://github.com/dotnet/sdk/pull/2745","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2745)"},{"Id":"388856924","IsPullRequest":true,"CreatedAt":"2018-12-11T20:00:15","Actor":"dotnet-bot","Number":"2734","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2734","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2734)"},{"Id":"389616201","IsPullRequest":true,"CreatedAt":"2018-12-11T18:52:09","Actor":"wli3","Number":"2741","RawContent":null,"Title":"Merge/2.1.6xx to 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2741","RelatedDescription":"Closed or merged PR \"Merge/2.1.6xx to 2.2.2xx\" (#2741)"},{"Id":"389836302","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:37","Actor":"nugetlurker","Number":"2743","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2743","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2743)"},{"Id":"389836305","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:03","Actor":"nugetlurker","Number":"2744","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2744","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2744)"},{"Id":"389753827","IsPullRequest":true,"CreatedAt":"2018-12-11T13:02:02","Actor":"dotnet-maestro[bot]","Number":"2742","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2742","RelatedDescription":"Open PR \"Update dependency files\" (#2742)"},{"Id":"389095908","IsPullRequest":true,"CreatedAt":"2018-12-11T05:51:42","Actor":"dsplaisted","Number":"2738","RawContent":null,"Title":"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher","State":"closed","Body":"Fixes dotnet/cli#10124\r\n\r\nAlso fixes #2527","Url":"https://github.com/dotnet/sdk/pull/2738","RelatedDescription":"Closed or merged PR \"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher\" (#2738)"},{"Id":"389564061","IsPullRequest":true,"CreatedAt":"2018-12-11T01:58:29","Actor":"nguerrera","Number":"2740","RawContent":null,"Title":"Attempt to fix broken official build and run full msbuild tests only on correct leg","State":"open","Body":"Two severe issues:\r\n\r\n1. Official build is failing, and it's apparently at a line where we are attempting to use undefined $env:VSSDKInstall. It is unclear what this line was accomplishing so I've removed it. I suspect it may have been working around past arcade version issues. Does that ring a bell?\r\n\r\n2. In the port to arcade, the act of running tests against full msbuild was coupled to building with full msbuild whereas before it was a custom build argument. Now the latest arcade is always building with VS when available, which means are tests are not running on core on Windows on any leg. I've opportunistically tied it to an env var instead of the build engine.","Url":"https://github.com/dotnet/sdk/pull/2740","RelatedDescription":"Open PR \"Attempt to fix broken official build and run full msbuild tests only on correct leg\" (#2740)"},{"Id":"389501017","IsPullRequest":true,"CreatedAt":"2018-12-11T01:22:12","Actor":"wli3","Number":"2739","RawContent":null,"Title":"Use PackageVersion for shim gen","State":"closed","Body":"fix #2698\r\nPackageVersion should be the source of truth for nuget layout.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/3c9b61826814dc800a2a295f0985ce4f295483d6/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L28","Url":"https://github.com/dotnet/sdk/pull/2739","RelatedDescription":"Closed or merged PR \"Use PackageVersion for shim gen\" (#2739)"},{"Id":"388920248","IsPullRequest":true,"CreatedAt":"2018-12-09T18:55:11","Actor":"dotnet-maestro[bot]","Number":"2736","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2736","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2736)"},{"Id":"389031990","IsPullRequest":false,"CreatedAt":"2018-12-09T15:09:06","Actor":"nguerrera","Number":"2737","RawContent":null,"Title":"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized","State":"open","Body":"_From @pinkfloydx33 on December 5, 2018 13:40_\n\nI'm trying to upgrade my web application from netCore 2.1 to 2.2. I have updated the TargetFramework to netcoreapp2.2 and I receive the following errors upon restore/build/clean:\r\n\r\n```\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\n```\r\n\r\nI have also done a manual clean (deleting obj/bin directories). \r\n\r\nI **can** build if I change from using `<TargetFramework>` to `<TargetFrameworks>`, however I'd rather not do this and attempt to locate the underlying issue. I have two test projects in the same solution that reference the main project. I was able to migrate _them_ to netcoreapp2.2 without switching to TargetFramework**s**, I would like to do the same thing for the main web app.\r\n\r\nWhen I use TargetFramework (singular), Visual Studio updates the dependencies graph and removes the SDK node:\r\n![image](https://user-images.githubusercontent.com/395615/49516771-63d52380-f868-11e8-9f5c-49ac2676585f.png)\r\n\r\nI've tried adding a global.json specifying the SDK version directly as 2.2.100 but that doesn't make any difference.\r\n\r\nHere is my .csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<AssemblyName>MyProduct.Web</AssemblyName>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t<PreserveCompilationContext>true</PreserveCompilationContext>\r\n\t\t<LangVersion>latest</LangVersion>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup>\r\n\t\t<GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n\t\t<PackageId>$(AssemblyName)</PackageId>\r\n\t\t<Authors>MyCompany</Authors>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\r\n\t\t<RazorCompileOnBuild>false</RazorCompileOnBuild>\r\n\t\t<RazorCompileOnPublish>false</RazorCompileOnPublish>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n\t  <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Update=\"wwwroot\\**\\*\">\r\n\t\t\t<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n\t\t</None>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Core\\MyProduct.Web.Core.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Api.Contracts\\MyProduct.Web.Api.Contracts.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.ViewModels\\MyProduct.Web.ViewModels.csproj\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n\t\t<PackageReference Include=\"BeginCollectionItemCore\" Version=\"1.0.4\" />\r\n\t\t<PackageReference Include=\"Novell.Directory.Ldap.NETStandard\" Version=\"2.3.5\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.2.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"2.2.0\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.4\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Content Update=\"Views\\_ViewImports.cshtml\">\r\n\t\t\t<Pack>$(IncludeRazorContentInPack)</Pack>\r\n\t\t</Content>\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\n\n_Copied from original issue: dotnet/corefx#33834_","Url":"https://github.com/dotnet/sdk/issues/2737","RelatedDescription":"Open issue \"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized\" (#2737)"},{"Id":"388893591","IsPullRequest":false,"CreatedAt":"2018-12-08T06:49:25","Actor":"yyjdelete","Number":"2735","RawContent":null,"Title":"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview","State":"open","Body":"Move from aspnet/AspNetCore#4490\r\n\r\n### Step\r\ndotnet sdk 3.0.0-preview-27122-01 is needed.\r\n1. `dotnet new webapi`\r\n2. change the csproj to add an FrameworkReference   `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />`\r\n3. `dotnet run`\r\n\r\nIt can also be reproduce with `dotnet new console` by add more than one same FrameworkReference\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n***NOTE:***\r\nWhen the number of duplicated FrameworkReference is changed, the `xxx.runtimeconfig.json` only change after an `dotnet clean` and build, seems the cache and build have different rule in this special case? Not sure if it's another issue, or just an part of this.\r\n\r\n### Expected\r\nBuild error, or run successful.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.0.0-preview-18579-0056\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Actual\r\nBuild successful, but run failed with `Invalid runtimeconfig.json`. See the duplicate `Microsoft.AspNetCore.App` in `frameworks` here.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Details\r\ndotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n<details>\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18290\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview3-009430 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>","Url":"https://github.com/dotnet/sdk/issues/2735","RelatedDescription":"Open issue \"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview\" (#2735)"},{"Id":"388822770","IsPullRequest":false,"CreatedAt":"2018-12-08T00:32:25","Actor":"dagood","Number":"2733","RawContent":null,"Title":"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec","State":"closed","Body":"In this nupkg from a recent build:\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.sdk/3.0.100-preview.18603.1/microsoft.net.sdk.3.0.100-preview.18603.1.nupkg\r\n\r\nThe nuspec contains this line:\r\n\r\n```\r\n<repository type=\"git\" url=\"https://github.com//\" commit=\"7bb277dbfdfe52a71b9decc88897510cc8d6be42\" />\r\n```\r\n\r\n`https://github.com//` should be `https://github.com/dotnet/sdk`\r\n\r\nThis might be an Arcade issue, failure to detect the source? I'm not familiar enough with how packaging works now to quickly find where this is happening.\r\n\r\n(I was only looking for the commit, but figured I should file this issue for the wrong url anyway.)","Url":"https://github.com/dotnet/sdk/issues/2733","RelatedDescription":"Closed issue \"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec\" (#2733)"},{"Id":"388114295","IsPullRequest":false,"CreatedAt":"2018-12-07T18:53:58","Actor":"Szer","Number":"2724","RawContent":null,"Title":"FSharp.Core explicit dependency downgraded to implicit one","State":"closed","Body":"**Problem:**\r\n\r\nIf I put explicit dependency on FSharp.Core higher than implicit one (which for 2.1.500 is 4.5.2) it will downgrade it to implicit one no matter what.\r\n\r\n**Steps to reproduce**\r\n* Net SDK 2.1.500\r\n* FSproj:\r\n```fsproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup> \r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"FSharp.Core\" Version=\"4.5.4\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n* useless Program.fs\r\n```fsharp\r\nmodule A\r\nlet a = 1\r\n```\r\n* `dotnet restore` or `dotnet build`\r\n* check `FSharp.Core` version in `obj\\project.assets.json`\r\n\r\n**Expected**\r\n\r\n`FSharp.Core` should restore to explicit version, to `4.5.4`\r\n\r\n**Actual**\r\n\r\n`FSharp.Core` is being restored to implicit version, to `4.5.2`\r\n\r\n**Known workarounds**\r\n\r\n* Add `<DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>` to fsproj\r\n* Use VisualStudio 15.9.3 `ctrl-shift-B` (strangely it restores OK)\r\n* Use `Paket`\r\n\r\n**Notes**\r\n\r\nThis behavior is the reason for package degradation warnings in case any other packages require something like `>=4.5.4` or `=4.5.4`","Url":"https://github.com/dotnet/sdk/issues/2724","RelatedDescription":"Closed issue \"FSharp.Core explicit dependency downgraded to implicit one\" (#2724)"},{"Id":"388771076","IsPullRequest":false,"CreatedAt":"2018-12-07T18:47:17","Actor":"jainaashish","Number":"2732","RawContent":null,"Title":"Consume NuGet /embed assets group for interop type assemblies from NuGet package","State":"open","Body":"This is the tracking issue to update dotnet build tasks to consume new `/embed` assets group from NuGet packages for interop type assemblies so that Project System passes it as `link` instead of `ref` to compiler.\r\n\r\nCorresponding NuGet issue# https://github.com/NuGet/Home/issues/2365\r\n\r\n@livarcocc @nguerrera @dsplaisted @rrelyea ","Url":"https://github.com/dotnet/sdk/issues/2732","RelatedDescription":"Open issue \"Consume NuGet /embed assets group for interop type assemblies from NuGet package\" (#2732)"},{"Id":"388449684","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:32","Actor":"dotnet-bot","Number":"2727","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2727","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2727)"},{"Id":"388645904","IsPullRequest":true,"CreatedAt":"2018-12-07T17:24:10","Actor":"dotnet-maestro[bot]","Number":"2730","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2730","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2730)"},{"Id":"388718371","IsPullRequest":false,"CreatedAt":"2018-12-07T16:17:33","Actor":"AArnott","Number":"2731","RawContent":null,"Title":"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file","State":"closed","Body":"Building [a trivially simple VB console app](https://github.com/AArnott/SPSS.NET/blob/5ac57c55aa10611f0f4290fbd3187375ab95c468/src/SimpleDemo/SimpleDemo.vbproj#L1-L10) fails with:\r\n\r\n>vbc : error BC2001: file 'C:\\Users\\andarno\\AppData\\Local\\Temp\\.NETFramework' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\nvbc : error BC2001: file 'D:\\git\\SPSS.NET\\src\\SimpleDemo\\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\\git\\SPSS.NET\\src\\SimpleDemo\\SimpleDemo.vbproj]\r\n\r\nThe VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:\r\n\r\n![image](https://user-images.githubusercontent.com/3548/49659001-1e476080-f9f8-11e8-9237-834827fd6794.png)\r\n\r\nThis repros on 15.8, 15.9, and 16.0 Preview 1.","Url":"https://github.com/dotnet/sdk/issues/2731","RelatedDescription":"Closed issue \"Building VB console app fails, unable to find \"%TEMP%\\.NETFramework,Version=v4.6.AssemblyAttributes.vb\" file\" (#2731)"},{"Id":"388449696","IsPullRequest":true,"CreatedAt":"2018-12-07T01:30:08","Actor":"dotnet-bot","Number":"2728","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2728","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2728)"},{"Id":"388461573","IsPullRequest":false,"CreatedAt":"2018-12-07T00:57:37","Actor":"NTaylorMullen","Number":"2729","RawContent":null,"Title":"Represent FrameworkReference of transitive projects and packages in the deps.json file.","State":"open","Body":"Today transitive project/package references aren't properly represented in a deps.json. For instance given this project (Bug4332 is a web app, Bug4332RCL is a Razor class library, both targeting netcoreapp3.0):\r\n![image](https://user-images.githubusercontent.com/2008729/49620733-0f6c9980-f977-11e8-8da3-e2d28605a2e1.png)\r\n\r\nToday you get the following `Bug4332.deps.json` entry for `Bug4332RCL`:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThe min-bar expectation would be for the deps.json to look something like:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"dependencies\": {\r\n          \"Microsoft.AspNetCore.App\": \"3.0.0-preview-18579-0056\"\r\n        },\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThis is blocking [a core scenario](https://github.com/aspnet/AspNetCore/issues/4332) in ASP.NET Core MVC 3.0 of having Razor views in a class library.\r\n\r\nLastly, I imagine this issue depends on the completion of the following (please correct me if i'm wrong):\r\n- **Referencing a shared framework does not flow across ProjectReference** https://github.com/dotnet/sdk/issues/2420 \r\n- **Represent FrameworkReferences in NuGet packages and assets files** https://github.com/NuGet/Home/issues/7342 \r\n\r\n\r\n@livarcocc @dsplaisted @natemcmaster @mkArtakMSFT @rynowak","Url":"https://github.com/dotnet/sdk/issues/2729","RelatedDescription":"Open issue \"Represent FrameworkReference of transitive projects and packages in the deps.json file.\" (#2729)"},{"Id":"388363069","IsPullRequest":false,"CreatedAt":"2018-12-06T19:38:29","Actor":"sarbjithanjra","Number":"2726","RawContent":null,"Title":"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648","State":"closed","Body":"Hi on 5 Dec 2018, I downloaded the .NET Core SDK with version 2.2.100 and after install on my sytem, i checked that there is an existing 2.2.200-preview-009648 version is installed. Please let me know which one latest? it seem 2.2.100 is latest as per download page but from version number it seem 2.2.200 is latest.","Url":"https://github.com/dotnet/sdk/issues/2726","RelatedDescription":"Closed issue \"Which one is latest version of .NET Core 2.2.100 or 2.2.200-preview-009648\" (#2726)"},{"Id":"387757437","IsPullRequest":false,"CreatedAt":"2018-12-05T19:45:55","Actor":"AArnott","Number":"2720","RawContent":null,"Title":" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'","State":"closed","Body":"Very similar to #1321, except that it works fine on my own machine, but [consistently fails when run in Azure Pipelines](https://dev.azure.com/azure-public/vside/_build/results?buildId=816). \r\n\r\n> C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1005: Assets file 'D:\\a\\1\\s\\obj\\Microsoft.VisualStudio.Composition.LocalizationShell\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'. Ensure that restore has run and that you have included 'netstandard1.5' in the TargetFrameworks for your project. [D:\\a\\1\\s\\src\\Microsoft.VisualStudio.Composition.LocalizationShell\\Microsoft.VisualStudio.Composition.LocalizationShell.csproj]\r\n\r\nThe [LocalizationShell project targets netstandard1.0](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition.LocalizationShell/Microsoft.VisualStudio.Composition.LocalizationShell.csproj#L7), and is referenced by [a multitargeting project that targets several frameworks including netstandard1.5](https://github.com/Microsoft/vs-mef/blob/7059adf14349b456c8c9e633dc496b0ee1945b4b/src/Microsoft.VisualStudio.Composition/Microsoft.VisualStudio.Composition.csproj#L3).\r\n\r\nThe odd thing is this works on my machine, on AppVeyor, and even on Azure Pipelines in the past. But now it's consistently failing.\r\n\r\nThis *may* be a dupe of #2563","Url":"https://github.com/dotnet/sdk/issues/2720","RelatedDescription":"Closed issue \" error NETSDK1005: Assets file 'D:\\a\\1\\s\\...\\project.assets.json' doesn't have a target for '.NETStandard,Version=v1.5'\" (#2720)"},{"Id":"387825674","IsPullRequest":false,"CreatedAt":"2018-12-05T16:44:33","Actor":"xoofx","Number":"2723","RawContent":null,"Title":"How to debug msbuild?","State":"closed","Body":"Hey,\r\n\r\nSo I would like to investigate a problem related to [slow RAR in msbuild](https://github.com/Microsoft/msbuild/issues/2015) and while I have been able to initially hack something to debug msbuild, that was very convoluted, copying files around from regular Sdk...etc.\r\n\r\nSo I would like to do this more cleanly and follow a more deterministic procedure to debug directly MsBuild project from MsBuild.sln solution  (so it is issuing a dotnet msbuild.dll or msbuild.exe)  for \r\n1.  new csproj with .NET Sdk\r\n2.  regular old csproj \r\n\r\nWhich repository should I build, variable that I should set...etc.? (Or I could avoid building by reusing maybe an installed dotnet folder?)\r\n\r\n## For new csproj\r\n\r\nLet's try just on the new csproj format for now, starting with a plain `dotnet new --name Helloworld`\r\n\r\nAssuming that I built this repository, and I'm setting the MSBuildSDKsPath to point to the `artifacts\\Debug\\bin\\Sdks`\r\n\r\nI'm getting the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/715038/49525579-5a6eaa00-f8ae-11e8-9220-1c9166120934.png)\r\n\r\n```\r\nProject \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" on node 1 (default targets).\r\nC:\\Code\\dotnet\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(33,11): error MSB4226: The imported project\r\n \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props\" was not found. Also, tried to find\r\n \"Current\\Microsoft.Common.props\" in the fallback search path(s) for $(MSBuildExtensionsPath) - \"C:\\Program Files (x86)\r\n\\MSBuild\" . These search paths are defined in \"C:\\Code\\msbuild\\artifacts\\Debug\\bin\\MSBuild\\net472\\MSBuild.exe.Config\".\r\nConfirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search pat\r\nhs. [C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj]\r\nDone Building Project \"C:\\Work\\tmp\\HelloWorld\\Helloworld.csproj\" (default targets) -- FAILED.\r\n```\r\n\r\nIt is trying to resolve `artifacts\\Debug\\bin\\MSBuild\\net472\\Current\\Microsoft.Common.props` which is not in this folder.\r\nNot sure why it is trying `Current` by default, while the solution seems to build in this file in `artifacts\\Debug\\bin\\15.0\\Microsoft.Common.props` , so assume that the tooling version should be 15.0... but still, can I setup a MsBuild special variable path for pointing to this folder?\r\n\r\nSo likely after that, it will complain about missing NuGet resolver or similar. How do I pass them through?\r\n\r\ncc: @davkean @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2723","RelatedDescription":"Closed issue \"How to debug msbuild?\" (#2723)"},{"Id":"387824002","IsPullRequest":false,"CreatedAt":"2018-12-05T15:57:16","Actor":"vitek-karas","Number":"2722","RawContent":null,"Title":"RID publish as framework dependent app produces broken app on Linux","State":"open","Body":"The simplest repro:\r\n\r\nOn Linux (I used Ubuntu 18)\r\ninstall .NET Core SDK 2.2.100\r\nrun:\r\n`mkdir webapp`\r\n`cd webapp`\r\n`dotnet new web`\r\n`dotnet publish -c release -r linux-x64 --self-contained false`\r\n`./bin/release/netcoreapp2.2/linux-x64/publish/webapp`\r\n\r\nThis will fail to find a usable framework to run on.\r\n\r\nThe root cause is that when we publish a RID specific (so with apphost) app as framework dependent, for some reason the SDK includes `hostfxr` and `hostpolicy` libraries in the published folder. The `apphost` searches for `hostfxr` first in the local folder, then in global locations. Since it finds it in the local folder it uses that. Then it tries to resolve a framework, but on Linux where there is no global location for frameworks, it looks only in the local folder... and fails.\r\n\r\nOn Windows to works \"by luck\", we still load the `hostfxr` from the app, but then since we do have global location for frameworks, we end up loading the framework from the global location.\r\n\r\nDeleting the `hostfxr` and `hostpolicy` from the publish folder doesn't help, because for some reason they are listed as native runtime assets in the `.deps.json`. In fact there are native assets for `hostpolicy`, `hostfxr` and `apphost` which won't resolve at runtime either.\r\n\r\nThe SDK should not include `hostfxr`, `hostpolixy` in the publish folder and it should not include dependencies to the `Microsoft.NETCore.DotNetHostPolicy`, `Microsoft.NETCore.DotNetHostResolver` and `Microsoft.NETCore.DotNetAppHost` in the `.deps.json` since those bring wrong native assets.","Url":"https://github.com/dotnet/sdk/issues/2722","RelatedDescription":"Open issue \"RID publish as framework dependent app produces broken app on Linux\" (#2722)"},{"Id":"387804807","IsPullRequest":false,"CreatedAt":"2018-12-05T15:18:16","Actor":"NinoFloris","Number":"2721","RawContent":null,"Title":"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings","State":"open","Body":"Could not upgrade all projects to new 2.2.100 sdk, as we got conflict warnings for among others \r\n\r\n```\r\n1:7>/usr/local/share/dotnet/sdk/2.2.100/Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Authentication.Abstractions\" that couldnot be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/projpath]\r\n```\r\n\r\n- Microsoft.Extensions.Options\r\n- Microsoft.Extensions.DependencyInjection.Abstractions\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.Extensions.Configuration.Abstractions\r\n- Microsoft.AspNetCore.Hosting\r\n- Microsoft.AspNetCore.Hosting.Abstractions\r\n- Microsoft.EntityFrameworkCore\r\n- Microsoft.AspNetCore.WebUtilities\r\n- Microsoft.AspNetCore.Authentication.Abstractions\r\n\r\nWhat all of these packages have in common is that they list a 2.2.0 release on nuget.org\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Options/2.2.0 and if you look carefully they are all at Downloads: 0. \r\n\r\nWhich is why msbuild detailed logs gives errors like these \r\n\r\n```\r\n         Dependency \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n[...]\r\nThere was a conflict between \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n             \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was chosen because it was primary and \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was not.\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll].\r\n                 /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n                   Project file item includes which caused reference \"/Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\".\r\n                     /Users/nfloris/.nuget/packages/microsoft.extensions.options/2.1.0/lib/netstandard2.0/Microsoft.Extensions.Options.dll\r\n             References which depend on \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [].\r\n                 myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n                   Project file item includes which caused reference \"myproj/bin/Debug/netcoreapp2.2/myproj.dll\".\r\n                     myproj/bin/Debug/netcoreapp2.2/myproj.dll\r\n```\r\n\r\n**Could not resolve this reference. Could not locate the assembly \"Microsoft.Extensions.Options, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".**\r\n\r\nNow that seems like a problem","Url":"https://github.com/dotnet/sdk/issues/2721","RelatedDescription":"Open issue \"Could not upgrade projects to new 2.2.100 sdk getting conflict warnings\" (#2721)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console apps. ASP.NET Core is not yet functional.\r\n\r\nSee following known issues:\r\n\r\n* [dotnet/core-sdk #75](https://github.com/dotnet/core-sdk/issues/75)\r\n* [dotnet/core-sdk #76](https://github.com/dotnet/core-sdk/issues/76)\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1073371092515840000","CreatedAt":"2018-12-14T00:16:25+00:00","UserScreenname":"dotnet","Text":"C# and Visual Basic files get Regex language support in @VisualStudio 2019 Preview\nhttps://t.co/NL5QgAl9hq https://t.co/WWTK6BT5RG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":116,"FavoriteCount":52,"RawContent":null},{"Id":"1072638045227270144","CreatedAt":"2018-12-11T23:43:33+00:00","UserScreenname":"dotnet","Text":"Blogged: .NET Framework December 2018 Security and Quality Rollup https://t.co/5PllosL5i2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":8,"RawContent":null},{"Id":"1072146418868064256","CreatedAt":"2018-12-10T15:10:00+00:00","UserScreenname":"dotnet","Text":"Learn about writing tests for @AzureFunctions with Senior Program Manager Jeff Hollan (@jeffhollan) in this episode… https://t.co/18tWdVma7r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1070731847620050944","CreatedAt":"2018-12-06T17:29:00+00:00","UserScreenname":"dotnet","Text":"Learn about the latest F# Tooling Updates for Visual Studio 2017 from @_cartermp in this episode of the #OnDotNet s… https://t.co/wSjVH0qlRz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":15,"RawContent":null},{"Id":"1070171866193571840","CreatedAt":"2018-12-05T04:23:50+00:00","UserScreenname":"dotnet","Text":"Imagine you could draw an architecture and have it converted to an Azure environment. Silly? You bet.  But also ins… https://t.co/A13GJJ7iEw","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":61,"FavoriteCount":19,"RawContent":null},{"Id":"1070077811283632130","CreatedAt":"2018-12-04T22:10:05+00:00","UserScreenname":"dotnet","Text":"Happening now @ #MSFTConnect - Join @CoolCSH &amp; Mike Harsh as they explore the latest #dotNET Core release. PLUS, yo… https://t.co/0yWWIL76wp","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":19,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2018-12-14T05:30:55.561693Z","RunDurationInMilliseconds":26696}