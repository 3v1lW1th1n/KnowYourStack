{"Data":{"Blog":{"FeedItems":[{"Title":"Get Started with Free Xamarin Training on Microsoft Learn","PublishedOn":"2019-06-21T19:10:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how to build cross-platform mobile applications with the new Xamarin.Forms content on Microsoft Learn. The new and completely free platform where you can earn points and badges, level up, and...","Href":"https://devblogs.microsoft.com/xamarin/microsoft-learn-free-xamarin-training/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio for Mac","PublishedOn":"2019-06-19T18:21:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2019 for Mac version 8.2 is officially available as a preview. Now featuring significant improvements to the XAML editing experience for Xamarin developers. The Xamarin.Forms XAML...","Href":"https://devblogs.microsoft.com/xamarin/xaml-intellisense-vs4m-xamarin-forms/","RawContent":null},{"Title":"Automatic Android SDK Management","PublishedOn":"2019-06-17T20:24:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As a mobile developer building apps for Android, there are many tools used under the hood to build, deploy, and debug your Android applications. We know this can be an intimidating process. So to...","Href":"https://devblogs.microsoft.com/xamarin/automatic-android-sdk-management/","RawContent":null},{"Title":"Xamarin Podcast: Xamarin.Forms 4 And So Much More!","PublishedOn":"2019-06-14T16:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Keeping up with the latest in .NET, C#, Xamarin, and Azure is easier than ever. Co-hosts Matt Soucoup and James Montemagno cover a range of topics relevant to Xamarin developers from designing mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-xamarin-forms-4/","RawContent":null},{"Title":"Grial UI Kit: Building Beautiful Xamarin.Forms Apps, Faster","PublishedOn":"2019-06-12T17:07:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Leonardo Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UI Kit and Gorilla Player. UXDivers specializes in designing and coding...","Href":"https://devblogs.microsoft.com/xamarin/grial-ui-kit-xamarin-forms/","RawContent":null},{"Title":"Join the Microsoft Team at Xamarin Developer Summit","PublishedOn":"2019-06-10T16:54:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"On July 11-12th, the community-run Xamarin Developer Summit is set to launch in Houston, Texas. The two-day conference is packed full of amazing Xamarin content, covering a wide range of mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-developer-summit/","RawContent":null},{"Title":"Use Maps to Display and Navigate Users with Xamarin.Essentials","PublishedOn":"2019-06-07T16:26:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"A common scenario for mobile apps is to help their users get to a specific location. This may be a restaurant, office, or the trailhead for the most amazing hike in the pacific northwest. We can...","Href":"https://devblogs.microsoft.com/xamarin/maps-navagation-xamarin-essentials/","RawContent":null},{"Title":"CheckBox with Xamarin.Forms 4.1.0 Pre-Release","PublishedOn":"2019-06-05T19:34:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Just a few weeks ago we shipped Xamarin.Forms 4.0, which introduced the new Shell navigation for quickly bootstrapping your applications. As well as image source unification to make it convenient to...","Href":"https://devblogs.microsoft.com/xamarin/checkbox-xamarin-forms-4-1-0-pre-release/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in June","PublishedOn":"2019-06-03T18:50:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Jumpstart your next mobile development projects by networking with your local community and getting the latest updates about Xamarin and .NET related technologies. Discover upcoming developer events...","Href":"https://devblogs.microsoft.com/xamarin/june-developer-events-xamarin-dotnet/","RawContent":null},{"Title":"Customer Showcase: BBVA â€“ Augmented Reality House Hunting","PublishedOn":"2019-05-31T16:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently launched a case study series with invited customers to explore their applications using various Microsoft technologies that address business needs. In this post, we look at Valora View, a...","Href":"https://devblogs.microsoft.com/xamarin/bbva-xamarin-customer-showcase/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9872238369","Type":"PullRequestEvent","CreatedAt":"2019-06-22T02:13:54","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3273","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Restore ConvertResourcesCases skipping\" (#3273) at xamarin/xamarin-android","RelatedBody":"[02c07ed6][0] introduced a refinement on `<ConvertResourcesCases/>` to\r\nallow it to skip certain \"well-known\" assemblies that don't need\r\nprocessing.  It used an MSBuild item group to define the list of\r\nwell-known assemblies.  Each item in the group was a name of a\r\nwell-known assembly, without any file extension.\r\n\r\n02c07ed6 also included an automated test that checked the build output\r\nfor each of the well-known assemblies that should be skipped when\r\nbuilding a test project.  But one of the variable names in the test code\r\nwas unintentionally switched around, so the test was actually skipping\r\nover that check for the expected assemblies.\r\n\r\nLater, [b255da27][1] adapted the assembly skipping mechanism slightly to\r\nuse custom metadata to define the list of well-known assemblies.  This\r\nwas a step toward toward using custom metadata as a more general\r\ntechnique for various other scenarios too.\r\n\r\nJust by chance, there was a tiny missing change in b255da27, which meant\r\nthat the assembly skipping behavior got unintentionally disabled.  The\r\ntrouble was that the original item group in 02c07ed6 had been using just\r\nthe name of the assembly with no file extension, while the new commit\r\nused the full path to the assembly, including the file extension, and\r\nthere were a couple lines in `ResolveLibraryProjectImports.Extract()`\r\nthat were still searching through the list of \"well-known\" assemblies\r\nusing just the name rather than the full path.\r\n\r\nSeparately, starting in version 28.0.0, the Xamarin.Android.Support.v4\r\nNuGet package started to include a `monoandroid90/` target framework\r\ndirectory.  The `__AndroidLibraryProjects__.zip` embedded resource in\r\nthe `monoandroid90/Xamarin.Android.Support.v4.dll` assembly does *not*\r\ninclude a `res/` directory, so when the `$(TargetFrameworkVersion)` is\r\n`v9.0`, the Xamarin.Android.Support.v4 assembly is no longer passed to\r\n`<ConvertResourcesCases/>` at all.  Accordingly, that assembly name can\r\nnow be removed from the list of expected skipped assemblies in the\r\n`SkipConvertResourcesCases` test.\r\n\r\nI ran the updated `SkipConvertResourcesCases` test locally, first\r\n*without* the change in `<ResolveLibraryProjectImports/>` to confirm\r\nthat it failed, and then also *with* the change to verify that it\r\nsucceeded.\r\n\r\nI also checked that these changes successfully restored the performance\r\ngains from b255da27.\r\n\r\nResults with `$(AndroidUseAapt2)` enabled:\r\n\r\n\tBefore:\r\n\t3359 ms  ConvertResourcesCases                      2 calls\r\n\t2562 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  62 ms  ConvertResourcesCases                      2 calls\r\n\t2500 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nResults with `$(AndroidUseAapt2)` disabled:\r\n\r\n\tBefore:\r\n\t3237 ms  ConvertResourcesCases                      1 calls\r\n\t3234 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  94 ms  ConvertResourcesCases                      1 calls\r\n\t2641 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nThis was the Xamarin.Forms.Performance.Integration.Droid project in this\r\nrepo, using an initial clean build.\r\n\r\n[0]: https://github.com/xamarin/xamarin-android/commit/02c07ed6d9e0a2559d9948750ea798ff56db28e4\r\n[1]: https://github.com/xamarin/xamarin-android/commit/5f27d0cac299cf771cf4e815c4901c7ce768ad7c"},{"Id":"9871685848","Type":"IssuesEvent","CreatedAt":"2019-06-21T22:16:48","Actor":"ndastur","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3272","RelatedDescription":"Opened issue \"R8 compiler fails if custom proguard config edited in VS 2019\" (#3272) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open custom proguard config file in VS 2019 editor\r\n2. Edit file and save\r\n3. R8 will fail with error on compile due to a BOM character being added to the beginning of the file.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nr8 Compiles\r\n\r\n### Actual Behavior\r\nr8 Fails to compile\r\n\r\n### Version Information\r\n\r\nVisual Studio 2019 for Mac 8.1.1\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9871263308","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:42:53","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3267","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix InstantRun Building\" (#3267) at xamarin/xamarin-android","RelatedBody":"Commit 901dba8 made some changes to the way\r\n`_DefineBuildTargetAbis` works. However there\r\nwas a slight problem with the implemetation.\r\n\r\nIn our commercial debug system we will automatically\r\nadd the abi of the target device to the `_BuildTargetAbis`\r\nItemGroup. This happens quite early on in the build process.\r\nHowever the end result of this is that we have duplicate\r\nitems in the `_BuildTargetAbis` ItemGroup.\r\n\r\nThis then causes problems when we try to build the\r\n`libxamarin-app.so`. Because it uses that ItemGroup to\r\ndrive the creation and inclusion of files on disk. If\r\nwe have duplicates in the ItemGroup we end up with\r\nduplicates in the file list passed to the native linker.\r\n\r\n\ti686-linux-android-ld --unresolved-symbols=ignore-in-shared-libs \\\r\n\t\t--export-dynamic -soname libxamarin-app.so -z relro \\\r\n\t\t-z noexecstack --enable-new-dtags --eh-frame-hdr -shared \\\r\n\t\t--build-id --warn-shared-textrel --fatal-warnings \\\r\n\t\t-o obj/Debug/app_shared_libraries/x86/libxamarin-app.so \\\r\n\t\t-m elf_i386 obj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o\r\n\r\nnote the duplicates of the `x86.o` files. These result in the\r\nfollowing error\r\n\r\n\ti686-linux-android-ld: error: obj/Debug/android/typemap.jm.x86.o: multiple definition of 'jm_typemap_header'\r\n\r\nIt turns out the commit 901dba8 left off a Condition which\r\nwill only populate the `_BuildTargetAbis` if it is empty\r\nalready. This PR fixes that."},{"Id":"9871091220","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:09:22","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3271","RelatedDescription":"Opened pull request \"[Mono.Android] set JAVA_HOME when running dx\" (#3271) at xamarin/xamarin-android","RelatedBody":"Continuing to build  on a fresh Windows machine after b98175c1, I hit\r\na new issue:\r\n\r\n    build-tools\\scripts\\JavaCallableWrappers.targets(50,5): error MSB3073:\r\n      The command \"\"C:\\Users\\myuser\\android-toolchain\\sdk\\build-tools\\29.0.0\\dx\" --dex --no-strict --output=\"C:\\src\\xamarin-android\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\mono.android.dex\" \"C:\\src\\xamarin-android\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\mono.android.jar\"\" exited with code -1.\r\n    EXEC No suitable Java found. In order to properly use the Android Developer\r\n    Tools, you need a suitable version of Java JDK installed on your system.\r\n    We recommend that you install the JDK version of JavaSE, available here:\r\n      http://www.oracle.com/technetwork/java/javase/downloads\r\n    If you already have Java installed, you can define the JAVA_HOME environment\r\n    variable in Control Panel / System / Avanced System Settings to point to the\r\n    JDK folder.\r\n    You can find the complete Android SDK requirements here:\r\n      http://developer.android.com/sdk/requirements.html\r\n\r\nThis machine does not have any Oracle JDKs installed, so it is only\r\nusing the Coretto JDK installed in:\r\n\r\n    %userprofile%\\android-toolchain\\jdk\r\n\r\nFor this to work properly, we need to set `JAVA_HOME` during this\r\n`<Exec/>` call.\r\n\r\nAfter doing this, everything works properly."},{"Id":"9871083892","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:07:57","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3270","RelatedDescription":"Opened pull request \"Update NDK to r20\" (#3270) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/android-ndk/ndk/wiki/Changelog-r20\r\nContext: https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html\r\n\r\nGoogle released NDK r20 recently with the following changes:\r\n\r\n  - Updated Clang to r346389c.\r\n  - Updated libc++ to r350972.\r\n  - Add Android Q Beta 1 APIs:\r\n    - MIDI (<amidi/AMidi.h>).\r\n    - Binder.\r\n    - Extensions to several APIs from previous releases\r\n\r\nAlso, this release brings [LLD][0], the new (fast!) linker from the LLVM project\r\nwhich will become the default and only linker in the NDK in the future, so soon\r\nwe will need to start testing our software with it.\r\n\r\n[0]: https://lld.llvm.org/"},{"Id":"9869770679","Type":"IssuesEvent","CreatedAt":"2019-06-21T16:15:34","Actor":"kdubau","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3269","RelatedDescription":"Opened issue \"msbuild /t:Install fails if adb server isn't running\" (#3269) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Make sure you have a device connected and trusted\r\n3. Make sure Visual Studio is _closed_\r\n4. Make sure adb server is _not_ running, `adb kill-server`, or end it from task manger\r\n2. Unzip the attached project Wat.zip\r\n5. Run `msbuild /t:Restore C:\\path\\to\\Wat.csproj`\r\n4. Run `msbuild /t:Install C:\\path\\to\\Wat.csproj`\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n[Wat.zip](https://github.com/xamarin/xamarin-android/files/3315230/Wat.zip)\r\n\r\n### Expected Behavior\r\nIt should start adb and use the connected USB device to install the app.\r\n\r\n### Actual Behavior\r\nIt fails with the error:\r\n```\r\n\"C:\\Users\\kywhi\\Downloads\\Wat\\Wat\\Wat\\Wat.csproj\" (Install target) (1) ->\r\n(_Upload target) ->\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.Debugging.\r\ntargets(624,2): error XA0010: adb is not running. System.AggregateException: One or more errors occurred. ---> System.A\r\nggregateException: One or more errors occurred. ---> System.Net.Sockets.SocketException: No connection could be made be\r\ncause the target machine actively refused it 127.0.0.1:5037 [C:\\Users\\kywhi\\Downloads\\Wat\\Wat\\Wat\\Wat.csproj]\r\n```\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.2.0 Preview 4.0 [29020.217.d16.2stg]\r\nVisualStudio.16.IntPreview/16.2.0-pre.4.0+29020.217.d16.2stg\r\n\r\nXamarin.Android SDK   9.4.0.34 (d16-2/7cce305)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2019-02@c6edaa62f94\r\n    Java.Interop: xamarin/java.interop/d16-2@b2b2610\r\n    LibZipSharp: grendello/LibZipSharp/d16-2@caa0c74\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.27.1@8212a2d\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/master@4f717b6\r\n\r\n### Log File\r\n\r\n[binlog.zip](https://github.com/xamarin/xamarin-android/files/3315249/binlog.zip)\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9868780985","Type":"IssuesEvent","CreatedAt":"2019-06-21T13:56:50","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3268","RelatedDescription":"Opened issue \"[spec] take advantage of aapt2 command-line options\" (#3268) at xamarin/xamarin-android","RelatedBody":"I was reviewing build performance, and the time we spend running aapt/aapt2.\r\n\r\nI noticed some command-line arguments of aapt2 that look like they could be useful:\r\nhttps://developer.android.com/studio/command-line/aapt2\r\n\r\n## aapt2 compile --no-crunch\r\n```\r\nDisables PNG processing.\r\n\r\nUse this option if you have already processed the PNG files, or if\r\nyou are creating debug builds that do not require file size reduction.\r\nEnabling this option results in a faster execution, but increases the\r\noutput file size.\r\n```\r\nMy thought was not to implement what we have for `$(AndroidExplicitCrunch)` + aapt(1), but to pass this for debug builds.\r\n\r\nSo I tried comparing a build with passing `/p:AndroidAapt2CompileExtraArgs=--no-crunch`:\r\n```\r\nBefore:\r\n5675 ms  Aapt2Compile                               2 calls\r\nAfter:\r\n4161 ms  Aapt2Compile                               2 calls\r\n```\r\nLogs: [HelloForms.zip](https://github.com/xamarin/xamarin-android/files/3314739/HelloForms.zip)\r\n\r\nThis was a \"Hello World\" Xamarin.Forms app. \r\n\r\nIf we see benefits with this app, I imagine we'd see even better with apps with lots of PNGs.\r\n\r\n### Implementation\r\n\r\nAdd a new property `$(AndroidAapt2NoCrunch)` that defaults to true for debug builds and false for release builds. If it is not blank, we will use what developers have set.\r\n\r\nWe can use `$(AndroidIncludeDebugSymbols)` to decide if it is a debug build or not, as we already do for d8: https://github.com/xamarin/xamarin-android/blob/8e2c93938b74506f204ea35e6a144342b8254fa6/src/Xamarin.Android.Build.Tasks/Xamarin.Android.D8.targets#L116\r\n\r\n## aapt2 compile --legacy\r\n\r\n```\r\nTreats errors that are permissible when using earlier versions of AAPT\r\nas warnings.\r\n\r\nThis flag should be used for unexpected compile time errors. To resolve\r\nknown behavior changes that you might get while using AAPT2.\r\n```\r\n[Behavior changes in AAPT2](https://developer.android.com/studio/command-line/aapt2#aapt2_changes)\r\n\r\n### Implementation\r\n\r\nWe don't need to use this _yet_, but when we phase out aapt(1) support.\r\n\r\nIf we removed all `<Aapt/>` calls, we should keep the `$(AndroidUseAapt2)` property that defaults to true. If set to `false`, it would pass `--legacy` to `<Aapt2Compile/>`."},{"Id":"9867326980","Type":"PullRequestEvent","CreatedAt":"2019-06-21T09:54:38","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3267","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Fix InstantRun Building\" (#3267) at xamarin/xamarin-android","RelatedBody":"Commit 901dba8c made some changes to the way\r\n`_DefineBuildTargetAbis` works. However there\r\nwas a slight problem with the implemetation.\r\n\r\nIn our commercial debug system we will automatically\r\nadd the abi of the target device to the `_BuildTargetAbis`\r\nItemGroup. This happens quite early on in the build process.\r\nHowever the end result of this is that we have duplicate\r\nitems in the `_BuildTargetAbis` ItemGroup.\r\n\r\nThis then causes problems when we try to build the\r\n`libxamarin-app.so`. Because it uses that ItemGroup to\r\ndrive the creation and inclusion of files on disk. If\r\nwe have duplicates in the ItemGroup we end up with\r\nduplicates in the file list passed to the native linker.\r\n\r\n\ti686-linux-android-ld --unresolved-symbols=ignore-in-shared-libs \\\r\n\t\t--export-dynamic -soname libxamarin-app.so -z relro \\\r\n\t\t-z noexecstack --enable-new-dtags --eh-frame-hdr -shared \\\r\n\t\t--build-id --warn-shared-textrel --fatal-warnings \\\r\n\t\t-o obj/Debug/app_shared_libraries/x86/libxamarin-app.so \\\r\n\t\t-m elf_i386 obj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o\r\n\r\nnote the duplicates of the `x86.o` files. These result in the\r\nfollowing error\r\n\r\n\ti686-linux-android-ld: error: obj/Debug/android/typemap.jm.x86.o: multiple definition of 'jm_typemap_header'\r\n\r\nIn order to fix this we need to make sure we don't have duplicates\r\nin the `_BuildTargetAbis` ItemGroup. MSBuild already has a way to\r\nmake sure ItemGroups are unique via the `KeepDuplicates` attribute.\r\nBy default duplicates will be allowed, however by specifying\r\n\r\n\tKeepDuplicates=\"false\"\r\n\r\non an ItemGroup you can make sure that they are unique at the time\r\nof creation. This is exactly what this PR does. We create a temp\r\nItemGroup to store the split Abi list, then add those to\r\n`_BuildTargetAbis` and don't keep the duplicates."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9873271488","Type":"IssuesEvent","CreatedAt":"2019-06-22T12:59:36","Actor":"taublast","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6631","RelatedDescription":"Opened issue \"[Bug] Button InputTransparent Malfunction\" (#6631) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nTested on Android, guess might be same for all platforms:\r\n\r\nCreate a regular Button with InputTransparent = true.\r\nThe Pressed event is still raised . \r\n(Released and Clicked are not raised as intended..)\r\n \r\n"},{"Id":"9872767708","Type":"IssuesEvent","CreatedAt":"2019-06-22T07:57:55","Actor":"humhei","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6630","RelatedDescription":"Opened issue \"[Enhancement] Change CollectionView SelectionMode to 4 modes\" (#6630) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nCurrently CollectionView SelectionMode has three states\r\n{None,\r\n Single,\r\n Multiple\r\n} \r\n\r\n\r\nUWP have four selection mode state\r\n{\r\n None,\r\nSingle\r\nMultiple,\r\nExtend,\r\n}\r\n![image](https://user-images.githubusercontent.com/25994449/59890094-e935b500-9401-11e9-8880-f7a20a404245.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25994449/59890104-fbafee80-9401-11e9-93cd-bfd714f13b9c.png)\r\n\r\nI think Four state in Android and IOS are also useful\r\nJust take a look at the File explorer\r\n![image](https://user-images.githubusercontent.com/25994449/59890457-8ba26800-9403-11e9-95ff-bb81dee57716.png)\r\n\r\n\r\n## API Changes\r\n\r\n{None,\r\n Single,\r\n Multiple\r\n} \r\nTo \r\n{\r\n None,\r\nSingle\r\nMultiple,\r\nExtended,\r\n}\r\n\r\n\r\n\r\n\r\n## My willing\r\nI am happy to implent this feature in UWP side.\r\nWill keep IOS and Android not supported\r\n\r\n\r\n"},{"Id":"9872038008","Type":"PullRequestEvent","CreatedAt":"2019-06-22T00:19:22","Actor":"humhei","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6629","RelatedDescription":"Opened pull request \"UWP CollectionView SelectionMode\" (#6629) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUWP CollectionView  SelectionMode\r\n\r\n### Issues Resolved ### \r\n#3172\r\n#6489 \r\n#5844\r\n#5625\r\n\r\n- fixes #\r\nUWP CollectionView  SelectionMode\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - CollectionViewRender.cs ->\r\n ItemsViewRender.cs\r\nChanged Render<CollectionView,ItemControl> -> Render<CollectionView,ListViewBase>\r\n\r\nAdded SeletableCollectionViewRender.cs\r\n\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- UWP\r\n\r\n\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n![image](https://user-images.githubusercontent.com/25994449/59956898-13e94180-94c6-11e9-935e-700dd7c527eb.png)\r\n![image](https://user-images.githubusercontent.com/25994449/59956904-1ea3d680-94c6-11e9-94ca-c8d04bf7315a.png)\r\n![image](https://user-images.githubusercontent.com/25994449/59956933-472bd080-94c6-11e9-91f1-77993e70850e.png)\r\n\r\n\r\n\r\n\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9871715837","Type":"PullRequestEvent","CreatedAt":"2019-06-21T22:25:05","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6392","RelatedDescription":"Merged pull request \"[UIKit] Partial update to Xcode 11 Beta 1 and 2 - Part 1 of ?\" (#6392) at xamarin/xamarin-macios","RelatedBody":"Adds new classes included in Xcode 11 Beta 1 and 2, all stuff\r\nincluded in this PR is up to date with Beta 2."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1142066359947407362","CreatedAt":"2019-06-21T13:46:53+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Houstoâ€¦ https://t.co/zcg70tbgE9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":36,"FavoriteCount":16,"RawContent":null},{"Id":"1141695710716469249","CreatedAt":"2019-06-20T13:14:03+00:00","UserScreenname":"xamarinhq","Text":"Thanks to your feedback, #VS4Mac 8.2 has some really great improvements to the XAML editing experience; including iâ€¦ https://t.co/vv0DVw9957","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":35,"FavoriteCount":8,"RawContent":null},{"Id":"1141064668477345794","CreatedAt":"2019-06-18T19:26:31+00:00","UserScreenname":"xamarinhq","Text":"On this episode of the #XamarinShow, @JamesMontemagno and #MSMVP @DanJSiegel show us a super-cool feature of Prismâ€¦ https://t.co/GLEhnDlQjp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"1140735760875872256","CreatedAt":"2019-06-17T21:39:33+00:00","UserScreenname":"xamarinhq","Text":"We want to make sure youâ€™re using the latest tooling. The new and improved Automatic Android SDK Management tool isâ€¦ https://t.co/H0CSaxzj9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"1140660631273652224","CreatedAt":"2019-06-17T16:41:01+00:00","UserScreenname":"xamarinhq","Text":"On the latest Xamarin.Essential API of the week show, we take a look at the File System Helpers API which containsâ€¦ https://t.co/GOGKCwXu6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1139589442732285953","CreatedAt":"2019-06-14T17:44:30+00:00","UserScreenname":"xamarinhq","Text":"Keeping up w/the latest in #dotNET, C#, &amp; #Xamarin is easier than ever. \nThis weekâ€™s #XamarinPodcast includes:\n- hiâ€¦ https://t.co/FDDO27QHDh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":32,"FavoriteCount":11,"RawContent":null},{"Id":"1138875870553300995","CreatedAt":"2019-06-12T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"We make it simple for .NET developers to build beautiful cross-platform apps, fast.\nTake a look at how Grial UI Kitâ€¦ https://t.co/vceU8u475R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":107,"FavoriteCount":48,"RawContent":null},{"Id":"1138511096380309504","CreatedAt":"2019-06-11T18:19:32+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @chewamanda, App Center Program Manager, shows us the latest features in App Centerâ€¦ https://t.co/VHxAknaumJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":28,"FavoriteCount":17,"RawContent":null},{"Id":"1138151096067792898","CreatedAt":"2019-06-10T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"Join us at Xamarin Developer Summit - July 11-12. With 35+ sessions, there is something for everyone:\n- Mobile DevOâ€¦ https://t.co/Ez5mDpM1Az","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":84,"FavoriteCount":35,"RawContent":null},{"Id":"1137049335273840640","CreatedAt":"2019-06-07T17:31:01+00:00","UserScreenname":"xamarinhq","Text":"Our cross-platform API library enables any mobile app that uses the Maps API to launch a map w/ a specific locationâ€¦ https://t.co/BWS4qeqtyU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":34,"RawContent":null},{"Id":"1136679096954449921","CreatedAt":"2019-06-06T16:59:49+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1136666060189573120","CreatedAt":"2019-06-06T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"On this week's Xamarin.Essential API of the week, we take a look at the Compass API; enabling you to monitor the deâ€¦ https://t.co/6Iq1tNqo0B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":13,"RawContent":null},{"Id":"1136362715805552641","CreatedAt":"2019-06-05T20:02:38+00:00","UserScreenname":"xamarinhq","Text":"Now available... the pre-release version of Xamarin.Forms 4.1. And we're happy to say that CheckBox &amp; improved textâ€¦ https://t.co/BGmdIAVxAO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":68,"RawContent":null},{"Id":"1135657873072148482","CreatedAt":"2019-06-03T21:21:51+00:00","UserScreenname":"xamarinhq","Text":"Jumpstart your next mobile dev projects by networking w/ your local community &amp; getting the latest updates aboutâ€¦ https://t.co/39JBottYZu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1134529085961621504","CreatedAt":"2019-05-31T18:36:27+00:00","UserScreenname":"xamarinhq","Text":"We're starting a new case study series. Today, we look at Valora View, a mobile app created by BBVA to help customeâ€¦ https://t.co/Q0HeoB3chG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":22,"RawContent":null},{"Id":"1134188986229035010","CreatedAt":"2019-05-30T20:05:01+00:00","UserScreenname":"xamarinhq","Text":"What's better than sharing 80% of code across #iOS &amp; #Android apps w/ #Xamarin? ...building a backend powered byâ€¦ https://t.co/EZc7s5adqh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":130,"FavoriteCount":36,"RawContent":null},{"Id":"1134136640929193985","CreatedAt":"2019-05-30T16:37:01+00:00","UserScreenname":"xamarinhq","Text":"August 1 2019, Android apps that ship native libraries must provide a 64-bit v of their app.â€¦ https://t.co/JSElMqVSyB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"1133821797059780608","CreatedAt":"2019-05-29T19:45:56+00:00","UserScreenname":"xamarinhq","Text":"Today on @TheXamarinShow,, @JamesMontemagno &amp; #MSMVP @NicoVermeir shows off a tool that will change the life of eveâ€¦ https://t.co/lYUf1XXB4m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":19,"RawContent":null}]}},"RunOn":"2019-06-23T05:30:53.3536175Z","RunDurationInMilliseconds":2703}